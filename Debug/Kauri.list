
Kauri.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3fc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  0800e510  0800e510  0001e510  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea54  0800ea54  00020350  2**0
                  CONTENTS
  4 .ARM          00000000  0800ea54  0800ea54  00020350  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ea54  0800ea54  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea54  0800ea54  0001ea54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea58  0800ea58  0001ea58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800ea5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001670  20000350  0800edac  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019c0  0800edac  000219c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013baa  00000000  00000000  00020379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032bf  00000000  00000000  00033f23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  000371e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f48  00000000  00000000  000382b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b18b  00000000  00000000  000391f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000144ca  00000000  00000000  00054383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a7cf  00000000  00000000  0006884d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f301c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059a4  00000000  00000000  000f306c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000350 	.word	0x20000350
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e4f4 	.word	0x0800e4f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000354 	.word	0x20000354
 800014c:	0800e4f4 	.word	0x0800e4f4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	4605      	mov	r5, r0
 8001028:	460c      	mov	r4, r1
 800102a:	2200      	movs	r2, #0
 800102c:	2300      	movs	r3, #0
 800102e:	4628      	mov	r0, r5
 8001030:	4621      	mov	r1, r4
 8001032:	f7ff fcc3 	bl	80009bc <__aeabi_dcmplt>
 8001036:	b928      	cbnz	r0, 8001044 <__aeabi_d2lz+0x20>
 8001038:	4628      	mov	r0, r5
 800103a:	4621      	mov	r1, r4
 800103c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001040:	f000 b80a 	b.w	8001058 <__aeabi_d2ulz>
 8001044:	4628      	mov	r0, r5
 8001046:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800104a:	f000 f805 	bl	8001058 <__aeabi_d2ulz>
 800104e:	4240      	negs	r0, r0
 8001050:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001054:	bd38      	pop	{r3, r4, r5, pc}
 8001056:	bf00      	nop

08001058 <__aeabi_d2ulz>:
 8001058:	b5d0      	push	{r4, r6, r7, lr}
 800105a:	2200      	movs	r2, #0
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <__aeabi_d2ulz+0x34>)
 800105e:	4606      	mov	r6, r0
 8001060:	460f      	mov	r7, r1
 8001062:	f7ff fa39 	bl	80004d8 <__aeabi_dmul>
 8001066:	f7ff fd0f 	bl	8000a88 <__aeabi_d2uiz>
 800106a:	4604      	mov	r4, r0
 800106c:	f7ff f9ba 	bl	80003e4 <__aeabi_ui2d>
 8001070:	2200      	movs	r2, #0
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <__aeabi_d2ulz+0x38>)
 8001074:	f7ff fa30 	bl	80004d8 <__aeabi_dmul>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4630      	mov	r0, r6
 800107e:	4639      	mov	r1, r7
 8001080:	f7ff f872 	bl	8000168 <__aeabi_dsub>
 8001084:	f7ff fd00 	bl	8000a88 <__aeabi_d2uiz>
 8001088:	4621      	mov	r1, r4
 800108a:	bdd0      	pop	{r4, r6, r7, pc}
 800108c:	3df00000 	.word	0x3df00000
 8001090:	41f00000 	.word	0x41f00000

08001094 <platform_write>:
static stmdev_ctx_t dev_ctx;


static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af04      	add	r7, sp, #16
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	461a      	mov	r2, r3
 80010a0:	460b      	mov	r3, r1
 80010a2:	72fb      	strb	r3, [r7, #11]
 80010a4:	4613      	mov	r3, r2
 80010a6:	813b      	strh	r3, [r7, #8]
  /* Write multiple command */
  reg |= 0x80;
 80010a8:	7afb      	ldrb	r3, [r7, #11]
 80010aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010ae:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Write(handle, LIS331DLH_I2C_ADD_L, reg,
 80010b0:	7afb      	ldrb	r3, [r7, #11]
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b8:	9302      	str	r3, [sp, #8]
 80010ba:	893b      	ldrh	r3, [r7, #8]
 80010bc:	9301      	str	r3, [sp, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	2301      	movs	r3, #1
 80010c4:	2131      	movs	r1, #49	; 0x31
 80010c6:	68f8      	ldr	r0, [r7, #12]
 80010c8:	f001 f8d6 	bl	8002278 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
  return 0;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b088      	sub	sp, #32
 80010da:	af04      	add	r7, sp, #16
 80010dc:	60f8      	str	r0, [r7, #12]
 80010de:	607a      	str	r2, [r7, #4]
 80010e0:	461a      	mov	r2, r3
 80010e2:	460b      	mov	r3, r1
 80010e4:	72fb      	strb	r3, [r7, #11]
 80010e6:	4613      	mov	r3, r2
 80010e8:	813b      	strh	r3, [r7, #8]
  /* Read multiple command */
  reg |= 0x80;
 80010ea:	7afb      	ldrb	r3, [r7, #11]
 80010ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010f0:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Read(handle, LIS331DLH_I2C_ADD_L, reg,
 80010f2:	7afb      	ldrb	r3, [r7, #11]
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	893b      	ldrh	r3, [r7, #8]
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	2131      	movs	r1, #49	; 0x31
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	f001 f9af 	bl	800246c <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <accel_init>:


void accel_init(I2C_HandleTypeDef * i2c_device){
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Initialize mems driver interface */

  dev_ctx.write_reg = platform_write;
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <accel_init+0x5c>)
 8001122:	4a15      	ldr	r2, [pc, #84]	; (8001178 <accel_init+0x60>)
 8001124:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <accel_init+0x5c>)
 8001128:	4a14      	ldr	r2, [pc, #80]	; (800117c <accel_init+0x64>)
 800112a:	605a      	str	r2, [r3, #4]
  dev_ctx.handle = i2c_device;
 800112c:	4a11      	ldr	r2, [pc, #68]	; (8001174 <accel_init+0x5c>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	60d3      	str	r3, [r2, #12]
  /* Initialize platform specific hardware */
  HAL_Delay(5);
 8001132:	2005      	movs	r0, #5
 8001134:	f000 fca6 	bl	8001a84 <HAL_Delay>
  /* Check device ID */
  lis331dlh_device_id_get(&dev_ctx, &whoamI);
 8001138:	4911      	ldr	r1, [pc, #68]	; (8001180 <accel_init+0x68>)
 800113a:	480e      	ldr	r0, [pc, #56]	; (8001174 <accel_init+0x5c>)
 800113c:	f000 f9a0 	bl	8001480 <lis331dlh_device_id_get>

  if (whoamI != LIS331DLH_ID) {
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <accel_init+0x68>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b32      	cmp	r3, #50	; 0x32
 8001146:	d000      	beq.n	800114a <accel_init+0x32>
	while (1) {
 8001148:	e7fe      	b.n	8001148 <accel_init+0x30>
	  /* manage here device not found */
	}
  }

  /* Enable Block Data Update */
  lis331dlh_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 800114a:	2101      	movs	r1, #1
 800114c:	4809      	ldr	r0, [pc, #36]	; (8001174 <accel_init+0x5c>)
 800114e:	f000 f915 	bl	800137c <lis331dlh_block_data_update_set>
  /* Set full scale */
  lis331dlh_full_scale_set(&dev_ctx, LIS331DLH_2g);
 8001152:	2100      	movs	r1, #0
 8001154:	4807      	ldr	r0, [pc, #28]	; (8001174 <accel_init+0x5c>)
 8001156:	f000 f8eb 	bl	8001330 <lis331dlh_full_scale_set>
  /* Configure filtering chain */
  /* Accelerometer - High Pass / Slope path */
  lis331dlh_hp_path_set(&dev_ctx, LIS331DLH_HP_DISABLE);
 800115a:	2100      	movs	r1, #0
 800115c:	4805      	ldr	r0, [pc, #20]	; (8001174 <accel_init+0x5c>)
 800115e:	f000 f9a0 	bl	80014a2 <lis331dlh_hp_path_set>
  //lis331dlh_hp_path_set(&dev_ctx, LIS331DLH_HP_ON_OUT);
  //lis331dlh_hp_reset_get(&dev_ctx);
  /* Set Output Data Rate */
  lis331dlh_data_rate_set(&dev_ctx, LIS331DLH_ODR_5Hz);
 8001162:	2105      	movs	r1, #5
 8001164:	4803      	ldr	r0, [pc, #12]	; (8001174 <accel_init+0x5c>)
 8001166:	f000 f8b4 	bl	80012d2 <lis331dlh_data_rate_set>

}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	2000076c 	.word	0x2000076c
 8001178:	08001095 	.word	0x08001095
 800117c:	080010d7 	.word	0x080010d7
 8001180:	20000380 	.word	0x20000380

08001184 <accel_get_data>:

void accel_get_data(void)
{
 8001184:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001188:	b086      	sub	sp, #24
 800118a:	af04      	add	r7, sp, #16
  /* Read samples in polling mode (no int) */
  while (1) {
    /* Read output only if new value is available */
    lis331dlh_reg_t reg;
    lis331dlh_status_reg_get(&dev_ctx, &reg.status_reg);
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	4619      	mov	r1, r3
 8001190:	4828      	ldr	r0, [pc, #160]	; (8001234 <accel_get_data+0xb0>)
 8001192:	f000 f919 	bl	80013c8 <lis331dlh_status_reg_get>

    if (reg.status_reg.zyxda) {
 8001196:	793b      	ldrb	r3, [r7, #4]
 8001198:	f003 0308 	and.w	r3, r3, #8
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0f4      	beq.n	800118c <accel_get_data+0x8>
      /* Read acceleration data */
      memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 80011a2:	2206      	movs	r2, #6
 80011a4:	2100      	movs	r1, #0
 80011a6:	4824      	ldr	r0, [pc, #144]	; (8001238 <accel_get_data+0xb4>)
 80011a8:	f008 fd6e 	bl	8009c88 <memset>
      lis331dlh_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 80011ac:	4922      	ldr	r1, [pc, #136]	; (8001238 <accel_get_data+0xb4>)
 80011ae:	4821      	ldr	r0, [pc, #132]	; (8001234 <accel_get_data+0xb0>)
 80011b0:	f000 f91b 	bl	80013ea <lis331dlh_acceleration_raw_get>
      acceleration_mg[0] =
        lis331dlh_from_fs2_to_mg(data_raw_acceleration[0]);
 80011b4:	4b20      	ldr	r3, [pc, #128]	; (8001238 <accel_get_data+0xb4>)
 80011b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f874 	bl	80012a8 <lis331dlh_from_fs2_to_mg>
 80011c0:	4603      	mov	r3, r0
      acceleration_mg[0] =
 80011c2:	4a1e      	ldr	r2, [pc, #120]	; (800123c <accel_get_data+0xb8>)
 80011c4:	6013      	str	r3, [r2, #0]
      acceleration_mg[1] =
        lis331dlh_from_fs2_to_mg(data_raw_acceleration[1]);
 80011c6:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <accel_get_data+0xb4>)
 80011c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 f86b 	bl	80012a8 <lis331dlh_from_fs2_to_mg>
 80011d2:	4603      	mov	r3, r0
      acceleration_mg[1] =
 80011d4:	4a19      	ldr	r2, [pc, #100]	; (800123c <accel_get_data+0xb8>)
 80011d6:	6053      	str	r3, [r2, #4]
      acceleration_mg[2] =
        lis331dlh_from_fs2_to_mg(data_raw_acceleration[2]);
 80011d8:	4b17      	ldr	r3, [pc, #92]	; (8001238 <accel_get_data+0xb4>)
 80011da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 f862 	bl	80012a8 <lis331dlh_from_fs2_to_mg>
 80011e4:	4603      	mov	r3, r0
      acceleration_mg[2] =
 80011e6:	4a15      	ldr	r2, [pc, #84]	; (800123c <accel_get_data+0xb8>)
 80011e8:	6093      	str	r3, [r2, #8]
      sprintf((char *)tx_buffer,
              "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <accel_get_data+0xb8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
      sprintf((char *)tx_buffer,
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff f91a 	bl	8000428 <__aeabi_f2d>
 80011f4:	4680      	mov	r8, r0
 80011f6:	4689      	mov	r9, r1
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 80011f8:	4b10      	ldr	r3, [pc, #64]	; (800123c <accel_get_data+0xb8>)
 80011fa:	685b      	ldr	r3, [r3, #4]
      sprintf((char *)tx_buffer,
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f913 	bl	8000428 <__aeabi_f2d>
 8001202:	4604      	mov	r4, r0
 8001204:	460d      	mov	r5, r1
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8001206:	4b0d      	ldr	r3, [pc, #52]	; (800123c <accel_get_data+0xb8>)
 8001208:	689b      	ldr	r3, [r3, #8]
      sprintf((char *)tx_buffer,
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff f90c 	bl	8000428 <__aeabi_f2d>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001218:	e9cd 4500 	strd	r4, r5, [sp]
 800121c:	4642      	mov	r2, r8
 800121e:	464b      	mov	r3, r9
 8001220:	4907      	ldr	r1, [pc, #28]	; (8001240 <accel_get_data+0xbc>)
 8001222:	4808      	ldr	r0, [pc, #32]	; (8001244 <accel_get_data+0xc0>)
 8001224:	f009 fbaa 	bl	800a97c <siprintf>
      CDC_Transmit_FS(tx_buffer, sizeof(tx_buffer));
 8001228:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <accel_get_data+0xc0>)
 800122e:	f008 f923 	bl	8009478 <CDC_Transmit_FS>
  while (1) {
 8001232:	e7ab      	b.n	800118c <accel_get_data+0x8>
 8001234:	2000076c 	.word	0x2000076c
 8001238:	2000036c 	.word	0x2000036c
 800123c:	20000374 	.word	0x20000374
 8001240:	0800e510 	.word	0x0800e510
 8001244:	20000384 	.word	0x20000384

08001248 <lis331dlh_read_reg>:
  *
  */
int32_t __weak lis331dlh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 8001248:	b590      	push	{r4, r7, lr}
 800124a:	b087      	sub	sp, #28
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	461a      	mov	r2, r3
 8001254:	460b      	mov	r3, r1
 8001256:	72fb      	strb	r3, [r7, #11]
 8001258:	4613      	mov	r3, r2
 800125a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	685c      	ldr	r4, [r3, #4]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	68d8      	ldr	r0, [r3, #12]
 8001264:	893b      	ldrh	r3, [r7, #8]
 8001266:	7af9      	ldrb	r1, [r7, #11]
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	47a0      	blx	r4
 800126c:	6178      	str	r0, [r7, #20]

  return ret;
 800126e:	697b      	ldr	r3, [r7, #20]
}
 8001270:	4618      	mov	r0, r3
 8001272:	371c      	adds	r7, #28
 8001274:	46bd      	mov	sp, r7
 8001276:	bd90      	pop	{r4, r7, pc}

08001278 <lis331dlh_write_reg>:
  *
  */
int32_t __weak lis331dlh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b087      	sub	sp, #28
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	461a      	mov	r2, r3
 8001284:	460b      	mov	r3, r1
 8001286:	72fb      	strb	r3, [r7, #11]
 8001288:	4613      	mov	r3, r2
 800128a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681c      	ldr	r4, [r3, #0]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	68d8      	ldr	r0, [r3, #12]
 8001294:	893b      	ldrh	r3, [r7, #8]
 8001296:	7af9      	ldrb	r1, [r7, #11]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	47a0      	blx	r4
 800129c:	6178      	str	r0, [r7, #20]

  return ret;
 800129e:	697b      	ldr	r3, [r7, #20]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	371c      	adds	r7, #28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd90      	pop	{r4, r7, pc}

080012a8 <lis331dlh_from_fs2_to_mg>:
  * @{
  *
  */

float_t lis331dlh_from_fs2_to_mg(int16_t lsb)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 16.0f);
 80012b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fd10 	bl	8000cdc <__aeabi_i2f>
 80012bc:	4603      	mov	r3, r0
 80012be:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fe12 	bl	8000eec <__aeabi_fdiv>
 80012c8:	4603      	mov	r3, r0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <lis331dlh_data_rate_set>:
  * @param  val         change the values of dr in reg CTRL_REG1
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_data_rate_set(stmdev_ctx_t *ctx, lis331dlh_dr_t val)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b084      	sub	sp, #16
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	460b      	mov	r3, r1
 80012dc:	70fb      	strb	r3, [r7, #3]
  lis331dlh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_CTRL_REG1,
 80012de:	f107 0208 	add.w	r2, r7, #8
 80012e2:	2301      	movs	r3, #1
 80012e4:	2120      	movs	r1, #32
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ffae 	bl	8001248 <lis331dlh_read_reg>
 80012ec:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1, 1);

  if (ret == 0)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d118      	bne.n	8001326 <lis331dlh_data_rate_set+0x54>
  {
    ctrl_reg1.pm = (uint8_t)val & 0x07U;
 80012f4:	78fb      	ldrb	r3, [r7, #3]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	7a3b      	ldrb	r3, [r7, #8]
 80012fe:	f362 1347 	bfi	r3, r2, #5, #3
 8001302:	723b      	strb	r3, [r7, #8]
    ctrl_reg1.dr = ((uint8_t)val & 0x30U) >> 4;
 8001304:	78fb      	ldrb	r3, [r7, #3]
 8001306:	091b      	lsrs	r3, r3, #4
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	b2da      	uxtb	r2, r3
 800130e:	7a3b      	ldrb	r3, [r7, #8]
 8001310:	f362 03c4 	bfi	r3, r2, #3, #2
 8001314:	723b      	strb	r3, [r7, #8]
    ret = lis331dlh_write_reg(ctx, LIS331DLH_CTRL_REG1,
 8001316:	f107 0208 	add.w	r2, r7, #8
 800131a:	2301      	movs	r3, #1
 800131c:	2120      	movs	r1, #32
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff ffaa 	bl	8001278 <lis331dlh_write_reg>
 8001324:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1, 1);
  }

  return ret;
 8001326:	68fb      	ldr	r3, [r7, #12]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <lis331dlh_full_scale_set>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_full_scale_set(stmdev_ctx_t *ctx,
                                 lis331dlh_fs_t val)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	70fb      	strb	r3, [r7, #3]
  lis331dlh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_CTRL_REG4,
 800133c:	f107 0208 	add.w	r2, r7, #8
 8001340:	2301      	movs	r3, #1
 8001342:	2123      	movs	r1, #35	; 0x23
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff ff7f 	bl	8001248 <lis331dlh_read_reg>
 800134a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4, 1);

  if (ret == 0)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10f      	bne.n	8001372 <lis331dlh_full_scale_set+0x42>
  {
    ctrl_reg4.fs = (uint8_t)val;
 8001352:	78fb      	ldrb	r3, [r7, #3]
 8001354:	f003 0303 	and.w	r3, r3, #3
 8001358:	b2da      	uxtb	r2, r3
 800135a:	7a3b      	ldrb	r3, [r7, #8]
 800135c:	f362 1305 	bfi	r3, r2, #4, #2
 8001360:	723b      	strb	r3, [r7, #8]
    ret = lis331dlh_write_reg(ctx, LIS331DLH_CTRL_REG4,
 8001362:	f107 0208 	add.w	r2, r7, #8
 8001366:	2301      	movs	r3, #1
 8001368:	2123      	movs	r1, #35	; 0x23
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ff84 	bl	8001278 <lis331dlh_write_reg>
 8001370:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 8001372:	68fb      	ldr	r3, [r7, #12]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <lis331dlh_block_data_update_set>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_block_data_update_set(stmdev_ctx_t *ctx,
                                        uint8_t val)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	70fb      	strb	r3, [r7, #3]
  lis331dlh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_CTRL_REG4,
 8001388:	f107 0208 	add.w	r2, r7, #8
 800138c:	2301      	movs	r3, #1
 800138e:	2123      	movs	r1, #35	; 0x23
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ff59 	bl	8001248 <lis331dlh_read_reg>
 8001396:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4, 1);

  if (ret == 0)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10f      	bne.n	80013be <lis331dlh_block_data_update_set+0x42>
  {
    ctrl_reg4.bdu = val;
 800139e:	78fb      	ldrb	r3, [r7, #3]
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	7a3b      	ldrb	r3, [r7, #8]
 80013a8:	f362 13c7 	bfi	r3, r2, #7, #1
 80013ac:	723b      	strb	r3, [r7, #8]
    ret = lis331dlh_write_reg(ctx, LIS331DLH_CTRL_REG4,
 80013ae:	f107 0208 	add.w	r2, r7, #8
 80013b2:	2301      	movs	r3, #1
 80013b4:	2123      	movs	r1, #35	; 0x23
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff ff5e 	bl	8001278 <lis331dlh_write_reg>
 80013bc:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 80013be:	68fb      	ldr	r3, [r7, #12]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <lis331dlh_status_reg_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_status_reg_get(stmdev_ctx_t *ctx,
                                 lis331dlh_status_reg_t *val)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_STATUS_REG, (uint8_t *) val, 1);
 80013d2:	2301      	movs	r3, #1
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	2127      	movs	r1, #39	; 0x27
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff ff35 	bl	8001248 <lis331dlh_read_reg>
 80013de:	60f8      	str	r0, [r7, #12]

  return ret;
 80013e0:	68fb      	ldr	r3, [r7, #12]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <lis331dlh_acceleration_raw_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_OUT_X_L, buff, 6);
 80013f4:	f107 020c 	add.w	r2, r7, #12
 80013f8:	2306      	movs	r3, #6
 80013fa:	2128      	movs	r1, #40	; 0x28
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff ff23 	bl	8001248 <lis331dlh_read_reg>
 8001402:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001404:	7b7b      	ldrb	r3, [r7, #13]
 8001406:	b21a      	sxth	r2, r3
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001412:	b29b      	uxth	r3, r3
 8001414:	021b      	lsls	r3, r3, #8
 8001416:	b29a      	uxth	r2, r3
 8001418:	7b3b      	ldrb	r3, [r7, #12]
 800141a:	b29b      	uxth	r3, r3
 800141c:	4413      	add	r3, r2
 800141e:	b29b      	uxth	r3, r3
 8001420:	b21a      	sxth	r2, r3
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001426:	7bfa      	ldrb	r2, [r7, #15]
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	3302      	adds	r3, #2
 800142c:	b212      	sxth	r2, r2
 800142e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	3302      	adds	r3, #2
 8001434:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001438:	b29b      	uxth	r3, r3
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	b29a      	uxth	r2, r3
 800143e:	7bbb      	ldrb	r3, [r7, #14]
 8001440:	b29b      	uxth	r3, r3
 8001442:	4413      	add	r3, r2
 8001444:	b29a      	uxth	r2, r3
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	3302      	adds	r3, #2
 800144a:	b212      	sxth	r2, r2
 800144c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800144e:	7c7a      	ldrb	r2, [r7, #17]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	3304      	adds	r3, #4
 8001454:	b212      	sxth	r2, r2
 8001456:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	3304      	adds	r3, #4
 800145c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001460:	b29b      	uxth	r3, r3
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	b29a      	uxth	r2, r3
 8001466:	7c3b      	ldrb	r3, [r7, #16]
 8001468:	b29b      	uxth	r3, r3
 800146a:	4413      	add	r3, r2
 800146c:	b29a      	uxth	r2, r3
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	3304      	adds	r3, #4
 8001472:	b212      	sxth	r2, r2
 8001474:	801a      	strh	r2, [r3, #0]

  return ret;
 8001476:	697b      	ldr	r3, [r7, #20]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <lis331dlh_device_id_get>:
  * @param  buff        buffer that stores data read
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_WHO_AM_I, buff, 1);
 800148a:	2301      	movs	r3, #1
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	210f      	movs	r1, #15
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff fed9 	bl	8001248 <lis331dlh_read_reg>
 8001496:	60f8      	str	r0, [r7, #12]

  return ret;
 8001498:	68fb      	ldr	r3, [r7, #12]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <lis331dlh_hp_path_set>:
  * @param  val         change the values of hpen in reg CTRL_REG2
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_hp_path_set(stmdev_ctx_t *ctx, lis331dlh_hpen_t val)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b084      	sub	sp, #16
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	460b      	mov	r3, r1
 80014ac:	70fb      	strb	r3, [r7, #3]
  lis331dlh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_CTRL_REG2,
 80014ae:	f107 0208 	add.w	r2, r7, #8
 80014b2:	2301      	movs	r3, #1
 80014b4:	2121      	movs	r1, #33	; 0x21
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff fec6 	bl	8001248 <lis331dlh_read_reg>
 80014bc:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg2, 1);

  if (ret == 0)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d118      	bne.n	80014f6 <lis331dlh_hp_path_set+0x54>
  {
    ctrl_reg2.hpen = (uint8_t)val & 0x03U;
 80014c4:	78fb      	ldrb	r3, [r7, #3]
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	7a3b      	ldrb	r3, [r7, #8]
 80014ce:	f362 0383 	bfi	r3, r2, #2, #2
 80014d2:	723b      	strb	r3, [r7, #8]
    ctrl_reg2.fds = ((uint8_t)val & 0x04U) >> 2;
 80014d4:	78fb      	ldrb	r3, [r7, #3]
 80014d6:	089b      	lsrs	r3, r3, #2
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	7a3b      	ldrb	r3, [r7, #8]
 80014e0:	f362 1304 	bfi	r3, r2, #4, #1
 80014e4:	723b      	strb	r3, [r7, #8]
    ret = lis331dlh_write_reg(ctx, LIS331DLH_CTRL_REG2,
 80014e6:	f107 0208 	add.w	r2, r7, #8
 80014ea:	2301      	movs	r3, #1
 80014ec:	2121      	movs	r1, #33	; 0x21
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff fec2 	bl	8001278 <lis331dlh_write_reg>
 80014f4:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg2, 1);
  }

  return ret;
 80014f6:	68fb      	ldr	r3, [r7, #12]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001504:	f000 fa5c 	bl	80019c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001508:	f000 f80e 	bl	8001528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800150c:	f000 f896 	bl	800163c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001510:	f000 f866 	bl	80015e0 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001514:	f007 fef2 	bl	80092fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  accel_init(&hi2c1);
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <main+0x24>)
 800151a:	f7ff fdfd 	bl	8001118 <accel_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  accel_get_data();
 800151e:	f7ff fe31 	bl	8001184 <accel_get_data>
 8001522:	e7fc      	b.n	800151e <main+0x1e>
 8001524:	2000077c 	.word	0x2000077c

08001528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b094      	sub	sp, #80	; 0x50
 800152c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001532:	2228      	movs	r2, #40	; 0x28
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f008 fba6 	bl	8009c88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001558:	2301      	movs	r3, #1
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800155c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001566:	2301      	movs	r3, #1
 8001568:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800156a:	2302      	movs	r3, #2
 800156c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800156e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001572:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001574:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001578:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800157a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800157e:	4618      	mov	r0, r3
 8001580:	f003 fafe 	bl	8004b80 <HAL_RCC_OscConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800158a:	f000 f885 	bl	8001698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800158e:	230f      	movs	r3, #15
 8001590:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001592:	2302      	movs	r3, #2
 8001594:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800159a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800159e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	2101      	movs	r1, #1
 80015aa:	4618      	mov	r0, r3
 80015ac:	f003 fd6a 	bl	8005084 <HAL_RCC_ClockConfig>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <SystemClock_Config+0x92>
  {
    Error_Handler();
 80015b6:	f000 f86f 	bl	8001698 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80015ba:	2310      	movs	r3, #16
 80015bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80015be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015c2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	4618      	mov	r0, r3
 80015c8:	f003 fed6 	bl	8005378 <HAL_RCCEx_PeriphCLKConfig>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80015d2:	f000 f861 	bl	8001698 <Error_Handler>
  }
}
 80015d6:	bf00      	nop
 80015d8:	3750      	adds	r7, #80	; 0x50
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <MX_I2C1_Init+0x50>)
 80015e6:	4a13      	ldr	r2, [pc, #76]	; (8001634 <MX_I2C1_Init+0x54>)
 80015e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015ea:	4b11      	ldr	r3, [pc, #68]	; (8001630 <MX_I2C1_Init+0x50>)
 80015ec:	4a12      	ldr	r2, [pc, #72]	; (8001638 <MX_I2C1_Init+0x58>)
 80015ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <MX_I2C1_Init+0x50>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <MX_I2C1_Init+0x50>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <MX_I2C1_Init+0x50>)
 80015fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001602:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001604:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <MX_I2C1_Init+0x50>)
 8001606:	2200      	movs	r2, #0
 8001608:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <MX_I2C1_Init+0x50>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001610:	4b07      	ldr	r3, [pc, #28]	; (8001630 <MX_I2C1_Init+0x50>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <MX_I2C1_Init+0x50>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800161c:	4804      	ldr	r0, [pc, #16]	; (8001630 <MX_I2C1_Init+0x50>)
 800161e:	f000 fce7 	bl	8001ff0 <HAL_I2C_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001628:	f000 f836 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	2000077c 	.word	0x2000077c
 8001634:	40005400 	.word	0x40005400
 8001638:	000186a0 	.word	0x000186a0

0800163c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001642:	4b14      	ldr	r3, [pc, #80]	; (8001694 <MX_GPIO_Init+0x58>)
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	4a13      	ldr	r2, [pc, #76]	; (8001694 <MX_GPIO_Init+0x58>)
 8001648:	f043 0320 	orr.w	r3, r3, #32
 800164c:	6193      	str	r3, [r2, #24]
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <MX_GPIO_Init+0x58>)
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	f003 0320 	and.w	r3, r3, #32
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <MX_GPIO_Init+0x58>)
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	4a0d      	ldr	r2, [pc, #52]	; (8001694 <MX_GPIO_Init+0x58>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	6193      	str	r3, [r2, #24]
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <MX_GPIO_Init+0x58>)
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001672:	4b08      	ldr	r3, [pc, #32]	; (8001694 <MX_GPIO_Init+0x58>)
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	4a07      	ldr	r2, [pc, #28]	; (8001694 <MX_GPIO_Init+0x58>)
 8001678:	f043 0308 	orr.w	r3, r3, #8
 800167c:	6193      	str	r3, [r2, #24]
 800167e:	4b05      	ldr	r3, [pc, #20]	; (8001694 <MX_GPIO_Init+0x58>)
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	f003 0308 	and.w	r3, r3, #8
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]

}
 800168a:	bf00      	nop
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr
 8001694:	40021000 	.word	0x40021000

08001698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800169c:	b672      	cpsid	i
}
 800169e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <Error_Handler+0x8>
	...

080016a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_MspInit+0x5c>)
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	4a14      	ldr	r2, [pc, #80]	; (8001700 <HAL_MspInit+0x5c>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6193      	str	r3, [r2, #24]
 80016b6:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_MspInit+0x5c>)
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c2:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <HAL_MspInit+0x5c>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <HAL_MspInit+0x5c>)
 80016c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016cc:	61d3      	str	r3, [r2, #28]
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <HAL_MspInit+0x5c>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_MspInit+0x60>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	4a04      	ldr	r2, [pc, #16]	; (8001704 <HAL_MspInit+0x60>)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f6:	bf00      	nop
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr
 8001700:	40021000 	.word	0x40021000
 8001704:	40010000 	.word	0x40010000

08001708 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 0310 	add.w	r3, r7, #16
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a15      	ldr	r2, [pc, #84]	; (8001778 <HAL_I2C_MspInit+0x70>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d123      	bne.n	8001770 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001728:	4b14      	ldr	r3, [pc, #80]	; (800177c <HAL_I2C_MspInit+0x74>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	4a13      	ldr	r2, [pc, #76]	; (800177c <HAL_I2C_MspInit+0x74>)
 800172e:	f043 0308 	orr.w	r3, r3, #8
 8001732:	6193      	str	r3, [r2, #24]
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <HAL_I2C_MspInit+0x74>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	f003 0308 	and.w	r3, r3, #8
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001740:	23c0      	movs	r3, #192	; 0xc0
 8001742:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001744:	2312      	movs	r3, #18
 8001746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001748:	2303      	movs	r3, #3
 800174a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174c:	f107 0310 	add.w	r3, r7, #16
 8001750:	4619      	mov	r1, r3
 8001752:	480b      	ldr	r0, [pc, #44]	; (8001780 <HAL_I2C_MspInit+0x78>)
 8001754:	f000 fac8 	bl	8001ce8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <HAL_I2C_MspInit+0x74>)
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	4a07      	ldr	r2, [pc, #28]	; (800177c <HAL_I2C_MspInit+0x74>)
 800175e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001762:	61d3      	str	r3, [r2, #28]
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <HAL_I2C_MspInit+0x74>)
 8001766:	69db      	ldr	r3, [r3, #28]
 8001768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001770:	bf00      	nop
 8001772:	3720      	adds	r7, #32
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40005400 	.word	0x40005400
 800177c:	40021000 	.word	0x40021000
 8001780:	40010c00 	.word	0x40010c00

08001784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001788:	e7fe      	b.n	8001788 <NMI_Handler+0x4>

0800178a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800178e:	e7fe      	b.n	800178e <HardFault_Handler+0x4>

08001790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <MemManage_Handler+0x4>

08001796 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800179a:	e7fe      	b.n	800179a <BusFault_Handler+0x4>

0800179c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <UsageFault_Handler+0x4>

080017a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr

080017ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr

080017ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr

080017c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ca:	f000 f93f 	bl	8001a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80017da:	f001 fd87 	bl	80032ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200014a0 	.word	0x200014a0

080017e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return 1;
 80017ec:	2301      	movs	r3, #1
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr

080017f6 <_kill>:

int _kill(int pid, int sig)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
 80017fe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001800:	f008 fa18 	bl	8009c34 <__errno>
 8001804:	4603      	mov	r3, r0
 8001806:	2216      	movs	r2, #22
 8001808:	601a      	str	r2, [r3, #0]
  return -1;
 800180a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <_exit>:

void _exit (int status)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800181e:	f04f 31ff 	mov.w	r1, #4294967295
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff ffe7 	bl	80017f6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001828:	e7fe      	b.n	8001828 <_exit+0x12>

0800182a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	60f8      	str	r0, [r7, #12]
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	e00a      	b.n	8001852 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800183c:	f3af 8000 	nop.w
 8001840:	4601      	mov	r1, r0
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	1c5a      	adds	r2, r3, #1
 8001846:	60ba      	str	r2, [r7, #8]
 8001848:	b2ca      	uxtb	r2, r1
 800184a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	3301      	adds	r3, #1
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	429a      	cmp	r2, r3
 8001858:	dbf0      	blt.n	800183c <_read+0x12>
  }

  return len;
 800185a:	687b      	ldr	r3, [r7, #4]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	e009      	b.n	800188a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	60ba      	str	r2, [r7, #8]
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	3301      	adds	r3, #1
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	429a      	cmp	r2, r3
 8001890:	dbf1      	blt.n	8001876 <_write+0x12>
  }
  return len;
 8001892:	687b      	ldr	r3, [r7, #4]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <_close>:

int _close(int file)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr

080018b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018c2:	605a      	str	r2, [r3, #4]
  return 0;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr

080018d0 <_isatty>:

int _isatty(int file)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018d8:	2301      	movs	r3, #1
}
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr

080018fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001904:	4a14      	ldr	r2, [pc, #80]	; (8001958 <_sbrk+0x5c>)
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <_sbrk+0x60>)
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001910:	4b13      	ldr	r3, [pc, #76]	; (8001960 <_sbrk+0x64>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d102      	bne.n	800191e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <_sbrk+0x64>)
 800191a:	4a12      	ldr	r2, [pc, #72]	; (8001964 <_sbrk+0x68>)
 800191c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <_sbrk+0x64>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	429a      	cmp	r2, r3
 800192a:	d207      	bcs.n	800193c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800192c:	f008 f982 	bl	8009c34 <__errno>
 8001930:	4603      	mov	r3, r0
 8001932:	220c      	movs	r2, #12
 8001934:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
 800193a:	e009      	b.n	8001950 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <_sbrk+0x64>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001942:	4b07      	ldr	r3, [pc, #28]	; (8001960 <_sbrk+0x64>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	4a05      	ldr	r2, [pc, #20]	; (8001960 <_sbrk+0x64>)
 800194c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800194e:	68fb      	ldr	r3, [r7, #12]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20005000 	.word	0x20005000
 800195c:	00000400 	.word	0x00000400
 8001960:	200007d0 	.word	0x200007d0
 8001964:	200019c0 	.word	0x200019c0

08001968 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001974:	f7ff fff8 	bl	8001968 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001978:	480b      	ldr	r0, [pc, #44]	; (80019a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800197a:	490c      	ldr	r1, [pc, #48]	; (80019ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800197c:	4a0c      	ldr	r2, [pc, #48]	; (80019b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800197e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001980:	e002      	b.n	8001988 <LoopCopyDataInit>

08001982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001986:	3304      	adds	r3, #4

08001988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800198c:	d3f9      	bcc.n	8001982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800198e:	4a09      	ldr	r2, [pc, #36]	; (80019b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001990:	4c09      	ldr	r4, [pc, #36]	; (80019b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001994:	e001      	b.n	800199a <LoopFillZerobss>

08001996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001998:	3204      	adds	r2, #4

0800199a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800199c:	d3fb      	bcc.n	8001996 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800199e:	f008 f94f 	bl	8009c40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019a2:	f7ff fdad 	bl	8001500 <main>
  bx lr
 80019a6:	4770      	bx	lr
  ldr r0, =_sdata
 80019a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019ac:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 80019b0:	0800ea5c 	.word	0x0800ea5c
  ldr r2, =_sbss
 80019b4:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 80019b8:	200019c0 	.word	0x200019c0

080019bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019bc:	e7fe      	b.n	80019bc <ADC1_2_IRQHandler>
	...

080019c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <HAL_Init+0x28>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a07      	ldr	r2, [pc, #28]	; (80019e8 <HAL_Init+0x28>)
 80019ca:	f043 0310 	orr.w	r3, r3, #16
 80019ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d0:	2003      	movs	r0, #3
 80019d2:	f000 f947 	bl	8001c64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019d6:	200f      	movs	r0, #15
 80019d8:	f000 f808 	bl	80019ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019dc:	f7ff fe62 	bl	80016a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40022000 	.word	0x40022000

080019ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <HAL_InitTick+0x54>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_InitTick+0x58>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4619      	mov	r1, r3
 80019fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 f95f 	bl	8001cce <HAL_SYSTICK_Config>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00e      	b.n	8001a38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b0f      	cmp	r3, #15
 8001a1e:	d80a      	bhi.n	8001a36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a20:	2200      	movs	r2, #0
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	f000 f927 	bl	8001c7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a2c:	4a06      	ldr	r2, [pc, #24]	; (8001a48 <HAL_InitTick+0x5c>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	e000      	b.n	8001a38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000000 	.word	0x20000000
 8001a44:	20000008 	.word	0x20000008
 8001a48:	20000004 	.word	0x20000004

08001a4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <HAL_IncTick+0x1c>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	461a      	mov	r2, r3
 8001a56:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <HAL_IncTick+0x20>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	4a03      	ldr	r2, [pc, #12]	; (8001a6c <HAL_IncTick+0x20>)
 8001a5e:	6013      	str	r3, [r2, #0]
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	20000008 	.word	0x20000008
 8001a6c:	200007d4 	.word	0x200007d4

08001a70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return uwTick;
 8001a74:	4b02      	ldr	r3, [pc, #8]	; (8001a80 <HAL_GetTick+0x10>)
 8001a76:	681b      	ldr	r3, [r3, #0]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr
 8001a80:	200007d4 	.word	0x200007d4

08001a84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a8c:	f7ff fff0 	bl	8001a70 <HAL_GetTick>
 8001a90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a9c:	d005      	beq.n	8001aaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <HAL_Delay+0x44>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aaa:	bf00      	nop
 8001aac:	f7ff ffe0 	bl	8001a70 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d8f7      	bhi.n	8001aac <HAL_Delay+0x28>
  {
  }
}
 8001abc:	bf00      	nop
 8001abe:	bf00      	nop
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000008 	.word	0x20000008

08001acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <__NVIC_SetPriorityGrouping+0x44>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001afe:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <__NVIC_SetPriorityGrouping+0x44>)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	60d3      	str	r3, [r2, #12]
}
 8001b04:	bf00      	nop
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <__NVIC_GetPriorityGrouping+0x18>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	0a1b      	lsrs	r3, r3, #8
 8001b1e:	f003 0307 	and.w	r3, r3, #7
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	db0b      	blt.n	8001b5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	f003 021f 	and.w	r2, r3, #31
 8001b48:	4906      	ldr	r1, [pc, #24]	; (8001b64 <__NVIC_EnableIRQ+0x34>)
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	095b      	lsrs	r3, r3, #5
 8001b50:	2001      	movs	r0, #1
 8001b52:	fa00 f202 	lsl.w	r2, r0, r2
 8001b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr
 8001b64:	e000e100 	.word	0xe000e100

08001b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	6039      	str	r1, [r7, #0]
 8001b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	db0a      	blt.n	8001b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	490c      	ldr	r1, [pc, #48]	; (8001bb4 <__NVIC_SetPriority+0x4c>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	0112      	lsls	r2, r2, #4
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b90:	e00a      	b.n	8001ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4908      	ldr	r1, [pc, #32]	; (8001bb8 <__NVIC_SetPriority+0x50>)
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	3b04      	subs	r3, #4
 8001ba0:	0112      	lsls	r2, r2, #4
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	761a      	strb	r2, [r3, #24]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000e100 	.word	0xe000e100
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b089      	sub	sp, #36	; 0x24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f1c3 0307 	rsb	r3, r3, #7
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	bf28      	it	cs
 8001bda:	2304      	movcs	r3, #4
 8001bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3304      	adds	r3, #4
 8001be2:	2b06      	cmp	r3, #6
 8001be4:	d902      	bls.n	8001bec <NVIC_EncodePriority+0x30>
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3b03      	subs	r3, #3
 8001bea:	e000      	b.n	8001bee <NVIC_EncodePriority+0x32>
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	401a      	ands	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c04:	f04f 31ff 	mov.w	r1, #4294967295
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0e:	43d9      	mvns	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	4313      	orrs	r3, r2
         );
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3724      	adds	r7, #36	; 0x24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c30:	d301      	bcc.n	8001c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c32:	2301      	movs	r3, #1
 8001c34:	e00f      	b.n	8001c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c36:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <SysTick_Config+0x40>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c3e:	210f      	movs	r1, #15
 8001c40:	f04f 30ff 	mov.w	r0, #4294967295
 8001c44:	f7ff ff90 	bl	8001b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <SysTick_Config+0x40>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4e:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <SysTick_Config+0x40>)
 8001c50:	2207      	movs	r2, #7
 8001c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	e000e010 	.word	0xe000e010

08001c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff ff2d 	bl	8001acc <__NVIC_SetPriorityGrouping>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b086      	sub	sp, #24
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4603      	mov	r3, r0
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c8c:	f7ff ff42 	bl	8001b14 <__NVIC_GetPriorityGrouping>
 8001c90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	6978      	ldr	r0, [r7, #20]
 8001c98:	f7ff ff90 	bl	8001bbc <NVIC_EncodePriority>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff5f 	bl	8001b68 <__NVIC_SetPriority>
}
 8001caa:	bf00      	nop
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	4603      	mov	r3, r0
 8001cba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff35 	bl	8001b30 <__NVIC_EnableIRQ>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff ffa2 	bl	8001c20 <SysTick_Config>
 8001cdc:	4603      	mov	r3, r0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b08b      	sub	sp, #44	; 0x2c
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cfa:	e169      	b.n	8001fd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	69fa      	ldr	r2, [r7, #28]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	f040 8158 	bne.w	8001fca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	4a9a      	ldr	r2, [pc, #616]	; (8001f88 <HAL_GPIO_Init+0x2a0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d05e      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
 8001d24:	4a98      	ldr	r2, [pc, #608]	; (8001f88 <HAL_GPIO_Init+0x2a0>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d875      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d2a:	4a98      	ldr	r2, [pc, #608]	; (8001f8c <HAL_GPIO_Init+0x2a4>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d058      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
 8001d30:	4a96      	ldr	r2, [pc, #600]	; (8001f8c <HAL_GPIO_Init+0x2a4>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d86f      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d36:	4a96      	ldr	r2, [pc, #600]	; (8001f90 <HAL_GPIO_Init+0x2a8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d052      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
 8001d3c:	4a94      	ldr	r2, [pc, #592]	; (8001f90 <HAL_GPIO_Init+0x2a8>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d869      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d42:	4a94      	ldr	r2, [pc, #592]	; (8001f94 <HAL_GPIO_Init+0x2ac>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d04c      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
 8001d48:	4a92      	ldr	r2, [pc, #584]	; (8001f94 <HAL_GPIO_Init+0x2ac>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d863      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d4e:	4a92      	ldr	r2, [pc, #584]	; (8001f98 <HAL_GPIO_Init+0x2b0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d046      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
 8001d54:	4a90      	ldr	r2, [pc, #576]	; (8001f98 <HAL_GPIO_Init+0x2b0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d85d      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d5a:	2b12      	cmp	r3, #18
 8001d5c:	d82a      	bhi.n	8001db4 <HAL_GPIO_Init+0xcc>
 8001d5e:	2b12      	cmp	r3, #18
 8001d60:	d859      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d62:	a201      	add	r2, pc, #4	; (adr r2, 8001d68 <HAL_GPIO_Init+0x80>)
 8001d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d68:	08001de3 	.word	0x08001de3
 8001d6c:	08001dbd 	.word	0x08001dbd
 8001d70:	08001dcf 	.word	0x08001dcf
 8001d74:	08001e11 	.word	0x08001e11
 8001d78:	08001e17 	.word	0x08001e17
 8001d7c:	08001e17 	.word	0x08001e17
 8001d80:	08001e17 	.word	0x08001e17
 8001d84:	08001e17 	.word	0x08001e17
 8001d88:	08001e17 	.word	0x08001e17
 8001d8c:	08001e17 	.word	0x08001e17
 8001d90:	08001e17 	.word	0x08001e17
 8001d94:	08001e17 	.word	0x08001e17
 8001d98:	08001e17 	.word	0x08001e17
 8001d9c:	08001e17 	.word	0x08001e17
 8001da0:	08001e17 	.word	0x08001e17
 8001da4:	08001e17 	.word	0x08001e17
 8001da8:	08001e17 	.word	0x08001e17
 8001dac:	08001dc5 	.word	0x08001dc5
 8001db0:	08001dd9 	.word	0x08001dd9
 8001db4:	4a79      	ldr	r2, [pc, #484]	; (8001f9c <HAL_GPIO_Init+0x2b4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d013      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dba:	e02c      	b.n	8001e16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	623b      	str	r3, [r7, #32]
          break;
 8001dc2:	e029      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	623b      	str	r3, [r7, #32]
          break;
 8001dcc:	e024      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	3308      	adds	r3, #8
 8001dd4:	623b      	str	r3, [r7, #32]
          break;
 8001dd6:	e01f      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	330c      	adds	r3, #12
 8001dde:	623b      	str	r3, [r7, #32]
          break;
 8001de0:	e01a      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d102      	bne.n	8001df0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dea:	2304      	movs	r3, #4
 8001dec:	623b      	str	r3, [r7, #32]
          break;
 8001dee:	e013      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d105      	bne.n	8001e04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001df8:	2308      	movs	r3, #8
 8001dfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69fa      	ldr	r2, [r7, #28]
 8001e00:	611a      	str	r2, [r3, #16]
          break;
 8001e02:	e009      	b.n	8001e18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e04:	2308      	movs	r3, #8
 8001e06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69fa      	ldr	r2, [r7, #28]
 8001e0c:	615a      	str	r2, [r3, #20]
          break;
 8001e0e:	e003      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e10:	2300      	movs	r3, #0
 8001e12:	623b      	str	r3, [r7, #32]
          break;
 8001e14:	e000      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          break;
 8001e16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	2bff      	cmp	r3, #255	; 0xff
 8001e1c:	d801      	bhi.n	8001e22 <HAL_GPIO_Init+0x13a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	e001      	b.n	8001e26 <HAL_GPIO_Init+0x13e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3304      	adds	r3, #4
 8001e26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	2bff      	cmp	r3, #255	; 0xff
 8001e2c:	d802      	bhi.n	8001e34 <HAL_GPIO_Init+0x14c>
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	e002      	b.n	8001e3a <HAL_GPIO_Init+0x152>
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	3b08      	subs	r3, #8
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	210f      	movs	r1, #15
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	fa01 f303 	lsl.w	r3, r1, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	6a39      	ldr	r1, [r7, #32]
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	fa01 f303 	lsl.w	r3, r1, r3
 8001e54:	431a      	orrs	r2, r3
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 80b1 	beq.w	8001fca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e68:	4b4d      	ldr	r3, [pc, #308]	; (8001fa0 <HAL_GPIO_Init+0x2b8>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	4a4c      	ldr	r2, [pc, #304]	; (8001fa0 <HAL_GPIO_Init+0x2b8>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6193      	str	r3, [r2, #24]
 8001e74:	4b4a      	ldr	r3, [pc, #296]	; (8001fa0 <HAL_GPIO_Init+0x2b8>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e80:	4a48      	ldr	r2, [pc, #288]	; (8001fa4 <HAL_GPIO_Init+0x2bc>)
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	089b      	lsrs	r3, r3, #2
 8001e86:	3302      	adds	r3, #2
 8001e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	220f      	movs	r2, #15
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a40      	ldr	r2, [pc, #256]	; (8001fa8 <HAL_GPIO_Init+0x2c0>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d013      	beq.n	8001ed4 <HAL_GPIO_Init+0x1ec>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a3f      	ldr	r2, [pc, #252]	; (8001fac <HAL_GPIO_Init+0x2c4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d00d      	beq.n	8001ed0 <HAL_GPIO_Init+0x1e8>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a3e      	ldr	r2, [pc, #248]	; (8001fb0 <HAL_GPIO_Init+0x2c8>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d007      	beq.n	8001ecc <HAL_GPIO_Init+0x1e4>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a3d      	ldr	r2, [pc, #244]	; (8001fb4 <HAL_GPIO_Init+0x2cc>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d101      	bne.n	8001ec8 <HAL_GPIO_Init+0x1e0>
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e006      	b.n	8001ed6 <HAL_GPIO_Init+0x1ee>
 8001ec8:	2304      	movs	r3, #4
 8001eca:	e004      	b.n	8001ed6 <HAL_GPIO_Init+0x1ee>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	e002      	b.n	8001ed6 <HAL_GPIO_Init+0x1ee>
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e000      	b.n	8001ed6 <HAL_GPIO_Init+0x1ee>
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed8:	f002 0203 	and.w	r2, r2, #3
 8001edc:	0092      	lsls	r2, r2, #2
 8001ede:	4093      	lsls	r3, r2
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ee6:	492f      	ldr	r1, [pc, #188]	; (8001fa4 <HAL_GPIO_Init+0x2bc>)
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	089b      	lsrs	r3, r3, #2
 8001eec:	3302      	adds	r3, #2
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d006      	beq.n	8001f0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f00:	4b2d      	ldr	r3, [pc, #180]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	492c      	ldr	r1, [pc, #176]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	608b      	str	r3, [r1, #8]
 8001f0c:	e006      	b.n	8001f1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f0e:	4b2a      	ldr	r3, [pc, #168]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	43db      	mvns	r3, r3
 8001f16:	4928      	ldr	r1, [pc, #160]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d006      	beq.n	8001f36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f28:	4b23      	ldr	r3, [pc, #140]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f2a:	68da      	ldr	r2, [r3, #12]
 8001f2c:	4922      	ldr	r1, [pc, #136]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	60cb      	str	r3, [r1, #12]
 8001f34:	e006      	b.n	8001f44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f36:	4b20      	ldr	r3, [pc, #128]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	491e      	ldr	r1, [pc, #120]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d006      	beq.n	8001f5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f50:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	4918      	ldr	r1, [pc, #96]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]
 8001f5c:	e006      	b.n	8001f6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f5e:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	4914      	ldr	r1, [pc, #80]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d021      	beq.n	8001fbc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f78:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	490e      	ldr	r1, [pc, #56]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	600b      	str	r3, [r1, #0]
 8001f84:	e021      	b.n	8001fca <HAL_GPIO_Init+0x2e2>
 8001f86:	bf00      	nop
 8001f88:	10320000 	.word	0x10320000
 8001f8c:	10310000 	.word	0x10310000
 8001f90:	10220000 	.word	0x10220000
 8001f94:	10210000 	.word	0x10210000
 8001f98:	10120000 	.word	0x10120000
 8001f9c:	10110000 	.word	0x10110000
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40010000 	.word	0x40010000
 8001fa8:	40010800 	.word	0x40010800
 8001fac:	40010c00 	.word	0x40010c00
 8001fb0:	40011000 	.word	0x40011000
 8001fb4:	40011400 	.word	0x40011400
 8001fb8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <HAL_GPIO_Init+0x304>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	4909      	ldr	r1, [pc, #36]	; (8001fec <HAL_GPIO_Init+0x304>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	3301      	adds	r3, #1
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f47f ae8e 	bne.w	8001cfc <HAL_GPIO_Init+0x14>
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	bf00      	nop
 8001fe4:	372c      	adds	r7, #44	; 0x2c
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr
 8001fec:	40010400 	.word	0x40010400

08001ff0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e12b      	b.n	800225a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d106      	bne.n	800201c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff fb76 	bl	8001708 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2224      	movs	r2, #36	; 0x24
 8002020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0201 	bic.w	r2, r2, #1
 8002032:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002042:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002052:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002054:	f003 f95e 	bl	8005314 <HAL_RCC_GetPCLK1Freq>
 8002058:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	4a81      	ldr	r2, [pc, #516]	; (8002264 <HAL_I2C_Init+0x274>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d807      	bhi.n	8002074 <HAL_I2C_Init+0x84>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4a80      	ldr	r2, [pc, #512]	; (8002268 <HAL_I2C_Init+0x278>)
 8002068:	4293      	cmp	r3, r2
 800206a:	bf94      	ite	ls
 800206c:	2301      	movls	r3, #1
 800206e:	2300      	movhi	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	e006      	b.n	8002082 <HAL_I2C_Init+0x92>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4a7d      	ldr	r2, [pc, #500]	; (800226c <HAL_I2C_Init+0x27c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	bf94      	ite	ls
 800207c:	2301      	movls	r3, #1
 800207e:	2300      	movhi	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e0e7      	b.n	800225a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4a78      	ldr	r2, [pc, #480]	; (8002270 <HAL_I2C_Init+0x280>)
 800208e:	fba2 2303 	umull	r2, r3, r2, r3
 8002092:	0c9b      	lsrs	r3, r3, #18
 8002094:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	4a6a      	ldr	r2, [pc, #424]	; (8002264 <HAL_I2C_Init+0x274>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d802      	bhi.n	80020c4 <HAL_I2C_Init+0xd4>
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	3301      	adds	r3, #1
 80020c2:	e009      	b.n	80020d8 <HAL_I2C_Init+0xe8>
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020ca:	fb02 f303 	mul.w	r3, r2, r3
 80020ce:	4a69      	ldr	r2, [pc, #420]	; (8002274 <HAL_I2C_Init+0x284>)
 80020d0:	fba2 2303 	umull	r2, r3, r2, r3
 80020d4:	099b      	lsrs	r3, r3, #6
 80020d6:	3301      	adds	r3, #1
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	430b      	orrs	r3, r1
 80020de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	495c      	ldr	r1, [pc, #368]	; (8002264 <HAL_I2C_Init+0x274>)
 80020f4:	428b      	cmp	r3, r1
 80020f6:	d819      	bhi.n	800212c <HAL_I2C_Init+0x13c>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	1e59      	subs	r1, r3, #1
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	fbb1 f3f3 	udiv	r3, r1, r3
 8002106:	1c59      	adds	r1, r3, #1
 8002108:	f640 73fc 	movw	r3, #4092	; 0xffc
 800210c:	400b      	ands	r3, r1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <HAL_I2C_Init+0x138>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	1e59      	subs	r1, r3, #1
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002120:	3301      	adds	r3, #1
 8002122:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002126:	e051      	b.n	80021cc <HAL_I2C_Init+0x1dc>
 8002128:	2304      	movs	r3, #4
 800212a:	e04f      	b.n	80021cc <HAL_I2C_Init+0x1dc>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d111      	bne.n	8002158 <HAL_I2C_Init+0x168>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	1e58      	subs	r0, r3, #1
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6859      	ldr	r1, [r3, #4]
 800213c:	460b      	mov	r3, r1
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	440b      	add	r3, r1
 8002142:	fbb0 f3f3 	udiv	r3, r0, r3
 8002146:	3301      	adds	r3, #1
 8002148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800214c:	2b00      	cmp	r3, #0
 800214e:	bf0c      	ite	eq
 8002150:	2301      	moveq	r3, #1
 8002152:	2300      	movne	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	e012      	b.n	800217e <HAL_I2C_Init+0x18e>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1e58      	subs	r0, r3, #1
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6859      	ldr	r1, [r3, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	0099      	lsls	r1, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	fbb0 f3f3 	udiv	r3, r0, r3
 800216e:	3301      	adds	r3, #1
 8002170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002174:	2b00      	cmp	r3, #0
 8002176:	bf0c      	ite	eq
 8002178:	2301      	moveq	r3, #1
 800217a:	2300      	movne	r3, #0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_I2C_Init+0x196>
 8002182:	2301      	movs	r3, #1
 8002184:	e022      	b.n	80021cc <HAL_I2C_Init+0x1dc>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10e      	bne.n	80021ac <HAL_I2C_Init+0x1bc>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1e58      	subs	r0, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6859      	ldr	r1, [r3, #4]
 8002196:	460b      	mov	r3, r1
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	440b      	add	r3, r1
 800219c:	fbb0 f3f3 	udiv	r3, r0, r3
 80021a0:	3301      	adds	r3, #1
 80021a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021aa:	e00f      	b.n	80021cc <HAL_I2C_Init+0x1dc>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	1e58      	subs	r0, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6859      	ldr	r1, [r3, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	0099      	lsls	r1, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	fbb0 f3f3 	udiv	r3, r0, r3
 80021c2:	3301      	adds	r3, #1
 80021c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	6809      	ldr	r1, [r1, #0]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69da      	ldr	r2, [r3, #28]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6911      	ldr	r1, [r2, #16]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68d2      	ldr	r2, [r2, #12]
 8002206:	4311      	orrs	r1, r2
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	430b      	orrs	r3, r1
 800220e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	695a      	ldr	r2, [r3, #20]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0201 	orr.w	r2, r2, #1
 800223a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2220      	movs	r2, #32
 8002246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	000186a0 	.word	0x000186a0
 8002268:	001e847f 	.word	0x001e847f
 800226c:	003d08ff 	.word	0x003d08ff
 8002270:	431bde83 	.word	0x431bde83
 8002274:	10624dd3 	.word	0x10624dd3

08002278 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af02      	add	r7, sp, #8
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	4608      	mov	r0, r1
 8002282:	4611      	mov	r1, r2
 8002284:	461a      	mov	r2, r3
 8002286:	4603      	mov	r3, r0
 8002288:	817b      	strh	r3, [r7, #10]
 800228a:	460b      	mov	r3, r1
 800228c:	813b      	strh	r3, [r7, #8]
 800228e:	4613      	mov	r3, r2
 8002290:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002292:	f7ff fbed 	bl	8001a70 <HAL_GetTick>
 8002296:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b20      	cmp	r3, #32
 80022a2:	f040 80d9 	bne.w	8002458 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	2319      	movs	r3, #25
 80022ac:	2201      	movs	r2, #1
 80022ae:	496d      	ldr	r1, [pc, #436]	; (8002464 <HAL_I2C_Mem_Write+0x1ec>)
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 fcc1 	bl	8002c38 <I2C_WaitOnFlagUntilTimeout>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80022bc:	2302      	movs	r3, #2
 80022be:	e0cc      	b.n	800245a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d101      	bne.n	80022ce <HAL_I2C_Mem_Write+0x56>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e0c5      	b.n	800245a <HAL_I2C_Mem_Write+0x1e2>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d007      	beq.n	80022f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0201 	orr.w	r2, r2, #1
 80022f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002302:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2221      	movs	r2, #33	; 0x21
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2240      	movs	r2, #64	; 0x40
 8002310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6a3a      	ldr	r2, [r7, #32]
 800231e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002324:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232a:	b29a      	uxth	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4a4d      	ldr	r2, [pc, #308]	; (8002468 <HAL_I2C_Mem_Write+0x1f0>)
 8002334:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002336:	88f8      	ldrh	r0, [r7, #6]
 8002338:	893a      	ldrh	r2, [r7, #8]
 800233a:	8979      	ldrh	r1, [r7, #10]
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	9301      	str	r3, [sp, #4]
 8002340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	4603      	mov	r3, r0
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 faf8 	bl	800293c <I2C_RequestMemoryWrite>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d052      	beq.n	80023f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e081      	b.n	800245a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f000 fd86 	bl	8002e6c <I2C_WaitOnTXEFlagUntilTimeout>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00d      	beq.n	8002382 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	2b04      	cmp	r3, #4
 800236c:	d107      	bne.n	800237e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800237c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e06b      	b.n	800245a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	781a      	ldrb	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239c:	3b01      	subs	r3, #1
 800239e:	b29a      	uxth	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d11b      	bne.n	80023f8 <HAL_I2C_Mem_Write+0x180>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d017      	beq.n	80023f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	781a      	ldrb	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	1c5a      	adds	r2, r3, #1
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e2:	3b01      	subs	r3, #1
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1aa      	bne.n	8002356 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 fd79 	bl	8002efc <I2C_WaitOnBTFFlagUntilTimeout>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00d      	beq.n	800242c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	2b04      	cmp	r3, #4
 8002416:	d107      	bne.n	8002428 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002426:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e016      	b.n	800245a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800243a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2220      	movs	r2, #32
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	e000      	b.n	800245a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002458:	2302      	movs	r3, #2
  }
}
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	00100002 	.word	0x00100002
 8002468:	ffff0000 	.word	0xffff0000

0800246c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08c      	sub	sp, #48	; 0x30
 8002470:	af02      	add	r7, sp, #8
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	4608      	mov	r0, r1
 8002476:	4611      	mov	r1, r2
 8002478:	461a      	mov	r2, r3
 800247a:	4603      	mov	r3, r0
 800247c:	817b      	strh	r3, [r7, #10]
 800247e:	460b      	mov	r3, r1
 8002480:	813b      	strh	r3, [r7, #8]
 8002482:	4613      	mov	r3, r2
 8002484:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002486:	2300      	movs	r3, #0
 8002488:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800248a:	f7ff faf1 	bl	8001a70 <HAL_GetTick>
 800248e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b20      	cmp	r3, #32
 800249a:	f040 8244 	bne.w	8002926 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	2319      	movs	r3, #25
 80024a4:	2201      	movs	r2, #1
 80024a6:	4982      	ldr	r1, [pc, #520]	; (80026b0 <HAL_I2C_Mem_Read+0x244>)
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 fbc5 	bl	8002c38 <I2C_WaitOnFlagUntilTimeout>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80024b4:	2302      	movs	r3, #2
 80024b6:	e237      	b.n	8002928 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_I2C_Mem_Read+0x5a>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e230      	b.n	8002928 <HAL_I2C_Mem_Read+0x4bc>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d007      	beq.n	80024ec <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2222      	movs	r2, #34	; 0x22
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2240      	movs	r2, #64	; 0x40
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002516:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800251c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4a62      	ldr	r2, [pc, #392]	; (80026b4 <HAL_I2C_Mem_Read+0x248>)
 800252c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800252e:	88f8      	ldrh	r0, [r7, #6]
 8002530:	893a      	ldrh	r2, [r7, #8]
 8002532:	8979      	ldrh	r1, [r7, #10]
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	9301      	str	r3, [sp, #4]
 8002538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	4603      	mov	r3, r0
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 fa92 	bl	8002a68 <I2C_RequestMemoryRead>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e1ec      	b.n	8002928 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002552:	2b00      	cmp	r3, #0
 8002554:	d113      	bne.n	800257e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	61fb      	str	r3, [r7, #28]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	61fb      	str	r3, [r7, #28]
 800256a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	e1c0      	b.n	8002900 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002582:	2b01      	cmp	r3, #1
 8002584:	d11e      	bne.n	80025c4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002594:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002596:	b672      	cpsid	i
}
 8002598:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800259a:	2300      	movs	r3, #0
 800259c:	61bb      	str	r3, [r7, #24]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	61bb      	str	r3, [r7, #24]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	61bb      	str	r3, [r7, #24]
 80025ae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80025c0:	b662      	cpsie	i
}
 80025c2:	e035      	b.n	8002630 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d11e      	bne.n	800260a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80025dc:	b672      	cpsid	i
}
 80025de:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002604:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002606:	b662      	cpsie	i
}
 8002608:	e012      	b.n	8002630 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002618:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800261a:	2300      	movs	r3, #0
 800261c:	613b      	str	r3, [r7, #16]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	613b      	str	r3, [r7, #16]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002630:	e166      	b.n	8002900 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002636:	2b03      	cmp	r3, #3
 8002638:	f200 811f 	bhi.w	800287a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002640:	2b01      	cmp	r3, #1
 8002642:	d123      	bne.n	800268c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002646:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 fc9f 	bl	8002f8c <I2C_WaitOnRXNEFlagUntilTimeout>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e167      	b.n	8002928 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	691a      	ldr	r2, [r3, #16]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	1c5a      	adds	r2, r3, #1
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002680:	b29b      	uxth	r3, r3
 8002682:	3b01      	subs	r3, #1
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	855a      	strh	r2, [r3, #42]	; 0x2a
 800268a:	e139      	b.n	8002900 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002690:	2b02      	cmp	r3, #2
 8002692:	d152      	bne.n	800273a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269a:	2200      	movs	r2, #0
 800269c:	4906      	ldr	r1, [pc, #24]	; (80026b8 <HAL_I2C_Mem_Read+0x24c>)
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 faca 	bl	8002c38 <I2C_WaitOnFlagUntilTimeout>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d008      	beq.n	80026bc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e13c      	b.n	8002928 <HAL_I2C_Mem_Read+0x4bc>
 80026ae:	bf00      	nop
 80026b0:	00100002 	.word	0x00100002
 80026b4:	ffff0000 	.word	0xffff0000
 80026b8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80026bc:	b672      	cpsid	i
}
 80026be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	691a      	ldr	r2, [r3, #16]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	3b01      	subs	r3, #1
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002702:	b662      	cpsie	i
}
 8002704:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	691a      	ldr	r2, [r3, #16]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002722:	3b01      	subs	r3, #1
 8002724:	b29a      	uxth	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272e:	b29b      	uxth	r3, r3
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002738:	e0e2      	b.n	8002900 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002740:	2200      	movs	r2, #0
 8002742:	497b      	ldr	r1, [pc, #492]	; (8002930 <HAL_I2C_Mem_Read+0x4c4>)
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 fa77 	bl	8002c38 <I2C_WaitOnFlagUntilTimeout>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e0e9      	b.n	8002928 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002762:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002764:	b672      	cpsid	i
}
 8002766:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	691a      	ldr	r2, [r3, #16]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	1c5a      	adds	r2, r3, #1
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002790:	b29b      	uxth	r3, r3
 8002792:	3b01      	subs	r3, #1
 8002794:	b29a      	uxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800279a:	4b66      	ldr	r3, [pc, #408]	; (8002934 <HAL_I2C_Mem_Read+0x4c8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	08db      	lsrs	r3, r3, #3
 80027a0:	4a65      	ldr	r2, [pc, #404]	; (8002938 <HAL_I2C_Mem_Read+0x4cc>)
 80027a2:	fba2 2303 	umull	r2, r3, r2, r3
 80027a6:	0a1a      	lsrs	r2, r3, #8
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	00da      	lsls	r2, r3, #3
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d118      	bne.n	80027f2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2220      	movs	r2, #32
 80027ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	f043 0220 	orr.w	r2, r3, #32
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80027e2:	b662      	cpsie	i
}
 80027e4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e09a      	b.n	8002928 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d1d9      	bne.n	80027b4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800280e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691a      	ldr	r2, [r3, #16]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	1c5a      	adds	r2, r3, #1
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282c:	3b01      	subs	r3, #1
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002838:	b29b      	uxth	r3, r3
 800283a:	3b01      	subs	r3, #1
 800283c:	b29a      	uxth	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002842:	b662      	cpsie	i
}
 8002844:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	691a      	ldr	r2, [r3, #16]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002862:	3b01      	subs	r3, #1
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286e:	b29b      	uxth	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002878:	e042      	b.n	8002900 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800287a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 fb84 	bl	8002f8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e04c      	b.n	8002928 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d118      	bne.n	8002900 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002904:	2b00      	cmp	r3, #0
 8002906:	f47f ae94 	bne.w	8002632 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2220      	movs	r2, #32
 800290e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	e000      	b.n	8002928 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002926:	2302      	movs	r3, #2
  }
}
 8002928:	4618      	mov	r0, r3
 800292a:	3728      	adds	r7, #40	; 0x28
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	00010004 	.word	0x00010004
 8002934:	20000000 	.word	0x20000000
 8002938:	14f8b589 	.word	0x14f8b589

0800293c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af02      	add	r7, sp, #8
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	4608      	mov	r0, r1
 8002946:	4611      	mov	r1, r2
 8002948:	461a      	mov	r2, r3
 800294a:	4603      	mov	r3, r0
 800294c:	817b      	strh	r3, [r7, #10]
 800294e:	460b      	mov	r3, r1
 8002950:	813b      	strh	r3, [r7, #8]
 8002952:	4613      	mov	r3, r2
 8002954:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002964:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	2200      	movs	r2, #0
 800296e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 f960 	bl	8002c38 <I2C_WaitOnFlagUntilTimeout>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00d      	beq.n	800299a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800298c:	d103      	bne.n	8002996 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002994:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e05f      	b.n	8002a5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800299a:	897b      	ldrh	r3, [r7, #10]
 800299c:	b2db      	uxtb	r3, r3
 800299e:	461a      	mov	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	6a3a      	ldr	r2, [r7, #32]
 80029ae:	492d      	ldr	r1, [pc, #180]	; (8002a64 <I2C_RequestMemoryWrite+0x128>)
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 f9bb 	bl	8002d2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e04c      	b.n	8002a5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029c0:	2300      	movs	r3, #0
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d8:	6a39      	ldr	r1, [r7, #32]
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 fa46 	bl	8002e6c <I2C_WaitOnTXEFlagUntilTimeout>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00d      	beq.n	8002a02 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d107      	bne.n	80029fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e02b      	b.n	8002a5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a02:	88fb      	ldrh	r3, [r7, #6]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d105      	bne.n	8002a14 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a08:	893b      	ldrh	r3, [r7, #8]
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	611a      	str	r2, [r3, #16]
 8002a12:	e021      	b.n	8002a58 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a14:	893b      	ldrh	r3, [r7, #8]
 8002a16:	0a1b      	lsrs	r3, r3, #8
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a24:	6a39      	ldr	r1, [r7, #32]
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 fa20 	bl	8002e6c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00d      	beq.n	8002a4e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d107      	bne.n	8002a4a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e005      	b.n	8002a5a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a4e:	893b      	ldrh	r3, [r7, #8]
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3718      	adds	r7, #24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	00010002 	.word	0x00010002

08002a68 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	4608      	mov	r0, r1
 8002a72:	4611      	mov	r1, r2
 8002a74:	461a      	mov	r2, r3
 8002a76:	4603      	mov	r3, r0
 8002a78:	817b      	strh	r3, [r7, #10]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	813b      	strh	r3, [r7, #8]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a90:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aa0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f8c2 	bl	8002c38 <I2C_WaitOnFlagUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00d      	beq.n	8002ad6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ac8:	d103      	bne.n	8002ad2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ad0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e0aa      	b.n	8002c2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ad6:	897b      	ldrh	r3, [r7, #10]
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	461a      	mov	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ae4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	6a3a      	ldr	r2, [r7, #32]
 8002aea:	4952      	ldr	r1, [pc, #328]	; (8002c34 <I2C_RequestMemoryRead+0x1cc>)
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 f91d 	bl	8002d2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e097      	b.n	8002c2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b14:	6a39      	ldr	r1, [r7, #32]
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f9a8 	bl	8002e6c <I2C_WaitOnTXEFlagUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00d      	beq.n	8002b3e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d107      	bne.n	8002b3a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e076      	b.n	8002c2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b3e:	88fb      	ldrh	r3, [r7, #6]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d105      	bne.n	8002b50 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b44:	893b      	ldrh	r3, [r7, #8]
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	611a      	str	r2, [r3, #16]
 8002b4e:	e021      	b.n	8002b94 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b50:	893b      	ldrh	r3, [r7, #8]
 8002b52:	0a1b      	lsrs	r3, r3, #8
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b60:	6a39      	ldr	r1, [r7, #32]
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f000 f982 	bl	8002e6c <I2C_WaitOnTXEFlagUntilTimeout>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00d      	beq.n	8002b8a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d107      	bne.n	8002b86 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e050      	b.n	8002c2c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b8a:	893b      	ldrh	r3, [r7, #8]
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b96:	6a39      	ldr	r1, [r7, #32]
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 f967 	bl	8002e6c <I2C_WaitOnTXEFlagUntilTimeout>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00d      	beq.n	8002bc0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d107      	bne.n	8002bbc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e035      	b.n	8002c2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 f82b 	bl	8002c38 <I2C_WaitOnFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00d      	beq.n	8002c04 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bf6:	d103      	bne.n	8002c00 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e013      	b.n	8002c2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c04:	897b      	ldrh	r3, [r7, #10]
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	f043 0301 	orr.w	r3, r3, #1
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	6a3a      	ldr	r2, [r7, #32]
 8002c18:	4906      	ldr	r1, [pc, #24]	; (8002c34 <I2C_RequestMemoryRead+0x1cc>)
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 f886 	bl	8002d2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	00010002 	.word	0x00010002

08002c38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	603b      	str	r3, [r7, #0]
 8002c44:	4613      	mov	r3, r2
 8002c46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c48:	e048      	b.n	8002cdc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c50:	d044      	beq.n	8002cdc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c52:	f7fe ff0d 	bl	8001a70 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d302      	bcc.n	8002c68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d139      	bne.n	8002cdc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	0c1b      	lsrs	r3, r3, #16
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d10d      	bne.n	8002c8e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	43da      	mvns	r2, r3
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	bf0c      	ite	eq
 8002c84:	2301      	moveq	r3, #1
 8002c86:	2300      	movne	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	e00c      	b.n	8002ca8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	43da      	mvns	r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bf0c      	ite	eq
 8002ca0:	2301      	moveq	r3, #1
 8002ca2:	2300      	movne	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d116      	bne.n	8002cdc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	f043 0220 	orr.w	r2, r3, #32
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e023      	b.n	8002d24 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	0c1b      	lsrs	r3, r3, #16
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d10d      	bne.n	8002d02 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	43da      	mvns	r2, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	bf0c      	ite	eq
 8002cf8:	2301      	moveq	r3, #1
 8002cfa:	2300      	movne	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	e00c      	b.n	8002d1c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	43da      	mvns	r2, r3
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bf0c      	ite	eq
 8002d14:	2301      	moveq	r3, #1
 8002d16:	2300      	movne	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d093      	beq.n	8002c4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
 8002d38:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d3a:	e071      	b.n	8002e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d4a:	d123      	bne.n	8002d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d5a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	f043 0204 	orr.w	r2, r3, #4
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e067      	b.n	8002e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9a:	d041      	beq.n	8002e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d9c:	f7fe fe68 	bl	8001a70 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d302      	bcc.n	8002db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d136      	bne.n	8002e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	0c1b      	lsrs	r3, r3, #16
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d10c      	bne.n	8002dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	43da      	mvns	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	bf14      	ite	ne
 8002dce:	2301      	movne	r3, #1
 8002dd0:	2300      	moveq	r3, #0
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	e00b      	b.n	8002dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	43da      	mvns	r2, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	4013      	ands	r3, r2
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	bf14      	ite	ne
 8002de8:	2301      	movne	r3, #1
 8002dea:	2300      	moveq	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d016      	beq.n	8002e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	f043 0220 	orr.w	r2, r3, #32
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e021      	b.n	8002e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	0c1b      	lsrs	r3, r3, #16
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d10c      	bne.n	8002e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	43da      	mvns	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	4013      	ands	r3, r2
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	bf14      	ite	ne
 8002e3c:	2301      	movne	r3, #1
 8002e3e:	2300      	moveq	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	e00b      	b.n	8002e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	43da      	mvns	r2, r3
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	bf14      	ite	ne
 8002e56:	2301      	movne	r3, #1
 8002e58:	2300      	moveq	r3, #0
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f47f af6d 	bne.w	8002d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e78:	e034      	b.n	8002ee4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f8e3 	bl	8003046 <I2C_IsAcknowledgeFailed>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e034      	b.n	8002ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e90:	d028      	beq.n	8002ee4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e92:	f7fe fded 	bl	8001a70 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d302      	bcc.n	8002ea8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d11d      	bne.n	8002ee4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb2:	2b80      	cmp	r3, #128	; 0x80
 8002eb4:	d016      	beq.n	8002ee4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	f043 0220 	orr.w	r2, r3, #32
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e007      	b.n	8002ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eee:	2b80      	cmp	r3, #128	; 0x80
 8002ef0:	d1c3      	bne.n	8002e7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f08:	e034      	b.n	8002f74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 f89b 	bl	8003046 <I2C_IsAcknowledgeFailed>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e034      	b.n	8002f84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f20:	d028      	beq.n	8002f74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f22:	f7fe fda5 	bl	8001a70 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d302      	bcc.n	8002f38 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d11d      	bne.n	8002f74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f003 0304 	and.w	r3, r3, #4
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d016      	beq.n	8002f74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	f043 0220 	orr.w	r2, r3, #32
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e007      	b.n	8002f84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d1c3      	bne.n	8002f0a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f98:	e049      	b.n	800302e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	2b10      	cmp	r3, #16
 8002fa6:	d119      	bne.n	8002fdc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f06f 0210 	mvn.w	r2, #16
 8002fb0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e030      	b.n	800303e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fdc:	f7fe fd48 	bl	8001a70 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d302      	bcc.n	8002ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d11d      	bne.n	800302e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffc:	2b40      	cmp	r3, #64	; 0x40
 8002ffe:	d016      	beq.n	800302e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f043 0220 	orr.w	r2, r3, #32
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e007      	b.n	800303e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003038:	2b40      	cmp	r3, #64	; 0x40
 800303a:	d1ae      	bne.n	8002f9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800305c:	d11b      	bne.n	8003096 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003066:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2220      	movs	r2, #32
 8003072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f043 0204 	orr.w	r2, r3, #4
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr

080030a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030a4:	b08b      	sub	sp, #44	; 0x2c
 80030a6:	af06      	add	r7, sp, #24
 80030a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0f1      	b.n	8003298 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d106      	bne.n	80030ce <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f006 fb09 	bl	80096e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2203      	movs	r2, #3
 80030d2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f002 fa28 	bl	8005530 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	603b      	str	r3, [r7, #0]
 80030e6:	687e      	ldr	r6, [r7, #4]
 80030e8:	466d      	mov	r5, sp
 80030ea:	f106 0410 	add.w	r4, r6, #16
 80030ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030f2:	6823      	ldr	r3, [r4, #0]
 80030f4:	602b      	str	r3, [r5, #0]
 80030f6:	1d33      	adds	r3, r6, #4
 80030f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030fa:	6838      	ldr	r0, [r7, #0]
 80030fc:	f002 f9f2 	bl	80054e4 <USB_CoreInit>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2202      	movs	r2, #2
 800310a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e0c2      	b.n	8003298 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2100      	movs	r1, #0
 8003118:	4618      	mov	r0, r3
 800311a:	f002 fa23 	bl	8005564 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800311e:	2300      	movs	r3, #0
 8003120:	73fb      	strb	r3, [r7, #15]
 8003122:	e040      	b.n	80031a6 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003124:	7bfb      	ldrb	r3, [r7, #15]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	4613      	mov	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	440b      	add	r3, r1
 8003134:	3301      	adds	r3, #1
 8003136:	2201      	movs	r2, #1
 8003138:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800313a:	7bfb      	ldrb	r3, [r7, #15]
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	4613      	mov	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	440b      	add	r3, r1
 800314a:	7bfa      	ldrb	r2, [r7, #15]
 800314c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	440b      	add	r3, r1
 800315e:	3303      	adds	r3, #3
 8003160:	2200      	movs	r2, #0
 8003162:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003164:	7bfa      	ldrb	r2, [r7, #15]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	440b      	add	r3, r1
 8003172:	3338      	adds	r3, #56	; 0x38
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003178:	7bfa      	ldrb	r2, [r7, #15]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	440b      	add	r3, r1
 8003186:	333c      	adds	r3, #60	; 0x3c
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	440b      	add	r3, r1
 800319a:	3340      	adds	r3, #64	; 0x40
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	3301      	adds	r3, #1
 80031a4:	73fb      	strb	r3, [r7, #15]
 80031a6:	7bfa      	ldrb	r2, [r7, #15]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d3b9      	bcc.n	8003124 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031b0:	2300      	movs	r3, #0
 80031b2:	73fb      	strb	r3, [r7, #15]
 80031b4:	e044      	b.n	8003240 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031b6:	7bfa      	ldrb	r2, [r7, #15]
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	440b      	add	r3, r1
 80031c4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80031c8:	2200      	movs	r2, #0
 80031ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031cc:	7bfa      	ldrb	r2, [r7, #15]
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	440b      	add	r3, r1
 80031da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031de:	7bfa      	ldrb	r2, [r7, #15]
 80031e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031e2:	7bfa      	ldrb	r2, [r7, #15]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	440b      	add	r3, r1
 80031f0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031f8:	7bfa      	ldrb	r2, [r7, #15]
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	440b      	add	r3, r1
 8003206:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800320e:	7bfa      	ldrb	r2, [r7, #15]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	440b      	add	r3, r1
 800321c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003224:	7bfa      	ldrb	r2, [r7, #15]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	440b      	add	r3, r1
 8003232:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003236:	2200      	movs	r2, #0
 8003238:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	3301      	adds	r3, #1
 800323e:	73fb      	strb	r3, [r7, #15]
 8003240:	7bfa      	ldrb	r2, [r7, #15]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	429a      	cmp	r2, r3
 8003248:	d3b5      	bcc.n	80031b6 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	603b      	str	r3, [r7, #0]
 8003250:	687e      	ldr	r6, [r7, #4]
 8003252:	466d      	mov	r5, sp
 8003254:	f106 0410 	add.w	r4, r6, #16
 8003258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800325a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800325c:	6823      	ldr	r3, [r4, #0]
 800325e:	602b      	str	r3, [r5, #0]
 8003260:	1d33      	adds	r3, r6, #4
 8003262:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003264:	6838      	ldr	r0, [r7, #0]
 8003266:	f002 f989 	bl	800557c <USB_DevInit>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d005      	beq.n	800327c <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e00d      	b.n	8003298 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f004 fc0a 	bl	8007aaa <USB_DevDisconnect>

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032a0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d101      	bne.n	80032b6 <HAL_PCD_Start+0x16>
 80032b2:	2302      	movs	r3, #2
 80032b4:	e016      	b.n	80032e4 <HAL_PCD_Start+0x44>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f002 f91e 	bl	8005504 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80032c8:	2101      	movs	r1, #1
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f006 fc7b 	bl	8009bc6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f004 fbde 	bl	8007a96 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f004 fbe0 	bl	8007abe <USB_ReadInterrupts>
 80032fe:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 fb1b 	bl	8003946 <PCD_EP_ISR_Handler>

    return;
 8003310:	e119      	b.n	8003546 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003318:	2b00      	cmp	r3, #0
 800331a:	d013      	beq.n	8003344 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003324:	b29a      	uxth	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800332e:	b292      	uxth	r2, r2
 8003330:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f006 fa4e 	bl	80097d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800333a:	2100      	movs	r1, #0
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 f905 	bl	800354c <HAL_PCD_SetAddress>

    return;
 8003342:	e100      	b.n	8003546 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00c      	beq.n	8003368 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003356:	b29a      	uxth	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003360:	b292      	uxth	r2, r2
 8003362:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003366:	e0ee      	b.n	8003546 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00c      	beq.n	800338c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800337a:	b29a      	uxth	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003384:	b292      	uxth	r2, r2
 8003386:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800338a:	e0dc      	b.n	8003546 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d027      	beq.n	80033e6 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800339e:	b29a      	uxth	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0204 	bic.w	r2, r2, #4
 80033a8:	b292      	uxth	r2, r2
 80033aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 0208 	bic.w	r2, r2, #8
 80033c0:	b292      	uxth	r2, r2
 80033c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f006 fa3e 	bl	8009848 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033de:	b292      	uxth	r2, r2
 80033e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80033e4:	e0af      	b.n	8003546 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 8083 	beq.w	80034f8 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80033f2:	2300      	movs	r3, #0
 80033f4:	77fb      	strb	r3, [r7, #31]
 80033f6:	e010      	b.n	800341a <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	461a      	mov	r2, r3
 80033fe:	7ffb      	ldrb	r3, [r7, #31]
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	441a      	add	r2, r3
 8003404:	7ffb      	ldrb	r3, [r7, #31]
 8003406:	8812      	ldrh	r2, [r2, #0]
 8003408:	b292      	uxth	r2, r2
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	3320      	adds	r3, #32
 800340e:	443b      	add	r3, r7
 8003410:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003414:	7ffb      	ldrb	r3, [r7, #31]
 8003416:	3301      	adds	r3, #1
 8003418:	77fb      	strb	r3, [r7, #31]
 800341a:	7ffb      	ldrb	r3, [r7, #31]
 800341c:	2b07      	cmp	r3, #7
 800341e:	d9eb      	bls.n	80033f8 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003428:	b29a      	uxth	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0201 	orr.w	r2, r2, #1
 8003432:	b292      	uxth	r2, r2
 8003434:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003440:	b29a      	uxth	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0201 	bic.w	r2, r2, #1
 800344a:	b292      	uxth	r2, r2
 800344c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003450:	bf00      	nop
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800345a:	b29b      	uxth	r3, r3
 800345c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0f6      	beq.n	8003452 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800346c:	b29a      	uxth	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003476:	b292      	uxth	r2, r2
 8003478:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800347c:	2300      	movs	r3, #0
 800347e:	77fb      	strb	r3, [r7, #31]
 8003480:	e00f      	b.n	80034a2 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003482:	7ffb      	ldrb	r3, [r7, #31]
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6812      	ldr	r2, [r2, #0]
 8003488:	4611      	mov	r1, r2
 800348a:	7ffa      	ldrb	r2, [r7, #31]
 800348c:	0092      	lsls	r2, r2, #2
 800348e:	440a      	add	r2, r1
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	3320      	adds	r3, #32
 8003494:	443b      	add	r3, r7
 8003496:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800349a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800349c:	7ffb      	ldrb	r3, [r7, #31]
 800349e:	3301      	adds	r3, #1
 80034a0:	77fb      	strb	r3, [r7, #31]
 80034a2:	7ffb      	ldrb	r3, [r7, #31]
 80034a4:	2b07      	cmp	r3, #7
 80034a6:	d9ec      	bls.n	8003482 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0208 	orr.w	r2, r2, #8
 80034ba:	b292      	uxth	r2, r2
 80034bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034d2:	b292      	uxth	r2, r2
 80034d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0204 	orr.w	r2, r2, #4
 80034ea:	b292      	uxth	r2, r2
 80034ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f006 f98f 	bl	8009814 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80034f6:	e026      	b.n	8003546 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00f      	beq.n	8003522 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800350a:	b29a      	uxth	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003514:	b292      	uxth	r2, r2
 8003516:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f006 f94d 	bl	80097ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003520:	e011      	b.n	8003546 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00c      	beq.n	8003546 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003534:	b29a      	uxth	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800353e:	b292      	uxth	r2, r2
 8003540:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003544:	bf00      	nop
  }
}
 8003546:	3720      	adds	r7, #32
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_PCD_SetAddress+0x1a>
 8003562:	2302      	movs	r3, #2
 8003564:	e013      	b.n	800358e <HAL_PCD_SetAddress+0x42>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	78fa      	ldrb	r2, [r7, #3]
 8003572:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	78fa      	ldrb	r2, [r7, #3]
 800357c:	4611      	mov	r1, r2
 800357e:	4618      	mov	r0, r3
 8003580:	f004 fa76 	bl	8007a70 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b084      	sub	sp, #16
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
 800359e:	4608      	mov	r0, r1
 80035a0:	4611      	mov	r1, r2
 80035a2:	461a      	mov	r2, r3
 80035a4:	4603      	mov	r3, r0
 80035a6:	70fb      	strb	r3, [r7, #3]
 80035a8:	460b      	mov	r3, r1
 80035aa:	803b      	strh	r3, [r7, #0]
 80035ac:	4613      	mov	r3, r2
 80035ae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80035b0:	2300      	movs	r3, #0
 80035b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	da0e      	bge.n	80035da <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035bc:	78fb      	ldrb	r3, [r7, #3]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	4613      	mov	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	4413      	add	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2201      	movs	r2, #1
 80035d6:	705a      	strb	r2, [r3, #1]
 80035d8:	e00e      	b.n	80035f8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035da:	78fb      	ldrb	r3, [r7, #3]
 80035dc:	f003 0207 	and.w	r2, r3, #7
 80035e0:	4613      	mov	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	4413      	add	r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80035f8:	78fb      	ldrb	r3, [r7, #3]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003604:	883a      	ldrh	r2, [r7, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	78ba      	ldrb	r2, [r7, #2]
 800360e:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003610:	78bb      	ldrb	r3, [r7, #2]
 8003612:	2b02      	cmp	r3, #2
 8003614:	d102      	bne.n	800361c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <HAL_PCD_EP_Open+0x94>
 8003626:	2302      	movs	r3, #2
 8003628:	e00e      	b.n	8003648 <HAL_PCD_EP_Open+0xb2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68f9      	ldr	r1, [r7, #12]
 8003638:	4618      	mov	r0, r3
 800363a:	f001 ffbf 	bl	80055bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003646:	7afb      	ldrb	r3, [r7, #11]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	460b      	mov	r3, r1
 800365a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800365c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003660:	2b00      	cmp	r3, #0
 8003662:	da0e      	bge.n	8003682 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003664:	78fb      	ldrb	r3, [r7, #3]
 8003666:	f003 0307 	and.w	r3, r3, #7
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	4413      	add	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2201      	movs	r2, #1
 800367e:	705a      	strb	r2, [r3, #1]
 8003680:	e00e      	b.n	80036a0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003682:	78fb      	ldrb	r3, [r7, #3]
 8003684:	f003 0207 	and.w	r2, r3, #7
 8003688:	4613      	mov	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	4413      	add	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80036a0:	78fb      	ldrb	r3, [r7, #3]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d101      	bne.n	80036ba <HAL_PCD_EP_Close+0x6a>
 80036b6:	2302      	movs	r3, #2
 80036b8:	e00e      	b.n	80036d8 <HAL_PCD_EP_Close+0x88>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68f9      	ldr	r1, [r7, #12]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f002 fb37 	bl	8005d3c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	607a      	str	r2, [r7, #4]
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	460b      	mov	r3, r1
 80036ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036f0:	7afb      	ldrb	r3, [r7, #11]
 80036f2:	f003 0207 	and.w	r2, r3, #7
 80036f6:	4613      	mov	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4413      	add	r3, r2
 8003706:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	2200      	movs	r2, #0
 8003718:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2200      	movs	r2, #0
 800371e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003720:	7afb      	ldrb	r3, [r7, #11]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	b2da      	uxtb	r2, r3
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6979      	ldr	r1, [r7, #20]
 8003732:	4618      	mov	r0, r3
 8003734:	f002 fcee 	bl	8006114 <USB_EPStartXfer>

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	460b      	mov	r3, r1
 800374c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800374e:	78fb      	ldrb	r3, [r7, #3]
 8003750:	f003 0207 	and.w	r2, r3, #7
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	4613      	mov	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	440b      	add	r3, r1
 8003760:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003764:	681b      	ldr	r3, [r3, #0]
}
 8003766:	4618      	mov	r0, r3
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr

08003770 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	607a      	str	r2, [r7, #4]
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	460b      	mov	r3, r1
 800377e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003780:	7afb      	ldrb	r3, [r7, #11]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	4613      	mov	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4413      	add	r3, r2
 8003794:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	2200      	movs	r2, #0
 80037b4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2201      	movs	r2, #1
 80037ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037bc:	7afb      	ldrb	r3, [r7, #11]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6979      	ldr	r1, [r7, #20]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f002 fca0 	bl	8006114 <USB_EPStartXfer>

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b084      	sub	sp, #16
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	460b      	mov	r3, r1
 80037e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80037ea:	78fb      	ldrb	r3, [r7, #3]
 80037ec:	f003 0207 	and.w	r2, r3, #7
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d901      	bls.n	80037fc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e04c      	b.n	8003896 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003800:	2b00      	cmp	r3, #0
 8003802:	da0e      	bge.n	8003822 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003804:	78fb      	ldrb	r3, [r7, #3]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	1c5a      	adds	r2, r3, #1
 800380c:	4613      	mov	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	4413      	add	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2201      	movs	r2, #1
 800381e:	705a      	strb	r2, [r3, #1]
 8003820:	e00c      	b.n	800383c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003822:	78fa      	ldrb	r2, [r7, #3]
 8003824:	4613      	mov	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	4413      	add	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2201      	movs	r2, #1
 8003840:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003842:	78fb      	ldrb	r3, [r7, #3]
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	b2da      	uxtb	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003854:	2b01      	cmp	r3, #1
 8003856:	d101      	bne.n	800385c <HAL_PCD_EP_SetStall+0x7e>
 8003858:	2302      	movs	r3, #2
 800385a:	e01c      	b.n	8003896 <HAL_PCD_EP_SetStall+0xb8>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68f9      	ldr	r1, [r7, #12]
 800386a:	4618      	mov	r0, r3
 800386c:	f004 f803 	bl	8007876 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	2b00      	cmp	r3, #0
 8003878:	d108      	bne.n	800388c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003884:	4619      	mov	r1, r3
 8003886:	4610      	mov	r0, r2
 8003888:	f004 f928 	bl	8007adc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	460b      	mov	r3, r1
 80038a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80038aa:	78fb      	ldrb	r3, [r7, #3]
 80038ac:	f003 020f 	and.w	r2, r3, #15
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d901      	bls.n	80038bc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e040      	b.n	800393e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	da0e      	bge.n	80038e2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038c4:	78fb      	ldrb	r3, [r7, #3]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	1c5a      	adds	r2, r3, #1
 80038cc:	4613      	mov	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	4413      	add	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2201      	movs	r2, #1
 80038de:	705a      	strb	r2, [r3, #1]
 80038e0:	e00e      	b.n	8003900 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038e2:	78fb      	ldrb	r3, [r7, #3]
 80038e4:	f003 0207 	and.w	r2, r3, #7
 80038e8:	4613      	mov	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	4413      	add	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003906:	78fb      	ldrb	r3, [r7, #3]
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	b2da      	uxtb	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_PCD_EP_ClrStall+0x82>
 800391c:	2302      	movs	r3, #2
 800391e:	e00e      	b.n	800393e <HAL_PCD_EP_ClrStall+0xa0>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68f9      	ldr	r1, [r7, #12]
 800392e:	4618      	mov	r0, r3
 8003930:	f003 fff1 	bl	8007916 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b096      	sub	sp, #88	; 0x58
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800394e:	e3bf      	b.n	80040d0 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003958:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800395c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003960:	b2db      	uxtb	r3, r3
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800396a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800396e:	2b00      	cmp	r3, #0
 8003970:	f040 8179 	bne.w	8003c66 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003974:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	2b00      	cmp	r3, #0
 800397e:	d152      	bne.n	8003a26 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	881b      	ldrh	r3, [r3, #0]
 8003986:	b29b      	uxth	r3, r3
 8003988:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800398c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003990:	81fb      	strh	r3, [r7, #14]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	89fb      	ldrh	r3, [r7, #14]
 8003998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800399c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3328      	adds	r3, #40	; 0x28
 80039a8:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	461a      	mov	r2, r3
 80039b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	4413      	add	r3, r2
 80039be:	3302      	adds	r3, #2
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	6812      	ldr	r2, [r2, #0]
 80039c6:	4413      	add	r3, r2
 80039c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80039d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039d4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80039d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039d8:	695a      	ldr	r2, [r3, #20]
 80039da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	441a      	add	r2, r3
 80039e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039e2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80039e4:	2100      	movs	r1, #0
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f005 fecd 	bl	8009786 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 836b 	beq.w	80040d0 <PCD_EP_ISR_Handler+0x78a>
 80039fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f040 8366 	bne.w	80040d0 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	b292      	uxth	r2, r2
 8003a18:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003a24:	e354      	b.n	80040d0 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a2c:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003a38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003a3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d034      	beq.n	8003aae <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	461a      	mov	r2, r3
 8003a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	4413      	add	r3, r2
 8003a58:	3306      	adds	r3, #6
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6812      	ldr	r2, [r2, #0]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a66:	881b      	ldrh	r3, [r3, #0]
 8003a68:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a6e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6818      	ldr	r0, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a7c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a80:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	f004 f87a 	bl	8007b7c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003a94:	4013      	ands	r3, r2
 8003a96:	823b      	strh	r3, [r7, #16]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	8a3a      	ldrh	r2, [r7, #16]
 8003a9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003aa2:	b292      	uxth	r2, r2
 8003aa4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f005 fe40 	bl	800972c <HAL_PCD_SetupStageCallback>
 8003aac:	e310      	b.n	80040d0 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003aae:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f280 830c 	bge.w	80040d0 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	83fb      	strh	r3, [r7, #30]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	8bfa      	ldrh	r2, [r7, #30]
 8003ace:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ad2:	b292      	uxth	r2, r2
 8003ad4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4413      	add	r3, r2
 8003aea:	3306      	adds	r3, #6
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6812      	ldr	r2, [r2, #0]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b00:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d019      	beq.n	8003b3e <PCD_EP_ISR_Handler+0x1f8>
 8003b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d015      	beq.n	8003b3e <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6818      	ldr	r0, [r3, #0]
 8003b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b18:	6959      	ldr	r1, [r3, #20]
 8003b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b1c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b20:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	f004 f82a 	bl	8007b7c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b2a:	695a      	ldr	r2, [r3, #20]
 8003b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	441a      	add	r2, r3
 8003b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b34:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003b36:	2100      	movs	r1, #0
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f005 fe09 	bl	8009750 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	881b      	ldrh	r3, [r3, #0]
 8003b44:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003b48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f040 82bd 	bne.w	80040d0 <PCD_EP_ISR_Handler+0x78a>
 8003b56:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003b5a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003b5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b62:	f000 82b5 	beq.w	80040d0 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	61bb      	str	r3, [r7, #24]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	461a      	mov	r2, r3
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b84:	617b      	str	r3, [r7, #20]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	881b      	ldrh	r3, [r3, #0]
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	801a      	strh	r2, [r3, #0]
 8003b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	2b3e      	cmp	r3, #62	; 0x3e
 8003b9c:	d91d      	bls.n	8003bda <PCD_EP_ISR_Handler+0x294>
 8003b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	095b      	lsrs	r3, r3, #5
 8003ba4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	f003 031f 	and.w	r3, r3, #31
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d102      	bne.n	8003bb8 <PCD_EP_ISR_Handler+0x272>
 8003bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	647b      	str	r3, [r7, #68]	; 0x44
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	029b      	lsls	r3, r3, #10
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	801a      	strh	r2, [r3, #0]
 8003bd8:	e026      	b.n	8003c28 <PCD_EP_ISR_Handler+0x2e2>
 8003bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10a      	bne.n	8003bf8 <PCD_EP_ISR_Handler+0x2b2>
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	801a      	strh	r2, [r3, #0]
 8003bf6:	e017      	b.n	8003c28 <PCD_EP_ISR_Handler+0x2e2>
 8003bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	085b      	lsrs	r3, r3, #1
 8003bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8003c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <PCD_EP_ISR_Handler+0x2cc>
 8003c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c0e:	3301      	adds	r3, #1
 8003c10:	647b      	str	r3, [r7, #68]	; 0x44
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	881b      	ldrh	r3, [r3, #0]
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	029b      	lsls	r3, r3, #10
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	4313      	orrs	r3, r2
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c38:	827b      	strh	r3, [r7, #18]
 8003c3a:	8a7b      	ldrh	r3, [r7, #18]
 8003c3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003c40:	827b      	strh	r3, [r7, #18]
 8003c42:	8a7b      	ldrh	r3, [r7, #18]
 8003c44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c48:	827b      	strh	r3, [r7, #18]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	8a7b      	ldrh	r3, [r7, #18]
 8003c50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	8013      	strh	r3, [r2, #0]
 8003c64:	e234      	b.n	80040d0 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	881b      	ldrh	r3, [r3, #0]
 8003c76:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003c7a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f280 80fc 	bge.w	8003e7c <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003cb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cb6:	b292      	uxth	r2, r2
 8003cb8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003cba:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	4413      	add	r3, r2
 8003cce:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cd2:	7b1b      	ldrb	r3, [r3, #12]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d125      	bne.n	8003d24 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	4413      	add	r3, r2
 8003cec:	3306      	adds	r3, #6
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6812      	ldr	r2, [r2, #0]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d00:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003d04:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 8092 	beq.w	8003e32 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d14:	6959      	ldr	r1, [r3, #20]
 8003d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d18:	88da      	ldrh	r2, [r3, #6]
 8003d1a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003d1e:	f003 ff2d 	bl	8007b7c <USB_ReadPMA>
 8003d22:	e086      	b.n	8003e32 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d26:	78db      	ldrb	r3, [r3, #3]
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d10a      	bne.n	8003d42 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003d2c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003d30:	461a      	mov	r2, r3
 8003d32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 f9d9 	bl	80040ec <HAL_PCD_EP_DB_Receive>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003d40:	e077      	b.n	8003e32 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	461a      	mov	r2, r3
 8003d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	461a      	mov	r2, r3
 8003d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	441a      	add	r2, r3
 8003d6e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d024      	beq.n	8003dea <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	461a      	mov	r2, r3
 8003dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	4413      	add	r3, r2
 8003db4:	3302      	adds	r3, #2
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6812      	ldr	r2, [r2, #0]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dc8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003dcc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d02e      	beq.n	8003e32 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dda:	6959      	ldr	r1, [r3, #20]
 8003ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dde:	891a      	ldrh	r2, [r3, #8]
 8003de0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003de4:	f003 feca 	bl	8007b7c <USB_ReadPMA>
 8003de8:	e023      	b.n	8003e32 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	461a      	mov	r2, r3
 8003df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	4413      	add	r3, r2
 8003dfe:	3306      	adds	r3, #6
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6812      	ldr	r2, [r2, #0]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e12:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003e16:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d009      	beq.n	8003e32 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e24:	6959      	ldr	r1, [r3, #20]
 8003e26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e28:	895a      	ldrh	r2, [r3, #10]
 8003e2a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003e2e:	f003 fea5 	bl	8007b7c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e34:	69da      	ldr	r2, [r3, #28]
 8003e36:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003e3a:	441a      	add	r2, r3
 8003e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e3e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003e40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e42:	695a      	ldr	r2, [r3, #20]
 8003e44:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003e48:	441a      	add	r2, r3
 8003e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e4c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d005      	beq.n	8003e62 <PCD_EP_ISR_Handler+0x51c>
 8003e56:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d206      	bcs.n	8003e70 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	4619      	mov	r1, r3
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f005 fc71 	bl	8009750 <HAL_PCD_DataOutStageCallback>
 8003e6e:	e005      	b.n	8003e7c <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e76:	4618      	mov	r0, r3
 8003e78:	f002 f94c 	bl	8006114 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003e7c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 8123 	beq.w	80040d0 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8003e8a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	441a      	add	r2, r3
 8003eca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003ece:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ed2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003edc:	78db      	ldrb	r3, [r3, #3]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	f040 80a2 	bne.w	8004028 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8003ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eec:	7b1b      	ldrb	r3, [r3, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 8093 	beq.w	800401a <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ef4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d046      	beq.n	8003f8e <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f02:	785b      	ldrb	r3, [r3, #1]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d126      	bne.n	8003f56 <PCD_EP_ISR_Handler+0x610>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	461a      	mov	r2, r3
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	4413      	add	r3, r2
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	011a      	lsls	r2, r3, #4
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	4413      	add	r3, r2
 8003f2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f2e:	623b      	str	r3, [r7, #32]
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	881b      	ldrh	r3, [r3, #0]
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	801a      	strh	r2, [r3, #0]
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	881b      	ldrh	r3, [r3, #0]
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	801a      	strh	r2, [r3, #0]
 8003f54:	e061      	b.n	800401a <PCD_EP_ISR_Handler+0x6d4>
 8003f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f58:	785b      	ldrb	r3, [r3, #1]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d15d      	bne.n	800401a <PCD_EP_ISR_Handler+0x6d4>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	461a      	mov	r2, r3
 8003f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f72:	4413      	add	r3, r2
 8003f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	011a      	lsls	r2, r3, #4
 8003f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7e:	4413      	add	r3, r2
 8003f80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f88:	2200      	movs	r2, #0
 8003f8a:	801a      	strh	r2, [r3, #0]
 8003f8c:	e045      	b.n	800401a <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f96:	785b      	ldrb	r3, [r3, #1]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d126      	bne.n	8003fea <PCD_EP_ISR_Handler+0x6a4>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	461a      	mov	r2, r3
 8003fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb0:	4413      	add	r3, r2
 8003fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8003fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	011a      	lsls	r2, r3, #4
 8003fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fc2:	633b      	str	r3, [r7, #48]	; 0x30
 8003fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc6:	881b      	ldrh	r3, [r3, #0]
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd2:	801a      	strh	r2, [r3, #0]
 8003fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe6:	801a      	strh	r2, [r3, #0]
 8003fe8:	e017      	b.n	800401a <PCD_EP_ISR_Handler+0x6d4>
 8003fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fec:	785b      	ldrb	r3, [r3, #1]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d113      	bne.n	800401a <PCD_EP_ISR_Handler+0x6d4>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004000:	4413      	add	r3, r2
 8004002:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	011a      	lsls	r2, r3, #4
 800400a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800400c:	4413      	add	r3, r2
 800400e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004012:	63bb      	str	r3, [r7, #56]	; 0x38
 8004014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004016:	2200      	movs	r2, #0
 8004018:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800401a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	4619      	mov	r1, r3
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f005 fbb0 	bl	8009786 <HAL_PCD_DataInStageCallback>
 8004026:	e053      	b.n	80040d0 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004028:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800402c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004030:	2b00      	cmp	r3, #0
 8004032:	d146      	bne.n	80040c2 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800403c:	b29b      	uxth	r3, r3
 800403e:	461a      	mov	r2, r3
 8004040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	4413      	add	r3, r2
 8004048:	3302      	adds	r3, #2
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6812      	ldr	r2, [r2, #0]
 8004050:	4413      	add	r3, r2
 8004052:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800405c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004062:	699a      	ldr	r2, [r3, #24]
 8004064:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004068:	429a      	cmp	r2, r3
 800406a:	d907      	bls.n	800407c <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 800406c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800406e:	699a      	ldr	r2, [r3, #24]
 8004070:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004074:	1ad2      	subs	r2, r2, r3
 8004076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004078:	619a      	str	r2, [r3, #24]
 800407a:	e002      	b.n	8004082 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 800407c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800407e:	2200      	movs	r2, #0
 8004080:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d106      	bne.n	8004098 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800408a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	4619      	mov	r1, r3
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f005 fb78 	bl	8009786 <HAL_PCD_DataInStageCallback>
 8004096:	e01b      	b.n	80040d0 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004098:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800409a:	695a      	ldr	r2, [r3, #20]
 800409c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80040a0:	441a      	add	r2, r3
 80040a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040a4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80040a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040a8:	69da      	ldr	r2, [r3, #28]
 80040aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80040ae:	441a      	add	r2, r3
 80040b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040b2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040ba:	4618      	mov	r0, r3
 80040bc:	f002 f82a 	bl	8006114 <USB_EPStartXfer>
 80040c0:	e006      	b.n	80040d0 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80040c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80040c6:	461a      	mov	r2, r3
 80040c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f91b 	bl	8004306 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80040d8:	b29b      	uxth	r3, r3
 80040da:	b21b      	sxth	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f6ff ac37 	blt.w	8003950 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3758      	adds	r7, #88	; 0x58
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b088      	sub	sp, #32
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	4613      	mov	r3, r2
 80040f8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80040fa:	88fb      	ldrh	r3, [r7, #6]
 80040fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d07e      	beq.n	8004202 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800410c:	b29b      	uxth	r3, r3
 800410e:	461a      	mov	r2, r3
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	4413      	add	r3, r2
 8004118:	3302      	adds	r3, #2
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	6812      	ldr	r2, [r2, #0]
 8004120:	4413      	add	r3, r2
 8004122:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800412c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	699a      	ldr	r2, [r3, #24]
 8004132:	8b7b      	ldrh	r3, [r7, #26]
 8004134:	429a      	cmp	r2, r3
 8004136:	d306      	bcc.n	8004146 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	699a      	ldr	r2, [r3, #24]
 800413c:	8b7b      	ldrh	r3, [r7, #26]
 800413e:	1ad2      	subs	r2, r2, r3
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	619a      	str	r2, [r3, #24]
 8004144:	e002      	b.n	800414c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	2200      	movs	r2, #0
 800414a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d123      	bne.n	800419c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	461a      	mov	r2, r3
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	b29b      	uxth	r3, r3
 8004166:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800416a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416e:	833b      	strh	r3, [r7, #24]
 8004170:	8b3b      	ldrh	r3, [r7, #24]
 8004172:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004176:	833b      	strh	r3, [r7, #24]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	461a      	mov	r2, r3
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	441a      	add	r2, r3
 8004186:	8b3b      	ldrh	r3, [r7, #24]
 8004188:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800418c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004198:	b29b      	uxth	r3, r3
 800419a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800419c:	88fb      	ldrh	r3, [r7, #6]
 800419e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d01f      	beq.n	80041e6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	461a      	mov	r2, r3
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c0:	82fb      	strh	r3, [r7, #22]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	441a      	add	r2, r3
 80041d0:	8afb      	ldrh	r3, [r7, #22]
 80041d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80041e6:	8b7b      	ldrh	r3, [r7, #26]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 8087 	beq.w	80042fc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6818      	ldr	r0, [r3, #0]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	6959      	ldr	r1, [r3, #20]
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	891a      	ldrh	r2, [r3, #8]
 80041fa:	8b7b      	ldrh	r3, [r7, #26]
 80041fc:	f003 fcbe 	bl	8007b7c <USB_ReadPMA>
 8004200:	e07c      	b.n	80042fc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800420a:	b29b      	uxth	r3, r3
 800420c:	461a      	mov	r2, r3
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	4413      	add	r3, r2
 8004216:	3306      	adds	r3, #6
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	6812      	ldr	r2, [r2, #0]
 800421e:	4413      	add	r3, r2
 8004220:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800422a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	699a      	ldr	r2, [r3, #24]
 8004230:	8b7b      	ldrh	r3, [r7, #26]
 8004232:	429a      	cmp	r2, r3
 8004234:	d306      	bcc.n	8004244 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	8b7b      	ldrh	r3, [r7, #26]
 800423c:	1ad2      	subs	r2, r2, r3
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	619a      	str	r2, [r3, #24]
 8004242:	e002      	b.n	800424a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2200      	movs	r2, #0
 8004248:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d123      	bne.n	800429a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	461a      	mov	r2, r3
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4413      	add	r3, r2
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	b29b      	uxth	r3, r3
 8004264:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426c:	83fb      	strh	r3, [r7, #30]
 800426e:	8bfb      	ldrh	r3, [r7, #30]
 8004270:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004274:	83fb      	strh	r3, [r7, #30]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	441a      	add	r2, r3
 8004284:	8bfb      	ldrh	r3, [r7, #30]
 8004286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800428a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800428e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004296:	b29b      	uxth	r3, r3
 8004298:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800429a:	88fb      	ldrh	r3, [r7, #6]
 800429c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d11f      	bne.n	80042e4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	461a      	mov	r2, r3
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042be:	83bb      	strh	r3, [r7, #28]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	461a      	mov	r2, r3
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	441a      	add	r2, r3
 80042ce:	8bbb      	ldrh	r3, [r7, #28]
 80042d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80042e4:	8b7b      	ldrh	r3, [r7, #26]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d008      	beq.n	80042fc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6818      	ldr	r0, [r3, #0]
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	6959      	ldr	r1, [r3, #20]
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	895a      	ldrh	r2, [r3, #10]
 80042f6:	8b7b      	ldrh	r3, [r7, #26]
 80042f8:	f003 fc40 	bl	8007b7c <USB_ReadPMA>
    }
  }

  return count;
 80042fc:	8b7b      	ldrh	r3, [r7, #26]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3720      	adds	r7, #32
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b0a4      	sub	sp, #144	; 0x90
 800430a:	af00      	add	r7, sp, #0
 800430c:	60f8      	str	r0, [r7, #12]
 800430e:	60b9      	str	r1, [r7, #8]
 8004310:	4613      	mov	r3, r2
 8004312:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004314:	88fb      	ldrh	r3, [r7, #6]
 8004316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 81dd 	beq.w	80046da <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004328:	b29b      	uxth	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	4413      	add	r3, r2
 8004334:	3302      	adds	r3, #2
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	6812      	ldr	r2, [r2, #0]
 800433c:	4413      	add	r3, r2
 800433e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004348:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	699a      	ldr	r2, [r3, #24]
 8004350:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004354:	429a      	cmp	r2, r3
 8004356:	d907      	bls.n	8004368 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	699a      	ldr	r2, [r3, #24]
 800435c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004360:	1ad2      	subs	r2, r2, r3
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	619a      	str	r2, [r3, #24]
 8004366:	e002      	b.n	800436e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2200      	movs	r2, #0
 800436c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	2b00      	cmp	r3, #0
 8004374:	f040 80b9 	bne.w	80044ea <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	785b      	ldrb	r3, [r3, #1]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d126      	bne.n	80043ce <HAL_PCD_EP_DB_Transmit+0xc8>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800438e:	b29b      	uxth	r3, r3
 8004390:	461a      	mov	r2, r3
 8004392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004394:	4413      	add	r3, r2
 8004396:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	011a      	lsls	r2, r3, #4
 800439e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a0:	4413      	add	r3, r2
 80043a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80043a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b6:	801a      	strh	r2, [r3, #0]
 80043b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	b29b      	uxth	r3, r3
 80043be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ca:	801a      	strh	r2, [r3, #0]
 80043cc:	e01a      	b.n	8004404 <HAL_PCD_EP_DB_Transmit+0xfe>
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	785b      	ldrb	r3, [r3, #1]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d116      	bne.n	8004404 <HAL_PCD_EP_DB_Transmit+0xfe>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	637b      	str	r3, [r7, #52]	; 0x34
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	461a      	mov	r2, r3
 80043e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ea:	4413      	add	r3, r2
 80043ec:	637b      	str	r3, [r7, #52]	; 0x34
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	011a      	lsls	r2, r3, #4
 80043f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f6:	4413      	add	r3, r2
 80043f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043fc:	633b      	str	r3, [r7, #48]	; 0x30
 80043fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004400:	2200      	movs	r2, #0
 8004402:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	627b      	str	r3, [r7, #36]	; 0x24
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	785b      	ldrb	r3, [r3, #1]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d126      	bne.n	8004460 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	61fb      	str	r3, [r7, #28]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004420:	b29b      	uxth	r3, r3
 8004422:	461a      	mov	r2, r3
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	4413      	add	r3, r2
 8004428:	61fb      	str	r3, [r7, #28]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	011a      	lsls	r2, r3, #4
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	4413      	add	r3, r2
 8004434:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004438:	61bb      	str	r3, [r7, #24]
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	b29b      	uxth	r3, r3
 8004440:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004444:	b29a      	uxth	r2, r3
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	801a      	strh	r2, [r3, #0]
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	881b      	ldrh	r3, [r3, #0]
 800444e:	b29b      	uxth	r3, r3
 8004450:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004454:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004458:	b29a      	uxth	r2, r3
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	801a      	strh	r2, [r3, #0]
 800445e:	e017      	b.n	8004490 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	785b      	ldrb	r3, [r3, #1]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d113      	bne.n	8004490 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004470:	b29b      	uxth	r3, r3
 8004472:	461a      	mov	r2, r3
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	4413      	add	r3, r2
 8004478:	627b      	str	r3, [r7, #36]	; 0x24
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	011a      	lsls	r2, r3, #4
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	4413      	add	r3, r2
 8004484:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004488:	623b      	str	r3, [r7, #32]
 800448a:	6a3b      	ldr	r3, [r7, #32]
 800448c:	2200      	movs	r2, #0
 800448e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	4619      	mov	r1, r3
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f005 f975 	bl	8009786 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800449c:	88fb      	ldrh	r3, [r7, #6]
 800449e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 82fc 	beq.w	8004aa0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	461a      	mov	r2, r3
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	881b      	ldrh	r3, [r3, #0]
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c2:	82fb      	strh	r3, [r7, #22]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	461a      	mov	r2, r3
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	441a      	add	r2, r3
 80044d2:	8afb      	ldrh	r3, [r7, #22]
 80044d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	8013      	strh	r3, [r2, #0]
 80044e8:	e2da      	b.n	8004aa0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80044ea:	88fb      	ldrh	r3, [r7, #6]
 80044ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d021      	beq.n	8004538 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	461a      	mov	r2, r3
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	b29b      	uxth	r3, r3
 8004506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800450a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	461a      	mov	r2, r3
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	441a      	add	r2, r3
 8004520:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004524:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004528:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800452c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004534:	b29b      	uxth	r3, r3
 8004536:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800453e:	2b01      	cmp	r3, #1
 8004540:	f040 82ae 	bne.w	8004aa0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	695a      	ldr	r2, [r3, #20]
 8004548:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800454c:	441a      	add	r2, r3
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	69da      	ldr	r2, [r3, #28]
 8004556:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800455a:	441a      	add	r2, r3
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	6a1a      	ldr	r2, [r3, #32]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	429a      	cmp	r2, r3
 800456a:	d30b      	bcc.n	8004584 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	6a1a      	ldr	r2, [r3, #32]
 8004578:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800457c:	1ad2      	subs	r2, r2, r3
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	621a      	str	r2, [r3, #32]
 8004582:	e017      	b.n	80045b4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d108      	bne.n	800459e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800458c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004590:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800459c:	e00a      	b.n	80045b4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2200      	movs	r2, #0
 80045b2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	785b      	ldrb	r3, [r3, #1]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d165      	bne.n	8004688 <HAL_PCD_EP_DB_Transmit+0x382>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	461a      	mov	r2, r3
 80045ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045d0:	4413      	add	r3, r2
 80045d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	011a      	lsls	r2, r3, #4
 80045da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045dc:	4413      	add	r3, r2
 80045de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80045e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e6:	881b      	ldrh	r3, [r3, #0]
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f2:	801a      	strh	r2, [r3, #0]
 80045f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045f8:	2b3e      	cmp	r3, #62	; 0x3e
 80045fa:	d91d      	bls.n	8004638 <HAL_PCD_EP_DB_Transmit+0x332>
 80045fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004600:	095b      	lsrs	r3, r3, #5
 8004602:	64bb      	str	r3, [r7, #72]	; 0x48
 8004604:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004608:	f003 031f 	and.w	r3, r3, #31
 800460c:	2b00      	cmp	r3, #0
 800460e:	d102      	bne.n	8004616 <HAL_PCD_EP_DB_Transmit+0x310>
 8004610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004612:	3b01      	subs	r3, #1
 8004614:	64bb      	str	r3, [r7, #72]	; 0x48
 8004616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	b29a      	uxth	r2, r3
 800461c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800461e:	b29b      	uxth	r3, r3
 8004620:	029b      	lsls	r3, r3, #10
 8004622:	b29b      	uxth	r3, r3
 8004624:	4313      	orrs	r3, r2
 8004626:	b29b      	uxth	r3, r3
 8004628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800462c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004630:	b29a      	uxth	r2, r3
 8004632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004634:	801a      	strh	r2, [r3, #0]
 8004636:	e044      	b.n	80046c2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004638:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10a      	bne.n	8004656 <HAL_PCD_EP_DB_Transmit+0x350>
 8004640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004642:	881b      	ldrh	r3, [r3, #0]
 8004644:	b29b      	uxth	r3, r3
 8004646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800464a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800464e:	b29a      	uxth	r2, r3
 8004650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004652:	801a      	strh	r2, [r3, #0]
 8004654:	e035      	b.n	80046c2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004656:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800465a:	085b      	lsrs	r3, r3, #1
 800465c:	64bb      	str	r3, [r7, #72]	; 0x48
 800465e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d002      	beq.n	8004670 <HAL_PCD_EP_DB_Transmit+0x36a>
 800466a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800466c:	3301      	adds	r3, #1
 800466e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	b29a      	uxth	r2, r3
 8004676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004678:	b29b      	uxth	r3, r3
 800467a:	029b      	lsls	r3, r3, #10
 800467c:	b29b      	uxth	r3, r3
 800467e:	4313      	orrs	r3, r2
 8004680:	b29a      	uxth	r2, r3
 8004682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004684:	801a      	strh	r2, [r3, #0]
 8004686:	e01c      	b.n	80046c2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	785b      	ldrb	r3, [r3, #1]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d118      	bne.n	80046c2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	647b      	str	r3, [r7, #68]	; 0x44
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800469e:	b29b      	uxth	r3, r3
 80046a0:	461a      	mov	r2, r3
 80046a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046a4:	4413      	add	r3, r2
 80046a6:	647b      	str	r3, [r7, #68]	; 0x44
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	011a      	lsls	r2, r3, #4
 80046ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046b0:	4413      	add	r3, r2
 80046b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046b6:	643b      	str	r3, [r7, #64]	; 0x40
 80046b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046bc:	b29a      	uxth	r2, r3
 80046be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046c0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6818      	ldr	r0, [r3, #0]
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	6959      	ldr	r1, [r3, #20]
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	891a      	ldrh	r2, [r3, #8]
 80046ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	f003 fa0d 	bl	8007af2 <USB_WritePMA>
 80046d8:	e1e2      	b.n	8004aa0 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	461a      	mov	r2, r3
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	4413      	add	r3, r2
 80046ee:	3306      	adds	r3, #6
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	6812      	ldr	r2, [r2, #0]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004702:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	699a      	ldr	r2, [r3, #24]
 800470a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800470e:	429a      	cmp	r2, r3
 8004710:	d307      	bcc.n	8004722 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	699a      	ldr	r2, [r3, #24]
 8004716:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800471a:	1ad2      	subs	r2, r2, r3
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	619a      	str	r2, [r3, #24]
 8004720:	e002      	b.n	8004728 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2200      	movs	r2, #0
 8004726:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	2b00      	cmp	r3, #0
 800472e:	f040 80c0 	bne.w	80048b2 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	785b      	ldrb	r3, [r3, #1]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d126      	bne.n	8004788 <HAL_PCD_EP_DB_Transmit+0x482>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004748:	b29b      	uxth	r3, r3
 800474a:	461a      	mov	r2, r3
 800474c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800474e:	4413      	add	r3, r2
 8004750:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	011a      	lsls	r2, r3, #4
 8004758:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800475a:	4413      	add	r3, r2
 800475c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004760:	67bb      	str	r3, [r7, #120]	; 0x78
 8004762:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	b29b      	uxth	r3, r3
 8004768:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800476c:	b29a      	uxth	r2, r3
 800476e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004770:	801a      	strh	r2, [r3, #0]
 8004772:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	b29b      	uxth	r3, r3
 8004778:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800477c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004780:	b29a      	uxth	r2, r3
 8004782:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004784:	801a      	strh	r2, [r3, #0]
 8004786:	e01a      	b.n	80047be <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	785b      	ldrb	r3, [r3, #1]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d116      	bne.n	80047be <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	667b      	str	r3, [r7, #100]	; 0x64
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800479e:	b29b      	uxth	r3, r3
 80047a0:	461a      	mov	r2, r3
 80047a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047a4:	4413      	add	r3, r2
 80047a6:	667b      	str	r3, [r7, #100]	; 0x64
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	011a      	lsls	r2, r3, #4
 80047ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047b0:	4413      	add	r3, r2
 80047b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047b6:	663b      	str	r3, [r7, #96]	; 0x60
 80047b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047ba:	2200      	movs	r2, #0
 80047bc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	677b      	str	r3, [r7, #116]	; 0x74
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	785b      	ldrb	r3, [r3, #1]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d12b      	bne.n	8004824 <HAL_PCD_EP_DB_Transmit+0x51e>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047da:	b29b      	uxth	r3, r3
 80047dc:	461a      	mov	r2, r3
 80047de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047e0:	4413      	add	r3, r2
 80047e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	011a      	lsls	r2, r3, #4
 80047ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ec:	4413      	add	r3, r2
 80047ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004802:	b29a      	uxth	r2, r3
 8004804:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004808:	801a      	strh	r2, [r3, #0]
 800480a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	b29b      	uxth	r3, r3
 8004812:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004816:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800481a:	b29a      	uxth	r2, r3
 800481c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004820:	801a      	strh	r2, [r3, #0]
 8004822:	e017      	b.n	8004854 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	785b      	ldrb	r3, [r3, #1]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d113      	bne.n	8004854 <HAL_PCD_EP_DB_Transmit+0x54e>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004834:	b29b      	uxth	r3, r3
 8004836:	461a      	mov	r2, r3
 8004838:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800483a:	4413      	add	r3, r2
 800483c:	677b      	str	r3, [r7, #116]	; 0x74
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	011a      	lsls	r2, r3, #4
 8004844:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004846:	4413      	add	r3, r2
 8004848:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800484c:	673b      	str	r3, [r7, #112]	; 0x70
 800484e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004850:	2200      	movs	r2, #0
 8004852:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	4619      	mov	r1, r3
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f004 ff93 	bl	8009786 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004860:	88fb      	ldrh	r3, [r7, #6]
 8004862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004866:	2b00      	cmp	r3, #0
 8004868:	f040 811a 	bne.w	8004aa0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	461a      	mov	r2, r3
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	b29b      	uxth	r3, r3
 800487e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004886:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	461a      	mov	r2, r3
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	441a      	add	r2, r3
 8004898:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800489c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	8013      	strh	r3, [r2, #0]
 80048b0:	e0f6      	b.n	8004aa0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80048b2:	88fb      	ldrh	r3, [r7, #6]
 80048b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d121      	bne.n	8004900 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	461a      	mov	r2, r3
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	461a      	mov	r2, r3
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	441a      	add	r2, r3
 80048e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80048ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004906:	2b01      	cmp	r3, #1
 8004908:	f040 80ca 	bne.w	8004aa0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	695a      	ldr	r2, [r3, #20]
 8004910:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004914:	441a      	add	r2, r3
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	69da      	ldr	r2, [r3, #28]
 800491e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004922:	441a      	add	r2, r3
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	6a1a      	ldr	r2, [r3, #32]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	429a      	cmp	r2, r3
 8004932:	d30b      	bcc.n	800494c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	6a1a      	ldr	r2, [r3, #32]
 8004940:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004944:	1ad2      	subs	r2, r2, r3
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	621a      	str	r2, [r3, #32]
 800494a:	e017      	b.n	800497c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d108      	bne.n	8004966 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004954:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004958:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004964:	e00a      	b.n	800497c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2200      	movs	r2, #0
 8004972:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	657b      	str	r3, [r7, #84]	; 0x54
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	785b      	ldrb	r3, [r3, #1]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d165      	bne.n	8004a56 <HAL_PCD_EP_DB_Transmit+0x750>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004998:	b29b      	uxth	r3, r3
 800499a:	461a      	mov	r2, r3
 800499c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800499e:	4413      	add	r3, r2
 80049a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	011a      	lsls	r2, r3, #4
 80049a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049aa:	4413      	add	r3, r2
 80049ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80049b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049b4:	881b      	ldrh	r3, [r3, #0]
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049bc:	b29a      	uxth	r2, r3
 80049be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049c0:	801a      	strh	r2, [r3, #0]
 80049c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049c6:	2b3e      	cmp	r3, #62	; 0x3e
 80049c8:	d91d      	bls.n	8004a06 <HAL_PCD_EP_DB_Transmit+0x700>
 80049ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049ce:	095b      	lsrs	r3, r3, #5
 80049d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80049d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049d6:	f003 031f 	and.w	r3, r3, #31
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d102      	bne.n	80049e4 <HAL_PCD_EP_DB_Transmit+0x6de>
 80049de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049e0:	3b01      	subs	r3, #1
 80049e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80049e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049e6:	881b      	ldrh	r3, [r3, #0]
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	029b      	lsls	r3, r3, #10
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	4313      	orrs	r3, r2
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a02:	801a      	strh	r2, [r3, #0]
 8004a04:	e041      	b.n	8004a8a <HAL_PCD_EP_DB_Transmit+0x784>
 8004a06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10a      	bne.n	8004a24 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004a0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a10:	881b      	ldrh	r3, [r3, #0]
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a20:	801a      	strh	r2, [r3, #0]
 8004a22:	e032      	b.n	8004a8a <HAL_PCD_EP_DB_Transmit+0x784>
 8004a24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a28:	085b      	lsrs	r3, r3, #1
 8004a2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <HAL_PCD_EP_DB_Transmit+0x738>
 8004a38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	029b      	lsls	r3, r3, #10
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a52:	801a      	strh	r2, [r3, #0]
 8004a54:	e019      	b.n	8004a8a <HAL_PCD_EP_DB_Transmit+0x784>
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	785b      	ldrb	r3, [r3, #1]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d115      	bne.n	8004a8a <HAL_PCD_EP_DB_Transmit+0x784>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	461a      	mov	r2, r3
 8004a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a6c:	4413      	add	r3, r2
 8004a6e:	657b      	str	r3, [r7, #84]	; 0x54
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	011a      	lsls	r2, r3, #4
 8004a76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a78:	4413      	add	r3, r2
 8004a7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a7e:	653b      	str	r3, [r7, #80]	; 0x50
 8004a80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a88:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6818      	ldr	r0, [r3, #0]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	6959      	ldr	r1, [r3, #20]
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	895a      	ldrh	r2, [r3, #10]
 8004a96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	f003 f829 	bl	8007af2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aba:	82bb      	strh	r3, [r7, #20]
 8004abc:	8abb      	ldrh	r3, [r7, #20]
 8004abe:	f083 0310 	eor.w	r3, r3, #16
 8004ac2:	82bb      	strh	r3, [r7, #20]
 8004ac4:	8abb      	ldrh	r3, [r7, #20]
 8004ac6:	f083 0320 	eor.w	r3, r3, #32
 8004aca:	82bb      	strh	r3, [r7, #20]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	441a      	add	r2, r3
 8004ada:	8abb      	ldrh	r3, [r7, #20]
 8004adc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3790      	adds	r7, #144	; 0x90
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b087      	sub	sp, #28
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	60f8      	str	r0, [r7, #12]
 8004b02:	607b      	str	r3, [r7, #4]
 8004b04:	460b      	mov	r3, r1
 8004b06:	817b      	strh	r3, [r7, #10]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004b0c:	897b      	ldrh	r3, [r7, #10]
 8004b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00b      	beq.n	8004b30 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b18:	897b      	ldrh	r3, [r7, #10]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	1c5a      	adds	r2, r3, #1
 8004b20:	4613      	mov	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	617b      	str	r3, [r7, #20]
 8004b2e:	e009      	b.n	8004b44 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004b30:	897a      	ldrh	r2, [r7, #10]
 8004b32:	4613      	mov	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	4413      	add	r3, r2
 8004b42:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004b44:	893b      	ldrh	r3, [r7, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d107      	bne.n	8004b5a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	80da      	strh	r2, [r3, #6]
 8004b58:	e00b      	b.n	8004b72 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	0c1b      	lsrs	r3, r3, #16
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	371c      	adds	r7, #28
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bc80      	pop	{r7}
 8004b7c:	4770      	bx	lr
	...

08004b80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e272      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 8087 	beq.w	8004cae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ba0:	4b92      	ldr	r3, [pc, #584]	; (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f003 030c 	and.w	r3, r3, #12
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d00c      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004bac:	4b8f      	ldr	r3, [pc, #572]	; (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f003 030c 	and.w	r3, r3, #12
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d112      	bne.n	8004bde <HAL_RCC_OscConfig+0x5e>
 8004bb8:	4b8c      	ldr	r3, [pc, #560]	; (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc4:	d10b      	bne.n	8004bde <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bc6:	4b89      	ldr	r3, [pc, #548]	; (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d06c      	beq.n	8004cac <HAL_RCC_OscConfig+0x12c>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d168      	bne.n	8004cac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e24c      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be6:	d106      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x76>
 8004be8:	4b80      	ldr	r3, [pc, #512]	; (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a7f      	ldr	r2, [pc, #508]	; (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf2:	6013      	str	r3, [r2, #0]
 8004bf4:	e02e      	b.n	8004c54 <HAL_RCC_OscConfig+0xd4>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10c      	bne.n	8004c18 <HAL_RCC_OscConfig+0x98>
 8004bfe:	4b7b      	ldr	r3, [pc, #492]	; (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a7a      	ldr	r2, [pc, #488]	; (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004c04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c08:	6013      	str	r3, [r2, #0]
 8004c0a:	4b78      	ldr	r3, [pc, #480]	; (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a77      	ldr	r2, [pc, #476]	; (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004c10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c14:	6013      	str	r3, [r2, #0]
 8004c16:	e01d      	b.n	8004c54 <HAL_RCC_OscConfig+0xd4>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c20:	d10c      	bne.n	8004c3c <HAL_RCC_OscConfig+0xbc>
 8004c22:	4b72      	ldr	r3, [pc, #456]	; (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a71      	ldr	r2, [pc, #452]	; (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004c28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	4b6f      	ldr	r3, [pc, #444]	; (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a6e      	ldr	r2, [pc, #440]	; (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c38:	6013      	str	r3, [r2, #0]
 8004c3a:	e00b      	b.n	8004c54 <HAL_RCC_OscConfig+0xd4>
 8004c3c:	4b6b      	ldr	r3, [pc, #428]	; (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a6a      	ldr	r2, [pc, #424]	; (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c46:	6013      	str	r3, [r2, #0]
 8004c48:	4b68      	ldr	r3, [pc, #416]	; (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a67      	ldr	r2, [pc, #412]	; (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d013      	beq.n	8004c84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c5c:	f7fc ff08 	bl	8001a70 <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c62:	e008      	b.n	8004c76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c64:	f7fc ff04 	bl	8001a70 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b64      	cmp	r3, #100	; 0x64
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e200      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c76:	4b5d      	ldr	r3, [pc, #372]	; (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0f0      	beq.n	8004c64 <HAL_RCC_OscConfig+0xe4>
 8004c82:	e014      	b.n	8004cae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c84:	f7fc fef4 	bl	8001a70 <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c8c:	f7fc fef0 	bl	8001a70 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b64      	cmp	r3, #100	; 0x64
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e1ec      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c9e:	4b53      	ldr	r3, [pc, #332]	; (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1f0      	bne.n	8004c8c <HAL_RCC_OscConfig+0x10c>
 8004caa:	e000      	b.n	8004cae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d063      	beq.n	8004d82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cba:	4b4c      	ldr	r3, [pc, #304]	; (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f003 030c 	and.w	r3, r3, #12
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00b      	beq.n	8004cde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004cc6:	4b49      	ldr	r3, [pc, #292]	; (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f003 030c 	and.w	r3, r3, #12
 8004cce:	2b08      	cmp	r3, #8
 8004cd0:	d11c      	bne.n	8004d0c <HAL_RCC_OscConfig+0x18c>
 8004cd2:	4b46      	ldr	r3, [pc, #280]	; (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d116      	bne.n	8004d0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cde:	4b43      	ldr	r3, [pc, #268]	; (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d005      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x176>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d001      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e1c0      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf6:	4b3d      	ldr	r3, [pc, #244]	; (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	4939      	ldr	r1, [pc, #228]	; (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d0a:	e03a      	b.n	8004d82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d020      	beq.n	8004d56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d14:	4b36      	ldr	r3, [pc, #216]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004d16:	2201      	movs	r2, #1
 8004d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d1a:	f7fc fea9 	bl	8001a70 <HAL_GetTick>
 8004d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d20:	e008      	b.n	8004d34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d22:	f7fc fea5 	bl	8001a70 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e1a1      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d34:	4b2d      	ldr	r3, [pc, #180]	; (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0f0      	beq.n	8004d22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d40:	4b2a      	ldr	r3, [pc, #168]	; (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	4927      	ldr	r1, [pc, #156]	; (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	600b      	str	r3, [r1, #0]
 8004d54:	e015      	b.n	8004d82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d56:	4b26      	ldr	r3, [pc, #152]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5c:	f7fc fe88 	bl	8001a70 <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d64:	f7fc fe84 	bl	8001a70 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e180      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d76:	4b1d      	ldr	r3, [pc, #116]	; (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1f0      	bne.n	8004d64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0308 	and.w	r3, r3, #8
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d03a      	beq.n	8004e04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d019      	beq.n	8004dca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d96:	4b17      	ldr	r3, [pc, #92]	; (8004df4 <HAL_RCC_OscConfig+0x274>)
 8004d98:	2201      	movs	r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d9c:	f7fc fe68 	bl	8001a70 <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004da4:	f7fc fe64 	bl	8001a70 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e160      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004db6:	4b0d      	ldr	r3, [pc, #52]	; (8004dec <HAL_RCC_OscConfig+0x26c>)
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0f0      	beq.n	8004da4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004dc2:	2001      	movs	r0, #1
 8004dc4:	f000 faba 	bl	800533c <RCC_Delay>
 8004dc8:	e01c      	b.n	8004e04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dca:	4b0a      	ldr	r3, [pc, #40]	; (8004df4 <HAL_RCC_OscConfig+0x274>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dd0:	f7fc fe4e 	bl	8001a70 <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dd6:	e00f      	b.n	8004df8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dd8:	f7fc fe4a 	bl	8001a70 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d908      	bls.n	8004df8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e146      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>
 8004dea:	bf00      	nop
 8004dec:	40021000 	.word	0x40021000
 8004df0:	42420000 	.word	0x42420000
 8004df4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004df8:	4b92      	ldr	r3, [pc, #584]	; (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1e9      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 80a6 	beq.w	8004f5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e12:	2300      	movs	r3, #0
 8004e14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e16:	4b8b      	ldr	r3, [pc, #556]	; (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10d      	bne.n	8004e3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e22:	4b88      	ldr	r3, [pc, #544]	; (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	4a87      	ldr	r2, [pc, #540]	; (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e2c:	61d3      	str	r3, [r2, #28]
 8004e2e:	4b85      	ldr	r3, [pc, #532]	; (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e36:	60bb      	str	r3, [r7, #8]
 8004e38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e3e:	4b82      	ldr	r3, [pc, #520]	; (8005048 <HAL_RCC_OscConfig+0x4c8>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d118      	bne.n	8004e7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e4a:	4b7f      	ldr	r3, [pc, #508]	; (8005048 <HAL_RCC_OscConfig+0x4c8>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a7e      	ldr	r2, [pc, #504]	; (8005048 <HAL_RCC_OscConfig+0x4c8>)
 8004e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e56:	f7fc fe0b 	bl	8001a70 <HAL_GetTick>
 8004e5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e5c:	e008      	b.n	8004e70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e5e:	f7fc fe07 	bl	8001a70 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b64      	cmp	r3, #100	; 0x64
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e103      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e70:	4b75      	ldr	r3, [pc, #468]	; (8005048 <HAL_RCC_OscConfig+0x4c8>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0f0      	beq.n	8004e5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d106      	bne.n	8004e92 <HAL_RCC_OscConfig+0x312>
 8004e84:	4b6f      	ldr	r3, [pc, #444]	; (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	4a6e      	ldr	r2, [pc, #440]	; (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004e8a:	f043 0301 	orr.w	r3, r3, #1
 8004e8e:	6213      	str	r3, [r2, #32]
 8004e90:	e02d      	b.n	8004eee <HAL_RCC_OscConfig+0x36e>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10c      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x334>
 8004e9a:	4b6a      	ldr	r3, [pc, #424]	; (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	4a69      	ldr	r2, [pc, #420]	; (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004ea0:	f023 0301 	bic.w	r3, r3, #1
 8004ea4:	6213      	str	r3, [r2, #32]
 8004ea6:	4b67      	ldr	r3, [pc, #412]	; (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	4a66      	ldr	r2, [pc, #408]	; (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004eac:	f023 0304 	bic.w	r3, r3, #4
 8004eb0:	6213      	str	r3, [r2, #32]
 8004eb2:	e01c      	b.n	8004eee <HAL_RCC_OscConfig+0x36e>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	2b05      	cmp	r3, #5
 8004eba:	d10c      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x356>
 8004ebc:	4b61      	ldr	r3, [pc, #388]	; (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	4a60      	ldr	r2, [pc, #384]	; (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004ec2:	f043 0304 	orr.w	r3, r3, #4
 8004ec6:	6213      	str	r3, [r2, #32]
 8004ec8:	4b5e      	ldr	r3, [pc, #376]	; (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	4a5d      	ldr	r2, [pc, #372]	; (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004ece:	f043 0301 	orr.w	r3, r3, #1
 8004ed2:	6213      	str	r3, [r2, #32]
 8004ed4:	e00b      	b.n	8004eee <HAL_RCC_OscConfig+0x36e>
 8004ed6:	4b5b      	ldr	r3, [pc, #364]	; (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	4a5a      	ldr	r2, [pc, #360]	; (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004edc:	f023 0301 	bic.w	r3, r3, #1
 8004ee0:	6213      	str	r3, [r2, #32]
 8004ee2:	4b58      	ldr	r3, [pc, #352]	; (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	4a57      	ldr	r2, [pc, #348]	; (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004ee8:	f023 0304 	bic.w	r3, r3, #4
 8004eec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d015      	beq.n	8004f22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ef6:	f7fc fdbb 	bl	8001a70 <HAL_GetTick>
 8004efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004efc:	e00a      	b.n	8004f14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004efe:	f7fc fdb7 	bl	8001a70 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e0b1      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f14:	4b4b      	ldr	r3, [pc, #300]	; (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d0ee      	beq.n	8004efe <HAL_RCC_OscConfig+0x37e>
 8004f20:	e014      	b.n	8004f4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f22:	f7fc fda5 	bl	8001a70 <HAL_GetTick>
 8004f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f28:	e00a      	b.n	8004f40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f2a:	f7fc fda1 	bl	8001a70 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e09b      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f40:	4b40      	ldr	r3, [pc, #256]	; (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1ee      	bne.n	8004f2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f4c:	7dfb      	ldrb	r3, [r7, #23]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d105      	bne.n	8004f5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f52:	4b3c      	ldr	r3, [pc, #240]	; (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	4a3b      	ldr	r2, [pc, #236]	; (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 8087 	beq.w	8005076 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f68:	4b36      	ldr	r3, [pc, #216]	; (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f003 030c 	and.w	r3, r3, #12
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d061      	beq.n	8005038 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d146      	bne.n	800500a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f7c:	4b33      	ldr	r3, [pc, #204]	; (800504c <HAL_RCC_OscConfig+0x4cc>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f82:	f7fc fd75 	bl	8001a70 <HAL_GetTick>
 8004f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f88:	e008      	b.n	8004f9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f8a:	f7fc fd71 	bl	8001a70 <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d901      	bls.n	8004f9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e06d      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f9c:	4b29      	ldr	r3, [pc, #164]	; (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1f0      	bne.n	8004f8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb0:	d108      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004fb2:	4b24      	ldr	r3, [pc, #144]	; (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	4921      	ldr	r1, [pc, #132]	; (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fc4:	4b1f      	ldr	r3, [pc, #124]	; (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a19      	ldr	r1, [r3, #32]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	430b      	orrs	r3, r1
 8004fd6:	491b      	ldr	r1, [pc, #108]	; (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fdc:	4b1b      	ldr	r3, [pc, #108]	; (800504c <HAL_RCC_OscConfig+0x4cc>)
 8004fde:	2201      	movs	r2, #1
 8004fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe2:	f7fc fd45 	bl	8001a70 <HAL_GetTick>
 8004fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fe8:	e008      	b.n	8004ffc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fea:	f7fc fd41 	bl	8001a70 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e03d      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ffc:	4b11      	ldr	r3, [pc, #68]	; (8005044 <HAL_RCC_OscConfig+0x4c4>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0f0      	beq.n	8004fea <HAL_RCC_OscConfig+0x46a>
 8005008:	e035      	b.n	8005076 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800500a:	4b10      	ldr	r3, [pc, #64]	; (800504c <HAL_RCC_OscConfig+0x4cc>)
 800500c:	2200      	movs	r2, #0
 800500e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005010:	f7fc fd2e 	bl	8001a70 <HAL_GetTick>
 8005014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005018:	f7fc fd2a 	bl	8001a70 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e026      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800502a:	4b06      	ldr	r3, [pc, #24]	; (8005044 <HAL_RCC_OscConfig+0x4c4>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1f0      	bne.n	8005018 <HAL_RCC_OscConfig+0x498>
 8005036:	e01e      	b.n	8005076 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	69db      	ldr	r3, [r3, #28]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d107      	bne.n	8005050 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e019      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>
 8005044:	40021000 	.word	0x40021000
 8005048:	40007000 	.word	0x40007000
 800504c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005050:	4b0b      	ldr	r3, [pc, #44]	; (8005080 <HAL_RCC_OscConfig+0x500>)
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	429a      	cmp	r2, r3
 8005062:	d106      	bne.n	8005072 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800506e:	429a      	cmp	r2, r3
 8005070:	d001      	beq.n	8005076 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e000      	b.n	8005078 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3718      	adds	r7, #24
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	40021000 	.word	0x40021000

08005084 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e0d0      	b.n	800523a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005098:	4b6a      	ldr	r3, [pc, #424]	; (8005244 <HAL_RCC_ClockConfig+0x1c0>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d910      	bls.n	80050c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050a6:	4b67      	ldr	r3, [pc, #412]	; (8005244 <HAL_RCC_ClockConfig+0x1c0>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f023 0207 	bic.w	r2, r3, #7
 80050ae:	4965      	ldr	r1, [pc, #404]	; (8005244 <HAL_RCC_ClockConfig+0x1c0>)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050b6:	4b63      	ldr	r3, [pc, #396]	; (8005244 <HAL_RCC_ClockConfig+0x1c0>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d001      	beq.n	80050c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e0b8      	b.n	800523a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d020      	beq.n	8005116 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d005      	beq.n	80050ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050e0:	4b59      	ldr	r3, [pc, #356]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	4a58      	ldr	r2, [pc, #352]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 80050e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0308 	and.w	r3, r3, #8
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d005      	beq.n	8005104 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050f8:	4b53      	ldr	r3, [pc, #332]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	4a52      	ldr	r2, [pc, #328]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 80050fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005102:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005104:	4b50      	ldr	r3, [pc, #320]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	494d      	ldr	r1, [pc, #308]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 8005112:	4313      	orrs	r3, r2
 8005114:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	d040      	beq.n	80051a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d107      	bne.n	800513a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800512a:	4b47      	ldr	r3, [pc, #284]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d115      	bne.n	8005162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e07f      	b.n	800523a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2b02      	cmp	r3, #2
 8005140:	d107      	bne.n	8005152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005142:	4b41      	ldr	r3, [pc, #260]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d109      	bne.n	8005162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e073      	b.n	800523a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005152:	4b3d      	ldr	r3, [pc, #244]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e06b      	b.n	800523a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005162:	4b39      	ldr	r3, [pc, #228]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f023 0203 	bic.w	r2, r3, #3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	4936      	ldr	r1, [pc, #216]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 8005170:	4313      	orrs	r3, r2
 8005172:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005174:	f7fc fc7c 	bl	8001a70 <HAL_GetTick>
 8005178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800517a:	e00a      	b.n	8005192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800517c:	f7fc fc78 	bl	8001a70 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	f241 3288 	movw	r2, #5000	; 0x1388
 800518a:	4293      	cmp	r3, r2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e053      	b.n	800523a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005192:	4b2d      	ldr	r3, [pc, #180]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f003 020c 	and.w	r2, r3, #12
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d1eb      	bne.n	800517c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051a4:	4b27      	ldr	r3, [pc, #156]	; (8005244 <HAL_RCC_ClockConfig+0x1c0>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d210      	bcs.n	80051d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051b2:	4b24      	ldr	r3, [pc, #144]	; (8005244 <HAL_RCC_ClockConfig+0x1c0>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f023 0207 	bic.w	r2, r3, #7
 80051ba:	4922      	ldr	r1, [pc, #136]	; (8005244 <HAL_RCC_ClockConfig+0x1c0>)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	4313      	orrs	r3, r2
 80051c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c2:	4b20      	ldr	r3, [pc, #128]	; (8005244 <HAL_RCC_ClockConfig+0x1c0>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d001      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e032      	b.n	800523a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d008      	beq.n	80051f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051e0:	4b19      	ldr	r3, [pc, #100]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	4916      	ldr	r1, [pc, #88]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d009      	beq.n	8005212 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051fe:	4b12      	ldr	r3, [pc, #72]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	490e      	ldr	r1, [pc, #56]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 800520e:	4313      	orrs	r3, r2
 8005210:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005212:	f000 f821 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8005216:	4602      	mov	r2, r0
 8005218:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	091b      	lsrs	r3, r3, #4
 800521e:	f003 030f 	and.w	r3, r3, #15
 8005222:	490a      	ldr	r1, [pc, #40]	; (800524c <HAL_RCC_ClockConfig+0x1c8>)
 8005224:	5ccb      	ldrb	r3, [r1, r3]
 8005226:	fa22 f303 	lsr.w	r3, r2, r3
 800522a:	4a09      	ldr	r2, [pc, #36]	; (8005250 <HAL_RCC_ClockConfig+0x1cc>)
 800522c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800522e:	4b09      	ldr	r3, [pc, #36]	; (8005254 <HAL_RCC_ClockConfig+0x1d0>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f7fc fbda 	bl	80019ec <HAL_InitTick>

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	40022000 	.word	0x40022000
 8005248:	40021000 	.word	0x40021000
 800524c:	0800e580 	.word	0x0800e580
 8005250:	20000000 	.word	0x20000000
 8005254:	20000004 	.word	0x20000004

08005258 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]
 8005262:	2300      	movs	r3, #0
 8005264:	60bb      	str	r3, [r7, #8]
 8005266:	2300      	movs	r3, #0
 8005268:	617b      	str	r3, [r7, #20]
 800526a:	2300      	movs	r3, #0
 800526c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800526e:	2300      	movs	r3, #0
 8005270:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005272:	4b1e      	ldr	r3, [pc, #120]	; (80052ec <HAL_RCC_GetSysClockFreq+0x94>)
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f003 030c 	and.w	r3, r3, #12
 800527e:	2b04      	cmp	r3, #4
 8005280:	d002      	beq.n	8005288 <HAL_RCC_GetSysClockFreq+0x30>
 8005282:	2b08      	cmp	r3, #8
 8005284:	d003      	beq.n	800528e <HAL_RCC_GetSysClockFreq+0x36>
 8005286:	e027      	b.n	80052d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005288:	4b19      	ldr	r3, [pc, #100]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800528a:	613b      	str	r3, [r7, #16]
      break;
 800528c:	e027      	b.n	80052de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	0c9b      	lsrs	r3, r3, #18
 8005292:	f003 030f 	and.w	r3, r3, #15
 8005296:	4a17      	ldr	r2, [pc, #92]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005298:	5cd3      	ldrb	r3, [r2, r3]
 800529a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d010      	beq.n	80052c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80052a6:	4b11      	ldr	r3, [pc, #68]	; (80052ec <HAL_RCC_GetSysClockFreq+0x94>)
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	0c5b      	lsrs	r3, r3, #17
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	4a11      	ldr	r2, [pc, #68]	; (80052f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80052b2:	5cd3      	ldrb	r3, [r2, r3]
 80052b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a0d      	ldr	r2, [pc, #52]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80052ba:	fb03 f202 	mul.w	r2, r3, r2
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c4:	617b      	str	r3, [r7, #20]
 80052c6:	e004      	b.n	80052d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a0c      	ldr	r2, [pc, #48]	; (80052fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80052cc:	fb02 f303 	mul.w	r3, r2, r3
 80052d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	613b      	str	r3, [r7, #16]
      break;
 80052d6:	e002      	b.n	80052de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80052d8:	4b05      	ldr	r3, [pc, #20]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80052da:	613b      	str	r3, [r7, #16]
      break;
 80052dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052de:	693b      	ldr	r3, [r7, #16]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	371c      	adds	r7, #28
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bc80      	pop	{r7}
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	40021000 	.word	0x40021000
 80052f0:	007a1200 	.word	0x007a1200
 80052f4:	0800e598 	.word	0x0800e598
 80052f8:	0800e5a8 	.word	0x0800e5a8
 80052fc:	003d0900 	.word	0x003d0900

08005300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005300:	b480      	push	{r7}
 8005302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005304:	4b02      	ldr	r3, [pc, #8]	; (8005310 <HAL_RCC_GetHCLKFreq+0x10>)
 8005306:	681b      	ldr	r3, [r3, #0]
}
 8005308:	4618      	mov	r0, r3
 800530a:	46bd      	mov	sp, r7
 800530c:	bc80      	pop	{r7}
 800530e:	4770      	bx	lr
 8005310:	20000000 	.word	0x20000000

08005314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005318:	f7ff fff2 	bl	8005300 <HAL_RCC_GetHCLKFreq>
 800531c:	4602      	mov	r2, r0
 800531e:	4b05      	ldr	r3, [pc, #20]	; (8005334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	0a1b      	lsrs	r3, r3, #8
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	4903      	ldr	r1, [pc, #12]	; (8005338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800532a:	5ccb      	ldrb	r3, [r1, r3]
 800532c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005330:	4618      	mov	r0, r3
 8005332:	bd80      	pop	{r7, pc}
 8005334:	40021000 	.word	0x40021000
 8005338:	0800e590 	.word	0x0800e590

0800533c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005344:	4b0a      	ldr	r3, [pc, #40]	; (8005370 <RCC_Delay+0x34>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a0a      	ldr	r2, [pc, #40]	; (8005374 <RCC_Delay+0x38>)
 800534a:	fba2 2303 	umull	r2, r3, r2, r3
 800534e:	0a5b      	lsrs	r3, r3, #9
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	fb02 f303 	mul.w	r3, r2, r3
 8005356:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005358:	bf00      	nop
  }
  while (Delay --);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	1e5a      	subs	r2, r3, #1
 800535e:	60fa      	str	r2, [r7, #12]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1f9      	bne.n	8005358 <RCC_Delay+0x1c>
}
 8005364:	bf00      	nop
 8005366:	bf00      	nop
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	bc80      	pop	{r7}
 800536e:	4770      	bx	lr
 8005370:	20000000 	.word	0x20000000
 8005374:	10624dd3 	.word	0x10624dd3

08005378 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005380:	2300      	movs	r3, #0
 8005382:	613b      	str	r3, [r7, #16]
 8005384:	2300      	movs	r3, #0
 8005386:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b00      	cmp	r3, #0
 8005392:	d07d      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005394:	2300      	movs	r3, #0
 8005396:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005398:	4b4f      	ldr	r3, [pc, #316]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10d      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053a4:	4b4c      	ldr	r3, [pc, #304]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053a6:	69db      	ldr	r3, [r3, #28]
 80053a8:	4a4b      	ldr	r2, [pc, #300]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ae:	61d3      	str	r3, [r2, #28]
 80053b0:	4b49      	ldr	r3, [pc, #292]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053b2:	69db      	ldr	r3, [r3, #28]
 80053b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053b8:	60bb      	str	r3, [r7, #8]
 80053ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053bc:	2301      	movs	r3, #1
 80053be:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053c0:	4b46      	ldr	r3, [pc, #280]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d118      	bne.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053cc:	4b43      	ldr	r3, [pc, #268]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a42      	ldr	r2, [pc, #264]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053d8:	f7fc fb4a 	bl	8001a70 <HAL_GetTick>
 80053dc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053de:	e008      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053e0:	f7fc fb46 	bl	8001a70 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b64      	cmp	r3, #100	; 0x64
 80053ec:	d901      	bls.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e06d      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053f2:	4b3a      	ldr	r3, [pc, #232]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0f0      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053fe:	4b36      	ldr	r3, [pc, #216]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005406:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d02e      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	429a      	cmp	r2, r3
 800541a:	d027      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800541c:	4b2e      	ldr	r3, [pc, #184]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005424:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005426:	4b2e      	ldr	r3, [pc, #184]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005428:	2201      	movs	r2, #1
 800542a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800542c:	4b2c      	ldr	r3, [pc, #176]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800542e:	2200      	movs	r2, #0
 8005430:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005432:	4a29      	ldr	r2, [pc, #164]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d014      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005442:	f7fc fb15 	bl	8001a70 <HAL_GetTick>
 8005446:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005448:	e00a      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800544a:	f7fc fb11 	bl	8001a70 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	f241 3288 	movw	r2, #5000	; 0x1388
 8005458:	4293      	cmp	r3, r2
 800545a:	d901      	bls.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e036      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005460:	4b1d      	ldr	r3, [pc, #116]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d0ee      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800546c:	4b1a      	ldr	r3, [pc, #104]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	4917      	ldr	r1, [pc, #92]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800547a:	4313      	orrs	r3, r2
 800547c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800547e:	7dfb      	ldrb	r3, [r7, #23]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d105      	bne.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005484:	4b14      	ldr	r3, [pc, #80]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005486:	69db      	ldr	r3, [r3, #28]
 8005488:	4a13      	ldr	r2, [pc, #76]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800548a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800548e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d008      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800549c:	4b0e      	ldr	r3, [pc, #56]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	490b      	ldr	r1, [pc, #44]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0310 	and.w	r3, r3, #16
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d008      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054ba:	4b07      	ldr	r3, [pc, #28]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	4904      	ldr	r1, [pc, #16]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	40021000 	.word	0x40021000
 80054dc:	40007000 	.word	0x40007000
 80054e0:	42420440 	.word	0x42420440

080054e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80054e4:	b084      	sub	sp, #16
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	f107 0014 	add.w	r0, r7, #20
 80054f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bc80      	pop	{r7}
 8005500:	b004      	add	sp, #16
 8005502:	4770      	bx	lr

08005504 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005514:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005518:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	b29a      	uxth	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	bc80      	pop	{r7}
 800552e:	4770      	bx	lr

08005530 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005538:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800553c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005544:	b29a      	uxth	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	b29b      	uxth	r3, r3
 800554a:	43db      	mvns	r3, r3
 800554c:	b29b      	uxth	r3, r3
 800554e:	4013      	ands	r3, r2
 8005550:	b29a      	uxth	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	bc80      	pop	{r7}
 8005562:	4770      	bx	lr

08005564 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	460b      	mov	r3, r1
 800556e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	bc80      	pop	{r7}
 800557a:	4770      	bx	lr

0800557c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800557c:	b084      	sub	sp, #16
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	f107 0014 	add.w	r0, r7, #20
 800558a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bc80      	pop	{r7}
 80055b8:	b004      	add	sp, #16
 80055ba:	4770      	bx	lr

080055bc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055bc:	b480      	push	{r7}
 80055be:	b09d      	sub	sp, #116	; 0x74
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	b29b      	uxth	r3, r3
 80055da:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80055de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	78db      	ldrb	r3, [r3, #3]
 80055ea:	2b03      	cmp	r3, #3
 80055ec:	d81f      	bhi.n	800562e <USB_ActivateEndpoint+0x72>
 80055ee:	a201      	add	r2, pc, #4	; (adr r2, 80055f4 <USB_ActivateEndpoint+0x38>)
 80055f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f4:	08005605 	.word	0x08005605
 80055f8:	08005621 	.word	0x08005621
 80055fc:	08005637 	.word	0x08005637
 8005600:	08005613 	.word	0x08005613
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005604:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005608:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800560c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005610:	e012      	b.n	8005638 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005612:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005616:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800561a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800561e:	e00b      	b.n	8005638 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005620:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005624:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005628:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800562c:	e004      	b.n	8005638 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005634:	e000      	b.n	8005638 <USB_ActivateEndpoint+0x7c>
      break;
 8005636:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	441a      	add	r2, r3
 8005642:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800564a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800564e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005656:	b29b      	uxth	r3, r3
 8005658:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	b29b      	uxth	r3, r3
 8005668:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800566c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005670:	b29a      	uxth	r2, r3
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	b29b      	uxth	r3, r3
 8005678:	4313      	orrs	r3, r2
 800567a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	441a      	add	r2, r3
 8005688:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800568c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005690:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800569c:	b29b      	uxth	r3, r3
 800569e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	7b1b      	ldrb	r3, [r3, #12]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f040 8178 	bne.w	800599a <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	785b      	ldrb	r3, [r3, #1]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f000 8084 	beq.w	80057bc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	61bb      	str	r3, [r7, #24]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056be:	b29b      	uxth	r3, r3
 80056c0:	461a      	mov	r2, r3
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	4413      	add	r3, r2
 80056c6:	61bb      	str	r3, [r7, #24]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	011a      	lsls	r2, r3, #4
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	88db      	ldrh	r3, [r3, #6]
 80056dc:	085b      	lsrs	r3, r3, #1
 80056de:	b29b      	uxth	r3, r3
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	827b      	strh	r3, [r7, #18]
 80056f6:	8a7b      	ldrh	r3, [r7, #18]
 80056f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d01b      	beq.n	8005738 <USB_ActivateEndpoint+0x17c>
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4413      	add	r3, r2
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	b29b      	uxth	r3, r3
 800570e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005716:	823b      	strh	r3, [r7, #16]
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	441a      	add	r2, r3
 8005722:	8a3b      	ldrh	r3, [r7, #16]
 8005724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800572c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005730:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005734:	b29b      	uxth	r3, r3
 8005736:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	78db      	ldrb	r3, [r3, #3]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d020      	beq.n	8005782 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	b29b      	uxth	r3, r3
 800574e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005756:	81bb      	strh	r3, [r7, #12]
 8005758:	89bb      	ldrh	r3, [r7, #12]
 800575a:	f083 0320 	eor.w	r3, r3, #32
 800575e:	81bb      	strh	r3, [r7, #12]
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	441a      	add	r2, r3
 800576a:	89bb      	ldrh	r3, [r7, #12]
 800576c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005770:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005774:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800577c:	b29b      	uxth	r3, r3
 800577e:	8013      	strh	r3, [r2, #0]
 8005780:	e2d5      	b.n	8005d2e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	881b      	ldrh	r3, [r3, #0]
 800578e:	b29b      	uxth	r3, r3
 8005790:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005798:	81fb      	strh	r3, [r7, #14]
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	441a      	add	r2, r3
 80057a4:	89fb      	ldrh	r3, [r7, #14]
 80057a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	8013      	strh	r3, [r2, #0]
 80057ba:	e2b8      	b.n	8005d2e <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	633b      	str	r3, [r7, #48]	; 0x30
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	461a      	mov	r2, r3
 80057ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057cc:	4413      	add	r3, r2
 80057ce:	633b      	str	r3, [r7, #48]	; 0x30
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	011a      	lsls	r2, r3, #4
 80057d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80057de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	88db      	ldrh	r3, [r3, #6]
 80057e4:	085b      	lsrs	r3, r3, #1
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	005b      	lsls	r3, r3, #1
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ee:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	461a      	mov	r2, r3
 80057fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005800:	4413      	add	r3, r2
 8005802:	62bb      	str	r3, [r7, #40]	; 0x28
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	011a      	lsls	r2, r3, #4
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	4413      	add	r3, r2
 800580e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005812:	627b      	str	r3, [r7, #36]	; 0x24
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	b29b      	uxth	r3, r3
 800581a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800581e:	b29a      	uxth	r2, r3
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	801a      	strh	r2, [r3, #0]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	2b3e      	cmp	r3, #62	; 0x3e
 800582a:	d91d      	bls.n	8005868 <USB_ActivateEndpoint+0x2ac>
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	095b      	lsrs	r3, r3, #5
 8005832:	66bb      	str	r3, [r7, #104]	; 0x68
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	f003 031f 	and.w	r3, r3, #31
 800583c:	2b00      	cmp	r3, #0
 800583e:	d102      	bne.n	8005846 <USB_ActivateEndpoint+0x28a>
 8005840:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005842:	3b01      	subs	r3, #1
 8005844:	66bb      	str	r3, [r7, #104]	; 0x68
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	881b      	ldrh	r3, [r3, #0]
 800584a:	b29a      	uxth	r2, r3
 800584c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800584e:	b29b      	uxth	r3, r3
 8005850:	029b      	lsls	r3, r3, #10
 8005852:	b29b      	uxth	r3, r3
 8005854:	4313      	orrs	r3, r2
 8005856:	b29b      	uxth	r3, r3
 8005858:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800585c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005860:	b29a      	uxth	r2, r3
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	801a      	strh	r2, [r3, #0]
 8005866:	e026      	b.n	80058b6 <USB_ActivateEndpoint+0x2fa>
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10a      	bne.n	8005886 <USB_ActivateEndpoint+0x2ca>
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	881b      	ldrh	r3, [r3, #0]
 8005874:	b29b      	uxth	r3, r3
 8005876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800587a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800587e:	b29a      	uxth	r2, r3
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	801a      	strh	r2, [r3, #0]
 8005884:	e017      	b.n	80058b6 <USB_ActivateEndpoint+0x2fa>
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	085b      	lsrs	r3, r3, #1
 800588c:	66bb      	str	r3, [r7, #104]	; 0x68
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <USB_ActivateEndpoint+0x2e4>
 800589a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800589c:	3301      	adds	r3, #1
 800589e:	66bb      	str	r3, [r7, #104]	; 0x68
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	881b      	ldrh	r3, [r3, #0]
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	029b      	lsls	r3, r3, #10
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	4313      	orrs	r3, r2
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	847b      	strh	r3, [r7, #34]	; 0x22
 80058c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80058c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d01b      	beq.n	8005906 <USB_ActivateEndpoint+0x34a>
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	b29b      	uxth	r3, r3
 80058dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e4:	843b      	strh	r3, [r7, #32]
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	441a      	add	r2, r3
 80058f0:	8c3b      	ldrh	r3, [r7, #32]
 80058f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005902:	b29b      	uxth	r3, r3
 8005904:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d124      	bne.n	8005958 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	b29b      	uxth	r3, r3
 800591c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005924:	83bb      	strh	r3, [r7, #28]
 8005926:	8bbb      	ldrh	r3, [r7, #28]
 8005928:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800592c:	83bb      	strh	r3, [r7, #28]
 800592e:	8bbb      	ldrh	r3, [r7, #28]
 8005930:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005934:	83bb      	strh	r3, [r7, #28]
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	441a      	add	r2, r3
 8005940:	8bbb      	ldrh	r3, [r7, #28]
 8005942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800594a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800594e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005952:	b29b      	uxth	r3, r3
 8005954:	8013      	strh	r3, [r2, #0]
 8005956:	e1ea      	b.n	8005d2e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4413      	add	r3, r2
 8005962:	881b      	ldrh	r3, [r3, #0]
 8005964:	b29b      	uxth	r3, r3
 8005966:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800596a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596e:	83fb      	strh	r3, [r7, #30]
 8005970:	8bfb      	ldrh	r3, [r7, #30]
 8005972:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005976:	83fb      	strh	r3, [r7, #30]
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	441a      	add	r2, r3
 8005982:	8bfb      	ldrh	r3, [r7, #30]
 8005984:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005988:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800598c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005994:	b29b      	uxth	r3, r3
 8005996:	8013      	strh	r3, [r2, #0]
 8005998:	e1c9      	b.n	8005d2e <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	78db      	ldrb	r3, [r3, #3]
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d11e      	bne.n	80059e0 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	881b      	ldrh	r3, [r3, #0]
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	441a      	add	r2, r3
 80059c6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80059ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059d2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80059d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059da:	b29b      	uxth	r3, r3
 80059dc:	8013      	strh	r3, [r2, #0]
 80059de:	e01d      	b.n	8005a1c <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	881b      	ldrh	r3, [r3, #0]
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80059f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	441a      	add	r2, r3
 8005a04:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	461a      	mov	r2, r3
 8005a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a2c:	4413      	add	r3, r2
 8005a2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	011a      	lsls	r2, r3, #4
 8005a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	891b      	ldrh	r3, [r3, #8]
 8005a44:	085b      	lsrs	r3, r3, #1
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a4e:	801a      	strh	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	657b      	str	r3, [r7, #84]	; 0x54
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a60:	4413      	add	r3, r2
 8005a62:	657b      	str	r3, [r7, #84]	; 0x54
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	011a      	lsls	r2, r3, #4
 8005a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005a72:	653b      	str	r3, [r7, #80]	; 0x50
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	895b      	ldrh	r3, [r3, #10]
 8005a78:	085b      	lsrs	r3, r3, #1
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a82:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	785b      	ldrb	r3, [r3, #1]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f040 8093 	bne.w	8005bb4 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005a9e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d01b      	beq.n	8005ae2 <USB_ActivateEndpoint+0x526>
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	4413      	add	r3, r2
 8005ab4:	881b      	ldrh	r3, [r3, #0]
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	441a      	add	r2, r3
 8005acc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ad6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4413      	add	r3, r2
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005af0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d01b      	beq.n	8005b32 <USB_ActivateEndpoint+0x576>
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4413      	add	r3, r2
 8005b04:	881b      	ldrh	r3, [r3, #0]
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b10:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	441a      	add	r2, r3
 8005b1c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4413      	add	r3, r2
 8005b3c:	881b      	ldrh	r3, [r3, #0]
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b48:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b4a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b50:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b52:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b58:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	441a      	add	r2, r3
 8005b64:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b90:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	441a      	add	r2, r3
 8005b9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ba2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	8013      	strh	r3, [r2, #0]
 8005bb2:	e0bc      	b.n	8005d2e <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005bc4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d01d      	beq.n	8005c0c <USB_ActivateEndpoint+0x650>
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	4413      	add	r3, r2
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	441a      	add	r2, r3
 8005bf4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005bf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	881b      	ldrh	r3, [r3, #0]
 8005c18:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005c1c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d01d      	beq.n	8005c64 <USB_ActivateEndpoint+0x6a8>
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c3e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	441a      	add	r2, r3
 8005c4c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005c50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	78db      	ldrb	r3, [r3, #3]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d024      	beq.n	8005cb6 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
 8005c76:	881b      	ldrh	r3, [r3, #0]
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c82:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005c86:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005c8a:	f083 0320 	eor.w	r3, r3, #32
 8005c8e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	441a      	add	r2, r3
 8005c9c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005ca0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ca4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	8013      	strh	r3, [r2, #0]
 8005cb4:	e01d      	b.n	8005cf2 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ccc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	441a      	add	r2, r3
 8005cda:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005cde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ce2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4413      	add	r3, r2
 8005cfc:	881b      	ldrh	r3, [r3, #0]
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d08:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	441a      	add	r2, r3
 8005d16:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005d2e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3774      	adds	r7, #116	; 0x74
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bc80      	pop	{r7}
 8005d3a:	4770      	bx	lr

08005d3c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b08d      	sub	sp, #52	; 0x34
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	7b1b      	ldrb	r3, [r3, #12]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f040 808e 	bne.w	8005e6c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	785b      	ldrb	r3, [r3, #1]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d044      	beq.n	8005de2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	81bb      	strh	r3, [r7, #12]
 8005d66:	89bb      	ldrh	r3, [r7, #12]
 8005d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d01b      	beq.n	8005da8 <USB_DeactivateEndpoint+0x6c>
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d86:	817b      	strh	r3, [r7, #10]
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	441a      	add	r2, r3
 8005d92:	897b      	ldrh	r3, [r7, #10]
 8005d94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005da0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dbe:	813b      	strh	r3, [r7, #8]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	441a      	add	r2, r3
 8005dca:	893b      	ldrh	r3, [r7, #8]
 8005dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	8013      	strh	r3, [r2, #0]
 8005de0:	e192      	b.n	8006108 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	881b      	ldrh	r3, [r3, #0]
 8005dee:	827b      	strh	r3, [r7, #18]
 8005df0:	8a7b      	ldrh	r3, [r7, #18]
 8005df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d01b      	beq.n	8005e32 <USB_DeactivateEndpoint+0xf6>
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e10:	823b      	strh	r3, [r7, #16]
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	441a      	add	r2, r3
 8005e1c:	8a3b      	ldrh	r3, [r7, #16]
 8005e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	881b      	ldrh	r3, [r3, #0]
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e48:	81fb      	strh	r3, [r7, #14]
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	441a      	add	r2, r3
 8005e54:	89fb      	ldrh	r3, [r7, #14]
 8005e56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	8013      	strh	r3, [r2, #0]
 8005e6a:	e14d      	b.n	8006108 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	785b      	ldrb	r3, [r3, #1]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f040 80a5 	bne.w	8005fc0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	843b      	strh	r3, [r7, #32]
 8005e84:	8c3b      	ldrh	r3, [r7, #32]
 8005e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d01b      	beq.n	8005ec6 <USB_DeactivateEndpoint+0x18a>
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	881b      	ldrh	r3, [r3, #0]
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea4:	83fb      	strh	r3, [r7, #30]
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	441a      	add	r2, r3
 8005eb0:	8bfb      	ldrh	r3, [r7, #30]
 8005eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	83bb      	strh	r3, [r7, #28]
 8005ed4:	8bbb      	ldrh	r3, [r7, #28]
 8005ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d01b      	beq.n	8005f16 <USB_DeactivateEndpoint+0x1da>
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef4:	837b      	strh	r3, [r7, #26]
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	441a      	add	r2, r3
 8005f00:	8b7b      	ldrh	r3, [r7, #26]
 8005f02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f2c:	833b      	strh	r3, [r7, #24]
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	441a      	add	r2, r3
 8005f38:	8b3b      	ldrh	r3, [r7, #24]
 8005f3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	4413      	add	r3, r2
 8005f58:	881b      	ldrh	r3, [r3, #0]
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f64:	82fb      	strh	r3, [r7, #22]
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	441a      	add	r2, r3
 8005f70:	8afb      	ldrh	r3, [r7, #22]
 8005f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f9c:	82bb      	strh	r3, [r7, #20]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	441a      	add	r2, r3
 8005fa8:	8abb      	ldrh	r3, [r7, #20]
 8005faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	8013      	strh	r3, [r2, #0]
 8005fbe:	e0a3      	b.n	8006108 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005fce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d01b      	beq.n	8006010 <USB_DeactivateEndpoint+0x2d4>
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fee:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	441a      	add	r2, r3
 8005ffa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006004:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800600c:	b29b      	uxth	r3, r3
 800600e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	881b      	ldrh	r3, [r3, #0]
 800601c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800601e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006024:	2b00      	cmp	r3, #0
 8006026:	d01b      	beq.n	8006060 <USB_DeactivateEndpoint+0x324>
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	b29b      	uxth	r3, r3
 8006036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800603a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	441a      	add	r2, r3
 800604a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800604c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006058:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800605c:	b29b      	uxth	r3, r3
 800605e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	b29b      	uxth	r3, r3
 800606e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006076:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	441a      	add	r2, r3
 8006082:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800608c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006094:	b29b      	uxth	r3, r3
 8006096:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	881b      	ldrh	r3, [r3, #0]
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ae:	84bb      	strh	r3, [r7, #36]	; 0x24
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	441a      	add	r2, r3
 80060ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4413      	add	r3, r2
 80060da:	881b      	ldrh	r3, [r3, #0]
 80060dc:	b29b      	uxth	r3, r3
 80060de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060e6:	847b      	strh	r3, [r7, #34]	; 0x22
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	441a      	add	r2, r3
 80060f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80060f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006104:	b29b      	uxth	r3, r3
 8006106:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3734      	adds	r7, #52	; 0x34
 800610e:	46bd      	mov	sp, r7
 8006110:	bc80      	pop	{r7}
 8006112:	4770      	bx	lr

08006114 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b0c2      	sub	sp, #264	; 0x108
 8006118:	af00      	add	r7, sp, #0
 800611a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800611e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006122:	6018      	str	r0, [r3, #0]
 8006124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800612c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800612e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	785b      	ldrb	r3, [r3, #1]
 800613a:	2b01      	cmp	r3, #1
 800613c:	f040 86b7 	bne.w	8006eae <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	699a      	ldr	r2, [r3, #24]
 800614c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	429a      	cmp	r2, r3
 800615a:	d908      	bls.n	800616e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800615c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800616c:	e007      	b.n	800617e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800616e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800617e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006182:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	7b1b      	ldrb	r3, [r3, #12]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d13a      	bne.n	8006204 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800618e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6959      	ldr	r1, [r3, #20]
 800619a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800619e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	88da      	ldrh	r2, [r3, #6]
 80061a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80061b0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80061b4:	6800      	ldr	r0, [r0, #0]
 80061b6:	f001 fc9c 	bl	8007af2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80061ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	613b      	str	r3, [r7, #16]
 80061c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	461a      	mov	r2, r3
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	4413      	add	r3, r2
 80061dc:	613b      	str	r3, [r7, #16]
 80061de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	011a      	lsls	r2, r3, #4
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	4413      	add	r3, r2
 80061f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061f4:	60fb      	str	r3, [r7, #12]
 80061f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	801a      	strh	r2, [r3, #0]
 8006200:	f000 be1f 	b.w	8006e42 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	78db      	ldrb	r3, [r3, #3]
 8006210:	2b02      	cmp	r3, #2
 8006212:	f040 8462 	bne.w	8006ada <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800621a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6a1a      	ldr	r2, [r3, #32]
 8006222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	429a      	cmp	r2, r3
 8006230:	f240 83df 	bls.w	80069f2 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006238:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006242:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	881b      	ldrh	r3, [r3, #0]
 8006250:	b29b      	uxth	r3, r3
 8006252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800625e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006262:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800626c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	441a      	add	r2, r3
 8006278:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800627c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006284:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800628c:	b29b      	uxth	r3, r3
 800628e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	6a1a      	ldr	r2, [r3, #32]
 800629c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062a0:	1ad2      	subs	r2, r2, r3
 80062a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80062ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f000 81c7 	beq.w	8006664 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	633b      	str	r3, [r7, #48]	; 0x30
 80062e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	785b      	ldrb	r3, [r3, #1]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d177      	bne.n	80063e2 <USB_EPStartXfer+0x2ce>
 80062f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80062fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006302:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800630c:	b29b      	uxth	r3, r3
 800630e:	461a      	mov	r2, r3
 8006310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006312:	4413      	add	r3, r2
 8006314:	62bb      	str	r3, [r7, #40]	; 0x28
 8006316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800631a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	011a      	lsls	r2, r3, #4
 8006324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006326:	4413      	add	r3, r2
 8006328:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800632c:	627b      	str	r3, [r7, #36]	; 0x24
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006330:	881b      	ldrh	r3, [r3, #0]
 8006332:	b29b      	uxth	r3, r3
 8006334:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006338:	b29a      	uxth	r2, r3
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	801a      	strh	r2, [r3, #0]
 800633e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006342:	2b3e      	cmp	r3, #62	; 0x3e
 8006344:	d921      	bls.n	800638a <USB_EPStartXfer+0x276>
 8006346:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800634a:	095b      	lsrs	r3, r3, #5
 800634c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006354:	f003 031f 	and.w	r3, r3, #31
 8006358:	2b00      	cmp	r3, #0
 800635a:	d104      	bne.n	8006366 <USB_EPStartXfer+0x252>
 800635c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006360:	3b01      	subs	r3, #1
 8006362:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	b29a      	uxth	r2, r3
 800636c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006370:	b29b      	uxth	r3, r3
 8006372:	029b      	lsls	r3, r3, #10
 8006374:	b29b      	uxth	r3, r3
 8006376:	4313      	orrs	r3, r2
 8006378:	b29b      	uxth	r3, r3
 800637a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800637e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006382:	b29a      	uxth	r2, r3
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	801a      	strh	r2, [r3, #0]
 8006388:	e050      	b.n	800642c <USB_EPStartXfer+0x318>
 800638a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10a      	bne.n	80063a8 <USB_EPStartXfer+0x294>
 8006392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006394:	881b      	ldrh	r3, [r3, #0]
 8006396:	b29b      	uxth	r3, r3
 8006398:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800639c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	801a      	strh	r2, [r3, #0]
 80063a6:	e041      	b.n	800642c <USB_EPStartXfer+0x318>
 80063a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063ac:	085b      	lsrs	r3, r3, #1
 80063ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80063b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d004      	beq.n	80063c8 <USB_EPStartXfer+0x2b4>
 80063be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80063c2:	3301      	adds	r3, #1
 80063c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	881b      	ldrh	r3, [r3, #0]
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	029b      	lsls	r3, r3, #10
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	4313      	orrs	r3, r2
 80063da:	b29a      	uxth	r2, r3
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	801a      	strh	r2, [r3, #0]
 80063e0:	e024      	b.n	800642c <USB_EPStartXfer+0x318>
 80063e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	785b      	ldrb	r3, [r3, #1]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d11c      	bne.n	800642c <USB_EPStartXfer+0x318>
 80063f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006400:	b29b      	uxth	r3, r3
 8006402:	461a      	mov	r2, r3
 8006404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006406:	4413      	add	r3, r2
 8006408:	633b      	str	r3, [r7, #48]	; 0x30
 800640a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	011a      	lsls	r2, r3, #4
 8006418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641a:	4413      	add	r3, r2
 800641c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006420:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006426:	b29a      	uxth	r2, r3
 8006428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800642c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	895b      	ldrh	r3, [r3, #10]
 8006438:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800643c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6959      	ldr	r1, [r3, #20]
 8006448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800644c:	b29b      	uxth	r3, r3
 800644e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006452:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006456:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800645a:	6800      	ldr	r0, [r0, #0]
 800645c:	f001 fb49 	bl	8007af2 <USB_WritePMA>
            ep->xfer_buff += len;
 8006460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	695a      	ldr	r2, [r3, #20]
 800646c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006470:	441a      	add	r2, r3
 8006472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800647e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6a1a      	ldr	r2, [r3, #32]
 800648a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800648e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	429a      	cmp	r2, r3
 8006498:	d90f      	bls.n	80064ba <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800649a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800649e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6a1a      	ldr	r2, [r3, #32]
 80064a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064aa:	1ad2      	subs	r2, r2, r3
 80064ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	621a      	str	r2, [r3, #32]
 80064b8:	e00e      	b.n	80064d8 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80064ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80064ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2200      	movs	r2, #0
 80064d6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80064d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	785b      	ldrb	r3, [r3, #1]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d177      	bne.n	80065d8 <USB_EPStartXfer+0x4c4>
 80064e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	61bb      	str	r3, [r7, #24]
 80064f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006502:	b29b      	uxth	r3, r3
 8006504:	461a      	mov	r2, r3
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	4413      	add	r3, r2
 800650a:	61bb      	str	r3, [r7, #24]
 800650c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	011a      	lsls	r2, r3, #4
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	4413      	add	r3, r2
 800651e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006522:	617b      	str	r3, [r7, #20]
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	881b      	ldrh	r3, [r3, #0]
 8006528:	b29b      	uxth	r3, r3
 800652a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800652e:	b29a      	uxth	r2, r3
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	801a      	strh	r2, [r3, #0]
 8006534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006538:	2b3e      	cmp	r3, #62	; 0x3e
 800653a:	d921      	bls.n	8006580 <USB_EPStartXfer+0x46c>
 800653c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006540:	095b      	lsrs	r3, r3, #5
 8006542:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800654a:	f003 031f 	and.w	r3, r3, #31
 800654e:	2b00      	cmp	r3, #0
 8006550:	d104      	bne.n	800655c <USB_EPStartXfer+0x448>
 8006552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006556:	3b01      	subs	r3, #1
 8006558:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	881b      	ldrh	r3, [r3, #0]
 8006560:	b29a      	uxth	r2, r3
 8006562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006566:	b29b      	uxth	r3, r3
 8006568:	029b      	lsls	r3, r3, #10
 800656a:	b29b      	uxth	r3, r3
 800656c:	4313      	orrs	r3, r2
 800656e:	b29b      	uxth	r3, r3
 8006570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006578:	b29a      	uxth	r2, r3
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	801a      	strh	r2, [r3, #0]
 800657e:	e056      	b.n	800662e <USB_EPStartXfer+0x51a>
 8006580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10a      	bne.n	800659e <USB_EPStartXfer+0x48a>
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	881b      	ldrh	r3, [r3, #0]
 800658c:	b29b      	uxth	r3, r3
 800658e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006592:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006596:	b29a      	uxth	r2, r3
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	801a      	strh	r2, [r3, #0]
 800659c:	e047      	b.n	800662e <USB_EPStartXfer+0x51a>
 800659e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065a2:	085b      	lsrs	r3, r3, #1
 80065a4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d004      	beq.n	80065be <USB_EPStartXfer+0x4aa>
 80065b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065b8:	3301      	adds	r3, #1
 80065ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	881b      	ldrh	r3, [r3, #0]
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	029b      	lsls	r3, r3, #10
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	4313      	orrs	r3, r2
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	801a      	strh	r2, [r3, #0]
 80065d6:	e02a      	b.n	800662e <USB_EPStartXfer+0x51a>
 80065d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	785b      	ldrb	r3, [r3, #1]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d122      	bne.n	800662e <USB_EPStartXfer+0x51a>
 80065e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	623b      	str	r3, [r7, #32]
 80065f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006602:	b29b      	uxth	r3, r3
 8006604:	461a      	mov	r2, r3
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	4413      	add	r3, r2
 800660a:	623b      	str	r3, [r7, #32]
 800660c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	011a      	lsls	r2, r3, #4
 800661a:	6a3b      	ldr	r3, [r7, #32]
 800661c:	4413      	add	r3, r2
 800661e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006622:	61fb      	str	r3, [r7, #28]
 8006624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006628:	b29a      	uxth	r2, r3
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800662e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006632:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	891b      	ldrh	r3, [r3, #8]
 800663a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800663e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006642:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6959      	ldr	r1, [r3, #20]
 800664a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800664e:	b29b      	uxth	r3, r3
 8006650:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006654:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006658:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800665c:	6800      	ldr	r0, [r0, #0]
 800665e:	f001 fa48 	bl	8007af2 <USB_WritePMA>
 8006662:	e3ee      	b.n	8006e42 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006668:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	785b      	ldrb	r3, [r3, #1]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d177      	bne.n	8006764 <USB_EPStartXfer+0x650>
 8006674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006678:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006684:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800668e:	b29b      	uxth	r3, r3
 8006690:	461a      	mov	r2, r3
 8006692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006694:	4413      	add	r3, r2
 8006696:	64bb      	str	r3, [r7, #72]	; 0x48
 8006698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800669c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	011a      	lsls	r2, r3, #4
 80066a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066a8:	4413      	add	r3, r2
 80066aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066ae:	647b      	str	r3, [r7, #68]	; 0x44
 80066b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066b2:	881b      	ldrh	r3, [r3, #0]
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066be:	801a      	strh	r2, [r3, #0]
 80066c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066c4:	2b3e      	cmp	r3, #62	; 0x3e
 80066c6:	d921      	bls.n	800670c <USB_EPStartXfer+0x5f8>
 80066c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066cc:	095b      	lsrs	r3, r3, #5
 80066ce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80066d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066d6:	f003 031f 	and.w	r3, r3, #31
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d104      	bne.n	80066e8 <USB_EPStartXfer+0x5d4>
 80066de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066e2:	3b01      	subs	r3, #1
 80066e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80066e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066ea:	881b      	ldrh	r3, [r3, #0]
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	029b      	lsls	r3, r3, #10
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	4313      	orrs	r3, r2
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006700:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006704:	b29a      	uxth	r2, r3
 8006706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006708:	801a      	strh	r2, [r3, #0]
 800670a:	e056      	b.n	80067ba <USB_EPStartXfer+0x6a6>
 800670c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10a      	bne.n	800672a <USB_EPStartXfer+0x616>
 8006714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	b29b      	uxth	r3, r3
 800671a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800671e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006722:	b29a      	uxth	r2, r3
 8006724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006726:	801a      	strh	r2, [r3, #0]
 8006728:	e047      	b.n	80067ba <USB_EPStartXfer+0x6a6>
 800672a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800672e:	085b      	lsrs	r3, r3, #1
 8006730:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b00      	cmp	r3, #0
 800673e:	d004      	beq.n	800674a <USB_EPStartXfer+0x636>
 8006740:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006744:	3301      	adds	r3, #1
 8006746:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800674a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800674c:	881b      	ldrh	r3, [r3, #0]
 800674e:	b29a      	uxth	r2, r3
 8006750:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006754:	b29b      	uxth	r3, r3
 8006756:	029b      	lsls	r3, r3, #10
 8006758:	b29b      	uxth	r3, r3
 800675a:	4313      	orrs	r3, r2
 800675c:	b29a      	uxth	r2, r3
 800675e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006760:	801a      	strh	r2, [r3, #0]
 8006762:	e02a      	b.n	80067ba <USB_EPStartXfer+0x6a6>
 8006764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006768:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	785b      	ldrb	r3, [r3, #1]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d122      	bne.n	80067ba <USB_EPStartXfer+0x6a6>
 8006774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006778:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	653b      	str	r3, [r7, #80]	; 0x50
 8006780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006784:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800678e:	b29b      	uxth	r3, r3
 8006790:	461a      	mov	r2, r3
 8006792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006794:	4413      	add	r3, r2
 8006796:	653b      	str	r3, [r7, #80]	; 0x50
 8006798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800679c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	011a      	lsls	r2, r3, #4
 80067a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067a8:	4413      	add	r3, r2
 80067aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80067ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	891b      	ldrh	r3, [r3, #8]
 80067c6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6959      	ldr	r1, [r3, #20]
 80067d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067da:	b29b      	uxth	r3, r3
 80067dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80067e0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80067e4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80067e8:	6800      	ldr	r0, [r0, #0]
 80067ea:	f001 f982 	bl	8007af2 <USB_WritePMA>
            ep->xfer_buff += len;
 80067ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	695a      	ldr	r2, [r3, #20]
 80067fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067fe:	441a      	add	r2, r3
 8006800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800680c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	6a1a      	ldr	r2, [r3, #32]
 8006818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800681c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	429a      	cmp	r2, r3
 8006826:	d90f      	bls.n	8006848 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800682c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	6a1a      	ldr	r2, [r3, #32]
 8006834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006838:	1ad2      	subs	r2, r2, r3
 800683a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800683e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	621a      	str	r2, [r3, #32]
 8006846:	e00e      	b.n	8006866 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800684c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	6a1b      	ldr	r3, [r3, #32]
 8006854:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800685c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2200      	movs	r2, #0
 8006864:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800686a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	643b      	str	r3, [r7, #64]	; 0x40
 8006872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006876:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	785b      	ldrb	r3, [r3, #1]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d177      	bne.n	8006972 <USB_EPStartXfer+0x85e>
 8006882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006886:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	63bb      	str	r3, [r7, #56]	; 0x38
 800688e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006892:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800689c:	b29b      	uxth	r3, r3
 800689e:	461a      	mov	r2, r3
 80068a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a2:	4413      	add	r3, r2
 80068a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80068a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	011a      	lsls	r2, r3, #4
 80068b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b6:	4413      	add	r3, r2
 80068b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068bc:	637b      	str	r3, [r7, #52]	; 0x34
 80068be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c0:	881b      	ldrh	r3, [r3, #0]
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068cc:	801a      	strh	r2, [r3, #0]
 80068ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068d2:	2b3e      	cmp	r3, #62	; 0x3e
 80068d4:	d921      	bls.n	800691a <USB_EPStartXfer+0x806>
 80068d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068da:	095b      	lsrs	r3, r3, #5
 80068dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80068e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068e4:	f003 031f 	and.w	r3, r3, #31
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d104      	bne.n	80068f6 <USB_EPStartXfer+0x7e2>
 80068ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f0:	3b01      	subs	r3, #1
 80068f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80068f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f8:	881b      	ldrh	r3, [r3, #0]
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006900:	b29b      	uxth	r3, r3
 8006902:	029b      	lsls	r3, r3, #10
 8006904:	b29b      	uxth	r3, r3
 8006906:	4313      	orrs	r3, r2
 8006908:	b29b      	uxth	r3, r3
 800690a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800690e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006912:	b29a      	uxth	r2, r3
 8006914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006916:	801a      	strh	r2, [r3, #0]
 8006918:	e050      	b.n	80069bc <USB_EPStartXfer+0x8a8>
 800691a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10a      	bne.n	8006938 <USB_EPStartXfer+0x824>
 8006922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006924:	881b      	ldrh	r3, [r3, #0]
 8006926:	b29b      	uxth	r3, r3
 8006928:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800692c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006930:	b29a      	uxth	r2, r3
 8006932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006934:	801a      	strh	r2, [r3, #0]
 8006936:	e041      	b.n	80069bc <USB_EPStartXfer+0x8a8>
 8006938:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800693c:	085b      	lsrs	r3, r3, #1
 800693e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006942:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	2b00      	cmp	r3, #0
 800694c:	d004      	beq.n	8006958 <USB_EPStartXfer+0x844>
 800694e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006952:	3301      	adds	r3, #1
 8006954:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	b29a      	uxth	r2, r3
 800695e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006962:	b29b      	uxth	r3, r3
 8006964:	029b      	lsls	r3, r3, #10
 8006966:	b29b      	uxth	r3, r3
 8006968:	4313      	orrs	r3, r2
 800696a:	b29a      	uxth	r2, r3
 800696c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800696e:	801a      	strh	r2, [r3, #0]
 8006970:	e024      	b.n	80069bc <USB_EPStartXfer+0x8a8>
 8006972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006976:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	785b      	ldrb	r3, [r3, #1]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d11c      	bne.n	80069bc <USB_EPStartXfer+0x8a8>
 8006982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006986:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006990:	b29b      	uxth	r3, r3
 8006992:	461a      	mov	r2, r3
 8006994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006996:	4413      	add	r3, r2
 8006998:	643b      	str	r3, [r7, #64]	; 0x40
 800699a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800699e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	011a      	lsls	r2, r3, #4
 80069a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069aa:	4413      	add	r3, r2
 80069ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80069bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	895b      	ldrh	r3, [r3, #10]
 80069c8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6959      	ldr	r1, [r3, #20]
 80069d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069dc:	b29b      	uxth	r3, r3
 80069de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80069e2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80069e6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80069ea:	6800      	ldr	r0, [r0, #0]
 80069ec:	f001 f881 	bl	8007af2 <USB_WritePMA>
 80069f0:	e227      	b.n	8006e42 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80069f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006a02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a28:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006a2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	441a      	add	r2, r3
 8006a46:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a7e:	4413      	add	r3, r2
 8006a80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	011a      	lsls	r2, r3, #4
 8006a90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a92:	4413      	add	r3, r2
 8006a94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a98:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006aa2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	891b      	ldrh	r3, [r3, #8]
 8006ab0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	6959      	ldr	r1, [r3, #20]
 8006ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006aca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006ace:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006ad2:	6800      	ldr	r0, [r0, #0]
 8006ad4:	f001 f80d 	bl	8007af2 <USB_WritePMA>
 8006ad8:	e1b3      	b.n	8006e42 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6a1a      	ldr	r2, [r3, #32]
 8006ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aea:	1ad2      	subs	r2, r2, r3
 8006aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006afc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	881b      	ldrh	r3, [r3, #0]
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 80c6 	beq.w	8006cac <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	673b      	str	r3, [r7, #112]	; 0x70
 8006b2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	785b      	ldrb	r3, [r3, #1]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d177      	bne.n	8006c2c <USB_EPStartXfer+0xb18>
 8006b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	461a      	mov	r2, r3
 8006b5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b5c:	4413      	add	r3, r2
 8006b5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	011a      	lsls	r2, r3, #4
 8006b6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b70:	4413      	add	r3, r2
 8006b72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b76:	667b      	str	r3, [r7, #100]	; 0x64
 8006b78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b7a:	881b      	ldrh	r3, [r3, #0]
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b86:	801a      	strh	r2, [r3, #0]
 8006b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b8c:	2b3e      	cmp	r3, #62	; 0x3e
 8006b8e:	d921      	bls.n	8006bd4 <USB_EPStartXfer+0xac0>
 8006b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b94:	095b      	lsrs	r3, r3, #5
 8006b96:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b9e:	f003 031f 	and.w	r3, r3, #31
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d104      	bne.n	8006bb0 <USB_EPStartXfer+0xa9c>
 8006ba6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006baa:	3b01      	subs	r3, #1
 8006bac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006bb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	029b      	lsls	r3, r3, #10
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bd0:	801a      	strh	r2, [r3, #0]
 8006bd2:	e050      	b.n	8006c76 <USB_EPStartXfer+0xb62>
 8006bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10a      	bne.n	8006bf2 <USB_EPStartXfer+0xade>
 8006bdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bde:	881b      	ldrh	r3, [r3, #0]
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bee:	801a      	strh	r2, [r3, #0]
 8006bf0:	e041      	b.n	8006c76 <USB_EPStartXfer+0xb62>
 8006bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bf6:	085b      	lsrs	r3, r3, #1
 8006bf8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c00:	f003 0301 	and.w	r3, r3, #1
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d004      	beq.n	8006c12 <USB_EPStartXfer+0xafe>
 8006c08:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c14:	881b      	ldrh	r3, [r3, #0]
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	029b      	lsls	r3, r3, #10
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	4313      	orrs	r3, r2
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c28:	801a      	strh	r2, [r3, #0]
 8006c2a:	e024      	b.n	8006c76 <USB_EPStartXfer+0xb62>
 8006c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	785b      	ldrb	r3, [r3, #1]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d11c      	bne.n	8006c76 <USB_EPStartXfer+0xb62>
 8006c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c50:	4413      	add	r3, r2
 8006c52:	673b      	str	r3, [r7, #112]	; 0x70
 8006c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	011a      	lsls	r2, r3, #4
 8006c62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c64:	4413      	add	r3, r2
 8006c66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c74:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	895b      	ldrh	r3, [r3, #10]
 8006c82:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6959      	ldr	r1, [r3, #20]
 8006c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006c9c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006ca0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006ca4:	6800      	ldr	r0, [r0, #0]
 8006ca6:	f000 ff24 	bl	8007af2 <USB_WritePMA>
 8006caa:	e0ca      	b.n	8006e42 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006cac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	785b      	ldrb	r3, [r3, #1]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d177      	bne.n	8006dac <USB_EPStartXfer+0xc98>
 8006cbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006cc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ccc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	461a      	mov	r2, r3
 8006cda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cdc:	4413      	add	r3, r2
 8006cde:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	011a      	lsls	r2, r3, #4
 8006cee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cf6:	67bb      	str	r3, [r7, #120]	; 0x78
 8006cf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cfa:	881b      	ldrh	r3, [r3, #0]
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d06:	801a      	strh	r2, [r3, #0]
 8006d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d0c:	2b3e      	cmp	r3, #62	; 0x3e
 8006d0e:	d921      	bls.n	8006d54 <USB_EPStartXfer+0xc40>
 8006d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d14:	095b      	lsrs	r3, r3, #5
 8006d16:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d1e:	f003 031f 	and.w	r3, r3, #31
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d104      	bne.n	8006d30 <USB_EPStartXfer+0xc1c>
 8006d26:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	029b      	lsls	r3, r3, #10
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	4313      	orrs	r3, r2
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d50:	801a      	strh	r2, [r3, #0]
 8006d52:	e05c      	b.n	8006e0e <USB_EPStartXfer+0xcfa>
 8006d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10a      	bne.n	8006d72 <USB_EPStartXfer+0xc5e>
 8006d5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d5e:	881b      	ldrh	r3, [r3, #0]
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d6e:	801a      	strh	r2, [r3, #0]
 8006d70:	e04d      	b.n	8006e0e <USB_EPStartXfer+0xcfa>
 8006d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d76:	085b      	lsrs	r3, r3, #1
 8006d78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d80:	f003 0301 	and.w	r3, r3, #1
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d004      	beq.n	8006d92 <USB_EPStartXfer+0xc7e>
 8006d88:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d94:	881b      	ldrh	r3, [r3, #0]
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	029b      	lsls	r3, r3, #10
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	4313      	orrs	r3, r2
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006da8:	801a      	strh	r2, [r3, #0]
 8006daa:	e030      	b.n	8006e0e <USB_EPStartXfer+0xcfa>
 8006dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	785b      	ldrb	r3, [r3, #1]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d128      	bne.n	8006e0e <USB_EPStartXfer+0xcfa>
 8006dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	461a      	mov	r2, r3
 8006ddc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006de0:	4413      	add	r3, r2
 8006de2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	011a      	lsls	r2, r3, #4
 8006df4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006df8:	4413      	add	r3, r2
 8006dfa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006dfe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e0c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	891b      	ldrh	r3, [r3, #8]
 8006e1a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6959      	ldr	r1, [r3, #20]
 8006e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006e34:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006e38:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006e3c:	6800      	ldr	r0, [r0, #0]
 8006e3e:	f000 fe58 	bl	8007af2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e68:	817b      	strh	r3, [r7, #10]
 8006e6a:	897b      	ldrh	r3, [r7, #10]
 8006e6c:	f083 0310 	eor.w	r3, r3, #16
 8006e70:	817b      	strh	r3, [r7, #10]
 8006e72:	897b      	ldrh	r3, [r7, #10]
 8006e74:	f083 0320 	eor.w	r3, r3, #32
 8006e78:	817b      	strh	r3, [r7, #10]
 8006e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	441a      	add	r2, r3
 8006e94:	897b      	ldrh	r3, [r7, #10]
 8006e96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	8013      	strh	r3, [r2, #0]
 8006eaa:	f000 bcde 	b.w	800786a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	7b1b      	ldrb	r3, [r3, #12]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f040 80bb 	bne.w	8007036 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006ec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	699a      	ldr	r2, [r3, #24]
 8006ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d917      	bls.n	8006f0c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006edc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	699a      	ldr	r2, [r3, #24]
 8006ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006efc:	1ad2      	subs	r2, r2, r3
 8006efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	619a      	str	r2, [r3, #24]
 8006f0a:	e00e      	b.n	8006f2a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006f0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2200      	movs	r2, #0
 8006f28:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	461a      	mov	r2, r3
 8006f4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f4e:	4413      	add	r3, r2
 8006f50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	011a      	lsls	r2, r3, #4
 8006f62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f66:	4413      	add	r3, r2
 8006f68:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006f70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f74:	881b      	ldrh	r3, [r3, #0]
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f82:	801a      	strh	r2, [r3, #0]
 8006f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f88:	2b3e      	cmp	r3, #62	; 0x3e
 8006f8a:	d924      	bls.n	8006fd6 <USB_EPStartXfer+0xec2>
 8006f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f90:	095b      	lsrs	r3, r3, #5
 8006f92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f9a:	f003 031f 	and.w	r3, r3, #31
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d104      	bne.n	8006fac <USB_EPStartXfer+0xe98>
 8006fa2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fb0:	881b      	ldrh	r3, [r3, #0]
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	029b      	lsls	r3, r3, #10
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fd0:	801a      	strh	r2, [r3, #0]
 8006fd2:	f000 bc10 	b.w	80077f6 <USB_EPStartXfer+0x16e2>
 8006fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10c      	bne.n	8006ff8 <USB_EPStartXfer+0xee4>
 8006fde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fe2:	881b      	ldrh	r3, [r3, #0]
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fee:	b29a      	uxth	r2, r3
 8006ff0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ff4:	801a      	strh	r2, [r3, #0]
 8006ff6:	e3fe      	b.n	80077f6 <USB_EPStartXfer+0x16e2>
 8006ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ffc:	085b      	lsrs	r3, r3, #1
 8006ffe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007002:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	2b00      	cmp	r3, #0
 800700c:	d004      	beq.n	8007018 <USB_EPStartXfer+0xf04>
 800700e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007012:	3301      	adds	r3, #1
 8007014:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007018:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800701c:	881b      	ldrh	r3, [r3, #0]
 800701e:	b29a      	uxth	r2, r3
 8007020:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007024:	b29b      	uxth	r3, r3
 8007026:	029b      	lsls	r3, r3, #10
 8007028:	b29b      	uxth	r3, r3
 800702a:	4313      	orrs	r3, r2
 800702c:	b29a      	uxth	r2, r3
 800702e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007032:	801a      	strh	r2, [r3, #0]
 8007034:	e3df      	b.n	80077f6 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800703a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	78db      	ldrb	r3, [r3, #3]
 8007042:	2b02      	cmp	r3, #2
 8007044:	f040 8218 	bne.w	8007478 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007048:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800704c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	785b      	ldrb	r3, [r3, #1]
 8007054:	2b00      	cmp	r3, #0
 8007056:	f040 809d 	bne.w	8007194 <USB_EPStartXfer+0x1080>
 800705a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800705e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800706c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007076:	b29b      	uxth	r3, r3
 8007078:	461a      	mov	r2, r3
 800707a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800707e:	4413      	add	r3, r2
 8007080:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	011a      	lsls	r2, r3, #4
 8007092:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007096:	4413      	add	r3, r2
 8007098:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800709c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80070a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070a4:	881b      	ldrh	r3, [r3, #0]
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070b2:	801a      	strh	r2, [r3, #0]
 80070b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	2b3e      	cmp	r3, #62	; 0x3e
 80070c2:	d92b      	bls.n	800711c <USB_EPStartXfer+0x1008>
 80070c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	095b      	lsrs	r3, r3, #5
 80070d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	f003 031f 	and.w	r3, r3, #31
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d104      	bne.n	80070f4 <USB_EPStartXfer+0xfe0>
 80070ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ee:	3b01      	subs	r3, #1
 80070f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007100:	b29b      	uxth	r3, r3
 8007102:	029b      	lsls	r3, r3, #10
 8007104:	b29b      	uxth	r3, r3
 8007106:	4313      	orrs	r3, r2
 8007108:	b29b      	uxth	r3, r3
 800710a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800710e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007112:	b29a      	uxth	r2, r3
 8007114:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007118:	801a      	strh	r2, [r3, #0]
 800711a:	e070      	b.n	80071fe <USB_EPStartXfer+0x10ea>
 800711c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007120:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d10c      	bne.n	8007146 <USB_EPStartXfer+0x1032>
 800712c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007130:	881b      	ldrh	r3, [r3, #0]
 8007132:	b29b      	uxth	r3, r3
 8007134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800713c:	b29a      	uxth	r2, r3
 800713e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007142:	801a      	strh	r2, [r3, #0]
 8007144:	e05b      	b.n	80071fe <USB_EPStartXfer+0x10ea>
 8007146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800714a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	085b      	lsrs	r3, r3, #1
 8007154:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800715c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	f003 0301 	and.w	r3, r3, #1
 8007168:	2b00      	cmp	r3, #0
 800716a:	d004      	beq.n	8007176 <USB_EPStartXfer+0x1062>
 800716c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007170:	3301      	adds	r3, #1
 8007172:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007176:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800717a:	881b      	ldrh	r3, [r3, #0]
 800717c:	b29a      	uxth	r2, r3
 800717e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007182:	b29b      	uxth	r3, r3
 8007184:	029b      	lsls	r3, r3, #10
 8007186:	b29b      	uxth	r3, r3
 8007188:	4313      	orrs	r3, r2
 800718a:	b29a      	uxth	r2, r3
 800718c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007190:	801a      	strh	r2, [r3, #0]
 8007192:	e034      	b.n	80071fe <USB_EPStartXfer+0x10ea>
 8007194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007198:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	785b      	ldrb	r3, [r3, #1]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d12c      	bne.n	80071fe <USB_EPStartXfer+0x10ea>
 80071a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	461a      	mov	r2, r3
 80071c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071c8:	4413      	add	r3, r2
 80071ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	011a      	lsls	r2, r3, #4
 80071dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071e0:	4413      	add	r3, r2
 80071e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80071fc:	801a      	strh	r2, [r3, #0]
 80071fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007202:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800720c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	785b      	ldrb	r3, [r3, #1]
 8007218:	2b00      	cmp	r3, #0
 800721a:	f040 809d 	bne.w	8007358 <USB_EPStartXfer+0x1244>
 800721e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007222:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800722c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007230:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800723a:	b29b      	uxth	r3, r3
 800723c:	461a      	mov	r2, r3
 800723e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007242:	4413      	add	r3, r2
 8007244:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800724c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	011a      	lsls	r2, r3, #4
 8007256:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800725a:	4413      	add	r3, r2
 800725c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007260:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007264:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007268:	881b      	ldrh	r3, [r3, #0]
 800726a:	b29b      	uxth	r3, r3
 800726c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007270:	b29a      	uxth	r2, r3
 8007272:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007276:	801a      	strh	r2, [r3, #0]
 8007278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800727c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	2b3e      	cmp	r3, #62	; 0x3e
 8007286:	d92b      	bls.n	80072e0 <USB_EPStartXfer+0x11cc>
 8007288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800728c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	095b      	lsrs	r3, r3, #5
 8007296:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800729a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800729e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	f003 031f 	and.w	r3, r3, #31
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d104      	bne.n	80072b8 <USB_EPStartXfer+0x11a4>
 80072ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072b2:	3b01      	subs	r3, #1
 80072b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072bc:	881b      	ldrh	r3, [r3, #0]
 80072be:	b29a      	uxth	r2, r3
 80072c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	029b      	lsls	r3, r3, #10
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	4313      	orrs	r3, r2
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072dc:	801a      	strh	r2, [r3, #0]
 80072de:	e069      	b.n	80073b4 <USB_EPStartXfer+0x12a0>
 80072e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d10c      	bne.n	800730a <USB_EPStartXfer+0x11f6>
 80072f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072f4:	881b      	ldrh	r3, [r3, #0]
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007300:	b29a      	uxth	r2, r3
 8007302:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007306:	801a      	strh	r2, [r3, #0]
 8007308:	e054      	b.n	80073b4 <USB_EPStartXfer+0x12a0>
 800730a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800730e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	085b      	lsrs	r3, r3, #1
 8007318:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800731c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007320:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	f003 0301 	and.w	r3, r3, #1
 800732c:	2b00      	cmp	r3, #0
 800732e:	d004      	beq.n	800733a <USB_EPStartXfer+0x1226>
 8007330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007334:	3301      	adds	r3, #1
 8007336:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800733a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800733e:	881b      	ldrh	r3, [r3, #0]
 8007340:	b29a      	uxth	r2, r3
 8007342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007346:	b29b      	uxth	r3, r3
 8007348:	029b      	lsls	r3, r3, #10
 800734a:	b29b      	uxth	r3, r3
 800734c:	4313      	orrs	r3, r2
 800734e:	b29a      	uxth	r2, r3
 8007350:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007354:	801a      	strh	r2, [r3, #0]
 8007356:	e02d      	b.n	80073b4 <USB_EPStartXfer+0x12a0>
 8007358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800735c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	785b      	ldrb	r3, [r3, #1]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d125      	bne.n	80073b4 <USB_EPStartXfer+0x12a0>
 8007368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800736c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007376:	b29b      	uxth	r3, r3
 8007378:	461a      	mov	r2, r3
 800737a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800737e:	4413      	add	r3, r2
 8007380:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	011a      	lsls	r2, r3, #4
 8007392:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007396:	4413      	add	r3, r2
 8007398:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800739c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80073a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	b29a      	uxth	r2, r3
 80073ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80073b2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80073b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	69db      	ldr	r3, [r3, #28]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f000 8218 	beq.w	80077f6 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80073c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4413      	add	r3, r2
 80073e0:	881b      	ldrh	r3, [r3, #0]
 80073e2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80073e6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80073ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d005      	beq.n	80073fe <USB_EPStartXfer+0x12ea>
 80073f2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80073f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10d      	bne.n	800741a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80073fe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007406:	2b00      	cmp	r3, #0
 8007408:	f040 81f5 	bne.w	80077f6 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800740c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007414:	2b00      	cmp	r3, #0
 8007416:	f040 81ee 	bne.w	80077f6 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800741a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800741e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	881b      	ldrh	r3, [r3, #0]
 8007436:	b29b      	uxth	r3, r3
 8007438:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800743c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007440:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007448:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	441a      	add	r2, r3
 800745e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007462:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007466:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800746a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800746e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007472:	b29b      	uxth	r3, r3
 8007474:	8013      	strh	r3, [r2, #0]
 8007476:	e1be      	b.n	80077f6 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800747c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	78db      	ldrb	r3, [r3, #3]
 8007484:	2b01      	cmp	r3, #1
 8007486:	f040 81b4 	bne.w	80077f2 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800748a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800748e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	699a      	ldr	r2, [r3, #24]
 8007496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800749a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d917      	bls.n	80074d6 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80074a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80074b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	699a      	ldr	r2, [r3, #24]
 80074c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074c6:	1ad2      	subs	r2, r2, r3
 80074c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	619a      	str	r2, [r3, #24]
 80074d4:	e00e      	b.n	80074f4 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80074d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	699b      	ldr	r3, [r3, #24]
 80074e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80074e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2200      	movs	r2, #0
 80074f2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80074f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	785b      	ldrb	r3, [r3, #1]
 8007500:	2b00      	cmp	r3, #0
 8007502:	f040 8085 	bne.w	8007610 <USB_EPStartXfer+0x14fc>
 8007506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800750a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007518:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007522:	b29b      	uxth	r3, r3
 8007524:	461a      	mov	r2, r3
 8007526:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800752a:	4413      	add	r3, r2
 800752c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	011a      	lsls	r2, r3, #4
 800753e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007542:	4413      	add	r3, r2
 8007544:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007548:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800754c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007550:	881b      	ldrh	r3, [r3, #0]
 8007552:	b29b      	uxth	r3, r3
 8007554:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007558:	b29a      	uxth	r2, r3
 800755a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800755e:	801a      	strh	r2, [r3, #0]
 8007560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007564:	2b3e      	cmp	r3, #62	; 0x3e
 8007566:	d923      	bls.n	80075b0 <USB_EPStartXfer+0x149c>
 8007568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800756c:	095b      	lsrs	r3, r3, #5
 800756e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007572:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007576:	f003 031f 	and.w	r3, r3, #31
 800757a:	2b00      	cmp	r3, #0
 800757c:	d104      	bne.n	8007588 <USB_EPStartXfer+0x1474>
 800757e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007582:	3b01      	subs	r3, #1
 8007584:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007588:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800758c:	881b      	ldrh	r3, [r3, #0]
 800758e:	b29a      	uxth	r2, r3
 8007590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007594:	b29b      	uxth	r3, r3
 8007596:	029b      	lsls	r3, r3, #10
 8007598:	b29b      	uxth	r3, r3
 800759a:	4313      	orrs	r3, r2
 800759c:	b29b      	uxth	r3, r3
 800759e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075ac:	801a      	strh	r2, [r3, #0]
 80075ae:	e060      	b.n	8007672 <USB_EPStartXfer+0x155e>
 80075b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10c      	bne.n	80075d2 <USB_EPStartXfer+0x14be>
 80075b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075bc:	881b      	ldrh	r3, [r3, #0]
 80075be:	b29b      	uxth	r3, r3
 80075c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075ce:	801a      	strh	r2, [r3, #0]
 80075d0:	e04f      	b.n	8007672 <USB_EPStartXfer+0x155e>
 80075d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075d6:	085b      	lsrs	r3, r3, #1
 80075d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80075dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075e0:	f003 0301 	and.w	r3, r3, #1
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d004      	beq.n	80075f2 <USB_EPStartXfer+0x14de>
 80075e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075ec:	3301      	adds	r3, #1
 80075ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80075f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075f6:	881b      	ldrh	r3, [r3, #0]
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075fe:	b29b      	uxth	r3, r3
 8007600:	029b      	lsls	r3, r3, #10
 8007602:	b29b      	uxth	r3, r3
 8007604:	4313      	orrs	r3, r2
 8007606:	b29a      	uxth	r2, r3
 8007608:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800760c:	801a      	strh	r2, [r3, #0]
 800760e:	e030      	b.n	8007672 <USB_EPStartXfer+0x155e>
 8007610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	785b      	ldrb	r3, [r3, #1]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d128      	bne.n	8007672 <USB_EPStartXfer+0x155e>
 8007620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007624:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800762e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007632:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800763c:	b29b      	uxth	r3, r3
 800763e:	461a      	mov	r2, r3
 8007640:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007644:	4413      	add	r3, r2
 8007646:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800764a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800764e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	011a      	lsls	r2, r3, #4
 8007658:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800765c:	4413      	add	r3, r2
 800765e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007662:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800766a:	b29a      	uxth	r2, r3
 800766c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007670:	801a      	strh	r2, [r3, #0]
 8007672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007676:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007684:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	785b      	ldrb	r3, [r3, #1]
 800768c:	2b00      	cmp	r3, #0
 800768e:	f040 8085 	bne.w	800779c <USB_EPStartXfer+0x1688>
 8007692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007696:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80076a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	461a      	mov	r2, r3
 80076b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80076b6:	4413      	add	r3, r2
 80076b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80076bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	011a      	lsls	r2, r3, #4
 80076ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80076ce:	4413      	add	r3, r2
 80076d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80076d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076dc:	881b      	ldrh	r3, [r3, #0]
 80076de:	b29b      	uxth	r3, r3
 80076e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076ea:	801a      	strh	r2, [r3, #0]
 80076ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076f0:	2b3e      	cmp	r3, #62	; 0x3e
 80076f2:	d923      	bls.n	800773c <USB_EPStartXfer+0x1628>
 80076f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076f8:	095b      	lsrs	r3, r3, #5
 80076fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80076fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007702:	f003 031f 	and.w	r3, r3, #31
 8007706:	2b00      	cmp	r3, #0
 8007708:	d104      	bne.n	8007714 <USB_EPStartXfer+0x1600>
 800770a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800770e:	3b01      	subs	r3, #1
 8007710:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007714:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007718:	881b      	ldrh	r3, [r3, #0]
 800771a:	b29a      	uxth	r2, r3
 800771c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007720:	b29b      	uxth	r3, r3
 8007722:	029b      	lsls	r3, r3, #10
 8007724:	b29b      	uxth	r3, r3
 8007726:	4313      	orrs	r3, r2
 8007728:	b29b      	uxth	r3, r3
 800772a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800772e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007732:	b29a      	uxth	r2, r3
 8007734:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007738:	801a      	strh	r2, [r3, #0]
 800773a:	e05c      	b.n	80077f6 <USB_EPStartXfer+0x16e2>
 800773c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007740:	2b00      	cmp	r3, #0
 8007742:	d10c      	bne.n	800775e <USB_EPStartXfer+0x164a>
 8007744:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007748:	881b      	ldrh	r3, [r3, #0]
 800774a:	b29b      	uxth	r3, r3
 800774c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007754:	b29a      	uxth	r2, r3
 8007756:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800775a:	801a      	strh	r2, [r3, #0]
 800775c:	e04b      	b.n	80077f6 <USB_EPStartXfer+0x16e2>
 800775e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007762:	085b      	lsrs	r3, r3, #1
 8007764:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800776c:	f003 0301 	and.w	r3, r3, #1
 8007770:	2b00      	cmp	r3, #0
 8007772:	d004      	beq.n	800777e <USB_EPStartXfer+0x166a>
 8007774:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007778:	3301      	adds	r3, #1
 800777a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800777e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007782:	881b      	ldrh	r3, [r3, #0]
 8007784:	b29a      	uxth	r2, r3
 8007786:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800778a:	b29b      	uxth	r3, r3
 800778c:	029b      	lsls	r3, r3, #10
 800778e:	b29b      	uxth	r3, r3
 8007790:	4313      	orrs	r3, r2
 8007792:	b29a      	uxth	r2, r3
 8007794:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007798:	801a      	strh	r2, [r3, #0]
 800779a:	e02c      	b.n	80077f6 <USB_EPStartXfer+0x16e2>
 800779c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	785b      	ldrb	r3, [r3, #1]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d124      	bne.n	80077f6 <USB_EPStartXfer+0x16e2>
 80077ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	461a      	mov	r2, r3
 80077be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80077c2:	4413      	add	r3, r2
 80077c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80077c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	011a      	lsls	r2, r3, #4
 80077d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80077da:	4413      	add	r3, r2
 80077dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80077ee:	801a      	strh	r2, [r3, #0]
 80077f0:	e001      	b.n	80077f6 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e03a      	b.n	800786c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80077f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	4413      	add	r3, r2
 8007810:	881b      	ldrh	r3, [r3, #0]
 8007812:	b29b      	uxth	r3, r3
 8007814:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800781c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007820:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007824:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007828:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800782c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007830:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007834:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800783c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007846:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	441a      	add	r2, r3
 8007852:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007856:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800785a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800785e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007866:	b29b      	uxth	r3, r3
 8007868:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007876:	b480      	push	{r7}
 8007878:	b085      	sub	sp, #20
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
 800787e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	785b      	ldrb	r3, [r3, #1]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d020      	beq.n	80078ca <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	4413      	add	r3, r2
 8007892:	881b      	ldrh	r3, [r3, #0]
 8007894:	b29b      	uxth	r3, r3
 8007896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800789a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800789e:	81bb      	strh	r3, [r7, #12]
 80078a0:	89bb      	ldrh	r3, [r7, #12]
 80078a2:	f083 0310 	eor.w	r3, r3, #16
 80078a6:	81bb      	strh	r3, [r7, #12]
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	441a      	add	r2, r3
 80078b2:	89bb      	ldrh	r3, [r7, #12]
 80078b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	8013      	strh	r3, [r2, #0]
 80078c8:	e01f      	b.n	800790a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	4413      	add	r3, r2
 80078d4:	881b      	ldrh	r3, [r3, #0]
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078e0:	81fb      	strh	r3, [r7, #14]
 80078e2:	89fb      	ldrh	r3, [r7, #14]
 80078e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80078e8:	81fb      	strh	r3, [r7, #14]
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	441a      	add	r2, r3
 80078f4:	89fb      	ldrh	r3, [r7, #14]
 80078f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007906:	b29b      	uxth	r3, r3
 8007908:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3714      	adds	r7, #20
 8007910:	46bd      	mov	sp, r7
 8007912:	bc80      	pop	{r7}
 8007914:	4770      	bx	lr

08007916 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007916:	b480      	push	{r7}
 8007918:	b087      	sub	sp, #28
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	7b1b      	ldrb	r3, [r3, #12]
 8007924:	2b00      	cmp	r3, #0
 8007926:	f040 809d 	bne.w	8007a64 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	785b      	ldrb	r3, [r3, #1]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d04c      	beq.n	80079cc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	4413      	add	r3, r2
 800793c:	881b      	ldrh	r3, [r3, #0]
 800793e:	823b      	strh	r3, [r7, #16]
 8007940:	8a3b      	ldrh	r3, [r7, #16]
 8007942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007946:	2b00      	cmp	r3, #0
 8007948:	d01b      	beq.n	8007982 <USB_EPClearStall+0x6c>
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	4413      	add	r3, r2
 8007954:	881b      	ldrh	r3, [r3, #0]
 8007956:	b29b      	uxth	r3, r3
 8007958:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800795c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007960:	81fb      	strh	r3, [r7, #14]
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	441a      	add	r2, r3
 800796c:	89fb      	ldrh	r3, [r7, #14]
 800796e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007972:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800797a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800797e:	b29b      	uxth	r3, r3
 8007980:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	78db      	ldrb	r3, [r3, #3]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d06c      	beq.n	8007a64 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4413      	add	r3, r2
 8007994:	881b      	ldrh	r3, [r3, #0]
 8007996:	b29b      	uxth	r3, r3
 8007998:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800799c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079a0:	81bb      	strh	r3, [r7, #12]
 80079a2:	89bb      	ldrh	r3, [r7, #12]
 80079a4:	f083 0320 	eor.w	r3, r3, #32
 80079a8:	81bb      	strh	r3, [r7, #12]
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	441a      	add	r2, r3
 80079b4:	89bb      	ldrh	r3, [r7, #12]
 80079b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	8013      	strh	r3, [r2, #0]
 80079ca:	e04b      	b.n	8007a64 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4413      	add	r3, r2
 80079d6:	881b      	ldrh	r3, [r3, #0]
 80079d8:	82fb      	strh	r3, [r7, #22]
 80079da:	8afb      	ldrh	r3, [r7, #22]
 80079dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d01b      	beq.n	8007a1c <USB_EPClearStall+0x106>
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	4413      	add	r3, r2
 80079ee:	881b      	ldrh	r3, [r3, #0]
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079fa:	82bb      	strh	r3, [r7, #20]
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	441a      	add	r2, r3
 8007a06:	8abb      	ldrh	r3, [r7, #20]
 8007a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4413      	add	r3, r2
 8007a26:	881b      	ldrh	r3, [r3, #0]
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a32:	827b      	strh	r3, [r7, #18]
 8007a34:	8a7b      	ldrh	r3, [r7, #18]
 8007a36:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a3a:	827b      	strh	r3, [r7, #18]
 8007a3c:	8a7b      	ldrh	r3, [r7, #18]
 8007a3e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a42:	827b      	strh	r3, [r7, #18]
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	441a      	add	r2, r3
 8007a4e:	8a7b      	ldrh	r3, [r7, #18]
 8007a50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	371c      	adds	r7, #28
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bc80      	pop	{r7}
 8007a6e:	4770      	bx	lr

08007a70 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	460b      	mov	r3, r1
 8007a7a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007a7c:	78fb      	ldrb	r3, [r7, #3]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d103      	bne.n	8007a8a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2280      	movs	r2, #128	; 0x80
 8007a86:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bc80      	pop	{r7}
 8007a94:	4770      	bx	lr

08007a96 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007a96:	b480      	push	{r7}
 8007a98:	b083      	sub	sp, #12
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bc80      	pop	{r7}
 8007aa8:	4770      	bx	lr

08007aaa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007aaa:	b480      	push	{r7}
 8007aac:	b083      	sub	sp, #12
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bc80      	pop	{r7}
 8007abc:	4770      	bx	lr

08007abe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b085      	sub	sp, #20
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3714      	adds	r7, #20
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bc80      	pop	{r7}
 8007ada:	4770      	bx	lr

08007adc <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bc80      	pop	{r7}
 8007af0:	4770      	bx	lr

08007af2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007af2:	b480      	push	{r7}
 8007af4:	b08b      	sub	sp, #44	; 0x2c
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	60f8      	str	r0, [r7, #12]
 8007afa:	60b9      	str	r1, [r7, #8]
 8007afc:	4611      	mov	r1, r2
 8007afe:	461a      	mov	r2, r3
 8007b00:	460b      	mov	r3, r1
 8007b02:	80fb      	strh	r3, [r7, #6]
 8007b04:	4613      	mov	r3, r2
 8007b06:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007b08:	88bb      	ldrh	r3, [r7, #4]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	085b      	lsrs	r3, r3, #1
 8007b0e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007b18:	88fb      	ldrh	r3, [r7, #6]
 8007b1a:	005a      	lsls	r2, r3, #1
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	4413      	add	r3, r2
 8007b20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b24:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	627b      	str	r3, [r7, #36]	; 0x24
 8007b2a:	e01e      	b.n	8007b6a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	3301      	adds	r3, #1
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	021b      	lsls	r3, r3, #8
 8007b3a:	b21a      	sxth	r2, r3
 8007b3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	b21b      	sxth	r3, r3
 8007b44:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007b46:	6a3b      	ldr	r3, [r7, #32]
 8007b48:	8a7a      	ldrh	r2, [r7, #18]
 8007b4a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007b4c:	6a3b      	ldr	r3, [r7, #32]
 8007b4e:	3302      	adds	r3, #2
 8007b50:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007b52:	6a3b      	ldr	r3, [r7, #32]
 8007b54:	3302      	adds	r3, #2
 8007b56:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	3301      	adds	r3, #1
 8007b62:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b66:	3b01      	subs	r3, #1
 8007b68:	627b      	str	r3, [r7, #36]	; 0x24
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d1dd      	bne.n	8007b2c <USB_WritePMA+0x3a>
  }
}
 8007b70:	bf00      	nop
 8007b72:	bf00      	nop
 8007b74:	372c      	adds	r7, #44	; 0x2c
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bc80      	pop	{r7}
 8007b7a:	4770      	bx	lr

08007b7c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b08b      	sub	sp, #44	; 0x2c
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	4611      	mov	r1, r2
 8007b88:	461a      	mov	r2, r3
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	80fb      	strh	r3, [r7, #6]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007b92:	88bb      	ldrh	r3, [r7, #4]
 8007b94:	085b      	lsrs	r3, r3, #1
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007ba2:	88fb      	ldrh	r3, [r7, #6]
 8007ba4:	005a      	lsls	r2, r3, #1
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	4413      	add	r3, r2
 8007baa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bae:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8007bb4:	e01b      	b.n	8007bee <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007bb6:	6a3b      	ldr	r3, [r7, #32]
 8007bb8:	881b      	ldrh	r3, [r3, #0]
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007bbe:	6a3b      	ldr	r3, [r7, #32]
 8007bc0:	3302      	adds	r3, #2
 8007bc2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	b2da      	uxtb	r2, r3
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	0a1b      	lsrs	r3, r3, #8
 8007bd6:	b2da      	uxtb	r2, r3
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	3301      	adds	r3, #1
 8007be0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007be2:	6a3b      	ldr	r3, [r7, #32]
 8007be4:	3302      	adds	r3, #2
 8007be6:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bea:	3b01      	subs	r3, #1
 8007bec:	627b      	str	r3, [r7, #36]	; 0x24
 8007bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1e0      	bne.n	8007bb6 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007bf4:	88bb      	ldrh	r3, [r7, #4]
 8007bf6:	f003 0301 	and.w	r3, r3, #1
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d007      	beq.n	8007c10 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007c00:	6a3b      	ldr	r3, [r7, #32]
 8007c02:	881b      	ldrh	r3, [r3, #0]
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	701a      	strb	r2, [r3, #0]
  }
}
 8007c10:	bf00      	nop
 8007c12:	372c      	adds	r7, #44	; 0x2c
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bc80      	pop	{r7}
 8007c18:	4770      	bx	lr

08007c1a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b084      	sub	sp, #16
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	460b      	mov	r3, r1
 8007c24:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007c26:	2300      	movs	r3, #0
 8007c28:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	7c1b      	ldrb	r3, [r3, #16]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d115      	bne.n	8007c5e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c36:	2202      	movs	r2, #2
 8007c38:	2181      	movs	r1, #129	; 0x81
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f001 fe87 	bl	800994e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c4a:	2202      	movs	r2, #2
 8007c4c:	2101      	movs	r1, #1
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f001 fe7d 	bl	800994e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007c5c:	e012      	b.n	8007c84 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c5e:	2340      	movs	r3, #64	; 0x40
 8007c60:	2202      	movs	r2, #2
 8007c62:	2181      	movs	r1, #129	; 0x81
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f001 fe72 	bl	800994e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c70:	2340      	movs	r3, #64	; 0x40
 8007c72:	2202      	movs	r2, #2
 8007c74:	2101      	movs	r1, #1
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f001 fe69 	bl	800994e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007c84:	2308      	movs	r3, #8
 8007c86:	2203      	movs	r2, #3
 8007c88:	2182      	movs	r1, #130	; 0x82
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f001 fe5f 	bl	800994e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007c96:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007c9a:	f001 ff7f 	bl	8009b9c <USBD_static_malloc>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d102      	bne.n	8007cb6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	73fb      	strb	r3, [r7, #15]
 8007cb4:	e026      	b.n	8007d04 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cbc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	7c1b      	ldrb	r3, [r3, #16]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d109      	bne.n	8007cf4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ce6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cea:	2101      	movs	r1, #1
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f001 ff1f 	bl	8009b30 <USBD_LL_PrepareReceive>
 8007cf2:	e007      	b.n	8007d04 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cfa:	2340      	movs	r3, #64	; 0x40
 8007cfc:	2101      	movs	r1, #1
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f001 ff16 	bl	8009b30 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b084      	sub	sp, #16
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
 8007d16:	460b      	mov	r3, r1
 8007d18:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007d1e:	2181      	movs	r1, #129	; 0x81
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f001 fe3a 	bl	800999a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007d2c:	2101      	movs	r1, #1
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f001 fe33 	bl	800999a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007d3c:	2182      	movs	r1, #130	; 0x82
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f001 fe2b 	bl	800999a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00e      	beq.n	8007d72 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d64:	4618      	mov	r0, r3
 8007d66:	f001 ff25 	bl	8009bb4 <USBD_static_free>
    pdev->pClassData = NULL;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3710      	adds	r7, #16
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b086      	sub	sp, #24
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d8c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007d92:	2300      	movs	r3, #0
 8007d94:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007d96:	2300      	movs	r3, #0
 8007d98:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d039      	beq.n	8007e1a <USBD_CDC_Setup+0x9e>
 8007da6:	2b20      	cmp	r3, #32
 8007da8:	d17f      	bne.n	8007eaa <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	88db      	ldrh	r3, [r3, #6]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d029      	beq.n	8007e06 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	b25b      	sxtb	r3, r3
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	da11      	bge.n	8007de0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	683a      	ldr	r2, [r7, #0]
 8007dc6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007dc8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007dca:	683a      	ldr	r2, [r7, #0]
 8007dcc:	88d2      	ldrh	r2, [r2, #6]
 8007dce:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007dd0:	6939      	ldr	r1, [r7, #16]
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	88db      	ldrh	r3, [r3, #6]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f001 fa0a 	bl	80091f2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007dde:	e06b      	b.n	8007eb8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	785a      	ldrb	r2, [r3, #1]
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	88db      	ldrh	r3, [r3, #6]
 8007dee:	b2da      	uxtb	r2, r3
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007df6:	6939      	ldr	r1, [r7, #16]
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	88db      	ldrh	r3, [r3, #6]
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f001 fa25 	bl	800924e <USBD_CtlPrepareRx>
      break;
 8007e04:	e058      	b.n	8007eb8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	7850      	ldrb	r0, [r2, #1]
 8007e12:	2200      	movs	r2, #0
 8007e14:	6839      	ldr	r1, [r7, #0]
 8007e16:	4798      	blx	r3
      break;
 8007e18:	e04e      	b.n	8007eb8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	785b      	ldrb	r3, [r3, #1]
 8007e1e:	2b0b      	cmp	r3, #11
 8007e20:	d02e      	beq.n	8007e80 <USBD_CDC_Setup+0x104>
 8007e22:	2b0b      	cmp	r3, #11
 8007e24:	dc38      	bgt.n	8007e98 <USBD_CDC_Setup+0x11c>
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d002      	beq.n	8007e30 <USBD_CDC_Setup+0xb4>
 8007e2a:	2b0a      	cmp	r3, #10
 8007e2c:	d014      	beq.n	8007e58 <USBD_CDC_Setup+0xdc>
 8007e2e:	e033      	b.n	8007e98 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e36:	2b03      	cmp	r3, #3
 8007e38:	d107      	bne.n	8007e4a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007e3a:	f107 030c 	add.w	r3, r7, #12
 8007e3e:	2202      	movs	r2, #2
 8007e40:	4619      	mov	r1, r3
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f001 f9d5 	bl	80091f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e48:	e02e      	b.n	8007ea8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007e4a:	6839      	ldr	r1, [r7, #0]
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f001 f966 	bl	800911e <USBD_CtlError>
            ret = USBD_FAIL;
 8007e52:	2302      	movs	r3, #2
 8007e54:	75fb      	strb	r3, [r7, #23]
          break;
 8007e56:	e027      	b.n	8007ea8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e5e:	2b03      	cmp	r3, #3
 8007e60:	d107      	bne.n	8007e72 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007e62:	f107 030f 	add.w	r3, r7, #15
 8007e66:	2201      	movs	r2, #1
 8007e68:	4619      	mov	r1, r3
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f001 f9c1 	bl	80091f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e70:	e01a      	b.n	8007ea8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007e72:	6839      	ldr	r1, [r7, #0]
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f001 f952 	bl	800911e <USBD_CtlError>
            ret = USBD_FAIL;
 8007e7a:	2302      	movs	r3, #2
 8007e7c:	75fb      	strb	r3, [r7, #23]
          break;
 8007e7e:	e013      	b.n	8007ea8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e86:	2b03      	cmp	r3, #3
 8007e88:	d00d      	beq.n	8007ea6 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007e8a:	6839      	ldr	r1, [r7, #0]
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f001 f946 	bl	800911e <USBD_CtlError>
            ret = USBD_FAIL;
 8007e92:	2302      	movs	r3, #2
 8007e94:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007e96:	e006      	b.n	8007ea6 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007e98:	6839      	ldr	r1, [r7, #0]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f001 f93f 	bl	800911e <USBD_CtlError>
          ret = USBD_FAIL;
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	75fb      	strb	r3, [r7, #23]
          break;
 8007ea4:	e000      	b.n	8007ea8 <USBD_CDC_Setup+0x12c>
          break;
 8007ea6:	bf00      	nop
      }
      break;
 8007ea8:	e006      	b.n	8007eb8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007eaa:	6839      	ldr	r1, [r7, #0]
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f001 f936 	bl	800911e <USBD_CtlError>
      ret = USBD_FAIL;
 8007eb2:	2302      	movs	r3, #2
 8007eb4:	75fb      	strb	r3, [r7, #23]
      break;
 8007eb6:	bf00      	nop
  }

  return ret;
 8007eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3718      	adds	r7, #24
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b084      	sub	sp, #16
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
 8007eca:	460b      	mov	r3, r1
 8007ecc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ed4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007edc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d03a      	beq.n	8007f5e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007ee8:	78fa      	ldrb	r2, [r7, #3]
 8007eea:	6879      	ldr	r1, [r7, #4]
 8007eec:	4613      	mov	r3, r2
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	4413      	add	r3, r2
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	440b      	add	r3, r1
 8007ef6:	331c      	adds	r3, #28
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d029      	beq.n	8007f52 <USBD_CDC_DataIn+0x90>
 8007efe:	78fa      	ldrb	r2, [r7, #3]
 8007f00:	6879      	ldr	r1, [r7, #4]
 8007f02:	4613      	mov	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4413      	add	r3, r2
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	440b      	add	r3, r1
 8007f0c:	331c      	adds	r3, #28
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	78f9      	ldrb	r1, [r7, #3]
 8007f12:	68b8      	ldr	r0, [r7, #8]
 8007f14:	460b      	mov	r3, r1
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	440b      	add	r3, r1
 8007f1a:	00db      	lsls	r3, r3, #3
 8007f1c:	4403      	add	r3, r0
 8007f1e:	3338      	adds	r3, #56	; 0x38
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f26:	fb01 f303 	mul.w	r3, r1, r3
 8007f2a:	1ad3      	subs	r3, r2, r3
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d110      	bne.n	8007f52 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007f30:	78fa      	ldrb	r2, [r7, #3]
 8007f32:	6879      	ldr	r1, [r7, #4]
 8007f34:	4613      	mov	r3, r2
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	4413      	add	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	440b      	add	r3, r1
 8007f3e:	331c      	adds	r3, #28
 8007f40:	2200      	movs	r2, #0
 8007f42:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007f44:	78f9      	ldrb	r1, [r7, #3]
 8007f46:	2300      	movs	r3, #0
 8007f48:	2200      	movs	r2, #0
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f001 fdcd 	bl	8009aea <USBD_LL_Transmit>
 8007f50:	e003      	b.n	8007f5a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	e000      	b.n	8007f60 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007f5e:	2302      	movs	r3, #2
  }
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	460b      	mov	r3, r1
 8007f72:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f7a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007f7c:	78fb      	ldrb	r3, [r7, #3]
 8007f7e:	4619      	mov	r1, r3
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f001 fdf8 	bl	8009b76 <USBD_LL_GetRxDataSize>
 8007f86:	4602      	mov	r2, r0
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00d      	beq.n	8007fb4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007fac:	4611      	mov	r1, r2
 8007fae:	4798      	blx	r3

    return USBD_OK;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	e000      	b.n	8007fb6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007fb4:	2302      	movs	r3, #2
  }
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}

08007fbe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b084      	sub	sp, #16
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fcc:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d015      	beq.n	8008004 <USBD_CDC_EP0_RxReady+0x46>
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007fde:	2bff      	cmp	r3, #255	; 0xff
 8007fe0:	d010      	beq.n	8008004 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007ff0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007ff8:	b292      	uxth	r2, r2
 8007ffa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	22ff      	movs	r2, #255	; 0xff
 8008000:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
	...

08008010 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2243      	movs	r2, #67	; 0x43
 800801c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800801e:	4b03      	ldr	r3, [pc, #12]	; (800802c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008020:	4618      	mov	r0, r3
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	bc80      	pop	{r7}
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	20000094 	.word	0x20000094

08008030 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2243      	movs	r2, #67	; 0x43
 800803c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800803e:	4b03      	ldr	r3, [pc, #12]	; (800804c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008040:	4618      	mov	r0, r3
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	bc80      	pop	{r7}
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	20000050 	.word	0x20000050

08008050 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2243      	movs	r2, #67	; 0x43
 800805c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800805e:	4b03      	ldr	r3, [pc, #12]	; (800806c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008060:	4618      	mov	r0, r3
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	bc80      	pop	{r7}
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	200000d8 	.word	0x200000d8

08008070 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	220a      	movs	r2, #10
 800807c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800807e:	4b03      	ldr	r3, [pc, #12]	; (800808c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008080:	4618      	mov	r0, r3
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	bc80      	pop	{r7}
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	2000000c 	.word	0x2000000c

08008090 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800809a:	2302      	movs	r3, #2
 800809c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d005      	beq.n	80080b0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	683a      	ldr	r2, [r7, #0]
 80080a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3714      	adds	r7, #20
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bc80      	pop	{r7}
 80080ba:	4770      	bx	lr

080080bc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80080bc:	b480      	push	{r7}
 80080be:	b087      	sub	sp, #28
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	4613      	mov	r3, r2
 80080c8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080d0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	68ba      	ldr	r2, [r7, #8]
 80080d6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80080da:	88fa      	ldrh	r2, [r7, #6]
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	371c      	adds	r7, #28
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bc80      	pop	{r7}
 80080ec:	4770      	bx	lr

080080ee <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80080ee:	b480      	push	{r7}
 80080f0:	b085      	sub	sp, #20
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
 80080f6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080fe:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	3714      	adds	r7, #20
 800810e:	46bd      	mov	sp, r7
 8008110:	bc80      	pop	{r7}
 8008112:	4770      	bx	lr

08008114 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008122:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800812a:	2b00      	cmp	r3, #0
 800812c:	d01c      	beq.n	8008168 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008134:	2b00      	cmp	r3, #0
 8008136:	d115      	bne.n	8008164 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2201      	movs	r2, #1
 800813c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008156:	b29b      	uxth	r3, r3
 8008158:	2181      	movs	r1, #129	; 0x81
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f001 fcc5 	bl	8009aea <USBD_LL_Transmit>

      return USBD_OK;
 8008160:	2300      	movs	r3, #0
 8008162:	e002      	b.n	800816a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008164:	2301      	movs	r3, #1
 8008166:	e000      	b.n	800816a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008168:	2302      	movs	r3, #2
  }
}
 800816a:	4618      	mov	r0, r3
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b084      	sub	sp, #16
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008180:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008188:	2b00      	cmp	r3, #0
 800818a:	d017      	beq.n	80081bc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	7c1b      	ldrb	r3, [r3, #16]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d109      	bne.n	80081a8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800819a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800819e:	2101      	movs	r1, #1
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f001 fcc5 	bl	8009b30 <USBD_LL_PrepareReceive>
 80081a6:	e007      	b.n	80081b8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081ae:	2340      	movs	r3, #64	; 0x40
 80081b0:	2101      	movs	r1, #1
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f001 fcbc 	bl	8009b30 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	e000      	b.n	80081be <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80081bc:	2302      	movs	r3, #2
  }
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b084      	sub	sp, #16
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	60f8      	str	r0, [r7, #12]
 80081ce:	60b9      	str	r1, [r7, #8]
 80081d0:	4613      	mov	r3, r2
 80081d2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d101      	bne.n	80081de <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80081da:	2302      	movs	r3, #2
 80081dc:	e01a      	b.n	8008214 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d003      	beq.n	80081f0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d003      	beq.n	80081fe <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	68ba      	ldr	r2, [r7, #8]
 80081fa:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	79fa      	ldrb	r2, [r7, #7]
 800820a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f001 fb29 	bl	8009864 <USBD_LL_Init>

  return USBD_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d006      	beq.n	800823e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008238:	2300      	movs	r3, #0
 800823a:	73fb      	strb	r3, [r7, #15]
 800823c:	e001      	b.n	8008242 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800823e:	2302      	movs	r3, #2
 8008240:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008242:	7bfb      	ldrb	r3, [r7, #15]
}
 8008244:	4618      	mov	r0, r3
 8008246:	3714      	adds	r7, #20
 8008248:	46bd      	mov	sp, r7
 800824a:	bc80      	pop	{r7}
 800824c:	4770      	bx	lr

0800824e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b082      	sub	sp, #8
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f001 fb5e 	bl	8009918 <USBD_LL_Start>

  return USBD_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008266:	b480      	push	{r7}
 8008268:	b083      	sub	sp, #12
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	bc80      	pop	{r7}
 8008278:	4770      	bx	lr

0800827a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b084      	sub	sp, #16
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	460b      	mov	r3, r1
 8008284:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008286:	2302      	movs	r3, #2
 8008288:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00c      	beq.n	80082ae <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	78fa      	ldrb	r2, [r7, #3]
 800829e:	4611      	mov	r1, r2
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	4798      	blx	r3
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d101      	bne.n	80082ae <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80082ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	460b      	mov	r3, r1
 80082c2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	78fa      	ldrb	r2, [r7, #3]
 80082ce:	4611      	mov	r1, r2
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	4798      	blx	r3

  return USBD_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3708      	adds	r7, #8
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b082      	sub	sp, #8
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
 80082e6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	4618      	mov	r0, r3
 80082f2:	f000 fed8 	bl	80090a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008304:	461a      	mov	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008312:	f003 031f 	and.w	r3, r3, #31
 8008316:	2b02      	cmp	r3, #2
 8008318:	d016      	beq.n	8008348 <USBD_LL_SetupStage+0x6a>
 800831a:	2b02      	cmp	r3, #2
 800831c:	d81c      	bhi.n	8008358 <USBD_LL_SetupStage+0x7a>
 800831e:	2b00      	cmp	r3, #0
 8008320:	d002      	beq.n	8008328 <USBD_LL_SetupStage+0x4a>
 8008322:	2b01      	cmp	r3, #1
 8008324:	d008      	beq.n	8008338 <USBD_LL_SetupStage+0x5a>
 8008326:	e017      	b.n	8008358 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800832e:	4619      	mov	r1, r3
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 f9cb 	bl	80086cc <USBD_StdDevReq>
      break;
 8008336:	e01a      	b.n	800836e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800833e:	4619      	mov	r1, r3
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fa2d 	bl	80087a0 <USBD_StdItfReq>
      break;
 8008346:	e012      	b.n	800836e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800834e:	4619      	mov	r1, r3
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 fa6d 	bl	8008830 <USBD_StdEPReq>
      break;
 8008356:	e00a      	b.n	800836e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800835e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008362:	b2db      	uxtb	r3, r3
 8008364:	4619      	mov	r1, r3
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f001 fb36 	bl	80099d8 <USBD_LL_StallEP>
      break;
 800836c:	bf00      	nop
  }

  return USBD_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	460b      	mov	r3, r1
 8008382:	607a      	str	r2, [r7, #4]
 8008384:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008386:	7afb      	ldrb	r3, [r7, #11]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d14b      	bne.n	8008424 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008392:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800839a:	2b03      	cmp	r3, #3
 800839c:	d134      	bne.n	8008408 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	68da      	ldr	r2, [r3, #12]
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d919      	bls.n	80083de <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	68da      	ldr	r2, [r3, #12]
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	1ad2      	subs	r2, r2, r3
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	68da      	ldr	r2, [r3, #12]
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d203      	bcs.n	80083cc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	e002      	b.n	80083d2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	461a      	mov	r2, r3
 80083d4:	6879      	ldr	r1, [r7, #4]
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	f000 ff57 	bl	800928a <USBD_CtlContinueRx>
 80083dc:	e038      	b.n	8008450 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00a      	beq.n	8008400 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80083f0:	2b03      	cmp	r3, #3
 80083f2:	d105      	bne.n	8008400 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f000 ff54 	bl	80092ae <USBD_CtlSendStatus>
 8008406:	e023      	b.n	8008450 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800840e:	2b05      	cmp	r3, #5
 8008410:	d11e      	bne.n	8008450 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2200      	movs	r2, #0
 8008416:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800841a:	2100      	movs	r1, #0
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	f001 fadb 	bl	80099d8 <USBD_LL_StallEP>
 8008422:	e015      	b.n	8008450 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800842a:	699b      	ldr	r3, [r3, #24]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00d      	beq.n	800844c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008436:	2b03      	cmp	r3, #3
 8008438:	d108      	bne.n	800844c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	7afa      	ldrb	r2, [r7, #11]
 8008444:	4611      	mov	r1, r2
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	4798      	blx	r3
 800844a:	e001      	b.n	8008450 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800844c:	2302      	movs	r3, #2
 800844e:	e000      	b.n	8008452 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3718      	adds	r7, #24
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b086      	sub	sp, #24
 800845e:	af00      	add	r7, sp, #0
 8008460:	60f8      	str	r0, [r7, #12]
 8008462:	460b      	mov	r3, r1
 8008464:	607a      	str	r2, [r7, #4]
 8008466:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008468:	7afb      	ldrb	r3, [r7, #11]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d17f      	bne.n	800856e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	3314      	adds	r3, #20
 8008472:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800847a:	2b02      	cmp	r3, #2
 800847c:	d15c      	bne.n	8008538 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	68da      	ldr	r2, [r3, #12]
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	429a      	cmp	r2, r3
 8008488:	d915      	bls.n	80084b6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	68da      	ldr	r2, [r3, #12]
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	1ad2      	subs	r2, r2, r3
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	b29b      	uxth	r3, r3
 800849e:	461a      	mov	r2, r3
 80084a0:	6879      	ldr	r1, [r7, #4]
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f000 fec1 	bl	800922a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084a8:	2300      	movs	r3, #0
 80084aa:	2200      	movs	r2, #0
 80084ac:	2100      	movs	r1, #0
 80084ae:	68f8      	ldr	r0, [r7, #12]
 80084b0:	f001 fb3e 	bl	8009b30 <USBD_LL_PrepareReceive>
 80084b4:	e04e      	b.n	8008554 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	697a      	ldr	r2, [r7, #20]
 80084bc:	6912      	ldr	r2, [r2, #16]
 80084be:	fbb3 f1f2 	udiv	r1, r3, r2
 80084c2:	fb01 f202 	mul.w	r2, r1, r2
 80084c6:	1a9b      	subs	r3, r3, r2
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d11c      	bne.n	8008506 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	689a      	ldr	r2, [r3, #8]
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d316      	bcc.n	8008506 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	689a      	ldr	r2, [r3, #8]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d20f      	bcs.n	8008506 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80084e6:	2200      	movs	r2, #0
 80084e8:	2100      	movs	r1, #0
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f000 fe9d 	bl	800922a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084f8:	2300      	movs	r3, #0
 80084fa:	2200      	movs	r2, #0
 80084fc:	2100      	movs	r1, #0
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f001 fb16 	bl	8009b30 <USBD_LL_PrepareReceive>
 8008504:	e026      	b.n	8008554 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00a      	beq.n	8008528 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008518:	2b03      	cmp	r3, #3
 800851a:	d105      	bne.n	8008528 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008528:	2180      	movs	r1, #128	; 0x80
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f001 fa54 	bl	80099d8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f000 fecf 	bl	80092d4 <USBD_CtlReceiveStatus>
 8008536:	e00d      	b.n	8008554 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800853e:	2b04      	cmp	r3, #4
 8008540:	d004      	beq.n	800854c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008548:	2b00      	cmp	r3, #0
 800854a:	d103      	bne.n	8008554 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800854c:	2180      	movs	r1, #128	; 0x80
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f001 fa42 	bl	80099d8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800855a:	2b01      	cmp	r3, #1
 800855c:	d11d      	bne.n	800859a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f7ff fe81 	bl	8008266 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2200      	movs	r2, #0
 8008568:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800856c:	e015      	b.n	800859a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008574:	695b      	ldr	r3, [r3, #20]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00d      	beq.n	8008596 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008580:	2b03      	cmp	r3, #3
 8008582:	d108      	bne.n	8008596 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800858a:	695b      	ldr	r3, [r3, #20]
 800858c:	7afa      	ldrb	r2, [r7, #11]
 800858e:	4611      	mov	r1, r2
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	4798      	blx	r3
 8008594:	e001      	b.n	800859a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008596:	2302      	movs	r3, #2
 8008598:	e000      	b.n	800859c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3718      	adds	r7, #24
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085ac:	2340      	movs	r3, #64	; 0x40
 80085ae:	2200      	movs	r2, #0
 80085b0:	2100      	movs	r1, #0
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f001 f9cb 	bl	800994e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2240      	movs	r2, #64	; 0x40
 80085c4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085c8:	2340      	movs	r3, #64	; 0x40
 80085ca:	2200      	movs	r2, #0
 80085cc:	2180      	movs	r1, #128	; 0x80
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f001 f9bd 	bl	800994e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2240      	movs	r2, #64	; 0x40
 80085de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008604:	2b00      	cmp	r3, #0
 8008606:	d009      	beq.n	800861c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	6852      	ldr	r2, [r2, #4]
 8008614:	b2d2      	uxtb	r2, r2
 8008616:	4611      	mov	r1, r2
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	4798      	blx	r3
  }

  return USBD_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008626:	b480      	push	{r7}
 8008628:	b083      	sub	sp, #12
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	460b      	mov	r3, r1
 8008630:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	78fa      	ldrb	r2, [r7, #3]
 8008636:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	370c      	adds	r7, #12
 800863e:	46bd      	mov	sp, r7
 8008640:	bc80      	pop	{r7}
 8008642:	4770      	bx	lr

08008644 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2204      	movs	r2, #4
 800865c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008660:	2300      	movs	r3, #0
}
 8008662:	4618      	mov	r0, r3
 8008664:	370c      	adds	r7, #12
 8008666:	46bd      	mov	sp, r7
 8008668:	bc80      	pop	{r7}
 800866a:	4770      	bx	lr

0800866c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800867a:	2b04      	cmp	r3, #4
 800867c:	d105      	bne.n	800868a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	bc80      	pop	{r7}
 8008694:	4770      	bx	lr

08008696 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b082      	sub	sp, #8
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086a4:	2b03      	cmp	r3, #3
 80086a6:	d10b      	bne.n	80086c0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ae:	69db      	ldr	r3, [r3, #28]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d005      	beq.n	80086c0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ba:	69db      	ldr	r3, [r3, #28]
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
	...

080086cc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086e2:	2b40      	cmp	r3, #64	; 0x40
 80086e4:	d005      	beq.n	80086f2 <USBD_StdDevReq+0x26>
 80086e6:	2b40      	cmp	r3, #64	; 0x40
 80086e8:	d84f      	bhi.n	800878a <USBD_StdDevReq+0xbe>
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d009      	beq.n	8008702 <USBD_StdDevReq+0x36>
 80086ee:	2b20      	cmp	r3, #32
 80086f0:	d14b      	bne.n	800878a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	6839      	ldr	r1, [r7, #0]
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	4798      	blx	r3
      break;
 8008700:	e048      	b.n	8008794 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	785b      	ldrb	r3, [r3, #1]
 8008706:	2b09      	cmp	r3, #9
 8008708:	d839      	bhi.n	800877e <USBD_StdDevReq+0xb2>
 800870a:	a201      	add	r2, pc, #4	; (adr r2, 8008710 <USBD_StdDevReq+0x44>)
 800870c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008710:	08008761 	.word	0x08008761
 8008714:	08008775 	.word	0x08008775
 8008718:	0800877f 	.word	0x0800877f
 800871c:	0800876b 	.word	0x0800876b
 8008720:	0800877f 	.word	0x0800877f
 8008724:	08008743 	.word	0x08008743
 8008728:	08008739 	.word	0x08008739
 800872c:	0800877f 	.word	0x0800877f
 8008730:	08008757 	.word	0x08008757
 8008734:	0800874d 	.word	0x0800874d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008738:	6839      	ldr	r1, [r7, #0]
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 f9dc 	bl	8008af8 <USBD_GetDescriptor>
          break;
 8008740:	e022      	b.n	8008788 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008742:	6839      	ldr	r1, [r7, #0]
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 fb3f 	bl	8008dc8 <USBD_SetAddress>
          break;
 800874a:	e01d      	b.n	8008788 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800874c:	6839      	ldr	r1, [r7, #0]
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 fb7e 	bl	8008e50 <USBD_SetConfig>
          break;
 8008754:	e018      	b.n	8008788 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008756:	6839      	ldr	r1, [r7, #0]
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 fc07 	bl	8008f6c <USBD_GetConfig>
          break;
 800875e:	e013      	b.n	8008788 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fc37 	bl	8008fd6 <USBD_GetStatus>
          break;
 8008768:	e00e      	b.n	8008788 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800876a:	6839      	ldr	r1, [r7, #0]
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 fc65 	bl	800903c <USBD_SetFeature>
          break;
 8008772:	e009      	b.n	8008788 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008774:	6839      	ldr	r1, [r7, #0]
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 fc74 	bl	8009064 <USBD_ClrFeature>
          break;
 800877c:	e004      	b.n	8008788 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800877e:	6839      	ldr	r1, [r7, #0]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 fccc 	bl	800911e <USBD_CtlError>
          break;
 8008786:	bf00      	nop
      }
      break;
 8008788:	e004      	b.n	8008794 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800878a:	6839      	ldr	r1, [r7, #0]
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fcc6 	bl	800911e <USBD_CtlError>
      break;
 8008792:	bf00      	nop
  }

  return ret;
 8008794:	7bfb      	ldrb	r3, [r7, #15]
}
 8008796:	4618      	mov	r0, r3
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop

080087a0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087aa:	2300      	movs	r3, #0
 80087ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087b6:	2b40      	cmp	r3, #64	; 0x40
 80087b8:	d005      	beq.n	80087c6 <USBD_StdItfReq+0x26>
 80087ba:	2b40      	cmp	r3, #64	; 0x40
 80087bc:	d82e      	bhi.n	800881c <USBD_StdItfReq+0x7c>
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d001      	beq.n	80087c6 <USBD_StdItfReq+0x26>
 80087c2:	2b20      	cmp	r3, #32
 80087c4:	d12a      	bne.n	800881c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087cc:	3b01      	subs	r3, #1
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d81d      	bhi.n	800880e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	889b      	ldrh	r3, [r3, #4]
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d813      	bhi.n	8008804 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	6839      	ldr	r1, [r7, #0]
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	4798      	blx	r3
 80087ea:	4603      	mov	r3, r0
 80087ec:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	88db      	ldrh	r3, [r3, #6]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d110      	bne.n	8008818 <USBD_StdItfReq+0x78>
 80087f6:	7bfb      	ldrb	r3, [r7, #15]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10d      	bne.n	8008818 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 fd56 	bl	80092ae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008802:	e009      	b.n	8008818 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008804:	6839      	ldr	r1, [r7, #0]
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fc89 	bl	800911e <USBD_CtlError>
          break;
 800880c:	e004      	b.n	8008818 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fc84 	bl	800911e <USBD_CtlError>
          break;
 8008816:	e000      	b.n	800881a <USBD_StdItfReq+0x7a>
          break;
 8008818:	bf00      	nop
      }
      break;
 800881a:	e004      	b.n	8008826 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800881c:	6839      	ldr	r1, [r7, #0]
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 fc7d 	bl	800911e <USBD_CtlError>
      break;
 8008824:	bf00      	nop
  }

  return USBD_OK;
 8008826:	2300      	movs	r3, #0
}
 8008828:	4618      	mov	r0, r3
 800882a:	3710      	adds	r7, #16
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800883a:	2300      	movs	r3, #0
 800883c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	889b      	ldrh	r3, [r3, #4]
 8008842:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800884c:	2b40      	cmp	r3, #64	; 0x40
 800884e:	d007      	beq.n	8008860 <USBD_StdEPReq+0x30>
 8008850:	2b40      	cmp	r3, #64	; 0x40
 8008852:	f200 8146 	bhi.w	8008ae2 <USBD_StdEPReq+0x2b2>
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00a      	beq.n	8008870 <USBD_StdEPReq+0x40>
 800885a:	2b20      	cmp	r3, #32
 800885c:	f040 8141 	bne.w	8008ae2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	6839      	ldr	r1, [r7, #0]
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	4798      	blx	r3
      break;
 800886e:	e13d      	b.n	8008aec <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008878:	2b20      	cmp	r3, #32
 800887a:	d10a      	bne.n	8008892 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	6839      	ldr	r1, [r7, #0]
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	4798      	blx	r3
 800888a:	4603      	mov	r3, r0
 800888c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800888e:	7bfb      	ldrb	r3, [r7, #15]
 8008890:	e12d      	b.n	8008aee <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	785b      	ldrb	r3, [r3, #1]
 8008896:	2b03      	cmp	r3, #3
 8008898:	d007      	beq.n	80088aa <USBD_StdEPReq+0x7a>
 800889a:	2b03      	cmp	r3, #3
 800889c:	f300 811b 	bgt.w	8008ad6 <USBD_StdEPReq+0x2a6>
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d072      	beq.n	800898a <USBD_StdEPReq+0x15a>
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d03a      	beq.n	800891e <USBD_StdEPReq+0xee>
 80088a8:	e115      	b.n	8008ad6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	d002      	beq.n	80088ba <USBD_StdEPReq+0x8a>
 80088b4:	2b03      	cmp	r3, #3
 80088b6:	d015      	beq.n	80088e4 <USBD_StdEPReq+0xb4>
 80088b8:	e02b      	b.n	8008912 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088ba:	7bbb      	ldrb	r3, [r7, #14]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00c      	beq.n	80088da <USBD_StdEPReq+0xaa>
 80088c0:	7bbb      	ldrb	r3, [r7, #14]
 80088c2:	2b80      	cmp	r3, #128	; 0x80
 80088c4:	d009      	beq.n	80088da <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80088c6:	7bbb      	ldrb	r3, [r7, #14]
 80088c8:	4619      	mov	r1, r3
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f001 f884 	bl	80099d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80088d0:	2180      	movs	r1, #128	; 0x80
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f001 f880 	bl	80099d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80088d8:	e020      	b.n	800891c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80088da:	6839      	ldr	r1, [r7, #0]
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 fc1e 	bl	800911e <USBD_CtlError>
              break;
 80088e2:	e01b      	b.n	800891c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	885b      	ldrh	r3, [r3, #2]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d10e      	bne.n	800890a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80088ec:	7bbb      	ldrb	r3, [r7, #14]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00b      	beq.n	800890a <USBD_StdEPReq+0xda>
 80088f2:	7bbb      	ldrb	r3, [r7, #14]
 80088f4:	2b80      	cmp	r3, #128	; 0x80
 80088f6:	d008      	beq.n	800890a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	88db      	ldrh	r3, [r3, #6]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d104      	bne.n	800890a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008900:	7bbb      	ldrb	r3, [r7, #14]
 8008902:	4619      	mov	r1, r3
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f001 f867 	bl	80099d8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fccf 	bl	80092ae <USBD_CtlSendStatus>

              break;
 8008910:	e004      	b.n	800891c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008912:	6839      	ldr	r1, [r7, #0]
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fc02 	bl	800911e <USBD_CtlError>
              break;
 800891a:	bf00      	nop
          }
          break;
 800891c:	e0e0      	b.n	8008ae0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008924:	2b02      	cmp	r3, #2
 8008926:	d002      	beq.n	800892e <USBD_StdEPReq+0xfe>
 8008928:	2b03      	cmp	r3, #3
 800892a:	d015      	beq.n	8008958 <USBD_StdEPReq+0x128>
 800892c:	e026      	b.n	800897c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800892e:	7bbb      	ldrb	r3, [r7, #14]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d00c      	beq.n	800894e <USBD_StdEPReq+0x11e>
 8008934:	7bbb      	ldrb	r3, [r7, #14]
 8008936:	2b80      	cmp	r3, #128	; 0x80
 8008938:	d009      	beq.n	800894e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800893a:	7bbb      	ldrb	r3, [r7, #14]
 800893c:	4619      	mov	r1, r3
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f001 f84a 	bl	80099d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008944:	2180      	movs	r1, #128	; 0x80
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f001 f846 	bl	80099d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800894c:	e01c      	b.n	8008988 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800894e:	6839      	ldr	r1, [r7, #0]
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 fbe4 	bl	800911e <USBD_CtlError>
              break;
 8008956:	e017      	b.n	8008988 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	885b      	ldrh	r3, [r3, #2]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d112      	bne.n	8008986 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008960:	7bbb      	ldrb	r3, [r7, #14]
 8008962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008966:	2b00      	cmp	r3, #0
 8008968:	d004      	beq.n	8008974 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800896a:	7bbb      	ldrb	r3, [r7, #14]
 800896c:	4619      	mov	r1, r3
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f001 f851 	bl	8009a16 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fc9a 	bl	80092ae <USBD_CtlSendStatus>
              }
              break;
 800897a:	e004      	b.n	8008986 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fbcd 	bl	800911e <USBD_CtlError>
              break;
 8008984:	e000      	b.n	8008988 <USBD_StdEPReq+0x158>
              break;
 8008986:	bf00      	nop
          }
          break;
 8008988:	e0aa      	b.n	8008ae0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008990:	2b02      	cmp	r3, #2
 8008992:	d002      	beq.n	800899a <USBD_StdEPReq+0x16a>
 8008994:	2b03      	cmp	r3, #3
 8008996:	d032      	beq.n	80089fe <USBD_StdEPReq+0x1ce>
 8008998:	e097      	b.n	8008aca <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800899a:	7bbb      	ldrb	r3, [r7, #14]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d007      	beq.n	80089b0 <USBD_StdEPReq+0x180>
 80089a0:	7bbb      	ldrb	r3, [r7, #14]
 80089a2:	2b80      	cmp	r3, #128	; 0x80
 80089a4:	d004      	beq.n	80089b0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80089a6:	6839      	ldr	r1, [r7, #0]
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 fbb8 	bl	800911e <USBD_CtlError>
                break;
 80089ae:	e091      	b.n	8008ad4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	da0b      	bge.n	80089d0 <USBD_StdEPReq+0x1a0>
 80089b8:	7bbb      	ldrb	r3, [r7, #14]
 80089ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089be:	4613      	mov	r3, r2
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	4413      	add	r3, r2
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	3310      	adds	r3, #16
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	4413      	add	r3, r2
 80089cc:	3304      	adds	r3, #4
 80089ce:	e00b      	b.n	80089e8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80089d0:	7bbb      	ldrb	r3, [r7, #14]
 80089d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089d6:	4613      	mov	r3, r2
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	4413      	add	r3, r2
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	4413      	add	r3, r2
 80089e6:	3304      	adds	r3, #4
 80089e8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	2200      	movs	r2, #0
 80089ee:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	2202      	movs	r2, #2
 80089f4:	4619      	mov	r1, r3
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fbfb 	bl	80091f2 <USBD_CtlSendData>
              break;
 80089fc:	e06a      	b.n	8008ad4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80089fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	da11      	bge.n	8008a2a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a06:	7bbb      	ldrb	r3, [r7, #14]
 8008a08:	f003 020f 	and.w	r2, r3, #15
 8008a0c:	6879      	ldr	r1, [r7, #4]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4413      	add	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	440b      	add	r3, r1
 8008a18:	3318      	adds	r3, #24
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d117      	bne.n	8008a50 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008a20:	6839      	ldr	r1, [r7, #0]
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 fb7b 	bl	800911e <USBD_CtlError>
                  break;
 8008a28:	e054      	b.n	8008ad4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a2a:	7bbb      	ldrb	r3, [r7, #14]
 8008a2c:	f003 020f 	and.w	r2, r3, #15
 8008a30:	6879      	ldr	r1, [r7, #4]
 8008a32:	4613      	mov	r3, r2
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	4413      	add	r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	440b      	add	r3, r1
 8008a3c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d104      	bne.n	8008a50 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008a46:	6839      	ldr	r1, [r7, #0]
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 fb68 	bl	800911e <USBD_CtlError>
                  break;
 8008a4e:	e041      	b.n	8008ad4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	da0b      	bge.n	8008a70 <USBD_StdEPReq+0x240>
 8008a58:	7bbb      	ldrb	r3, [r7, #14]
 8008a5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a5e:	4613      	mov	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4413      	add	r3, r2
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	3310      	adds	r3, #16
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	3304      	adds	r3, #4
 8008a6e:	e00b      	b.n	8008a88 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a70:	7bbb      	ldrb	r3, [r7, #14]
 8008a72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a76:	4613      	mov	r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	4413      	add	r3, r2
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	4413      	add	r3, r2
 8008a86:	3304      	adds	r3, #4
 8008a88:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008a8a:	7bbb      	ldrb	r3, [r7, #14]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d002      	beq.n	8008a96 <USBD_StdEPReq+0x266>
 8008a90:	7bbb      	ldrb	r3, [r7, #14]
 8008a92:	2b80      	cmp	r3, #128	; 0x80
 8008a94:	d103      	bne.n	8008a9e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	601a      	str	r2, [r3, #0]
 8008a9c:	e00e      	b.n	8008abc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008a9e:	7bbb      	ldrb	r3, [r7, #14]
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 ffd6 	bl	8009a54 <USBD_LL_IsStallEP>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d003      	beq.n	8008ab6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	601a      	str	r2, [r3, #0]
 8008ab4:	e002      	b.n	8008abc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	2202      	movs	r2, #2
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 fb95 	bl	80091f2 <USBD_CtlSendData>
              break;
 8008ac8:	e004      	b.n	8008ad4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008aca:	6839      	ldr	r1, [r7, #0]
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 fb26 	bl	800911e <USBD_CtlError>
              break;
 8008ad2:	bf00      	nop
          }
          break;
 8008ad4:	e004      	b.n	8008ae0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008ad6:	6839      	ldr	r1, [r7, #0]
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 fb20 	bl	800911e <USBD_CtlError>
          break;
 8008ade:	bf00      	nop
      }
      break;
 8008ae0:	e004      	b.n	8008aec <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008ae2:	6839      	ldr	r1, [r7, #0]
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fb1a 	bl	800911e <USBD_CtlError>
      break;
 8008aea:	bf00      	nop
  }

  return ret;
 8008aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
	...

08008af8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b02:	2300      	movs	r3, #0
 8008b04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b06:	2300      	movs	r3, #0
 8008b08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	885b      	ldrh	r3, [r3, #2]
 8008b12:	0a1b      	lsrs	r3, r3, #8
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	3b01      	subs	r3, #1
 8008b18:	2b06      	cmp	r3, #6
 8008b1a:	f200 8128 	bhi.w	8008d6e <USBD_GetDescriptor+0x276>
 8008b1e:	a201      	add	r2, pc, #4	; (adr r2, 8008b24 <USBD_GetDescriptor+0x2c>)
 8008b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b24:	08008b41 	.word	0x08008b41
 8008b28:	08008b59 	.word	0x08008b59
 8008b2c:	08008b99 	.word	0x08008b99
 8008b30:	08008d6f 	.word	0x08008d6f
 8008b34:	08008d6f 	.word	0x08008d6f
 8008b38:	08008d0f 	.word	0x08008d0f
 8008b3c:	08008d3b 	.word	0x08008d3b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	7c12      	ldrb	r2, [r2, #16]
 8008b4c:	f107 0108 	add.w	r1, r7, #8
 8008b50:	4610      	mov	r0, r2
 8008b52:	4798      	blx	r3
 8008b54:	60f8      	str	r0, [r7, #12]
      break;
 8008b56:	e112      	b.n	8008d7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	7c1b      	ldrb	r3, [r3, #16]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10d      	bne.n	8008b7c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b68:	f107 0208 	add.w	r2, r7, #8
 8008b6c:	4610      	mov	r0, r2
 8008b6e:	4798      	blx	r3
 8008b70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	3301      	adds	r3, #1
 8008b76:	2202      	movs	r2, #2
 8008b78:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008b7a:	e100      	b.n	8008d7e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b84:	f107 0208 	add.w	r2, r7, #8
 8008b88:	4610      	mov	r0, r2
 8008b8a:	4798      	blx	r3
 8008b8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	3301      	adds	r3, #1
 8008b92:	2202      	movs	r2, #2
 8008b94:	701a      	strb	r2, [r3, #0]
      break;
 8008b96:	e0f2      	b.n	8008d7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	885b      	ldrh	r3, [r3, #2]
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	2b05      	cmp	r3, #5
 8008ba0:	f200 80ac 	bhi.w	8008cfc <USBD_GetDescriptor+0x204>
 8008ba4:	a201      	add	r2, pc, #4	; (adr r2, 8008bac <USBD_GetDescriptor+0xb4>)
 8008ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008baa:	bf00      	nop
 8008bac:	08008bc5 	.word	0x08008bc5
 8008bb0:	08008bf9 	.word	0x08008bf9
 8008bb4:	08008c2d 	.word	0x08008c2d
 8008bb8:	08008c61 	.word	0x08008c61
 8008bbc:	08008c95 	.word	0x08008c95
 8008bc0:	08008cc9 	.word	0x08008cc9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d00b      	beq.n	8008be8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	7c12      	ldrb	r2, [r2, #16]
 8008bdc:	f107 0108 	add.w	r1, r7, #8
 8008be0:	4610      	mov	r0, r2
 8008be2:	4798      	blx	r3
 8008be4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008be6:	e091      	b.n	8008d0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008be8:	6839      	ldr	r1, [r7, #0]
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 fa97 	bl	800911e <USBD_CtlError>
            err++;
 8008bf0:	7afb      	ldrb	r3, [r7, #11]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	72fb      	strb	r3, [r7, #11]
          break;
 8008bf6:	e089      	b.n	8008d0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d00b      	beq.n	8008c1c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	7c12      	ldrb	r2, [r2, #16]
 8008c10:	f107 0108 	add.w	r1, r7, #8
 8008c14:	4610      	mov	r0, r2
 8008c16:	4798      	blx	r3
 8008c18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c1a:	e077      	b.n	8008d0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c1c:	6839      	ldr	r1, [r7, #0]
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fa7d 	bl	800911e <USBD_CtlError>
            err++;
 8008c24:	7afb      	ldrb	r3, [r7, #11]
 8008c26:	3301      	adds	r3, #1
 8008c28:	72fb      	strb	r3, [r7, #11]
          break;
 8008c2a:	e06f      	b.n	8008d0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d00b      	beq.n	8008c50 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	7c12      	ldrb	r2, [r2, #16]
 8008c44:	f107 0108 	add.w	r1, r7, #8
 8008c48:	4610      	mov	r0, r2
 8008c4a:	4798      	blx	r3
 8008c4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c4e:	e05d      	b.n	8008d0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c50:	6839      	ldr	r1, [r7, #0]
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 fa63 	bl	800911e <USBD_CtlError>
            err++;
 8008c58:	7afb      	ldrb	r3, [r7, #11]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c5e:	e055      	b.n	8008d0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00b      	beq.n	8008c84 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c72:	691b      	ldr	r3, [r3, #16]
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	7c12      	ldrb	r2, [r2, #16]
 8008c78:	f107 0108 	add.w	r1, r7, #8
 8008c7c:	4610      	mov	r0, r2
 8008c7e:	4798      	blx	r3
 8008c80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c82:	e043      	b.n	8008d0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c84:	6839      	ldr	r1, [r7, #0]
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 fa49 	bl	800911e <USBD_CtlError>
            err++;
 8008c8c:	7afb      	ldrb	r3, [r7, #11]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	72fb      	strb	r3, [r7, #11]
          break;
 8008c92:	e03b      	b.n	8008d0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c9a:	695b      	ldr	r3, [r3, #20]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00b      	beq.n	8008cb8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ca6:	695b      	ldr	r3, [r3, #20]
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	7c12      	ldrb	r2, [r2, #16]
 8008cac:	f107 0108 	add.w	r1, r7, #8
 8008cb0:	4610      	mov	r0, r2
 8008cb2:	4798      	blx	r3
 8008cb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cb6:	e029      	b.n	8008d0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cb8:	6839      	ldr	r1, [r7, #0]
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 fa2f 	bl	800911e <USBD_CtlError>
            err++;
 8008cc0:	7afb      	ldrb	r3, [r7, #11]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	72fb      	strb	r3, [r7, #11]
          break;
 8008cc6:	e021      	b.n	8008d0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cce:	699b      	ldr	r3, [r3, #24]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00b      	beq.n	8008cec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cda:	699b      	ldr	r3, [r3, #24]
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	7c12      	ldrb	r2, [r2, #16]
 8008ce0:	f107 0108 	add.w	r1, r7, #8
 8008ce4:	4610      	mov	r0, r2
 8008ce6:	4798      	blx	r3
 8008ce8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cea:	e00f      	b.n	8008d0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cec:	6839      	ldr	r1, [r7, #0]
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 fa15 	bl	800911e <USBD_CtlError>
            err++;
 8008cf4:	7afb      	ldrb	r3, [r7, #11]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	72fb      	strb	r3, [r7, #11]
          break;
 8008cfa:	e007      	b.n	8008d0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008cfc:	6839      	ldr	r1, [r7, #0]
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 fa0d 	bl	800911e <USBD_CtlError>
          err++;
 8008d04:	7afb      	ldrb	r3, [r7, #11]
 8008d06:	3301      	adds	r3, #1
 8008d08:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008d0a:	e038      	b.n	8008d7e <USBD_GetDescriptor+0x286>
 8008d0c:	e037      	b.n	8008d7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	7c1b      	ldrb	r3, [r3, #16]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d109      	bne.n	8008d2a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d1e:	f107 0208 	add.w	r2, r7, #8
 8008d22:	4610      	mov	r0, r2
 8008d24:	4798      	blx	r3
 8008d26:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d28:	e029      	b.n	8008d7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d2a:	6839      	ldr	r1, [r7, #0]
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 f9f6 	bl	800911e <USBD_CtlError>
        err++;
 8008d32:	7afb      	ldrb	r3, [r7, #11]
 8008d34:	3301      	adds	r3, #1
 8008d36:	72fb      	strb	r3, [r7, #11]
      break;
 8008d38:	e021      	b.n	8008d7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	7c1b      	ldrb	r3, [r3, #16]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d10d      	bne.n	8008d5e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d4a:	f107 0208 	add.w	r2, r7, #8
 8008d4e:	4610      	mov	r0, r2
 8008d50:	4798      	blx	r3
 8008d52:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	3301      	adds	r3, #1
 8008d58:	2207      	movs	r2, #7
 8008d5a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d5c:	e00f      	b.n	8008d7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d5e:	6839      	ldr	r1, [r7, #0]
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 f9dc 	bl	800911e <USBD_CtlError>
        err++;
 8008d66:	7afb      	ldrb	r3, [r7, #11]
 8008d68:	3301      	adds	r3, #1
 8008d6a:	72fb      	strb	r3, [r7, #11]
      break;
 8008d6c:	e007      	b.n	8008d7e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008d6e:	6839      	ldr	r1, [r7, #0]
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 f9d4 	bl	800911e <USBD_CtlError>
      err++;
 8008d76:	7afb      	ldrb	r3, [r7, #11]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	72fb      	strb	r3, [r7, #11]
      break;
 8008d7c:	bf00      	nop
  }

  if (err != 0U)
 8008d7e:	7afb      	ldrb	r3, [r7, #11]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d11c      	bne.n	8008dbe <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008d84:	893b      	ldrh	r3, [r7, #8]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d011      	beq.n	8008dae <USBD_GetDescriptor+0x2b6>
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	88db      	ldrh	r3, [r3, #6]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00d      	beq.n	8008dae <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	88da      	ldrh	r2, [r3, #6]
 8008d96:	893b      	ldrh	r3, [r7, #8]
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	bf28      	it	cs
 8008d9c:	4613      	movcs	r3, r2
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008da2:	893b      	ldrh	r3, [r7, #8]
 8008da4:	461a      	mov	r2, r3
 8008da6:	68f9      	ldr	r1, [r7, #12]
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 fa22 	bl	80091f2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	88db      	ldrh	r3, [r3, #6]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d104      	bne.n	8008dc0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fa79 	bl	80092ae <USBD_CtlSendStatus>
 8008dbc:	e000      	b.n	8008dc0 <USBD_GetDescriptor+0x2c8>
    return;
 8008dbe:	bf00      	nop
    }
  }
}
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop

08008dc8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	889b      	ldrh	r3, [r3, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d130      	bne.n	8008e3c <USBD_SetAddress+0x74>
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	88db      	ldrh	r3, [r3, #6]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d12c      	bne.n	8008e3c <USBD_SetAddress+0x74>
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	885b      	ldrh	r3, [r3, #2]
 8008de6:	2b7f      	cmp	r3, #127	; 0x7f
 8008de8:	d828      	bhi.n	8008e3c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	885b      	ldrh	r3, [r3, #2]
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008df4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dfc:	2b03      	cmp	r3, #3
 8008dfe:	d104      	bne.n	8008e0a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008e00:	6839      	ldr	r1, [r7, #0]
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 f98b 	bl	800911e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e08:	e01d      	b.n	8008e46 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	7bfa      	ldrb	r2, [r7, #15]
 8008e0e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
 8008e14:	4619      	mov	r1, r3
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 fe48 	bl	8009aac <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 fa46 	bl	80092ae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e22:	7bfb      	ldrb	r3, [r7, #15]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d004      	beq.n	8008e32 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2202      	movs	r2, #2
 8008e2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e30:	e009      	b.n	8008e46 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2201      	movs	r2, #1
 8008e36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e3a:	e004      	b.n	8008e46 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008e3c:	6839      	ldr	r1, [r7, #0]
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 f96d 	bl	800911e <USBD_CtlError>
  }
}
 8008e44:	bf00      	nop
 8008e46:	bf00      	nop
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
	...

08008e50 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	885b      	ldrh	r3, [r3, #2]
 8008e5e:	b2da      	uxtb	r2, r3
 8008e60:	4b41      	ldr	r3, [pc, #260]	; (8008f68 <USBD_SetConfig+0x118>)
 8008e62:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008e64:	4b40      	ldr	r3, [pc, #256]	; (8008f68 <USBD_SetConfig+0x118>)
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d904      	bls.n	8008e76 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008e6c:	6839      	ldr	r1, [r7, #0]
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f955 	bl	800911e <USBD_CtlError>
 8008e74:	e075      	b.n	8008f62 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e7c:	2b02      	cmp	r3, #2
 8008e7e:	d002      	beq.n	8008e86 <USBD_SetConfig+0x36>
 8008e80:	2b03      	cmp	r3, #3
 8008e82:	d023      	beq.n	8008ecc <USBD_SetConfig+0x7c>
 8008e84:	e062      	b.n	8008f4c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008e86:	4b38      	ldr	r3, [pc, #224]	; (8008f68 <USBD_SetConfig+0x118>)
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d01a      	beq.n	8008ec4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008e8e:	4b36      	ldr	r3, [pc, #216]	; (8008f68 <USBD_SetConfig+0x118>)
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	461a      	mov	r2, r3
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2203      	movs	r2, #3
 8008e9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008ea0:	4b31      	ldr	r3, [pc, #196]	; (8008f68 <USBD_SetConfig+0x118>)
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f7ff f9e7 	bl	800827a <USBD_SetClassConfig>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d104      	bne.n	8008ebc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008eb2:	6839      	ldr	r1, [r7, #0]
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 f932 	bl	800911e <USBD_CtlError>
            return;
 8008eba:	e052      	b.n	8008f62 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 f9f6 	bl	80092ae <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008ec2:	e04e      	b.n	8008f62 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 f9f2 	bl	80092ae <USBD_CtlSendStatus>
        break;
 8008eca:	e04a      	b.n	8008f62 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008ecc:	4b26      	ldr	r3, [pc, #152]	; (8008f68 <USBD_SetConfig+0x118>)
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d112      	bne.n	8008efa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2202      	movs	r2, #2
 8008ed8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008edc:	4b22      	ldr	r3, [pc, #136]	; (8008f68 <USBD_SetConfig+0x118>)
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008ee6:	4b20      	ldr	r3, [pc, #128]	; (8008f68 <USBD_SetConfig+0x118>)
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	4619      	mov	r1, r3
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f7ff f9e3 	bl	80082b8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f9db 	bl	80092ae <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008ef8:	e033      	b.n	8008f62 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008efa:	4b1b      	ldr	r3, [pc, #108]	; (8008f68 <USBD_SetConfig+0x118>)
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	461a      	mov	r2, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d01d      	beq.n	8008f44 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	4619      	mov	r1, r3
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f7ff f9d1 	bl	80082b8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008f16:	4b14      	ldr	r3, [pc, #80]	; (8008f68 <USBD_SetConfig+0x118>)
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008f20:	4b11      	ldr	r3, [pc, #68]	; (8008f68 <USBD_SetConfig+0x118>)
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	4619      	mov	r1, r3
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f7ff f9a7 	bl	800827a <USBD_SetClassConfig>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	d104      	bne.n	8008f3c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008f32:	6839      	ldr	r1, [r7, #0]
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 f8f2 	bl	800911e <USBD_CtlError>
            return;
 8008f3a:	e012      	b.n	8008f62 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 f9b6 	bl	80092ae <USBD_CtlSendStatus>
        break;
 8008f42:	e00e      	b.n	8008f62 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 f9b2 	bl	80092ae <USBD_CtlSendStatus>
        break;
 8008f4a:	e00a      	b.n	8008f62 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008f4c:	6839      	ldr	r1, [r7, #0]
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f8e5 	bl	800911e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008f54:	4b04      	ldr	r3, [pc, #16]	; (8008f68 <USBD_SetConfig+0x118>)
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	4619      	mov	r1, r3
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f7ff f9ac 	bl	80082b8 <USBD_ClrClassConfig>
        break;
 8008f60:	bf00      	nop
    }
  }
}
 8008f62:	3708      	adds	r7, #8
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	200007d8 	.word	0x200007d8

08008f6c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	88db      	ldrh	r3, [r3, #6]
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d004      	beq.n	8008f88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008f7e:	6839      	ldr	r1, [r7, #0]
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 f8cc 	bl	800911e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008f86:	e022      	b.n	8008fce <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	dc02      	bgt.n	8008f98 <USBD_GetConfig+0x2c>
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	dc03      	bgt.n	8008f9e <USBD_GetConfig+0x32>
 8008f96:	e015      	b.n	8008fc4 <USBD_GetConfig+0x58>
 8008f98:	2b03      	cmp	r3, #3
 8008f9a:	d00b      	beq.n	8008fb4 <USBD_GetConfig+0x48>
 8008f9c:	e012      	b.n	8008fc4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	3308      	adds	r3, #8
 8008fa8:	2201      	movs	r2, #1
 8008faa:	4619      	mov	r1, r3
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 f920 	bl	80091f2 <USBD_CtlSendData>
        break;
 8008fb2:	e00c      	b.n	8008fce <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	3304      	adds	r3, #4
 8008fb8:	2201      	movs	r2, #1
 8008fba:	4619      	mov	r1, r3
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 f918 	bl	80091f2 <USBD_CtlSendData>
        break;
 8008fc2:	e004      	b.n	8008fce <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008fc4:	6839      	ldr	r1, [r7, #0]
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 f8a9 	bl	800911e <USBD_CtlError>
        break;
 8008fcc:	bf00      	nop
}
 8008fce:	bf00      	nop
 8008fd0:	3708      	adds	r7, #8
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b082      	sub	sp, #8
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
 8008fde:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	d81e      	bhi.n	800902a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	88db      	ldrh	r3, [r3, #6]
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	d004      	beq.n	8008ffe <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f891 	bl	800911e <USBD_CtlError>
        break;
 8008ffc:	e01a      	b.n	8009034 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2201      	movs	r2, #1
 8009002:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800900a:	2b00      	cmp	r3, #0
 800900c:	d005      	beq.n	800901a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	f043 0202 	orr.w	r2, r3, #2
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	330c      	adds	r3, #12
 800901e:	2202      	movs	r2, #2
 8009020:	4619      	mov	r1, r3
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 f8e5 	bl	80091f2 <USBD_CtlSendData>
      break;
 8009028:	e004      	b.n	8009034 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800902a:	6839      	ldr	r1, [r7, #0]
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 f876 	bl	800911e <USBD_CtlError>
      break;
 8009032:	bf00      	nop
  }
}
 8009034:	bf00      	nop
 8009036:	3708      	adds	r7, #8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	885b      	ldrh	r3, [r3, #2]
 800904a:	2b01      	cmp	r3, #1
 800904c:	d106      	bne.n	800905c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2201      	movs	r2, #1
 8009052:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 f929 	bl	80092ae <USBD_CtlSendStatus>
  }
}
 800905c:	bf00      	nop
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009074:	3b01      	subs	r3, #1
 8009076:	2b02      	cmp	r3, #2
 8009078:	d80b      	bhi.n	8009092 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	885b      	ldrh	r3, [r3, #2]
 800907e:	2b01      	cmp	r3, #1
 8009080:	d10c      	bne.n	800909c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 f90f 	bl	80092ae <USBD_CtlSendStatus>
      }
      break;
 8009090:	e004      	b.n	800909c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009092:	6839      	ldr	r1, [r7, #0]
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 f842 	bl	800911e <USBD_CtlError>
      break;
 800909a:	e000      	b.n	800909e <USBD_ClrFeature+0x3a>
      break;
 800909c:	bf00      	nop
  }
}
 800909e:	bf00      	nop
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80090a6:	b480      	push	{r7}
 80090a8:	b083      	sub	sp, #12
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	781a      	ldrb	r2, [r3, #0]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	785a      	ldrb	r2, [r3, #1]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	3302      	adds	r3, #2
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	b29a      	uxth	r2, r3
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	3303      	adds	r3, #3
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	021b      	lsls	r3, r3, #8
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	4413      	add	r3, r2
 80090d6:	b29a      	uxth	r2, r3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	3304      	adds	r3, #4
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	3305      	adds	r3, #5
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	021b      	lsls	r3, r3, #8
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	4413      	add	r3, r2
 80090f2:	b29a      	uxth	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	3306      	adds	r3, #6
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	b29a      	uxth	r2, r3
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	3307      	adds	r3, #7
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	b29b      	uxth	r3, r3
 8009108:	021b      	lsls	r3, r3, #8
 800910a:	b29b      	uxth	r3, r3
 800910c:	4413      	add	r3, r2
 800910e:	b29a      	uxth	r2, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	80da      	strh	r2, [r3, #6]

}
 8009114:	bf00      	nop
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	bc80      	pop	{r7}
 800911c:	4770      	bx	lr

0800911e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800911e:	b580      	push	{r7, lr}
 8009120:	b082      	sub	sp, #8
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
 8009126:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009128:	2180      	movs	r1, #128	; 0x80
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fc54 	bl	80099d8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009130:	2100      	movs	r1, #0
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 fc50 	bl	80099d8 <USBD_LL_StallEP>
}
 8009138:	bf00      	nop
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b086      	sub	sp, #24
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800914c:	2300      	movs	r3, #0
 800914e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d032      	beq.n	80091bc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f000 f834 	bl	80091c4 <USBD_GetLen>
 800915c:	4603      	mov	r3, r0
 800915e:	3301      	adds	r3, #1
 8009160:	b29b      	uxth	r3, r3
 8009162:	005b      	lsls	r3, r3, #1
 8009164:	b29a      	uxth	r2, r3
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800916a:	7dfb      	ldrb	r3, [r7, #23]
 800916c:	1c5a      	adds	r2, r3, #1
 800916e:	75fa      	strb	r2, [r7, #23]
 8009170:	461a      	mov	r2, r3
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	4413      	add	r3, r2
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	7812      	ldrb	r2, [r2, #0]
 800917a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800917c:	7dfb      	ldrb	r3, [r7, #23]
 800917e:	1c5a      	adds	r2, r3, #1
 8009180:	75fa      	strb	r2, [r7, #23]
 8009182:	461a      	mov	r2, r3
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	4413      	add	r3, r2
 8009188:	2203      	movs	r2, #3
 800918a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800918c:	e012      	b.n	80091b4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	1c5a      	adds	r2, r3, #1
 8009192:	60fa      	str	r2, [r7, #12]
 8009194:	7dfa      	ldrb	r2, [r7, #23]
 8009196:	1c51      	adds	r1, r2, #1
 8009198:	75f9      	strb	r1, [r7, #23]
 800919a:	4611      	mov	r1, r2
 800919c:	68ba      	ldr	r2, [r7, #8]
 800919e:	440a      	add	r2, r1
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80091a4:	7dfb      	ldrb	r3, [r7, #23]
 80091a6:	1c5a      	adds	r2, r3, #1
 80091a8:	75fa      	strb	r2, [r7, #23]
 80091aa:	461a      	mov	r2, r3
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	4413      	add	r3, r2
 80091b0:	2200      	movs	r2, #0
 80091b2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d1e8      	bne.n	800918e <USBD_GetString+0x4e>
    }
  }
}
 80091bc:	bf00      	nop
 80091be:	3718      	adds	r7, #24
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b085      	sub	sp, #20
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80091cc:	2300      	movs	r3, #0
 80091ce:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80091d0:	e005      	b.n	80091de <USBD_GetLen+0x1a>
  {
    len++;
 80091d2:	7bfb      	ldrb	r3, [r7, #15]
 80091d4:	3301      	adds	r3, #1
 80091d6:	73fb      	strb	r3, [r7, #15]
    buf++;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	3301      	adds	r3, #1
 80091dc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1f5      	bne.n	80091d2 <USBD_GetLen+0xe>
  }

  return len;
 80091e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3714      	adds	r7, #20
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bc80      	pop	{r7}
 80091f0:	4770      	bx	lr

080091f2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80091f2:	b580      	push	{r7, lr}
 80091f4:	b084      	sub	sp, #16
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	60f8      	str	r0, [r7, #12]
 80091fa:	60b9      	str	r1, [r7, #8]
 80091fc:	4613      	mov	r3, r2
 80091fe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2202      	movs	r2, #2
 8009204:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009208:	88fa      	ldrh	r2, [r7, #6]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800920e:	88fa      	ldrh	r2, [r7, #6]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009214:	88fb      	ldrh	r3, [r7, #6]
 8009216:	68ba      	ldr	r2, [r7, #8]
 8009218:	2100      	movs	r1, #0
 800921a:	68f8      	ldr	r0, [r7, #12]
 800921c:	f000 fc65 	bl	8009aea <USBD_LL_Transmit>

  return USBD_OK;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b084      	sub	sp, #16
 800922e:	af00      	add	r7, sp, #0
 8009230:	60f8      	str	r0, [r7, #12]
 8009232:	60b9      	str	r1, [r7, #8]
 8009234:	4613      	mov	r3, r2
 8009236:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009238:	88fb      	ldrh	r3, [r7, #6]
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	2100      	movs	r1, #0
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f000 fc53 	bl	8009aea <USBD_LL_Transmit>

  return USBD_OK;
 8009244:	2300      	movs	r3, #0
}
 8009246:	4618      	mov	r0, r3
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b084      	sub	sp, #16
 8009252:	af00      	add	r7, sp, #0
 8009254:	60f8      	str	r0, [r7, #12]
 8009256:	60b9      	str	r1, [r7, #8]
 8009258:	4613      	mov	r3, r2
 800925a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2203      	movs	r2, #3
 8009260:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009264:	88fa      	ldrh	r2, [r7, #6]
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800926c:	88fa      	ldrh	r2, [r7, #6]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009274:	88fb      	ldrh	r3, [r7, #6]
 8009276:	68ba      	ldr	r2, [r7, #8]
 8009278:	2100      	movs	r1, #0
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f000 fc58 	bl	8009b30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009280:	2300      	movs	r3, #0
}
 8009282:	4618      	mov	r0, r3
 8009284:	3710      	adds	r7, #16
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b084      	sub	sp, #16
 800928e:	af00      	add	r7, sp, #0
 8009290:	60f8      	str	r0, [r7, #12]
 8009292:	60b9      	str	r1, [r7, #8]
 8009294:	4613      	mov	r3, r2
 8009296:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009298:	88fb      	ldrh	r3, [r7, #6]
 800929a:	68ba      	ldr	r2, [r7, #8]
 800929c:	2100      	movs	r1, #0
 800929e:	68f8      	ldr	r0, [r7, #12]
 80092a0:	f000 fc46 	bl	8009b30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3710      	adds	r7, #16
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b082      	sub	sp, #8
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2204      	movs	r2, #4
 80092ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80092be:	2300      	movs	r3, #0
 80092c0:	2200      	movs	r2, #0
 80092c2:	2100      	movs	r1, #0
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 fc10 	bl	8009aea <USBD_LL_Transmit>

  return USBD_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2205      	movs	r2, #5
 80092e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092e4:	2300      	movs	r3, #0
 80092e6:	2200      	movs	r2, #0
 80092e8:	2100      	movs	r1, #0
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 fc20 	bl	8009b30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3708      	adds	r7, #8
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
	...

080092fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009300:	2200      	movs	r2, #0
 8009302:	4912      	ldr	r1, [pc, #72]	; (800934c <MX_USB_DEVICE_Init+0x50>)
 8009304:	4812      	ldr	r0, [pc, #72]	; (8009350 <MX_USB_DEVICE_Init+0x54>)
 8009306:	f7fe ff5e 	bl	80081c6 <USBD_Init>
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d001      	beq.n	8009314 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009310:	f7f8 f9c2 	bl	8001698 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009314:	490f      	ldr	r1, [pc, #60]	; (8009354 <MX_USB_DEVICE_Init+0x58>)
 8009316:	480e      	ldr	r0, [pc, #56]	; (8009350 <MX_USB_DEVICE_Init+0x54>)
 8009318:	f7fe ff80 	bl	800821c <USBD_RegisterClass>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009322:	f7f8 f9b9 	bl	8001698 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009326:	490c      	ldr	r1, [pc, #48]	; (8009358 <MX_USB_DEVICE_Init+0x5c>)
 8009328:	4809      	ldr	r0, [pc, #36]	; (8009350 <MX_USB_DEVICE_Init+0x54>)
 800932a:	f7fe feb1 	bl	8008090 <USBD_CDC_RegisterInterface>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d001      	beq.n	8009338 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009334:	f7f8 f9b0 	bl	8001698 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009338:	4805      	ldr	r0, [pc, #20]	; (8009350 <MX_USB_DEVICE_Init+0x54>)
 800933a:	f7fe ff88 	bl	800824e <USBD_Start>
 800933e:	4603      	mov	r3, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d001      	beq.n	8009348 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009344:	f7f8 f9a8 	bl	8001698 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009348:	bf00      	nop
 800934a:	bd80      	pop	{r7, pc}
 800934c:	2000012c 	.word	0x2000012c
 8009350:	200007dc 	.word	0x200007dc
 8009354:	20000018 	.word	0x20000018
 8009358:	2000011c 	.word	0x2000011c

0800935c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009360:	2200      	movs	r2, #0
 8009362:	4905      	ldr	r1, [pc, #20]	; (8009378 <CDC_Init_FS+0x1c>)
 8009364:	4805      	ldr	r0, [pc, #20]	; (800937c <CDC_Init_FS+0x20>)
 8009366:	f7fe fea9 	bl	80080bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800936a:	4905      	ldr	r1, [pc, #20]	; (8009380 <CDC_Init_FS+0x24>)
 800936c:	4803      	ldr	r0, [pc, #12]	; (800937c <CDC_Init_FS+0x20>)
 800936e:	f7fe febe 	bl	80080ee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009372:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009374:	4618      	mov	r0, r3
 8009376:	bd80      	pop	{r7, pc}
 8009378:	20000ea0 	.word	0x20000ea0
 800937c:	200007dc 	.word	0x200007dc
 8009380:	20000aa0 	.word	0x20000aa0

08009384 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009384:	b480      	push	{r7}
 8009386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009388:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800938a:	4618      	mov	r0, r3
 800938c:	46bd      	mov	sp, r7
 800938e:	bc80      	pop	{r7}
 8009390:	4770      	bx	lr
	...

08009394 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	4603      	mov	r3, r0
 800939c:	6039      	str	r1, [r7, #0]
 800939e:	71fb      	strb	r3, [r7, #7]
 80093a0:	4613      	mov	r3, r2
 80093a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80093a4:	79fb      	ldrb	r3, [r7, #7]
 80093a6:	2b23      	cmp	r3, #35	; 0x23
 80093a8:	d84a      	bhi.n	8009440 <CDC_Control_FS+0xac>
 80093aa:	a201      	add	r2, pc, #4	; (adr r2, 80093b0 <CDC_Control_FS+0x1c>)
 80093ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b0:	08009441 	.word	0x08009441
 80093b4:	08009441 	.word	0x08009441
 80093b8:	08009441 	.word	0x08009441
 80093bc:	08009441 	.word	0x08009441
 80093c0:	08009441 	.word	0x08009441
 80093c4:	08009441 	.word	0x08009441
 80093c8:	08009441 	.word	0x08009441
 80093cc:	08009441 	.word	0x08009441
 80093d0:	08009441 	.word	0x08009441
 80093d4:	08009441 	.word	0x08009441
 80093d8:	08009441 	.word	0x08009441
 80093dc:	08009441 	.word	0x08009441
 80093e0:	08009441 	.word	0x08009441
 80093e4:	08009441 	.word	0x08009441
 80093e8:	08009441 	.word	0x08009441
 80093ec:	08009441 	.word	0x08009441
 80093f0:	08009441 	.word	0x08009441
 80093f4:	08009441 	.word	0x08009441
 80093f8:	08009441 	.word	0x08009441
 80093fc:	08009441 	.word	0x08009441
 8009400:	08009441 	.word	0x08009441
 8009404:	08009441 	.word	0x08009441
 8009408:	08009441 	.word	0x08009441
 800940c:	08009441 	.word	0x08009441
 8009410:	08009441 	.word	0x08009441
 8009414:	08009441 	.word	0x08009441
 8009418:	08009441 	.word	0x08009441
 800941c:	08009441 	.word	0x08009441
 8009420:	08009441 	.word	0x08009441
 8009424:	08009441 	.word	0x08009441
 8009428:	08009441 	.word	0x08009441
 800942c:	08009441 	.word	0x08009441
 8009430:	08009441 	.word	0x08009441
 8009434:	08009441 	.word	0x08009441
 8009438:	08009441 	.word	0x08009441
 800943c:	08009441 	.word	0x08009441
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009440:	bf00      	nop
  }

  return (USBD_OK);
 8009442:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009444:	4618      	mov	r0, r3
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	bc80      	pop	{r7}
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop

08009450 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800945a:	6879      	ldr	r1, [r7, #4]
 800945c:	4805      	ldr	r0, [pc, #20]	; (8009474 <CDC_Receive_FS+0x24>)
 800945e:	f7fe fe46 	bl	80080ee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009462:	4804      	ldr	r0, [pc, #16]	; (8009474 <CDC_Receive_FS+0x24>)
 8009464:	f7fe fe85 	bl	8008172 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009468:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800946a:	4618      	mov	r0, r3
 800946c:	3708      	adds	r7, #8
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	200007dc 	.word	0x200007dc

08009478 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	460b      	mov	r3, r1
 8009482:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009484:	2300      	movs	r3, #0
 8009486:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009488:	4b0d      	ldr	r3, [pc, #52]	; (80094c0 <CDC_Transmit_FS+0x48>)
 800948a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800948e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009496:	2b00      	cmp	r3, #0
 8009498:	d001      	beq.n	800949e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800949a:	2301      	movs	r3, #1
 800949c:	e00b      	b.n	80094b6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800949e:	887b      	ldrh	r3, [r7, #2]
 80094a0:	461a      	mov	r2, r3
 80094a2:	6879      	ldr	r1, [r7, #4]
 80094a4:	4806      	ldr	r0, [pc, #24]	; (80094c0 <CDC_Transmit_FS+0x48>)
 80094a6:	f7fe fe09 	bl	80080bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80094aa:	4805      	ldr	r0, [pc, #20]	; (80094c0 <CDC_Transmit_FS+0x48>)
 80094ac:	f7fe fe32 	bl	8008114 <USBD_CDC_TransmitPacket>
 80094b0:	4603      	mov	r3, r0
 80094b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80094b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	200007dc 	.word	0x200007dc

080094c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	4603      	mov	r3, r0
 80094cc:	6039      	str	r1, [r7, #0]
 80094ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	2212      	movs	r2, #18
 80094d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80094d6:	4b03      	ldr	r3, [pc, #12]	; (80094e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80094d8:	4618      	mov	r0, r3
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	bc80      	pop	{r7}
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	20000148 	.word	0x20000148

080094e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	4603      	mov	r3, r0
 80094f0:	6039      	str	r1, [r7, #0]
 80094f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	2204      	movs	r2, #4
 80094f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80094fa:	4b03      	ldr	r3, [pc, #12]	; (8009508 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	bc80      	pop	{r7}
 8009504:	4770      	bx	lr
 8009506:	bf00      	nop
 8009508:	2000015c 	.word	0x2000015c

0800950c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
 8009512:	4603      	mov	r3, r0
 8009514:	6039      	str	r1, [r7, #0]
 8009516:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009518:	79fb      	ldrb	r3, [r7, #7]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d105      	bne.n	800952a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800951e:	683a      	ldr	r2, [r7, #0]
 8009520:	4907      	ldr	r1, [pc, #28]	; (8009540 <USBD_FS_ProductStrDescriptor+0x34>)
 8009522:	4808      	ldr	r0, [pc, #32]	; (8009544 <USBD_FS_ProductStrDescriptor+0x38>)
 8009524:	f7ff fe0c 	bl	8009140 <USBD_GetString>
 8009528:	e004      	b.n	8009534 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800952a:	683a      	ldr	r2, [r7, #0]
 800952c:	4904      	ldr	r1, [pc, #16]	; (8009540 <USBD_FS_ProductStrDescriptor+0x34>)
 800952e:	4805      	ldr	r0, [pc, #20]	; (8009544 <USBD_FS_ProductStrDescriptor+0x38>)
 8009530:	f7ff fe06 	bl	8009140 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009534:	4b02      	ldr	r3, [pc, #8]	; (8009540 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009536:	4618      	mov	r0, r3
 8009538:	3708      	adds	r7, #8
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	200012a0 	.word	0x200012a0
 8009544:	0800e538 	.word	0x0800e538

08009548 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	4603      	mov	r3, r0
 8009550:	6039      	str	r1, [r7, #0]
 8009552:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009554:	683a      	ldr	r2, [r7, #0]
 8009556:	4904      	ldr	r1, [pc, #16]	; (8009568 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009558:	4804      	ldr	r0, [pc, #16]	; (800956c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800955a:	f7ff fdf1 	bl	8009140 <USBD_GetString>
  return USBD_StrDesc;
 800955e:	4b02      	ldr	r3, [pc, #8]	; (8009568 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009560:	4618      	mov	r0, r3
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	200012a0 	.word	0x200012a0
 800956c:	0800e550 	.word	0x0800e550

08009570 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
 8009576:	4603      	mov	r3, r0
 8009578:	6039      	str	r1, [r7, #0]
 800957a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	221a      	movs	r2, #26
 8009580:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009582:	f000 f843 	bl	800960c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009586:	4b02      	ldr	r3, [pc, #8]	; (8009590 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009588:	4618      	mov	r0, r3
 800958a:	3708      	adds	r7, #8
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}
 8009590:	20000160 	.word	0x20000160

08009594 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	4603      	mov	r3, r0
 800959c:	6039      	str	r1, [r7, #0]
 800959e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80095a0:	79fb      	ldrb	r3, [r7, #7]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d105      	bne.n	80095b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095a6:	683a      	ldr	r2, [r7, #0]
 80095a8:	4907      	ldr	r1, [pc, #28]	; (80095c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80095aa:	4808      	ldr	r0, [pc, #32]	; (80095cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80095ac:	f7ff fdc8 	bl	8009140 <USBD_GetString>
 80095b0:	e004      	b.n	80095bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095b2:	683a      	ldr	r2, [r7, #0]
 80095b4:	4904      	ldr	r1, [pc, #16]	; (80095c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80095b6:	4805      	ldr	r0, [pc, #20]	; (80095cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80095b8:	f7ff fdc2 	bl	8009140 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095bc:	4b02      	ldr	r3, [pc, #8]	; (80095c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3708      	adds	r7, #8
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	200012a0 	.word	0x200012a0
 80095cc:	0800e564 	.word	0x0800e564

080095d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	4603      	mov	r3, r0
 80095d8:	6039      	str	r1, [r7, #0]
 80095da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095dc:	79fb      	ldrb	r3, [r7, #7]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d105      	bne.n	80095ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095e2:	683a      	ldr	r2, [r7, #0]
 80095e4:	4907      	ldr	r1, [pc, #28]	; (8009604 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095e6:	4808      	ldr	r0, [pc, #32]	; (8009608 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80095e8:	f7ff fdaa 	bl	8009140 <USBD_GetString>
 80095ec:	e004      	b.n	80095f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095ee:	683a      	ldr	r2, [r7, #0]
 80095f0:	4904      	ldr	r1, [pc, #16]	; (8009604 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095f2:	4805      	ldr	r0, [pc, #20]	; (8009608 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80095f4:	f7ff fda4 	bl	8009140 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095f8:	4b02      	ldr	r3, [pc, #8]	; (8009604 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3708      	adds	r7, #8
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	200012a0 	.word	0x200012a0
 8009608:	0800e570 	.word	0x0800e570

0800960c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009612:	4b0f      	ldr	r3, [pc, #60]	; (8009650 <Get_SerialNum+0x44>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009618:	4b0e      	ldr	r3, [pc, #56]	; (8009654 <Get_SerialNum+0x48>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800961e:	4b0e      	ldr	r3, [pc, #56]	; (8009658 <Get_SerialNum+0x4c>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009624:	68fa      	ldr	r2, [r7, #12]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	4413      	add	r3, r2
 800962a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d009      	beq.n	8009646 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009632:	2208      	movs	r2, #8
 8009634:	4909      	ldr	r1, [pc, #36]	; (800965c <Get_SerialNum+0x50>)
 8009636:	68f8      	ldr	r0, [r7, #12]
 8009638:	f000 f814 	bl	8009664 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800963c:	2204      	movs	r2, #4
 800963e:	4908      	ldr	r1, [pc, #32]	; (8009660 <Get_SerialNum+0x54>)
 8009640:	68b8      	ldr	r0, [r7, #8]
 8009642:	f000 f80f 	bl	8009664 <IntToUnicode>
  }
}
 8009646:	bf00      	nop
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	1ffff7e8 	.word	0x1ffff7e8
 8009654:	1ffff7ec 	.word	0x1ffff7ec
 8009658:	1ffff7f0 	.word	0x1ffff7f0
 800965c:	20000162 	.word	0x20000162
 8009660:	20000172 	.word	0x20000172

08009664 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009664:	b480      	push	{r7}
 8009666:	b087      	sub	sp, #28
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	4613      	mov	r3, r2
 8009670:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009672:	2300      	movs	r3, #0
 8009674:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009676:	2300      	movs	r3, #0
 8009678:	75fb      	strb	r3, [r7, #23]
 800967a:	e027      	b.n	80096cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	0f1b      	lsrs	r3, r3, #28
 8009680:	2b09      	cmp	r3, #9
 8009682:	d80b      	bhi.n	800969c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	0f1b      	lsrs	r3, r3, #28
 8009688:	b2da      	uxtb	r2, r3
 800968a:	7dfb      	ldrb	r3, [r7, #23]
 800968c:	005b      	lsls	r3, r3, #1
 800968e:	4619      	mov	r1, r3
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	440b      	add	r3, r1
 8009694:	3230      	adds	r2, #48	; 0x30
 8009696:	b2d2      	uxtb	r2, r2
 8009698:	701a      	strb	r2, [r3, #0]
 800969a:	e00a      	b.n	80096b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	0f1b      	lsrs	r3, r3, #28
 80096a0:	b2da      	uxtb	r2, r3
 80096a2:	7dfb      	ldrb	r3, [r7, #23]
 80096a4:	005b      	lsls	r3, r3, #1
 80096a6:	4619      	mov	r1, r3
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	440b      	add	r3, r1
 80096ac:	3237      	adds	r2, #55	; 0x37
 80096ae:	b2d2      	uxtb	r2, r2
 80096b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	011b      	lsls	r3, r3, #4
 80096b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80096b8:	7dfb      	ldrb	r3, [r7, #23]
 80096ba:	005b      	lsls	r3, r3, #1
 80096bc:	3301      	adds	r3, #1
 80096be:	68ba      	ldr	r2, [r7, #8]
 80096c0:	4413      	add	r3, r2
 80096c2:	2200      	movs	r2, #0
 80096c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80096c6:	7dfb      	ldrb	r3, [r7, #23]
 80096c8:	3301      	adds	r3, #1
 80096ca:	75fb      	strb	r3, [r7, #23]
 80096cc:	7dfa      	ldrb	r2, [r7, #23]
 80096ce:	79fb      	ldrb	r3, [r7, #7]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d3d3      	bcc.n	800967c <IntToUnicode+0x18>
  }
}
 80096d4:	bf00      	nop
 80096d6:	bf00      	nop
 80096d8:	371c      	adds	r7, #28
 80096da:	46bd      	mov	sp, r7
 80096dc:	bc80      	pop	{r7}
 80096de:	4770      	bx	lr

080096e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a0d      	ldr	r2, [pc, #52]	; (8009724 <HAL_PCD_MspInit+0x44>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d113      	bne.n	800971a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80096f2:	4b0d      	ldr	r3, [pc, #52]	; (8009728 <HAL_PCD_MspInit+0x48>)
 80096f4:	69db      	ldr	r3, [r3, #28]
 80096f6:	4a0c      	ldr	r2, [pc, #48]	; (8009728 <HAL_PCD_MspInit+0x48>)
 80096f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80096fc:	61d3      	str	r3, [r2, #28]
 80096fe:	4b0a      	ldr	r3, [pc, #40]	; (8009728 <HAL_PCD_MspInit+0x48>)
 8009700:	69db      	ldr	r3, [r3, #28]
 8009702:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009706:	60fb      	str	r3, [r7, #12]
 8009708:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800970a:	2200      	movs	r2, #0
 800970c:	2100      	movs	r1, #0
 800970e:	2014      	movs	r0, #20
 8009710:	f7f8 fab3 	bl	8001c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009714:	2014      	movs	r0, #20
 8009716:	f7f8 facc 	bl	8001cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800971a:	bf00      	nop
 800971c:	3710      	adds	r7, #16
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	40005c00 	.word	0x40005c00
 8009728:	40021000 	.word	0x40021000

0800972c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009740:	4619      	mov	r1, r3
 8009742:	4610      	mov	r0, r2
 8009744:	f7fe fdcb 	bl	80082de <USBD_LL_SetupStage>
}
 8009748:	bf00      	nop
 800974a:	3708      	adds	r7, #8
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	460b      	mov	r3, r1
 800975a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8009762:	78fa      	ldrb	r2, [r7, #3]
 8009764:	6879      	ldr	r1, [r7, #4]
 8009766:	4613      	mov	r3, r2
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	4413      	add	r3, r2
 800976c:	00db      	lsls	r3, r3, #3
 800976e:	440b      	add	r3, r1
 8009770:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	78fb      	ldrb	r3, [r7, #3]
 8009778:	4619      	mov	r1, r3
 800977a:	f7fe fdfd 	bl	8008378 <USBD_LL_DataOutStage>
}
 800977e:	bf00      	nop
 8009780:	3708      	adds	r7, #8
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b082      	sub	sp, #8
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
 800978e:	460b      	mov	r3, r1
 8009790:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8009798:	78fa      	ldrb	r2, [r7, #3]
 800979a:	6879      	ldr	r1, [r7, #4]
 800979c:	4613      	mov	r3, r2
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	4413      	add	r3, r2
 80097a2:	00db      	lsls	r3, r3, #3
 80097a4:	440b      	add	r3, r1
 80097a6:	333c      	adds	r3, #60	; 0x3c
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	78fb      	ldrb	r3, [r7, #3]
 80097ac:	4619      	mov	r1, r3
 80097ae:	f7fe fe54 	bl	800845a <USBD_LL_DataInStage>
}
 80097b2:	bf00      	nop
 80097b4:	3708      	adds	r7, #8
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b082      	sub	sp, #8
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7fe ff64 	bl	8008696 <USBD_LL_SOF>
}
 80097ce:	bf00      	nop
 80097d0:	3708      	adds	r7, #8
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b084      	sub	sp, #16
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80097de:	2301      	movs	r3, #1
 80097e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	2b02      	cmp	r3, #2
 80097e8:	d001      	beq.n	80097ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80097ea:	f7f7 ff55 	bl	8001698 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80097f4:	7bfa      	ldrb	r2, [r7, #15]
 80097f6:	4611      	mov	r1, r2
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7fe ff14 	bl	8008626 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009804:	4618      	mov	r0, r3
 8009806:	f7fe fecd 	bl	80085a4 <USBD_LL_Reset>
}
 800980a:	bf00      	nop
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
	...

08009814 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009822:	4618      	mov	r0, r3
 8009824:	f7fe ff0e 	bl	8008644 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	699b      	ldr	r3, [r3, #24]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d005      	beq.n	800983c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009830:	4b04      	ldr	r3, [pc, #16]	; (8009844 <HAL_PCD_SuspendCallback+0x30>)
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	4a03      	ldr	r2, [pc, #12]	; (8009844 <HAL_PCD_SuspendCallback+0x30>)
 8009836:	f043 0306 	orr.w	r3, r3, #6
 800983a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800983c:	bf00      	nop
 800983e:	3708      	adds	r7, #8
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	e000ed00 	.word	0xe000ed00

08009848 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009856:	4618      	mov	r0, r3
 8009858:	f7fe ff08 	bl	800866c <USBD_LL_Resume>
}
 800985c:	bf00      	nop
 800985e:	3708      	adds	r7, #8
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b082      	sub	sp, #8
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800986c:	4a28      	ldr	r2, [pc, #160]	; (8009910 <USBD_LL_Init+0xac>)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	4a26      	ldr	r2, [pc, #152]	; (8009910 <USBD_LL_Init+0xac>)
 8009878:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800987c:	4b24      	ldr	r3, [pc, #144]	; (8009910 <USBD_LL_Init+0xac>)
 800987e:	4a25      	ldr	r2, [pc, #148]	; (8009914 <USBD_LL_Init+0xb0>)
 8009880:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009882:	4b23      	ldr	r3, [pc, #140]	; (8009910 <USBD_LL_Init+0xac>)
 8009884:	2208      	movs	r2, #8
 8009886:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009888:	4b21      	ldr	r3, [pc, #132]	; (8009910 <USBD_LL_Init+0xac>)
 800988a:	2202      	movs	r2, #2
 800988c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800988e:	4b20      	ldr	r3, [pc, #128]	; (8009910 <USBD_LL_Init+0xac>)
 8009890:	2200      	movs	r2, #0
 8009892:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009894:	4b1e      	ldr	r3, [pc, #120]	; (8009910 <USBD_LL_Init+0xac>)
 8009896:	2200      	movs	r2, #0
 8009898:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800989a:	4b1d      	ldr	r3, [pc, #116]	; (8009910 <USBD_LL_Init+0xac>)
 800989c:	2200      	movs	r2, #0
 800989e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80098a0:	481b      	ldr	r0, [pc, #108]	; (8009910 <USBD_LL_Init+0xac>)
 80098a2:	f7f9 fbfe 	bl	80030a2 <HAL_PCD_Init>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d001      	beq.n	80098b0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80098ac:	f7f7 fef4 	bl	8001698 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098b6:	2318      	movs	r3, #24
 80098b8:	2200      	movs	r2, #0
 80098ba:	2100      	movs	r1, #0
 80098bc:	f7fb f91d 	bl	8004afa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098c6:	2358      	movs	r3, #88	; 0x58
 80098c8:	2200      	movs	r2, #0
 80098ca:	2180      	movs	r1, #128	; 0x80
 80098cc:	f7fb f915 	bl	8004afa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098d6:	23c0      	movs	r3, #192	; 0xc0
 80098d8:	2200      	movs	r2, #0
 80098da:	2181      	movs	r1, #129	; 0x81
 80098dc:	f7fb f90d 	bl	8004afa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098e6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80098ea:	2200      	movs	r2, #0
 80098ec:	2101      	movs	r1, #1
 80098ee:	f7fb f904 	bl	8004afa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098fc:	2200      	movs	r2, #0
 80098fe:	2182      	movs	r1, #130	; 0x82
 8009900:	f7fb f8fb 	bl	8004afa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3708      	adds	r7, #8
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	200014a0 	.word	0x200014a0
 8009914:	40005c00 	.word	0x40005c00

08009918 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009920:	2300      	movs	r3, #0
 8009922:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009924:	2300      	movs	r3, #0
 8009926:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800992e:	4618      	mov	r0, r3
 8009930:	f7f9 fcb6 	bl	80032a0 <HAL_PCD_Start>
 8009934:	4603      	mov	r3, r0
 8009936:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009938:	7bfb      	ldrb	r3, [r7, #15]
 800993a:	4618      	mov	r0, r3
 800993c:	f000 f94e 	bl	8009bdc <USBD_Get_USB_Status>
 8009940:	4603      	mov	r3, r0
 8009942:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009944:	7bbb      	ldrb	r3, [r7, #14]
}
 8009946:	4618      	mov	r0, r3
 8009948:	3710      	adds	r7, #16
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}

0800994e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b084      	sub	sp, #16
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]
 8009956:	4608      	mov	r0, r1
 8009958:	4611      	mov	r1, r2
 800995a:	461a      	mov	r2, r3
 800995c:	4603      	mov	r3, r0
 800995e:	70fb      	strb	r3, [r7, #3]
 8009960:	460b      	mov	r3, r1
 8009962:	70bb      	strb	r3, [r7, #2]
 8009964:	4613      	mov	r3, r2
 8009966:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009968:	2300      	movs	r3, #0
 800996a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800996c:	2300      	movs	r3, #0
 800996e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009976:	78bb      	ldrb	r3, [r7, #2]
 8009978:	883a      	ldrh	r2, [r7, #0]
 800997a:	78f9      	ldrb	r1, [r7, #3]
 800997c:	f7f9 fe0b 	bl	8003596 <HAL_PCD_EP_Open>
 8009980:	4603      	mov	r3, r0
 8009982:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009984:	7bfb      	ldrb	r3, [r7, #15]
 8009986:	4618      	mov	r0, r3
 8009988:	f000 f928 	bl	8009bdc <USBD_Get_USB_Status>
 800998c:	4603      	mov	r3, r0
 800998e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009990:	7bbb      	ldrb	r3, [r7, #14]
}
 8009992:	4618      	mov	r0, r3
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b084      	sub	sp, #16
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
 80099a2:	460b      	mov	r3, r1
 80099a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099a6:	2300      	movs	r3, #0
 80099a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099aa:	2300      	movs	r3, #0
 80099ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099b4:	78fa      	ldrb	r2, [r7, #3]
 80099b6:	4611      	mov	r1, r2
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7f9 fe49 	bl	8003650 <HAL_PCD_EP_Close>
 80099be:	4603      	mov	r3, r0
 80099c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099c2:	7bfb      	ldrb	r3, [r7, #15]
 80099c4:	4618      	mov	r0, r3
 80099c6:	f000 f909 	bl	8009bdc <USBD_Get_USB_Status>
 80099ca:	4603      	mov	r3, r0
 80099cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3710      	adds	r7, #16
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	460b      	mov	r3, r1
 80099e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099e4:	2300      	movs	r3, #0
 80099e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099e8:	2300      	movs	r3, #0
 80099ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099f2:	78fa      	ldrb	r2, [r7, #3]
 80099f4:	4611      	mov	r1, r2
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7f9 fef1 	bl	80037de <HAL_PCD_EP_SetStall>
 80099fc:	4603      	mov	r3, r0
 80099fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a00:	7bfb      	ldrb	r3, [r7, #15]
 8009a02:	4618      	mov	r0, r3
 8009a04:	f000 f8ea 	bl	8009bdc <USBD_Get_USB_Status>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b084      	sub	sp, #16
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
 8009a1e:	460b      	mov	r3, r1
 8009a20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a22:	2300      	movs	r3, #0
 8009a24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a26:	2300      	movs	r3, #0
 8009a28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a30:	78fa      	ldrb	r2, [r7, #3]
 8009a32:	4611      	mov	r1, r2
 8009a34:	4618      	mov	r0, r3
 8009a36:	f7f9 ff32 	bl	800389e <HAL_PCD_EP_ClrStall>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a3e:	7bfb      	ldrb	r3, [r7, #15]
 8009a40:	4618      	mov	r0, r3
 8009a42:	f000 f8cb 	bl	8009bdc <USBD_Get_USB_Status>
 8009a46:	4603      	mov	r3, r0
 8009a48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3710      	adds	r7, #16
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b085      	sub	sp, #20
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a66:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009a68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	da0c      	bge.n	8009a8a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009a70:	78fb      	ldrb	r3, [r7, #3]
 8009a72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a76:	68f9      	ldr	r1, [r7, #12]
 8009a78:	1c5a      	adds	r2, r3, #1
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	4413      	add	r3, r2
 8009a80:	00db      	lsls	r3, r3, #3
 8009a82:	440b      	add	r3, r1
 8009a84:	3302      	adds	r3, #2
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	e00b      	b.n	8009aa2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009a8a:	78fb      	ldrb	r3, [r7, #3]
 8009a8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a90:	68f9      	ldr	r1, [r7, #12]
 8009a92:	4613      	mov	r3, r2
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	4413      	add	r3, r2
 8009a98:	00db      	lsls	r3, r3, #3
 8009a9a:	440b      	add	r3, r1
 8009a9c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009aa0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3714      	adds	r7, #20
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bc80      	pop	{r7}
 8009aaa:	4770      	bx	lr

08009aac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009abc:	2300      	movs	r3, #0
 8009abe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ac6:	78fa      	ldrb	r2, [r7, #3]
 8009ac8:	4611      	mov	r1, r2
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7f9 fd3e 	bl	800354c <HAL_PCD_SetAddress>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ad4:	7bfb      	ldrb	r3, [r7, #15]
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f000 f880 	bl	8009bdc <USBD_Get_USB_Status>
 8009adc:	4603      	mov	r3, r0
 8009ade:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ae0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009aea:	b580      	push	{r7, lr}
 8009aec:	b086      	sub	sp, #24
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	60f8      	str	r0, [r7, #12]
 8009af2:	607a      	str	r2, [r7, #4]
 8009af4:	461a      	mov	r2, r3
 8009af6:	460b      	mov	r3, r1
 8009af8:	72fb      	strb	r3, [r7, #11]
 8009afa:	4613      	mov	r3, r2
 8009afc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009afe:	2300      	movs	r3, #0
 8009b00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b02:	2300      	movs	r3, #0
 8009b04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b0c:	893b      	ldrh	r3, [r7, #8]
 8009b0e:	7af9      	ldrb	r1, [r7, #11]
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	f7f9 fe2d 	bl	8003770 <HAL_PCD_EP_Transmit>
 8009b16:	4603      	mov	r3, r0
 8009b18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b1a:	7dfb      	ldrb	r3, [r7, #23]
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f000 f85d 	bl	8009bdc <USBD_Get_USB_Status>
 8009b22:	4603      	mov	r3, r0
 8009b24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b26:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3718      	adds	r7, #24
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	607a      	str	r2, [r7, #4]
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	72fb      	strb	r3, [r7, #11]
 8009b40:	4613      	mov	r3, r2
 8009b42:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b44:	2300      	movs	r3, #0
 8009b46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b52:	893b      	ldrh	r3, [r7, #8]
 8009b54:	7af9      	ldrb	r1, [r7, #11]
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	f7f9 fdc2 	bl	80036e0 <HAL_PCD_EP_Receive>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b60:	7dfb      	ldrb	r3, [r7, #23]
 8009b62:	4618      	mov	r0, r3
 8009b64:	f000 f83a 	bl	8009bdc <USBD_Get_USB_Status>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b6c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3718      	adds	r7, #24
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}

08009b76 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b76:	b580      	push	{r7, lr}
 8009b78:	b082      	sub	sp, #8
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
 8009b7e:	460b      	mov	r3, r1
 8009b80:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b88:	78fa      	ldrb	r2, [r7, #3]
 8009b8a:	4611      	mov	r1, r2
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f7f9 fdd8 	bl	8003742 <HAL_PCD_EP_GetRxCount>
 8009b92:	4603      	mov	r3, r0
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009ba4:	4b02      	ldr	r3, [pc, #8]	; (8009bb0 <USBD_static_malloc+0x14>)
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	370c      	adds	r7, #12
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bc80      	pop	{r7}
 8009bae:	4770      	bx	lr
 8009bb0:	20001790 	.word	0x20001790

08009bb4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]

}
 8009bbc:	bf00      	nop
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bc80      	pop	{r7}
 8009bc4:	4770      	bx	lr

08009bc6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bc6:	b480      	push	{r7}
 8009bc8:	b083      	sub	sp, #12
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
 8009bce:	460b      	mov	r3, r1
 8009bd0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009bd2:	bf00      	nop
 8009bd4:	370c      	adds	r7, #12
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bc80      	pop	{r7}
 8009bda:	4770      	bx	lr

08009bdc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b085      	sub	sp, #20
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	4603      	mov	r3, r0
 8009be4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009be6:	2300      	movs	r3, #0
 8009be8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009bea:	79fb      	ldrb	r3, [r7, #7]
 8009bec:	2b03      	cmp	r3, #3
 8009bee:	d817      	bhi.n	8009c20 <USBD_Get_USB_Status+0x44>
 8009bf0:	a201      	add	r2, pc, #4	; (adr r2, 8009bf8 <USBD_Get_USB_Status+0x1c>)
 8009bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf6:	bf00      	nop
 8009bf8:	08009c09 	.word	0x08009c09
 8009bfc:	08009c0f 	.word	0x08009c0f
 8009c00:	08009c15 	.word	0x08009c15
 8009c04:	08009c1b 	.word	0x08009c1b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c0c:	e00b      	b.n	8009c26 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c0e:	2302      	movs	r3, #2
 8009c10:	73fb      	strb	r3, [r7, #15]
    break;
 8009c12:	e008      	b.n	8009c26 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c14:	2301      	movs	r3, #1
 8009c16:	73fb      	strb	r3, [r7, #15]
    break;
 8009c18:	e005      	b.n	8009c26 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c1a:	2302      	movs	r3, #2
 8009c1c:	73fb      	strb	r3, [r7, #15]
    break;
 8009c1e:	e002      	b.n	8009c26 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009c20:	2302      	movs	r3, #2
 8009c22:	73fb      	strb	r3, [r7, #15]
    break;
 8009c24:	bf00      	nop
  }
  return usb_status;
 8009c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3714      	adds	r7, #20
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bc80      	pop	{r7}
 8009c30:	4770      	bx	lr
 8009c32:	bf00      	nop

08009c34 <__errno>:
 8009c34:	4b01      	ldr	r3, [pc, #4]	; (8009c3c <__errno+0x8>)
 8009c36:	6818      	ldr	r0, [r3, #0]
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop
 8009c3c:	2000017c 	.word	0x2000017c

08009c40 <__libc_init_array>:
 8009c40:	b570      	push	{r4, r5, r6, lr}
 8009c42:	2600      	movs	r6, #0
 8009c44:	4d0c      	ldr	r5, [pc, #48]	; (8009c78 <__libc_init_array+0x38>)
 8009c46:	4c0d      	ldr	r4, [pc, #52]	; (8009c7c <__libc_init_array+0x3c>)
 8009c48:	1b64      	subs	r4, r4, r5
 8009c4a:	10a4      	asrs	r4, r4, #2
 8009c4c:	42a6      	cmp	r6, r4
 8009c4e:	d109      	bne.n	8009c64 <__libc_init_array+0x24>
 8009c50:	f004 fc50 	bl	800e4f4 <_init>
 8009c54:	2600      	movs	r6, #0
 8009c56:	4d0a      	ldr	r5, [pc, #40]	; (8009c80 <__libc_init_array+0x40>)
 8009c58:	4c0a      	ldr	r4, [pc, #40]	; (8009c84 <__libc_init_array+0x44>)
 8009c5a:	1b64      	subs	r4, r4, r5
 8009c5c:	10a4      	asrs	r4, r4, #2
 8009c5e:	42a6      	cmp	r6, r4
 8009c60:	d105      	bne.n	8009c6e <__libc_init_array+0x2e>
 8009c62:	bd70      	pop	{r4, r5, r6, pc}
 8009c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c68:	4798      	blx	r3
 8009c6a:	3601      	adds	r6, #1
 8009c6c:	e7ee      	b.n	8009c4c <__libc_init_array+0xc>
 8009c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c72:	4798      	blx	r3
 8009c74:	3601      	adds	r6, #1
 8009c76:	e7f2      	b.n	8009c5e <__libc_init_array+0x1e>
 8009c78:	0800ea54 	.word	0x0800ea54
 8009c7c:	0800ea54 	.word	0x0800ea54
 8009c80:	0800ea54 	.word	0x0800ea54
 8009c84:	0800ea58 	.word	0x0800ea58

08009c88 <memset>:
 8009c88:	4603      	mov	r3, r0
 8009c8a:	4402      	add	r2, r0
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d100      	bne.n	8009c92 <memset+0xa>
 8009c90:	4770      	bx	lr
 8009c92:	f803 1b01 	strb.w	r1, [r3], #1
 8009c96:	e7f9      	b.n	8009c8c <memset+0x4>

08009c98 <__cvt>:
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c9e:	461f      	mov	r7, r3
 8009ca0:	bfbb      	ittet	lt
 8009ca2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009ca6:	461f      	movlt	r7, r3
 8009ca8:	2300      	movge	r3, #0
 8009caa:	232d      	movlt	r3, #45	; 0x2d
 8009cac:	b088      	sub	sp, #32
 8009cae:	4614      	mov	r4, r2
 8009cb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009cb2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009cb4:	7013      	strb	r3, [r2, #0]
 8009cb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009cb8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009cbc:	f023 0820 	bic.w	r8, r3, #32
 8009cc0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009cc4:	d005      	beq.n	8009cd2 <__cvt+0x3a>
 8009cc6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009cca:	d100      	bne.n	8009cce <__cvt+0x36>
 8009ccc:	3501      	adds	r5, #1
 8009cce:	2302      	movs	r3, #2
 8009cd0:	e000      	b.n	8009cd4 <__cvt+0x3c>
 8009cd2:	2303      	movs	r3, #3
 8009cd4:	aa07      	add	r2, sp, #28
 8009cd6:	9204      	str	r2, [sp, #16]
 8009cd8:	aa06      	add	r2, sp, #24
 8009cda:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009cde:	e9cd 3500 	strd	r3, r5, [sp]
 8009ce2:	4622      	mov	r2, r4
 8009ce4:	463b      	mov	r3, r7
 8009ce6:	f001 fd83 	bl	800b7f0 <_dtoa_r>
 8009cea:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009cee:	4606      	mov	r6, r0
 8009cf0:	d102      	bne.n	8009cf8 <__cvt+0x60>
 8009cf2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009cf4:	07db      	lsls	r3, r3, #31
 8009cf6:	d522      	bpl.n	8009d3e <__cvt+0xa6>
 8009cf8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009cfc:	eb06 0905 	add.w	r9, r6, r5
 8009d00:	d110      	bne.n	8009d24 <__cvt+0x8c>
 8009d02:	7833      	ldrb	r3, [r6, #0]
 8009d04:	2b30      	cmp	r3, #48	; 0x30
 8009d06:	d10a      	bne.n	8009d1e <__cvt+0x86>
 8009d08:	2200      	movs	r2, #0
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	4639      	mov	r1, r7
 8009d10:	f7f6 fe4a 	bl	80009a8 <__aeabi_dcmpeq>
 8009d14:	b918      	cbnz	r0, 8009d1e <__cvt+0x86>
 8009d16:	f1c5 0501 	rsb	r5, r5, #1
 8009d1a:	f8ca 5000 	str.w	r5, [sl]
 8009d1e:	f8da 3000 	ldr.w	r3, [sl]
 8009d22:	4499      	add	r9, r3
 8009d24:	2200      	movs	r2, #0
 8009d26:	2300      	movs	r3, #0
 8009d28:	4620      	mov	r0, r4
 8009d2a:	4639      	mov	r1, r7
 8009d2c:	f7f6 fe3c 	bl	80009a8 <__aeabi_dcmpeq>
 8009d30:	b108      	cbz	r0, 8009d36 <__cvt+0x9e>
 8009d32:	f8cd 901c 	str.w	r9, [sp, #28]
 8009d36:	2230      	movs	r2, #48	; 0x30
 8009d38:	9b07      	ldr	r3, [sp, #28]
 8009d3a:	454b      	cmp	r3, r9
 8009d3c:	d307      	bcc.n	8009d4e <__cvt+0xb6>
 8009d3e:	4630      	mov	r0, r6
 8009d40:	9b07      	ldr	r3, [sp, #28]
 8009d42:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009d44:	1b9b      	subs	r3, r3, r6
 8009d46:	6013      	str	r3, [r2, #0]
 8009d48:	b008      	add	sp, #32
 8009d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d4e:	1c59      	adds	r1, r3, #1
 8009d50:	9107      	str	r1, [sp, #28]
 8009d52:	701a      	strb	r2, [r3, #0]
 8009d54:	e7f0      	b.n	8009d38 <__cvt+0xa0>

08009d56 <__exponent>:
 8009d56:	4603      	mov	r3, r0
 8009d58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d5a:	2900      	cmp	r1, #0
 8009d5c:	f803 2b02 	strb.w	r2, [r3], #2
 8009d60:	bfb6      	itet	lt
 8009d62:	222d      	movlt	r2, #45	; 0x2d
 8009d64:	222b      	movge	r2, #43	; 0x2b
 8009d66:	4249      	neglt	r1, r1
 8009d68:	2909      	cmp	r1, #9
 8009d6a:	7042      	strb	r2, [r0, #1]
 8009d6c:	dd2b      	ble.n	8009dc6 <__exponent+0x70>
 8009d6e:	f10d 0407 	add.w	r4, sp, #7
 8009d72:	46a4      	mov	ip, r4
 8009d74:	270a      	movs	r7, #10
 8009d76:	fb91 f6f7 	sdiv	r6, r1, r7
 8009d7a:	460a      	mov	r2, r1
 8009d7c:	46a6      	mov	lr, r4
 8009d7e:	fb07 1516 	mls	r5, r7, r6, r1
 8009d82:	2a63      	cmp	r2, #99	; 0x63
 8009d84:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009d88:	4631      	mov	r1, r6
 8009d8a:	f104 34ff 	add.w	r4, r4, #4294967295
 8009d8e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009d92:	dcf0      	bgt.n	8009d76 <__exponent+0x20>
 8009d94:	3130      	adds	r1, #48	; 0x30
 8009d96:	f1ae 0502 	sub.w	r5, lr, #2
 8009d9a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009d9e:	4629      	mov	r1, r5
 8009da0:	1c44      	adds	r4, r0, #1
 8009da2:	4561      	cmp	r1, ip
 8009da4:	d30a      	bcc.n	8009dbc <__exponent+0x66>
 8009da6:	f10d 0209 	add.w	r2, sp, #9
 8009daa:	eba2 020e 	sub.w	r2, r2, lr
 8009dae:	4565      	cmp	r5, ip
 8009db0:	bf88      	it	hi
 8009db2:	2200      	movhi	r2, #0
 8009db4:	4413      	add	r3, r2
 8009db6:	1a18      	subs	r0, r3, r0
 8009db8:	b003      	add	sp, #12
 8009dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dbc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dc0:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009dc4:	e7ed      	b.n	8009da2 <__exponent+0x4c>
 8009dc6:	2330      	movs	r3, #48	; 0x30
 8009dc8:	3130      	adds	r1, #48	; 0x30
 8009dca:	7083      	strb	r3, [r0, #2]
 8009dcc:	70c1      	strb	r1, [r0, #3]
 8009dce:	1d03      	adds	r3, r0, #4
 8009dd0:	e7f1      	b.n	8009db6 <__exponent+0x60>
	...

08009dd4 <_printf_float>:
 8009dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd8:	b091      	sub	sp, #68	; 0x44
 8009dda:	460c      	mov	r4, r1
 8009ddc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009de0:	4616      	mov	r6, r2
 8009de2:	461f      	mov	r7, r3
 8009de4:	4605      	mov	r5, r0
 8009de6:	f002 fe57 	bl	800ca98 <_localeconv_r>
 8009dea:	6803      	ldr	r3, [r0, #0]
 8009dec:	4618      	mov	r0, r3
 8009dee:	9309      	str	r3, [sp, #36]	; 0x24
 8009df0:	f7f6 f9ae 	bl	8000150 <strlen>
 8009df4:	2300      	movs	r3, #0
 8009df6:	930e      	str	r3, [sp, #56]	; 0x38
 8009df8:	f8d8 3000 	ldr.w	r3, [r8]
 8009dfc:	900a      	str	r0, [sp, #40]	; 0x28
 8009dfe:	3307      	adds	r3, #7
 8009e00:	f023 0307 	bic.w	r3, r3, #7
 8009e04:	f103 0208 	add.w	r2, r3, #8
 8009e08:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009e0c:	f8d4 b000 	ldr.w	fp, [r4]
 8009e10:	f8c8 2000 	str.w	r2, [r8]
 8009e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e18:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009e1c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009e20:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009e24:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e26:	f04f 32ff 	mov.w	r2, #4294967295
 8009e2a:	4640      	mov	r0, r8
 8009e2c:	4b9c      	ldr	r3, [pc, #624]	; (800a0a0 <_printf_float+0x2cc>)
 8009e2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e30:	f7f6 fdec 	bl	8000a0c <__aeabi_dcmpun>
 8009e34:	bb70      	cbnz	r0, 8009e94 <_printf_float+0xc0>
 8009e36:	f04f 32ff 	mov.w	r2, #4294967295
 8009e3a:	4640      	mov	r0, r8
 8009e3c:	4b98      	ldr	r3, [pc, #608]	; (800a0a0 <_printf_float+0x2cc>)
 8009e3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e40:	f7f6 fdc6 	bl	80009d0 <__aeabi_dcmple>
 8009e44:	bb30      	cbnz	r0, 8009e94 <_printf_float+0xc0>
 8009e46:	2200      	movs	r2, #0
 8009e48:	2300      	movs	r3, #0
 8009e4a:	4640      	mov	r0, r8
 8009e4c:	4651      	mov	r1, sl
 8009e4e:	f7f6 fdb5 	bl	80009bc <__aeabi_dcmplt>
 8009e52:	b110      	cbz	r0, 8009e5a <_printf_float+0x86>
 8009e54:	232d      	movs	r3, #45	; 0x2d
 8009e56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e5a:	4b92      	ldr	r3, [pc, #584]	; (800a0a4 <_printf_float+0x2d0>)
 8009e5c:	4892      	ldr	r0, [pc, #584]	; (800a0a8 <_printf_float+0x2d4>)
 8009e5e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009e62:	bf94      	ite	ls
 8009e64:	4698      	movls	r8, r3
 8009e66:	4680      	movhi	r8, r0
 8009e68:	2303      	movs	r3, #3
 8009e6a:	f04f 0a00 	mov.w	sl, #0
 8009e6e:	6123      	str	r3, [r4, #16]
 8009e70:	f02b 0304 	bic.w	r3, fp, #4
 8009e74:	6023      	str	r3, [r4, #0]
 8009e76:	4633      	mov	r3, r6
 8009e78:	4621      	mov	r1, r4
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	9700      	str	r7, [sp, #0]
 8009e7e:	aa0f      	add	r2, sp, #60	; 0x3c
 8009e80:	f000 f9d4 	bl	800a22c <_printf_common>
 8009e84:	3001      	adds	r0, #1
 8009e86:	f040 8090 	bne.w	8009faa <_printf_float+0x1d6>
 8009e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e8e:	b011      	add	sp, #68	; 0x44
 8009e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e94:	4642      	mov	r2, r8
 8009e96:	4653      	mov	r3, sl
 8009e98:	4640      	mov	r0, r8
 8009e9a:	4651      	mov	r1, sl
 8009e9c:	f7f6 fdb6 	bl	8000a0c <__aeabi_dcmpun>
 8009ea0:	b148      	cbz	r0, 8009eb6 <_printf_float+0xe2>
 8009ea2:	f1ba 0f00 	cmp.w	sl, #0
 8009ea6:	bfb8      	it	lt
 8009ea8:	232d      	movlt	r3, #45	; 0x2d
 8009eaa:	4880      	ldr	r0, [pc, #512]	; (800a0ac <_printf_float+0x2d8>)
 8009eac:	bfb8      	it	lt
 8009eae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009eb2:	4b7f      	ldr	r3, [pc, #508]	; (800a0b0 <_printf_float+0x2dc>)
 8009eb4:	e7d3      	b.n	8009e5e <_printf_float+0x8a>
 8009eb6:	6863      	ldr	r3, [r4, #4]
 8009eb8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009ebc:	1c5a      	adds	r2, r3, #1
 8009ebe:	d142      	bne.n	8009f46 <_printf_float+0x172>
 8009ec0:	2306      	movs	r3, #6
 8009ec2:	6063      	str	r3, [r4, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	9206      	str	r2, [sp, #24]
 8009ec8:	aa0e      	add	r2, sp, #56	; 0x38
 8009eca:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009ece:	aa0d      	add	r2, sp, #52	; 0x34
 8009ed0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009ed4:	9203      	str	r2, [sp, #12]
 8009ed6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009eda:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009ede:	6023      	str	r3, [r4, #0]
 8009ee0:	6863      	ldr	r3, [r4, #4]
 8009ee2:	4642      	mov	r2, r8
 8009ee4:	9300      	str	r3, [sp, #0]
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	4653      	mov	r3, sl
 8009eea:	910b      	str	r1, [sp, #44]	; 0x2c
 8009eec:	f7ff fed4 	bl	8009c98 <__cvt>
 8009ef0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ef2:	4680      	mov	r8, r0
 8009ef4:	2947      	cmp	r1, #71	; 0x47
 8009ef6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009ef8:	d108      	bne.n	8009f0c <_printf_float+0x138>
 8009efa:	1cc8      	adds	r0, r1, #3
 8009efc:	db02      	blt.n	8009f04 <_printf_float+0x130>
 8009efe:	6863      	ldr	r3, [r4, #4]
 8009f00:	4299      	cmp	r1, r3
 8009f02:	dd40      	ble.n	8009f86 <_printf_float+0x1b2>
 8009f04:	f1a9 0902 	sub.w	r9, r9, #2
 8009f08:	fa5f f989 	uxtb.w	r9, r9
 8009f0c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009f10:	d81f      	bhi.n	8009f52 <_printf_float+0x17e>
 8009f12:	464a      	mov	r2, r9
 8009f14:	3901      	subs	r1, #1
 8009f16:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009f1a:	910d      	str	r1, [sp, #52]	; 0x34
 8009f1c:	f7ff ff1b 	bl	8009d56 <__exponent>
 8009f20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f22:	4682      	mov	sl, r0
 8009f24:	1813      	adds	r3, r2, r0
 8009f26:	2a01      	cmp	r2, #1
 8009f28:	6123      	str	r3, [r4, #16]
 8009f2a:	dc02      	bgt.n	8009f32 <_printf_float+0x15e>
 8009f2c:	6822      	ldr	r2, [r4, #0]
 8009f2e:	07d2      	lsls	r2, r2, #31
 8009f30:	d501      	bpl.n	8009f36 <_printf_float+0x162>
 8009f32:	3301      	adds	r3, #1
 8009f34:	6123      	str	r3, [r4, #16]
 8009f36:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d09b      	beq.n	8009e76 <_printf_float+0xa2>
 8009f3e:	232d      	movs	r3, #45	; 0x2d
 8009f40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f44:	e797      	b.n	8009e76 <_printf_float+0xa2>
 8009f46:	2947      	cmp	r1, #71	; 0x47
 8009f48:	d1bc      	bne.n	8009ec4 <_printf_float+0xf0>
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d1ba      	bne.n	8009ec4 <_printf_float+0xf0>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e7b7      	b.n	8009ec2 <_printf_float+0xee>
 8009f52:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009f56:	d118      	bne.n	8009f8a <_printf_float+0x1b6>
 8009f58:	2900      	cmp	r1, #0
 8009f5a:	6863      	ldr	r3, [r4, #4]
 8009f5c:	dd0b      	ble.n	8009f76 <_printf_float+0x1a2>
 8009f5e:	6121      	str	r1, [r4, #16]
 8009f60:	b913      	cbnz	r3, 8009f68 <_printf_float+0x194>
 8009f62:	6822      	ldr	r2, [r4, #0]
 8009f64:	07d0      	lsls	r0, r2, #31
 8009f66:	d502      	bpl.n	8009f6e <_printf_float+0x19a>
 8009f68:	3301      	adds	r3, #1
 8009f6a:	440b      	add	r3, r1
 8009f6c:	6123      	str	r3, [r4, #16]
 8009f6e:	f04f 0a00 	mov.w	sl, #0
 8009f72:	65a1      	str	r1, [r4, #88]	; 0x58
 8009f74:	e7df      	b.n	8009f36 <_printf_float+0x162>
 8009f76:	b913      	cbnz	r3, 8009f7e <_printf_float+0x1aa>
 8009f78:	6822      	ldr	r2, [r4, #0]
 8009f7a:	07d2      	lsls	r2, r2, #31
 8009f7c:	d501      	bpl.n	8009f82 <_printf_float+0x1ae>
 8009f7e:	3302      	adds	r3, #2
 8009f80:	e7f4      	b.n	8009f6c <_printf_float+0x198>
 8009f82:	2301      	movs	r3, #1
 8009f84:	e7f2      	b.n	8009f6c <_printf_float+0x198>
 8009f86:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009f8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f8c:	4299      	cmp	r1, r3
 8009f8e:	db05      	blt.n	8009f9c <_printf_float+0x1c8>
 8009f90:	6823      	ldr	r3, [r4, #0]
 8009f92:	6121      	str	r1, [r4, #16]
 8009f94:	07d8      	lsls	r0, r3, #31
 8009f96:	d5ea      	bpl.n	8009f6e <_printf_float+0x19a>
 8009f98:	1c4b      	adds	r3, r1, #1
 8009f9a:	e7e7      	b.n	8009f6c <_printf_float+0x198>
 8009f9c:	2900      	cmp	r1, #0
 8009f9e:	bfcc      	ite	gt
 8009fa0:	2201      	movgt	r2, #1
 8009fa2:	f1c1 0202 	rsble	r2, r1, #2
 8009fa6:	4413      	add	r3, r2
 8009fa8:	e7e0      	b.n	8009f6c <_printf_float+0x198>
 8009faa:	6823      	ldr	r3, [r4, #0]
 8009fac:	055a      	lsls	r2, r3, #21
 8009fae:	d407      	bmi.n	8009fc0 <_printf_float+0x1ec>
 8009fb0:	6923      	ldr	r3, [r4, #16]
 8009fb2:	4642      	mov	r2, r8
 8009fb4:	4631      	mov	r1, r6
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	47b8      	blx	r7
 8009fba:	3001      	adds	r0, #1
 8009fbc:	d12b      	bne.n	800a016 <_printf_float+0x242>
 8009fbe:	e764      	b.n	8009e8a <_printf_float+0xb6>
 8009fc0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009fc4:	f240 80dd 	bls.w	800a182 <_printf_float+0x3ae>
 8009fc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009fcc:	2200      	movs	r2, #0
 8009fce:	2300      	movs	r3, #0
 8009fd0:	f7f6 fcea 	bl	80009a8 <__aeabi_dcmpeq>
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	d033      	beq.n	800a040 <_printf_float+0x26c>
 8009fd8:	2301      	movs	r3, #1
 8009fda:	4631      	mov	r1, r6
 8009fdc:	4628      	mov	r0, r5
 8009fde:	4a35      	ldr	r2, [pc, #212]	; (800a0b4 <_printf_float+0x2e0>)
 8009fe0:	47b8      	blx	r7
 8009fe2:	3001      	adds	r0, #1
 8009fe4:	f43f af51 	beq.w	8009e8a <_printf_float+0xb6>
 8009fe8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009fec:	429a      	cmp	r2, r3
 8009fee:	db02      	blt.n	8009ff6 <_printf_float+0x222>
 8009ff0:	6823      	ldr	r3, [r4, #0]
 8009ff2:	07d8      	lsls	r0, r3, #31
 8009ff4:	d50f      	bpl.n	800a016 <_printf_float+0x242>
 8009ff6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ffa:	4631      	mov	r1, r6
 8009ffc:	4628      	mov	r0, r5
 8009ffe:	47b8      	blx	r7
 800a000:	3001      	adds	r0, #1
 800a002:	f43f af42 	beq.w	8009e8a <_printf_float+0xb6>
 800a006:	f04f 0800 	mov.w	r8, #0
 800a00a:	f104 091a 	add.w	r9, r4, #26
 800a00e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a010:	3b01      	subs	r3, #1
 800a012:	4543      	cmp	r3, r8
 800a014:	dc09      	bgt.n	800a02a <_printf_float+0x256>
 800a016:	6823      	ldr	r3, [r4, #0]
 800a018:	079b      	lsls	r3, r3, #30
 800a01a:	f100 8102 	bmi.w	800a222 <_printf_float+0x44e>
 800a01e:	68e0      	ldr	r0, [r4, #12]
 800a020:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a022:	4298      	cmp	r0, r3
 800a024:	bfb8      	it	lt
 800a026:	4618      	movlt	r0, r3
 800a028:	e731      	b.n	8009e8e <_printf_float+0xba>
 800a02a:	2301      	movs	r3, #1
 800a02c:	464a      	mov	r2, r9
 800a02e:	4631      	mov	r1, r6
 800a030:	4628      	mov	r0, r5
 800a032:	47b8      	blx	r7
 800a034:	3001      	adds	r0, #1
 800a036:	f43f af28 	beq.w	8009e8a <_printf_float+0xb6>
 800a03a:	f108 0801 	add.w	r8, r8, #1
 800a03e:	e7e6      	b.n	800a00e <_printf_float+0x23a>
 800a040:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a042:	2b00      	cmp	r3, #0
 800a044:	dc38      	bgt.n	800a0b8 <_printf_float+0x2e4>
 800a046:	2301      	movs	r3, #1
 800a048:	4631      	mov	r1, r6
 800a04a:	4628      	mov	r0, r5
 800a04c:	4a19      	ldr	r2, [pc, #100]	; (800a0b4 <_printf_float+0x2e0>)
 800a04e:	47b8      	blx	r7
 800a050:	3001      	adds	r0, #1
 800a052:	f43f af1a 	beq.w	8009e8a <_printf_float+0xb6>
 800a056:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a05a:	4313      	orrs	r3, r2
 800a05c:	d102      	bne.n	800a064 <_printf_float+0x290>
 800a05e:	6823      	ldr	r3, [r4, #0]
 800a060:	07d9      	lsls	r1, r3, #31
 800a062:	d5d8      	bpl.n	800a016 <_printf_float+0x242>
 800a064:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a068:	4631      	mov	r1, r6
 800a06a:	4628      	mov	r0, r5
 800a06c:	47b8      	blx	r7
 800a06e:	3001      	adds	r0, #1
 800a070:	f43f af0b 	beq.w	8009e8a <_printf_float+0xb6>
 800a074:	f04f 0900 	mov.w	r9, #0
 800a078:	f104 0a1a 	add.w	sl, r4, #26
 800a07c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a07e:	425b      	negs	r3, r3
 800a080:	454b      	cmp	r3, r9
 800a082:	dc01      	bgt.n	800a088 <_printf_float+0x2b4>
 800a084:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a086:	e794      	b.n	8009fb2 <_printf_float+0x1de>
 800a088:	2301      	movs	r3, #1
 800a08a:	4652      	mov	r2, sl
 800a08c:	4631      	mov	r1, r6
 800a08e:	4628      	mov	r0, r5
 800a090:	47b8      	blx	r7
 800a092:	3001      	adds	r0, #1
 800a094:	f43f aef9 	beq.w	8009e8a <_printf_float+0xb6>
 800a098:	f109 0901 	add.w	r9, r9, #1
 800a09c:	e7ee      	b.n	800a07c <_printf_float+0x2a8>
 800a09e:	bf00      	nop
 800a0a0:	7fefffff 	.word	0x7fefffff
 800a0a4:	0800e5b0 	.word	0x0800e5b0
 800a0a8:	0800e5b4 	.word	0x0800e5b4
 800a0ac:	0800e5bc 	.word	0x0800e5bc
 800a0b0:	0800e5b8 	.word	0x0800e5b8
 800a0b4:	0800e5c0 	.word	0x0800e5c0
 800a0b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	bfa8      	it	ge
 800a0c0:	461a      	movge	r2, r3
 800a0c2:	2a00      	cmp	r2, #0
 800a0c4:	4691      	mov	r9, r2
 800a0c6:	dc37      	bgt.n	800a138 <_printf_float+0x364>
 800a0c8:	f04f 0b00 	mov.w	fp, #0
 800a0cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0d0:	f104 021a 	add.w	r2, r4, #26
 800a0d4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a0d8:	ebaa 0309 	sub.w	r3, sl, r9
 800a0dc:	455b      	cmp	r3, fp
 800a0de:	dc33      	bgt.n	800a148 <_printf_float+0x374>
 800a0e0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	db3b      	blt.n	800a160 <_printf_float+0x38c>
 800a0e8:	6823      	ldr	r3, [r4, #0]
 800a0ea:	07da      	lsls	r2, r3, #31
 800a0ec:	d438      	bmi.n	800a160 <_printf_float+0x38c>
 800a0ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a0f2:	eba3 020a 	sub.w	r2, r3, sl
 800a0f6:	eba3 0901 	sub.w	r9, r3, r1
 800a0fa:	4591      	cmp	r9, r2
 800a0fc:	bfa8      	it	ge
 800a0fe:	4691      	movge	r9, r2
 800a100:	f1b9 0f00 	cmp.w	r9, #0
 800a104:	dc34      	bgt.n	800a170 <_printf_float+0x39c>
 800a106:	f04f 0800 	mov.w	r8, #0
 800a10a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a10e:	f104 0a1a 	add.w	sl, r4, #26
 800a112:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a116:	1a9b      	subs	r3, r3, r2
 800a118:	eba3 0309 	sub.w	r3, r3, r9
 800a11c:	4543      	cmp	r3, r8
 800a11e:	f77f af7a 	ble.w	800a016 <_printf_float+0x242>
 800a122:	2301      	movs	r3, #1
 800a124:	4652      	mov	r2, sl
 800a126:	4631      	mov	r1, r6
 800a128:	4628      	mov	r0, r5
 800a12a:	47b8      	blx	r7
 800a12c:	3001      	adds	r0, #1
 800a12e:	f43f aeac 	beq.w	8009e8a <_printf_float+0xb6>
 800a132:	f108 0801 	add.w	r8, r8, #1
 800a136:	e7ec      	b.n	800a112 <_printf_float+0x33e>
 800a138:	4613      	mov	r3, r2
 800a13a:	4631      	mov	r1, r6
 800a13c:	4642      	mov	r2, r8
 800a13e:	4628      	mov	r0, r5
 800a140:	47b8      	blx	r7
 800a142:	3001      	adds	r0, #1
 800a144:	d1c0      	bne.n	800a0c8 <_printf_float+0x2f4>
 800a146:	e6a0      	b.n	8009e8a <_printf_float+0xb6>
 800a148:	2301      	movs	r3, #1
 800a14a:	4631      	mov	r1, r6
 800a14c:	4628      	mov	r0, r5
 800a14e:	920b      	str	r2, [sp, #44]	; 0x2c
 800a150:	47b8      	blx	r7
 800a152:	3001      	adds	r0, #1
 800a154:	f43f ae99 	beq.w	8009e8a <_printf_float+0xb6>
 800a158:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a15a:	f10b 0b01 	add.w	fp, fp, #1
 800a15e:	e7b9      	b.n	800a0d4 <_printf_float+0x300>
 800a160:	4631      	mov	r1, r6
 800a162:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a166:	4628      	mov	r0, r5
 800a168:	47b8      	blx	r7
 800a16a:	3001      	adds	r0, #1
 800a16c:	d1bf      	bne.n	800a0ee <_printf_float+0x31a>
 800a16e:	e68c      	b.n	8009e8a <_printf_float+0xb6>
 800a170:	464b      	mov	r3, r9
 800a172:	4631      	mov	r1, r6
 800a174:	4628      	mov	r0, r5
 800a176:	eb08 020a 	add.w	r2, r8, sl
 800a17a:	47b8      	blx	r7
 800a17c:	3001      	adds	r0, #1
 800a17e:	d1c2      	bne.n	800a106 <_printf_float+0x332>
 800a180:	e683      	b.n	8009e8a <_printf_float+0xb6>
 800a182:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a184:	2a01      	cmp	r2, #1
 800a186:	dc01      	bgt.n	800a18c <_printf_float+0x3b8>
 800a188:	07db      	lsls	r3, r3, #31
 800a18a:	d537      	bpl.n	800a1fc <_printf_float+0x428>
 800a18c:	2301      	movs	r3, #1
 800a18e:	4642      	mov	r2, r8
 800a190:	4631      	mov	r1, r6
 800a192:	4628      	mov	r0, r5
 800a194:	47b8      	blx	r7
 800a196:	3001      	adds	r0, #1
 800a198:	f43f ae77 	beq.w	8009e8a <_printf_float+0xb6>
 800a19c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1a0:	4631      	mov	r1, r6
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	47b8      	blx	r7
 800a1a6:	3001      	adds	r0, #1
 800a1a8:	f43f ae6f 	beq.w	8009e8a <_printf_float+0xb6>
 800a1ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	f7f6 fbf8 	bl	80009a8 <__aeabi_dcmpeq>
 800a1b8:	b9d8      	cbnz	r0, 800a1f2 <_printf_float+0x41e>
 800a1ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1bc:	f108 0201 	add.w	r2, r8, #1
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	4631      	mov	r1, r6
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	47b8      	blx	r7
 800a1c8:	3001      	adds	r0, #1
 800a1ca:	d10e      	bne.n	800a1ea <_printf_float+0x416>
 800a1cc:	e65d      	b.n	8009e8a <_printf_float+0xb6>
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	464a      	mov	r2, r9
 800a1d2:	4631      	mov	r1, r6
 800a1d4:	4628      	mov	r0, r5
 800a1d6:	47b8      	blx	r7
 800a1d8:	3001      	adds	r0, #1
 800a1da:	f43f ae56 	beq.w	8009e8a <_printf_float+0xb6>
 800a1de:	f108 0801 	add.w	r8, r8, #1
 800a1e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1e4:	3b01      	subs	r3, #1
 800a1e6:	4543      	cmp	r3, r8
 800a1e8:	dcf1      	bgt.n	800a1ce <_printf_float+0x3fa>
 800a1ea:	4653      	mov	r3, sl
 800a1ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a1f0:	e6e0      	b.n	8009fb4 <_printf_float+0x1e0>
 800a1f2:	f04f 0800 	mov.w	r8, #0
 800a1f6:	f104 091a 	add.w	r9, r4, #26
 800a1fa:	e7f2      	b.n	800a1e2 <_printf_float+0x40e>
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	4642      	mov	r2, r8
 800a200:	e7df      	b.n	800a1c2 <_printf_float+0x3ee>
 800a202:	2301      	movs	r3, #1
 800a204:	464a      	mov	r2, r9
 800a206:	4631      	mov	r1, r6
 800a208:	4628      	mov	r0, r5
 800a20a:	47b8      	blx	r7
 800a20c:	3001      	adds	r0, #1
 800a20e:	f43f ae3c 	beq.w	8009e8a <_printf_float+0xb6>
 800a212:	f108 0801 	add.w	r8, r8, #1
 800a216:	68e3      	ldr	r3, [r4, #12]
 800a218:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a21a:	1a5b      	subs	r3, r3, r1
 800a21c:	4543      	cmp	r3, r8
 800a21e:	dcf0      	bgt.n	800a202 <_printf_float+0x42e>
 800a220:	e6fd      	b.n	800a01e <_printf_float+0x24a>
 800a222:	f04f 0800 	mov.w	r8, #0
 800a226:	f104 0919 	add.w	r9, r4, #25
 800a22a:	e7f4      	b.n	800a216 <_printf_float+0x442>

0800a22c <_printf_common>:
 800a22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a230:	4616      	mov	r6, r2
 800a232:	4699      	mov	r9, r3
 800a234:	688a      	ldr	r2, [r1, #8]
 800a236:	690b      	ldr	r3, [r1, #16]
 800a238:	4607      	mov	r7, r0
 800a23a:	4293      	cmp	r3, r2
 800a23c:	bfb8      	it	lt
 800a23e:	4613      	movlt	r3, r2
 800a240:	6033      	str	r3, [r6, #0]
 800a242:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a246:	460c      	mov	r4, r1
 800a248:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a24c:	b10a      	cbz	r2, 800a252 <_printf_common+0x26>
 800a24e:	3301      	adds	r3, #1
 800a250:	6033      	str	r3, [r6, #0]
 800a252:	6823      	ldr	r3, [r4, #0]
 800a254:	0699      	lsls	r1, r3, #26
 800a256:	bf42      	ittt	mi
 800a258:	6833      	ldrmi	r3, [r6, #0]
 800a25a:	3302      	addmi	r3, #2
 800a25c:	6033      	strmi	r3, [r6, #0]
 800a25e:	6825      	ldr	r5, [r4, #0]
 800a260:	f015 0506 	ands.w	r5, r5, #6
 800a264:	d106      	bne.n	800a274 <_printf_common+0x48>
 800a266:	f104 0a19 	add.w	sl, r4, #25
 800a26a:	68e3      	ldr	r3, [r4, #12]
 800a26c:	6832      	ldr	r2, [r6, #0]
 800a26e:	1a9b      	subs	r3, r3, r2
 800a270:	42ab      	cmp	r3, r5
 800a272:	dc28      	bgt.n	800a2c6 <_printf_common+0x9a>
 800a274:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a278:	1e13      	subs	r3, r2, #0
 800a27a:	6822      	ldr	r2, [r4, #0]
 800a27c:	bf18      	it	ne
 800a27e:	2301      	movne	r3, #1
 800a280:	0692      	lsls	r2, r2, #26
 800a282:	d42d      	bmi.n	800a2e0 <_printf_common+0xb4>
 800a284:	4649      	mov	r1, r9
 800a286:	4638      	mov	r0, r7
 800a288:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a28c:	47c0      	blx	r8
 800a28e:	3001      	adds	r0, #1
 800a290:	d020      	beq.n	800a2d4 <_printf_common+0xa8>
 800a292:	6823      	ldr	r3, [r4, #0]
 800a294:	68e5      	ldr	r5, [r4, #12]
 800a296:	f003 0306 	and.w	r3, r3, #6
 800a29a:	2b04      	cmp	r3, #4
 800a29c:	bf18      	it	ne
 800a29e:	2500      	movne	r5, #0
 800a2a0:	6832      	ldr	r2, [r6, #0]
 800a2a2:	f04f 0600 	mov.w	r6, #0
 800a2a6:	68a3      	ldr	r3, [r4, #8]
 800a2a8:	bf08      	it	eq
 800a2aa:	1aad      	subeq	r5, r5, r2
 800a2ac:	6922      	ldr	r2, [r4, #16]
 800a2ae:	bf08      	it	eq
 800a2b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	bfc4      	itt	gt
 800a2b8:	1a9b      	subgt	r3, r3, r2
 800a2ba:	18ed      	addgt	r5, r5, r3
 800a2bc:	341a      	adds	r4, #26
 800a2be:	42b5      	cmp	r5, r6
 800a2c0:	d11a      	bne.n	800a2f8 <_printf_common+0xcc>
 800a2c2:	2000      	movs	r0, #0
 800a2c4:	e008      	b.n	800a2d8 <_printf_common+0xac>
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	4652      	mov	r2, sl
 800a2ca:	4649      	mov	r1, r9
 800a2cc:	4638      	mov	r0, r7
 800a2ce:	47c0      	blx	r8
 800a2d0:	3001      	adds	r0, #1
 800a2d2:	d103      	bne.n	800a2dc <_printf_common+0xb0>
 800a2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2dc:	3501      	adds	r5, #1
 800a2de:	e7c4      	b.n	800a26a <_printf_common+0x3e>
 800a2e0:	2030      	movs	r0, #48	; 0x30
 800a2e2:	18e1      	adds	r1, r4, r3
 800a2e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2e8:	1c5a      	adds	r2, r3, #1
 800a2ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2ee:	4422      	add	r2, r4
 800a2f0:	3302      	adds	r3, #2
 800a2f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a2f6:	e7c5      	b.n	800a284 <_printf_common+0x58>
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	4622      	mov	r2, r4
 800a2fc:	4649      	mov	r1, r9
 800a2fe:	4638      	mov	r0, r7
 800a300:	47c0      	blx	r8
 800a302:	3001      	adds	r0, #1
 800a304:	d0e6      	beq.n	800a2d4 <_printf_common+0xa8>
 800a306:	3601      	adds	r6, #1
 800a308:	e7d9      	b.n	800a2be <_printf_common+0x92>
	...

0800a30c <_printf_i>:
 800a30c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a310:	7e0f      	ldrb	r7, [r1, #24]
 800a312:	4691      	mov	r9, r2
 800a314:	2f78      	cmp	r7, #120	; 0x78
 800a316:	4680      	mov	r8, r0
 800a318:	460c      	mov	r4, r1
 800a31a:	469a      	mov	sl, r3
 800a31c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a31e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a322:	d807      	bhi.n	800a334 <_printf_i+0x28>
 800a324:	2f62      	cmp	r7, #98	; 0x62
 800a326:	d80a      	bhi.n	800a33e <_printf_i+0x32>
 800a328:	2f00      	cmp	r7, #0
 800a32a:	f000 80d9 	beq.w	800a4e0 <_printf_i+0x1d4>
 800a32e:	2f58      	cmp	r7, #88	; 0x58
 800a330:	f000 80a4 	beq.w	800a47c <_printf_i+0x170>
 800a334:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a338:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a33c:	e03a      	b.n	800a3b4 <_printf_i+0xa8>
 800a33e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a342:	2b15      	cmp	r3, #21
 800a344:	d8f6      	bhi.n	800a334 <_printf_i+0x28>
 800a346:	a101      	add	r1, pc, #4	; (adr r1, 800a34c <_printf_i+0x40>)
 800a348:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a34c:	0800a3a5 	.word	0x0800a3a5
 800a350:	0800a3b9 	.word	0x0800a3b9
 800a354:	0800a335 	.word	0x0800a335
 800a358:	0800a335 	.word	0x0800a335
 800a35c:	0800a335 	.word	0x0800a335
 800a360:	0800a335 	.word	0x0800a335
 800a364:	0800a3b9 	.word	0x0800a3b9
 800a368:	0800a335 	.word	0x0800a335
 800a36c:	0800a335 	.word	0x0800a335
 800a370:	0800a335 	.word	0x0800a335
 800a374:	0800a335 	.word	0x0800a335
 800a378:	0800a4c7 	.word	0x0800a4c7
 800a37c:	0800a3e9 	.word	0x0800a3e9
 800a380:	0800a4a9 	.word	0x0800a4a9
 800a384:	0800a335 	.word	0x0800a335
 800a388:	0800a335 	.word	0x0800a335
 800a38c:	0800a4e9 	.word	0x0800a4e9
 800a390:	0800a335 	.word	0x0800a335
 800a394:	0800a3e9 	.word	0x0800a3e9
 800a398:	0800a335 	.word	0x0800a335
 800a39c:	0800a335 	.word	0x0800a335
 800a3a0:	0800a4b1 	.word	0x0800a4b1
 800a3a4:	682b      	ldr	r3, [r5, #0]
 800a3a6:	1d1a      	adds	r2, r3, #4
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	602a      	str	r2, [r5, #0]
 800a3ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e0a4      	b.n	800a502 <_printf_i+0x1f6>
 800a3b8:	6820      	ldr	r0, [r4, #0]
 800a3ba:	6829      	ldr	r1, [r5, #0]
 800a3bc:	0606      	lsls	r6, r0, #24
 800a3be:	f101 0304 	add.w	r3, r1, #4
 800a3c2:	d50a      	bpl.n	800a3da <_printf_i+0xce>
 800a3c4:	680e      	ldr	r6, [r1, #0]
 800a3c6:	602b      	str	r3, [r5, #0]
 800a3c8:	2e00      	cmp	r6, #0
 800a3ca:	da03      	bge.n	800a3d4 <_printf_i+0xc8>
 800a3cc:	232d      	movs	r3, #45	; 0x2d
 800a3ce:	4276      	negs	r6, r6
 800a3d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3d4:	230a      	movs	r3, #10
 800a3d6:	485e      	ldr	r0, [pc, #376]	; (800a550 <_printf_i+0x244>)
 800a3d8:	e019      	b.n	800a40e <_printf_i+0x102>
 800a3da:	680e      	ldr	r6, [r1, #0]
 800a3dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a3e0:	602b      	str	r3, [r5, #0]
 800a3e2:	bf18      	it	ne
 800a3e4:	b236      	sxthne	r6, r6
 800a3e6:	e7ef      	b.n	800a3c8 <_printf_i+0xbc>
 800a3e8:	682b      	ldr	r3, [r5, #0]
 800a3ea:	6820      	ldr	r0, [r4, #0]
 800a3ec:	1d19      	adds	r1, r3, #4
 800a3ee:	6029      	str	r1, [r5, #0]
 800a3f0:	0601      	lsls	r1, r0, #24
 800a3f2:	d501      	bpl.n	800a3f8 <_printf_i+0xec>
 800a3f4:	681e      	ldr	r6, [r3, #0]
 800a3f6:	e002      	b.n	800a3fe <_printf_i+0xf2>
 800a3f8:	0646      	lsls	r6, r0, #25
 800a3fa:	d5fb      	bpl.n	800a3f4 <_printf_i+0xe8>
 800a3fc:	881e      	ldrh	r6, [r3, #0]
 800a3fe:	2f6f      	cmp	r7, #111	; 0x6f
 800a400:	bf0c      	ite	eq
 800a402:	2308      	moveq	r3, #8
 800a404:	230a      	movne	r3, #10
 800a406:	4852      	ldr	r0, [pc, #328]	; (800a550 <_printf_i+0x244>)
 800a408:	2100      	movs	r1, #0
 800a40a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a40e:	6865      	ldr	r5, [r4, #4]
 800a410:	2d00      	cmp	r5, #0
 800a412:	bfa8      	it	ge
 800a414:	6821      	ldrge	r1, [r4, #0]
 800a416:	60a5      	str	r5, [r4, #8]
 800a418:	bfa4      	itt	ge
 800a41a:	f021 0104 	bicge.w	r1, r1, #4
 800a41e:	6021      	strge	r1, [r4, #0]
 800a420:	b90e      	cbnz	r6, 800a426 <_printf_i+0x11a>
 800a422:	2d00      	cmp	r5, #0
 800a424:	d04d      	beq.n	800a4c2 <_printf_i+0x1b6>
 800a426:	4615      	mov	r5, r2
 800a428:	fbb6 f1f3 	udiv	r1, r6, r3
 800a42c:	fb03 6711 	mls	r7, r3, r1, r6
 800a430:	5dc7      	ldrb	r7, [r0, r7]
 800a432:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a436:	4637      	mov	r7, r6
 800a438:	42bb      	cmp	r3, r7
 800a43a:	460e      	mov	r6, r1
 800a43c:	d9f4      	bls.n	800a428 <_printf_i+0x11c>
 800a43e:	2b08      	cmp	r3, #8
 800a440:	d10b      	bne.n	800a45a <_printf_i+0x14e>
 800a442:	6823      	ldr	r3, [r4, #0]
 800a444:	07de      	lsls	r6, r3, #31
 800a446:	d508      	bpl.n	800a45a <_printf_i+0x14e>
 800a448:	6923      	ldr	r3, [r4, #16]
 800a44a:	6861      	ldr	r1, [r4, #4]
 800a44c:	4299      	cmp	r1, r3
 800a44e:	bfde      	ittt	le
 800a450:	2330      	movle	r3, #48	; 0x30
 800a452:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a456:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a45a:	1b52      	subs	r2, r2, r5
 800a45c:	6122      	str	r2, [r4, #16]
 800a45e:	464b      	mov	r3, r9
 800a460:	4621      	mov	r1, r4
 800a462:	4640      	mov	r0, r8
 800a464:	f8cd a000 	str.w	sl, [sp]
 800a468:	aa03      	add	r2, sp, #12
 800a46a:	f7ff fedf 	bl	800a22c <_printf_common>
 800a46e:	3001      	adds	r0, #1
 800a470:	d14c      	bne.n	800a50c <_printf_i+0x200>
 800a472:	f04f 30ff 	mov.w	r0, #4294967295
 800a476:	b004      	add	sp, #16
 800a478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a47c:	4834      	ldr	r0, [pc, #208]	; (800a550 <_printf_i+0x244>)
 800a47e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a482:	6829      	ldr	r1, [r5, #0]
 800a484:	6823      	ldr	r3, [r4, #0]
 800a486:	f851 6b04 	ldr.w	r6, [r1], #4
 800a48a:	6029      	str	r1, [r5, #0]
 800a48c:	061d      	lsls	r5, r3, #24
 800a48e:	d514      	bpl.n	800a4ba <_printf_i+0x1ae>
 800a490:	07df      	lsls	r7, r3, #31
 800a492:	bf44      	itt	mi
 800a494:	f043 0320 	orrmi.w	r3, r3, #32
 800a498:	6023      	strmi	r3, [r4, #0]
 800a49a:	b91e      	cbnz	r6, 800a4a4 <_printf_i+0x198>
 800a49c:	6823      	ldr	r3, [r4, #0]
 800a49e:	f023 0320 	bic.w	r3, r3, #32
 800a4a2:	6023      	str	r3, [r4, #0]
 800a4a4:	2310      	movs	r3, #16
 800a4a6:	e7af      	b.n	800a408 <_printf_i+0xfc>
 800a4a8:	6823      	ldr	r3, [r4, #0]
 800a4aa:	f043 0320 	orr.w	r3, r3, #32
 800a4ae:	6023      	str	r3, [r4, #0]
 800a4b0:	2378      	movs	r3, #120	; 0x78
 800a4b2:	4828      	ldr	r0, [pc, #160]	; (800a554 <_printf_i+0x248>)
 800a4b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a4b8:	e7e3      	b.n	800a482 <_printf_i+0x176>
 800a4ba:	0659      	lsls	r1, r3, #25
 800a4bc:	bf48      	it	mi
 800a4be:	b2b6      	uxthmi	r6, r6
 800a4c0:	e7e6      	b.n	800a490 <_printf_i+0x184>
 800a4c2:	4615      	mov	r5, r2
 800a4c4:	e7bb      	b.n	800a43e <_printf_i+0x132>
 800a4c6:	682b      	ldr	r3, [r5, #0]
 800a4c8:	6826      	ldr	r6, [r4, #0]
 800a4ca:	1d18      	adds	r0, r3, #4
 800a4cc:	6961      	ldr	r1, [r4, #20]
 800a4ce:	6028      	str	r0, [r5, #0]
 800a4d0:	0635      	lsls	r5, r6, #24
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	d501      	bpl.n	800a4da <_printf_i+0x1ce>
 800a4d6:	6019      	str	r1, [r3, #0]
 800a4d8:	e002      	b.n	800a4e0 <_printf_i+0x1d4>
 800a4da:	0670      	lsls	r0, r6, #25
 800a4dc:	d5fb      	bpl.n	800a4d6 <_printf_i+0x1ca>
 800a4de:	8019      	strh	r1, [r3, #0]
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	4615      	mov	r5, r2
 800a4e4:	6123      	str	r3, [r4, #16]
 800a4e6:	e7ba      	b.n	800a45e <_printf_i+0x152>
 800a4e8:	682b      	ldr	r3, [r5, #0]
 800a4ea:	2100      	movs	r1, #0
 800a4ec:	1d1a      	adds	r2, r3, #4
 800a4ee:	602a      	str	r2, [r5, #0]
 800a4f0:	681d      	ldr	r5, [r3, #0]
 800a4f2:	6862      	ldr	r2, [r4, #4]
 800a4f4:	4628      	mov	r0, r5
 800a4f6:	f002 faed 	bl	800cad4 <memchr>
 800a4fa:	b108      	cbz	r0, 800a500 <_printf_i+0x1f4>
 800a4fc:	1b40      	subs	r0, r0, r5
 800a4fe:	6060      	str	r0, [r4, #4]
 800a500:	6863      	ldr	r3, [r4, #4]
 800a502:	6123      	str	r3, [r4, #16]
 800a504:	2300      	movs	r3, #0
 800a506:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a50a:	e7a8      	b.n	800a45e <_printf_i+0x152>
 800a50c:	462a      	mov	r2, r5
 800a50e:	4649      	mov	r1, r9
 800a510:	4640      	mov	r0, r8
 800a512:	6923      	ldr	r3, [r4, #16]
 800a514:	47d0      	blx	sl
 800a516:	3001      	adds	r0, #1
 800a518:	d0ab      	beq.n	800a472 <_printf_i+0x166>
 800a51a:	6823      	ldr	r3, [r4, #0]
 800a51c:	079b      	lsls	r3, r3, #30
 800a51e:	d413      	bmi.n	800a548 <_printf_i+0x23c>
 800a520:	68e0      	ldr	r0, [r4, #12]
 800a522:	9b03      	ldr	r3, [sp, #12]
 800a524:	4298      	cmp	r0, r3
 800a526:	bfb8      	it	lt
 800a528:	4618      	movlt	r0, r3
 800a52a:	e7a4      	b.n	800a476 <_printf_i+0x16a>
 800a52c:	2301      	movs	r3, #1
 800a52e:	4632      	mov	r2, r6
 800a530:	4649      	mov	r1, r9
 800a532:	4640      	mov	r0, r8
 800a534:	47d0      	blx	sl
 800a536:	3001      	adds	r0, #1
 800a538:	d09b      	beq.n	800a472 <_printf_i+0x166>
 800a53a:	3501      	adds	r5, #1
 800a53c:	68e3      	ldr	r3, [r4, #12]
 800a53e:	9903      	ldr	r1, [sp, #12]
 800a540:	1a5b      	subs	r3, r3, r1
 800a542:	42ab      	cmp	r3, r5
 800a544:	dcf2      	bgt.n	800a52c <_printf_i+0x220>
 800a546:	e7eb      	b.n	800a520 <_printf_i+0x214>
 800a548:	2500      	movs	r5, #0
 800a54a:	f104 0619 	add.w	r6, r4, #25
 800a54e:	e7f5      	b.n	800a53c <_printf_i+0x230>
 800a550:	0800e5c2 	.word	0x0800e5c2
 800a554:	0800e5d3 	.word	0x0800e5d3

0800a558 <_scanf_float>:
 800a558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a55c:	b087      	sub	sp, #28
 800a55e:	9303      	str	r3, [sp, #12]
 800a560:	688b      	ldr	r3, [r1, #8]
 800a562:	4617      	mov	r7, r2
 800a564:	1e5a      	subs	r2, r3, #1
 800a566:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a56a:	bf85      	ittet	hi
 800a56c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a570:	195b      	addhi	r3, r3, r5
 800a572:	2300      	movls	r3, #0
 800a574:	9302      	strhi	r3, [sp, #8]
 800a576:	bf88      	it	hi
 800a578:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a57c:	468b      	mov	fp, r1
 800a57e:	f04f 0500 	mov.w	r5, #0
 800a582:	bf8c      	ite	hi
 800a584:	608b      	strhi	r3, [r1, #8]
 800a586:	9302      	strls	r3, [sp, #8]
 800a588:	680b      	ldr	r3, [r1, #0]
 800a58a:	4680      	mov	r8, r0
 800a58c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a590:	f84b 3b1c 	str.w	r3, [fp], #28
 800a594:	460c      	mov	r4, r1
 800a596:	465e      	mov	r6, fp
 800a598:	46aa      	mov	sl, r5
 800a59a:	46a9      	mov	r9, r5
 800a59c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a5a0:	9501      	str	r5, [sp, #4]
 800a5a2:	68a2      	ldr	r2, [r4, #8]
 800a5a4:	b152      	cbz	r2, 800a5bc <_scanf_float+0x64>
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	2b4e      	cmp	r3, #78	; 0x4e
 800a5ac:	d864      	bhi.n	800a678 <_scanf_float+0x120>
 800a5ae:	2b40      	cmp	r3, #64	; 0x40
 800a5b0:	d83c      	bhi.n	800a62c <_scanf_float+0xd4>
 800a5b2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a5b6:	b2c8      	uxtb	r0, r1
 800a5b8:	280e      	cmp	r0, #14
 800a5ba:	d93a      	bls.n	800a632 <_scanf_float+0xda>
 800a5bc:	f1b9 0f00 	cmp.w	r9, #0
 800a5c0:	d003      	beq.n	800a5ca <_scanf_float+0x72>
 800a5c2:	6823      	ldr	r3, [r4, #0]
 800a5c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5c8:	6023      	str	r3, [r4, #0]
 800a5ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a5ce:	f1ba 0f01 	cmp.w	sl, #1
 800a5d2:	f200 8113 	bhi.w	800a7fc <_scanf_float+0x2a4>
 800a5d6:	455e      	cmp	r6, fp
 800a5d8:	f200 8105 	bhi.w	800a7e6 <_scanf_float+0x28e>
 800a5dc:	2501      	movs	r5, #1
 800a5de:	4628      	mov	r0, r5
 800a5e0:	b007      	add	sp, #28
 800a5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5e6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a5ea:	2a0d      	cmp	r2, #13
 800a5ec:	d8e6      	bhi.n	800a5bc <_scanf_float+0x64>
 800a5ee:	a101      	add	r1, pc, #4	; (adr r1, 800a5f4 <_scanf_float+0x9c>)
 800a5f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a5f4:	0800a733 	.word	0x0800a733
 800a5f8:	0800a5bd 	.word	0x0800a5bd
 800a5fc:	0800a5bd 	.word	0x0800a5bd
 800a600:	0800a5bd 	.word	0x0800a5bd
 800a604:	0800a793 	.word	0x0800a793
 800a608:	0800a76b 	.word	0x0800a76b
 800a60c:	0800a5bd 	.word	0x0800a5bd
 800a610:	0800a5bd 	.word	0x0800a5bd
 800a614:	0800a741 	.word	0x0800a741
 800a618:	0800a5bd 	.word	0x0800a5bd
 800a61c:	0800a5bd 	.word	0x0800a5bd
 800a620:	0800a5bd 	.word	0x0800a5bd
 800a624:	0800a5bd 	.word	0x0800a5bd
 800a628:	0800a6f9 	.word	0x0800a6f9
 800a62c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a630:	e7db      	b.n	800a5ea <_scanf_float+0x92>
 800a632:	290e      	cmp	r1, #14
 800a634:	d8c2      	bhi.n	800a5bc <_scanf_float+0x64>
 800a636:	a001      	add	r0, pc, #4	; (adr r0, 800a63c <_scanf_float+0xe4>)
 800a638:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a63c:	0800a6eb 	.word	0x0800a6eb
 800a640:	0800a5bd 	.word	0x0800a5bd
 800a644:	0800a6eb 	.word	0x0800a6eb
 800a648:	0800a77f 	.word	0x0800a77f
 800a64c:	0800a5bd 	.word	0x0800a5bd
 800a650:	0800a699 	.word	0x0800a699
 800a654:	0800a6d5 	.word	0x0800a6d5
 800a658:	0800a6d5 	.word	0x0800a6d5
 800a65c:	0800a6d5 	.word	0x0800a6d5
 800a660:	0800a6d5 	.word	0x0800a6d5
 800a664:	0800a6d5 	.word	0x0800a6d5
 800a668:	0800a6d5 	.word	0x0800a6d5
 800a66c:	0800a6d5 	.word	0x0800a6d5
 800a670:	0800a6d5 	.word	0x0800a6d5
 800a674:	0800a6d5 	.word	0x0800a6d5
 800a678:	2b6e      	cmp	r3, #110	; 0x6e
 800a67a:	d809      	bhi.n	800a690 <_scanf_float+0x138>
 800a67c:	2b60      	cmp	r3, #96	; 0x60
 800a67e:	d8b2      	bhi.n	800a5e6 <_scanf_float+0x8e>
 800a680:	2b54      	cmp	r3, #84	; 0x54
 800a682:	d077      	beq.n	800a774 <_scanf_float+0x21c>
 800a684:	2b59      	cmp	r3, #89	; 0x59
 800a686:	d199      	bne.n	800a5bc <_scanf_float+0x64>
 800a688:	2d07      	cmp	r5, #7
 800a68a:	d197      	bne.n	800a5bc <_scanf_float+0x64>
 800a68c:	2508      	movs	r5, #8
 800a68e:	e029      	b.n	800a6e4 <_scanf_float+0x18c>
 800a690:	2b74      	cmp	r3, #116	; 0x74
 800a692:	d06f      	beq.n	800a774 <_scanf_float+0x21c>
 800a694:	2b79      	cmp	r3, #121	; 0x79
 800a696:	e7f6      	b.n	800a686 <_scanf_float+0x12e>
 800a698:	6821      	ldr	r1, [r4, #0]
 800a69a:	05c8      	lsls	r0, r1, #23
 800a69c:	d51a      	bpl.n	800a6d4 <_scanf_float+0x17c>
 800a69e:	9b02      	ldr	r3, [sp, #8]
 800a6a0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a6a4:	6021      	str	r1, [r4, #0]
 800a6a6:	f109 0901 	add.w	r9, r9, #1
 800a6aa:	b11b      	cbz	r3, 800a6b4 <_scanf_float+0x15c>
 800a6ac:	3b01      	subs	r3, #1
 800a6ae:	3201      	adds	r2, #1
 800a6b0:	9302      	str	r3, [sp, #8]
 800a6b2:	60a2      	str	r2, [r4, #8]
 800a6b4:	68a3      	ldr	r3, [r4, #8]
 800a6b6:	3b01      	subs	r3, #1
 800a6b8:	60a3      	str	r3, [r4, #8]
 800a6ba:	6923      	ldr	r3, [r4, #16]
 800a6bc:	3301      	adds	r3, #1
 800a6be:	6123      	str	r3, [r4, #16]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	3b01      	subs	r3, #1
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	607b      	str	r3, [r7, #4]
 800a6c8:	f340 8084 	ble.w	800a7d4 <_scanf_float+0x27c>
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	603b      	str	r3, [r7, #0]
 800a6d2:	e766      	b.n	800a5a2 <_scanf_float+0x4a>
 800a6d4:	eb1a 0f05 	cmn.w	sl, r5
 800a6d8:	f47f af70 	bne.w	800a5bc <_scanf_float+0x64>
 800a6dc:	6822      	ldr	r2, [r4, #0]
 800a6de:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a6e2:	6022      	str	r2, [r4, #0]
 800a6e4:	f806 3b01 	strb.w	r3, [r6], #1
 800a6e8:	e7e4      	b.n	800a6b4 <_scanf_float+0x15c>
 800a6ea:	6822      	ldr	r2, [r4, #0]
 800a6ec:	0610      	lsls	r0, r2, #24
 800a6ee:	f57f af65 	bpl.w	800a5bc <_scanf_float+0x64>
 800a6f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a6f6:	e7f4      	b.n	800a6e2 <_scanf_float+0x18a>
 800a6f8:	f1ba 0f00 	cmp.w	sl, #0
 800a6fc:	d10e      	bne.n	800a71c <_scanf_float+0x1c4>
 800a6fe:	f1b9 0f00 	cmp.w	r9, #0
 800a702:	d10e      	bne.n	800a722 <_scanf_float+0x1ca>
 800a704:	6822      	ldr	r2, [r4, #0]
 800a706:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a70a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a70e:	d108      	bne.n	800a722 <_scanf_float+0x1ca>
 800a710:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a714:	f04f 0a01 	mov.w	sl, #1
 800a718:	6022      	str	r2, [r4, #0]
 800a71a:	e7e3      	b.n	800a6e4 <_scanf_float+0x18c>
 800a71c:	f1ba 0f02 	cmp.w	sl, #2
 800a720:	d055      	beq.n	800a7ce <_scanf_float+0x276>
 800a722:	2d01      	cmp	r5, #1
 800a724:	d002      	beq.n	800a72c <_scanf_float+0x1d4>
 800a726:	2d04      	cmp	r5, #4
 800a728:	f47f af48 	bne.w	800a5bc <_scanf_float+0x64>
 800a72c:	3501      	adds	r5, #1
 800a72e:	b2ed      	uxtb	r5, r5
 800a730:	e7d8      	b.n	800a6e4 <_scanf_float+0x18c>
 800a732:	f1ba 0f01 	cmp.w	sl, #1
 800a736:	f47f af41 	bne.w	800a5bc <_scanf_float+0x64>
 800a73a:	f04f 0a02 	mov.w	sl, #2
 800a73e:	e7d1      	b.n	800a6e4 <_scanf_float+0x18c>
 800a740:	b97d      	cbnz	r5, 800a762 <_scanf_float+0x20a>
 800a742:	f1b9 0f00 	cmp.w	r9, #0
 800a746:	f47f af3c 	bne.w	800a5c2 <_scanf_float+0x6a>
 800a74a:	6822      	ldr	r2, [r4, #0]
 800a74c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a750:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a754:	f47f af39 	bne.w	800a5ca <_scanf_float+0x72>
 800a758:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a75c:	2501      	movs	r5, #1
 800a75e:	6022      	str	r2, [r4, #0]
 800a760:	e7c0      	b.n	800a6e4 <_scanf_float+0x18c>
 800a762:	2d03      	cmp	r5, #3
 800a764:	d0e2      	beq.n	800a72c <_scanf_float+0x1d4>
 800a766:	2d05      	cmp	r5, #5
 800a768:	e7de      	b.n	800a728 <_scanf_float+0x1d0>
 800a76a:	2d02      	cmp	r5, #2
 800a76c:	f47f af26 	bne.w	800a5bc <_scanf_float+0x64>
 800a770:	2503      	movs	r5, #3
 800a772:	e7b7      	b.n	800a6e4 <_scanf_float+0x18c>
 800a774:	2d06      	cmp	r5, #6
 800a776:	f47f af21 	bne.w	800a5bc <_scanf_float+0x64>
 800a77a:	2507      	movs	r5, #7
 800a77c:	e7b2      	b.n	800a6e4 <_scanf_float+0x18c>
 800a77e:	6822      	ldr	r2, [r4, #0]
 800a780:	0591      	lsls	r1, r2, #22
 800a782:	f57f af1b 	bpl.w	800a5bc <_scanf_float+0x64>
 800a786:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a78a:	6022      	str	r2, [r4, #0]
 800a78c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a790:	e7a8      	b.n	800a6e4 <_scanf_float+0x18c>
 800a792:	6822      	ldr	r2, [r4, #0]
 800a794:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a798:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a79c:	d006      	beq.n	800a7ac <_scanf_float+0x254>
 800a79e:	0550      	lsls	r0, r2, #21
 800a7a0:	f57f af0c 	bpl.w	800a5bc <_scanf_float+0x64>
 800a7a4:	f1b9 0f00 	cmp.w	r9, #0
 800a7a8:	f43f af0f 	beq.w	800a5ca <_scanf_float+0x72>
 800a7ac:	0591      	lsls	r1, r2, #22
 800a7ae:	bf58      	it	pl
 800a7b0:	9901      	ldrpl	r1, [sp, #4]
 800a7b2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a7b6:	bf58      	it	pl
 800a7b8:	eba9 0101 	subpl.w	r1, r9, r1
 800a7bc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a7c0:	f04f 0900 	mov.w	r9, #0
 800a7c4:	bf58      	it	pl
 800a7c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a7ca:	6022      	str	r2, [r4, #0]
 800a7cc:	e78a      	b.n	800a6e4 <_scanf_float+0x18c>
 800a7ce:	f04f 0a03 	mov.w	sl, #3
 800a7d2:	e787      	b.n	800a6e4 <_scanf_float+0x18c>
 800a7d4:	4639      	mov	r1, r7
 800a7d6:	4640      	mov	r0, r8
 800a7d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a7dc:	4798      	blx	r3
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	f43f aedf 	beq.w	800a5a2 <_scanf_float+0x4a>
 800a7e4:	e6ea      	b.n	800a5bc <_scanf_float+0x64>
 800a7e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a7ea:	463a      	mov	r2, r7
 800a7ec:	4640      	mov	r0, r8
 800a7ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a7f2:	4798      	blx	r3
 800a7f4:	6923      	ldr	r3, [r4, #16]
 800a7f6:	3b01      	subs	r3, #1
 800a7f8:	6123      	str	r3, [r4, #16]
 800a7fa:	e6ec      	b.n	800a5d6 <_scanf_float+0x7e>
 800a7fc:	1e6b      	subs	r3, r5, #1
 800a7fe:	2b06      	cmp	r3, #6
 800a800:	d825      	bhi.n	800a84e <_scanf_float+0x2f6>
 800a802:	2d02      	cmp	r5, #2
 800a804:	d836      	bhi.n	800a874 <_scanf_float+0x31c>
 800a806:	455e      	cmp	r6, fp
 800a808:	f67f aee8 	bls.w	800a5dc <_scanf_float+0x84>
 800a80c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a810:	463a      	mov	r2, r7
 800a812:	4640      	mov	r0, r8
 800a814:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a818:	4798      	blx	r3
 800a81a:	6923      	ldr	r3, [r4, #16]
 800a81c:	3b01      	subs	r3, #1
 800a81e:	6123      	str	r3, [r4, #16]
 800a820:	e7f1      	b.n	800a806 <_scanf_float+0x2ae>
 800a822:	9802      	ldr	r0, [sp, #8]
 800a824:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a828:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a82c:	463a      	mov	r2, r7
 800a82e:	9002      	str	r0, [sp, #8]
 800a830:	4640      	mov	r0, r8
 800a832:	4798      	blx	r3
 800a834:	6923      	ldr	r3, [r4, #16]
 800a836:	3b01      	subs	r3, #1
 800a838:	6123      	str	r3, [r4, #16]
 800a83a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a83e:	fa5f fa8a 	uxtb.w	sl, sl
 800a842:	f1ba 0f02 	cmp.w	sl, #2
 800a846:	d1ec      	bne.n	800a822 <_scanf_float+0x2ca>
 800a848:	3d03      	subs	r5, #3
 800a84a:	b2ed      	uxtb	r5, r5
 800a84c:	1b76      	subs	r6, r6, r5
 800a84e:	6823      	ldr	r3, [r4, #0]
 800a850:	05da      	lsls	r2, r3, #23
 800a852:	d52f      	bpl.n	800a8b4 <_scanf_float+0x35c>
 800a854:	055b      	lsls	r3, r3, #21
 800a856:	d510      	bpl.n	800a87a <_scanf_float+0x322>
 800a858:	455e      	cmp	r6, fp
 800a85a:	f67f aebf 	bls.w	800a5dc <_scanf_float+0x84>
 800a85e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a862:	463a      	mov	r2, r7
 800a864:	4640      	mov	r0, r8
 800a866:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a86a:	4798      	blx	r3
 800a86c:	6923      	ldr	r3, [r4, #16]
 800a86e:	3b01      	subs	r3, #1
 800a870:	6123      	str	r3, [r4, #16]
 800a872:	e7f1      	b.n	800a858 <_scanf_float+0x300>
 800a874:	46aa      	mov	sl, r5
 800a876:	9602      	str	r6, [sp, #8]
 800a878:	e7df      	b.n	800a83a <_scanf_float+0x2e2>
 800a87a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a87e:	6923      	ldr	r3, [r4, #16]
 800a880:	2965      	cmp	r1, #101	; 0x65
 800a882:	f103 33ff 	add.w	r3, r3, #4294967295
 800a886:	f106 35ff 	add.w	r5, r6, #4294967295
 800a88a:	6123      	str	r3, [r4, #16]
 800a88c:	d00c      	beq.n	800a8a8 <_scanf_float+0x350>
 800a88e:	2945      	cmp	r1, #69	; 0x45
 800a890:	d00a      	beq.n	800a8a8 <_scanf_float+0x350>
 800a892:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a896:	463a      	mov	r2, r7
 800a898:	4640      	mov	r0, r8
 800a89a:	4798      	blx	r3
 800a89c:	6923      	ldr	r3, [r4, #16]
 800a89e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a8a2:	3b01      	subs	r3, #1
 800a8a4:	1eb5      	subs	r5, r6, #2
 800a8a6:	6123      	str	r3, [r4, #16]
 800a8a8:	463a      	mov	r2, r7
 800a8aa:	4640      	mov	r0, r8
 800a8ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a8b0:	4798      	blx	r3
 800a8b2:	462e      	mov	r6, r5
 800a8b4:	6825      	ldr	r5, [r4, #0]
 800a8b6:	f015 0510 	ands.w	r5, r5, #16
 800a8ba:	d155      	bne.n	800a968 <_scanf_float+0x410>
 800a8bc:	7035      	strb	r5, [r6, #0]
 800a8be:	6823      	ldr	r3, [r4, #0]
 800a8c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a8c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8c8:	d11b      	bne.n	800a902 <_scanf_float+0x3aa>
 800a8ca:	9b01      	ldr	r3, [sp, #4]
 800a8cc:	454b      	cmp	r3, r9
 800a8ce:	eba3 0209 	sub.w	r2, r3, r9
 800a8d2:	d123      	bne.n	800a91c <_scanf_float+0x3c4>
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	4659      	mov	r1, fp
 800a8d8:	4640      	mov	r0, r8
 800a8da:	f000 fe79 	bl	800b5d0 <_strtod_r>
 800a8de:	6822      	ldr	r2, [r4, #0]
 800a8e0:	9b03      	ldr	r3, [sp, #12]
 800a8e2:	f012 0f02 	tst.w	r2, #2
 800a8e6:	4606      	mov	r6, r0
 800a8e8:	460f      	mov	r7, r1
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	d021      	beq.n	800a932 <_scanf_float+0x3da>
 800a8ee:	1d1a      	adds	r2, r3, #4
 800a8f0:	9903      	ldr	r1, [sp, #12]
 800a8f2:	600a      	str	r2, [r1, #0]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	e9c3 6700 	strd	r6, r7, [r3]
 800a8fa:	68e3      	ldr	r3, [r4, #12]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	60e3      	str	r3, [r4, #12]
 800a900:	e66d      	b.n	800a5de <_scanf_float+0x86>
 800a902:	9b04      	ldr	r3, [sp, #16]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d0e5      	beq.n	800a8d4 <_scanf_float+0x37c>
 800a908:	9905      	ldr	r1, [sp, #20]
 800a90a:	230a      	movs	r3, #10
 800a90c:	462a      	mov	r2, r5
 800a90e:	4640      	mov	r0, r8
 800a910:	3101      	adds	r1, #1
 800a912:	f000 fedf 	bl	800b6d4 <_strtol_r>
 800a916:	9b04      	ldr	r3, [sp, #16]
 800a918:	9e05      	ldr	r6, [sp, #20]
 800a91a:	1ac2      	subs	r2, r0, r3
 800a91c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a920:	429e      	cmp	r6, r3
 800a922:	bf28      	it	cs
 800a924:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a928:	4630      	mov	r0, r6
 800a92a:	4910      	ldr	r1, [pc, #64]	; (800a96c <_scanf_float+0x414>)
 800a92c:	f000 f826 	bl	800a97c <siprintf>
 800a930:	e7d0      	b.n	800a8d4 <_scanf_float+0x37c>
 800a932:	f012 0f04 	tst.w	r2, #4
 800a936:	f103 0204 	add.w	r2, r3, #4
 800a93a:	d1d9      	bne.n	800a8f0 <_scanf_float+0x398>
 800a93c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800a940:	f8cc 2000 	str.w	r2, [ip]
 800a944:	f8d3 8000 	ldr.w	r8, [r3]
 800a948:	4602      	mov	r2, r0
 800a94a:	460b      	mov	r3, r1
 800a94c:	f7f6 f85e 	bl	8000a0c <__aeabi_dcmpun>
 800a950:	b128      	cbz	r0, 800a95e <_scanf_float+0x406>
 800a952:	4807      	ldr	r0, [pc, #28]	; (800a970 <_scanf_float+0x418>)
 800a954:	f000 f80e 	bl	800a974 <nanf>
 800a958:	f8c8 0000 	str.w	r0, [r8]
 800a95c:	e7cd      	b.n	800a8fa <_scanf_float+0x3a2>
 800a95e:	4630      	mov	r0, r6
 800a960:	4639      	mov	r1, r7
 800a962:	f7f6 f8b1 	bl	8000ac8 <__aeabi_d2f>
 800a966:	e7f7      	b.n	800a958 <_scanf_float+0x400>
 800a968:	2500      	movs	r5, #0
 800a96a:	e638      	b.n	800a5de <_scanf_float+0x86>
 800a96c:	0800e5e4 	.word	0x0800e5e4
 800a970:	0800e9f0 	.word	0x0800e9f0

0800a974 <nanf>:
 800a974:	4800      	ldr	r0, [pc, #0]	; (800a978 <nanf+0x4>)
 800a976:	4770      	bx	lr
 800a978:	7fc00000 	.word	0x7fc00000

0800a97c <siprintf>:
 800a97c:	b40e      	push	{r1, r2, r3}
 800a97e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a982:	b500      	push	{lr}
 800a984:	b09c      	sub	sp, #112	; 0x70
 800a986:	ab1d      	add	r3, sp, #116	; 0x74
 800a988:	9002      	str	r0, [sp, #8]
 800a98a:	9006      	str	r0, [sp, #24]
 800a98c:	9107      	str	r1, [sp, #28]
 800a98e:	9104      	str	r1, [sp, #16]
 800a990:	4808      	ldr	r0, [pc, #32]	; (800a9b4 <siprintf+0x38>)
 800a992:	4909      	ldr	r1, [pc, #36]	; (800a9b8 <siprintf+0x3c>)
 800a994:	f853 2b04 	ldr.w	r2, [r3], #4
 800a998:	9105      	str	r1, [sp, #20]
 800a99a:	6800      	ldr	r0, [r0, #0]
 800a99c:	a902      	add	r1, sp, #8
 800a99e:	9301      	str	r3, [sp, #4]
 800a9a0:	f002 feb8 	bl	800d714 <_svfiprintf_r>
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	9b02      	ldr	r3, [sp, #8]
 800a9a8:	701a      	strb	r2, [r3, #0]
 800a9aa:	b01c      	add	sp, #112	; 0x70
 800a9ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9b0:	b003      	add	sp, #12
 800a9b2:	4770      	bx	lr
 800a9b4:	2000017c 	.word	0x2000017c
 800a9b8:	ffff0208 	.word	0xffff0208

0800a9bc <sulp>:
 800a9bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9c0:	460f      	mov	r7, r1
 800a9c2:	4690      	mov	r8, r2
 800a9c4:	f002 fc12 	bl	800d1ec <__ulp>
 800a9c8:	4604      	mov	r4, r0
 800a9ca:	460d      	mov	r5, r1
 800a9cc:	f1b8 0f00 	cmp.w	r8, #0
 800a9d0:	d011      	beq.n	800a9f6 <sulp+0x3a>
 800a9d2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a9d6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	dd0b      	ble.n	800a9f6 <sulp+0x3a>
 800a9de:	2400      	movs	r4, #0
 800a9e0:	051b      	lsls	r3, r3, #20
 800a9e2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a9e6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a9ea:	4622      	mov	r2, r4
 800a9ec:	462b      	mov	r3, r5
 800a9ee:	f7f5 fd73 	bl	80004d8 <__aeabi_dmul>
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	460d      	mov	r5, r1
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	4629      	mov	r1, r5
 800a9fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800aa00 <_strtod_l>:
 800aa00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa04:	469b      	mov	fp, r3
 800aa06:	2300      	movs	r3, #0
 800aa08:	b09f      	sub	sp, #124	; 0x7c
 800aa0a:	931a      	str	r3, [sp, #104]	; 0x68
 800aa0c:	4b9e      	ldr	r3, [pc, #632]	; (800ac88 <_strtod_l+0x288>)
 800aa0e:	4682      	mov	sl, r0
 800aa10:	681f      	ldr	r7, [r3, #0]
 800aa12:	460e      	mov	r6, r1
 800aa14:	4638      	mov	r0, r7
 800aa16:	9215      	str	r2, [sp, #84]	; 0x54
 800aa18:	f7f5 fb9a 	bl	8000150 <strlen>
 800aa1c:	f04f 0800 	mov.w	r8, #0
 800aa20:	4604      	mov	r4, r0
 800aa22:	f04f 0900 	mov.w	r9, #0
 800aa26:	9619      	str	r6, [sp, #100]	; 0x64
 800aa28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aa2a:	781a      	ldrb	r2, [r3, #0]
 800aa2c:	2a2b      	cmp	r2, #43	; 0x2b
 800aa2e:	d04c      	beq.n	800aaca <_strtod_l+0xca>
 800aa30:	d83a      	bhi.n	800aaa8 <_strtod_l+0xa8>
 800aa32:	2a0d      	cmp	r2, #13
 800aa34:	d833      	bhi.n	800aa9e <_strtod_l+0x9e>
 800aa36:	2a08      	cmp	r2, #8
 800aa38:	d833      	bhi.n	800aaa2 <_strtod_l+0xa2>
 800aa3a:	2a00      	cmp	r2, #0
 800aa3c:	d03d      	beq.n	800aaba <_strtod_l+0xba>
 800aa3e:	2300      	movs	r3, #0
 800aa40:	930a      	str	r3, [sp, #40]	; 0x28
 800aa42:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800aa44:	782b      	ldrb	r3, [r5, #0]
 800aa46:	2b30      	cmp	r3, #48	; 0x30
 800aa48:	f040 80aa 	bne.w	800aba0 <_strtod_l+0x1a0>
 800aa4c:	786b      	ldrb	r3, [r5, #1]
 800aa4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aa52:	2b58      	cmp	r3, #88	; 0x58
 800aa54:	d166      	bne.n	800ab24 <_strtod_l+0x124>
 800aa56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa58:	4650      	mov	r0, sl
 800aa5a:	9301      	str	r3, [sp, #4]
 800aa5c:	ab1a      	add	r3, sp, #104	; 0x68
 800aa5e:	9300      	str	r3, [sp, #0]
 800aa60:	4a8a      	ldr	r2, [pc, #552]	; (800ac8c <_strtod_l+0x28c>)
 800aa62:	f8cd b008 	str.w	fp, [sp, #8]
 800aa66:	ab1b      	add	r3, sp, #108	; 0x6c
 800aa68:	a919      	add	r1, sp, #100	; 0x64
 800aa6a:	f001 fd17 	bl	800c49c <__gethex>
 800aa6e:	f010 0607 	ands.w	r6, r0, #7
 800aa72:	4604      	mov	r4, r0
 800aa74:	d005      	beq.n	800aa82 <_strtod_l+0x82>
 800aa76:	2e06      	cmp	r6, #6
 800aa78:	d129      	bne.n	800aace <_strtod_l+0xce>
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	3501      	adds	r5, #1
 800aa7e:	9519      	str	r5, [sp, #100]	; 0x64
 800aa80:	930a      	str	r3, [sp, #40]	; 0x28
 800aa82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	f040 858a 	bne.w	800b59e <_strtod_l+0xb9e>
 800aa8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa8c:	b1d3      	cbz	r3, 800aac4 <_strtod_l+0xc4>
 800aa8e:	4642      	mov	r2, r8
 800aa90:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800aa94:	4610      	mov	r0, r2
 800aa96:	4619      	mov	r1, r3
 800aa98:	b01f      	add	sp, #124	; 0x7c
 800aa9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa9e:	2a20      	cmp	r2, #32
 800aaa0:	d1cd      	bne.n	800aa3e <_strtod_l+0x3e>
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	9319      	str	r3, [sp, #100]	; 0x64
 800aaa6:	e7bf      	b.n	800aa28 <_strtod_l+0x28>
 800aaa8:	2a2d      	cmp	r2, #45	; 0x2d
 800aaaa:	d1c8      	bne.n	800aa3e <_strtod_l+0x3e>
 800aaac:	2201      	movs	r2, #1
 800aaae:	920a      	str	r2, [sp, #40]	; 0x28
 800aab0:	1c5a      	adds	r2, r3, #1
 800aab2:	9219      	str	r2, [sp, #100]	; 0x64
 800aab4:	785b      	ldrb	r3, [r3, #1]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d1c3      	bne.n	800aa42 <_strtod_l+0x42>
 800aaba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aabc:	9619      	str	r6, [sp, #100]	; 0x64
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	f040 856b 	bne.w	800b59a <_strtod_l+0xb9a>
 800aac4:	4642      	mov	r2, r8
 800aac6:	464b      	mov	r3, r9
 800aac8:	e7e4      	b.n	800aa94 <_strtod_l+0x94>
 800aaca:	2200      	movs	r2, #0
 800aacc:	e7ef      	b.n	800aaae <_strtod_l+0xae>
 800aace:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aad0:	b13a      	cbz	r2, 800aae2 <_strtod_l+0xe2>
 800aad2:	2135      	movs	r1, #53	; 0x35
 800aad4:	a81c      	add	r0, sp, #112	; 0x70
 800aad6:	f002 fc8d 	bl	800d3f4 <__copybits>
 800aada:	4650      	mov	r0, sl
 800aadc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800aade:	f002 f855 	bl	800cb8c <_Bfree>
 800aae2:	3e01      	subs	r6, #1
 800aae4:	2e04      	cmp	r6, #4
 800aae6:	d806      	bhi.n	800aaf6 <_strtod_l+0xf6>
 800aae8:	e8df f006 	tbb	[pc, r6]
 800aaec:	1714030a 	.word	0x1714030a
 800aaf0:	0a          	.byte	0x0a
 800aaf1:	00          	.byte	0x00
 800aaf2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800aaf6:	0721      	lsls	r1, r4, #28
 800aaf8:	d5c3      	bpl.n	800aa82 <_strtod_l+0x82>
 800aafa:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800aafe:	e7c0      	b.n	800aa82 <_strtod_l+0x82>
 800ab00:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ab02:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800ab06:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ab0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ab0e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ab12:	e7f0      	b.n	800aaf6 <_strtod_l+0xf6>
 800ab14:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ac90 <_strtod_l+0x290>
 800ab18:	e7ed      	b.n	800aaf6 <_strtod_l+0xf6>
 800ab1a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ab1e:	f04f 38ff 	mov.w	r8, #4294967295
 800ab22:	e7e8      	b.n	800aaf6 <_strtod_l+0xf6>
 800ab24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab26:	1c5a      	adds	r2, r3, #1
 800ab28:	9219      	str	r2, [sp, #100]	; 0x64
 800ab2a:	785b      	ldrb	r3, [r3, #1]
 800ab2c:	2b30      	cmp	r3, #48	; 0x30
 800ab2e:	d0f9      	beq.n	800ab24 <_strtod_l+0x124>
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d0a6      	beq.n	800aa82 <_strtod_l+0x82>
 800ab34:	2301      	movs	r3, #1
 800ab36:	9307      	str	r3, [sp, #28]
 800ab38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab3a:	220a      	movs	r2, #10
 800ab3c:	9308      	str	r3, [sp, #32]
 800ab3e:	2300      	movs	r3, #0
 800ab40:	469b      	mov	fp, r3
 800ab42:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800ab46:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ab48:	7805      	ldrb	r5, [r0, #0]
 800ab4a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800ab4e:	b2d9      	uxtb	r1, r3
 800ab50:	2909      	cmp	r1, #9
 800ab52:	d927      	bls.n	800aba4 <_strtod_l+0x1a4>
 800ab54:	4622      	mov	r2, r4
 800ab56:	4639      	mov	r1, r7
 800ab58:	f002 fef2 	bl	800d940 <strncmp>
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	d033      	beq.n	800abc8 <_strtod_l+0x1c8>
 800ab60:	2000      	movs	r0, #0
 800ab62:	462a      	mov	r2, r5
 800ab64:	465c      	mov	r4, fp
 800ab66:	4603      	mov	r3, r0
 800ab68:	9004      	str	r0, [sp, #16]
 800ab6a:	2a65      	cmp	r2, #101	; 0x65
 800ab6c:	d001      	beq.n	800ab72 <_strtod_l+0x172>
 800ab6e:	2a45      	cmp	r2, #69	; 0x45
 800ab70:	d114      	bne.n	800ab9c <_strtod_l+0x19c>
 800ab72:	b91c      	cbnz	r4, 800ab7c <_strtod_l+0x17c>
 800ab74:	9a07      	ldr	r2, [sp, #28]
 800ab76:	4302      	orrs	r2, r0
 800ab78:	d09f      	beq.n	800aaba <_strtod_l+0xba>
 800ab7a:	2400      	movs	r4, #0
 800ab7c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800ab7e:	1c72      	adds	r2, r6, #1
 800ab80:	9219      	str	r2, [sp, #100]	; 0x64
 800ab82:	7872      	ldrb	r2, [r6, #1]
 800ab84:	2a2b      	cmp	r2, #43	; 0x2b
 800ab86:	d079      	beq.n	800ac7c <_strtod_l+0x27c>
 800ab88:	2a2d      	cmp	r2, #45	; 0x2d
 800ab8a:	f000 8083 	beq.w	800ac94 <_strtod_l+0x294>
 800ab8e:	2700      	movs	r7, #0
 800ab90:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ab94:	2909      	cmp	r1, #9
 800ab96:	f240 8083 	bls.w	800aca0 <_strtod_l+0x2a0>
 800ab9a:	9619      	str	r6, [sp, #100]	; 0x64
 800ab9c:	2500      	movs	r5, #0
 800ab9e:	e09f      	b.n	800ace0 <_strtod_l+0x2e0>
 800aba0:	2300      	movs	r3, #0
 800aba2:	e7c8      	b.n	800ab36 <_strtod_l+0x136>
 800aba4:	f1bb 0f08 	cmp.w	fp, #8
 800aba8:	bfd5      	itete	le
 800abaa:	9906      	ldrle	r1, [sp, #24]
 800abac:	9905      	ldrgt	r1, [sp, #20]
 800abae:	fb02 3301 	mlale	r3, r2, r1, r3
 800abb2:	fb02 3301 	mlagt	r3, r2, r1, r3
 800abb6:	f100 0001 	add.w	r0, r0, #1
 800abba:	bfd4      	ite	le
 800abbc:	9306      	strle	r3, [sp, #24]
 800abbe:	9305      	strgt	r3, [sp, #20]
 800abc0:	f10b 0b01 	add.w	fp, fp, #1
 800abc4:	9019      	str	r0, [sp, #100]	; 0x64
 800abc6:	e7be      	b.n	800ab46 <_strtod_l+0x146>
 800abc8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800abca:	191a      	adds	r2, r3, r4
 800abcc:	9219      	str	r2, [sp, #100]	; 0x64
 800abce:	5d1a      	ldrb	r2, [r3, r4]
 800abd0:	f1bb 0f00 	cmp.w	fp, #0
 800abd4:	d036      	beq.n	800ac44 <_strtod_l+0x244>
 800abd6:	465c      	mov	r4, fp
 800abd8:	9004      	str	r0, [sp, #16]
 800abda:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800abde:	2b09      	cmp	r3, #9
 800abe0:	d912      	bls.n	800ac08 <_strtod_l+0x208>
 800abe2:	2301      	movs	r3, #1
 800abe4:	e7c1      	b.n	800ab6a <_strtod_l+0x16a>
 800abe6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800abe8:	3001      	adds	r0, #1
 800abea:	1c5a      	adds	r2, r3, #1
 800abec:	9219      	str	r2, [sp, #100]	; 0x64
 800abee:	785a      	ldrb	r2, [r3, #1]
 800abf0:	2a30      	cmp	r2, #48	; 0x30
 800abf2:	d0f8      	beq.n	800abe6 <_strtod_l+0x1e6>
 800abf4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800abf8:	2b08      	cmp	r3, #8
 800abfa:	f200 84d5 	bhi.w	800b5a8 <_strtod_l+0xba8>
 800abfe:	9004      	str	r0, [sp, #16]
 800ac00:	2000      	movs	r0, #0
 800ac02:	4604      	mov	r4, r0
 800ac04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ac06:	9308      	str	r3, [sp, #32]
 800ac08:	3a30      	subs	r2, #48	; 0x30
 800ac0a:	f100 0301 	add.w	r3, r0, #1
 800ac0e:	d013      	beq.n	800ac38 <_strtod_l+0x238>
 800ac10:	9904      	ldr	r1, [sp, #16]
 800ac12:	1905      	adds	r5, r0, r4
 800ac14:	4419      	add	r1, r3
 800ac16:	9104      	str	r1, [sp, #16]
 800ac18:	4623      	mov	r3, r4
 800ac1a:	210a      	movs	r1, #10
 800ac1c:	42ab      	cmp	r3, r5
 800ac1e:	d113      	bne.n	800ac48 <_strtod_l+0x248>
 800ac20:	1823      	adds	r3, r4, r0
 800ac22:	2b08      	cmp	r3, #8
 800ac24:	f104 0401 	add.w	r4, r4, #1
 800ac28:	4404      	add	r4, r0
 800ac2a:	dc1b      	bgt.n	800ac64 <_strtod_l+0x264>
 800ac2c:	230a      	movs	r3, #10
 800ac2e:	9906      	ldr	r1, [sp, #24]
 800ac30:	fb03 2301 	mla	r3, r3, r1, r2
 800ac34:	9306      	str	r3, [sp, #24]
 800ac36:	2300      	movs	r3, #0
 800ac38:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	1c51      	adds	r1, r2, #1
 800ac3e:	9119      	str	r1, [sp, #100]	; 0x64
 800ac40:	7852      	ldrb	r2, [r2, #1]
 800ac42:	e7ca      	b.n	800abda <_strtod_l+0x1da>
 800ac44:	4658      	mov	r0, fp
 800ac46:	e7d3      	b.n	800abf0 <_strtod_l+0x1f0>
 800ac48:	2b08      	cmp	r3, #8
 800ac4a:	dc04      	bgt.n	800ac56 <_strtod_l+0x256>
 800ac4c:	9f06      	ldr	r7, [sp, #24]
 800ac4e:	434f      	muls	r7, r1
 800ac50:	9706      	str	r7, [sp, #24]
 800ac52:	3301      	adds	r3, #1
 800ac54:	e7e2      	b.n	800ac1c <_strtod_l+0x21c>
 800ac56:	1c5f      	adds	r7, r3, #1
 800ac58:	2f10      	cmp	r7, #16
 800ac5a:	bfde      	ittt	le
 800ac5c:	9f05      	ldrle	r7, [sp, #20]
 800ac5e:	434f      	mulle	r7, r1
 800ac60:	9705      	strle	r7, [sp, #20]
 800ac62:	e7f6      	b.n	800ac52 <_strtod_l+0x252>
 800ac64:	2c10      	cmp	r4, #16
 800ac66:	bfdf      	itttt	le
 800ac68:	230a      	movle	r3, #10
 800ac6a:	9905      	ldrle	r1, [sp, #20]
 800ac6c:	fb03 2301 	mlale	r3, r3, r1, r2
 800ac70:	9305      	strle	r3, [sp, #20]
 800ac72:	e7e0      	b.n	800ac36 <_strtod_l+0x236>
 800ac74:	2300      	movs	r3, #0
 800ac76:	9304      	str	r3, [sp, #16]
 800ac78:	2301      	movs	r3, #1
 800ac7a:	e77b      	b.n	800ab74 <_strtod_l+0x174>
 800ac7c:	2700      	movs	r7, #0
 800ac7e:	1cb2      	adds	r2, r6, #2
 800ac80:	9219      	str	r2, [sp, #100]	; 0x64
 800ac82:	78b2      	ldrb	r2, [r6, #2]
 800ac84:	e784      	b.n	800ab90 <_strtod_l+0x190>
 800ac86:	bf00      	nop
 800ac88:	0800e838 	.word	0x0800e838
 800ac8c:	0800e5ec 	.word	0x0800e5ec
 800ac90:	7ff00000 	.word	0x7ff00000
 800ac94:	2701      	movs	r7, #1
 800ac96:	e7f2      	b.n	800ac7e <_strtod_l+0x27e>
 800ac98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ac9a:	1c51      	adds	r1, r2, #1
 800ac9c:	9119      	str	r1, [sp, #100]	; 0x64
 800ac9e:	7852      	ldrb	r2, [r2, #1]
 800aca0:	2a30      	cmp	r2, #48	; 0x30
 800aca2:	d0f9      	beq.n	800ac98 <_strtod_l+0x298>
 800aca4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800aca8:	2908      	cmp	r1, #8
 800acaa:	f63f af77 	bhi.w	800ab9c <_strtod_l+0x19c>
 800acae:	f04f 0e0a 	mov.w	lr, #10
 800acb2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800acb6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800acb8:	9209      	str	r2, [sp, #36]	; 0x24
 800acba:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800acbc:	1c51      	adds	r1, r2, #1
 800acbe:	9119      	str	r1, [sp, #100]	; 0x64
 800acc0:	7852      	ldrb	r2, [r2, #1]
 800acc2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800acc6:	2d09      	cmp	r5, #9
 800acc8:	d935      	bls.n	800ad36 <_strtod_l+0x336>
 800acca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800accc:	1b49      	subs	r1, r1, r5
 800acce:	2908      	cmp	r1, #8
 800acd0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800acd4:	dc02      	bgt.n	800acdc <_strtod_l+0x2dc>
 800acd6:	4565      	cmp	r5, ip
 800acd8:	bfa8      	it	ge
 800acda:	4665      	movge	r5, ip
 800acdc:	b107      	cbz	r7, 800ace0 <_strtod_l+0x2e0>
 800acde:	426d      	negs	r5, r5
 800ace0:	2c00      	cmp	r4, #0
 800ace2:	d14c      	bne.n	800ad7e <_strtod_l+0x37e>
 800ace4:	9907      	ldr	r1, [sp, #28]
 800ace6:	4301      	orrs	r1, r0
 800ace8:	f47f aecb 	bne.w	800aa82 <_strtod_l+0x82>
 800acec:	2b00      	cmp	r3, #0
 800acee:	f47f aee4 	bne.w	800aaba <_strtod_l+0xba>
 800acf2:	2a69      	cmp	r2, #105	; 0x69
 800acf4:	d026      	beq.n	800ad44 <_strtod_l+0x344>
 800acf6:	dc23      	bgt.n	800ad40 <_strtod_l+0x340>
 800acf8:	2a49      	cmp	r2, #73	; 0x49
 800acfa:	d023      	beq.n	800ad44 <_strtod_l+0x344>
 800acfc:	2a4e      	cmp	r2, #78	; 0x4e
 800acfe:	f47f aedc 	bne.w	800aaba <_strtod_l+0xba>
 800ad02:	499d      	ldr	r1, [pc, #628]	; (800af78 <_strtod_l+0x578>)
 800ad04:	a819      	add	r0, sp, #100	; 0x64
 800ad06:	f001 fe17 	bl	800c938 <__match>
 800ad0a:	2800      	cmp	r0, #0
 800ad0c:	f43f aed5 	beq.w	800aaba <_strtod_l+0xba>
 800ad10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	2b28      	cmp	r3, #40	; 0x28
 800ad16:	d12c      	bne.n	800ad72 <_strtod_l+0x372>
 800ad18:	4998      	ldr	r1, [pc, #608]	; (800af7c <_strtod_l+0x57c>)
 800ad1a:	aa1c      	add	r2, sp, #112	; 0x70
 800ad1c:	a819      	add	r0, sp, #100	; 0x64
 800ad1e:	f001 fe1f 	bl	800c960 <__hexnan>
 800ad22:	2805      	cmp	r0, #5
 800ad24:	d125      	bne.n	800ad72 <_strtod_l+0x372>
 800ad26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ad28:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800ad2c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ad30:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ad34:	e6a5      	b.n	800aa82 <_strtod_l+0x82>
 800ad36:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800ad3a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800ad3e:	e7bc      	b.n	800acba <_strtod_l+0x2ba>
 800ad40:	2a6e      	cmp	r2, #110	; 0x6e
 800ad42:	e7dc      	b.n	800acfe <_strtod_l+0x2fe>
 800ad44:	498e      	ldr	r1, [pc, #568]	; (800af80 <_strtod_l+0x580>)
 800ad46:	a819      	add	r0, sp, #100	; 0x64
 800ad48:	f001 fdf6 	bl	800c938 <__match>
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	f43f aeb4 	beq.w	800aaba <_strtod_l+0xba>
 800ad52:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad54:	498b      	ldr	r1, [pc, #556]	; (800af84 <_strtod_l+0x584>)
 800ad56:	3b01      	subs	r3, #1
 800ad58:	a819      	add	r0, sp, #100	; 0x64
 800ad5a:	9319      	str	r3, [sp, #100]	; 0x64
 800ad5c:	f001 fdec 	bl	800c938 <__match>
 800ad60:	b910      	cbnz	r0, 800ad68 <_strtod_l+0x368>
 800ad62:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad64:	3301      	adds	r3, #1
 800ad66:	9319      	str	r3, [sp, #100]	; 0x64
 800ad68:	f04f 0800 	mov.w	r8, #0
 800ad6c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800af88 <_strtod_l+0x588>
 800ad70:	e687      	b.n	800aa82 <_strtod_l+0x82>
 800ad72:	4886      	ldr	r0, [pc, #536]	; (800af8c <_strtod_l+0x58c>)
 800ad74:	f002 fdce 	bl	800d914 <nan>
 800ad78:	4680      	mov	r8, r0
 800ad7a:	4689      	mov	r9, r1
 800ad7c:	e681      	b.n	800aa82 <_strtod_l+0x82>
 800ad7e:	9b04      	ldr	r3, [sp, #16]
 800ad80:	f1bb 0f00 	cmp.w	fp, #0
 800ad84:	bf08      	it	eq
 800ad86:	46a3      	moveq	fp, r4
 800ad88:	1aeb      	subs	r3, r5, r3
 800ad8a:	2c10      	cmp	r4, #16
 800ad8c:	9806      	ldr	r0, [sp, #24]
 800ad8e:	4626      	mov	r6, r4
 800ad90:	9307      	str	r3, [sp, #28]
 800ad92:	bfa8      	it	ge
 800ad94:	2610      	movge	r6, #16
 800ad96:	f7f5 fb25 	bl	80003e4 <__aeabi_ui2d>
 800ad9a:	2c09      	cmp	r4, #9
 800ad9c:	4680      	mov	r8, r0
 800ad9e:	4689      	mov	r9, r1
 800ada0:	dd13      	ble.n	800adca <_strtod_l+0x3ca>
 800ada2:	4b7b      	ldr	r3, [pc, #492]	; (800af90 <_strtod_l+0x590>)
 800ada4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ada8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800adac:	f7f5 fb94 	bl	80004d8 <__aeabi_dmul>
 800adb0:	4680      	mov	r8, r0
 800adb2:	9805      	ldr	r0, [sp, #20]
 800adb4:	4689      	mov	r9, r1
 800adb6:	f7f5 fb15 	bl	80003e4 <__aeabi_ui2d>
 800adba:	4602      	mov	r2, r0
 800adbc:	460b      	mov	r3, r1
 800adbe:	4640      	mov	r0, r8
 800adc0:	4649      	mov	r1, r9
 800adc2:	f7f5 f9d3 	bl	800016c <__adddf3>
 800adc6:	4680      	mov	r8, r0
 800adc8:	4689      	mov	r9, r1
 800adca:	2c0f      	cmp	r4, #15
 800adcc:	dc36      	bgt.n	800ae3c <_strtod_l+0x43c>
 800adce:	9b07      	ldr	r3, [sp, #28]
 800add0:	2b00      	cmp	r3, #0
 800add2:	f43f ae56 	beq.w	800aa82 <_strtod_l+0x82>
 800add6:	dd22      	ble.n	800ae1e <_strtod_l+0x41e>
 800add8:	2b16      	cmp	r3, #22
 800adda:	dc09      	bgt.n	800adf0 <_strtod_l+0x3f0>
 800addc:	496c      	ldr	r1, [pc, #432]	; (800af90 <_strtod_l+0x590>)
 800adde:	4642      	mov	r2, r8
 800ade0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ade4:	464b      	mov	r3, r9
 800ade6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adea:	f7f5 fb75 	bl	80004d8 <__aeabi_dmul>
 800adee:	e7c3      	b.n	800ad78 <_strtod_l+0x378>
 800adf0:	9a07      	ldr	r2, [sp, #28]
 800adf2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800adf6:	4293      	cmp	r3, r2
 800adf8:	db20      	blt.n	800ae3c <_strtod_l+0x43c>
 800adfa:	4d65      	ldr	r5, [pc, #404]	; (800af90 <_strtod_l+0x590>)
 800adfc:	f1c4 040f 	rsb	r4, r4, #15
 800ae00:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800ae04:	4642      	mov	r2, r8
 800ae06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae0a:	464b      	mov	r3, r9
 800ae0c:	f7f5 fb64 	bl	80004d8 <__aeabi_dmul>
 800ae10:	9b07      	ldr	r3, [sp, #28]
 800ae12:	1b1c      	subs	r4, r3, r4
 800ae14:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800ae18:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae1c:	e7e5      	b.n	800adea <_strtod_l+0x3ea>
 800ae1e:	9b07      	ldr	r3, [sp, #28]
 800ae20:	3316      	adds	r3, #22
 800ae22:	db0b      	blt.n	800ae3c <_strtod_l+0x43c>
 800ae24:	9b04      	ldr	r3, [sp, #16]
 800ae26:	4640      	mov	r0, r8
 800ae28:	1b5d      	subs	r5, r3, r5
 800ae2a:	4b59      	ldr	r3, [pc, #356]	; (800af90 <_strtod_l+0x590>)
 800ae2c:	4649      	mov	r1, r9
 800ae2e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ae32:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae36:	f7f5 fc79 	bl	800072c <__aeabi_ddiv>
 800ae3a:	e79d      	b.n	800ad78 <_strtod_l+0x378>
 800ae3c:	9b07      	ldr	r3, [sp, #28]
 800ae3e:	1ba6      	subs	r6, r4, r6
 800ae40:	441e      	add	r6, r3
 800ae42:	2e00      	cmp	r6, #0
 800ae44:	dd74      	ble.n	800af30 <_strtod_l+0x530>
 800ae46:	f016 030f 	ands.w	r3, r6, #15
 800ae4a:	d00a      	beq.n	800ae62 <_strtod_l+0x462>
 800ae4c:	4950      	ldr	r1, [pc, #320]	; (800af90 <_strtod_l+0x590>)
 800ae4e:	4642      	mov	r2, r8
 800ae50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae58:	464b      	mov	r3, r9
 800ae5a:	f7f5 fb3d 	bl	80004d8 <__aeabi_dmul>
 800ae5e:	4680      	mov	r8, r0
 800ae60:	4689      	mov	r9, r1
 800ae62:	f036 060f 	bics.w	r6, r6, #15
 800ae66:	d052      	beq.n	800af0e <_strtod_l+0x50e>
 800ae68:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800ae6c:	dd27      	ble.n	800aebe <_strtod_l+0x4be>
 800ae6e:	f04f 0b00 	mov.w	fp, #0
 800ae72:	f8cd b010 	str.w	fp, [sp, #16]
 800ae76:	f8cd b020 	str.w	fp, [sp, #32]
 800ae7a:	f8cd b018 	str.w	fp, [sp, #24]
 800ae7e:	2322      	movs	r3, #34	; 0x22
 800ae80:	f04f 0800 	mov.w	r8, #0
 800ae84:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800af88 <_strtod_l+0x588>
 800ae88:	f8ca 3000 	str.w	r3, [sl]
 800ae8c:	9b08      	ldr	r3, [sp, #32]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	f43f adf7 	beq.w	800aa82 <_strtod_l+0x82>
 800ae94:	4650      	mov	r0, sl
 800ae96:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ae98:	f001 fe78 	bl	800cb8c <_Bfree>
 800ae9c:	4650      	mov	r0, sl
 800ae9e:	9906      	ldr	r1, [sp, #24]
 800aea0:	f001 fe74 	bl	800cb8c <_Bfree>
 800aea4:	4650      	mov	r0, sl
 800aea6:	9904      	ldr	r1, [sp, #16]
 800aea8:	f001 fe70 	bl	800cb8c <_Bfree>
 800aeac:	4650      	mov	r0, sl
 800aeae:	9908      	ldr	r1, [sp, #32]
 800aeb0:	f001 fe6c 	bl	800cb8c <_Bfree>
 800aeb4:	4659      	mov	r1, fp
 800aeb6:	4650      	mov	r0, sl
 800aeb8:	f001 fe68 	bl	800cb8c <_Bfree>
 800aebc:	e5e1      	b.n	800aa82 <_strtod_l+0x82>
 800aebe:	4b35      	ldr	r3, [pc, #212]	; (800af94 <_strtod_l+0x594>)
 800aec0:	4640      	mov	r0, r8
 800aec2:	9305      	str	r3, [sp, #20]
 800aec4:	2300      	movs	r3, #0
 800aec6:	4649      	mov	r1, r9
 800aec8:	461f      	mov	r7, r3
 800aeca:	1136      	asrs	r6, r6, #4
 800aecc:	2e01      	cmp	r6, #1
 800aece:	dc21      	bgt.n	800af14 <_strtod_l+0x514>
 800aed0:	b10b      	cbz	r3, 800aed6 <_strtod_l+0x4d6>
 800aed2:	4680      	mov	r8, r0
 800aed4:	4689      	mov	r9, r1
 800aed6:	4b2f      	ldr	r3, [pc, #188]	; (800af94 <_strtod_l+0x594>)
 800aed8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800aedc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800aee0:	4642      	mov	r2, r8
 800aee2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aee6:	464b      	mov	r3, r9
 800aee8:	f7f5 faf6 	bl	80004d8 <__aeabi_dmul>
 800aeec:	4b26      	ldr	r3, [pc, #152]	; (800af88 <_strtod_l+0x588>)
 800aeee:	460a      	mov	r2, r1
 800aef0:	400b      	ands	r3, r1
 800aef2:	4929      	ldr	r1, [pc, #164]	; (800af98 <_strtod_l+0x598>)
 800aef4:	4680      	mov	r8, r0
 800aef6:	428b      	cmp	r3, r1
 800aef8:	d8b9      	bhi.n	800ae6e <_strtod_l+0x46e>
 800aefa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800aefe:	428b      	cmp	r3, r1
 800af00:	bf86      	itte	hi
 800af02:	f04f 38ff 	movhi.w	r8, #4294967295
 800af06:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800af9c <_strtod_l+0x59c>
 800af0a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800af0e:	2300      	movs	r3, #0
 800af10:	9305      	str	r3, [sp, #20]
 800af12:	e07f      	b.n	800b014 <_strtod_l+0x614>
 800af14:	07f2      	lsls	r2, r6, #31
 800af16:	d505      	bpl.n	800af24 <_strtod_l+0x524>
 800af18:	9b05      	ldr	r3, [sp, #20]
 800af1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af1e:	f7f5 fadb 	bl	80004d8 <__aeabi_dmul>
 800af22:	2301      	movs	r3, #1
 800af24:	9a05      	ldr	r2, [sp, #20]
 800af26:	3701      	adds	r7, #1
 800af28:	3208      	adds	r2, #8
 800af2a:	1076      	asrs	r6, r6, #1
 800af2c:	9205      	str	r2, [sp, #20]
 800af2e:	e7cd      	b.n	800aecc <_strtod_l+0x4cc>
 800af30:	d0ed      	beq.n	800af0e <_strtod_l+0x50e>
 800af32:	4276      	negs	r6, r6
 800af34:	f016 020f 	ands.w	r2, r6, #15
 800af38:	d00a      	beq.n	800af50 <_strtod_l+0x550>
 800af3a:	4b15      	ldr	r3, [pc, #84]	; (800af90 <_strtod_l+0x590>)
 800af3c:	4640      	mov	r0, r8
 800af3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af42:	4649      	mov	r1, r9
 800af44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af48:	f7f5 fbf0 	bl	800072c <__aeabi_ddiv>
 800af4c:	4680      	mov	r8, r0
 800af4e:	4689      	mov	r9, r1
 800af50:	1136      	asrs	r6, r6, #4
 800af52:	d0dc      	beq.n	800af0e <_strtod_l+0x50e>
 800af54:	2e1f      	cmp	r6, #31
 800af56:	dd23      	ble.n	800afa0 <_strtod_l+0x5a0>
 800af58:	f04f 0b00 	mov.w	fp, #0
 800af5c:	f8cd b010 	str.w	fp, [sp, #16]
 800af60:	f8cd b020 	str.w	fp, [sp, #32]
 800af64:	f8cd b018 	str.w	fp, [sp, #24]
 800af68:	2322      	movs	r3, #34	; 0x22
 800af6a:	f04f 0800 	mov.w	r8, #0
 800af6e:	f04f 0900 	mov.w	r9, #0
 800af72:	f8ca 3000 	str.w	r3, [sl]
 800af76:	e789      	b.n	800ae8c <_strtod_l+0x48c>
 800af78:	0800e5bd 	.word	0x0800e5bd
 800af7c:	0800e600 	.word	0x0800e600
 800af80:	0800e5b5 	.word	0x0800e5b5
 800af84:	0800e744 	.word	0x0800e744
 800af88:	7ff00000 	.word	0x7ff00000
 800af8c:	0800e9f0 	.word	0x0800e9f0
 800af90:	0800e8d0 	.word	0x0800e8d0
 800af94:	0800e8a8 	.word	0x0800e8a8
 800af98:	7ca00000 	.word	0x7ca00000
 800af9c:	7fefffff 	.word	0x7fefffff
 800afa0:	f016 0310 	ands.w	r3, r6, #16
 800afa4:	bf18      	it	ne
 800afa6:	236a      	movne	r3, #106	; 0x6a
 800afa8:	4640      	mov	r0, r8
 800afaa:	9305      	str	r3, [sp, #20]
 800afac:	4649      	mov	r1, r9
 800afae:	2300      	movs	r3, #0
 800afb0:	4fb0      	ldr	r7, [pc, #704]	; (800b274 <_strtod_l+0x874>)
 800afb2:	07f2      	lsls	r2, r6, #31
 800afb4:	d504      	bpl.n	800afc0 <_strtod_l+0x5c0>
 800afb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afba:	f7f5 fa8d 	bl	80004d8 <__aeabi_dmul>
 800afbe:	2301      	movs	r3, #1
 800afc0:	1076      	asrs	r6, r6, #1
 800afc2:	f107 0708 	add.w	r7, r7, #8
 800afc6:	d1f4      	bne.n	800afb2 <_strtod_l+0x5b2>
 800afc8:	b10b      	cbz	r3, 800afce <_strtod_l+0x5ce>
 800afca:	4680      	mov	r8, r0
 800afcc:	4689      	mov	r9, r1
 800afce:	9b05      	ldr	r3, [sp, #20]
 800afd0:	b1c3      	cbz	r3, 800b004 <_strtod_l+0x604>
 800afd2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800afd6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800afda:	2b00      	cmp	r3, #0
 800afdc:	4649      	mov	r1, r9
 800afde:	dd11      	ble.n	800b004 <_strtod_l+0x604>
 800afe0:	2b1f      	cmp	r3, #31
 800afe2:	f340 8127 	ble.w	800b234 <_strtod_l+0x834>
 800afe6:	2b34      	cmp	r3, #52	; 0x34
 800afe8:	bfd8      	it	le
 800afea:	f04f 33ff 	movle.w	r3, #4294967295
 800afee:	f04f 0800 	mov.w	r8, #0
 800aff2:	bfcf      	iteee	gt
 800aff4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800aff8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800affc:	fa03 f202 	lslle.w	r2, r3, r2
 800b000:	ea02 0901 	andle.w	r9, r2, r1
 800b004:	2200      	movs	r2, #0
 800b006:	2300      	movs	r3, #0
 800b008:	4640      	mov	r0, r8
 800b00a:	4649      	mov	r1, r9
 800b00c:	f7f5 fccc 	bl	80009a8 <__aeabi_dcmpeq>
 800b010:	2800      	cmp	r0, #0
 800b012:	d1a1      	bne.n	800af58 <_strtod_l+0x558>
 800b014:	9b06      	ldr	r3, [sp, #24]
 800b016:	465a      	mov	r2, fp
 800b018:	9300      	str	r3, [sp, #0]
 800b01a:	4650      	mov	r0, sl
 800b01c:	4623      	mov	r3, r4
 800b01e:	9908      	ldr	r1, [sp, #32]
 800b020:	f001 fe1c 	bl	800cc5c <__s2b>
 800b024:	9008      	str	r0, [sp, #32]
 800b026:	2800      	cmp	r0, #0
 800b028:	f43f af21 	beq.w	800ae6e <_strtod_l+0x46e>
 800b02c:	9b04      	ldr	r3, [sp, #16]
 800b02e:	f04f 0b00 	mov.w	fp, #0
 800b032:	1b5d      	subs	r5, r3, r5
 800b034:	9b07      	ldr	r3, [sp, #28]
 800b036:	f8cd b010 	str.w	fp, [sp, #16]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	bfb4      	ite	lt
 800b03e:	462b      	movlt	r3, r5
 800b040:	2300      	movge	r3, #0
 800b042:	930e      	str	r3, [sp, #56]	; 0x38
 800b044:	9b07      	ldr	r3, [sp, #28]
 800b046:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b04a:	9314      	str	r3, [sp, #80]	; 0x50
 800b04c:	9b08      	ldr	r3, [sp, #32]
 800b04e:	4650      	mov	r0, sl
 800b050:	6859      	ldr	r1, [r3, #4]
 800b052:	f001 fd5b 	bl	800cb0c <_Balloc>
 800b056:	9006      	str	r0, [sp, #24]
 800b058:	2800      	cmp	r0, #0
 800b05a:	f43f af10 	beq.w	800ae7e <_strtod_l+0x47e>
 800b05e:	9b08      	ldr	r3, [sp, #32]
 800b060:	300c      	adds	r0, #12
 800b062:	691a      	ldr	r2, [r3, #16]
 800b064:	f103 010c 	add.w	r1, r3, #12
 800b068:	3202      	adds	r2, #2
 800b06a:	0092      	lsls	r2, r2, #2
 800b06c:	f001 fd40 	bl	800caf0 <memcpy>
 800b070:	ab1c      	add	r3, sp, #112	; 0x70
 800b072:	9301      	str	r3, [sp, #4]
 800b074:	ab1b      	add	r3, sp, #108	; 0x6c
 800b076:	9300      	str	r3, [sp, #0]
 800b078:	4642      	mov	r2, r8
 800b07a:	464b      	mov	r3, r9
 800b07c:	4650      	mov	r0, sl
 800b07e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800b082:	f002 f92d 	bl	800d2e0 <__d2b>
 800b086:	901a      	str	r0, [sp, #104]	; 0x68
 800b088:	2800      	cmp	r0, #0
 800b08a:	f43f aef8 	beq.w	800ae7e <_strtod_l+0x47e>
 800b08e:	2101      	movs	r1, #1
 800b090:	4650      	mov	r0, sl
 800b092:	f001 fe7b 	bl	800cd8c <__i2b>
 800b096:	4603      	mov	r3, r0
 800b098:	9004      	str	r0, [sp, #16]
 800b09a:	2800      	cmp	r0, #0
 800b09c:	f43f aeef 	beq.w	800ae7e <_strtod_l+0x47e>
 800b0a0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b0a2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b0a4:	2d00      	cmp	r5, #0
 800b0a6:	bfab      	itete	ge
 800b0a8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800b0aa:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800b0ac:	18ee      	addge	r6, r5, r3
 800b0ae:	1b5c      	sublt	r4, r3, r5
 800b0b0:	9b05      	ldr	r3, [sp, #20]
 800b0b2:	bfa8      	it	ge
 800b0b4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800b0b6:	eba5 0503 	sub.w	r5, r5, r3
 800b0ba:	4415      	add	r5, r2
 800b0bc:	4b6e      	ldr	r3, [pc, #440]	; (800b278 <_strtod_l+0x878>)
 800b0be:	f105 35ff 	add.w	r5, r5, #4294967295
 800b0c2:	bfb8      	it	lt
 800b0c4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800b0c6:	429d      	cmp	r5, r3
 800b0c8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b0cc:	f280 80c4 	bge.w	800b258 <_strtod_l+0x858>
 800b0d0:	1b5b      	subs	r3, r3, r5
 800b0d2:	2b1f      	cmp	r3, #31
 800b0d4:	f04f 0701 	mov.w	r7, #1
 800b0d8:	eba2 0203 	sub.w	r2, r2, r3
 800b0dc:	f300 80b1 	bgt.w	800b242 <_strtod_l+0x842>
 800b0e0:	2500      	movs	r5, #0
 800b0e2:	fa07 f303 	lsl.w	r3, r7, r3
 800b0e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b0e8:	18b7      	adds	r7, r6, r2
 800b0ea:	9b05      	ldr	r3, [sp, #20]
 800b0ec:	42be      	cmp	r6, r7
 800b0ee:	4414      	add	r4, r2
 800b0f0:	441c      	add	r4, r3
 800b0f2:	4633      	mov	r3, r6
 800b0f4:	bfa8      	it	ge
 800b0f6:	463b      	movge	r3, r7
 800b0f8:	42a3      	cmp	r3, r4
 800b0fa:	bfa8      	it	ge
 800b0fc:	4623      	movge	r3, r4
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	bfc2      	ittt	gt
 800b102:	1aff      	subgt	r7, r7, r3
 800b104:	1ae4      	subgt	r4, r4, r3
 800b106:	1af6      	subgt	r6, r6, r3
 800b108:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	dd17      	ble.n	800b13e <_strtod_l+0x73e>
 800b10e:	461a      	mov	r2, r3
 800b110:	4650      	mov	r0, sl
 800b112:	9904      	ldr	r1, [sp, #16]
 800b114:	f001 fef8 	bl	800cf08 <__pow5mult>
 800b118:	9004      	str	r0, [sp, #16]
 800b11a:	2800      	cmp	r0, #0
 800b11c:	f43f aeaf 	beq.w	800ae7e <_strtod_l+0x47e>
 800b120:	4601      	mov	r1, r0
 800b122:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b124:	4650      	mov	r0, sl
 800b126:	f001 fe47 	bl	800cdb8 <__multiply>
 800b12a:	9009      	str	r0, [sp, #36]	; 0x24
 800b12c:	2800      	cmp	r0, #0
 800b12e:	f43f aea6 	beq.w	800ae7e <_strtod_l+0x47e>
 800b132:	4650      	mov	r0, sl
 800b134:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b136:	f001 fd29 	bl	800cb8c <_Bfree>
 800b13a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b13c:	931a      	str	r3, [sp, #104]	; 0x68
 800b13e:	2f00      	cmp	r7, #0
 800b140:	f300 808e 	bgt.w	800b260 <_strtod_l+0x860>
 800b144:	9b07      	ldr	r3, [sp, #28]
 800b146:	2b00      	cmp	r3, #0
 800b148:	dd08      	ble.n	800b15c <_strtod_l+0x75c>
 800b14a:	4650      	mov	r0, sl
 800b14c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b14e:	9906      	ldr	r1, [sp, #24]
 800b150:	f001 feda 	bl	800cf08 <__pow5mult>
 800b154:	9006      	str	r0, [sp, #24]
 800b156:	2800      	cmp	r0, #0
 800b158:	f43f ae91 	beq.w	800ae7e <_strtod_l+0x47e>
 800b15c:	2c00      	cmp	r4, #0
 800b15e:	dd08      	ble.n	800b172 <_strtod_l+0x772>
 800b160:	4622      	mov	r2, r4
 800b162:	4650      	mov	r0, sl
 800b164:	9906      	ldr	r1, [sp, #24]
 800b166:	f001 ff29 	bl	800cfbc <__lshift>
 800b16a:	9006      	str	r0, [sp, #24]
 800b16c:	2800      	cmp	r0, #0
 800b16e:	f43f ae86 	beq.w	800ae7e <_strtod_l+0x47e>
 800b172:	2e00      	cmp	r6, #0
 800b174:	dd08      	ble.n	800b188 <_strtod_l+0x788>
 800b176:	4632      	mov	r2, r6
 800b178:	4650      	mov	r0, sl
 800b17a:	9904      	ldr	r1, [sp, #16]
 800b17c:	f001 ff1e 	bl	800cfbc <__lshift>
 800b180:	9004      	str	r0, [sp, #16]
 800b182:	2800      	cmp	r0, #0
 800b184:	f43f ae7b 	beq.w	800ae7e <_strtod_l+0x47e>
 800b188:	4650      	mov	r0, sl
 800b18a:	9a06      	ldr	r2, [sp, #24]
 800b18c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b18e:	f001 ffa1 	bl	800d0d4 <__mdiff>
 800b192:	4683      	mov	fp, r0
 800b194:	2800      	cmp	r0, #0
 800b196:	f43f ae72 	beq.w	800ae7e <_strtod_l+0x47e>
 800b19a:	2400      	movs	r4, #0
 800b19c:	68c3      	ldr	r3, [r0, #12]
 800b19e:	9904      	ldr	r1, [sp, #16]
 800b1a0:	60c4      	str	r4, [r0, #12]
 800b1a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1a4:	f001 ff7a 	bl	800d09c <__mcmp>
 800b1a8:	42a0      	cmp	r0, r4
 800b1aa:	da6b      	bge.n	800b284 <_strtod_l+0x884>
 800b1ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1ae:	ea53 0308 	orrs.w	r3, r3, r8
 800b1b2:	f040 8091 	bne.w	800b2d8 <_strtod_l+0x8d8>
 800b1b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	f040 808c 	bne.w	800b2d8 <_strtod_l+0x8d8>
 800b1c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b1c4:	0d1b      	lsrs	r3, r3, #20
 800b1c6:	051b      	lsls	r3, r3, #20
 800b1c8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b1cc:	f240 8084 	bls.w	800b2d8 <_strtod_l+0x8d8>
 800b1d0:	f8db 3014 	ldr.w	r3, [fp, #20]
 800b1d4:	b91b      	cbnz	r3, 800b1de <_strtod_l+0x7de>
 800b1d6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	dd7c      	ble.n	800b2d8 <_strtod_l+0x8d8>
 800b1de:	4659      	mov	r1, fp
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	4650      	mov	r0, sl
 800b1e4:	f001 feea 	bl	800cfbc <__lshift>
 800b1e8:	9904      	ldr	r1, [sp, #16]
 800b1ea:	4683      	mov	fp, r0
 800b1ec:	f001 ff56 	bl	800d09c <__mcmp>
 800b1f0:	2800      	cmp	r0, #0
 800b1f2:	dd71      	ble.n	800b2d8 <_strtod_l+0x8d8>
 800b1f4:	9905      	ldr	r1, [sp, #20]
 800b1f6:	464b      	mov	r3, r9
 800b1f8:	4a20      	ldr	r2, [pc, #128]	; (800b27c <_strtod_l+0x87c>)
 800b1fa:	2900      	cmp	r1, #0
 800b1fc:	f000 808c 	beq.w	800b318 <_strtod_l+0x918>
 800b200:	ea02 0109 	and.w	r1, r2, r9
 800b204:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b208:	f300 8086 	bgt.w	800b318 <_strtod_l+0x918>
 800b20c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b210:	f77f aeaa 	ble.w	800af68 <_strtod_l+0x568>
 800b214:	4640      	mov	r0, r8
 800b216:	4649      	mov	r1, r9
 800b218:	4b19      	ldr	r3, [pc, #100]	; (800b280 <_strtod_l+0x880>)
 800b21a:	2200      	movs	r2, #0
 800b21c:	f7f5 f95c 	bl	80004d8 <__aeabi_dmul>
 800b220:	460b      	mov	r3, r1
 800b222:	4303      	orrs	r3, r0
 800b224:	bf08      	it	eq
 800b226:	2322      	moveq	r3, #34	; 0x22
 800b228:	4680      	mov	r8, r0
 800b22a:	4689      	mov	r9, r1
 800b22c:	bf08      	it	eq
 800b22e:	f8ca 3000 	streq.w	r3, [sl]
 800b232:	e62f      	b.n	800ae94 <_strtod_l+0x494>
 800b234:	f04f 32ff 	mov.w	r2, #4294967295
 800b238:	fa02 f303 	lsl.w	r3, r2, r3
 800b23c:	ea03 0808 	and.w	r8, r3, r8
 800b240:	e6e0      	b.n	800b004 <_strtod_l+0x604>
 800b242:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800b246:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800b24a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800b24e:	35e2      	adds	r5, #226	; 0xe2
 800b250:	fa07 f505 	lsl.w	r5, r7, r5
 800b254:	970f      	str	r7, [sp, #60]	; 0x3c
 800b256:	e747      	b.n	800b0e8 <_strtod_l+0x6e8>
 800b258:	2301      	movs	r3, #1
 800b25a:	2500      	movs	r5, #0
 800b25c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b25e:	e743      	b.n	800b0e8 <_strtod_l+0x6e8>
 800b260:	463a      	mov	r2, r7
 800b262:	4650      	mov	r0, sl
 800b264:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b266:	f001 fea9 	bl	800cfbc <__lshift>
 800b26a:	901a      	str	r0, [sp, #104]	; 0x68
 800b26c:	2800      	cmp	r0, #0
 800b26e:	f47f af69 	bne.w	800b144 <_strtod_l+0x744>
 800b272:	e604      	b.n	800ae7e <_strtod_l+0x47e>
 800b274:	0800e618 	.word	0x0800e618
 800b278:	fffffc02 	.word	0xfffffc02
 800b27c:	7ff00000 	.word	0x7ff00000
 800b280:	39500000 	.word	0x39500000
 800b284:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b288:	d165      	bne.n	800b356 <_strtod_l+0x956>
 800b28a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b28c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b290:	b35a      	cbz	r2, 800b2ea <_strtod_l+0x8ea>
 800b292:	4a99      	ldr	r2, [pc, #612]	; (800b4f8 <_strtod_l+0xaf8>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d12b      	bne.n	800b2f0 <_strtod_l+0x8f0>
 800b298:	9b05      	ldr	r3, [sp, #20]
 800b29a:	4641      	mov	r1, r8
 800b29c:	b303      	cbz	r3, 800b2e0 <_strtod_l+0x8e0>
 800b29e:	464a      	mov	r2, r9
 800b2a0:	4b96      	ldr	r3, [pc, #600]	; (800b4fc <_strtod_l+0xafc>)
 800b2a2:	4013      	ands	r3, r2
 800b2a4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b2a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ac:	d81b      	bhi.n	800b2e6 <_strtod_l+0x8e6>
 800b2ae:	0d1b      	lsrs	r3, r3, #20
 800b2b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b2b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b2b8:	4299      	cmp	r1, r3
 800b2ba:	d119      	bne.n	800b2f0 <_strtod_l+0x8f0>
 800b2bc:	4b90      	ldr	r3, [pc, #576]	; (800b500 <_strtod_l+0xb00>)
 800b2be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d102      	bne.n	800b2ca <_strtod_l+0x8ca>
 800b2c4:	3101      	adds	r1, #1
 800b2c6:	f43f adda 	beq.w	800ae7e <_strtod_l+0x47e>
 800b2ca:	f04f 0800 	mov.w	r8, #0
 800b2ce:	4b8b      	ldr	r3, [pc, #556]	; (800b4fc <_strtod_l+0xafc>)
 800b2d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2d2:	401a      	ands	r2, r3
 800b2d4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800b2d8:	9b05      	ldr	r3, [sp, #20]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d19a      	bne.n	800b214 <_strtod_l+0x814>
 800b2de:	e5d9      	b.n	800ae94 <_strtod_l+0x494>
 800b2e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b2e4:	e7e8      	b.n	800b2b8 <_strtod_l+0x8b8>
 800b2e6:	4613      	mov	r3, r2
 800b2e8:	e7e6      	b.n	800b2b8 <_strtod_l+0x8b8>
 800b2ea:	ea53 0308 	orrs.w	r3, r3, r8
 800b2ee:	d081      	beq.n	800b1f4 <_strtod_l+0x7f4>
 800b2f0:	b1e5      	cbz	r5, 800b32c <_strtod_l+0x92c>
 800b2f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2f4:	421d      	tst	r5, r3
 800b2f6:	d0ef      	beq.n	800b2d8 <_strtod_l+0x8d8>
 800b2f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2fa:	4640      	mov	r0, r8
 800b2fc:	4649      	mov	r1, r9
 800b2fe:	9a05      	ldr	r2, [sp, #20]
 800b300:	b1c3      	cbz	r3, 800b334 <_strtod_l+0x934>
 800b302:	f7ff fb5b 	bl	800a9bc <sulp>
 800b306:	4602      	mov	r2, r0
 800b308:	460b      	mov	r3, r1
 800b30a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b30e:	f7f4 ff2d 	bl	800016c <__adddf3>
 800b312:	4680      	mov	r8, r0
 800b314:	4689      	mov	r9, r1
 800b316:	e7df      	b.n	800b2d8 <_strtod_l+0x8d8>
 800b318:	4013      	ands	r3, r2
 800b31a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b31e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b322:	f04f 38ff 	mov.w	r8, #4294967295
 800b326:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b32a:	e7d5      	b.n	800b2d8 <_strtod_l+0x8d8>
 800b32c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b32e:	ea13 0f08 	tst.w	r3, r8
 800b332:	e7e0      	b.n	800b2f6 <_strtod_l+0x8f6>
 800b334:	f7ff fb42 	bl	800a9bc <sulp>
 800b338:	4602      	mov	r2, r0
 800b33a:	460b      	mov	r3, r1
 800b33c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b340:	f7f4 ff12 	bl	8000168 <__aeabi_dsub>
 800b344:	2200      	movs	r2, #0
 800b346:	2300      	movs	r3, #0
 800b348:	4680      	mov	r8, r0
 800b34a:	4689      	mov	r9, r1
 800b34c:	f7f5 fb2c 	bl	80009a8 <__aeabi_dcmpeq>
 800b350:	2800      	cmp	r0, #0
 800b352:	d0c1      	beq.n	800b2d8 <_strtod_l+0x8d8>
 800b354:	e608      	b.n	800af68 <_strtod_l+0x568>
 800b356:	4658      	mov	r0, fp
 800b358:	9904      	ldr	r1, [sp, #16]
 800b35a:	f002 f81d 	bl	800d398 <__ratio>
 800b35e:	2200      	movs	r2, #0
 800b360:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b364:	4606      	mov	r6, r0
 800b366:	460f      	mov	r7, r1
 800b368:	f7f5 fb32 	bl	80009d0 <__aeabi_dcmple>
 800b36c:	2800      	cmp	r0, #0
 800b36e:	d070      	beq.n	800b452 <_strtod_l+0xa52>
 800b370:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b372:	2b00      	cmp	r3, #0
 800b374:	d042      	beq.n	800b3fc <_strtod_l+0x9fc>
 800b376:	2600      	movs	r6, #0
 800b378:	4f62      	ldr	r7, [pc, #392]	; (800b504 <_strtod_l+0xb04>)
 800b37a:	4d62      	ldr	r5, [pc, #392]	; (800b504 <_strtod_l+0xb04>)
 800b37c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b37e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b382:	0d1b      	lsrs	r3, r3, #20
 800b384:	051b      	lsls	r3, r3, #20
 800b386:	930f      	str	r3, [sp, #60]	; 0x3c
 800b388:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b38a:	4b5f      	ldr	r3, [pc, #380]	; (800b508 <_strtod_l+0xb08>)
 800b38c:	429a      	cmp	r2, r3
 800b38e:	f040 80c3 	bne.w	800b518 <_strtod_l+0xb18>
 800b392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b394:	4640      	mov	r0, r8
 800b396:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800b39a:	4649      	mov	r1, r9
 800b39c:	f001 ff26 	bl	800d1ec <__ulp>
 800b3a0:	4602      	mov	r2, r0
 800b3a2:	460b      	mov	r3, r1
 800b3a4:	4630      	mov	r0, r6
 800b3a6:	4639      	mov	r1, r7
 800b3a8:	f7f5 f896 	bl	80004d8 <__aeabi_dmul>
 800b3ac:	4642      	mov	r2, r8
 800b3ae:	464b      	mov	r3, r9
 800b3b0:	f7f4 fedc 	bl	800016c <__adddf3>
 800b3b4:	460b      	mov	r3, r1
 800b3b6:	4951      	ldr	r1, [pc, #324]	; (800b4fc <_strtod_l+0xafc>)
 800b3b8:	4a54      	ldr	r2, [pc, #336]	; (800b50c <_strtod_l+0xb0c>)
 800b3ba:	4019      	ands	r1, r3
 800b3bc:	4291      	cmp	r1, r2
 800b3be:	4680      	mov	r8, r0
 800b3c0:	d95d      	bls.n	800b47e <_strtod_l+0xa7e>
 800b3c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b3c4:	4b4e      	ldr	r3, [pc, #312]	; (800b500 <_strtod_l+0xb00>)
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d103      	bne.n	800b3d2 <_strtod_l+0x9d2>
 800b3ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	f43f ad56 	beq.w	800ae7e <_strtod_l+0x47e>
 800b3d2:	f04f 38ff 	mov.w	r8, #4294967295
 800b3d6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800b500 <_strtod_l+0xb00>
 800b3da:	4650      	mov	r0, sl
 800b3dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b3de:	f001 fbd5 	bl	800cb8c <_Bfree>
 800b3e2:	4650      	mov	r0, sl
 800b3e4:	9906      	ldr	r1, [sp, #24]
 800b3e6:	f001 fbd1 	bl	800cb8c <_Bfree>
 800b3ea:	4650      	mov	r0, sl
 800b3ec:	9904      	ldr	r1, [sp, #16]
 800b3ee:	f001 fbcd 	bl	800cb8c <_Bfree>
 800b3f2:	4659      	mov	r1, fp
 800b3f4:	4650      	mov	r0, sl
 800b3f6:	f001 fbc9 	bl	800cb8c <_Bfree>
 800b3fa:	e627      	b.n	800b04c <_strtod_l+0x64c>
 800b3fc:	f1b8 0f00 	cmp.w	r8, #0
 800b400:	d119      	bne.n	800b436 <_strtod_l+0xa36>
 800b402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b404:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b408:	b9e3      	cbnz	r3, 800b444 <_strtod_l+0xa44>
 800b40a:	2200      	movs	r2, #0
 800b40c:	4630      	mov	r0, r6
 800b40e:	4639      	mov	r1, r7
 800b410:	4b3c      	ldr	r3, [pc, #240]	; (800b504 <_strtod_l+0xb04>)
 800b412:	f7f5 fad3 	bl	80009bc <__aeabi_dcmplt>
 800b416:	b9c8      	cbnz	r0, 800b44c <_strtod_l+0xa4c>
 800b418:	2200      	movs	r2, #0
 800b41a:	4630      	mov	r0, r6
 800b41c:	4639      	mov	r1, r7
 800b41e:	4b3c      	ldr	r3, [pc, #240]	; (800b510 <_strtod_l+0xb10>)
 800b420:	f7f5 f85a 	bl	80004d8 <__aeabi_dmul>
 800b424:	4604      	mov	r4, r0
 800b426:	460d      	mov	r5, r1
 800b428:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b42c:	9416      	str	r4, [sp, #88]	; 0x58
 800b42e:	9317      	str	r3, [sp, #92]	; 0x5c
 800b430:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800b434:	e7a2      	b.n	800b37c <_strtod_l+0x97c>
 800b436:	f1b8 0f01 	cmp.w	r8, #1
 800b43a:	d103      	bne.n	800b444 <_strtod_l+0xa44>
 800b43c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b43e:	2b00      	cmp	r3, #0
 800b440:	f43f ad92 	beq.w	800af68 <_strtod_l+0x568>
 800b444:	2600      	movs	r6, #0
 800b446:	2400      	movs	r4, #0
 800b448:	4f32      	ldr	r7, [pc, #200]	; (800b514 <_strtod_l+0xb14>)
 800b44a:	e796      	b.n	800b37a <_strtod_l+0x97a>
 800b44c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b44e:	4d30      	ldr	r5, [pc, #192]	; (800b510 <_strtod_l+0xb10>)
 800b450:	e7ea      	b.n	800b428 <_strtod_l+0xa28>
 800b452:	4b2f      	ldr	r3, [pc, #188]	; (800b510 <_strtod_l+0xb10>)
 800b454:	2200      	movs	r2, #0
 800b456:	4630      	mov	r0, r6
 800b458:	4639      	mov	r1, r7
 800b45a:	f7f5 f83d 	bl	80004d8 <__aeabi_dmul>
 800b45e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b460:	4604      	mov	r4, r0
 800b462:	460d      	mov	r5, r1
 800b464:	b933      	cbnz	r3, 800b474 <_strtod_l+0xa74>
 800b466:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b46a:	9010      	str	r0, [sp, #64]	; 0x40
 800b46c:	9311      	str	r3, [sp, #68]	; 0x44
 800b46e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b472:	e783      	b.n	800b37c <_strtod_l+0x97c>
 800b474:	4602      	mov	r2, r0
 800b476:	460b      	mov	r3, r1
 800b478:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b47c:	e7f7      	b.n	800b46e <_strtod_l+0xa6e>
 800b47e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b482:	9b05      	ldr	r3, [sp, #20]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d1a8      	bne.n	800b3da <_strtod_l+0x9da>
 800b488:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b48c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b48e:	0d1b      	lsrs	r3, r3, #20
 800b490:	051b      	lsls	r3, r3, #20
 800b492:	429a      	cmp	r2, r3
 800b494:	d1a1      	bne.n	800b3da <_strtod_l+0x9da>
 800b496:	4620      	mov	r0, r4
 800b498:	4629      	mov	r1, r5
 800b49a:	f7f5 fdc3 	bl	8001024 <__aeabi_d2lz>
 800b49e:	f7f4 ffed 	bl	800047c <__aeabi_l2d>
 800b4a2:	4602      	mov	r2, r0
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	4629      	mov	r1, r5
 800b4aa:	f7f4 fe5d 	bl	8000168 <__aeabi_dsub>
 800b4ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b4b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b4b4:	ea43 0308 	orr.w	r3, r3, r8
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	4604      	mov	r4, r0
 800b4bc:	460d      	mov	r5, r1
 800b4be:	d066      	beq.n	800b58e <_strtod_l+0xb8e>
 800b4c0:	a309      	add	r3, pc, #36	; (adr r3, 800b4e8 <_strtod_l+0xae8>)
 800b4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c6:	f7f5 fa79 	bl	80009bc <__aeabi_dcmplt>
 800b4ca:	2800      	cmp	r0, #0
 800b4cc:	f47f ace2 	bne.w	800ae94 <_strtod_l+0x494>
 800b4d0:	a307      	add	r3, pc, #28	; (adr r3, 800b4f0 <_strtod_l+0xaf0>)
 800b4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	4629      	mov	r1, r5
 800b4da:	f7f5 fa8d 	bl	80009f8 <__aeabi_dcmpgt>
 800b4de:	2800      	cmp	r0, #0
 800b4e0:	f43f af7b 	beq.w	800b3da <_strtod_l+0x9da>
 800b4e4:	e4d6      	b.n	800ae94 <_strtod_l+0x494>
 800b4e6:	bf00      	nop
 800b4e8:	94a03595 	.word	0x94a03595
 800b4ec:	3fdfffff 	.word	0x3fdfffff
 800b4f0:	35afe535 	.word	0x35afe535
 800b4f4:	3fe00000 	.word	0x3fe00000
 800b4f8:	000fffff 	.word	0x000fffff
 800b4fc:	7ff00000 	.word	0x7ff00000
 800b500:	7fefffff 	.word	0x7fefffff
 800b504:	3ff00000 	.word	0x3ff00000
 800b508:	7fe00000 	.word	0x7fe00000
 800b50c:	7c9fffff 	.word	0x7c9fffff
 800b510:	3fe00000 	.word	0x3fe00000
 800b514:	bff00000 	.word	0xbff00000
 800b518:	9b05      	ldr	r3, [sp, #20]
 800b51a:	b313      	cbz	r3, 800b562 <_strtod_l+0xb62>
 800b51c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b51e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b522:	d81e      	bhi.n	800b562 <_strtod_l+0xb62>
 800b524:	a326      	add	r3, pc, #152	; (adr r3, 800b5c0 <_strtod_l+0xbc0>)
 800b526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52a:	4620      	mov	r0, r4
 800b52c:	4629      	mov	r1, r5
 800b52e:	f7f5 fa4f 	bl	80009d0 <__aeabi_dcmple>
 800b532:	b190      	cbz	r0, 800b55a <_strtod_l+0xb5a>
 800b534:	4629      	mov	r1, r5
 800b536:	4620      	mov	r0, r4
 800b538:	f7f5 faa6 	bl	8000a88 <__aeabi_d2uiz>
 800b53c:	2801      	cmp	r0, #1
 800b53e:	bf38      	it	cc
 800b540:	2001      	movcc	r0, #1
 800b542:	f7f4 ff4f 	bl	80003e4 <__aeabi_ui2d>
 800b546:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b548:	4604      	mov	r4, r0
 800b54a:	460d      	mov	r5, r1
 800b54c:	b9d3      	cbnz	r3, 800b584 <_strtod_l+0xb84>
 800b54e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b552:	9012      	str	r0, [sp, #72]	; 0x48
 800b554:	9313      	str	r3, [sp, #76]	; 0x4c
 800b556:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800b55a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b55c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800b560:	1a9f      	subs	r7, r3, r2
 800b562:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b566:	f001 fe41 	bl	800d1ec <__ulp>
 800b56a:	4602      	mov	r2, r0
 800b56c:	460b      	mov	r3, r1
 800b56e:	4630      	mov	r0, r6
 800b570:	4639      	mov	r1, r7
 800b572:	f7f4 ffb1 	bl	80004d8 <__aeabi_dmul>
 800b576:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b57a:	f7f4 fdf7 	bl	800016c <__adddf3>
 800b57e:	4680      	mov	r8, r0
 800b580:	4689      	mov	r9, r1
 800b582:	e77e      	b.n	800b482 <_strtod_l+0xa82>
 800b584:	4602      	mov	r2, r0
 800b586:	460b      	mov	r3, r1
 800b588:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800b58c:	e7e3      	b.n	800b556 <_strtod_l+0xb56>
 800b58e:	a30e      	add	r3, pc, #56	; (adr r3, 800b5c8 <_strtod_l+0xbc8>)
 800b590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b594:	f7f5 fa12 	bl	80009bc <__aeabi_dcmplt>
 800b598:	e7a1      	b.n	800b4de <_strtod_l+0xade>
 800b59a:	2300      	movs	r3, #0
 800b59c:	930a      	str	r3, [sp, #40]	; 0x28
 800b59e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b5a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b5a2:	6013      	str	r3, [r2, #0]
 800b5a4:	f7ff ba71 	b.w	800aa8a <_strtod_l+0x8a>
 800b5a8:	2a65      	cmp	r2, #101	; 0x65
 800b5aa:	f43f ab63 	beq.w	800ac74 <_strtod_l+0x274>
 800b5ae:	2a45      	cmp	r2, #69	; 0x45
 800b5b0:	f43f ab60 	beq.w	800ac74 <_strtod_l+0x274>
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	f7ff bb95 	b.w	800ace4 <_strtod_l+0x2e4>
 800b5ba:	bf00      	nop
 800b5bc:	f3af 8000 	nop.w
 800b5c0:	ffc00000 	.word	0xffc00000
 800b5c4:	41dfffff 	.word	0x41dfffff
 800b5c8:	94a03595 	.word	0x94a03595
 800b5cc:	3fcfffff 	.word	0x3fcfffff

0800b5d0 <_strtod_r>:
 800b5d0:	4b01      	ldr	r3, [pc, #4]	; (800b5d8 <_strtod_r+0x8>)
 800b5d2:	f7ff ba15 	b.w	800aa00 <_strtod_l>
 800b5d6:	bf00      	nop
 800b5d8:	200001e4 	.word	0x200001e4

0800b5dc <_strtol_l.constprop.0>:
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5e2:	4680      	mov	r8, r0
 800b5e4:	d001      	beq.n	800b5ea <_strtol_l.constprop.0+0xe>
 800b5e6:	2b24      	cmp	r3, #36	; 0x24
 800b5e8:	d906      	bls.n	800b5f8 <_strtol_l.constprop.0+0x1c>
 800b5ea:	f7fe fb23 	bl	8009c34 <__errno>
 800b5ee:	2316      	movs	r3, #22
 800b5f0:	6003      	str	r3, [r0, #0]
 800b5f2:	2000      	movs	r0, #0
 800b5f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5f8:	460d      	mov	r5, r1
 800b5fa:	4f35      	ldr	r7, [pc, #212]	; (800b6d0 <_strtol_l.constprop.0+0xf4>)
 800b5fc:	4628      	mov	r0, r5
 800b5fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b602:	5de6      	ldrb	r6, [r4, r7]
 800b604:	f016 0608 	ands.w	r6, r6, #8
 800b608:	d1f8      	bne.n	800b5fc <_strtol_l.constprop.0+0x20>
 800b60a:	2c2d      	cmp	r4, #45	; 0x2d
 800b60c:	d12f      	bne.n	800b66e <_strtol_l.constprop.0+0x92>
 800b60e:	2601      	movs	r6, #1
 800b610:	782c      	ldrb	r4, [r5, #0]
 800b612:	1c85      	adds	r5, r0, #2
 800b614:	2b00      	cmp	r3, #0
 800b616:	d057      	beq.n	800b6c8 <_strtol_l.constprop.0+0xec>
 800b618:	2b10      	cmp	r3, #16
 800b61a:	d109      	bne.n	800b630 <_strtol_l.constprop.0+0x54>
 800b61c:	2c30      	cmp	r4, #48	; 0x30
 800b61e:	d107      	bne.n	800b630 <_strtol_l.constprop.0+0x54>
 800b620:	7828      	ldrb	r0, [r5, #0]
 800b622:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b626:	2858      	cmp	r0, #88	; 0x58
 800b628:	d149      	bne.n	800b6be <_strtol_l.constprop.0+0xe2>
 800b62a:	2310      	movs	r3, #16
 800b62c:	786c      	ldrb	r4, [r5, #1]
 800b62e:	3502      	adds	r5, #2
 800b630:	2700      	movs	r7, #0
 800b632:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800b636:	f10e 3eff 	add.w	lr, lr, #4294967295
 800b63a:	fbbe f9f3 	udiv	r9, lr, r3
 800b63e:	4638      	mov	r0, r7
 800b640:	fb03 ea19 	mls	sl, r3, r9, lr
 800b644:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b648:	f1bc 0f09 	cmp.w	ip, #9
 800b64c:	d814      	bhi.n	800b678 <_strtol_l.constprop.0+0x9c>
 800b64e:	4664      	mov	r4, ip
 800b650:	42a3      	cmp	r3, r4
 800b652:	dd22      	ble.n	800b69a <_strtol_l.constprop.0+0xbe>
 800b654:	2f00      	cmp	r7, #0
 800b656:	db1d      	blt.n	800b694 <_strtol_l.constprop.0+0xb8>
 800b658:	4581      	cmp	r9, r0
 800b65a:	d31b      	bcc.n	800b694 <_strtol_l.constprop.0+0xb8>
 800b65c:	d101      	bne.n	800b662 <_strtol_l.constprop.0+0x86>
 800b65e:	45a2      	cmp	sl, r4
 800b660:	db18      	blt.n	800b694 <_strtol_l.constprop.0+0xb8>
 800b662:	2701      	movs	r7, #1
 800b664:	fb00 4003 	mla	r0, r0, r3, r4
 800b668:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b66c:	e7ea      	b.n	800b644 <_strtol_l.constprop.0+0x68>
 800b66e:	2c2b      	cmp	r4, #43	; 0x2b
 800b670:	bf04      	itt	eq
 800b672:	782c      	ldrbeq	r4, [r5, #0]
 800b674:	1c85      	addeq	r5, r0, #2
 800b676:	e7cd      	b.n	800b614 <_strtol_l.constprop.0+0x38>
 800b678:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b67c:	f1bc 0f19 	cmp.w	ip, #25
 800b680:	d801      	bhi.n	800b686 <_strtol_l.constprop.0+0xaa>
 800b682:	3c37      	subs	r4, #55	; 0x37
 800b684:	e7e4      	b.n	800b650 <_strtol_l.constprop.0+0x74>
 800b686:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b68a:	f1bc 0f19 	cmp.w	ip, #25
 800b68e:	d804      	bhi.n	800b69a <_strtol_l.constprop.0+0xbe>
 800b690:	3c57      	subs	r4, #87	; 0x57
 800b692:	e7dd      	b.n	800b650 <_strtol_l.constprop.0+0x74>
 800b694:	f04f 37ff 	mov.w	r7, #4294967295
 800b698:	e7e6      	b.n	800b668 <_strtol_l.constprop.0+0x8c>
 800b69a:	2f00      	cmp	r7, #0
 800b69c:	da07      	bge.n	800b6ae <_strtol_l.constprop.0+0xd2>
 800b69e:	2322      	movs	r3, #34	; 0x22
 800b6a0:	4670      	mov	r0, lr
 800b6a2:	f8c8 3000 	str.w	r3, [r8]
 800b6a6:	2a00      	cmp	r2, #0
 800b6a8:	d0a4      	beq.n	800b5f4 <_strtol_l.constprop.0+0x18>
 800b6aa:	1e69      	subs	r1, r5, #1
 800b6ac:	e005      	b.n	800b6ba <_strtol_l.constprop.0+0xde>
 800b6ae:	b106      	cbz	r6, 800b6b2 <_strtol_l.constprop.0+0xd6>
 800b6b0:	4240      	negs	r0, r0
 800b6b2:	2a00      	cmp	r2, #0
 800b6b4:	d09e      	beq.n	800b5f4 <_strtol_l.constprop.0+0x18>
 800b6b6:	2f00      	cmp	r7, #0
 800b6b8:	d1f7      	bne.n	800b6aa <_strtol_l.constprop.0+0xce>
 800b6ba:	6011      	str	r1, [r2, #0]
 800b6bc:	e79a      	b.n	800b5f4 <_strtol_l.constprop.0+0x18>
 800b6be:	2430      	movs	r4, #48	; 0x30
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d1b5      	bne.n	800b630 <_strtol_l.constprop.0+0x54>
 800b6c4:	2308      	movs	r3, #8
 800b6c6:	e7b3      	b.n	800b630 <_strtol_l.constprop.0+0x54>
 800b6c8:	2c30      	cmp	r4, #48	; 0x30
 800b6ca:	d0a9      	beq.n	800b620 <_strtol_l.constprop.0+0x44>
 800b6cc:	230a      	movs	r3, #10
 800b6ce:	e7af      	b.n	800b630 <_strtol_l.constprop.0+0x54>
 800b6d0:	0800e641 	.word	0x0800e641

0800b6d4 <_strtol_r>:
 800b6d4:	f7ff bf82 	b.w	800b5dc <_strtol_l.constprop.0>

0800b6d8 <quorem>:
 800b6d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6dc:	6903      	ldr	r3, [r0, #16]
 800b6de:	690c      	ldr	r4, [r1, #16]
 800b6e0:	4607      	mov	r7, r0
 800b6e2:	42a3      	cmp	r3, r4
 800b6e4:	f2c0 8082 	blt.w	800b7ec <quorem+0x114>
 800b6e8:	3c01      	subs	r4, #1
 800b6ea:	f100 0514 	add.w	r5, r0, #20
 800b6ee:	f101 0814 	add.w	r8, r1, #20
 800b6f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6f6:	9301      	str	r3, [sp, #4]
 800b6f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b6fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b700:	3301      	adds	r3, #1
 800b702:	429a      	cmp	r2, r3
 800b704:	fbb2 f6f3 	udiv	r6, r2, r3
 800b708:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b70c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b710:	d331      	bcc.n	800b776 <quorem+0x9e>
 800b712:	f04f 0e00 	mov.w	lr, #0
 800b716:	4640      	mov	r0, r8
 800b718:	46ac      	mov	ip, r5
 800b71a:	46f2      	mov	sl, lr
 800b71c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b720:	b293      	uxth	r3, r2
 800b722:	fb06 e303 	mla	r3, r6, r3, lr
 800b726:	0c12      	lsrs	r2, r2, #16
 800b728:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b72c:	b29b      	uxth	r3, r3
 800b72e:	fb06 e202 	mla	r2, r6, r2, lr
 800b732:	ebaa 0303 	sub.w	r3, sl, r3
 800b736:	f8dc a000 	ldr.w	sl, [ip]
 800b73a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b73e:	fa1f fa8a 	uxth.w	sl, sl
 800b742:	4453      	add	r3, sl
 800b744:	f8dc a000 	ldr.w	sl, [ip]
 800b748:	b292      	uxth	r2, r2
 800b74a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b74e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b752:	b29b      	uxth	r3, r3
 800b754:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b758:	4581      	cmp	r9, r0
 800b75a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b75e:	f84c 3b04 	str.w	r3, [ip], #4
 800b762:	d2db      	bcs.n	800b71c <quorem+0x44>
 800b764:	f855 300b 	ldr.w	r3, [r5, fp]
 800b768:	b92b      	cbnz	r3, 800b776 <quorem+0x9e>
 800b76a:	9b01      	ldr	r3, [sp, #4]
 800b76c:	3b04      	subs	r3, #4
 800b76e:	429d      	cmp	r5, r3
 800b770:	461a      	mov	r2, r3
 800b772:	d32f      	bcc.n	800b7d4 <quorem+0xfc>
 800b774:	613c      	str	r4, [r7, #16]
 800b776:	4638      	mov	r0, r7
 800b778:	f001 fc90 	bl	800d09c <__mcmp>
 800b77c:	2800      	cmp	r0, #0
 800b77e:	db25      	blt.n	800b7cc <quorem+0xf4>
 800b780:	4628      	mov	r0, r5
 800b782:	f04f 0c00 	mov.w	ip, #0
 800b786:	3601      	adds	r6, #1
 800b788:	f858 1b04 	ldr.w	r1, [r8], #4
 800b78c:	f8d0 e000 	ldr.w	lr, [r0]
 800b790:	b28b      	uxth	r3, r1
 800b792:	ebac 0303 	sub.w	r3, ip, r3
 800b796:	fa1f f28e 	uxth.w	r2, lr
 800b79a:	4413      	add	r3, r2
 800b79c:	0c0a      	lsrs	r2, r1, #16
 800b79e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b7a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7ac:	45c1      	cmp	r9, r8
 800b7ae:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b7b2:	f840 3b04 	str.w	r3, [r0], #4
 800b7b6:	d2e7      	bcs.n	800b788 <quorem+0xb0>
 800b7b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7c0:	b922      	cbnz	r2, 800b7cc <quorem+0xf4>
 800b7c2:	3b04      	subs	r3, #4
 800b7c4:	429d      	cmp	r5, r3
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	d30a      	bcc.n	800b7e0 <quorem+0x108>
 800b7ca:	613c      	str	r4, [r7, #16]
 800b7cc:	4630      	mov	r0, r6
 800b7ce:	b003      	add	sp, #12
 800b7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7d4:	6812      	ldr	r2, [r2, #0]
 800b7d6:	3b04      	subs	r3, #4
 800b7d8:	2a00      	cmp	r2, #0
 800b7da:	d1cb      	bne.n	800b774 <quorem+0x9c>
 800b7dc:	3c01      	subs	r4, #1
 800b7de:	e7c6      	b.n	800b76e <quorem+0x96>
 800b7e0:	6812      	ldr	r2, [r2, #0]
 800b7e2:	3b04      	subs	r3, #4
 800b7e4:	2a00      	cmp	r2, #0
 800b7e6:	d1f0      	bne.n	800b7ca <quorem+0xf2>
 800b7e8:	3c01      	subs	r4, #1
 800b7ea:	e7eb      	b.n	800b7c4 <quorem+0xec>
 800b7ec:	2000      	movs	r0, #0
 800b7ee:	e7ee      	b.n	800b7ce <quorem+0xf6>

0800b7f0 <_dtoa_r>:
 800b7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f4:	4616      	mov	r6, r2
 800b7f6:	461f      	mov	r7, r3
 800b7f8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b7fa:	b099      	sub	sp, #100	; 0x64
 800b7fc:	4605      	mov	r5, r0
 800b7fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b802:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b806:	b974      	cbnz	r4, 800b826 <_dtoa_r+0x36>
 800b808:	2010      	movs	r0, #16
 800b80a:	f001 f949 	bl	800caa0 <malloc>
 800b80e:	4602      	mov	r2, r0
 800b810:	6268      	str	r0, [r5, #36]	; 0x24
 800b812:	b920      	cbnz	r0, 800b81e <_dtoa_r+0x2e>
 800b814:	21ea      	movs	r1, #234	; 0xea
 800b816:	4ba8      	ldr	r3, [pc, #672]	; (800bab8 <_dtoa_r+0x2c8>)
 800b818:	48a8      	ldr	r0, [pc, #672]	; (800babc <_dtoa_r+0x2cc>)
 800b81a:	f002 f8b3 	bl	800d984 <__assert_func>
 800b81e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b822:	6004      	str	r4, [r0, #0]
 800b824:	60c4      	str	r4, [r0, #12]
 800b826:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b828:	6819      	ldr	r1, [r3, #0]
 800b82a:	b151      	cbz	r1, 800b842 <_dtoa_r+0x52>
 800b82c:	685a      	ldr	r2, [r3, #4]
 800b82e:	2301      	movs	r3, #1
 800b830:	4093      	lsls	r3, r2
 800b832:	604a      	str	r2, [r1, #4]
 800b834:	608b      	str	r3, [r1, #8]
 800b836:	4628      	mov	r0, r5
 800b838:	f001 f9a8 	bl	800cb8c <_Bfree>
 800b83c:	2200      	movs	r2, #0
 800b83e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b840:	601a      	str	r2, [r3, #0]
 800b842:	1e3b      	subs	r3, r7, #0
 800b844:	bfaf      	iteee	ge
 800b846:	2300      	movge	r3, #0
 800b848:	2201      	movlt	r2, #1
 800b84a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b84e:	9305      	strlt	r3, [sp, #20]
 800b850:	bfa8      	it	ge
 800b852:	f8c8 3000 	strge.w	r3, [r8]
 800b856:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b85a:	4b99      	ldr	r3, [pc, #612]	; (800bac0 <_dtoa_r+0x2d0>)
 800b85c:	bfb8      	it	lt
 800b85e:	f8c8 2000 	strlt.w	r2, [r8]
 800b862:	ea33 0309 	bics.w	r3, r3, r9
 800b866:	d119      	bne.n	800b89c <_dtoa_r+0xac>
 800b868:	f242 730f 	movw	r3, #9999	; 0x270f
 800b86c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b86e:	6013      	str	r3, [r2, #0]
 800b870:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b874:	4333      	orrs	r3, r6
 800b876:	f000 857f 	beq.w	800c378 <_dtoa_r+0xb88>
 800b87a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b87c:	b953      	cbnz	r3, 800b894 <_dtoa_r+0xa4>
 800b87e:	4b91      	ldr	r3, [pc, #580]	; (800bac4 <_dtoa_r+0x2d4>)
 800b880:	e022      	b.n	800b8c8 <_dtoa_r+0xd8>
 800b882:	4b91      	ldr	r3, [pc, #580]	; (800bac8 <_dtoa_r+0x2d8>)
 800b884:	9303      	str	r3, [sp, #12]
 800b886:	3308      	adds	r3, #8
 800b888:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b88a:	6013      	str	r3, [r2, #0]
 800b88c:	9803      	ldr	r0, [sp, #12]
 800b88e:	b019      	add	sp, #100	; 0x64
 800b890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b894:	4b8b      	ldr	r3, [pc, #556]	; (800bac4 <_dtoa_r+0x2d4>)
 800b896:	9303      	str	r3, [sp, #12]
 800b898:	3303      	adds	r3, #3
 800b89a:	e7f5      	b.n	800b888 <_dtoa_r+0x98>
 800b89c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b8a0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b8a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	f7f5 f87c 	bl	80009a8 <__aeabi_dcmpeq>
 800b8b0:	4680      	mov	r8, r0
 800b8b2:	b158      	cbz	r0, 800b8cc <_dtoa_r+0xdc>
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b8b8:	6013      	str	r3, [r2, #0]
 800b8ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	f000 8558 	beq.w	800c372 <_dtoa_r+0xb82>
 800b8c2:	4882      	ldr	r0, [pc, #520]	; (800bacc <_dtoa_r+0x2dc>)
 800b8c4:	6018      	str	r0, [r3, #0]
 800b8c6:	1e43      	subs	r3, r0, #1
 800b8c8:	9303      	str	r3, [sp, #12]
 800b8ca:	e7df      	b.n	800b88c <_dtoa_r+0x9c>
 800b8cc:	ab16      	add	r3, sp, #88	; 0x58
 800b8ce:	9301      	str	r3, [sp, #4]
 800b8d0:	ab17      	add	r3, sp, #92	; 0x5c
 800b8d2:	9300      	str	r3, [sp, #0]
 800b8d4:	4628      	mov	r0, r5
 800b8d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b8da:	f001 fd01 	bl	800d2e0 <__d2b>
 800b8de:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b8e2:	4683      	mov	fp, r0
 800b8e4:	2c00      	cmp	r4, #0
 800b8e6:	d07f      	beq.n	800b9e8 <_dtoa_r+0x1f8>
 800b8e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b8ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8ee:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b8f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8f6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b8fa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b8fe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b902:	2200      	movs	r2, #0
 800b904:	4b72      	ldr	r3, [pc, #456]	; (800bad0 <_dtoa_r+0x2e0>)
 800b906:	f7f4 fc2f 	bl	8000168 <__aeabi_dsub>
 800b90a:	a365      	add	r3, pc, #404	; (adr r3, 800baa0 <_dtoa_r+0x2b0>)
 800b90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b910:	f7f4 fde2 	bl	80004d8 <__aeabi_dmul>
 800b914:	a364      	add	r3, pc, #400	; (adr r3, 800baa8 <_dtoa_r+0x2b8>)
 800b916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91a:	f7f4 fc27 	bl	800016c <__adddf3>
 800b91e:	4606      	mov	r6, r0
 800b920:	4620      	mov	r0, r4
 800b922:	460f      	mov	r7, r1
 800b924:	f7f4 fd6e 	bl	8000404 <__aeabi_i2d>
 800b928:	a361      	add	r3, pc, #388	; (adr r3, 800bab0 <_dtoa_r+0x2c0>)
 800b92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92e:	f7f4 fdd3 	bl	80004d8 <__aeabi_dmul>
 800b932:	4602      	mov	r2, r0
 800b934:	460b      	mov	r3, r1
 800b936:	4630      	mov	r0, r6
 800b938:	4639      	mov	r1, r7
 800b93a:	f7f4 fc17 	bl	800016c <__adddf3>
 800b93e:	4606      	mov	r6, r0
 800b940:	460f      	mov	r7, r1
 800b942:	f7f5 f879 	bl	8000a38 <__aeabi_d2iz>
 800b946:	2200      	movs	r2, #0
 800b948:	4682      	mov	sl, r0
 800b94a:	2300      	movs	r3, #0
 800b94c:	4630      	mov	r0, r6
 800b94e:	4639      	mov	r1, r7
 800b950:	f7f5 f834 	bl	80009bc <__aeabi_dcmplt>
 800b954:	b148      	cbz	r0, 800b96a <_dtoa_r+0x17a>
 800b956:	4650      	mov	r0, sl
 800b958:	f7f4 fd54 	bl	8000404 <__aeabi_i2d>
 800b95c:	4632      	mov	r2, r6
 800b95e:	463b      	mov	r3, r7
 800b960:	f7f5 f822 	bl	80009a8 <__aeabi_dcmpeq>
 800b964:	b908      	cbnz	r0, 800b96a <_dtoa_r+0x17a>
 800b966:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b96a:	f1ba 0f16 	cmp.w	sl, #22
 800b96e:	d858      	bhi.n	800ba22 <_dtoa_r+0x232>
 800b970:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b974:	4b57      	ldr	r3, [pc, #348]	; (800bad4 <_dtoa_r+0x2e4>)
 800b976:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97e:	f7f5 f81d 	bl	80009bc <__aeabi_dcmplt>
 800b982:	2800      	cmp	r0, #0
 800b984:	d04f      	beq.n	800ba26 <_dtoa_r+0x236>
 800b986:	2300      	movs	r3, #0
 800b988:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b98c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b98e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b990:	1b1c      	subs	r4, r3, r4
 800b992:	1e63      	subs	r3, r4, #1
 800b994:	9309      	str	r3, [sp, #36]	; 0x24
 800b996:	bf49      	itett	mi
 800b998:	f1c4 0301 	rsbmi	r3, r4, #1
 800b99c:	2300      	movpl	r3, #0
 800b99e:	9306      	strmi	r3, [sp, #24]
 800b9a0:	2300      	movmi	r3, #0
 800b9a2:	bf54      	ite	pl
 800b9a4:	9306      	strpl	r3, [sp, #24]
 800b9a6:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b9a8:	f1ba 0f00 	cmp.w	sl, #0
 800b9ac:	db3d      	blt.n	800ba2a <_dtoa_r+0x23a>
 800b9ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9b0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b9b4:	4453      	add	r3, sl
 800b9b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	930a      	str	r3, [sp, #40]	; 0x28
 800b9bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b9be:	2b09      	cmp	r3, #9
 800b9c0:	f200 808c 	bhi.w	800badc <_dtoa_r+0x2ec>
 800b9c4:	2b05      	cmp	r3, #5
 800b9c6:	bfc4      	itt	gt
 800b9c8:	3b04      	subgt	r3, #4
 800b9ca:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b9cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b9ce:	bfc8      	it	gt
 800b9d0:	2400      	movgt	r4, #0
 800b9d2:	f1a3 0302 	sub.w	r3, r3, #2
 800b9d6:	bfd8      	it	le
 800b9d8:	2401      	movle	r4, #1
 800b9da:	2b03      	cmp	r3, #3
 800b9dc:	f200 808a 	bhi.w	800baf4 <_dtoa_r+0x304>
 800b9e0:	e8df f003 	tbb	[pc, r3]
 800b9e4:	5b4d4f2d 	.word	0x5b4d4f2d
 800b9e8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b9ec:	441c      	add	r4, r3
 800b9ee:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b9f2:	2b20      	cmp	r3, #32
 800b9f4:	bfc3      	ittte	gt
 800b9f6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b9fa:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800b9fe:	fa09 f303 	lslgt.w	r3, r9, r3
 800ba02:	f1c3 0320 	rsble	r3, r3, #32
 800ba06:	bfc6      	itte	gt
 800ba08:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ba0c:	4318      	orrgt	r0, r3
 800ba0e:	fa06 f003 	lslle.w	r0, r6, r3
 800ba12:	f7f4 fce7 	bl	80003e4 <__aeabi_ui2d>
 800ba16:	2301      	movs	r3, #1
 800ba18:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ba1c:	3c01      	subs	r4, #1
 800ba1e:	9313      	str	r3, [sp, #76]	; 0x4c
 800ba20:	e76f      	b.n	800b902 <_dtoa_r+0x112>
 800ba22:	2301      	movs	r3, #1
 800ba24:	e7b2      	b.n	800b98c <_dtoa_r+0x19c>
 800ba26:	900f      	str	r0, [sp, #60]	; 0x3c
 800ba28:	e7b1      	b.n	800b98e <_dtoa_r+0x19e>
 800ba2a:	9b06      	ldr	r3, [sp, #24]
 800ba2c:	eba3 030a 	sub.w	r3, r3, sl
 800ba30:	9306      	str	r3, [sp, #24]
 800ba32:	f1ca 0300 	rsb	r3, sl, #0
 800ba36:	930a      	str	r3, [sp, #40]	; 0x28
 800ba38:	2300      	movs	r3, #0
 800ba3a:	930e      	str	r3, [sp, #56]	; 0x38
 800ba3c:	e7be      	b.n	800b9bc <_dtoa_r+0x1cc>
 800ba3e:	2300      	movs	r3, #0
 800ba40:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	dc58      	bgt.n	800bafa <_dtoa_r+0x30a>
 800ba48:	f04f 0901 	mov.w	r9, #1
 800ba4c:	464b      	mov	r3, r9
 800ba4e:	f8cd 9020 	str.w	r9, [sp, #32]
 800ba52:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800ba56:	2200      	movs	r2, #0
 800ba58:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ba5a:	6042      	str	r2, [r0, #4]
 800ba5c:	2204      	movs	r2, #4
 800ba5e:	f102 0614 	add.w	r6, r2, #20
 800ba62:	429e      	cmp	r6, r3
 800ba64:	6841      	ldr	r1, [r0, #4]
 800ba66:	d94e      	bls.n	800bb06 <_dtoa_r+0x316>
 800ba68:	4628      	mov	r0, r5
 800ba6a:	f001 f84f 	bl	800cb0c <_Balloc>
 800ba6e:	9003      	str	r0, [sp, #12]
 800ba70:	2800      	cmp	r0, #0
 800ba72:	d14c      	bne.n	800bb0e <_dtoa_r+0x31e>
 800ba74:	4602      	mov	r2, r0
 800ba76:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ba7a:	4b17      	ldr	r3, [pc, #92]	; (800bad8 <_dtoa_r+0x2e8>)
 800ba7c:	e6cc      	b.n	800b818 <_dtoa_r+0x28>
 800ba7e:	2301      	movs	r3, #1
 800ba80:	e7de      	b.n	800ba40 <_dtoa_r+0x250>
 800ba82:	2300      	movs	r3, #0
 800ba84:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba86:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ba88:	eb0a 0903 	add.w	r9, sl, r3
 800ba8c:	f109 0301 	add.w	r3, r9, #1
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	9308      	str	r3, [sp, #32]
 800ba94:	bfb8      	it	lt
 800ba96:	2301      	movlt	r3, #1
 800ba98:	e7dd      	b.n	800ba56 <_dtoa_r+0x266>
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	e7f2      	b.n	800ba84 <_dtoa_r+0x294>
 800ba9e:	bf00      	nop
 800baa0:	636f4361 	.word	0x636f4361
 800baa4:	3fd287a7 	.word	0x3fd287a7
 800baa8:	8b60c8b3 	.word	0x8b60c8b3
 800baac:	3fc68a28 	.word	0x3fc68a28
 800bab0:	509f79fb 	.word	0x509f79fb
 800bab4:	3fd34413 	.word	0x3fd34413
 800bab8:	0800e74e 	.word	0x0800e74e
 800babc:	0800e765 	.word	0x0800e765
 800bac0:	7ff00000 	.word	0x7ff00000
 800bac4:	0800e74a 	.word	0x0800e74a
 800bac8:	0800e741 	.word	0x0800e741
 800bacc:	0800e5c1 	.word	0x0800e5c1
 800bad0:	3ff80000 	.word	0x3ff80000
 800bad4:	0800e8d0 	.word	0x0800e8d0
 800bad8:	0800e7c0 	.word	0x0800e7c0
 800badc:	2401      	movs	r4, #1
 800bade:	2300      	movs	r3, #0
 800bae0:	940b      	str	r4, [sp, #44]	; 0x2c
 800bae2:	9322      	str	r3, [sp, #136]	; 0x88
 800bae4:	f04f 39ff 	mov.w	r9, #4294967295
 800bae8:	2200      	movs	r2, #0
 800baea:	2312      	movs	r3, #18
 800baec:	f8cd 9020 	str.w	r9, [sp, #32]
 800baf0:	9223      	str	r2, [sp, #140]	; 0x8c
 800baf2:	e7b0      	b.n	800ba56 <_dtoa_r+0x266>
 800baf4:	2301      	movs	r3, #1
 800baf6:	930b      	str	r3, [sp, #44]	; 0x2c
 800baf8:	e7f4      	b.n	800bae4 <_dtoa_r+0x2f4>
 800bafa:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800bafe:	464b      	mov	r3, r9
 800bb00:	f8cd 9020 	str.w	r9, [sp, #32]
 800bb04:	e7a7      	b.n	800ba56 <_dtoa_r+0x266>
 800bb06:	3101      	adds	r1, #1
 800bb08:	6041      	str	r1, [r0, #4]
 800bb0a:	0052      	lsls	r2, r2, #1
 800bb0c:	e7a7      	b.n	800ba5e <_dtoa_r+0x26e>
 800bb0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bb10:	9a03      	ldr	r2, [sp, #12]
 800bb12:	601a      	str	r2, [r3, #0]
 800bb14:	9b08      	ldr	r3, [sp, #32]
 800bb16:	2b0e      	cmp	r3, #14
 800bb18:	f200 80a8 	bhi.w	800bc6c <_dtoa_r+0x47c>
 800bb1c:	2c00      	cmp	r4, #0
 800bb1e:	f000 80a5 	beq.w	800bc6c <_dtoa_r+0x47c>
 800bb22:	f1ba 0f00 	cmp.w	sl, #0
 800bb26:	dd34      	ble.n	800bb92 <_dtoa_r+0x3a2>
 800bb28:	4a9a      	ldr	r2, [pc, #616]	; (800bd94 <_dtoa_r+0x5a4>)
 800bb2a:	f00a 030f 	and.w	r3, sl, #15
 800bb2e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bb32:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800bb36:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bb3a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bb3e:	ea4f 142a 	mov.w	r4, sl, asr #4
 800bb42:	d016      	beq.n	800bb72 <_dtoa_r+0x382>
 800bb44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bb48:	4b93      	ldr	r3, [pc, #588]	; (800bd98 <_dtoa_r+0x5a8>)
 800bb4a:	2703      	movs	r7, #3
 800bb4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb50:	f7f4 fdec 	bl	800072c <__aeabi_ddiv>
 800bb54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb58:	f004 040f 	and.w	r4, r4, #15
 800bb5c:	4e8e      	ldr	r6, [pc, #568]	; (800bd98 <_dtoa_r+0x5a8>)
 800bb5e:	b954      	cbnz	r4, 800bb76 <_dtoa_r+0x386>
 800bb60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bb64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb68:	f7f4 fde0 	bl	800072c <__aeabi_ddiv>
 800bb6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb70:	e029      	b.n	800bbc6 <_dtoa_r+0x3d6>
 800bb72:	2702      	movs	r7, #2
 800bb74:	e7f2      	b.n	800bb5c <_dtoa_r+0x36c>
 800bb76:	07e1      	lsls	r1, r4, #31
 800bb78:	d508      	bpl.n	800bb8c <_dtoa_r+0x39c>
 800bb7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bb7e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bb82:	f7f4 fca9 	bl	80004d8 <__aeabi_dmul>
 800bb86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bb8a:	3701      	adds	r7, #1
 800bb8c:	1064      	asrs	r4, r4, #1
 800bb8e:	3608      	adds	r6, #8
 800bb90:	e7e5      	b.n	800bb5e <_dtoa_r+0x36e>
 800bb92:	f000 80a5 	beq.w	800bce0 <_dtoa_r+0x4f0>
 800bb96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bb9a:	f1ca 0400 	rsb	r4, sl, #0
 800bb9e:	4b7d      	ldr	r3, [pc, #500]	; (800bd94 <_dtoa_r+0x5a4>)
 800bba0:	f004 020f 	and.w	r2, r4, #15
 800bba4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbac:	f7f4 fc94 	bl	80004d8 <__aeabi_dmul>
 800bbb0:	2702      	movs	r7, #2
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bbb8:	4e77      	ldr	r6, [pc, #476]	; (800bd98 <_dtoa_r+0x5a8>)
 800bbba:	1124      	asrs	r4, r4, #4
 800bbbc:	2c00      	cmp	r4, #0
 800bbbe:	f040 8084 	bne.w	800bcca <_dtoa_r+0x4da>
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d1d2      	bne.n	800bb6c <_dtoa_r+0x37c>
 800bbc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	f000 808b 	beq.w	800bce4 <_dtoa_r+0x4f4>
 800bbce:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bbd2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bbd6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bbda:	2200      	movs	r2, #0
 800bbdc:	4b6f      	ldr	r3, [pc, #444]	; (800bd9c <_dtoa_r+0x5ac>)
 800bbde:	f7f4 feed 	bl	80009bc <__aeabi_dcmplt>
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	d07e      	beq.n	800bce4 <_dtoa_r+0x4f4>
 800bbe6:	9b08      	ldr	r3, [sp, #32]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d07b      	beq.n	800bce4 <_dtoa_r+0x4f4>
 800bbec:	f1b9 0f00 	cmp.w	r9, #0
 800bbf0:	dd38      	ble.n	800bc64 <_dtoa_r+0x474>
 800bbf2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	4b69      	ldr	r3, [pc, #420]	; (800bda0 <_dtoa_r+0x5b0>)
 800bbfa:	f7f4 fc6d 	bl	80004d8 <__aeabi_dmul>
 800bbfe:	464c      	mov	r4, r9
 800bc00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc04:	f10a 38ff 	add.w	r8, sl, #4294967295
 800bc08:	3701      	adds	r7, #1
 800bc0a:	4638      	mov	r0, r7
 800bc0c:	f7f4 fbfa 	bl	8000404 <__aeabi_i2d>
 800bc10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc14:	f7f4 fc60 	bl	80004d8 <__aeabi_dmul>
 800bc18:	2200      	movs	r2, #0
 800bc1a:	4b62      	ldr	r3, [pc, #392]	; (800bda4 <_dtoa_r+0x5b4>)
 800bc1c:	f7f4 faa6 	bl	800016c <__adddf3>
 800bc20:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bc24:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bc28:	9611      	str	r6, [sp, #68]	; 0x44
 800bc2a:	2c00      	cmp	r4, #0
 800bc2c:	d15d      	bne.n	800bcea <_dtoa_r+0x4fa>
 800bc2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc32:	2200      	movs	r2, #0
 800bc34:	4b5c      	ldr	r3, [pc, #368]	; (800bda8 <_dtoa_r+0x5b8>)
 800bc36:	f7f4 fa97 	bl	8000168 <__aeabi_dsub>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bc42:	4633      	mov	r3, r6
 800bc44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bc46:	f7f4 fed7 	bl	80009f8 <__aeabi_dcmpgt>
 800bc4a:	2800      	cmp	r0, #0
 800bc4c:	f040 829c 	bne.w	800c188 <_dtoa_r+0x998>
 800bc50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bc56:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bc5a:	f7f4 feaf 	bl	80009bc <__aeabi_dcmplt>
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	f040 8290 	bne.w	800c184 <_dtoa_r+0x994>
 800bc64:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800bc68:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bc6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	f2c0 8152 	blt.w	800bf18 <_dtoa_r+0x728>
 800bc74:	f1ba 0f0e 	cmp.w	sl, #14
 800bc78:	f300 814e 	bgt.w	800bf18 <_dtoa_r+0x728>
 800bc7c:	4b45      	ldr	r3, [pc, #276]	; (800bd94 <_dtoa_r+0x5a4>)
 800bc7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bc82:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bc86:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800bc8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	f280 80db 	bge.w	800be48 <_dtoa_r+0x658>
 800bc92:	9b08      	ldr	r3, [sp, #32]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	f300 80d7 	bgt.w	800be48 <_dtoa_r+0x658>
 800bc9a:	f040 8272 	bne.w	800c182 <_dtoa_r+0x992>
 800bc9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bca2:	2200      	movs	r2, #0
 800bca4:	4b40      	ldr	r3, [pc, #256]	; (800bda8 <_dtoa_r+0x5b8>)
 800bca6:	f7f4 fc17 	bl	80004d8 <__aeabi_dmul>
 800bcaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcae:	f7f4 fe99 	bl	80009e4 <__aeabi_dcmpge>
 800bcb2:	9c08      	ldr	r4, [sp, #32]
 800bcb4:	4626      	mov	r6, r4
 800bcb6:	2800      	cmp	r0, #0
 800bcb8:	f040 8248 	bne.w	800c14c <_dtoa_r+0x95c>
 800bcbc:	2331      	movs	r3, #49	; 0x31
 800bcbe:	9f03      	ldr	r7, [sp, #12]
 800bcc0:	f10a 0a01 	add.w	sl, sl, #1
 800bcc4:	f807 3b01 	strb.w	r3, [r7], #1
 800bcc8:	e244      	b.n	800c154 <_dtoa_r+0x964>
 800bcca:	07e2      	lsls	r2, r4, #31
 800bccc:	d505      	bpl.n	800bcda <_dtoa_r+0x4ea>
 800bcce:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bcd2:	f7f4 fc01 	bl	80004d8 <__aeabi_dmul>
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	3701      	adds	r7, #1
 800bcda:	1064      	asrs	r4, r4, #1
 800bcdc:	3608      	adds	r6, #8
 800bcde:	e76d      	b.n	800bbbc <_dtoa_r+0x3cc>
 800bce0:	2702      	movs	r7, #2
 800bce2:	e770      	b.n	800bbc6 <_dtoa_r+0x3d6>
 800bce4:	46d0      	mov	r8, sl
 800bce6:	9c08      	ldr	r4, [sp, #32]
 800bce8:	e78f      	b.n	800bc0a <_dtoa_r+0x41a>
 800bcea:	9903      	ldr	r1, [sp, #12]
 800bcec:	4b29      	ldr	r3, [pc, #164]	; (800bd94 <_dtoa_r+0x5a4>)
 800bcee:	4421      	add	r1, r4
 800bcf0:	9112      	str	r1, [sp, #72]	; 0x48
 800bcf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bcf4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bcf8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800bcfc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bd00:	2900      	cmp	r1, #0
 800bd02:	d055      	beq.n	800bdb0 <_dtoa_r+0x5c0>
 800bd04:	2000      	movs	r0, #0
 800bd06:	4929      	ldr	r1, [pc, #164]	; (800bdac <_dtoa_r+0x5bc>)
 800bd08:	f7f4 fd10 	bl	800072c <__aeabi_ddiv>
 800bd0c:	463b      	mov	r3, r7
 800bd0e:	4632      	mov	r2, r6
 800bd10:	f7f4 fa2a 	bl	8000168 <__aeabi_dsub>
 800bd14:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bd18:	9f03      	ldr	r7, [sp, #12]
 800bd1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd1e:	f7f4 fe8b 	bl	8000a38 <__aeabi_d2iz>
 800bd22:	4604      	mov	r4, r0
 800bd24:	f7f4 fb6e 	bl	8000404 <__aeabi_i2d>
 800bd28:	4602      	mov	r2, r0
 800bd2a:	460b      	mov	r3, r1
 800bd2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd30:	f7f4 fa1a 	bl	8000168 <__aeabi_dsub>
 800bd34:	4602      	mov	r2, r0
 800bd36:	460b      	mov	r3, r1
 800bd38:	3430      	adds	r4, #48	; 0x30
 800bd3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bd3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bd42:	f807 4b01 	strb.w	r4, [r7], #1
 800bd46:	f7f4 fe39 	bl	80009bc <__aeabi_dcmplt>
 800bd4a:	2800      	cmp	r0, #0
 800bd4c:	d174      	bne.n	800be38 <_dtoa_r+0x648>
 800bd4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd52:	2000      	movs	r0, #0
 800bd54:	4911      	ldr	r1, [pc, #68]	; (800bd9c <_dtoa_r+0x5ac>)
 800bd56:	f7f4 fa07 	bl	8000168 <__aeabi_dsub>
 800bd5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bd5e:	f7f4 fe2d 	bl	80009bc <__aeabi_dcmplt>
 800bd62:	2800      	cmp	r0, #0
 800bd64:	f040 80b7 	bne.w	800bed6 <_dtoa_r+0x6e6>
 800bd68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bd6a:	429f      	cmp	r7, r3
 800bd6c:	f43f af7a 	beq.w	800bc64 <_dtoa_r+0x474>
 800bd70:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bd74:	2200      	movs	r2, #0
 800bd76:	4b0a      	ldr	r3, [pc, #40]	; (800bda0 <_dtoa_r+0x5b0>)
 800bd78:	f7f4 fbae 	bl	80004d8 <__aeabi_dmul>
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bd82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd86:	4b06      	ldr	r3, [pc, #24]	; (800bda0 <_dtoa_r+0x5b0>)
 800bd88:	f7f4 fba6 	bl	80004d8 <__aeabi_dmul>
 800bd8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd90:	e7c3      	b.n	800bd1a <_dtoa_r+0x52a>
 800bd92:	bf00      	nop
 800bd94:	0800e8d0 	.word	0x0800e8d0
 800bd98:	0800e8a8 	.word	0x0800e8a8
 800bd9c:	3ff00000 	.word	0x3ff00000
 800bda0:	40240000 	.word	0x40240000
 800bda4:	401c0000 	.word	0x401c0000
 800bda8:	40140000 	.word	0x40140000
 800bdac:	3fe00000 	.word	0x3fe00000
 800bdb0:	4630      	mov	r0, r6
 800bdb2:	4639      	mov	r1, r7
 800bdb4:	f7f4 fb90 	bl	80004d8 <__aeabi_dmul>
 800bdb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bdba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bdbe:	9c03      	ldr	r4, [sp, #12]
 800bdc0:	9314      	str	r3, [sp, #80]	; 0x50
 800bdc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bdc6:	f7f4 fe37 	bl	8000a38 <__aeabi_d2iz>
 800bdca:	9015      	str	r0, [sp, #84]	; 0x54
 800bdcc:	f7f4 fb1a 	bl	8000404 <__aeabi_i2d>
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bdd8:	f7f4 f9c6 	bl	8000168 <__aeabi_dsub>
 800bddc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bdde:	4606      	mov	r6, r0
 800bde0:	3330      	adds	r3, #48	; 0x30
 800bde2:	f804 3b01 	strb.w	r3, [r4], #1
 800bde6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bde8:	460f      	mov	r7, r1
 800bdea:	429c      	cmp	r4, r3
 800bdec:	f04f 0200 	mov.w	r2, #0
 800bdf0:	d124      	bne.n	800be3c <_dtoa_r+0x64c>
 800bdf2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bdf6:	4bb0      	ldr	r3, [pc, #704]	; (800c0b8 <_dtoa_r+0x8c8>)
 800bdf8:	f7f4 f9b8 	bl	800016c <__adddf3>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	460b      	mov	r3, r1
 800be00:	4630      	mov	r0, r6
 800be02:	4639      	mov	r1, r7
 800be04:	f7f4 fdf8 	bl	80009f8 <__aeabi_dcmpgt>
 800be08:	2800      	cmp	r0, #0
 800be0a:	d163      	bne.n	800bed4 <_dtoa_r+0x6e4>
 800be0c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800be10:	2000      	movs	r0, #0
 800be12:	49a9      	ldr	r1, [pc, #676]	; (800c0b8 <_dtoa_r+0x8c8>)
 800be14:	f7f4 f9a8 	bl	8000168 <__aeabi_dsub>
 800be18:	4602      	mov	r2, r0
 800be1a:	460b      	mov	r3, r1
 800be1c:	4630      	mov	r0, r6
 800be1e:	4639      	mov	r1, r7
 800be20:	f7f4 fdcc 	bl	80009bc <__aeabi_dcmplt>
 800be24:	2800      	cmp	r0, #0
 800be26:	f43f af1d 	beq.w	800bc64 <_dtoa_r+0x474>
 800be2a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800be2c:	1e7b      	subs	r3, r7, #1
 800be2e:	9314      	str	r3, [sp, #80]	; 0x50
 800be30:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800be34:	2b30      	cmp	r3, #48	; 0x30
 800be36:	d0f8      	beq.n	800be2a <_dtoa_r+0x63a>
 800be38:	46c2      	mov	sl, r8
 800be3a:	e03b      	b.n	800beb4 <_dtoa_r+0x6c4>
 800be3c:	4b9f      	ldr	r3, [pc, #636]	; (800c0bc <_dtoa_r+0x8cc>)
 800be3e:	f7f4 fb4b 	bl	80004d8 <__aeabi_dmul>
 800be42:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be46:	e7bc      	b.n	800bdc2 <_dtoa_r+0x5d2>
 800be48:	9f03      	ldr	r7, [sp, #12]
 800be4a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800be4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be52:	4640      	mov	r0, r8
 800be54:	4649      	mov	r1, r9
 800be56:	f7f4 fc69 	bl	800072c <__aeabi_ddiv>
 800be5a:	f7f4 fded 	bl	8000a38 <__aeabi_d2iz>
 800be5e:	4604      	mov	r4, r0
 800be60:	f7f4 fad0 	bl	8000404 <__aeabi_i2d>
 800be64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be68:	f7f4 fb36 	bl	80004d8 <__aeabi_dmul>
 800be6c:	4602      	mov	r2, r0
 800be6e:	460b      	mov	r3, r1
 800be70:	4640      	mov	r0, r8
 800be72:	4649      	mov	r1, r9
 800be74:	f7f4 f978 	bl	8000168 <__aeabi_dsub>
 800be78:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800be7c:	f807 6b01 	strb.w	r6, [r7], #1
 800be80:	9e03      	ldr	r6, [sp, #12]
 800be82:	f8dd c020 	ldr.w	ip, [sp, #32]
 800be86:	1bbe      	subs	r6, r7, r6
 800be88:	45b4      	cmp	ip, r6
 800be8a:	4602      	mov	r2, r0
 800be8c:	460b      	mov	r3, r1
 800be8e:	d136      	bne.n	800befe <_dtoa_r+0x70e>
 800be90:	f7f4 f96c 	bl	800016c <__adddf3>
 800be94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be98:	4680      	mov	r8, r0
 800be9a:	4689      	mov	r9, r1
 800be9c:	f7f4 fdac 	bl	80009f8 <__aeabi_dcmpgt>
 800bea0:	bb58      	cbnz	r0, 800befa <_dtoa_r+0x70a>
 800bea2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bea6:	4640      	mov	r0, r8
 800bea8:	4649      	mov	r1, r9
 800beaa:	f7f4 fd7d 	bl	80009a8 <__aeabi_dcmpeq>
 800beae:	b108      	cbz	r0, 800beb4 <_dtoa_r+0x6c4>
 800beb0:	07e1      	lsls	r1, r4, #31
 800beb2:	d422      	bmi.n	800befa <_dtoa_r+0x70a>
 800beb4:	4628      	mov	r0, r5
 800beb6:	4659      	mov	r1, fp
 800beb8:	f000 fe68 	bl	800cb8c <_Bfree>
 800bebc:	2300      	movs	r3, #0
 800bebe:	703b      	strb	r3, [r7, #0]
 800bec0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bec2:	f10a 0001 	add.w	r0, sl, #1
 800bec6:	6018      	str	r0, [r3, #0]
 800bec8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800beca:	2b00      	cmp	r3, #0
 800becc:	f43f acde 	beq.w	800b88c <_dtoa_r+0x9c>
 800bed0:	601f      	str	r7, [r3, #0]
 800bed2:	e4db      	b.n	800b88c <_dtoa_r+0x9c>
 800bed4:	4627      	mov	r7, r4
 800bed6:	463b      	mov	r3, r7
 800bed8:	461f      	mov	r7, r3
 800beda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bede:	2a39      	cmp	r2, #57	; 0x39
 800bee0:	d107      	bne.n	800bef2 <_dtoa_r+0x702>
 800bee2:	9a03      	ldr	r2, [sp, #12]
 800bee4:	429a      	cmp	r2, r3
 800bee6:	d1f7      	bne.n	800bed8 <_dtoa_r+0x6e8>
 800bee8:	2230      	movs	r2, #48	; 0x30
 800beea:	9903      	ldr	r1, [sp, #12]
 800beec:	f108 0801 	add.w	r8, r8, #1
 800bef0:	700a      	strb	r2, [r1, #0]
 800bef2:	781a      	ldrb	r2, [r3, #0]
 800bef4:	3201      	adds	r2, #1
 800bef6:	701a      	strb	r2, [r3, #0]
 800bef8:	e79e      	b.n	800be38 <_dtoa_r+0x648>
 800befa:	46d0      	mov	r8, sl
 800befc:	e7eb      	b.n	800bed6 <_dtoa_r+0x6e6>
 800befe:	2200      	movs	r2, #0
 800bf00:	4b6e      	ldr	r3, [pc, #440]	; (800c0bc <_dtoa_r+0x8cc>)
 800bf02:	f7f4 fae9 	bl	80004d8 <__aeabi_dmul>
 800bf06:	2200      	movs	r2, #0
 800bf08:	2300      	movs	r3, #0
 800bf0a:	4680      	mov	r8, r0
 800bf0c:	4689      	mov	r9, r1
 800bf0e:	f7f4 fd4b 	bl	80009a8 <__aeabi_dcmpeq>
 800bf12:	2800      	cmp	r0, #0
 800bf14:	d09b      	beq.n	800be4e <_dtoa_r+0x65e>
 800bf16:	e7cd      	b.n	800beb4 <_dtoa_r+0x6c4>
 800bf18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bf1a:	2a00      	cmp	r2, #0
 800bf1c:	f000 80d0 	beq.w	800c0c0 <_dtoa_r+0x8d0>
 800bf20:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bf22:	2a01      	cmp	r2, #1
 800bf24:	f300 80ae 	bgt.w	800c084 <_dtoa_r+0x894>
 800bf28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bf2a:	2a00      	cmp	r2, #0
 800bf2c:	f000 80a6 	beq.w	800c07c <_dtoa_r+0x88c>
 800bf30:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bf34:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bf36:	9f06      	ldr	r7, [sp, #24]
 800bf38:	9a06      	ldr	r2, [sp, #24]
 800bf3a:	2101      	movs	r1, #1
 800bf3c:	441a      	add	r2, r3
 800bf3e:	9206      	str	r2, [sp, #24]
 800bf40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf42:	4628      	mov	r0, r5
 800bf44:	441a      	add	r2, r3
 800bf46:	9209      	str	r2, [sp, #36]	; 0x24
 800bf48:	f000 ff20 	bl	800cd8c <__i2b>
 800bf4c:	4606      	mov	r6, r0
 800bf4e:	2f00      	cmp	r7, #0
 800bf50:	dd0c      	ble.n	800bf6c <_dtoa_r+0x77c>
 800bf52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	dd09      	ble.n	800bf6c <_dtoa_r+0x77c>
 800bf58:	42bb      	cmp	r3, r7
 800bf5a:	bfa8      	it	ge
 800bf5c:	463b      	movge	r3, r7
 800bf5e:	9a06      	ldr	r2, [sp, #24]
 800bf60:	1aff      	subs	r7, r7, r3
 800bf62:	1ad2      	subs	r2, r2, r3
 800bf64:	9206      	str	r2, [sp, #24]
 800bf66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf68:	1ad3      	subs	r3, r2, r3
 800bf6a:	9309      	str	r3, [sp, #36]	; 0x24
 800bf6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf6e:	b1f3      	cbz	r3, 800bfae <_dtoa_r+0x7be>
 800bf70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	f000 80a8 	beq.w	800c0c8 <_dtoa_r+0x8d8>
 800bf78:	2c00      	cmp	r4, #0
 800bf7a:	dd10      	ble.n	800bf9e <_dtoa_r+0x7ae>
 800bf7c:	4631      	mov	r1, r6
 800bf7e:	4622      	mov	r2, r4
 800bf80:	4628      	mov	r0, r5
 800bf82:	f000 ffc1 	bl	800cf08 <__pow5mult>
 800bf86:	465a      	mov	r2, fp
 800bf88:	4601      	mov	r1, r0
 800bf8a:	4606      	mov	r6, r0
 800bf8c:	4628      	mov	r0, r5
 800bf8e:	f000 ff13 	bl	800cdb8 <__multiply>
 800bf92:	4680      	mov	r8, r0
 800bf94:	4659      	mov	r1, fp
 800bf96:	4628      	mov	r0, r5
 800bf98:	f000 fdf8 	bl	800cb8c <_Bfree>
 800bf9c:	46c3      	mov	fp, r8
 800bf9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfa0:	1b1a      	subs	r2, r3, r4
 800bfa2:	d004      	beq.n	800bfae <_dtoa_r+0x7be>
 800bfa4:	4659      	mov	r1, fp
 800bfa6:	4628      	mov	r0, r5
 800bfa8:	f000 ffae 	bl	800cf08 <__pow5mult>
 800bfac:	4683      	mov	fp, r0
 800bfae:	2101      	movs	r1, #1
 800bfb0:	4628      	mov	r0, r5
 800bfb2:	f000 feeb 	bl	800cd8c <__i2b>
 800bfb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bfb8:	4604      	mov	r4, r0
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	f340 8086 	ble.w	800c0cc <_dtoa_r+0x8dc>
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	4601      	mov	r1, r0
 800bfc4:	4628      	mov	r0, r5
 800bfc6:	f000 ff9f 	bl	800cf08 <__pow5mult>
 800bfca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bfcc:	4604      	mov	r4, r0
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	dd7f      	ble.n	800c0d2 <_dtoa_r+0x8e2>
 800bfd2:	f04f 0800 	mov.w	r8, #0
 800bfd6:	6923      	ldr	r3, [r4, #16]
 800bfd8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bfdc:	6918      	ldr	r0, [r3, #16]
 800bfde:	f000 fe87 	bl	800ccf0 <__hi0bits>
 800bfe2:	f1c0 0020 	rsb	r0, r0, #32
 800bfe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfe8:	4418      	add	r0, r3
 800bfea:	f010 001f 	ands.w	r0, r0, #31
 800bfee:	f000 8092 	beq.w	800c116 <_dtoa_r+0x926>
 800bff2:	f1c0 0320 	rsb	r3, r0, #32
 800bff6:	2b04      	cmp	r3, #4
 800bff8:	f340 808a 	ble.w	800c110 <_dtoa_r+0x920>
 800bffc:	f1c0 001c 	rsb	r0, r0, #28
 800c000:	9b06      	ldr	r3, [sp, #24]
 800c002:	4407      	add	r7, r0
 800c004:	4403      	add	r3, r0
 800c006:	9306      	str	r3, [sp, #24]
 800c008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c00a:	4403      	add	r3, r0
 800c00c:	9309      	str	r3, [sp, #36]	; 0x24
 800c00e:	9b06      	ldr	r3, [sp, #24]
 800c010:	2b00      	cmp	r3, #0
 800c012:	dd05      	ble.n	800c020 <_dtoa_r+0x830>
 800c014:	4659      	mov	r1, fp
 800c016:	461a      	mov	r2, r3
 800c018:	4628      	mov	r0, r5
 800c01a:	f000 ffcf 	bl	800cfbc <__lshift>
 800c01e:	4683      	mov	fp, r0
 800c020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c022:	2b00      	cmp	r3, #0
 800c024:	dd05      	ble.n	800c032 <_dtoa_r+0x842>
 800c026:	4621      	mov	r1, r4
 800c028:	461a      	mov	r2, r3
 800c02a:	4628      	mov	r0, r5
 800c02c:	f000 ffc6 	bl	800cfbc <__lshift>
 800c030:	4604      	mov	r4, r0
 800c032:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c034:	2b00      	cmp	r3, #0
 800c036:	d070      	beq.n	800c11a <_dtoa_r+0x92a>
 800c038:	4621      	mov	r1, r4
 800c03a:	4658      	mov	r0, fp
 800c03c:	f001 f82e 	bl	800d09c <__mcmp>
 800c040:	2800      	cmp	r0, #0
 800c042:	da6a      	bge.n	800c11a <_dtoa_r+0x92a>
 800c044:	2300      	movs	r3, #0
 800c046:	4659      	mov	r1, fp
 800c048:	220a      	movs	r2, #10
 800c04a:	4628      	mov	r0, r5
 800c04c:	f000 fdc0 	bl	800cbd0 <__multadd>
 800c050:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c052:	4683      	mov	fp, r0
 800c054:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c058:	2b00      	cmp	r3, #0
 800c05a:	f000 8194 	beq.w	800c386 <_dtoa_r+0xb96>
 800c05e:	4631      	mov	r1, r6
 800c060:	2300      	movs	r3, #0
 800c062:	220a      	movs	r2, #10
 800c064:	4628      	mov	r0, r5
 800c066:	f000 fdb3 	bl	800cbd0 <__multadd>
 800c06a:	f1b9 0f00 	cmp.w	r9, #0
 800c06e:	4606      	mov	r6, r0
 800c070:	f300 8093 	bgt.w	800c19a <_dtoa_r+0x9aa>
 800c074:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c076:	2b02      	cmp	r3, #2
 800c078:	dc57      	bgt.n	800c12a <_dtoa_r+0x93a>
 800c07a:	e08e      	b.n	800c19a <_dtoa_r+0x9aa>
 800c07c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c07e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c082:	e757      	b.n	800bf34 <_dtoa_r+0x744>
 800c084:	9b08      	ldr	r3, [sp, #32]
 800c086:	1e5c      	subs	r4, r3, #1
 800c088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c08a:	42a3      	cmp	r3, r4
 800c08c:	bfb7      	itett	lt
 800c08e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c090:	1b1c      	subge	r4, r3, r4
 800c092:	1ae2      	sublt	r2, r4, r3
 800c094:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c096:	bfbe      	ittt	lt
 800c098:	940a      	strlt	r4, [sp, #40]	; 0x28
 800c09a:	189b      	addlt	r3, r3, r2
 800c09c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c09e:	9b08      	ldr	r3, [sp, #32]
 800c0a0:	bfb8      	it	lt
 800c0a2:	2400      	movlt	r4, #0
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	bfbb      	ittet	lt
 800c0a8:	9b06      	ldrlt	r3, [sp, #24]
 800c0aa:	9a08      	ldrlt	r2, [sp, #32]
 800c0ac:	9f06      	ldrge	r7, [sp, #24]
 800c0ae:	1a9f      	sublt	r7, r3, r2
 800c0b0:	bfac      	ite	ge
 800c0b2:	9b08      	ldrge	r3, [sp, #32]
 800c0b4:	2300      	movlt	r3, #0
 800c0b6:	e73f      	b.n	800bf38 <_dtoa_r+0x748>
 800c0b8:	3fe00000 	.word	0x3fe00000
 800c0bc:	40240000 	.word	0x40240000
 800c0c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c0c2:	9f06      	ldr	r7, [sp, #24]
 800c0c4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c0c6:	e742      	b.n	800bf4e <_dtoa_r+0x75e>
 800c0c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0ca:	e76b      	b.n	800bfa4 <_dtoa_r+0x7b4>
 800c0cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c0ce:	2b01      	cmp	r3, #1
 800c0d0:	dc19      	bgt.n	800c106 <_dtoa_r+0x916>
 800c0d2:	9b04      	ldr	r3, [sp, #16]
 800c0d4:	b9bb      	cbnz	r3, 800c106 <_dtoa_r+0x916>
 800c0d6:	9b05      	ldr	r3, [sp, #20]
 800c0d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c0dc:	b99b      	cbnz	r3, 800c106 <_dtoa_r+0x916>
 800c0de:	9b05      	ldr	r3, [sp, #20]
 800c0e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c0e4:	0d1b      	lsrs	r3, r3, #20
 800c0e6:	051b      	lsls	r3, r3, #20
 800c0e8:	b183      	cbz	r3, 800c10c <_dtoa_r+0x91c>
 800c0ea:	f04f 0801 	mov.w	r8, #1
 800c0ee:	9b06      	ldr	r3, [sp, #24]
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	9306      	str	r3, [sp, #24]
 800c0f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0f6:	3301      	adds	r3, #1
 800c0f8:	9309      	str	r3, [sp, #36]	; 0x24
 800c0fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	f47f af6a 	bne.w	800bfd6 <_dtoa_r+0x7e6>
 800c102:	2001      	movs	r0, #1
 800c104:	e76f      	b.n	800bfe6 <_dtoa_r+0x7f6>
 800c106:	f04f 0800 	mov.w	r8, #0
 800c10a:	e7f6      	b.n	800c0fa <_dtoa_r+0x90a>
 800c10c:	4698      	mov	r8, r3
 800c10e:	e7f4      	b.n	800c0fa <_dtoa_r+0x90a>
 800c110:	f43f af7d 	beq.w	800c00e <_dtoa_r+0x81e>
 800c114:	4618      	mov	r0, r3
 800c116:	301c      	adds	r0, #28
 800c118:	e772      	b.n	800c000 <_dtoa_r+0x810>
 800c11a:	9b08      	ldr	r3, [sp, #32]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	dc36      	bgt.n	800c18e <_dtoa_r+0x99e>
 800c120:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c122:	2b02      	cmp	r3, #2
 800c124:	dd33      	ble.n	800c18e <_dtoa_r+0x99e>
 800c126:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c12a:	f1b9 0f00 	cmp.w	r9, #0
 800c12e:	d10d      	bne.n	800c14c <_dtoa_r+0x95c>
 800c130:	4621      	mov	r1, r4
 800c132:	464b      	mov	r3, r9
 800c134:	2205      	movs	r2, #5
 800c136:	4628      	mov	r0, r5
 800c138:	f000 fd4a 	bl	800cbd0 <__multadd>
 800c13c:	4601      	mov	r1, r0
 800c13e:	4604      	mov	r4, r0
 800c140:	4658      	mov	r0, fp
 800c142:	f000 ffab 	bl	800d09c <__mcmp>
 800c146:	2800      	cmp	r0, #0
 800c148:	f73f adb8 	bgt.w	800bcbc <_dtoa_r+0x4cc>
 800c14c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c14e:	9f03      	ldr	r7, [sp, #12]
 800c150:	ea6f 0a03 	mvn.w	sl, r3
 800c154:	f04f 0800 	mov.w	r8, #0
 800c158:	4621      	mov	r1, r4
 800c15a:	4628      	mov	r0, r5
 800c15c:	f000 fd16 	bl	800cb8c <_Bfree>
 800c160:	2e00      	cmp	r6, #0
 800c162:	f43f aea7 	beq.w	800beb4 <_dtoa_r+0x6c4>
 800c166:	f1b8 0f00 	cmp.w	r8, #0
 800c16a:	d005      	beq.n	800c178 <_dtoa_r+0x988>
 800c16c:	45b0      	cmp	r8, r6
 800c16e:	d003      	beq.n	800c178 <_dtoa_r+0x988>
 800c170:	4641      	mov	r1, r8
 800c172:	4628      	mov	r0, r5
 800c174:	f000 fd0a 	bl	800cb8c <_Bfree>
 800c178:	4631      	mov	r1, r6
 800c17a:	4628      	mov	r0, r5
 800c17c:	f000 fd06 	bl	800cb8c <_Bfree>
 800c180:	e698      	b.n	800beb4 <_dtoa_r+0x6c4>
 800c182:	2400      	movs	r4, #0
 800c184:	4626      	mov	r6, r4
 800c186:	e7e1      	b.n	800c14c <_dtoa_r+0x95c>
 800c188:	46c2      	mov	sl, r8
 800c18a:	4626      	mov	r6, r4
 800c18c:	e596      	b.n	800bcbc <_dtoa_r+0x4cc>
 800c18e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c190:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c194:	2b00      	cmp	r3, #0
 800c196:	f000 80fd 	beq.w	800c394 <_dtoa_r+0xba4>
 800c19a:	2f00      	cmp	r7, #0
 800c19c:	dd05      	ble.n	800c1aa <_dtoa_r+0x9ba>
 800c19e:	4631      	mov	r1, r6
 800c1a0:	463a      	mov	r2, r7
 800c1a2:	4628      	mov	r0, r5
 800c1a4:	f000 ff0a 	bl	800cfbc <__lshift>
 800c1a8:	4606      	mov	r6, r0
 800c1aa:	f1b8 0f00 	cmp.w	r8, #0
 800c1ae:	d05c      	beq.n	800c26a <_dtoa_r+0xa7a>
 800c1b0:	4628      	mov	r0, r5
 800c1b2:	6871      	ldr	r1, [r6, #4]
 800c1b4:	f000 fcaa 	bl	800cb0c <_Balloc>
 800c1b8:	4607      	mov	r7, r0
 800c1ba:	b928      	cbnz	r0, 800c1c8 <_dtoa_r+0x9d8>
 800c1bc:	4602      	mov	r2, r0
 800c1be:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c1c2:	4b7f      	ldr	r3, [pc, #508]	; (800c3c0 <_dtoa_r+0xbd0>)
 800c1c4:	f7ff bb28 	b.w	800b818 <_dtoa_r+0x28>
 800c1c8:	6932      	ldr	r2, [r6, #16]
 800c1ca:	f106 010c 	add.w	r1, r6, #12
 800c1ce:	3202      	adds	r2, #2
 800c1d0:	0092      	lsls	r2, r2, #2
 800c1d2:	300c      	adds	r0, #12
 800c1d4:	f000 fc8c 	bl	800caf0 <memcpy>
 800c1d8:	2201      	movs	r2, #1
 800c1da:	4639      	mov	r1, r7
 800c1dc:	4628      	mov	r0, r5
 800c1de:	f000 feed 	bl	800cfbc <__lshift>
 800c1e2:	46b0      	mov	r8, r6
 800c1e4:	4606      	mov	r6, r0
 800c1e6:	9b03      	ldr	r3, [sp, #12]
 800c1e8:	3301      	adds	r3, #1
 800c1ea:	9308      	str	r3, [sp, #32]
 800c1ec:	9b03      	ldr	r3, [sp, #12]
 800c1ee:	444b      	add	r3, r9
 800c1f0:	930a      	str	r3, [sp, #40]	; 0x28
 800c1f2:	9b04      	ldr	r3, [sp, #16]
 800c1f4:	f003 0301 	and.w	r3, r3, #1
 800c1f8:	9309      	str	r3, [sp, #36]	; 0x24
 800c1fa:	9b08      	ldr	r3, [sp, #32]
 800c1fc:	4621      	mov	r1, r4
 800c1fe:	3b01      	subs	r3, #1
 800c200:	4658      	mov	r0, fp
 800c202:	9304      	str	r3, [sp, #16]
 800c204:	f7ff fa68 	bl	800b6d8 <quorem>
 800c208:	4603      	mov	r3, r0
 800c20a:	4641      	mov	r1, r8
 800c20c:	3330      	adds	r3, #48	; 0x30
 800c20e:	9006      	str	r0, [sp, #24]
 800c210:	4658      	mov	r0, fp
 800c212:	930b      	str	r3, [sp, #44]	; 0x2c
 800c214:	f000 ff42 	bl	800d09c <__mcmp>
 800c218:	4632      	mov	r2, r6
 800c21a:	4681      	mov	r9, r0
 800c21c:	4621      	mov	r1, r4
 800c21e:	4628      	mov	r0, r5
 800c220:	f000 ff58 	bl	800d0d4 <__mdiff>
 800c224:	68c2      	ldr	r2, [r0, #12]
 800c226:	4607      	mov	r7, r0
 800c228:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c22a:	bb02      	cbnz	r2, 800c26e <_dtoa_r+0xa7e>
 800c22c:	4601      	mov	r1, r0
 800c22e:	4658      	mov	r0, fp
 800c230:	f000 ff34 	bl	800d09c <__mcmp>
 800c234:	4602      	mov	r2, r0
 800c236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c238:	4639      	mov	r1, r7
 800c23a:	4628      	mov	r0, r5
 800c23c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800c240:	f000 fca4 	bl	800cb8c <_Bfree>
 800c244:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c246:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c248:	9f08      	ldr	r7, [sp, #32]
 800c24a:	ea43 0102 	orr.w	r1, r3, r2
 800c24e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c250:	430b      	orrs	r3, r1
 800c252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c254:	d10d      	bne.n	800c272 <_dtoa_r+0xa82>
 800c256:	2b39      	cmp	r3, #57	; 0x39
 800c258:	d029      	beq.n	800c2ae <_dtoa_r+0xabe>
 800c25a:	f1b9 0f00 	cmp.w	r9, #0
 800c25e:	dd01      	ble.n	800c264 <_dtoa_r+0xa74>
 800c260:	9b06      	ldr	r3, [sp, #24]
 800c262:	3331      	adds	r3, #49	; 0x31
 800c264:	9a04      	ldr	r2, [sp, #16]
 800c266:	7013      	strb	r3, [r2, #0]
 800c268:	e776      	b.n	800c158 <_dtoa_r+0x968>
 800c26a:	4630      	mov	r0, r6
 800c26c:	e7b9      	b.n	800c1e2 <_dtoa_r+0x9f2>
 800c26e:	2201      	movs	r2, #1
 800c270:	e7e2      	b.n	800c238 <_dtoa_r+0xa48>
 800c272:	f1b9 0f00 	cmp.w	r9, #0
 800c276:	db06      	blt.n	800c286 <_dtoa_r+0xa96>
 800c278:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c27a:	ea41 0909 	orr.w	r9, r1, r9
 800c27e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c280:	ea59 0101 	orrs.w	r1, r9, r1
 800c284:	d120      	bne.n	800c2c8 <_dtoa_r+0xad8>
 800c286:	2a00      	cmp	r2, #0
 800c288:	ddec      	ble.n	800c264 <_dtoa_r+0xa74>
 800c28a:	4659      	mov	r1, fp
 800c28c:	2201      	movs	r2, #1
 800c28e:	4628      	mov	r0, r5
 800c290:	9308      	str	r3, [sp, #32]
 800c292:	f000 fe93 	bl	800cfbc <__lshift>
 800c296:	4621      	mov	r1, r4
 800c298:	4683      	mov	fp, r0
 800c29a:	f000 feff 	bl	800d09c <__mcmp>
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	9b08      	ldr	r3, [sp, #32]
 800c2a2:	dc02      	bgt.n	800c2aa <_dtoa_r+0xaba>
 800c2a4:	d1de      	bne.n	800c264 <_dtoa_r+0xa74>
 800c2a6:	07da      	lsls	r2, r3, #31
 800c2a8:	d5dc      	bpl.n	800c264 <_dtoa_r+0xa74>
 800c2aa:	2b39      	cmp	r3, #57	; 0x39
 800c2ac:	d1d8      	bne.n	800c260 <_dtoa_r+0xa70>
 800c2ae:	2339      	movs	r3, #57	; 0x39
 800c2b0:	9a04      	ldr	r2, [sp, #16]
 800c2b2:	7013      	strb	r3, [r2, #0]
 800c2b4:	463b      	mov	r3, r7
 800c2b6:	461f      	mov	r7, r3
 800c2b8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c2bc:	3b01      	subs	r3, #1
 800c2be:	2a39      	cmp	r2, #57	; 0x39
 800c2c0:	d050      	beq.n	800c364 <_dtoa_r+0xb74>
 800c2c2:	3201      	adds	r2, #1
 800c2c4:	701a      	strb	r2, [r3, #0]
 800c2c6:	e747      	b.n	800c158 <_dtoa_r+0x968>
 800c2c8:	2a00      	cmp	r2, #0
 800c2ca:	dd03      	ble.n	800c2d4 <_dtoa_r+0xae4>
 800c2cc:	2b39      	cmp	r3, #57	; 0x39
 800c2ce:	d0ee      	beq.n	800c2ae <_dtoa_r+0xabe>
 800c2d0:	3301      	adds	r3, #1
 800c2d2:	e7c7      	b.n	800c264 <_dtoa_r+0xa74>
 800c2d4:	9a08      	ldr	r2, [sp, #32]
 800c2d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c2d8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c2dc:	428a      	cmp	r2, r1
 800c2de:	d02a      	beq.n	800c336 <_dtoa_r+0xb46>
 800c2e0:	4659      	mov	r1, fp
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	220a      	movs	r2, #10
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	f000 fc72 	bl	800cbd0 <__multadd>
 800c2ec:	45b0      	cmp	r8, r6
 800c2ee:	4683      	mov	fp, r0
 800c2f0:	f04f 0300 	mov.w	r3, #0
 800c2f4:	f04f 020a 	mov.w	r2, #10
 800c2f8:	4641      	mov	r1, r8
 800c2fa:	4628      	mov	r0, r5
 800c2fc:	d107      	bne.n	800c30e <_dtoa_r+0xb1e>
 800c2fe:	f000 fc67 	bl	800cbd0 <__multadd>
 800c302:	4680      	mov	r8, r0
 800c304:	4606      	mov	r6, r0
 800c306:	9b08      	ldr	r3, [sp, #32]
 800c308:	3301      	adds	r3, #1
 800c30a:	9308      	str	r3, [sp, #32]
 800c30c:	e775      	b.n	800c1fa <_dtoa_r+0xa0a>
 800c30e:	f000 fc5f 	bl	800cbd0 <__multadd>
 800c312:	4631      	mov	r1, r6
 800c314:	4680      	mov	r8, r0
 800c316:	2300      	movs	r3, #0
 800c318:	220a      	movs	r2, #10
 800c31a:	4628      	mov	r0, r5
 800c31c:	f000 fc58 	bl	800cbd0 <__multadd>
 800c320:	4606      	mov	r6, r0
 800c322:	e7f0      	b.n	800c306 <_dtoa_r+0xb16>
 800c324:	f1b9 0f00 	cmp.w	r9, #0
 800c328:	bfcc      	ite	gt
 800c32a:	464f      	movgt	r7, r9
 800c32c:	2701      	movle	r7, #1
 800c32e:	f04f 0800 	mov.w	r8, #0
 800c332:	9a03      	ldr	r2, [sp, #12]
 800c334:	4417      	add	r7, r2
 800c336:	4659      	mov	r1, fp
 800c338:	2201      	movs	r2, #1
 800c33a:	4628      	mov	r0, r5
 800c33c:	9308      	str	r3, [sp, #32]
 800c33e:	f000 fe3d 	bl	800cfbc <__lshift>
 800c342:	4621      	mov	r1, r4
 800c344:	4683      	mov	fp, r0
 800c346:	f000 fea9 	bl	800d09c <__mcmp>
 800c34a:	2800      	cmp	r0, #0
 800c34c:	dcb2      	bgt.n	800c2b4 <_dtoa_r+0xac4>
 800c34e:	d102      	bne.n	800c356 <_dtoa_r+0xb66>
 800c350:	9b08      	ldr	r3, [sp, #32]
 800c352:	07db      	lsls	r3, r3, #31
 800c354:	d4ae      	bmi.n	800c2b4 <_dtoa_r+0xac4>
 800c356:	463b      	mov	r3, r7
 800c358:	461f      	mov	r7, r3
 800c35a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c35e:	2a30      	cmp	r2, #48	; 0x30
 800c360:	d0fa      	beq.n	800c358 <_dtoa_r+0xb68>
 800c362:	e6f9      	b.n	800c158 <_dtoa_r+0x968>
 800c364:	9a03      	ldr	r2, [sp, #12]
 800c366:	429a      	cmp	r2, r3
 800c368:	d1a5      	bne.n	800c2b6 <_dtoa_r+0xac6>
 800c36a:	2331      	movs	r3, #49	; 0x31
 800c36c:	f10a 0a01 	add.w	sl, sl, #1
 800c370:	e779      	b.n	800c266 <_dtoa_r+0xa76>
 800c372:	4b14      	ldr	r3, [pc, #80]	; (800c3c4 <_dtoa_r+0xbd4>)
 800c374:	f7ff baa8 	b.w	800b8c8 <_dtoa_r+0xd8>
 800c378:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	f47f aa81 	bne.w	800b882 <_dtoa_r+0x92>
 800c380:	4b11      	ldr	r3, [pc, #68]	; (800c3c8 <_dtoa_r+0xbd8>)
 800c382:	f7ff baa1 	b.w	800b8c8 <_dtoa_r+0xd8>
 800c386:	f1b9 0f00 	cmp.w	r9, #0
 800c38a:	dc03      	bgt.n	800c394 <_dtoa_r+0xba4>
 800c38c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c38e:	2b02      	cmp	r3, #2
 800c390:	f73f aecb 	bgt.w	800c12a <_dtoa_r+0x93a>
 800c394:	9f03      	ldr	r7, [sp, #12]
 800c396:	4621      	mov	r1, r4
 800c398:	4658      	mov	r0, fp
 800c39a:	f7ff f99d 	bl	800b6d8 <quorem>
 800c39e:	9a03      	ldr	r2, [sp, #12]
 800c3a0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c3a4:	f807 3b01 	strb.w	r3, [r7], #1
 800c3a8:	1aba      	subs	r2, r7, r2
 800c3aa:	4591      	cmp	r9, r2
 800c3ac:	ddba      	ble.n	800c324 <_dtoa_r+0xb34>
 800c3ae:	4659      	mov	r1, fp
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	220a      	movs	r2, #10
 800c3b4:	4628      	mov	r0, r5
 800c3b6:	f000 fc0b 	bl	800cbd0 <__multadd>
 800c3ba:	4683      	mov	fp, r0
 800c3bc:	e7eb      	b.n	800c396 <_dtoa_r+0xba6>
 800c3be:	bf00      	nop
 800c3c0:	0800e7c0 	.word	0x0800e7c0
 800c3c4:	0800e5c0 	.word	0x0800e5c0
 800c3c8:	0800e741 	.word	0x0800e741

0800c3cc <rshift>:
 800c3cc:	6903      	ldr	r3, [r0, #16]
 800c3ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c3d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c3d6:	f100 0414 	add.w	r4, r0, #20
 800c3da:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c3de:	dd46      	ble.n	800c46e <rshift+0xa2>
 800c3e0:	f011 011f 	ands.w	r1, r1, #31
 800c3e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c3e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c3ec:	d10c      	bne.n	800c408 <rshift+0x3c>
 800c3ee:	4629      	mov	r1, r5
 800c3f0:	f100 0710 	add.w	r7, r0, #16
 800c3f4:	42b1      	cmp	r1, r6
 800c3f6:	d335      	bcc.n	800c464 <rshift+0x98>
 800c3f8:	1a9b      	subs	r3, r3, r2
 800c3fa:	009b      	lsls	r3, r3, #2
 800c3fc:	1eea      	subs	r2, r5, #3
 800c3fe:	4296      	cmp	r6, r2
 800c400:	bf38      	it	cc
 800c402:	2300      	movcc	r3, #0
 800c404:	4423      	add	r3, r4
 800c406:	e015      	b.n	800c434 <rshift+0x68>
 800c408:	46a1      	mov	r9, r4
 800c40a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c40e:	f1c1 0820 	rsb	r8, r1, #32
 800c412:	40cf      	lsrs	r7, r1
 800c414:	f105 0e04 	add.w	lr, r5, #4
 800c418:	4576      	cmp	r6, lr
 800c41a:	46f4      	mov	ip, lr
 800c41c:	d816      	bhi.n	800c44c <rshift+0x80>
 800c41e:	1a9a      	subs	r2, r3, r2
 800c420:	0092      	lsls	r2, r2, #2
 800c422:	3a04      	subs	r2, #4
 800c424:	3501      	adds	r5, #1
 800c426:	42ae      	cmp	r6, r5
 800c428:	bf38      	it	cc
 800c42a:	2200      	movcc	r2, #0
 800c42c:	18a3      	adds	r3, r4, r2
 800c42e:	50a7      	str	r7, [r4, r2]
 800c430:	b107      	cbz	r7, 800c434 <rshift+0x68>
 800c432:	3304      	adds	r3, #4
 800c434:	42a3      	cmp	r3, r4
 800c436:	eba3 0204 	sub.w	r2, r3, r4
 800c43a:	bf08      	it	eq
 800c43c:	2300      	moveq	r3, #0
 800c43e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c442:	6102      	str	r2, [r0, #16]
 800c444:	bf08      	it	eq
 800c446:	6143      	streq	r3, [r0, #20]
 800c448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c44c:	f8dc c000 	ldr.w	ip, [ip]
 800c450:	fa0c fc08 	lsl.w	ip, ip, r8
 800c454:	ea4c 0707 	orr.w	r7, ip, r7
 800c458:	f849 7b04 	str.w	r7, [r9], #4
 800c45c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c460:	40cf      	lsrs	r7, r1
 800c462:	e7d9      	b.n	800c418 <rshift+0x4c>
 800c464:	f851 cb04 	ldr.w	ip, [r1], #4
 800c468:	f847 cf04 	str.w	ip, [r7, #4]!
 800c46c:	e7c2      	b.n	800c3f4 <rshift+0x28>
 800c46e:	4623      	mov	r3, r4
 800c470:	e7e0      	b.n	800c434 <rshift+0x68>

0800c472 <__hexdig_fun>:
 800c472:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c476:	2b09      	cmp	r3, #9
 800c478:	d802      	bhi.n	800c480 <__hexdig_fun+0xe>
 800c47a:	3820      	subs	r0, #32
 800c47c:	b2c0      	uxtb	r0, r0
 800c47e:	4770      	bx	lr
 800c480:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c484:	2b05      	cmp	r3, #5
 800c486:	d801      	bhi.n	800c48c <__hexdig_fun+0x1a>
 800c488:	3847      	subs	r0, #71	; 0x47
 800c48a:	e7f7      	b.n	800c47c <__hexdig_fun+0xa>
 800c48c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c490:	2b05      	cmp	r3, #5
 800c492:	d801      	bhi.n	800c498 <__hexdig_fun+0x26>
 800c494:	3827      	subs	r0, #39	; 0x27
 800c496:	e7f1      	b.n	800c47c <__hexdig_fun+0xa>
 800c498:	2000      	movs	r0, #0
 800c49a:	4770      	bx	lr

0800c49c <__gethex>:
 800c49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4a0:	b08b      	sub	sp, #44	; 0x2c
 800c4a2:	9305      	str	r3, [sp, #20]
 800c4a4:	4bb2      	ldr	r3, [pc, #712]	; (800c770 <__gethex+0x2d4>)
 800c4a6:	9002      	str	r0, [sp, #8]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	468b      	mov	fp, r1
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	4690      	mov	r8, r2
 800c4b0:	9303      	str	r3, [sp, #12]
 800c4b2:	f7f3 fe4d 	bl	8000150 <strlen>
 800c4b6:	4682      	mov	sl, r0
 800c4b8:	9b03      	ldr	r3, [sp, #12]
 800c4ba:	f8db 2000 	ldr.w	r2, [fp]
 800c4be:	4403      	add	r3, r0
 800c4c0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c4c4:	9306      	str	r3, [sp, #24]
 800c4c6:	1c93      	adds	r3, r2, #2
 800c4c8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c4cc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c4d0:	32fe      	adds	r2, #254	; 0xfe
 800c4d2:	18d1      	adds	r1, r2, r3
 800c4d4:	461f      	mov	r7, r3
 800c4d6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c4da:	9101      	str	r1, [sp, #4]
 800c4dc:	2830      	cmp	r0, #48	; 0x30
 800c4de:	d0f8      	beq.n	800c4d2 <__gethex+0x36>
 800c4e0:	f7ff ffc7 	bl	800c472 <__hexdig_fun>
 800c4e4:	4604      	mov	r4, r0
 800c4e6:	2800      	cmp	r0, #0
 800c4e8:	d13a      	bne.n	800c560 <__gethex+0xc4>
 800c4ea:	4652      	mov	r2, sl
 800c4ec:	4638      	mov	r0, r7
 800c4ee:	9903      	ldr	r1, [sp, #12]
 800c4f0:	f001 fa26 	bl	800d940 <strncmp>
 800c4f4:	4605      	mov	r5, r0
 800c4f6:	2800      	cmp	r0, #0
 800c4f8:	d166      	bne.n	800c5c8 <__gethex+0x12c>
 800c4fa:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c4fe:	eb07 060a 	add.w	r6, r7, sl
 800c502:	f7ff ffb6 	bl	800c472 <__hexdig_fun>
 800c506:	2800      	cmp	r0, #0
 800c508:	d060      	beq.n	800c5cc <__gethex+0x130>
 800c50a:	4633      	mov	r3, r6
 800c50c:	7818      	ldrb	r0, [r3, #0]
 800c50e:	461f      	mov	r7, r3
 800c510:	2830      	cmp	r0, #48	; 0x30
 800c512:	f103 0301 	add.w	r3, r3, #1
 800c516:	d0f9      	beq.n	800c50c <__gethex+0x70>
 800c518:	f7ff ffab 	bl	800c472 <__hexdig_fun>
 800c51c:	2301      	movs	r3, #1
 800c51e:	fab0 f480 	clz	r4, r0
 800c522:	4635      	mov	r5, r6
 800c524:	0964      	lsrs	r4, r4, #5
 800c526:	9301      	str	r3, [sp, #4]
 800c528:	463a      	mov	r2, r7
 800c52a:	4616      	mov	r6, r2
 800c52c:	7830      	ldrb	r0, [r6, #0]
 800c52e:	3201      	adds	r2, #1
 800c530:	f7ff ff9f 	bl	800c472 <__hexdig_fun>
 800c534:	2800      	cmp	r0, #0
 800c536:	d1f8      	bne.n	800c52a <__gethex+0x8e>
 800c538:	4652      	mov	r2, sl
 800c53a:	4630      	mov	r0, r6
 800c53c:	9903      	ldr	r1, [sp, #12]
 800c53e:	f001 f9ff 	bl	800d940 <strncmp>
 800c542:	b980      	cbnz	r0, 800c566 <__gethex+0xca>
 800c544:	b94d      	cbnz	r5, 800c55a <__gethex+0xbe>
 800c546:	eb06 050a 	add.w	r5, r6, sl
 800c54a:	462a      	mov	r2, r5
 800c54c:	4616      	mov	r6, r2
 800c54e:	7830      	ldrb	r0, [r6, #0]
 800c550:	3201      	adds	r2, #1
 800c552:	f7ff ff8e 	bl	800c472 <__hexdig_fun>
 800c556:	2800      	cmp	r0, #0
 800c558:	d1f8      	bne.n	800c54c <__gethex+0xb0>
 800c55a:	1bad      	subs	r5, r5, r6
 800c55c:	00ad      	lsls	r5, r5, #2
 800c55e:	e004      	b.n	800c56a <__gethex+0xce>
 800c560:	2400      	movs	r4, #0
 800c562:	4625      	mov	r5, r4
 800c564:	e7e0      	b.n	800c528 <__gethex+0x8c>
 800c566:	2d00      	cmp	r5, #0
 800c568:	d1f7      	bne.n	800c55a <__gethex+0xbe>
 800c56a:	7833      	ldrb	r3, [r6, #0]
 800c56c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c570:	2b50      	cmp	r3, #80	; 0x50
 800c572:	d139      	bne.n	800c5e8 <__gethex+0x14c>
 800c574:	7873      	ldrb	r3, [r6, #1]
 800c576:	2b2b      	cmp	r3, #43	; 0x2b
 800c578:	d02a      	beq.n	800c5d0 <__gethex+0x134>
 800c57a:	2b2d      	cmp	r3, #45	; 0x2d
 800c57c:	d02c      	beq.n	800c5d8 <__gethex+0x13c>
 800c57e:	f04f 0900 	mov.w	r9, #0
 800c582:	1c71      	adds	r1, r6, #1
 800c584:	7808      	ldrb	r0, [r1, #0]
 800c586:	f7ff ff74 	bl	800c472 <__hexdig_fun>
 800c58a:	1e43      	subs	r3, r0, #1
 800c58c:	b2db      	uxtb	r3, r3
 800c58e:	2b18      	cmp	r3, #24
 800c590:	d82a      	bhi.n	800c5e8 <__gethex+0x14c>
 800c592:	f1a0 0210 	sub.w	r2, r0, #16
 800c596:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c59a:	f7ff ff6a 	bl	800c472 <__hexdig_fun>
 800c59e:	1e43      	subs	r3, r0, #1
 800c5a0:	b2db      	uxtb	r3, r3
 800c5a2:	2b18      	cmp	r3, #24
 800c5a4:	d91b      	bls.n	800c5de <__gethex+0x142>
 800c5a6:	f1b9 0f00 	cmp.w	r9, #0
 800c5aa:	d000      	beq.n	800c5ae <__gethex+0x112>
 800c5ac:	4252      	negs	r2, r2
 800c5ae:	4415      	add	r5, r2
 800c5b0:	f8cb 1000 	str.w	r1, [fp]
 800c5b4:	b1d4      	cbz	r4, 800c5ec <__gethex+0x150>
 800c5b6:	9b01      	ldr	r3, [sp, #4]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	bf14      	ite	ne
 800c5bc:	2700      	movne	r7, #0
 800c5be:	2706      	moveq	r7, #6
 800c5c0:	4638      	mov	r0, r7
 800c5c2:	b00b      	add	sp, #44	; 0x2c
 800c5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5c8:	463e      	mov	r6, r7
 800c5ca:	4625      	mov	r5, r4
 800c5cc:	2401      	movs	r4, #1
 800c5ce:	e7cc      	b.n	800c56a <__gethex+0xce>
 800c5d0:	f04f 0900 	mov.w	r9, #0
 800c5d4:	1cb1      	adds	r1, r6, #2
 800c5d6:	e7d5      	b.n	800c584 <__gethex+0xe8>
 800c5d8:	f04f 0901 	mov.w	r9, #1
 800c5dc:	e7fa      	b.n	800c5d4 <__gethex+0x138>
 800c5de:	230a      	movs	r3, #10
 800c5e0:	fb03 0202 	mla	r2, r3, r2, r0
 800c5e4:	3a10      	subs	r2, #16
 800c5e6:	e7d6      	b.n	800c596 <__gethex+0xfa>
 800c5e8:	4631      	mov	r1, r6
 800c5ea:	e7e1      	b.n	800c5b0 <__gethex+0x114>
 800c5ec:	4621      	mov	r1, r4
 800c5ee:	1bf3      	subs	r3, r6, r7
 800c5f0:	3b01      	subs	r3, #1
 800c5f2:	2b07      	cmp	r3, #7
 800c5f4:	dc0a      	bgt.n	800c60c <__gethex+0x170>
 800c5f6:	9802      	ldr	r0, [sp, #8]
 800c5f8:	f000 fa88 	bl	800cb0c <_Balloc>
 800c5fc:	4604      	mov	r4, r0
 800c5fe:	b940      	cbnz	r0, 800c612 <__gethex+0x176>
 800c600:	4602      	mov	r2, r0
 800c602:	21de      	movs	r1, #222	; 0xde
 800c604:	4b5b      	ldr	r3, [pc, #364]	; (800c774 <__gethex+0x2d8>)
 800c606:	485c      	ldr	r0, [pc, #368]	; (800c778 <__gethex+0x2dc>)
 800c608:	f001 f9bc 	bl	800d984 <__assert_func>
 800c60c:	3101      	adds	r1, #1
 800c60e:	105b      	asrs	r3, r3, #1
 800c610:	e7ef      	b.n	800c5f2 <__gethex+0x156>
 800c612:	f04f 0b00 	mov.w	fp, #0
 800c616:	f100 0914 	add.w	r9, r0, #20
 800c61a:	f1ca 0301 	rsb	r3, sl, #1
 800c61e:	f8cd 9010 	str.w	r9, [sp, #16]
 800c622:	f8cd b004 	str.w	fp, [sp, #4]
 800c626:	9308      	str	r3, [sp, #32]
 800c628:	42b7      	cmp	r7, r6
 800c62a:	d33f      	bcc.n	800c6ac <__gethex+0x210>
 800c62c:	9f04      	ldr	r7, [sp, #16]
 800c62e:	9b01      	ldr	r3, [sp, #4]
 800c630:	f847 3b04 	str.w	r3, [r7], #4
 800c634:	eba7 0709 	sub.w	r7, r7, r9
 800c638:	10bf      	asrs	r7, r7, #2
 800c63a:	6127      	str	r7, [r4, #16]
 800c63c:	4618      	mov	r0, r3
 800c63e:	f000 fb57 	bl	800ccf0 <__hi0bits>
 800c642:	017f      	lsls	r7, r7, #5
 800c644:	f8d8 6000 	ldr.w	r6, [r8]
 800c648:	1a3f      	subs	r7, r7, r0
 800c64a:	42b7      	cmp	r7, r6
 800c64c:	dd62      	ble.n	800c714 <__gethex+0x278>
 800c64e:	1bbf      	subs	r7, r7, r6
 800c650:	4639      	mov	r1, r7
 800c652:	4620      	mov	r0, r4
 800c654:	f000 fef1 	bl	800d43a <__any_on>
 800c658:	4682      	mov	sl, r0
 800c65a:	b1a8      	cbz	r0, 800c688 <__gethex+0x1ec>
 800c65c:	f04f 0a01 	mov.w	sl, #1
 800c660:	1e7b      	subs	r3, r7, #1
 800c662:	1159      	asrs	r1, r3, #5
 800c664:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c668:	f003 021f 	and.w	r2, r3, #31
 800c66c:	fa0a f202 	lsl.w	r2, sl, r2
 800c670:	420a      	tst	r2, r1
 800c672:	d009      	beq.n	800c688 <__gethex+0x1ec>
 800c674:	4553      	cmp	r3, sl
 800c676:	dd05      	ble.n	800c684 <__gethex+0x1e8>
 800c678:	4620      	mov	r0, r4
 800c67a:	1eb9      	subs	r1, r7, #2
 800c67c:	f000 fedd 	bl	800d43a <__any_on>
 800c680:	2800      	cmp	r0, #0
 800c682:	d144      	bne.n	800c70e <__gethex+0x272>
 800c684:	f04f 0a02 	mov.w	sl, #2
 800c688:	4639      	mov	r1, r7
 800c68a:	4620      	mov	r0, r4
 800c68c:	f7ff fe9e 	bl	800c3cc <rshift>
 800c690:	443d      	add	r5, r7
 800c692:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c696:	42ab      	cmp	r3, r5
 800c698:	da4a      	bge.n	800c730 <__gethex+0x294>
 800c69a:	4621      	mov	r1, r4
 800c69c:	9802      	ldr	r0, [sp, #8]
 800c69e:	f000 fa75 	bl	800cb8c <_Bfree>
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c6a6:	27a3      	movs	r7, #163	; 0xa3
 800c6a8:	6013      	str	r3, [r2, #0]
 800c6aa:	e789      	b.n	800c5c0 <__gethex+0x124>
 800c6ac:	1e73      	subs	r3, r6, #1
 800c6ae:	9a06      	ldr	r2, [sp, #24]
 800c6b0:	9307      	str	r3, [sp, #28]
 800c6b2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d019      	beq.n	800c6ee <__gethex+0x252>
 800c6ba:	f1bb 0f20 	cmp.w	fp, #32
 800c6be:	d107      	bne.n	800c6d0 <__gethex+0x234>
 800c6c0:	9b04      	ldr	r3, [sp, #16]
 800c6c2:	9a01      	ldr	r2, [sp, #4]
 800c6c4:	f843 2b04 	str.w	r2, [r3], #4
 800c6c8:	9304      	str	r3, [sp, #16]
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	469b      	mov	fp, r3
 800c6ce:	9301      	str	r3, [sp, #4]
 800c6d0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c6d4:	f7ff fecd 	bl	800c472 <__hexdig_fun>
 800c6d8:	9b01      	ldr	r3, [sp, #4]
 800c6da:	f000 000f 	and.w	r0, r0, #15
 800c6de:	fa00 f00b 	lsl.w	r0, r0, fp
 800c6e2:	4303      	orrs	r3, r0
 800c6e4:	9301      	str	r3, [sp, #4]
 800c6e6:	f10b 0b04 	add.w	fp, fp, #4
 800c6ea:	9b07      	ldr	r3, [sp, #28]
 800c6ec:	e00d      	b.n	800c70a <__gethex+0x26e>
 800c6ee:	9a08      	ldr	r2, [sp, #32]
 800c6f0:	1e73      	subs	r3, r6, #1
 800c6f2:	4413      	add	r3, r2
 800c6f4:	42bb      	cmp	r3, r7
 800c6f6:	d3e0      	bcc.n	800c6ba <__gethex+0x21e>
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	4652      	mov	r2, sl
 800c6fc:	9903      	ldr	r1, [sp, #12]
 800c6fe:	9309      	str	r3, [sp, #36]	; 0x24
 800c700:	f001 f91e 	bl	800d940 <strncmp>
 800c704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c706:	2800      	cmp	r0, #0
 800c708:	d1d7      	bne.n	800c6ba <__gethex+0x21e>
 800c70a:	461e      	mov	r6, r3
 800c70c:	e78c      	b.n	800c628 <__gethex+0x18c>
 800c70e:	f04f 0a03 	mov.w	sl, #3
 800c712:	e7b9      	b.n	800c688 <__gethex+0x1ec>
 800c714:	da09      	bge.n	800c72a <__gethex+0x28e>
 800c716:	1bf7      	subs	r7, r6, r7
 800c718:	4621      	mov	r1, r4
 800c71a:	463a      	mov	r2, r7
 800c71c:	9802      	ldr	r0, [sp, #8]
 800c71e:	f000 fc4d 	bl	800cfbc <__lshift>
 800c722:	4604      	mov	r4, r0
 800c724:	1bed      	subs	r5, r5, r7
 800c726:	f100 0914 	add.w	r9, r0, #20
 800c72a:	f04f 0a00 	mov.w	sl, #0
 800c72e:	e7b0      	b.n	800c692 <__gethex+0x1f6>
 800c730:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c734:	42a8      	cmp	r0, r5
 800c736:	dd72      	ble.n	800c81e <__gethex+0x382>
 800c738:	1b45      	subs	r5, r0, r5
 800c73a:	42ae      	cmp	r6, r5
 800c73c:	dc35      	bgt.n	800c7aa <__gethex+0x30e>
 800c73e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c742:	2b02      	cmp	r3, #2
 800c744:	d029      	beq.n	800c79a <__gethex+0x2fe>
 800c746:	2b03      	cmp	r3, #3
 800c748:	d02b      	beq.n	800c7a2 <__gethex+0x306>
 800c74a:	2b01      	cmp	r3, #1
 800c74c:	d11c      	bne.n	800c788 <__gethex+0x2ec>
 800c74e:	42ae      	cmp	r6, r5
 800c750:	d11a      	bne.n	800c788 <__gethex+0x2ec>
 800c752:	2e01      	cmp	r6, #1
 800c754:	d112      	bne.n	800c77c <__gethex+0x2e0>
 800c756:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c75a:	9a05      	ldr	r2, [sp, #20]
 800c75c:	2762      	movs	r7, #98	; 0x62
 800c75e:	6013      	str	r3, [r2, #0]
 800c760:	2301      	movs	r3, #1
 800c762:	6123      	str	r3, [r4, #16]
 800c764:	f8c9 3000 	str.w	r3, [r9]
 800c768:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c76a:	601c      	str	r4, [r3, #0]
 800c76c:	e728      	b.n	800c5c0 <__gethex+0x124>
 800c76e:	bf00      	nop
 800c770:	0800e838 	.word	0x0800e838
 800c774:	0800e7c0 	.word	0x0800e7c0
 800c778:	0800e7d1 	.word	0x0800e7d1
 800c77c:	4620      	mov	r0, r4
 800c77e:	1e71      	subs	r1, r6, #1
 800c780:	f000 fe5b 	bl	800d43a <__any_on>
 800c784:	2800      	cmp	r0, #0
 800c786:	d1e6      	bne.n	800c756 <__gethex+0x2ba>
 800c788:	4621      	mov	r1, r4
 800c78a:	9802      	ldr	r0, [sp, #8]
 800c78c:	f000 f9fe 	bl	800cb8c <_Bfree>
 800c790:	2300      	movs	r3, #0
 800c792:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c794:	2750      	movs	r7, #80	; 0x50
 800c796:	6013      	str	r3, [r2, #0]
 800c798:	e712      	b.n	800c5c0 <__gethex+0x124>
 800c79a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d1f3      	bne.n	800c788 <__gethex+0x2ec>
 800c7a0:	e7d9      	b.n	800c756 <__gethex+0x2ba>
 800c7a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d1d6      	bne.n	800c756 <__gethex+0x2ba>
 800c7a8:	e7ee      	b.n	800c788 <__gethex+0x2ec>
 800c7aa:	1e6f      	subs	r7, r5, #1
 800c7ac:	f1ba 0f00 	cmp.w	sl, #0
 800c7b0:	d132      	bne.n	800c818 <__gethex+0x37c>
 800c7b2:	b127      	cbz	r7, 800c7be <__gethex+0x322>
 800c7b4:	4639      	mov	r1, r7
 800c7b6:	4620      	mov	r0, r4
 800c7b8:	f000 fe3f 	bl	800d43a <__any_on>
 800c7bc:	4682      	mov	sl, r0
 800c7be:	2101      	movs	r1, #1
 800c7c0:	117b      	asrs	r3, r7, #5
 800c7c2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c7c6:	f007 071f 	and.w	r7, r7, #31
 800c7ca:	fa01 f707 	lsl.w	r7, r1, r7
 800c7ce:	421f      	tst	r7, r3
 800c7d0:	f04f 0702 	mov.w	r7, #2
 800c7d4:	4629      	mov	r1, r5
 800c7d6:	4620      	mov	r0, r4
 800c7d8:	bf18      	it	ne
 800c7da:	f04a 0a02 	orrne.w	sl, sl, #2
 800c7de:	1b76      	subs	r6, r6, r5
 800c7e0:	f7ff fdf4 	bl	800c3cc <rshift>
 800c7e4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c7e8:	f1ba 0f00 	cmp.w	sl, #0
 800c7ec:	d048      	beq.n	800c880 <__gethex+0x3e4>
 800c7ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c7f2:	2b02      	cmp	r3, #2
 800c7f4:	d015      	beq.n	800c822 <__gethex+0x386>
 800c7f6:	2b03      	cmp	r3, #3
 800c7f8:	d017      	beq.n	800c82a <__gethex+0x38e>
 800c7fa:	2b01      	cmp	r3, #1
 800c7fc:	d109      	bne.n	800c812 <__gethex+0x376>
 800c7fe:	f01a 0f02 	tst.w	sl, #2
 800c802:	d006      	beq.n	800c812 <__gethex+0x376>
 800c804:	f8d9 0000 	ldr.w	r0, [r9]
 800c808:	ea4a 0a00 	orr.w	sl, sl, r0
 800c80c:	f01a 0f01 	tst.w	sl, #1
 800c810:	d10e      	bne.n	800c830 <__gethex+0x394>
 800c812:	f047 0710 	orr.w	r7, r7, #16
 800c816:	e033      	b.n	800c880 <__gethex+0x3e4>
 800c818:	f04f 0a01 	mov.w	sl, #1
 800c81c:	e7cf      	b.n	800c7be <__gethex+0x322>
 800c81e:	2701      	movs	r7, #1
 800c820:	e7e2      	b.n	800c7e8 <__gethex+0x34c>
 800c822:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c824:	f1c3 0301 	rsb	r3, r3, #1
 800c828:	9315      	str	r3, [sp, #84]	; 0x54
 800c82a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d0f0      	beq.n	800c812 <__gethex+0x376>
 800c830:	f04f 0c00 	mov.w	ip, #0
 800c834:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c838:	f104 0314 	add.w	r3, r4, #20
 800c83c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c840:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c844:	4618      	mov	r0, r3
 800c846:	f853 2b04 	ldr.w	r2, [r3], #4
 800c84a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c84e:	d01c      	beq.n	800c88a <__gethex+0x3ee>
 800c850:	3201      	adds	r2, #1
 800c852:	6002      	str	r2, [r0, #0]
 800c854:	2f02      	cmp	r7, #2
 800c856:	f104 0314 	add.w	r3, r4, #20
 800c85a:	d13d      	bne.n	800c8d8 <__gethex+0x43c>
 800c85c:	f8d8 2000 	ldr.w	r2, [r8]
 800c860:	3a01      	subs	r2, #1
 800c862:	42b2      	cmp	r2, r6
 800c864:	d10a      	bne.n	800c87c <__gethex+0x3e0>
 800c866:	2201      	movs	r2, #1
 800c868:	1171      	asrs	r1, r6, #5
 800c86a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c86e:	f006 061f 	and.w	r6, r6, #31
 800c872:	fa02 f606 	lsl.w	r6, r2, r6
 800c876:	421e      	tst	r6, r3
 800c878:	bf18      	it	ne
 800c87a:	4617      	movne	r7, r2
 800c87c:	f047 0720 	orr.w	r7, r7, #32
 800c880:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c882:	601c      	str	r4, [r3, #0]
 800c884:	9b05      	ldr	r3, [sp, #20]
 800c886:	601d      	str	r5, [r3, #0]
 800c888:	e69a      	b.n	800c5c0 <__gethex+0x124>
 800c88a:	4299      	cmp	r1, r3
 800c88c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c890:	d8d8      	bhi.n	800c844 <__gethex+0x3a8>
 800c892:	68a3      	ldr	r3, [r4, #8]
 800c894:	459b      	cmp	fp, r3
 800c896:	db17      	blt.n	800c8c8 <__gethex+0x42c>
 800c898:	6861      	ldr	r1, [r4, #4]
 800c89a:	9802      	ldr	r0, [sp, #8]
 800c89c:	3101      	adds	r1, #1
 800c89e:	f000 f935 	bl	800cb0c <_Balloc>
 800c8a2:	4681      	mov	r9, r0
 800c8a4:	b918      	cbnz	r0, 800c8ae <__gethex+0x412>
 800c8a6:	4602      	mov	r2, r0
 800c8a8:	2184      	movs	r1, #132	; 0x84
 800c8aa:	4b19      	ldr	r3, [pc, #100]	; (800c910 <__gethex+0x474>)
 800c8ac:	e6ab      	b.n	800c606 <__gethex+0x16a>
 800c8ae:	6922      	ldr	r2, [r4, #16]
 800c8b0:	f104 010c 	add.w	r1, r4, #12
 800c8b4:	3202      	adds	r2, #2
 800c8b6:	0092      	lsls	r2, r2, #2
 800c8b8:	300c      	adds	r0, #12
 800c8ba:	f000 f919 	bl	800caf0 <memcpy>
 800c8be:	4621      	mov	r1, r4
 800c8c0:	9802      	ldr	r0, [sp, #8]
 800c8c2:	f000 f963 	bl	800cb8c <_Bfree>
 800c8c6:	464c      	mov	r4, r9
 800c8c8:	6923      	ldr	r3, [r4, #16]
 800c8ca:	1c5a      	adds	r2, r3, #1
 800c8cc:	6122      	str	r2, [r4, #16]
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c8d4:	615a      	str	r2, [r3, #20]
 800c8d6:	e7bd      	b.n	800c854 <__gethex+0x3b8>
 800c8d8:	6922      	ldr	r2, [r4, #16]
 800c8da:	455a      	cmp	r2, fp
 800c8dc:	dd0b      	ble.n	800c8f6 <__gethex+0x45a>
 800c8de:	2101      	movs	r1, #1
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	f7ff fd73 	bl	800c3cc <rshift>
 800c8e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c8ea:	3501      	adds	r5, #1
 800c8ec:	42ab      	cmp	r3, r5
 800c8ee:	f6ff aed4 	blt.w	800c69a <__gethex+0x1fe>
 800c8f2:	2701      	movs	r7, #1
 800c8f4:	e7c2      	b.n	800c87c <__gethex+0x3e0>
 800c8f6:	f016 061f 	ands.w	r6, r6, #31
 800c8fa:	d0fa      	beq.n	800c8f2 <__gethex+0x456>
 800c8fc:	4453      	add	r3, sl
 800c8fe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c902:	f000 f9f5 	bl	800ccf0 <__hi0bits>
 800c906:	f1c6 0620 	rsb	r6, r6, #32
 800c90a:	42b0      	cmp	r0, r6
 800c90c:	dbe7      	blt.n	800c8de <__gethex+0x442>
 800c90e:	e7f0      	b.n	800c8f2 <__gethex+0x456>
 800c910:	0800e7c0 	.word	0x0800e7c0

0800c914 <L_shift>:
 800c914:	f1c2 0208 	rsb	r2, r2, #8
 800c918:	0092      	lsls	r2, r2, #2
 800c91a:	b570      	push	{r4, r5, r6, lr}
 800c91c:	f1c2 0620 	rsb	r6, r2, #32
 800c920:	6843      	ldr	r3, [r0, #4]
 800c922:	6804      	ldr	r4, [r0, #0]
 800c924:	fa03 f506 	lsl.w	r5, r3, r6
 800c928:	432c      	orrs	r4, r5
 800c92a:	40d3      	lsrs	r3, r2
 800c92c:	6004      	str	r4, [r0, #0]
 800c92e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c932:	4288      	cmp	r0, r1
 800c934:	d3f4      	bcc.n	800c920 <L_shift+0xc>
 800c936:	bd70      	pop	{r4, r5, r6, pc}

0800c938 <__match>:
 800c938:	b530      	push	{r4, r5, lr}
 800c93a:	6803      	ldr	r3, [r0, #0]
 800c93c:	3301      	adds	r3, #1
 800c93e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c942:	b914      	cbnz	r4, 800c94a <__match+0x12>
 800c944:	6003      	str	r3, [r0, #0]
 800c946:	2001      	movs	r0, #1
 800c948:	bd30      	pop	{r4, r5, pc}
 800c94a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c94e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c952:	2d19      	cmp	r5, #25
 800c954:	bf98      	it	ls
 800c956:	3220      	addls	r2, #32
 800c958:	42a2      	cmp	r2, r4
 800c95a:	d0f0      	beq.n	800c93e <__match+0x6>
 800c95c:	2000      	movs	r0, #0
 800c95e:	e7f3      	b.n	800c948 <__match+0x10>

0800c960 <__hexnan>:
 800c960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c964:	2500      	movs	r5, #0
 800c966:	680b      	ldr	r3, [r1, #0]
 800c968:	4682      	mov	sl, r0
 800c96a:	115e      	asrs	r6, r3, #5
 800c96c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c970:	f013 031f 	ands.w	r3, r3, #31
 800c974:	bf18      	it	ne
 800c976:	3604      	addne	r6, #4
 800c978:	1f37      	subs	r7, r6, #4
 800c97a:	46b9      	mov	r9, r7
 800c97c:	463c      	mov	r4, r7
 800c97e:	46ab      	mov	fp, r5
 800c980:	b087      	sub	sp, #28
 800c982:	4690      	mov	r8, r2
 800c984:	6802      	ldr	r2, [r0, #0]
 800c986:	9301      	str	r3, [sp, #4]
 800c988:	f846 5c04 	str.w	r5, [r6, #-4]
 800c98c:	9502      	str	r5, [sp, #8]
 800c98e:	7851      	ldrb	r1, [r2, #1]
 800c990:	1c53      	adds	r3, r2, #1
 800c992:	9303      	str	r3, [sp, #12]
 800c994:	b341      	cbz	r1, 800c9e8 <__hexnan+0x88>
 800c996:	4608      	mov	r0, r1
 800c998:	9205      	str	r2, [sp, #20]
 800c99a:	9104      	str	r1, [sp, #16]
 800c99c:	f7ff fd69 	bl	800c472 <__hexdig_fun>
 800c9a0:	2800      	cmp	r0, #0
 800c9a2:	d14f      	bne.n	800ca44 <__hexnan+0xe4>
 800c9a4:	9904      	ldr	r1, [sp, #16]
 800c9a6:	9a05      	ldr	r2, [sp, #20]
 800c9a8:	2920      	cmp	r1, #32
 800c9aa:	d818      	bhi.n	800c9de <__hexnan+0x7e>
 800c9ac:	9b02      	ldr	r3, [sp, #8]
 800c9ae:	459b      	cmp	fp, r3
 800c9b0:	dd13      	ble.n	800c9da <__hexnan+0x7a>
 800c9b2:	454c      	cmp	r4, r9
 800c9b4:	d206      	bcs.n	800c9c4 <__hexnan+0x64>
 800c9b6:	2d07      	cmp	r5, #7
 800c9b8:	dc04      	bgt.n	800c9c4 <__hexnan+0x64>
 800c9ba:	462a      	mov	r2, r5
 800c9bc:	4649      	mov	r1, r9
 800c9be:	4620      	mov	r0, r4
 800c9c0:	f7ff ffa8 	bl	800c914 <L_shift>
 800c9c4:	4544      	cmp	r4, r8
 800c9c6:	d950      	bls.n	800ca6a <__hexnan+0x10a>
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	f1a4 0904 	sub.w	r9, r4, #4
 800c9ce:	f844 3c04 	str.w	r3, [r4, #-4]
 800c9d2:	461d      	mov	r5, r3
 800c9d4:	464c      	mov	r4, r9
 800c9d6:	f8cd b008 	str.w	fp, [sp, #8]
 800c9da:	9a03      	ldr	r2, [sp, #12]
 800c9dc:	e7d7      	b.n	800c98e <__hexnan+0x2e>
 800c9de:	2929      	cmp	r1, #41	; 0x29
 800c9e0:	d156      	bne.n	800ca90 <__hexnan+0x130>
 800c9e2:	3202      	adds	r2, #2
 800c9e4:	f8ca 2000 	str.w	r2, [sl]
 800c9e8:	f1bb 0f00 	cmp.w	fp, #0
 800c9ec:	d050      	beq.n	800ca90 <__hexnan+0x130>
 800c9ee:	454c      	cmp	r4, r9
 800c9f0:	d206      	bcs.n	800ca00 <__hexnan+0xa0>
 800c9f2:	2d07      	cmp	r5, #7
 800c9f4:	dc04      	bgt.n	800ca00 <__hexnan+0xa0>
 800c9f6:	462a      	mov	r2, r5
 800c9f8:	4649      	mov	r1, r9
 800c9fa:	4620      	mov	r0, r4
 800c9fc:	f7ff ff8a 	bl	800c914 <L_shift>
 800ca00:	4544      	cmp	r4, r8
 800ca02:	d934      	bls.n	800ca6e <__hexnan+0x10e>
 800ca04:	4623      	mov	r3, r4
 800ca06:	f1a8 0204 	sub.w	r2, r8, #4
 800ca0a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ca0e:	429f      	cmp	r7, r3
 800ca10:	f842 1f04 	str.w	r1, [r2, #4]!
 800ca14:	d2f9      	bcs.n	800ca0a <__hexnan+0xaa>
 800ca16:	1b3b      	subs	r3, r7, r4
 800ca18:	f023 0303 	bic.w	r3, r3, #3
 800ca1c:	3304      	adds	r3, #4
 800ca1e:	3401      	adds	r4, #1
 800ca20:	3e03      	subs	r6, #3
 800ca22:	42b4      	cmp	r4, r6
 800ca24:	bf88      	it	hi
 800ca26:	2304      	movhi	r3, #4
 800ca28:	2200      	movs	r2, #0
 800ca2a:	4443      	add	r3, r8
 800ca2c:	f843 2b04 	str.w	r2, [r3], #4
 800ca30:	429f      	cmp	r7, r3
 800ca32:	d2fb      	bcs.n	800ca2c <__hexnan+0xcc>
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	b91b      	cbnz	r3, 800ca40 <__hexnan+0xe0>
 800ca38:	4547      	cmp	r7, r8
 800ca3a:	d127      	bne.n	800ca8c <__hexnan+0x12c>
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	603b      	str	r3, [r7, #0]
 800ca40:	2005      	movs	r0, #5
 800ca42:	e026      	b.n	800ca92 <__hexnan+0x132>
 800ca44:	3501      	adds	r5, #1
 800ca46:	2d08      	cmp	r5, #8
 800ca48:	f10b 0b01 	add.w	fp, fp, #1
 800ca4c:	dd06      	ble.n	800ca5c <__hexnan+0xfc>
 800ca4e:	4544      	cmp	r4, r8
 800ca50:	d9c3      	bls.n	800c9da <__hexnan+0x7a>
 800ca52:	2300      	movs	r3, #0
 800ca54:	2501      	movs	r5, #1
 800ca56:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca5a:	3c04      	subs	r4, #4
 800ca5c:	6822      	ldr	r2, [r4, #0]
 800ca5e:	f000 000f 	and.w	r0, r0, #15
 800ca62:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ca66:	6022      	str	r2, [r4, #0]
 800ca68:	e7b7      	b.n	800c9da <__hexnan+0x7a>
 800ca6a:	2508      	movs	r5, #8
 800ca6c:	e7b5      	b.n	800c9da <__hexnan+0x7a>
 800ca6e:	9b01      	ldr	r3, [sp, #4]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d0df      	beq.n	800ca34 <__hexnan+0xd4>
 800ca74:	f04f 32ff 	mov.w	r2, #4294967295
 800ca78:	f1c3 0320 	rsb	r3, r3, #32
 800ca7c:	fa22 f303 	lsr.w	r3, r2, r3
 800ca80:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ca84:	401a      	ands	r2, r3
 800ca86:	f846 2c04 	str.w	r2, [r6, #-4]
 800ca8a:	e7d3      	b.n	800ca34 <__hexnan+0xd4>
 800ca8c:	3f04      	subs	r7, #4
 800ca8e:	e7d1      	b.n	800ca34 <__hexnan+0xd4>
 800ca90:	2004      	movs	r0, #4
 800ca92:	b007      	add	sp, #28
 800ca94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ca98 <_localeconv_r>:
 800ca98:	4800      	ldr	r0, [pc, #0]	; (800ca9c <_localeconv_r+0x4>)
 800ca9a:	4770      	bx	lr
 800ca9c:	200002d4 	.word	0x200002d4

0800caa0 <malloc>:
 800caa0:	4b02      	ldr	r3, [pc, #8]	; (800caac <malloc+0xc>)
 800caa2:	4601      	mov	r1, r0
 800caa4:	6818      	ldr	r0, [r3, #0]
 800caa6:	f000 bd65 	b.w	800d574 <_malloc_r>
 800caaa:	bf00      	nop
 800caac:	2000017c 	.word	0x2000017c

0800cab0 <__ascii_mbtowc>:
 800cab0:	b082      	sub	sp, #8
 800cab2:	b901      	cbnz	r1, 800cab6 <__ascii_mbtowc+0x6>
 800cab4:	a901      	add	r1, sp, #4
 800cab6:	b142      	cbz	r2, 800caca <__ascii_mbtowc+0x1a>
 800cab8:	b14b      	cbz	r3, 800cace <__ascii_mbtowc+0x1e>
 800caba:	7813      	ldrb	r3, [r2, #0]
 800cabc:	600b      	str	r3, [r1, #0]
 800cabe:	7812      	ldrb	r2, [r2, #0]
 800cac0:	1e10      	subs	r0, r2, #0
 800cac2:	bf18      	it	ne
 800cac4:	2001      	movne	r0, #1
 800cac6:	b002      	add	sp, #8
 800cac8:	4770      	bx	lr
 800caca:	4610      	mov	r0, r2
 800cacc:	e7fb      	b.n	800cac6 <__ascii_mbtowc+0x16>
 800cace:	f06f 0001 	mvn.w	r0, #1
 800cad2:	e7f8      	b.n	800cac6 <__ascii_mbtowc+0x16>

0800cad4 <memchr>:
 800cad4:	4603      	mov	r3, r0
 800cad6:	b510      	push	{r4, lr}
 800cad8:	b2c9      	uxtb	r1, r1
 800cada:	4402      	add	r2, r0
 800cadc:	4293      	cmp	r3, r2
 800cade:	4618      	mov	r0, r3
 800cae0:	d101      	bne.n	800cae6 <memchr+0x12>
 800cae2:	2000      	movs	r0, #0
 800cae4:	e003      	b.n	800caee <memchr+0x1a>
 800cae6:	7804      	ldrb	r4, [r0, #0]
 800cae8:	3301      	adds	r3, #1
 800caea:	428c      	cmp	r4, r1
 800caec:	d1f6      	bne.n	800cadc <memchr+0x8>
 800caee:	bd10      	pop	{r4, pc}

0800caf0 <memcpy>:
 800caf0:	440a      	add	r2, r1
 800caf2:	4291      	cmp	r1, r2
 800caf4:	f100 33ff 	add.w	r3, r0, #4294967295
 800caf8:	d100      	bne.n	800cafc <memcpy+0xc>
 800cafa:	4770      	bx	lr
 800cafc:	b510      	push	{r4, lr}
 800cafe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb02:	4291      	cmp	r1, r2
 800cb04:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb08:	d1f9      	bne.n	800cafe <memcpy+0xe>
 800cb0a:	bd10      	pop	{r4, pc}

0800cb0c <_Balloc>:
 800cb0c:	b570      	push	{r4, r5, r6, lr}
 800cb0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cb10:	4604      	mov	r4, r0
 800cb12:	460d      	mov	r5, r1
 800cb14:	b976      	cbnz	r6, 800cb34 <_Balloc+0x28>
 800cb16:	2010      	movs	r0, #16
 800cb18:	f7ff ffc2 	bl	800caa0 <malloc>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	6260      	str	r0, [r4, #36]	; 0x24
 800cb20:	b920      	cbnz	r0, 800cb2c <_Balloc+0x20>
 800cb22:	2166      	movs	r1, #102	; 0x66
 800cb24:	4b17      	ldr	r3, [pc, #92]	; (800cb84 <_Balloc+0x78>)
 800cb26:	4818      	ldr	r0, [pc, #96]	; (800cb88 <_Balloc+0x7c>)
 800cb28:	f000 ff2c 	bl	800d984 <__assert_func>
 800cb2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb30:	6006      	str	r6, [r0, #0]
 800cb32:	60c6      	str	r6, [r0, #12]
 800cb34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cb36:	68f3      	ldr	r3, [r6, #12]
 800cb38:	b183      	cbz	r3, 800cb5c <_Balloc+0x50>
 800cb3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb3c:	68db      	ldr	r3, [r3, #12]
 800cb3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb42:	b9b8      	cbnz	r0, 800cb74 <_Balloc+0x68>
 800cb44:	2101      	movs	r1, #1
 800cb46:	fa01 f605 	lsl.w	r6, r1, r5
 800cb4a:	1d72      	adds	r2, r6, #5
 800cb4c:	4620      	mov	r0, r4
 800cb4e:	0092      	lsls	r2, r2, #2
 800cb50:	f000 fc94 	bl	800d47c <_calloc_r>
 800cb54:	b160      	cbz	r0, 800cb70 <_Balloc+0x64>
 800cb56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb5a:	e00e      	b.n	800cb7a <_Balloc+0x6e>
 800cb5c:	2221      	movs	r2, #33	; 0x21
 800cb5e:	2104      	movs	r1, #4
 800cb60:	4620      	mov	r0, r4
 800cb62:	f000 fc8b 	bl	800d47c <_calloc_r>
 800cb66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb68:	60f0      	str	r0, [r6, #12]
 800cb6a:	68db      	ldr	r3, [r3, #12]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d1e4      	bne.n	800cb3a <_Balloc+0x2e>
 800cb70:	2000      	movs	r0, #0
 800cb72:	bd70      	pop	{r4, r5, r6, pc}
 800cb74:	6802      	ldr	r2, [r0, #0]
 800cb76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb80:	e7f7      	b.n	800cb72 <_Balloc+0x66>
 800cb82:	bf00      	nop
 800cb84:	0800e74e 	.word	0x0800e74e
 800cb88:	0800e84c 	.word	0x0800e84c

0800cb8c <_Bfree>:
 800cb8c:	b570      	push	{r4, r5, r6, lr}
 800cb8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cb90:	4605      	mov	r5, r0
 800cb92:	460c      	mov	r4, r1
 800cb94:	b976      	cbnz	r6, 800cbb4 <_Bfree+0x28>
 800cb96:	2010      	movs	r0, #16
 800cb98:	f7ff ff82 	bl	800caa0 <malloc>
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	6268      	str	r0, [r5, #36]	; 0x24
 800cba0:	b920      	cbnz	r0, 800cbac <_Bfree+0x20>
 800cba2:	218a      	movs	r1, #138	; 0x8a
 800cba4:	4b08      	ldr	r3, [pc, #32]	; (800cbc8 <_Bfree+0x3c>)
 800cba6:	4809      	ldr	r0, [pc, #36]	; (800cbcc <_Bfree+0x40>)
 800cba8:	f000 feec 	bl	800d984 <__assert_func>
 800cbac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cbb0:	6006      	str	r6, [r0, #0]
 800cbb2:	60c6      	str	r6, [r0, #12]
 800cbb4:	b13c      	cbz	r4, 800cbc6 <_Bfree+0x3a>
 800cbb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cbb8:	6862      	ldr	r2, [r4, #4]
 800cbba:	68db      	ldr	r3, [r3, #12]
 800cbbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cbc0:	6021      	str	r1, [r4, #0]
 800cbc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cbc6:	bd70      	pop	{r4, r5, r6, pc}
 800cbc8:	0800e74e 	.word	0x0800e74e
 800cbcc:	0800e84c 	.word	0x0800e84c

0800cbd0 <__multadd>:
 800cbd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbd4:	4607      	mov	r7, r0
 800cbd6:	460c      	mov	r4, r1
 800cbd8:	461e      	mov	r6, r3
 800cbda:	2000      	movs	r0, #0
 800cbdc:	690d      	ldr	r5, [r1, #16]
 800cbde:	f101 0c14 	add.w	ip, r1, #20
 800cbe2:	f8dc 3000 	ldr.w	r3, [ip]
 800cbe6:	3001      	adds	r0, #1
 800cbe8:	b299      	uxth	r1, r3
 800cbea:	fb02 6101 	mla	r1, r2, r1, r6
 800cbee:	0c1e      	lsrs	r6, r3, #16
 800cbf0:	0c0b      	lsrs	r3, r1, #16
 800cbf2:	fb02 3306 	mla	r3, r2, r6, r3
 800cbf6:	b289      	uxth	r1, r1
 800cbf8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cbfc:	4285      	cmp	r5, r0
 800cbfe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cc02:	f84c 1b04 	str.w	r1, [ip], #4
 800cc06:	dcec      	bgt.n	800cbe2 <__multadd+0x12>
 800cc08:	b30e      	cbz	r6, 800cc4e <__multadd+0x7e>
 800cc0a:	68a3      	ldr	r3, [r4, #8]
 800cc0c:	42ab      	cmp	r3, r5
 800cc0e:	dc19      	bgt.n	800cc44 <__multadd+0x74>
 800cc10:	6861      	ldr	r1, [r4, #4]
 800cc12:	4638      	mov	r0, r7
 800cc14:	3101      	adds	r1, #1
 800cc16:	f7ff ff79 	bl	800cb0c <_Balloc>
 800cc1a:	4680      	mov	r8, r0
 800cc1c:	b928      	cbnz	r0, 800cc2a <__multadd+0x5a>
 800cc1e:	4602      	mov	r2, r0
 800cc20:	21b5      	movs	r1, #181	; 0xb5
 800cc22:	4b0c      	ldr	r3, [pc, #48]	; (800cc54 <__multadd+0x84>)
 800cc24:	480c      	ldr	r0, [pc, #48]	; (800cc58 <__multadd+0x88>)
 800cc26:	f000 fead 	bl	800d984 <__assert_func>
 800cc2a:	6922      	ldr	r2, [r4, #16]
 800cc2c:	f104 010c 	add.w	r1, r4, #12
 800cc30:	3202      	adds	r2, #2
 800cc32:	0092      	lsls	r2, r2, #2
 800cc34:	300c      	adds	r0, #12
 800cc36:	f7ff ff5b 	bl	800caf0 <memcpy>
 800cc3a:	4621      	mov	r1, r4
 800cc3c:	4638      	mov	r0, r7
 800cc3e:	f7ff ffa5 	bl	800cb8c <_Bfree>
 800cc42:	4644      	mov	r4, r8
 800cc44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc48:	3501      	adds	r5, #1
 800cc4a:	615e      	str	r6, [r3, #20]
 800cc4c:	6125      	str	r5, [r4, #16]
 800cc4e:	4620      	mov	r0, r4
 800cc50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc54:	0800e7c0 	.word	0x0800e7c0
 800cc58:	0800e84c 	.word	0x0800e84c

0800cc5c <__s2b>:
 800cc5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc60:	4615      	mov	r5, r2
 800cc62:	2209      	movs	r2, #9
 800cc64:	461f      	mov	r7, r3
 800cc66:	3308      	adds	r3, #8
 800cc68:	460c      	mov	r4, r1
 800cc6a:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc6e:	4606      	mov	r6, r0
 800cc70:	2201      	movs	r2, #1
 800cc72:	2100      	movs	r1, #0
 800cc74:	429a      	cmp	r2, r3
 800cc76:	db09      	blt.n	800cc8c <__s2b+0x30>
 800cc78:	4630      	mov	r0, r6
 800cc7a:	f7ff ff47 	bl	800cb0c <_Balloc>
 800cc7e:	b940      	cbnz	r0, 800cc92 <__s2b+0x36>
 800cc80:	4602      	mov	r2, r0
 800cc82:	21ce      	movs	r1, #206	; 0xce
 800cc84:	4b18      	ldr	r3, [pc, #96]	; (800cce8 <__s2b+0x8c>)
 800cc86:	4819      	ldr	r0, [pc, #100]	; (800ccec <__s2b+0x90>)
 800cc88:	f000 fe7c 	bl	800d984 <__assert_func>
 800cc8c:	0052      	lsls	r2, r2, #1
 800cc8e:	3101      	adds	r1, #1
 800cc90:	e7f0      	b.n	800cc74 <__s2b+0x18>
 800cc92:	9b08      	ldr	r3, [sp, #32]
 800cc94:	2d09      	cmp	r5, #9
 800cc96:	6143      	str	r3, [r0, #20]
 800cc98:	f04f 0301 	mov.w	r3, #1
 800cc9c:	6103      	str	r3, [r0, #16]
 800cc9e:	dd16      	ble.n	800ccce <__s2b+0x72>
 800cca0:	f104 0909 	add.w	r9, r4, #9
 800cca4:	46c8      	mov	r8, r9
 800cca6:	442c      	add	r4, r5
 800cca8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ccac:	4601      	mov	r1, r0
 800ccae:	220a      	movs	r2, #10
 800ccb0:	4630      	mov	r0, r6
 800ccb2:	3b30      	subs	r3, #48	; 0x30
 800ccb4:	f7ff ff8c 	bl	800cbd0 <__multadd>
 800ccb8:	45a0      	cmp	r8, r4
 800ccba:	d1f5      	bne.n	800cca8 <__s2b+0x4c>
 800ccbc:	f1a5 0408 	sub.w	r4, r5, #8
 800ccc0:	444c      	add	r4, r9
 800ccc2:	1b2d      	subs	r5, r5, r4
 800ccc4:	1963      	adds	r3, r4, r5
 800ccc6:	42bb      	cmp	r3, r7
 800ccc8:	db04      	blt.n	800ccd4 <__s2b+0x78>
 800ccca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccce:	2509      	movs	r5, #9
 800ccd0:	340a      	adds	r4, #10
 800ccd2:	e7f6      	b.n	800ccc2 <__s2b+0x66>
 800ccd4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ccd8:	4601      	mov	r1, r0
 800ccda:	220a      	movs	r2, #10
 800ccdc:	4630      	mov	r0, r6
 800ccde:	3b30      	subs	r3, #48	; 0x30
 800cce0:	f7ff ff76 	bl	800cbd0 <__multadd>
 800cce4:	e7ee      	b.n	800ccc4 <__s2b+0x68>
 800cce6:	bf00      	nop
 800cce8:	0800e7c0 	.word	0x0800e7c0
 800ccec:	0800e84c 	.word	0x0800e84c

0800ccf0 <__hi0bits>:
 800ccf0:	0c02      	lsrs	r2, r0, #16
 800ccf2:	0412      	lsls	r2, r2, #16
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	b9ca      	cbnz	r2, 800cd2c <__hi0bits+0x3c>
 800ccf8:	0403      	lsls	r3, r0, #16
 800ccfa:	2010      	movs	r0, #16
 800ccfc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800cd00:	bf04      	itt	eq
 800cd02:	021b      	lsleq	r3, r3, #8
 800cd04:	3008      	addeq	r0, #8
 800cd06:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cd0a:	bf04      	itt	eq
 800cd0c:	011b      	lsleq	r3, r3, #4
 800cd0e:	3004      	addeq	r0, #4
 800cd10:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cd14:	bf04      	itt	eq
 800cd16:	009b      	lsleq	r3, r3, #2
 800cd18:	3002      	addeq	r0, #2
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	db05      	blt.n	800cd2a <__hi0bits+0x3a>
 800cd1e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800cd22:	f100 0001 	add.w	r0, r0, #1
 800cd26:	bf08      	it	eq
 800cd28:	2020      	moveq	r0, #32
 800cd2a:	4770      	bx	lr
 800cd2c:	2000      	movs	r0, #0
 800cd2e:	e7e5      	b.n	800ccfc <__hi0bits+0xc>

0800cd30 <__lo0bits>:
 800cd30:	6803      	ldr	r3, [r0, #0]
 800cd32:	4602      	mov	r2, r0
 800cd34:	f013 0007 	ands.w	r0, r3, #7
 800cd38:	d00b      	beq.n	800cd52 <__lo0bits+0x22>
 800cd3a:	07d9      	lsls	r1, r3, #31
 800cd3c:	d421      	bmi.n	800cd82 <__lo0bits+0x52>
 800cd3e:	0798      	lsls	r0, r3, #30
 800cd40:	bf49      	itett	mi
 800cd42:	085b      	lsrmi	r3, r3, #1
 800cd44:	089b      	lsrpl	r3, r3, #2
 800cd46:	2001      	movmi	r0, #1
 800cd48:	6013      	strmi	r3, [r2, #0]
 800cd4a:	bf5c      	itt	pl
 800cd4c:	2002      	movpl	r0, #2
 800cd4e:	6013      	strpl	r3, [r2, #0]
 800cd50:	4770      	bx	lr
 800cd52:	b299      	uxth	r1, r3
 800cd54:	b909      	cbnz	r1, 800cd5a <__lo0bits+0x2a>
 800cd56:	2010      	movs	r0, #16
 800cd58:	0c1b      	lsrs	r3, r3, #16
 800cd5a:	b2d9      	uxtb	r1, r3
 800cd5c:	b909      	cbnz	r1, 800cd62 <__lo0bits+0x32>
 800cd5e:	3008      	adds	r0, #8
 800cd60:	0a1b      	lsrs	r3, r3, #8
 800cd62:	0719      	lsls	r1, r3, #28
 800cd64:	bf04      	itt	eq
 800cd66:	091b      	lsreq	r3, r3, #4
 800cd68:	3004      	addeq	r0, #4
 800cd6a:	0799      	lsls	r1, r3, #30
 800cd6c:	bf04      	itt	eq
 800cd6e:	089b      	lsreq	r3, r3, #2
 800cd70:	3002      	addeq	r0, #2
 800cd72:	07d9      	lsls	r1, r3, #31
 800cd74:	d403      	bmi.n	800cd7e <__lo0bits+0x4e>
 800cd76:	085b      	lsrs	r3, r3, #1
 800cd78:	f100 0001 	add.w	r0, r0, #1
 800cd7c:	d003      	beq.n	800cd86 <__lo0bits+0x56>
 800cd7e:	6013      	str	r3, [r2, #0]
 800cd80:	4770      	bx	lr
 800cd82:	2000      	movs	r0, #0
 800cd84:	4770      	bx	lr
 800cd86:	2020      	movs	r0, #32
 800cd88:	4770      	bx	lr
	...

0800cd8c <__i2b>:
 800cd8c:	b510      	push	{r4, lr}
 800cd8e:	460c      	mov	r4, r1
 800cd90:	2101      	movs	r1, #1
 800cd92:	f7ff febb 	bl	800cb0c <_Balloc>
 800cd96:	4602      	mov	r2, r0
 800cd98:	b928      	cbnz	r0, 800cda6 <__i2b+0x1a>
 800cd9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cd9e:	4b04      	ldr	r3, [pc, #16]	; (800cdb0 <__i2b+0x24>)
 800cda0:	4804      	ldr	r0, [pc, #16]	; (800cdb4 <__i2b+0x28>)
 800cda2:	f000 fdef 	bl	800d984 <__assert_func>
 800cda6:	2301      	movs	r3, #1
 800cda8:	6144      	str	r4, [r0, #20]
 800cdaa:	6103      	str	r3, [r0, #16]
 800cdac:	bd10      	pop	{r4, pc}
 800cdae:	bf00      	nop
 800cdb0:	0800e7c0 	.word	0x0800e7c0
 800cdb4:	0800e84c 	.word	0x0800e84c

0800cdb8 <__multiply>:
 800cdb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdbc:	4691      	mov	r9, r2
 800cdbe:	690a      	ldr	r2, [r1, #16]
 800cdc0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cdc4:	460c      	mov	r4, r1
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	bfbe      	ittt	lt
 800cdca:	460b      	movlt	r3, r1
 800cdcc:	464c      	movlt	r4, r9
 800cdce:	4699      	movlt	r9, r3
 800cdd0:	6927      	ldr	r7, [r4, #16]
 800cdd2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cdd6:	68a3      	ldr	r3, [r4, #8]
 800cdd8:	6861      	ldr	r1, [r4, #4]
 800cdda:	eb07 060a 	add.w	r6, r7, sl
 800cdde:	42b3      	cmp	r3, r6
 800cde0:	b085      	sub	sp, #20
 800cde2:	bfb8      	it	lt
 800cde4:	3101      	addlt	r1, #1
 800cde6:	f7ff fe91 	bl	800cb0c <_Balloc>
 800cdea:	b930      	cbnz	r0, 800cdfa <__multiply+0x42>
 800cdec:	4602      	mov	r2, r0
 800cdee:	f240 115d 	movw	r1, #349	; 0x15d
 800cdf2:	4b43      	ldr	r3, [pc, #268]	; (800cf00 <__multiply+0x148>)
 800cdf4:	4843      	ldr	r0, [pc, #268]	; (800cf04 <__multiply+0x14c>)
 800cdf6:	f000 fdc5 	bl	800d984 <__assert_func>
 800cdfa:	f100 0514 	add.w	r5, r0, #20
 800cdfe:	462b      	mov	r3, r5
 800ce00:	2200      	movs	r2, #0
 800ce02:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ce06:	4543      	cmp	r3, r8
 800ce08:	d321      	bcc.n	800ce4e <__multiply+0x96>
 800ce0a:	f104 0314 	add.w	r3, r4, #20
 800ce0e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ce12:	f109 0314 	add.w	r3, r9, #20
 800ce16:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ce1a:	9202      	str	r2, [sp, #8]
 800ce1c:	1b3a      	subs	r2, r7, r4
 800ce1e:	3a15      	subs	r2, #21
 800ce20:	f022 0203 	bic.w	r2, r2, #3
 800ce24:	3204      	adds	r2, #4
 800ce26:	f104 0115 	add.w	r1, r4, #21
 800ce2a:	428f      	cmp	r7, r1
 800ce2c:	bf38      	it	cc
 800ce2e:	2204      	movcc	r2, #4
 800ce30:	9201      	str	r2, [sp, #4]
 800ce32:	9a02      	ldr	r2, [sp, #8]
 800ce34:	9303      	str	r3, [sp, #12]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d80c      	bhi.n	800ce54 <__multiply+0x9c>
 800ce3a:	2e00      	cmp	r6, #0
 800ce3c:	dd03      	ble.n	800ce46 <__multiply+0x8e>
 800ce3e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d059      	beq.n	800cefa <__multiply+0x142>
 800ce46:	6106      	str	r6, [r0, #16]
 800ce48:	b005      	add	sp, #20
 800ce4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce4e:	f843 2b04 	str.w	r2, [r3], #4
 800ce52:	e7d8      	b.n	800ce06 <__multiply+0x4e>
 800ce54:	f8b3 a000 	ldrh.w	sl, [r3]
 800ce58:	f1ba 0f00 	cmp.w	sl, #0
 800ce5c:	d023      	beq.n	800cea6 <__multiply+0xee>
 800ce5e:	46a9      	mov	r9, r5
 800ce60:	f04f 0c00 	mov.w	ip, #0
 800ce64:	f104 0e14 	add.w	lr, r4, #20
 800ce68:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ce6c:	f8d9 1000 	ldr.w	r1, [r9]
 800ce70:	fa1f fb82 	uxth.w	fp, r2
 800ce74:	b289      	uxth	r1, r1
 800ce76:	fb0a 110b 	mla	r1, sl, fp, r1
 800ce7a:	4461      	add	r1, ip
 800ce7c:	f8d9 c000 	ldr.w	ip, [r9]
 800ce80:	0c12      	lsrs	r2, r2, #16
 800ce82:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ce86:	fb0a c202 	mla	r2, sl, r2, ip
 800ce8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ce8e:	b289      	uxth	r1, r1
 800ce90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ce94:	4577      	cmp	r7, lr
 800ce96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ce9a:	f849 1b04 	str.w	r1, [r9], #4
 800ce9e:	d8e3      	bhi.n	800ce68 <__multiply+0xb0>
 800cea0:	9a01      	ldr	r2, [sp, #4]
 800cea2:	f845 c002 	str.w	ip, [r5, r2]
 800cea6:	9a03      	ldr	r2, [sp, #12]
 800cea8:	3304      	adds	r3, #4
 800ceaa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ceae:	f1b9 0f00 	cmp.w	r9, #0
 800ceb2:	d020      	beq.n	800cef6 <__multiply+0x13e>
 800ceb4:	46ae      	mov	lr, r5
 800ceb6:	f04f 0a00 	mov.w	sl, #0
 800ceba:	6829      	ldr	r1, [r5, #0]
 800cebc:	f104 0c14 	add.w	ip, r4, #20
 800cec0:	f8bc b000 	ldrh.w	fp, [ip]
 800cec4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cec8:	b289      	uxth	r1, r1
 800ceca:	fb09 220b 	mla	r2, r9, fp, r2
 800cece:	4492      	add	sl, r2
 800ced0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ced4:	f84e 1b04 	str.w	r1, [lr], #4
 800ced8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cedc:	f8be 1000 	ldrh.w	r1, [lr]
 800cee0:	0c12      	lsrs	r2, r2, #16
 800cee2:	fb09 1102 	mla	r1, r9, r2, r1
 800cee6:	4567      	cmp	r7, ip
 800cee8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ceec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cef0:	d8e6      	bhi.n	800cec0 <__multiply+0x108>
 800cef2:	9a01      	ldr	r2, [sp, #4]
 800cef4:	50a9      	str	r1, [r5, r2]
 800cef6:	3504      	adds	r5, #4
 800cef8:	e79b      	b.n	800ce32 <__multiply+0x7a>
 800cefa:	3e01      	subs	r6, #1
 800cefc:	e79d      	b.n	800ce3a <__multiply+0x82>
 800cefe:	bf00      	nop
 800cf00:	0800e7c0 	.word	0x0800e7c0
 800cf04:	0800e84c 	.word	0x0800e84c

0800cf08 <__pow5mult>:
 800cf08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf0c:	4615      	mov	r5, r2
 800cf0e:	f012 0203 	ands.w	r2, r2, #3
 800cf12:	4606      	mov	r6, r0
 800cf14:	460f      	mov	r7, r1
 800cf16:	d007      	beq.n	800cf28 <__pow5mult+0x20>
 800cf18:	4c25      	ldr	r4, [pc, #148]	; (800cfb0 <__pow5mult+0xa8>)
 800cf1a:	3a01      	subs	r2, #1
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf22:	f7ff fe55 	bl	800cbd0 <__multadd>
 800cf26:	4607      	mov	r7, r0
 800cf28:	10ad      	asrs	r5, r5, #2
 800cf2a:	d03d      	beq.n	800cfa8 <__pow5mult+0xa0>
 800cf2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cf2e:	b97c      	cbnz	r4, 800cf50 <__pow5mult+0x48>
 800cf30:	2010      	movs	r0, #16
 800cf32:	f7ff fdb5 	bl	800caa0 <malloc>
 800cf36:	4602      	mov	r2, r0
 800cf38:	6270      	str	r0, [r6, #36]	; 0x24
 800cf3a:	b928      	cbnz	r0, 800cf48 <__pow5mult+0x40>
 800cf3c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cf40:	4b1c      	ldr	r3, [pc, #112]	; (800cfb4 <__pow5mult+0xac>)
 800cf42:	481d      	ldr	r0, [pc, #116]	; (800cfb8 <__pow5mult+0xb0>)
 800cf44:	f000 fd1e 	bl	800d984 <__assert_func>
 800cf48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf4c:	6004      	str	r4, [r0, #0]
 800cf4e:	60c4      	str	r4, [r0, #12]
 800cf50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cf54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf58:	b94c      	cbnz	r4, 800cf6e <__pow5mult+0x66>
 800cf5a:	f240 2171 	movw	r1, #625	; 0x271
 800cf5e:	4630      	mov	r0, r6
 800cf60:	f7ff ff14 	bl	800cd8c <__i2b>
 800cf64:	2300      	movs	r3, #0
 800cf66:	4604      	mov	r4, r0
 800cf68:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf6c:	6003      	str	r3, [r0, #0]
 800cf6e:	f04f 0900 	mov.w	r9, #0
 800cf72:	07eb      	lsls	r3, r5, #31
 800cf74:	d50a      	bpl.n	800cf8c <__pow5mult+0x84>
 800cf76:	4639      	mov	r1, r7
 800cf78:	4622      	mov	r2, r4
 800cf7a:	4630      	mov	r0, r6
 800cf7c:	f7ff ff1c 	bl	800cdb8 <__multiply>
 800cf80:	4680      	mov	r8, r0
 800cf82:	4639      	mov	r1, r7
 800cf84:	4630      	mov	r0, r6
 800cf86:	f7ff fe01 	bl	800cb8c <_Bfree>
 800cf8a:	4647      	mov	r7, r8
 800cf8c:	106d      	asrs	r5, r5, #1
 800cf8e:	d00b      	beq.n	800cfa8 <__pow5mult+0xa0>
 800cf90:	6820      	ldr	r0, [r4, #0]
 800cf92:	b938      	cbnz	r0, 800cfa4 <__pow5mult+0x9c>
 800cf94:	4622      	mov	r2, r4
 800cf96:	4621      	mov	r1, r4
 800cf98:	4630      	mov	r0, r6
 800cf9a:	f7ff ff0d 	bl	800cdb8 <__multiply>
 800cf9e:	6020      	str	r0, [r4, #0]
 800cfa0:	f8c0 9000 	str.w	r9, [r0]
 800cfa4:	4604      	mov	r4, r0
 800cfa6:	e7e4      	b.n	800cf72 <__pow5mult+0x6a>
 800cfa8:	4638      	mov	r0, r7
 800cfaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfae:	bf00      	nop
 800cfb0:	0800e998 	.word	0x0800e998
 800cfb4:	0800e74e 	.word	0x0800e74e
 800cfb8:	0800e84c 	.word	0x0800e84c

0800cfbc <__lshift>:
 800cfbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfc0:	460c      	mov	r4, r1
 800cfc2:	4607      	mov	r7, r0
 800cfc4:	4691      	mov	r9, r2
 800cfc6:	6923      	ldr	r3, [r4, #16]
 800cfc8:	6849      	ldr	r1, [r1, #4]
 800cfca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cfce:	68a3      	ldr	r3, [r4, #8]
 800cfd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cfd4:	f108 0601 	add.w	r6, r8, #1
 800cfd8:	42b3      	cmp	r3, r6
 800cfda:	db0b      	blt.n	800cff4 <__lshift+0x38>
 800cfdc:	4638      	mov	r0, r7
 800cfde:	f7ff fd95 	bl	800cb0c <_Balloc>
 800cfe2:	4605      	mov	r5, r0
 800cfe4:	b948      	cbnz	r0, 800cffa <__lshift+0x3e>
 800cfe6:	4602      	mov	r2, r0
 800cfe8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cfec:	4b29      	ldr	r3, [pc, #164]	; (800d094 <__lshift+0xd8>)
 800cfee:	482a      	ldr	r0, [pc, #168]	; (800d098 <__lshift+0xdc>)
 800cff0:	f000 fcc8 	bl	800d984 <__assert_func>
 800cff4:	3101      	adds	r1, #1
 800cff6:	005b      	lsls	r3, r3, #1
 800cff8:	e7ee      	b.n	800cfd8 <__lshift+0x1c>
 800cffa:	2300      	movs	r3, #0
 800cffc:	f100 0114 	add.w	r1, r0, #20
 800d000:	f100 0210 	add.w	r2, r0, #16
 800d004:	4618      	mov	r0, r3
 800d006:	4553      	cmp	r3, sl
 800d008:	db37      	blt.n	800d07a <__lshift+0xbe>
 800d00a:	6920      	ldr	r0, [r4, #16]
 800d00c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d010:	f104 0314 	add.w	r3, r4, #20
 800d014:	f019 091f 	ands.w	r9, r9, #31
 800d018:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d01c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d020:	d02f      	beq.n	800d082 <__lshift+0xc6>
 800d022:	468a      	mov	sl, r1
 800d024:	f04f 0c00 	mov.w	ip, #0
 800d028:	f1c9 0e20 	rsb	lr, r9, #32
 800d02c:	681a      	ldr	r2, [r3, #0]
 800d02e:	fa02 f209 	lsl.w	r2, r2, r9
 800d032:	ea42 020c 	orr.w	r2, r2, ip
 800d036:	f84a 2b04 	str.w	r2, [sl], #4
 800d03a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d03e:	4298      	cmp	r0, r3
 800d040:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d044:	d8f2      	bhi.n	800d02c <__lshift+0x70>
 800d046:	1b03      	subs	r3, r0, r4
 800d048:	3b15      	subs	r3, #21
 800d04a:	f023 0303 	bic.w	r3, r3, #3
 800d04e:	3304      	adds	r3, #4
 800d050:	f104 0215 	add.w	r2, r4, #21
 800d054:	4290      	cmp	r0, r2
 800d056:	bf38      	it	cc
 800d058:	2304      	movcc	r3, #4
 800d05a:	f841 c003 	str.w	ip, [r1, r3]
 800d05e:	f1bc 0f00 	cmp.w	ip, #0
 800d062:	d001      	beq.n	800d068 <__lshift+0xac>
 800d064:	f108 0602 	add.w	r6, r8, #2
 800d068:	3e01      	subs	r6, #1
 800d06a:	4638      	mov	r0, r7
 800d06c:	4621      	mov	r1, r4
 800d06e:	612e      	str	r6, [r5, #16]
 800d070:	f7ff fd8c 	bl	800cb8c <_Bfree>
 800d074:	4628      	mov	r0, r5
 800d076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d07a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d07e:	3301      	adds	r3, #1
 800d080:	e7c1      	b.n	800d006 <__lshift+0x4a>
 800d082:	3904      	subs	r1, #4
 800d084:	f853 2b04 	ldr.w	r2, [r3], #4
 800d088:	4298      	cmp	r0, r3
 800d08a:	f841 2f04 	str.w	r2, [r1, #4]!
 800d08e:	d8f9      	bhi.n	800d084 <__lshift+0xc8>
 800d090:	e7ea      	b.n	800d068 <__lshift+0xac>
 800d092:	bf00      	nop
 800d094:	0800e7c0 	.word	0x0800e7c0
 800d098:	0800e84c 	.word	0x0800e84c

0800d09c <__mcmp>:
 800d09c:	4603      	mov	r3, r0
 800d09e:	690a      	ldr	r2, [r1, #16]
 800d0a0:	6900      	ldr	r0, [r0, #16]
 800d0a2:	b530      	push	{r4, r5, lr}
 800d0a4:	1a80      	subs	r0, r0, r2
 800d0a6:	d10d      	bne.n	800d0c4 <__mcmp+0x28>
 800d0a8:	3314      	adds	r3, #20
 800d0aa:	3114      	adds	r1, #20
 800d0ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d0b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d0b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d0b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d0bc:	4295      	cmp	r5, r2
 800d0be:	d002      	beq.n	800d0c6 <__mcmp+0x2a>
 800d0c0:	d304      	bcc.n	800d0cc <__mcmp+0x30>
 800d0c2:	2001      	movs	r0, #1
 800d0c4:	bd30      	pop	{r4, r5, pc}
 800d0c6:	42a3      	cmp	r3, r4
 800d0c8:	d3f4      	bcc.n	800d0b4 <__mcmp+0x18>
 800d0ca:	e7fb      	b.n	800d0c4 <__mcmp+0x28>
 800d0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d0d0:	e7f8      	b.n	800d0c4 <__mcmp+0x28>
	...

0800d0d4 <__mdiff>:
 800d0d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0d8:	460d      	mov	r5, r1
 800d0da:	4607      	mov	r7, r0
 800d0dc:	4611      	mov	r1, r2
 800d0de:	4628      	mov	r0, r5
 800d0e0:	4614      	mov	r4, r2
 800d0e2:	f7ff ffdb 	bl	800d09c <__mcmp>
 800d0e6:	1e06      	subs	r6, r0, #0
 800d0e8:	d111      	bne.n	800d10e <__mdiff+0x3a>
 800d0ea:	4631      	mov	r1, r6
 800d0ec:	4638      	mov	r0, r7
 800d0ee:	f7ff fd0d 	bl	800cb0c <_Balloc>
 800d0f2:	4602      	mov	r2, r0
 800d0f4:	b928      	cbnz	r0, 800d102 <__mdiff+0x2e>
 800d0f6:	f240 2132 	movw	r1, #562	; 0x232
 800d0fa:	4b3a      	ldr	r3, [pc, #232]	; (800d1e4 <__mdiff+0x110>)
 800d0fc:	483a      	ldr	r0, [pc, #232]	; (800d1e8 <__mdiff+0x114>)
 800d0fe:	f000 fc41 	bl	800d984 <__assert_func>
 800d102:	2301      	movs	r3, #1
 800d104:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d108:	4610      	mov	r0, r2
 800d10a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d10e:	bfa4      	itt	ge
 800d110:	4623      	movge	r3, r4
 800d112:	462c      	movge	r4, r5
 800d114:	4638      	mov	r0, r7
 800d116:	6861      	ldr	r1, [r4, #4]
 800d118:	bfa6      	itte	ge
 800d11a:	461d      	movge	r5, r3
 800d11c:	2600      	movge	r6, #0
 800d11e:	2601      	movlt	r6, #1
 800d120:	f7ff fcf4 	bl	800cb0c <_Balloc>
 800d124:	4602      	mov	r2, r0
 800d126:	b918      	cbnz	r0, 800d130 <__mdiff+0x5c>
 800d128:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d12c:	4b2d      	ldr	r3, [pc, #180]	; (800d1e4 <__mdiff+0x110>)
 800d12e:	e7e5      	b.n	800d0fc <__mdiff+0x28>
 800d130:	f102 0814 	add.w	r8, r2, #20
 800d134:	46c2      	mov	sl, r8
 800d136:	f04f 0c00 	mov.w	ip, #0
 800d13a:	6927      	ldr	r7, [r4, #16]
 800d13c:	60c6      	str	r6, [r0, #12]
 800d13e:	692e      	ldr	r6, [r5, #16]
 800d140:	f104 0014 	add.w	r0, r4, #20
 800d144:	f105 0914 	add.w	r9, r5, #20
 800d148:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800d14c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d150:	3410      	adds	r4, #16
 800d152:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800d156:	f859 3b04 	ldr.w	r3, [r9], #4
 800d15a:	fa1f f18b 	uxth.w	r1, fp
 800d15e:	448c      	add	ip, r1
 800d160:	b299      	uxth	r1, r3
 800d162:	0c1b      	lsrs	r3, r3, #16
 800d164:	ebac 0101 	sub.w	r1, ip, r1
 800d168:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d16c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d170:	b289      	uxth	r1, r1
 800d172:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d176:	454e      	cmp	r6, r9
 800d178:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d17c:	f84a 3b04 	str.w	r3, [sl], #4
 800d180:	d8e7      	bhi.n	800d152 <__mdiff+0x7e>
 800d182:	1b73      	subs	r3, r6, r5
 800d184:	3b15      	subs	r3, #21
 800d186:	f023 0303 	bic.w	r3, r3, #3
 800d18a:	3515      	adds	r5, #21
 800d18c:	3304      	adds	r3, #4
 800d18e:	42ae      	cmp	r6, r5
 800d190:	bf38      	it	cc
 800d192:	2304      	movcc	r3, #4
 800d194:	4418      	add	r0, r3
 800d196:	4443      	add	r3, r8
 800d198:	461e      	mov	r6, r3
 800d19a:	4605      	mov	r5, r0
 800d19c:	4575      	cmp	r5, lr
 800d19e:	d30e      	bcc.n	800d1be <__mdiff+0xea>
 800d1a0:	f10e 0103 	add.w	r1, lr, #3
 800d1a4:	1a09      	subs	r1, r1, r0
 800d1a6:	f021 0103 	bic.w	r1, r1, #3
 800d1aa:	3803      	subs	r0, #3
 800d1ac:	4586      	cmp	lr, r0
 800d1ae:	bf38      	it	cc
 800d1b0:	2100      	movcc	r1, #0
 800d1b2:	4419      	add	r1, r3
 800d1b4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d1b8:	b18b      	cbz	r3, 800d1de <__mdiff+0x10a>
 800d1ba:	6117      	str	r7, [r2, #16]
 800d1bc:	e7a4      	b.n	800d108 <__mdiff+0x34>
 800d1be:	f855 8b04 	ldr.w	r8, [r5], #4
 800d1c2:	fa1f f188 	uxth.w	r1, r8
 800d1c6:	4461      	add	r1, ip
 800d1c8:	140c      	asrs	r4, r1, #16
 800d1ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d1ce:	b289      	uxth	r1, r1
 800d1d0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d1d4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800d1d8:	f846 1b04 	str.w	r1, [r6], #4
 800d1dc:	e7de      	b.n	800d19c <__mdiff+0xc8>
 800d1de:	3f01      	subs	r7, #1
 800d1e0:	e7e8      	b.n	800d1b4 <__mdiff+0xe0>
 800d1e2:	bf00      	nop
 800d1e4:	0800e7c0 	.word	0x0800e7c0
 800d1e8:	0800e84c 	.word	0x0800e84c

0800d1ec <__ulp>:
 800d1ec:	4b11      	ldr	r3, [pc, #68]	; (800d234 <__ulp+0x48>)
 800d1ee:	400b      	ands	r3, r1
 800d1f0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	dd02      	ble.n	800d1fe <__ulp+0x12>
 800d1f8:	2000      	movs	r0, #0
 800d1fa:	4619      	mov	r1, r3
 800d1fc:	4770      	bx	lr
 800d1fe:	425b      	negs	r3, r3
 800d200:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d204:	f04f 0000 	mov.w	r0, #0
 800d208:	f04f 0100 	mov.w	r1, #0
 800d20c:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d210:	da04      	bge.n	800d21c <__ulp+0x30>
 800d212:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d216:	fa43 f102 	asr.w	r1, r3, r2
 800d21a:	4770      	bx	lr
 800d21c:	f1a2 0314 	sub.w	r3, r2, #20
 800d220:	2b1e      	cmp	r3, #30
 800d222:	bfd6      	itet	le
 800d224:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d228:	2301      	movgt	r3, #1
 800d22a:	fa22 f303 	lsrle.w	r3, r2, r3
 800d22e:	4618      	mov	r0, r3
 800d230:	4770      	bx	lr
 800d232:	bf00      	nop
 800d234:	7ff00000 	.word	0x7ff00000

0800d238 <__b2d>:
 800d238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d23c:	6907      	ldr	r7, [r0, #16]
 800d23e:	f100 0914 	add.w	r9, r0, #20
 800d242:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800d246:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800d24a:	f1a7 0804 	sub.w	r8, r7, #4
 800d24e:	4630      	mov	r0, r6
 800d250:	f7ff fd4e 	bl	800ccf0 <__hi0bits>
 800d254:	f1c0 0320 	rsb	r3, r0, #32
 800d258:	280a      	cmp	r0, #10
 800d25a:	600b      	str	r3, [r1, #0]
 800d25c:	491f      	ldr	r1, [pc, #124]	; (800d2dc <__b2d+0xa4>)
 800d25e:	dc17      	bgt.n	800d290 <__b2d+0x58>
 800d260:	45c1      	cmp	r9, r8
 800d262:	bf28      	it	cs
 800d264:	2200      	movcs	r2, #0
 800d266:	f1c0 0c0b 	rsb	ip, r0, #11
 800d26a:	fa26 f30c 	lsr.w	r3, r6, ip
 800d26e:	bf38      	it	cc
 800d270:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d274:	ea43 0501 	orr.w	r5, r3, r1
 800d278:	f100 0315 	add.w	r3, r0, #21
 800d27c:	fa06 f303 	lsl.w	r3, r6, r3
 800d280:	fa22 f20c 	lsr.w	r2, r2, ip
 800d284:	ea43 0402 	orr.w	r4, r3, r2
 800d288:	4620      	mov	r0, r4
 800d28a:	4629      	mov	r1, r5
 800d28c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d290:	45c1      	cmp	r9, r8
 800d292:	bf2e      	itee	cs
 800d294:	2200      	movcs	r2, #0
 800d296:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d29a:	f1a7 0808 	subcc.w	r8, r7, #8
 800d29e:	f1b0 030b 	subs.w	r3, r0, #11
 800d2a2:	d016      	beq.n	800d2d2 <__b2d+0x9a>
 800d2a4:	f1c3 0720 	rsb	r7, r3, #32
 800d2a8:	fa22 f107 	lsr.w	r1, r2, r7
 800d2ac:	45c8      	cmp	r8, r9
 800d2ae:	fa06 f603 	lsl.w	r6, r6, r3
 800d2b2:	ea46 0601 	orr.w	r6, r6, r1
 800d2b6:	bf94      	ite	ls
 800d2b8:	2100      	movls	r1, #0
 800d2ba:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800d2be:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800d2c2:	fa02 f003 	lsl.w	r0, r2, r3
 800d2c6:	40f9      	lsrs	r1, r7
 800d2c8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d2cc:	ea40 0401 	orr.w	r4, r0, r1
 800d2d0:	e7da      	b.n	800d288 <__b2d+0x50>
 800d2d2:	4614      	mov	r4, r2
 800d2d4:	ea46 0501 	orr.w	r5, r6, r1
 800d2d8:	e7d6      	b.n	800d288 <__b2d+0x50>
 800d2da:	bf00      	nop
 800d2dc:	3ff00000 	.word	0x3ff00000

0800d2e0 <__d2b>:
 800d2e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d2e4:	2101      	movs	r1, #1
 800d2e6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800d2ea:	4690      	mov	r8, r2
 800d2ec:	461d      	mov	r5, r3
 800d2ee:	f7ff fc0d 	bl	800cb0c <_Balloc>
 800d2f2:	4604      	mov	r4, r0
 800d2f4:	b930      	cbnz	r0, 800d304 <__d2b+0x24>
 800d2f6:	4602      	mov	r2, r0
 800d2f8:	f240 310a 	movw	r1, #778	; 0x30a
 800d2fc:	4b24      	ldr	r3, [pc, #144]	; (800d390 <__d2b+0xb0>)
 800d2fe:	4825      	ldr	r0, [pc, #148]	; (800d394 <__d2b+0xb4>)
 800d300:	f000 fb40 	bl	800d984 <__assert_func>
 800d304:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d308:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800d30c:	bb2d      	cbnz	r5, 800d35a <__d2b+0x7a>
 800d30e:	9301      	str	r3, [sp, #4]
 800d310:	f1b8 0300 	subs.w	r3, r8, #0
 800d314:	d026      	beq.n	800d364 <__d2b+0x84>
 800d316:	4668      	mov	r0, sp
 800d318:	9300      	str	r3, [sp, #0]
 800d31a:	f7ff fd09 	bl	800cd30 <__lo0bits>
 800d31e:	9900      	ldr	r1, [sp, #0]
 800d320:	b1f0      	cbz	r0, 800d360 <__d2b+0x80>
 800d322:	9a01      	ldr	r2, [sp, #4]
 800d324:	f1c0 0320 	rsb	r3, r0, #32
 800d328:	fa02 f303 	lsl.w	r3, r2, r3
 800d32c:	430b      	orrs	r3, r1
 800d32e:	40c2      	lsrs	r2, r0
 800d330:	6163      	str	r3, [r4, #20]
 800d332:	9201      	str	r2, [sp, #4]
 800d334:	9b01      	ldr	r3, [sp, #4]
 800d336:	2b00      	cmp	r3, #0
 800d338:	bf14      	ite	ne
 800d33a:	2102      	movne	r1, #2
 800d33c:	2101      	moveq	r1, #1
 800d33e:	61a3      	str	r3, [r4, #24]
 800d340:	6121      	str	r1, [r4, #16]
 800d342:	b1c5      	cbz	r5, 800d376 <__d2b+0x96>
 800d344:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d348:	4405      	add	r5, r0
 800d34a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d34e:	603d      	str	r5, [r7, #0]
 800d350:	6030      	str	r0, [r6, #0]
 800d352:	4620      	mov	r0, r4
 800d354:	b002      	add	sp, #8
 800d356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d35a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d35e:	e7d6      	b.n	800d30e <__d2b+0x2e>
 800d360:	6161      	str	r1, [r4, #20]
 800d362:	e7e7      	b.n	800d334 <__d2b+0x54>
 800d364:	a801      	add	r0, sp, #4
 800d366:	f7ff fce3 	bl	800cd30 <__lo0bits>
 800d36a:	2101      	movs	r1, #1
 800d36c:	9b01      	ldr	r3, [sp, #4]
 800d36e:	6121      	str	r1, [r4, #16]
 800d370:	6163      	str	r3, [r4, #20]
 800d372:	3020      	adds	r0, #32
 800d374:	e7e5      	b.n	800d342 <__d2b+0x62>
 800d376:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800d37a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d37e:	6038      	str	r0, [r7, #0]
 800d380:	6918      	ldr	r0, [r3, #16]
 800d382:	f7ff fcb5 	bl	800ccf0 <__hi0bits>
 800d386:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800d38a:	6031      	str	r1, [r6, #0]
 800d38c:	e7e1      	b.n	800d352 <__d2b+0x72>
 800d38e:	bf00      	nop
 800d390:	0800e7c0 	.word	0x0800e7c0
 800d394:	0800e84c 	.word	0x0800e84c

0800d398 <__ratio>:
 800d398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d39c:	4688      	mov	r8, r1
 800d39e:	4669      	mov	r1, sp
 800d3a0:	4681      	mov	r9, r0
 800d3a2:	f7ff ff49 	bl	800d238 <__b2d>
 800d3a6:	460f      	mov	r7, r1
 800d3a8:	4604      	mov	r4, r0
 800d3aa:	460d      	mov	r5, r1
 800d3ac:	4640      	mov	r0, r8
 800d3ae:	a901      	add	r1, sp, #4
 800d3b0:	f7ff ff42 	bl	800d238 <__b2d>
 800d3b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d3b8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d3bc:	468b      	mov	fp, r1
 800d3be:	eba3 0c02 	sub.w	ip, r3, r2
 800d3c2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d3c6:	1a9b      	subs	r3, r3, r2
 800d3c8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	bfd5      	itete	le
 800d3d0:	460a      	movle	r2, r1
 800d3d2:	462a      	movgt	r2, r5
 800d3d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d3d8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d3dc:	bfd8      	it	le
 800d3de:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d3e2:	465b      	mov	r3, fp
 800d3e4:	4602      	mov	r2, r0
 800d3e6:	4639      	mov	r1, r7
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	f7f3 f99f 	bl	800072c <__aeabi_ddiv>
 800d3ee:	b003      	add	sp, #12
 800d3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d3f4 <__copybits>:
 800d3f4:	3901      	subs	r1, #1
 800d3f6:	b570      	push	{r4, r5, r6, lr}
 800d3f8:	1149      	asrs	r1, r1, #5
 800d3fa:	6914      	ldr	r4, [r2, #16]
 800d3fc:	3101      	adds	r1, #1
 800d3fe:	f102 0314 	add.w	r3, r2, #20
 800d402:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d406:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d40a:	1f05      	subs	r5, r0, #4
 800d40c:	42a3      	cmp	r3, r4
 800d40e:	d30c      	bcc.n	800d42a <__copybits+0x36>
 800d410:	1aa3      	subs	r3, r4, r2
 800d412:	3b11      	subs	r3, #17
 800d414:	f023 0303 	bic.w	r3, r3, #3
 800d418:	3211      	adds	r2, #17
 800d41a:	42a2      	cmp	r2, r4
 800d41c:	bf88      	it	hi
 800d41e:	2300      	movhi	r3, #0
 800d420:	4418      	add	r0, r3
 800d422:	2300      	movs	r3, #0
 800d424:	4288      	cmp	r0, r1
 800d426:	d305      	bcc.n	800d434 <__copybits+0x40>
 800d428:	bd70      	pop	{r4, r5, r6, pc}
 800d42a:	f853 6b04 	ldr.w	r6, [r3], #4
 800d42e:	f845 6f04 	str.w	r6, [r5, #4]!
 800d432:	e7eb      	b.n	800d40c <__copybits+0x18>
 800d434:	f840 3b04 	str.w	r3, [r0], #4
 800d438:	e7f4      	b.n	800d424 <__copybits+0x30>

0800d43a <__any_on>:
 800d43a:	f100 0214 	add.w	r2, r0, #20
 800d43e:	6900      	ldr	r0, [r0, #16]
 800d440:	114b      	asrs	r3, r1, #5
 800d442:	4298      	cmp	r0, r3
 800d444:	b510      	push	{r4, lr}
 800d446:	db11      	blt.n	800d46c <__any_on+0x32>
 800d448:	dd0a      	ble.n	800d460 <__any_on+0x26>
 800d44a:	f011 011f 	ands.w	r1, r1, #31
 800d44e:	d007      	beq.n	800d460 <__any_on+0x26>
 800d450:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d454:	fa24 f001 	lsr.w	r0, r4, r1
 800d458:	fa00 f101 	lsl.w	r1, r0, r1
 800d45c:	428c      	cmp	r4, r1
 800d45e:	d10b      	bne.n	800d478 <__any_on+0x3e>
 800d460:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d464:	4293      	cmp	r3, r2
 800d466:	d803      	bhi.n	800d470 <__any_on+0x36>
 800d468:	2000      	movs	r0, #0
 800d46a:	bd10      	pop	{r4, pc}
 800d46c:	4603      	mov	r3, r0
 800d46e:	e7f7      	b.n	800d460 <__any_on+0x26>
 800d470:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d474:	2900      	cmp	r1, #0
 800d476:	d0f5      	beq.n	800d464 <__any_on+0x2a>
 800d478:	2001      	movs	r0, #1
 800d47a:	e7f6      	b.n	800d46a <__any_on+0x30>

0800d47c <_calloc_r>:
 800d47c:	b570      	push	{r4, r5, r6, lr}
 800d47e:	fba1 5402 	umull	r5, r4, r1, r2
 800d482:	b934      	cbnz	r4, 800d492 <_calloc_r+0x16>
 800d484:	4629      	mov	r1, r5
 800d486:	f000 f875 	bl	800d574 <_malloc_r>
 800d48a:	4606      	mov	r6, r0
 800d48c:	b928      	cbnz	r0, 800d49a <_calloc_r+0x1e>
 800d48e:	4630      	mov	r0, r6
 800d490:	bd70      	pop	{r4, r5, r6, pc}
 800d492:	220c      	movs	r2, #12
 800d494:	2600      	movs	r6, #0
 800d496:	6002      	str	r2, [r0, #0]
 800d498:	e7f9      	b.n	800d48e <_calloc_r+0x12>
 800d49a:	462a      	mov	r2, r5
 800d49c:	4621      	mov	r1, r4
 800d49e:	f7fc fbf3 	bl	8009c88 <memset>
 800d4a2:	e7f4      	b.n	800d48e <_calloc_r+0x12>

0800d4a4 <_free_r>:
 800d4a4:	b538      	push	{r3, r4, r5, lr}
 800d4a6:	4605      	mov	r5, r0
 800d4a8:	2900      	cmp	r1, #0
 800d4aa:	d040      	beq.n	800d52e <_free_r+0x8a>
 800d4ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4b0:	1f0c      	subs	r4, r1, #4
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	bfb8      	it	lt
 800d4b6:	18e4      	addlt	r4, r4, r3
 800d4b8:	f000 faae 	bl	800da18 <__malloc_lock>
 800d4bc:	4a1c      	ldr	r2, [pc, #112]	; (800d530 <_free_r+0x8c>)
 800d4be:	6813      	ldr	r3, [r2, #0]
 800d4c0:	b933      	cbnz	r3, 800d4d0 <_free_r+0x2c>
 800d4c2:	6063      	str	r3, [r4, #4]
 800d4c4:	6014      	str	r4, [r2, #0]
 800d4c6:	4628      	mov	r0, r5
 800d4c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4cc:	f000 baaa 	b.w	800da24 <__malloc_unlock>
 800d4d0:	42a3      	cmp	r3, r4
 800d4d2:	d908      	bls.n	800d4e6 <_free_r+0x42>
 800d4d4:	6820      	ldr	r0, [r4, #0]
 800d4d6:	1821      	adds	r1, r4, r0
 800d4d8:	428b      	cmp	r3, r1
 800d4da:	bf01      	itttt	eq
 800d4dc:	6819      	ldreq	r1, [r3, #0]
 800d4de:	685b      	ldreq	r3, [r3, #4]
 800d4e0:	1809      	addeq	r1, r1, r0
 800d4e2:	6021      	streq	r1, [r4, #0]
 800d4e4:	e7ed      	b.n	800d4c2 <_free_r+0x1e>
 800d4e6:	461a      	mov	r2, r3
 800d4e8:	685b      	ldr	r3, [r3, #4]
 800d4ea:	b10b      	cbz	r3, 800d4f0 <_free_r+0x4c>
 800d4ec:	42a3      	cmp	r3, r4
 800d4ee:	d9fa      	bls.n	800d4e6 <_free_r+0x42>
 800d4f0:	6811      	ldr	r1, [r2, #0]
 800d4f2:	1850      	adds	r0, r2, r1
 800d4f4:	42a0      	cmp	r0, r4
 800d4f6:	d10b      	bne.n	800d510 <_free_r+0x6c>
 800d4f8:	6820      	ldr	r0, [r4, #0]
 800d4fa:	4401      	add	r1, r0
 800d4fc:	1850      	adds	r0, r2, r1
 800d4fe:	4283      	cmp	r3, r0
 800d500:	6011      	str	r1, [r2, #0]
 800d502:	d1e0      	bne.n	800d4c6 <_free_r+0x22>
 800d504:	6818      	ldr	r0, [r3, #0]
 800d506:	685b      	ldr	r3, [r3, #4]
 800d508:	4401      	add	r1, r0
 800d50a:	6011      	str	r1, [r2, #0]
 800d50c:	6053      	str	r3, [r2, #4]
 800d50e:	e7da      	b.n	800d4c6 <_free_r+0x22>
 800d510:	d902      	bls.n	800d518 <_free_r+0x74>
 800d512:	230c      	movs	r3, #12
 800d514:	602b      	str	r3, [r5, #0]
 800d516:	e7d6      	b.n	800d4c6 <_free_r+0x22>
 800d518:	6820      	ldr	r0, [r4, #0]
 800d51a:	1821      	adds	r1, r4, r0
 800d51c:	428b      	cmp	r3, r1
 800d51e:	bf01      	itttt	eq
 800d520:	6819      	ldreq	r1, [r3, #0]
 800d522:	685b      	ldreq	r3, [r3, #4]
 800d524:	1809      	addeq	r1, r1, r0
 800d526:	6021      	streq	r1, [r4, #0]
 800d528:	6063      	str	r3, [r4, #4]
 800d52a:	6054      	str	r4, [r2, #4]
 800d52c:	e7cb      	b.n	800d4c6 <_free_r+0x22>
 800d52e:	bd38      	pop	{r3, r4, r5, pc}
 800d530:	200019b0 	.word	0x200019b0

0800d534 <sbrk_aligned>:
 800d534:	b570      	push	{r4, r5, r6, lr}
 800d536:	4e0e      	ldr	r6, [pc, #56]	; (800d570 <sbrk_aligned+0x3c>)
 800d538:	460c      	mov	r4, r1
 800d53a:	6831      	ldr	r1, [r6, #0]
 800d53c:	4605      	mov	r5, r0
 800d53e:	b911      	cbnz	r1, 800d546 <sbrk_aligned+0x12>
 800d540:	f000 f9ee 	bl	800d920 <_sbrk_r>
 800d544:	6030      	str	r0, [r6, #0]
 800d546:	4621      	mov	r1, r4
 800d548:	4628      	mov	r0, r5
 800d54a:	f000 f9e9 	bl	800d920 <_sbrk_r>
 800d54e:	1c43      	adds	r3, r0, #1
 800d550:	d00a      	beq.n	800d568 <sbrk_aligned+0x34>
 800d552:	1cc4      	adds	r4, r0, #3
 800d554:	f024 0403 	bic.w	r4, r4, #3
 800d558:	42a0      	cmp	r0, r4
 800d55a:	d007      	beq.n	800d56c <sbrk_aligned+0x38>
 800d55c:	1a21      	subs	r1, r4, r0
 800d55e:	4628      	mov	r0, r5
 800d560:	f000 f9de 	bl	800d920 <_sbrk_r>
 800d564:	3001      	adds	r0, #1
 800d566:	d101      	bne.n	800d56c <sbrk_aligned+0x38>
 800d568:	f04f 34ff 	mov.w	r4, #4294967295
 800d56c:	4620      	mov	r0, r4
 800d56e:	bd70      	pop	{r4, r5, r6, pc}
 800d570:	200019b4 	.word	0x200019b4

0800d574 <_malloc_r>:
 800d574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d578:	1ccd      	adds	r5, r1, #3
 800d57a:	f025 0503 	bic.w	r5, r5, #3
 800d57e:	3508      	adds	r5, #8
 800d580:	2d0c      	cmp	r5, #12
 800d582:	bf38      	it	cc
 800d584:	250c      	movcc	r5, #12
 800d586:	2d00      	cmp	r5, #0
 800d588:	4607      	mov	r7, r0
 800d58a:	db01      	blt.n	800d590 <_malloc_r+0x1c>
 800d58c:	42a9      	cmp	r1, r5
 800d58e:	d905      	bls.n	800d59c <_malloc_r+0x28>
 800d590:	230c      	movs	r3, #12
 800d592:	2600      	movs	r6, #0
 800d594:	603b      	str	r3, [r7, #0]
 800d596:	4630      	mov	r0, r6
 800d598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d59c:	4e2e      	ldr	r6, [pc, #184]	; (800d658 <_malloc_r+0xe4>)
 800d59e:	f000 fa3b 	bl	800da18 <__malloc_lock>
 800d5a2:	6833      	ldr	r3, [r6, #0]
 800d5a4:	461c      	mov	r4, r3
 800d5a6:	bb34      	cbnz	r4, 800d5f6 <_malloc_r+0x82>
 800d5a8:	4629      	mov	r1, r5
 800d5aa:	4638      	mov	r0, r7
 800d5ac:	f7ff ffc2 	bl	800d534 <sbrk_aligned>
 800d5b0:	1c43      	adds	r3, r0, #1
 800d5b2:	4604      	mov	r4, r0
 800d5b4:	d14d      	bne.n	800d652 <_malloc_r+0xde>
 800d5b6:	6834      	ldr	r4, [r6, #0]
 800d5b8:	4626      	mov	r6, r4
 800d5ba:	2e00      	cmp	r6, #0
 800d5bc:	d140      	bne.n	800d640 <_malloc_r+0xcc>
 800d5be:	6823      	ldr	r3, [r4, #0]
 800d5c0:	4631      	mov	r1, r6
 800d5c2:	4638      	mov	r0, r7
 800d5c4:	eb04 0803 	add.w	r8, r4, r3
 800d5c8:	f000 f9aa 	bl	800d920 <_sbrk_r>
 800d5cc:	4580      	cmp	r8, r0
 800d5ce:	d13a      	bne.n	800d646 <_malloc_r+0xd2>
 800d5d0:	6821      	ldr	r1, [r4, #0]
 800d5d2:	3503      	adds	r5, #3
 800d5d4:	1a6d      	subs	r5, r5, r1
 800d5d6:	f025 0503 	bic.w	r5, r5, #3
 800d5da:	3508      	adds	r5, #8
 800d5dc:	2d0c      	cmp	r5, #12
 800d5de:	bf38      	it	cc
 800d5e0:	250c      	movcc	r5, #12
 800d5e2:	4638      	mov	r0, r7
 800d5e4:	4629      	mov	r1, r5
 800d5e6:	f7ff ffa5 	bl	800d534 <sbrk_aligned>
 800d5ea:	3001      	adds	r0, #1
 800d5ec:	d02b      	beq.n	800d646 <_malloc_r+0xd2>
 800d5ee:	6823      	ldr	r3, [r4, #0]
 800d5f0:	442b      	add	r3, r5
 800d5f2:	6023      	str	r3, [r4, #0]
 800d5f4:	e00e      	b.n	800d614 <_malloc_r+0xa0>
 800d5f6:	6822      	ldr	r2, [r4, #0]
 800d5f8:	1b52      	subs	r2, r2, r5
 800d5fa:	d41e      	bmi.n	800d63a <_malloc_r+0xc6>
 800d5fc:	2a0b      	cmp	r2, #11
 800d5fe:	d916      	bls.n	800d62e <_malloc_r+0xba>
 800d600:	1961      	adds	r1, r4, r5
 800d602:	42a3      	cmp	r3, r4
 800d604:	6025      	str	r5, [r4, #0]
 800d606:	bf18      	it	ne
 800d608:	6059      	strne	r1, [r3, #4]
 800d60a:	6863      	ldr	r3, [r4, #4]
 800d60c:	bf08      	it	eq
 800d60e:	6031      	streq	r1, [r6, #0]
 800d610:	5162      	str	r2, [r4, r5]
 800d612:	604b      	str	r3, [r1, #4]
 800d614:	4638      	mov	r0, r7
 800d616:	f104 060b 	add.w	r6, r4, #11
 800d61a:	f000 fa03 	bl	800da24 <__malloc_unlock>
 800d61e:	f026 0607 	bic.w	r6, r6, #7
 800d622:	1d23      	adds	r3, r4, #4
 800d624:	1af2      	subs	r2, r6, r3
 800d626:	d0b6      	beq.n	800d596 <_malloc_r+0x22>
 800d628:	1b9b      	subs	r3, r3, r6
 800d62a:	50a3      	str	r3, [r4, r2]
 800d62c:	e7b3      	b.n	800d596 <_malloc_r+0x22>
 800d62e:	6862      	ldr	r2, [r4, #4]
 800d630:	42a3      	cmp	r3, r4
 800d632:	bf0c      	ite	eq
 800d634:	6032      	streq	r2, [r6, #0]
 800d636:	605a      	strne	r2, [r3, #4]
 800d638:	e7ec      	b.n	800d614 <_malloc_r+0xa0>
 800d63a:	4623      	mov	r3, r4
 800d63c:	6864      	ldr	r4, [r4, #4]
 800d63e:	e7b2      	b.n	800d5a6 <_malloc_r+0x32>
 800d640:	4634      	mov	r4, r6
 800d642:	6876      	ldr	r6, [r6, #4]
 800d644:	e7b9      	b.n	800d5ba <_malloc_r+0x46>
 800d646:	230c      	movs	r3, #12
 800d648:	4638      	mov	r0, r7
 800d64a:	603b      	str	r3, [r7, #0]
 800d64c:	f000 f9ea 	bl	800da24 <__malloc_unlock>
 800d650:	e7a1      	b.n	800d596 <_malloc_r+0x22>
 800d652:	6025      	str	r5, [r4, #0]
 800d654:	e7de      	b.n	800d614 <_malloc_r+0xa0>
 800d656:	bf00      	nop
 800d658:	200019b0 	.word	0x200019b0

0800d65c <__ssputs_r>:
 800d65c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d660:	688e      	ldr	r6, [r1, #8]
 800d662:	4682      	mov	sl, r0
 800d664:	429e      	cmp	r6, r3
 800d666:	460c      	mov	r4, r1
 800d668:	4690      	mov	r8, r2
 800d66a:	461f      	mov	r7, r3
 800d66c:	d838      	bhi.n	800d6e0 <__ssputs_r+0x84>
 800d66e:	898a      	ldrh	r2, [r1, #12]
 800d670:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d674:	d032      	beq.n	800d6dc <__ssputs_r+0x80>
 800d676:	6825      	ldr	r5, [r4, #0]
 800d678:	6909      	ldr	r1, [r1, #16]
 800d67a:	3301      	adds	r3, #1
 800d67c:	eba5 0901 	sub.w	r9, r5, r1
 800d680:	6965      	ldr	r5, [r4, #20]
 800d682:	444b      	add	r3, r9
 800d684:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d688:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d68c:	106d      	asrs	r5, r5, #1
 800d68e:	429d      	cmp	r5, r3
 800d690:	bf38      	it	cc
 800d692:	461d      	movcc	r5, r3
 800d694:	0553      	lsls	r3, r2, #21
 800d696:	d531      	bpl.n	800d6fc <__ssputs_r+0xa0>
 800d698:	4629      	mov	r1, r5
 800d69a:	f7ff ff6b 	bl	800d574 <_malloc_r>
 800d69e:	4606      	mov	r6, r0
 800d6a0:	b950      	cbnz	r0, 800d6b8 <__ssputs_r+0x5c>
 800d6a2:	230c      	movs	r3, #12
 800d6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d6a8:	f8ca 3000 	str.w	r3, [sl]
 800d6ac:	89a3      	ldrh	r3, [r4, #12]
 800d6ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6b2:	81a3      	strh	r3, [r4, #12]
 800d6b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6b8:	464a      	mov	r2, r9
 800d6ba:	6921      	ldr	r1, [r4, #16]
 800d6bc:	f7ff fa18 	bl	800caf0 <memcpy>
 800d6c0:	89a3      	ldrh	r3, [r4, #12]
 800d6c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d6c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6ca:	81a3      	strh	r3, [r4, #12]
 800d6cc:	6126      	str	r6, [r4, #16]
 800d6ce:	444e      	add	r6, r9
 800d6d0:	6026      	str	r6, [r4, #0]
 800d6d2:	463e      	mov	r6, r7
 800d6d4:	6165      	str	r5, [r4, #20]
 800d6d6:	eba5 0509 	sub.w	r5, r5, r9
 800d6da:	60a5      	str	r5, [r4, #8]
 800d6dc:	42be      	cmp	r6, r7
 800d6de:	d900      	bls.n	800d6e2 <__ssputs_r+0x86>
 800d6e0:	463e      	mov	r6, r7
 800d6e2:	4632      	mov	r2, r6
 800d6e4:	4641      	mov	r1, r8
 800d6e6:	6820      	ldr	r0, [r4, #0]
 800d6e8:	f000 f97c 	bl	800d9e4 <memmove>
 800d6ec:	68a3      	ldr	r3, [r4, #8]
 800d6ee:	2000      	movs	r0, #0
 800d6f0:	1b9b      	subs	r3, r3, r6
 800d6f2:	60a3      	str	r3, [r4, #8]
 800d6f4:	6823      	ldr	r3, [r4, #0]
 800d6f6:	4433      	add	r3, r6
 800d6f8:	6023      	str	r3, [r4, #0]
 800d6fa:	e7db      	b.n	800d6b4 <__ssputs_r+0x58>
 800d6fc:	462a      	mov	r2, r5
 800d6fe:	f000 f997 	bl	800da30 <_realloc_r>
 800d702:	4606      	mov	r6, r0
 800d704:	2800      	cmp	r0, #0
 800d706:	d1e1      	bne.n	800d6cc <__ssputs_r+0x70>
 800d708:	4650      	mov	r0, sl
 800d70a:	6921      	ldr	r1, [r4, #16]
 800d70c:	f7ff feca 	bl	800d4a4 <_free_r>
 800d710:	e7c7      	b.n	800d6a2 <__ssputs_r+0x46>
	...

0800d714 <_svfiprintf_r>:
 800d714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d718:	4698      	mov	r8, r3
 800d71a:	898b      	ldrh	r3, [r1, #12]
 800d71c:	4607      	mov	r7, r0
 800d71e:	061b      	lsls	r3, r3, #24
 800d720:	460d      	mov	r5, r1
 800d722:	4614      	mov	r4, r2
 800d724:	b09d      	sub	sp, #116	; 0x74
 800d726:	d50e      	bpl.n	800d746 <_svfiprintf_r+0x32>
 800d728:	690b      	ldr	r3, [r1, #16]
 800d72a:	b963      	cbnz	r3, 800d746 <_svfiprintf_r+0x32>
 800d72c:	2140      	movs	r1, #64	; 0x40
 800d72e:	f7ff ff21 	bl	800d574 <_malloc_r>
 800d732:	6028      	str	r0, [r5, #0]
 800d734:	6128      	str	r0, [r5, #16]
 800d736:	b920      	cbnz	r0, 800d742 <_svfiprintf_r+0x2e>
 800d738:	230c      	movs	r3, #12
 800d73a:	603b      	str	r3, [r7, #0]
 800d73c:	f04f 30ff 	mov.w	r0, #4294967295
 800d740:	e0d1      	b.n	800d8e6 <_svfiprintf_r+0x1d2>
 800d742:	2340      	movs	r3, #64	; 0x40
 800d744:	616b      	str	r3, [r5, #20]
 800d746:	2300      	movs	r3, #0
 800d748:	9309      	str	r3, [sp, #36]	; 0x24
 800d74a:	2320      	movs	r3, #32
 800d74c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d750:	2330      	movs	r3, #48	; 0x30
 800d752:	f04f 0901 	mov.w	r9, #1
 800d756:	f8cd 800c 	str.w	r8, [sp, #12]
 800d75a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d900 <_svfiprintf_r+0x1ec>
 800d75e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d762:	4623      	mov	r3, r4
 800d764:	469a      	mov	sl, r3
 800d766:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d76a:	b10a      	cbz	r2, 800d770 <_svfiprintf_r+0x5c>
 800d76c:	2a25      	cmp	r2, #37	; 0x25
 800d76e:	d1f9      	bne.n	800d764 <_svfiprintf_r+0x50>
 800d770:	ebba 0b04 	subs.w	fp, sl, r4
 800d774:	d00b      	beq.n	800d78e <_svfiprintf_r+0x7a>
 800d776:	465b      	mov	r3, fp
 800d778:	4622      	mov	r2, r4
 800d77a:	4629      	mov	r1, r5
 800d77c:	4638      	mov	r0, r7
 800d77e:	f7ff ff6d 	bl	800d65c <__ssputs_r>
 800d782:	3001      	adds	r0, #1
 800d784:	f000 80aa 	beq.w	800d8dc <_svfiprintf_r+0x1c8>
 800d788:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d78a:	445a      	add	r2, fp
 800d78c:	9209      	str	r2, [sp, #36]	; 0x24
 800d78e:	f89a 3000 	ldrb.w	r3, [sl]
 800d792:	2b00      	cmp	r3, #0
 800d794:	f000 80a2 	beq.w	800d8dc <_svfiprintf_r+0x1c8>
 800d798:	2300      	movs	r3, #0
 800d79a:	f04f 32ff 	mov.w	r2, #4294967295
 800d79e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7a2:	f10a 0a01 	add.w	sl, sl, #1
 800d7a6:	9304      	str	r3, [sp, #16]
 800d7a8:	9307      	str	r3, [sp, #28]
 800d7aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d7ae:	931a      	str	r3, [sp, #104]	; 0x68
 800d7b0:	4654      	mov	r4, sl
 800d7b2:	2205      	movs	r2, #5
 800d7b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7b8:	4851      	ldr	r0, [pc, #324]	; (800d900 <_svfiprintf_r+0x1ec>)
 800d7ba:	f7ff f98b 	bl	800cad4 <memchr>
 800d7be:	9a04      	ldr	r2, [sp, #16]
 800d7c0:	b9d8      	cbnz	r0, 800d7fa <_svfiprintf_r+0xe6>
 800d7c2:	06d0      	lsls	r0, r2, #27
 800d7c4:	bf44      	itt	mi
 800d7c6:	2320      	movmi	r3, #32
 800d7c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7cc:	0711      	lsls	r1, r2, #28
 800d7ce:	bf44      	itt	mi
 800d7d0:	232b      	movmi	r3, #43	; 0x2b
 800d7d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7d6:	f89a 3000 	ldrb.w	r3, [sl]
 800d7da:	2b2a      	cmp	r3, #42	; 0x2a
 800d7dc:	d015      	beq.n	800d80a <_svfiprintf_r+0xf6>
 800d7de:	4654      	mov	r4, sl
 800d7e0:	2000      	movs	r0, #0
 800d7e2:	f04f 0c0a 	mov.w	ip, #10
 800d7e6:	9a07      	ldr	r2, [sp, #28]
 800d7e8:	4621      	mov	r1, r4
 800d7ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7ee:	3b30      	subs	r3, #48	; 0x30
 800d7f0:	2b09      	cmp	r3, #9
 800d7f2:	d94e      	bls.n	800d892 <_svfiprintf_r+0x17e>
 800d7f4:	b1b0      	cbz	r0, 800d824 <_svfiprintf_r+0x110>
 800d7f6:	9207      	str	r2, [sp, #28]
 800d7f8:	e014      	b.n	800d824 <_svfiprintf_r+0x110>
 800d7fa:	eba0 0308 	sub.w	r3, r0, r8
 800d7fe:	fa09 f303 	lsl.w	r3, r9, r3
 800d802:	4313      	orrs	r3, r2
 800d804:	46a2      	mov	sl, r4
 800d806:	9304      	str	r3, [sp, #16]
 800d808:	e7d2      	b.n	800d7b0 <_svfiprintf_r+0x9c>
 800d80a:	9b03      	ldr	r3, [sp, #12]
 800d80c:	1d19      	adds	r1, r3, #4
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	9103      	str	r1, [sp, #12]
 800d812:	2b00      	cmp	r3, #0
 800d814:	bfbb      	ittet	lt
 800d816:	425b      	neglt	r3, r3
 800d818:	f042 0202 	orrlt.w	r2, r2, #2
 800d81c:	9307      	strge	r3, [sp, #28]
 800d81e:	9307      	strlt	r3, [sp, #28]
 800d820:	bfb8      	it	lt
 800d822:	9204      	strlt	r2, [sp, #16]
 800d824:	7823      	ldrb	r3, [r4, #0]
 800d826:	2b2e      	cmp	r3, #46	; 0x2e
 800d828:	d10c      	bne.n	800d844 <_svfiprintf_r+0x130>
 800d82a:	7863      	ldrb	r3, [r4, #1]
 800d82c:	2b2a      	cmp	r3, #42	; 0x2a
 800d82e:	d135      	bne.n	800d89c <_svfiprintf_r+0x188>
 800d830:	9b03      	ldr	r3, [sp, #12]
 800d832:	3402      	adds	r4, #2
 800d834:	1d1a      	adds	r2, r3, #4
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	9203      	str	r2, [sp, #12]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	bfb8      	it	lt
 800d83e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d842:	9305      	str	r3, [sp, #20]
 800d844:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d904 <_svfiprintf_r+0x1f0>
 800d848:	2203      	movs	r2, #3
 800d84a:	4650      	mov	r0, sl
 800d84c:	7821      	ldrb	r1, [r4, #0]
 800d84e:	f7ff f941 	bl	800cad4 <memchr>
 800d852:	b140      	cbz	r0, 800d866 <_svfiprintf_r+0x152>
 800d854:	2340      	movs	r3, #64	; 0x40
 800d856:	eba0 000a 	sub.w	r0, r0, sl
 800d85a:	fa03 f000 	lsl.w	r0, r3, r0
 800d85e:	9b04      	ldr	r3, [sp, #16]
 800d860:	3401      	adds	r4, #1
 800d862:	4303      	orrs	r3, r0
 800d864:	9304      	str	r3, [sp, #16]
 800d866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d86a:	2206      	movs	r2, #6
 800d86c:	4826      	ldr	r0, [pc, #152]	; (800d908 <_svfiprintf_r+0x1f4>)
 800d86e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d872:	f7ff f92f 	bl	800cad4 <memchr>
 800d876:	2800      	cmp	r0, #0
 800d878:	d038      	beq.n	800d8ec <_svfiprintf_r+0x1d8>
 800d87a:	4b24      	ldr	r3, [pc, #144]	; (800d90c <_svfiprintf_r+0x1f8>)
 800d87c:	bb1b      	cbnz	r3, 800d8c6 <_svfiprintf_r+0x1b2>
 800d87e:	9b03      	ldr	r3, [sp, #12]
 800d880:	3307      	adds	r3, #7
 800d882:	f023 0307 	bic.w	r3, r3, #7
 800d886:	3308      	adds	r3, #8
 800d888:	9303      	str	r3, [sp, #12]
 800d88a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d88c:	4433      	add	r3, r6
 800d88e:	9309      	str	r3, [sp, #36]	; 0x24
 800d890:	e767      	b.n	800d762 <_svfiprintf_r+0x4e>
 800d892:	460c      	mov	r4, r1
 800d894:	2001      	movs	r0, #1
 800d896:	fb0c 3202 	mla	r2, ip, r2, r3
 800d89a:	e7a5      	b.n	800d7e8 <_svfiprintf_r+0xd4>
 800d89c:	2300      	movs	r3, #0
 800d89e:	f04f 0c0a 	mov.w	ip, #10
 800d8a2:	4619      	mov	r1, r3
 800d8a4:	3401      	adds	r4, #1
 800d8a6:	9305      	str	r3, [sp, #20]
 800d8a8:	4620      	mov	r0, r4
 800d8aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8ae:	3a30      	subs	r2, #48	; 0x30
 800d8b0:	2a09      	cmp	r2, #9
 800d8b2:	d903      	bls.n	800d8bc <_svfiprintf_r+0x1a8>
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d0c5      	beq.n	800d844 <_svfiprintf_r+0x130>
 800d8b8:	9105      	str	r1, [sp, #20]
 800d8ba:	e7c3      	b.n	800d844 <_svfiprintf_r+0x130>
 800d8bc:	4604      	mov	r4, r0
 800d8be:	2301      	movs	r3, #1
 800d8c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8c4:	e7f0      	b.n	800d8a8 <_svfiprintf_r+0x194>
 800d8c6:	ab03      	add	r3, sp, #12
 800d8c8:	9300      	str	r3, [sp, #0]
 800d8ca:	462a      	mov	r2, r5
 800d8cc:	4638      	mov	r0, r7
 800d8ce:	4b10      	ldr	r3, [pc, #64]	; (800d910 <_svfiprintf_r+0x1fc>)
 800d8d0:	a904      	add	r1, sp, #16
 800d8d2:	f7fc fa7f 	bl	8009dd4 <_printf_float>
 800d8d6:	1c42      	adds	r2, r0, #1
 800d8d8:	4606      	mov	r6, r0
 800d8da:	d1d6      	bne.n	800d88a <_svfiprintf_r+0x176>
 800d8dc:	89ab      	ldrh	r3, [r5, #12]
 800d8de:	065b      	lsls	r3, r3, #25
 800d8e0:	f53f af2c 	bmi.w	800d73c <_svfiprintf_r+0x28>
 800d8e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8e6:	b01d      	add	sp, #116	; 0x74
 800d8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ec:	ab03      	add	r3, sp, #12
 800d8ee:	9300      	str	r3, [sp, #0]
 800d8f0:	462a      	mov	r2, r5
 800d8f2:	4638      	mov	r0, r7
 800d8f4:	4b06      	ldr	r3, [pc, #24]	; (800d910 <_svfiprintf_r+0x1fc>)
 800d8f6:	a904      	add	r1, sp, #16
 800d8f8:	f7fc fd08 	bl	800a30c <_printf_i>
 800d8fc:	e7eb      	b.n	800d8d6 <_svfiprintf_r+0x1c2>
 800d8fe:	bf00      	nop
 800d900:	0800e9a4 	.word	0x0800e9a4
 800d904:	0800e9aa 	.word	0x0800e9aa
 800d908:	0800e9ae 	.word	0x0800e9ae
 800d90c:	08009dd5 	.word	0x08009dd5
 800d910:	0800d65d 	.word	0x0800d65d

0800d914 <nan>:
 800d914:	2000      	movs	r0, #0
 800d916:	4901      	ldr	r1, [pc, #4]	; (800d91c <nan+0x8>)
 800d918:	4770      	bx	lr
 800d91a:	bf00      	nop
 800d91c:	7ff80000 	.word	0x7ff80000

0800d920 <_sbrk_r>:
 800d920:	b538      	push	{r3, r4, r5, lr}
 800d922:	2300      	movs	r3, #0
 800d924:	4d05      	ldr	r5, [pc, #20]	; (800d93c <_sbrk_r+0x1c>)
 800d926:	4604      	mov	r4, r0
 800d928:	4608      	mov	r0, r1
 800d92a:	602b      	str	r3, [r5, #0]
 800d92c:	f7f3 ffe6 	bl	80018fc <_sbrk>
 800d930:	1c43      	adds	r3, r0, #1
 800d932:	d102      	bne.n	800d93a <_sbrk_r+0x1a>
 800d934:	682b      	ldr	r3, [r5, #0]
 800d936:	b103      	cbz	r3, 800d93a <_sbrk_r+0x1a>
 800d938:	6023      	str	r3, [r4, #0]
 800d93a:	bd38      	pop	{r3, r4, r5, pc}
 800d93c:	200019b8 	.word	0x200019b8

0800d940 <strncmp>:
 800d940:	4603      	mov	r3, r0
 800d942:	b510      	push	{r4, lr}
 800d944:	b172      	cbz	r2, 800d964 <strncmp+0x24>
 800d946:	3901      	subs	r1, #1
 800d948:	1884      	adds	r4, r0, r2
 800d94a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d94e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d952:	4290      	cmp	r0, r2
 800d954:	d101      	bne.n	800d95a <strncmp+0x1a>
 800d956:	42a3      	cmp	r3, r4
 800d958:	d101      	bne.n	800d95e <strncmp+0x1e>
 800d95a:	1a80      	subs	r0, r0, r2
 800d95c:	bd10      	pop	{r4, pc}
 800d95e:	2800      	cmp	r0, #0
 800d960:	d1f3      	bne.n	800d94a <strncmp+0xa>
 800d962:	e7fa      	b.n	800d95a <strncmp+0x1a>
 800d964:	4610      	mov	r0, r2
 800d966:	e7f9      	b.n	800d95c <strncmp+0x1c>

0800d968 <__ascii_wctomb>:
 800d968:	4603      	mov	r3, r0
 800d96a:	4608      	mov	r0, r1
 800d96c:	b141      	cbz	r1, 800d980 <__ascii_wctomb+0x18>
 800d96e:	2aff      	cmp	r2, #255	; 0xff
 800d970:	d904      	bls.n	800d97c <__ascii_wctomb+0x14>
 800d972:	228a      	movs	r2, #138	; 0x8a
 800d974:	f04f 30ff 	mov.w	r0, #4294967295
 800d978:	601a      	str	r2, [r3, #0]
 800d97a:	4770      	bx	lr
 800d97c:	2001      	movs	r0, #1
 800d97e:	700a      	strb	r2, [r1, #0]
 800d980:	4770      	bx	lr
	...

0800d984 <__assert_func>:
 800d984:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d986:	4614      	mov	r4, r2
 800d988:	461a      	mov	r2, r3
 800d98a:	4b09      	ldr	r3, [pc, #36]	; (800d9b0 <__assert_func+0x2c>)
 800d98c:	4605      	mov	r5, r0
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	68d8      	ldr	r0, [r3, #12]
 800d992:	b14c      	cbz	r4, 800d9a8 <__assert_func+0x24>
 800d994:	4b07      	ldr	r3, [pc, #28]	; (800d9b4 <__assert_func+0x30>)
 800d996:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d99a:	9100      	str	r1, [sp, #0]
 800d99c:	462b      	mov	r3, r5
 800d99e:	4906      	ldr	r1, [pc, #24]	; (800d9b8 <__assert_func+0x34>)
 800d9a0:	f000 f80e 	bl	800d9c0 <fiprintf>
 800d9a4:	f000 fa8a 	bl	800debc <abort>
 800d9a8:	4b04      	ldr	r3, [pc, #16]	; (800d9bc <__assert_func+0x38>)
 800d9aa:	461c      	mov	r4, r3
 800d9ac:	e7f3      	b.n	800d996 <__assert_func+0x12>
 800d9ae:	bf00      	nop
 800d9b0:	2000017c 	.word	0x2000017c
 800d9b4:	0800e9b5 	.word	0x0800e9b5
 800d9b8:	0800e9c2 	.word	0x0800e9c2
 800d9bc:	0800e9f0 	.word	0x0800e9f0

0800d9c0 <fiprintf>:
 800d9c0:	b40e      	push	{r1, r2, r3}
 800d9c2:	b503      	push	{r0, r1, lr}
 800d9c4:	4601      	mov	r1, r0
 800d9c6:	ab03      	add	r3, sp, #12
 800d9c8:	4805      	ldr	r0, [pc, #20]	; (800d9e0 <fiprintf+0x20>)
 800d9ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9ce:	6800      	ldr	r0, [r0, #0]
 800d9d0:	9301      	str	r3, [sp, #4]
 800d9d2:	f000 f883 	bl	800dadc <_vfiprintf_r>
 800d9d6:	b002      	add	sp, #8
 800d9d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d9dc:	b003      	add	sp, #12
 800d9de:	4770      	bx	lr
 800d9e0:	2000017c 	.word	0x2000017c

0800d9e4 <memmove>:
 800d9e4:	4288      	cmp	r0, r1
 800d9e6:	b510      	push	{r4, lr}
 800d9e8:	eb01 0402 	add.w	r4, r1, r2
 800d9ec:	d902      	bls.n	800d9f4 <memmove+0x10>
 800d9ee:	4284      	cmp	r4, r0
 800d9f0:	4623      	mov	r3, r4
 800d9f2:	d807      	bhi.n	800da04 <memmove+0x20>
 800d9f4:	1e43      	subs	r3, r0, #1
 800d9f6:	42a1      	cmp	r1, r4
 800d9f8:	d008      	beq.n	800da0c <memmove+0x28>
 800d9fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d9fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800da02:	e7f8      	b.n	800d9f6 <memmove+0x12>
 800da04:	4601      	mov	r1, r0
 800da06:	4402      	add	r2, r0
 800da08:	428a      	cmp	r2, r1
 800da0a:	d100      	bne.n	800da0e <memmove+0x2a>
 800da0c:	bd10      	pop	{r4, pc}
 800da0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800da16:	e7f7      	b.n	800da08 <memmove+0x24>

0800da18 <__malloc_lock>:
 800da18:	4801      	ldr	r0, [pc, #4]	; (800da20 <__malloc_lock+0x8>)
 800da1a:	f000 bc0b 	b.w	800e234 <__retarget_lock_acquire_recursive>
 800da1e:	bf00      	nop
 800da20:	200019bc 	.word	0x200019bc

0800da24 <__malloc_unlock>:
 800da24:	4801      	ldr	r0, [pc, #4]	; (800da2c <__malloc_unlock+0x8>)
 800da26:	f000 bc06 	b.w	800e236 <__retarget_lock_release_recursive>
 800da2a:	bf00      	nop
 800da2c:	200019bc 	.word	0x200019bc

0800da30 <_realloc_r>:
 800da30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da34:	4680      	mov	r8, r0
 800da36:	4614      	mov	r4, r2
 800da38:	460e      	mov	r6, r1
 800da3a:	b921      	cbnz	r1, 800da46 <_realloc_r+0x16>
 800da3c:	4611      	mov	r1, r2
 800da3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da42:	f7ff bd97 	b.w	800d574 <_malloc_r>
 800da46:	b92a      	cbnz	r2, 800da54 <_realloc_r+0x24>
 800da48:	f7ff fd2c 	bl	800d4a4 <_free_r>
 800da4c:	4625      	mov	r5, r4
 800da4e:	4628      	mov	r0, r5
 800da50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da54:	f000 fc56 	bl	800e304 <_malloc_usable_size_r>
 800da58:	4284      	cmp	r4, r0
 800da5a:	4607      	mov	r7, r0
 800da5c:	d802      	bhi.n	800da64 <_realloc_r+0x34>
 800da5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800da62:	d812      	bhi.n	800da8a <_realloc_r+0x5a>
 800da64:	4621      	mov	r1, r4
 800da66:	4640      	mov	r0, r8
 800da68:	f7ff fd84 	bl	800d574 <_malloc_r>
 800da6c:	4605      	mov	r5, r0
 800da6e:	2800      	cmp	r0, #0
 800da70:	d0ed      	beq.n	800da4e <_realloc_r+0x1e>
 800da72:	42bc      	cmp	r4, r7
 800da74:	4622      	mov	r2, r4
 800da76:	4631      	mov	r1, r6
 800da78:	bf28      	it	cs
 800da7a:	463a      	movcs	r2, r7
 800da7c:	f7ff f838 	bl	800caf0 <memcpy>
 800da80:	4631      	mov	r1, r6
 800da82:	4640      	mov	r0, r8
 800da84:	f7ff fd0e 	bl	800d4a4 <_free_r>
 800da88:	e7e1      	b.n	800da4e <_realloc_r+0x1e>
 800da8a:	4635      	mov	r5, r6
 800da8c:	e7df      	b.n	800da4e <_realloc_r+0x1e>

0800da8e <__sfputc_r>:
 800da8e:	6893      	ldr	r3, [r2, #8]
 800da90:	b410      	push	{r4}
 800da92:	3b01      	subs	r3, #1
 800da94:	2b00      	cmp	r3, #0
 800da96:	6093      	str	r3, [r2, #8]
 800da98:	da07      	bge.n	800daaa <__sfputc_r+0x1c>
 800da9a:	6994      	ldr	r4, [r2, #24]
 800da9c:	42a3      	cmp	r3, r4
 800da9e:	db01      	blt.n	800daa4 <__sfputc_r+0x16>
 800daa0:	290a      	cmp	r1, #10
 800daa2:	d102      	bne.n	800daaa <__sfputc_r+0x1c>
 800daa4:	bc10      	pop	{r4}
 800daa6:	f000 b949 	b.w	800dd3c <__swbuf_r>
 800daaa:	6813      	ldr	r3, [r2, #0]
 800daac:	1c58      	adds	r0, r3, #1
 800daae:	6010      	str	r0, [r2, #0]
 800dab0:	7019      	strb	r1, [r3, #0]
 800dab2:	4608      	mov	r0, r1
 800dab4:	bc10      	pop	{r4}
 800dab6:	4770      	bx	lr

0800dab8 <__sfputs_r>:
 800dab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daba:	4606      	mov	r6, r0
 800dabc:	460f      	mov	r7, r1
 800dabe:	4614      	mov	r4, r2
 800dac0:	18d5      	adds	r5, r2, r3
 800dac2:	42ac      	cmp	r4, r5
 800dac4:	d101      	bne.n	800daca <__sfputs_r+0x12>
 800dac6:	2000      	movs	r0, #0
 800dac8:	e007      	b.n	800dada <__sfputs_r+0x22>
 800daca:	463a      	mov	r2, r7
 800dacc:	4630      	mov	r0, r6
 800dace:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dad2:	f7ff ffdc 	bl	800da8e <__sfputc_r>
 800dad6:	1c43      	adds	r3, r0, #1
 800dad8:	d1f3      	bne.n	800dac2 <__sfputs_r+0xa>
 800dada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dadc <_vfiprintf_r>:
 800dadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dae0:	460d      	mov	r5, r1
 800dae2:	4614      	mov	r4, r2
 800dae4:	4698      	mov	r8, r3
 800dae6:	4606      	mov	r6, r0
 800dae8:	b09d      	sub	sp, #116	; 0x74
 800daea:	b118      	cbz	r0, 800daf4 <_vfiprintf_r+0x18>
 800daec:	6983      	ldr	r3, [r0, #24]
 800daee:	b90b      	cbnz	r3, 800daf4 <_vfiprintf_r+0x18>
 800daf0:	f000 fb02 	bl	800e0f8 <__sinit>
 800daf4:	4b89      	ldr	r3, [pc, #548]	; (800dd1c <_vfiprintf_r+0x240>)
 800daf6:	429d      	cmp	r5, r3
 800daf8:	d11b      	bne.n	800db32 <_vfiprintf_r+0x56>
 800dafa:	6875      	ldr	r5, [r6, #4]
 800dafc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dafe:	07d9      	lsls	r1, r3, #31
 800db00:	d405      	bmi.n	800db0e <_vfiprintf_r+0x32>
 800db02:	89ab      	ldrh	r3, [r5, #12]
 800db04:	059a      	lsls	r2, r3, #22
 800db06:	d402      	bmi.n	800db0e <_vfiprintf_r+0x32>
 800db08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db0a:	f000 fb93 	bl	800e234 <__retarget_lock_acquire_recursive>
 800db0e:	89ab      	ldrh	r3, [r5, #12]
 800db10:	071b      	lsls	r3, r3, #28
 800db12:	d501      	bpl.n	800db18 <_vfiprintf_r+0x3c>
 800db14:	692b      	ldr	r3, [r5, #16]
 800db16:	b9eb      	cbnz	r3, 800db54 <_vfiprintf_r+0x78>
 800db18:	4629      	mov	r1, r5
 800db1a:	4630      	mov	r0, r6
 800db1c:	f000 f960 	bl	800dde0 <__swsetup_r>
 800db20:	b1c0      	cbz	r0, 800db54 <_vfiprintf_r+0x78>
 800db22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db24:	07dc      	lsls	r4, r3, #31
 800db26:	d50e      	bpl.n	800db46 <_vfiprintf_r+0x6a>
 800db28:	f04f 30ff 	mov.w	r0, #4294967295
 800db2c:	b01d      	add	sp, #116	; 0x74
 800db2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db32:	4b7b      	ldr	r3, [pc, #492]	; (800dd20 <_vfiprintf_r+0x244>)
 800db34:	429d      	cmp	r5, r3
 800db36:	d101      	bne.n	800db3c <_vfiprintf_r+0x60>
 800db38:	68b5      	ldr	r5, [r6, #8]
 800db3a:	e7df      	b.n	800dafc <_vfiprintf_r+0x20>
 800db3c:	4b79      	ldr	r3, [pc, #484]	; (800dd24 <_vfiprintf_r+0x248>)
 800db3e:	429d      	cmp	r5, r3
 800db40:	bf08      	it	eq
 800db42:	68f5      	ldreq	r5, [r6, #12]
 800db44:	e7da      	b.n	800dafc <_vfiprintf_r+0x20>
 800db46:	89ab      	ldrh	r3, [r5, #12]
 800db48:	0598      	lsls	r0, r3, #22
 800db4a:	d4ed      	bmi.n	800db28 <_vfiprintf_r+0x4c>
 800db4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db4e:	f000 fb72 	bl	800e236 <__retarget_lock_release_recursive>
 800db52:	e7e9      	b.n	800db28 <_vfiprintf_r+0x4c>
 800db54:	2300      	movs	r3, #0
 800db56:	9309      	str	r3, [sp, #36]	; 0x24
 800db58:	2320      	movs	r3, #32
 800db5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db5e:	2330      	movs	r3, #48	; 0x30
 800db60:	f04f 0901 	mov.w	r9, #1
 800db64:	f8cd 800c 	str.w	r8, [sp, #12]
 800db68:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800dd28 <_vfiprintf_r+0x24c>
 800db6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db70:	4623      	mov	r3, r4
 800db72:	469a      	mov	sl, r3
 800db74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db78:	b10a      	cbz	r2, 800db7e <_vfiprintf_r+0xa2>
 800db7a:	2a25      	cmp	r2, #37	; 0x25
 800db7c:	d1f9      	bne.n	800db72 <_vfiprintf_r+0x96>
 800db7e:	ebba 0b04 	subs.w	fp, sl, r4
 800db82:	d00b      	beq.n	800db9c <_vfiprintf_r+0xc0>
 800db84:	465b      	mov	r3, fp
 800db86:	4622      	mov	r2, r4
 800db88:	4629      	mov	r1, r5
 800db8a:	4630      	mov	r0, r6
 800db8c:	f7ff ff94 	bl	800dab8 <__sfputs_r>
 800db90:	3001      	adds	r0, #1
 800db92:	f000 80aa 	beq.w	800dcea <_vfiprintf_r+0x20e>
 800db96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db98:	445a      	add	r2, fp
 800db9a:	9209      	str	r2, [sp, #36]	; 0x24
 800db9c:	f89a 3000 	ldrb.w	r3, [sl]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	f000 80a2 	beq.w	800dcea <_vfiprintf_r+0x20e>
 800dba6:	2300      	movs	r3, #0
 800dba8:	f04f 32ff 	mov.w	r2, #4294967295
 800dbac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbb0:	f10a 0a01 	add.w	sl, sl, #1
 800dbb4:	9304      	str	r3, [sp, #16]
 800dbb6:	9307      	str	r3, [sp, #28]
 800dbb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dbbc:	931a      	str	r3, [sp, #104]	; 0x68
 800dbbe:	4654      	mov	r4, sl
 800dbc0:	2205      	movs	r2, #5
 800dbc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbc6:	4858      	ldr	r0, [pc, #352]	; (800dd28 <_vfiprintf_r+0x24c>)
 800dbc8:	f7fe ff84 	bl	800cad4 <memchr>
 800dbcc:	9a04      	ldr	r2, [sp, #16]
 800dbce:	b9d8      	cbnz	r0, 800dc08 <_vfiprintf_r+0x12c>
 800dbd0:	06d1      	lsls	r1, r2, #27
 800dbd2:	bf44      	itt	mi
 800dbd4:	2320      	movmi	r3, #32
 800dbd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbda:	0713      	lsls	r3, r2, #28
 800dbdc:	bf44      	itt	mi
 800dbde:	232b      	movmi	r3, #43	; 0x2b
 800dbe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbe4:	f89a 3000 	ldrb.w	r3, [sl]
 800dbe8:	2b2a      	cmp	r3, #42	; 0x2a
 800dbea:	d015      	beq.n	800dc18 <_vfiprintf_r+0x13c>
 800dbec:	4654      	mov	r4, sl
 800dbee:	2000      	movs	r0, #0
 800dbf0:	f04f 0c0a 	mov.w	ip, #10
 800dbf4:	9a07      	ldr	r2, [sp, #28]
 800dbf6:	4621      	mov	r1, r4
 800dbf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbfc:	3b30      	subs	r3, #48	; 0x30
 800dbfe:	2b09      	cmp	r3, #9
 800dc00:	d94e      	bls.n	800dca0 <_vfiprintf_r+0x1c4>
 800dc02:	b1b0      	cbz	r0, 800dc32 <_vfiprintf_r+0x156>
 800dc04:	9207      	str	r2, [sp, #28]
 800dc06:	e014      	b.n	800dc32 <_vfiprintf_r+0x156>
 800dc08:	eba0 0308 	sub.w	r3, r0, r8
 800dc0c:	fa09 f303 	lsl.w	r3, r9, r3
 800dc10:	4313      	orrs	r3, r2
 800dc12:	46a2      	mov	sl, r4
 800dc14:	9304      	str	r3, [sp, #16]
 800dc16:	e7d2      	b.n	800dbbe <_vfiprintf_r+0xe2>
 800dc18:	9b03      	ldr	r3, [sp, #12]
 800dc1a:	1d19      	adds	r1, r3, #4
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	9103      	str	r1, [sp, #12]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	bfbb      	ittet	lt
 800dc24:	425b      	neglt	r3, r3
 800dc26:	f042 0202 	orrlt.w	r2, r2, #2
 800dc2a:	9307      	strge	r3, [sp, #28]
 800dc2c:	9307      	strlt	r3, [sp, #28]
 800dc2e:	bfb8      	it	lt
 800dc30:	9204      	strlt	r2, [sp, #16]
 800dc32:	7823      	ldrb	r3, [r4, #0]
 800dc34:	2b2e      	cmp	r3, #46	; 0x2e
 800dc36:	d10c      	bne.n	800dc52 <_vfiprintf_r+0x176>
 800dc38:	7863      	ldrb	r3, [r4, #1]
 800dc3a:	2b2a      	cmp	r3, #42	; 0x2a
 800dc3c:	d135      	bne.n	800dcaa <_vfiprintf_r+0x1ce>
 800dc3e:	9b03      	ldr	r3, [sp, #12]
 800dc40:	3402      	adds	r4, #2
 800dc42:	1d1a      	adds	r2, r3, #4
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	9203      	str	r2, [sp, #12]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	bfb8      	it	lt
 800dc4c:	f04f 33ff 	movlt.w	r3, #4294967295
 800dc50:	9305      	str	r3, [sp, #20]
 800dc52:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800dd2c <_vfiprintf_r+0x250>
 800dc56:	2203      	movs	r2, #3
 800dc58:	4650      	mov	r0, sl
 800dc5a:	7821      	ldrb	r1, [r4, #0]
 800dc5c:	f7fe ff3a 	bl	800cad4 <memchr>
 800dc60:	b140      	cbz	r0, 800dc74 <_vfiprintf_r+0x198>
 800dc62:	2340      	movs	r3, #64	; 0x40
 800dc64:	eba0 000a 	sub.w	r0, r0, sl
 800dc68:	fa03 f000 	lsl.w	r0, r3, r0
 800dc6c:	9b04      	ldr	r3, [sp, #16]
 800dc6e:	3401      	adds	r4, #1
 800dc70:	4303      	orrs	r3, r0
 800dc72:	9304      	str	r3, [sp, #16]
 800dc74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc78:	2206      	movs	r2, #6
 800dc7a:	482d      	ldr	r0, [pc, #180]	; (800dd30 <_vfiprintf_r+0x254>)
 800dc7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc80:	f7fe ff28 	bl	800cad4 <memchr>
 800dc84:	2800      	cmp	r0, #0
 800dc86:	d03f      	beq.n	800dd08 <_vfiprintf_r+0x22c>
 800dc88:	4b2a      	ldr	r3, [pc, #168]	; (800dd34 <_vfiprintf_r+0x258>)
 800dc8a:	bb1b      	cbnz	r3, 800dcd4 <_vfiprintf_r+0x1f8>
 800dc8c:	9b03      	ldr	r3, [sp, #12]
 800dc8e:	3307      	adds	r3, #7
 800dc90:	f023 0307 	bic.w	r3, r3, #7
 800dc94:	3308      	adds	r3, #8
 800dc96:	9303      	str	r3, [sp, #12]
 800dc98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc9a:	443b      	add	r3, r7
 800dc9c:	9309      	str	r3, [sp, #36]	; 0x24
 800dc9e:	e767      	b.n	800db70 <_vfiprintf_r+0x94>
 800dca0:	460c      	mov	r4, r1
 800dca2:	2001      	movs	r0, #1
 800dca4:	fb0c 3202 	mla	r2, ip, r2, r3
 800dca8:	e7a5      	b.n	800dbf6 <_vfiprintf_r+0x11a>
 800dcaa:	2300      	movs	r3, #0
 800dcac:	f04f 0c0a 	mov.w	ip, #10
 800dcb0:	4619      	mov	r1, r3
 800dcb2:	3401      	adds	r4, #1
 800dcb4:	9305      	str	r3, [sp, #20]
 800dcb6:	4620      	mov	r0, r4
 800dcb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcbc:	3a30      	subs	r2, #48	; 0x30
 800dcbe:	2a09      	cmp	r2, #9
 800dcc0:	d903      	bls.n	800dcca <_vfiprintf_r+0x1ee>
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d0c5      	beq.n	800dc52 <_vfiprintf_r+0x176>
 800dcc6:	9105      	str	r1, [sp, #20]
 800dcc8:	e7c3      	b.n	800dc52 <_vfiprintf_r+0x176>
 800dcca:	4604      	mov	r4, r0
 800dccc:	2301      	movs	r3, #1
 800dcce:	fb0c 2101 	mla	r1, ip, r1, r2
 800dcd2:	e7f0      	b.n	800dcb6 <_vfiprintf_r+0x1da>
 800dcd4:	ab03      	add	r3, sp, #12
 800dcd6:	9300      	str	r3, [sp, #0]
 800dcd8:	462a      	mov	r2, r5
 800dcda:	4630      	mov	r0, r6
 800dcdc:	4b16      	ldr	r3, [pc, #88]	; (800dd38 <_vfiprintf_r+0x25c>)
 800dcde:	a904      	add	r1, sp, #16
 800dce0:	f7fc f878 	bl	8009dd4 <_printf_float>
 800dce4:	4607      	mov	r7, r0
 800dce6:	1c78      	adds	r0, r7, #1
 800dce8:	d1d6      	bne.n	800dc98 <_vfiprintf_r+0x1bc>
 800dcea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dcec:	07d9      	lsls	r1, r3, #31
 800dcee:	d405      	bmi.n	800dcfc <_vfiprintf_r+0x220>
 800dcf0:	89ab      	ldrh	r3, [r5, #12]
 800dcf2:	059a      	lsls	r2, r3, #22
 800dcf4:	d402      	bmi.n	800dcfc <_vfiprintf_r+0x220>
 800dcf6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dcf8:	f000 fa9d 	bl	800e236 <__retarget_lock_release_recursive>
 800dcfc:	89ab      	ldrh	r3, [r5, #12]
 800dcfe:	065b      	lsls	r3, r3, #25
 800dd00:	f53f af12 	bmi.w	800db28 <_vfiprintf_r+0x4c>
 800dd04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd06:	e711      	b.n	800db2c <_vfiprintf_r+0x50>
 800dd08:	ab03      	add	r3, sp, #12
 800dd0a:	9300      	str	r3, [sp, #0]
 800dd0c:	462a      	mov	r2, r5
 800dd0e:	4630      	mov	r0, r6
 800dd10:	4b09      	ldr	r3, [pc, #36]	; (800dd38 <_vfiprintf_r+0x25c>)
 800dd12:	a904      	add	r1, sp, #16
 800dd14:	f7fc fafa 	bl	800a30c <_printf_i>
 800dd18:	e7e4      	b.n	800dce4 <_vfiprintf_r+0x208>
 800dd1a:	bf00      	nop
 800dd1c:	0800ea14 	.word	0x0800ea14
 800dd20:	0800ea34 	.word	0x0800ea34
 800dd24:	0800e9f4 	.word	0x0800e9f4
 800dd28:	0800e9a4 	.word	0x0800e9a4
 800dd2c:	0800e9aa 	.word	0x0800e9aa
 800dd30:	0800e9ae 	.word	0x0800e9ae
 800dd34:	08009dd5 	.word	0x08009dd5
 800dd38:	0800dab9 	.word	0x0800dab9

0800dd3c <__swbuf_r>:
 800dd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd3e:	460e      	mov	r6, r1
 800dd40:	4614      	mov	r4, r2
 800dd42:	4605      	mov	r5, r0
 800dd44:	b118      	cbz	r0, 800dd4e <__swbuf_r+0x12>
 800dd46:	6983      	ldr	r3, [r0, #24]
 800dd48:	b90b      	cbnz	r3, 800dd4e <__swbuf_r+0x12>
 800dd4a:	f000 f9d5 	bl	800e0f8 <__sinit>
 800dd4e:	4b21      	ldr	r3, [pc, #132]	; (800ddd4 <__swbuf_r+0x98>)
 800dd50:	429c      	cmp	r4, r3
 800dd52:	d12b      	bne.n	800ddac <__swbuf_r+0x70>
 800dd54:	686c      	ldr	r4, [r5, #4]
 800dd56:	69a3      	ldr	r3, [r4, #24]
 800dd58:	60a3      	str	r3, [r4, #8]
 800dd5a:	89a3      	ldrh	r3, [r4, #12]
 800dd5c:	071a      	lsls	r2, r3, #28
 800dd5e:	d52f      	bpl.n	800ddc0 <__swbuf_r+0x84>
 800dd60:	6923      	ldr	r3, [r4, #16]
 800dd62:	b36b      	cbz	r3, 800ddc0 <__swbuf_r+0x84>
 800dd64:	6923      	ldr	r3, [r4, #16]
 800dd66:	6820      	ldr	r0, [r4, #0]
 800dd68:	b2f6      	uxtb	r6, r6
 800dd6a:	1ac0      	subs	r0, r0, r3
 800dd6c:	6963      	ldr	r3, [r4, #20]
 800dd6e:	4637      	mov	r7, r6
 800dd70:	4283      	cmp	r3, r0
 800dd72:	dc04      	bgt.n	800dd7e <__swbuf_r+0x42>
 800dd74:	4621      	mov	r1, r4
 800dd76:	4628      	mov	r0, r5
 800dd78:	f000 f92a 	bl	800dfd0 <_fflush_r>
 800dd7c:	bb30      	cbnz	r0, 800ddcc <__swbuf_r+0x90>
 800dd7e:	68a3      	ldr	r3, [r4, #8]
 800dd80:	3001      	adds	r0, #1
 800dd82:	3b01      	subs	r3, #1
 800dd84:	60a3      	str	r3, [r4, #8]
 800dd86:	6823      	ldr	r3, [r4, #0]
 800dd88:	1c5a      	adds	r2, r3, #1
 800dd8a:	6022      	str	r2, [r4, #0]
 800dd8c:	701e      	strb	r6, [r3, #0]
 800dd8e:	6963      	ldr	r3, [r4, #20]
 800dd90:	4283      	cmp	r3, r0
 800dd92:	d004      	beq.n	800dd9e <__swbuf_r+0x62>
 800dd94:	89a3      	ldrh	r3, [r4, #12]
 800dd96:	07db      	lsls	r3, r3, #31
 800dd98:	d506      	bpl.n	800dda8 <__swbuf_r+0x6c>
 800dd9a:	2e0a      	cmp	r6, #10
 800dd9c:	d104      	bne.n	800dda8 <__swbuf_r+0x6c>
 800dd9e:	4621      	mov	r1, r4
 800dda0:	4628      	mov	r0, r5
 800dda2:	f000 f915 	bl	800dfd0 <_fflush_r>
 800dda6:	b988      	cbnz	r0, 800ddcc <__swbuf_r+0x90>
 800dda8:	4638      	mov	r0, r7
 800ddaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddac:	4b0a      	ldr	r3, [pc, #40]	; (800ddd8 <__swbuf_r+0x9c>)
 800ddae:	429c      	cmp	r4, r3
 800ddb0:	d101      	bne.n	800ddb6 <__swbuf_r+0x7a>
 800ddb2:	68ac      	ldr	r4, [r5, #8]
 800ddb4:	e7cf      	b.n	800dd56 <__swbuf_r+0x1a>
 800ddb6:	4b09      	ldr	r3, [pc, #36]	; (800dddc <__swbuf_r+0xa0>)
 800ddb8:	429c      	cmp	r4, r3
 800ddba:	bf08      	it	eq
 800ddbc:	68ec      	ldreq	r4, [r5, #12]
 800ddbe:	e7ca      	b.n	800dd56 <__swbuf_r+0x1a>
 800ddc0:	4621      	mov	r1, r4
 800ddc2:	4628      	mov	r0, r5
 800ddc4:	f000 f80c 	bl	800dde0 <__swsetup_r>
 800ddc8:	2800      	cmp	r0, #0
 800ddca:	d0cb      	beq.n	800dd64 <__swbuf_r+0x28>
 800ddcc:	f04f 37ff 	mov.w	r7, #4294967295
 800ddd0:	e7ea      	b.n	800dda8 <__swbuf_r+0x6c>
 800ddd2:	bf00      	nop
 800ddd4:	0800ea14 	.word	0x0800ea14
 800ddd8:	0800ea34 	.word	0x0800ea34
 800dddc:	0800e9f4 	.word	0x0800e9f4

0800dde0 <__swsetup_r>:
 800dde0:	4b32      	ldr	r3, [pc, #200]	; (800deac <__swsetup_r+0xcc>)
 800dde2:	b570      	push	{r4, r5, r6, lr}
 800dde4:	681d      	ldr	r5, [r3, #0]
 800dde6:	4606      	mov	r6, r0
 800dde8:	460c      	mov	r4, r1
 800ddea:	b125      	cbz	r5, 800ddf6 <__swsetup_r+0x16>
 800ddec:	69ab      	ldr	r3, [r5, #24]
 800ddee:	b913      	cbnz	r3, 800ddf6 <__swsetup_r+0x16>
 800ddf0:	4628      	mov	r0, r5
 800ddf2:	f000 f981 	bl	800e0f8 <__sinit>
 800ddf6:	4b2e      	ldr	r3, [pc, #184]	; (800deb0 <__swsetup_r+0xd0>)
 800ddf8:	429c      	cmp	r4, r3
 800ddfa:	d10f      	bne.n	800de1c <__swsetup_r+0x3c>
 800ddfc:	686c      	ldr	r4, [r5, #4]
 800ddfe:	89a3      	ldrh	r3, [r4, #12]
 800de00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de04:	0719      	lsls	r1, r3, #28
 800de06:	d42c      	bmi.n	800de62 <__swsetup_r+0x82>
 800de08:	06dd      	lsls	r5, r3, #27
 800de0a:	d411      	bmi.n	800de30 <__swsetup_r+0x50>
 800de0c:	2309      	movs	r3, #9
 800de0e:	6033      	str	r3, [r6, #0]
 800de10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800de14:	f04f 30ff 	mov.w	r0, #4294967295
 800de18:	81a3      	strh	r3, [r4, #12]
 800de1a:	e03e      	b.n	800de9a <__swsetup_r+0xba>
 800de1c:	4b25      	ldr	r3, [pc, #148]	; (800deb4 <__swsetup_r+0xd4>)
 800de1e:	429c      	cmp	r4, r3
 800de20:	d101      	bne.n	800de26 <__swsetup_r+0x46>
 800de22:	68ac      	ldr	r4, [r5, #8]
 800de24:	e7eb      	b.n	800ddfe <__swsetup_r+0x1e>
 800de26:	4b24      	ldr	r3, [pc, #144]	; (800deb8 <__swsetup_r+0xd8>)
 800de28:	429c      	cmp	r4, r3
 800de2a:	bf08      	it	eq
 800de2c:	68ec      	ldreq	r4, [r5, #12]
 800de2e:	e7e6      	b.n	800ddfe <__swsetup_r+0x1e>
 800de30:	0758      	lsls	r0, r3, #29
 800de32:	d512      	bpl.n	800de5a <__swsetup_r+0x7a>
 800de34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de36:	b141      	cbz	r1, 800de4a <__swsetup_r+0x6a>
 800de38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de3c:	4299      	cmp	r1, r3
 800de3e:	d002      	beq.n	800de46 <__swsetup_r+0x66>
 800de40:	4630      	mov	r0, r6
 800de42:	f7ff fb2f 	bl	800d4a4 <_free_r>
 800de46:	2300      	movs	r3, #0
 800de48:	6363      	str	r3, [r4, #52]	; 0x34
 800de4a:	89a3      	ldrh	r3, [r4, #12]
 800de4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800de50:	81a3      	strh	r3, [r4, #12]
 800de52:	2300      	movs	r3, #0
 800de54:	6063      	str	r3, [r4, #4]
 800de56:	6923      	ldr	r3, [r4, #16]
 800de58:	6023      	str	r3, [r4, #0]
 800de5a:	89a3      	ldrh	r3, [r4, #12]
 800de5c:	f043 0308 	orr.w	r3, r3, #8
 800de60:	81a3      	strh	r3, [r4, #12]
 800de62:	6923      	ldr	r3, [r4, #16]
 800de64:	b94b      	cbnz	r3, 800de7a <__swsetup_r+0x9a>
 800de66:	89a3      	ldrh	r3, [r4, #12]
 800de68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800de6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de70:	d003      	beq.n	800de7a <__swsetup_r+0x9a>
 800de72:	4621      	mov	r1, r4
 800de74:	4630      	mov	r0, r6
 800de76:	f000 fa05 	bl	800e284 <__smakebuf_r>
 800de7a:	89a0      	ldrh	r0, [r4, #12]
 800de7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de80:	f010 0301 	ands.w	r3, r0, #1
 800de84:	d00a      	beq.n	800de9c <__swsetup_r+0xbc>
 800de86:	2300      	movs	r3, #0
 800de88:	60a3      	str	r3, [r4, #8]
 800de8a:	6963      	ldr	r3, [r4, #20]
 800de8c:	425b      	negs	r3, r3
 800de8e:	61a3      	str	r3, [r4, #24]
 800de90:	6923      	ldr	r3, [r4, #16]
 800de92:	b943      	cbnz	r3, 800dea6 <__swsetup_r+0xc6>
 800de94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800de98:	d1ba      	bne.n	800de10 <__swsetup_r+0x30>
 800de9a:	bd70      	pop	{r4, r5, r6, pc}
 800de9c:	0781      	lsls	r1, r0, #30
 800de9e:	bf58      	it	pl
 800dea0:	6963      	ldrpl	r3, [r4, #20]
 800dea2:	60a3      	str	r3, [r4, #8]
 800dea4:	e7f4      	b.n	800de90 <__swsetup_r+0xb0>
 800dea6:	2000      	movs	r0, #0
 800dea8:	e7f7      	b.n	800de9a <__swsetup_r+0xba>
 800deaa:	bf00      	nop
 800deac:	2000017c 	.word	0x2000017c
 800deb0:	0800ea14 	.word	0x0800ea14
 800deb4:	0800ea34 	.word	0x0800ea34
 800deb8:	0800e9f4 	.word	0x0800e9f4

0800debc <abort>:
 800debc:	2006      	movs	r0, #6
 800debe:	b508      	push	{r3, lr}
 800dec0:	f000 fa50 	bl	800e364 <raise>
 800dec4:	2001      	movs	r0, #1
 800dec6:	f7f3 fca6 	bl	8001816 <_exit>
	...

0800decc <__sflush_r>:
 800decc:	898a      	ldrh	r2, [r1, #12]
 800dece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ded0:	4605      	mov	r5, r0
 800ded2:	0710      	lsls	r0, r2, #28
 800ded4:	460c      	mov	r4, r1
 800ded6:	d457      	bmi.n	800df88 <__sflush_r+0xbc>
 800ded8:	684b      	ldr	r3, [r1, #4]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	dc04      	bgt.n	800dee8 <__sflush_r+0x1c>
 800dede:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	dc01      	bgt.n	800dee8 <__sflush_r+0x1c>
 800dee4:	2000      	movs	r0, #0
 800dee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dee8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800deea:	2e00      	cmp	r6, #0
 800deec:	d0fa      	beq.n	800dee4 <__sflush_r+0x18>
 800deee:	2300      	movs	r3, #0
 800def0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800def4:	682f      	ldr	r7, [r5, #0]
 800def6:	602b      	str	r3, [r5, #0]
 800def8:	d032      	beq.n	800df60 <__sflush_r+0x94>
 800defa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800defc:	89a3      	ldrh	r3, [r4, #12]
 800defe:	075a      	lsls	r2, r3, #29
 800df00:	d505      	bpl.n	800df0e <__sflush_r+0x42>
 800df02:	6863      	ldr	r3, [r4, #4]
 800df04:	1ac0      	subs	r0, r0, r3
 800df06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800df08:	b10b      	cbz	r3, 800df0e <__sflush_r+0x42>
 800df0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800df0c:	1ac0      	subs	r0, r0, r3
 800df0e:	2300      	movs	r3, #0
 800df10:	4602      	mov	r2, r0
 800df12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df14:	4628      	mov	r0, r5
 800df16:	6a21      	ldr	r1, [r4, #32]
 800df18:	47b0      	blx	r6
 800df1a:	1c43      	adds	r3, r0, #1
 800df1c:	89a3      	ldrh	r3, [r4, #12]
 800df1e:	d106      	bne.n	800df2e <__sflush_r+0x62>
 800df20:	6829      	ldr	r1, [r5, #0]
 800df22:	291d      	cmp	r1, #29
 800df24:	d82c      	bhi.n	800df80 <__sflush_r+0xb4>
 800df26:	4a29      	ldr	r2, [pc, #164]	; (800dfcc <__sflush_r+0x100>)
 800df28:	40ca      	lsrs	r2, r1
 800df2a:	07d6      	lsls	r6, r2, #31
 800df2c:	d528      	bpl.n	800df80 <__sflush_r+0xb4>
 800df2e:	2200      	movs	r2, #0
 800df30:	6062      	str	r2, [r4, #4]
 800df32:	6922      	ldr	r2, [r4, #16]
 800df34:	04d9      	lsls	r1, r3, #19
 800df36:	6022      	str	r2, [r4, #0]
 800df38:	d504      	bpl.n	800df44 <__sflush_r+0x78>
 800df3a:	1c42      	adds	r2, r0, #1
 800df3c:	d101      	bne.n	800df42 <__sflush_r+0x76>
 800df3e:	682b      	ldr	r3, [r5, #0]
 800df40:	b903      	cbnz	r3, 800df44 <__sflush_r+0x78>
 800df42:	6560      	str	r0, [r4, #84]	; 0x54
 800df44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df46:	602f      	str	r7, [r5, #0]
 800df48:	2900      	cmp	r1, #0
 800df4a:	d0cb      	beq.n	800dee4 <__sflush_r+0x18>
 800df4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df50:	4299      	cmp	r1, r3
 800df52:	d002      	beq.n	800df5a <__sflush_r+0x8e>
 800df54:	4628      	mov	r0, r5
 800df56:	f7ff faa5 	bl	800d4a4 <_free_r>
 800df5a:	2000      	movs	r0, #0
 800df5c:	6360      	str	r0, [r4, #52]	; 0x34
 800df5e:	e7c2      	b.n	800dee6 <__sflush_r+0x1a>
 800df60:	6a21      	ldr	r1, [r4, #32]
 800df62:	2301      	movs	r3, #1
 800df64:	4628      	mov	r0, r5
 800df66:	47b0      	blx	r6
 800df68:	1c41      	adds	r1, r0, #1
 800df6a:	d1c7      	bne.n	800defc <__sflush_r+0x30>
 800df6c:	682b      	ldr	r3, [r5, #0]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d0c4      	beq.n	800defc <__sflush_r+0x30>
 800df72:	2b1d      	cmp	r3, #29
 800df74:	d001      	beq.n	800df7a <__sflush_r+0xae>
 800df76:	2b16      	cmp	r3, #22
 800df78:	d101      	bne.n	800df7e <__sflush_r+0xb2>
 800df7a:	602f      	str	r7, [r5, #0]
 800df7c:	e7b2      	b.n	800dee4 <__sflush_r+0x18>
 800df7e:	89a3      	ldrh	r3, [r4, #12]
 800df80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df84:	81a3      	strh	r3, [r4, #12]
 800df86:	e7ae      	b.n	800dee6 <__sflush_r+0x1a>
 800df88:	690f      	ldr	r7, [r1, #16]
 800df8a:	2f00      	cmp	r7, #0
 800df8c:	d0aa      	beq.n	800dee4 <__sflush_r+0x18>
 800df8e:	0793      	lsls	r3, r2, #30
 800df90:	bf18      	it	ne
 800df92:	2300      	movne	r3, #0
 800df94:	680e      	ldr	r6, [r1, #0]
 800df96:	bf08      	it	eq
 800df98:	694b      	ldreq	r3, [r1, #20]
 800df9a:	1bf6      	subs	r6, r6, r7
 800df9c:	600f      	str	r7, [r1, #0]
 800df9e:	608b      	str	r3, [r1, #8]
 800dfa0:	2e00      	cmp	r6, #0
 800dfa2:	dd9f      	ble.n	800dee4 <__sflush_r+0x18>
 800dfa4:	4633      	mov	r3, r6
 800dfa6:	463a      	mov	r2, r7
 800dfa8:	4628      	mov	r0, r5
 800dfaa:	6a21      	ldr	r1, [r4, #32]
 800dfac:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800dfb0:	47e0      	blx	ip
 800dfb2:	2800      	cmp	r0, #0
 800dfb4:	dc06      	bgt.n	800dfc4 <__sflush_r+0xf8>
 800dfb6:	89a3      	ldrh	r3, [r4, #12]
 800dfb8:	f04f 30ff 	mov.w	r0, #4294967295
 800dfbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfc0:	81a3      	strh	r3, [r4, #12]
 800dfc2:	e790      	b.n	800dee6 <__sflush_r+0x1a>
 800dfc4:	4407      	add	r7, r0
 800dfc6:	1a36      	subs	r6, r6, r0
 800dfc8:	e7ea      	b.n	800dfa0 <__sflush_r+0xd4>
 800dfca:	bf00      	nop
 800dfcc:	20400001 	.word	0x20400001

0800dfd0 <_fflush_r>:
 800dfd0:	b538      	push	{r3, r4, r5, lr}
 800dfd2:	690b      	ldr	r3, [r1, #16]
 800dfd4:	4605      	mov	r5, r0
 800dfd6:	460c      	mov	r4, r1
 800dfd8:	b913      	cbnz	r3, 800dfe0 <_fflush_r+0x10>
 800dfda:	2500      	movs	r5, #0
 800dfdc:	4628      	mov	r0, r5
 800dfde:	bd38      	pop	{r3, r4, r5, pc}
 800dfe0:	b118      	cbz	r0, 800dfea <_fflush_r+0x1a>
 800dfe2:	6983      	ldr	r3, [r0, #24]
 800dfe4:	b90b      	cbnz	r3, 800dfea <_fflush_r+0x1a>
 800dfe6:	f000 f887 	bl	800e0f8 <__sinit>
 800dfea:	4b14      	ldr	r3, [pc, #80]	; (800e03c <_fflush_r+0x6c>)
 800dfec:	429c      	cmp	r4, r3
 800dfee:	d11b      	bne.n	800e028 <_fflush_r+0x58>
 800dff0:	686c      	ldr	r4, [r5, #4]
 800dff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d0ef      	beq.n	800dfda <_fflush_r+0xa>
 800dffa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dffc:	07d0      	lsls	r0, r2, #31
 800dffe:	d404      	bmi.n	800e00a <_fflush_r+0x3a>
 800e000:	0599      	lsls	r1, r3, #22
 800e002:	d402      	bmi.n	800e00a <_fflush_r+0x3a>
 800e004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e006:	f000 f915 	bl	800e234 <__retarget_lock_acquire_recursive>
 800e00a:	4628      	mov	r0, r5
 800e00c:	4621      	mov	r1, r4
 800e00e:	f7ff ff5d 	bl	800decc <__sflush_r>
 800e012:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e014:	4605      	mov	r5, r0
 800e016:	07da      	lsls	r2, r3, #31
 800e018:	d4e0      	bmi.n	800dfdc <_fflush_r+0xc>
 800e01a:	89a3      	ldrh	r3, [r4, #12]
 800e01c:	059b      	lsls	r3, r3, #22
 800e01e:	d4dd      	bmi.n	800dfdc <_fflush_r+0xc>
 800e020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e022:	f000 f908 	bl	800e236 <__retarget_lock_release_recursive>
 800e026:	e7d9      	b.n	800dfdc <_fflush_r+0xc>
 800e028:	4b05      	ldr	r3, [pc, #20]	; (800e040 <_fflush_r+0x70>)
 800e02a:	429c      	cmp	r4, r3
 800e02c:	d101      	bne.n	800e032 <_fflush_r+0x62>
 800e02e:	68ac      	ldr	r4, [r5, #8]
 800e030:	e7df      	b.n	800dff2 <_fflush_r+0x22>
 800e032:	4b04      	ldr	r3, [pc, #16]	; (800e044 <_fflush_r+0x74>)
 800e034:	429c      	cmp	r4, r3
 800e036:	bf08      	it	eq
 800e038:	68ec      	ldreq	r4, [r5, #12]
 800e03a:	e7da      	b.n	800dff2 <_fflush_r+0x22>
 800e03c:	0800ea14 	.word	0x0800ea14
 800e040:	0800ea34 	.word	0x0800ea34
 800e044:	0800e9f4 	.word	0x0800e9f4

0800e048 <std>:
 800e048:	2300      	movs	r3, #0
 800e04a:	b510      	push	{r4, lr}
 800e04c:	4604      	mov	r4, r0
 800e04e:	e9c0 3300 	strd	r3, r3, [r0]
 800e052:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e056:	6083      	str	r3, [r0, #8]
 800e058:	8181      	strh	r1, [r0, #12]
 800e05a:	6643      	str	r3, [r0, #100]	; 0x64
 800e05c:	81c2      	strh	r2, [r0, #14]
 800e05e:	6183      	str	r3, [r0, #24]
 800e060:	4619      	mov	r1, r3
 800e062:	2208      	movs	r2, #8
 800e064:	305c      	adds	r0, #92	; 0x5c
 800e066:	f7fb fe0f 	bl	8009c88 <memset>
 800e06a:	4b05      	ldr	r3, [pc, #20]	; (800e080 <std+0x38>)
 800e06c:	6224      	str	r4, [r4, #32]
 800e06e:	6263      	str	r3, [r4, #36]	; 0x24
 800e070:	4b04      	ldr	r3, [pc, #16]	; (800e084 <std+0x3c>)
 800e072:	62a3      	str	r3, [r4, #40]	; 0x28
 800e074:	4b04      	ldr	r3, [pc, #16]	; (800e088 <std+0x40>)
 800e076:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e078:	4b04      	ldr	r3, [pc, #16]	; (800e08c <std+0x44>)
 800e07a:	6323      	str	r3, [r4, #48]	; 0x30
 800e07c:	bd10      	pop	{r4, pc}
 800e07e:	bf00      	nop
 800e080:	0800e39d 	.word	0x0800e39d
 800e084:	0800e3bf 	.word	0x0800e3bf
 800e088:	0800e3f7 	.word	0x0800e3f7
 800e08c:	0800e41b 	.word	0x0800e41b

0800e090 <_cleanup_r>:
 800e090:	4901      	ldr	r1, [pc, #4]	; (800e098 <_cleanup_r+0x8>)
 800e092:	f000 b8af 	b.w	800e1f4 <_fwalk_reent>
 800e096:	bf00      	nop
 800e098:	0800dfd1 	.word	0x0800dfd1

0800e09c <__sfmoreglue>:
 800e09c:	2268      	movs	r2, #104	; 0x68
 800e09e:	b570      	push	{r4, r5, r6, lr}
 800e0a0:	1e4d      	subs	r5, r1, #1
 800e0a2:	4355      	muls	r5, r2
 800e0a4:	460e      	mov	r6, r1
 800e0a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e0aa:	f7ff fa63 	bl	800d574 <_malloc_r>
 800e0ae:	4604      	mov	r4, r0
 800e0b0:	b140      	cbz	r0, 800e0c4 <__sfmoreglue+0x28>
 800e0b2:	2100      	movs	r1, #0
 800e0b4:	e9c0 1600 	strd	r1, r6, [r0]
 800e0b8:	300c      	adds	r0, #12
 800e0ba:	60a0      	str	r0, [r4, #8]
 800e0bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e0c0:	f7fb fde2 	bl	8009c88 <memset>
 800e0c4:	4620      	mov	r0, r4
 800e0c6:	bd70      	pop	{r4, r5, r6, pc}

0800e0c8 <__sfp_lock_acquire>:
 800e0c8:	4801      	ldr	r0, [pc, #4]	; (800e0d0 <__sfp_lock_acquire+0x8>)
 800e0ca:	f000 b8b3 	b.w	800e234 <__retarget_lock_acquire_recursive>
 800e0ce:	bf00      	nop
 800e0d0:	200019bd 	.word	0x200019bd

0800e0d4 <__sfp_lock_release>:
 800e0d4:	4801      	ldr	r0, [pc, #4]	; (800e0dc <__sfp_lock_release+0x8>)
 800e0d6:	f000 b8ae 	b.w	800e236 <__retarget_lock_release_recursive>
 800e0da:	bf00      	nop
 800e0dc:	200019bd 	.word	0x200019bd

0800e0e0 <__sinit_lock_acquire>:
 800e0e0:	4801      	ldr	r0, [pc, #4]	; (800e0e8 <__sinit_lock_acquire+0x8>)
 800e0e2:	f000 b8a7 	b.w	800e234 <__retarget_lock_acquire_recursive>
 800e0e6:	bf00      	nop
 800e0e8:	200019be 	.word	0x200019be

0800e0ec <__sinit_lock_release>:
 800e0ec:	4801      	ldr	r0, [pc, #4]	; (800e0f4 <__sinit_lock_release+0x8>)
 800e0ee:	f000 b8a2 	b.w	800e236 <__retarget_lock_release_recursive>
 800e0f2:	bf00      	nop
 800e0f4:	200019be 	.word	0x200019be

0800e0f8 <__sinit>:
 800e0f8:	b510      	push	{r4, lr}
 800e0fa:	4604      	mov	r4, r0
 800e0fc:	f7ff fff0 	bl	800e0e0 <__sinit_lock_acquire>
 800e100:	69a3      	ldr	r3, [r4, #24]
 800e102:	b11b      	cbz	r3, 800e10c <__sinit+0x14>
 800e104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e108:	f7ff bff0 	b.w	800e0ec <__sinit_lock_release>
 800e10c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e110:	6523      	str	r3, [r4, #80]	; 0x50
 800e112:	4b13      	ldr	r3, [pc, #76]	; (800e160 <__sinit+0x68>)
 800e114:	4a13      	ldr	r2, [pc, #76]	; (800e164 <__sinit+0x6c>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	62a2      	str	r2, [r4, #40]	; 0x28
 800e11a:	42a3      	cmp	r3, r4
 800e11c:	bf08      	it	eq
 800e11e:	2301      	moveq	r3, #1
 800e120:	4620      	mov	r0, r4
 800e122:	bf08      	it	eq
 800e124:	61a3      	streq	r3, [r4, #24]
 800e126:	f000 f81f 	bl	800e168 <__sfp>
 800e12a:	6060      	str	r0, [r4, #4]
 800e12c:	4620      	mov	r0, r4
 800e12e:	f000 f81b 	bl	800e168 <__sfp>
 800e132:	60a0      	str	r0, [r4, #8]
 800e134:	4620      	mov	r0, r4
 800e136:	f000 f817 	bl	800e168 <__sfp>
 800e13a:	2200      	movs	r2, #0
 800e13c:	2104      	movs	r1, #4
 800e13e:	60e0      	str	r0, [r4, #12]
 800e140:	6860      	ldr	r0, [r4, #4]
 800e142:	f7ff ff81 	bl	800e048 <std>
 800e146:	2201      	movs	r2, #1
 800e148:	2109      	movs	r1, #9
 800e14a:	68a0      	ldr	r0, [r4, #8]
 800e14c:	f7ff ff7c 	bl	800e048 <std>
 800e150:	2202      	movs	r2, #2
 800e152:	2112      	movs	r1, #18
 800e154:	68e0      	ldr	r0, [r4, #12]
 800e156:	f7ff ff77 	bl	800e048 <std>
 800e15a:	2301      	movs	r3, #1
 800e15c:	61a3      	str	r3, [r4, #24]
 800e15e:	e7d1      	b.n	800e104 <__sinit+0xc>
 800e160:	0800e5ac 	.word	0x0800e5ac
 800e164:	0800e091 	.word	0x0800e091

0800e168 <__sfp>:
 800e168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e16a:	4607      	mov	r7, r0
 800e16c:	f7ff ffac 	bl	800e0c8 <__sfp_lock_acquire>
 800e170:	4b1e      	ldr	r3, [pc, #120]	; (800e1ec <__sfp+0x84>)
 800e172:	681e      	ldr	r6, [r3, #0]
 800e174:	69b3      	ldr	r3, [r6, #24]
 800e176:	b913      	cbnz	r3, 800e17e <__sfp+0x16>
 800e178:	4630      	mov	r0, r6
 800e17a:	f7ff ffbd 	bl	800e0f8 <__sinit>
 800e17e:	3648      	adds	r6, #72	; 0x48
 800e180:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e184:	3b01      	subs	r3, #1
 800e186:	d503      	bpl.n	800e190 <__sfp+0x28>
 800e188:	6833      	ldr	r3, [r6, #0]
 800e18a:	b30b      	cbz	r3, 800e1d0 <__sfp+0x68>
 800e18c:	6836      	ldr	r6, [r6, #0]
 800e18e:	e7f7      	b.n	800e180 <__sfp+0x18>
 800e190:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e194:	b9d5      	cbnz	r5, 800e1cc <__sfp+0x64>
 800e196:	4b16      	ldr	r3, [pc, #88]	; (800e1f0 <__sfp+0x88>)
 800e198:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e19c:	60e3      	str	r3, [r4, #12]
 800e19e:	6665      	str	r5, [r4, #100]	; 0x64
 800e1a0:	f000 f847 	bl	800e232 <__retarget_lock_init_recursive>
 800e1a4:	f7ff ff96 	bl	800e0d4 <__sfp_lock_release>
 800e1a8:	2208      	movs	r2, #8
 800e1aa:	4629      	mov	r1, r5
 800e1ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e1b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e1b4:	6025      	str	r5, [r4, #0]
 800e1b6:	61a5      	str	r5, [r4, #24]
 800e1b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e1bc:	f7fb fd64 	bl	8009c88 <memset>
 800e1c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e1c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e1c8:	4620      	mov	r0, r4
 800e1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1cc:	3468      	adds	r4, #104	; 0x68
 800e1ce:	e7d9      	b.n	800e184 <__sfp+0x1c>
 800e1d0:	2104      	movs	r1, #4
 800e1d2:	4638      	mov	r0, r7
 800e1d4:	f7ff ff62 	bl	800e09c <__sfmoreglue>
 800e1d8:	4604      	mov	r4, r0
 800e1da:	6030      	str	r0, [r6, #0]
 800e1dc:	2800      	cmp	r0, #0
 800e1de:	d1d5      	bne.n	800e18c <__sfp+0x24>
 800e1e0:	f7ff ff78 	bl	800e0d4 <__sfp_lock_release>
 800e1e4:	230c      	movs	r3, #12
 800e1e6:	603b      	str	r3, [r7, #0]
 800e1e8:	e7ee      	b.n	800e1c8 <__sfp+0x60>
 800e1ea:	bf00      	nop
 800e1ec:	0800e5ac 	.word	0x0800e5ac
 800e1f0:	ffff0001 	.word	0xffff0001

0800e1f4 <_fwalk_reent>:
 800e1f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1f8:	4606      	mov	r6, r0
 800e1fa:	4688      	mov	r8, r1
 800e1fc:	2700      	movs	r7, #0
 800e1fe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e202:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e206:	f1b9 0901 	subs.w	r9, r9, #1
 800e20a:	d505      	bpl.n	800e218 <_fwalk_reent+0x24>
 800e20c:	6824      	ldr	r4, [r4, #0]
 800e20e:	2c00      	cmp	r4, #0
 800e210:	d1f7      	bne.n	800e202 <_fwalk_reent+0xe>
 800e212:	4638      	mov	r0, r7
 800e214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e218:	89ab      	ldrh	r3, [r5, #12]
 800e21a:	2b01      	cmp	r3, #1
 800e21c:	d907      	bls.n	800e22e <_fwalk_reent+0x3a>
 800e21e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e222:	3301      	adds	r3, #1
 800e224:	d003      	beq.n	800e22e <_fwalk_reent+0x3a>
 800e226:	4629      	mov	r1, r5
 800e228:	4630      	mov	r0, r6
 800e22a:	47c0      	blx	r8
 800e22c:	4307      	orrs	r7, r0
 800e22e:	3568      	adds	r5, #104	; 0x68
 800e230:	e7e9      	b.n	800e206 <_fwalk_reent+0x12>

0800e232 <__retarget_lock_init_recursive>:
 800e232:	4770      	bx	lr

0800e234 <__retarget_lock_acquire_recursive>:
 800e234:	4770      	bx	lr

0800e236 <__retarget_lock_release_recursive>:
 800e236:	4770      	bx	lr

0800e238 <__swhatbuf_r>:
 800e238:	b570      	push	{r4, r5, r6, lr}
 800e23a:	460e      	mov	r6, r1
 800e23c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e240:	4614      	mov	r4, r2
 800e242:	2900      	cmp	r1, #0
 800e244:	461d      	mov	r5, r3
 800e246:	b096      	sub	sp, #88	; 0x58
 800e248:	da08      	bge.n	800e25c <__swhatbuf_r+0x24>
 800e24a:	2200      	movs	r2, #0
 800e24c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e250:	602a      	str	r2, [r5, #0]
 800e252:	061a      	lsls	r2, r3, #24
 800e254:	d410      	bmi.n	800e278 <__swhatbuf_r+0x40>
 800e256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e25a:	e00e      	b.n	800e27a <__swhatbuf_r+0x42>
 800e25c:	466a      	mov	r2, sp
 800e25e:	f000 f903 	bl	800e468 <_fstat_r>
 800e262:	2800      	cmp	r0, #0
 800e264:	dbf1      	blt.n	800e24a <__swhatbuf_r+0x12>
 800e266:	9a01      	ldr	r2, [sp, #4]
 800e268:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e26c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e270:	425a      	negs	r2, r3
 800e272:	415a      	adcs	r2, r3
 800e274:	602a      	str	r2, [r5, #0]
 800e276:	e7ee      	b.n	800e256 <__swhatbuf_r+0x1e>
 800e278:	2340      	movs	r3, #64	; 0x40
 800e27a:	2000      	movs	r0, #0
 800e27c:	6023      	str	r3, [r4, #0]
 800e27e:	b016      	add	sp, #88	; 0x58
 800e280:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e284 <__smakebuf_r>:
 800e284:	898b      	ldrh	r3, [r1, #12]
 800e286:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e288:	079d      	lsls	r5, r3, #30
 800e28a:	4606      	mov	r6, r0
 800e28c:	460c      	mov	r4, r1
 800e28e:	d507      	bpl.n	800e2a0 <__smakebuf_r+0x1c>
 800e290:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e294:	6023      	str	r3, [r4, #0]
 800e296:	6123      	str	r3, [r4, #16]
 800e298:	2301      	movs	r3, #1
 800e29a:	6163      	str	r3, [r4, #20]
 800e29c:	b002      	add	sp, #8
 800e29e:	bd70      	pop	{r4, r5, r6, pc}
 800e2a0:	466a      	mov	r2, sp
 800e2a2:	ab01      	add	r3, sp, #4
 800e2a4:	f7ff ffc8 	bl	800e238 <__swhatbuf_r>
 800e2a8:	9900      	ldr	r1, [sp, #0]
 800e2aa:	4605      	mov	r5, r0
 800e2ac:	4630      	mov	r0, r6
 800e2ae:	f7ff f961 	bl	800d574 <_malloc_r>
 800e2b2:	b948      	cbnz	r0, 800e2c8 <__smakebuf_r+0x44>
 800e2b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2b8:	059a      	lsls	r2, r3, #22
 800e2ba:	d4ef      	bmi.n	800e29c <__smakebuf_r+0x18>
 800e2bc:	f023 0303 	bic.w	r3, r3, #3
 800e2c0:	f043 0302 	orr.w	r3, r3, #2
 800e2c4:	81a3      	strh	r3, [r4, #12]
 800e2c6:	e7e3      	b.n	800e290 <__smakebuf_r+0xc>
 800e2c8:	4b0d      	ldr	r3, [pc, #52]	; (800e300 <__smakebuf_r+0x7c>)
 800e2ca:	62b3      	str	r3, [r6, #40]	; 0x28
 800e2cc:	89a3      	ldrh	r3, [r4, #12]
 800e2ce:	6020      	str	r0, [r4, #0]
 800e2d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2d4:	81a3      	strh	r3, [r4, #12]
 800e2d6:	9b00      	ldr	r3, [sp, #0]
 800e2d8:	6120      	str	r0, [r4, #16]
 800e2da:	6163      	str	r3, [r4, #20]
 800e2dc:	9b01      	ldr	r3, [sp, #4]
 800e2de:	b15b      	cbz	r3, 800e2f8 <__smakebuf_r+0x74>
 800e2e0:	4630      	mov	r0, r6
 800e2e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2e6:	f000 f8d1 	bl	800e48c <_isatty_r>
 800e2ea:	b128      	cbz	r0, 800e2f8 <__smakebuf_r+0x74>
 800e2ec:	89a3      	ldrh	r3, [r4, #12]
 800e2ee:	f023 0303 	bic.w	r3, r3, #3
 800e2f2:	f043 0301 	orr.w	r3, r3, #1
 800e2f6:	81a3      	strh	r3, [r4, #12]
 800e2f8:	89a0      	ldrh	r0, [r4, #12]
 800e2fa:	4305      	orrs	r5, r0
 800e2fc:	81a5      	strh	r5, [r4, #12]
 800e2fe:	e7cd      	b.n	800e29c <__smakebuf_r+0x18>
 800e300:	0800e091 	.word	0x0800e091

0800e304 <_malloc_usable_size_r>:
 800e304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e308:	1f18      	subs	r0, r3, #4
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	bfbc      	itt	lt
 800e30e:	580b      	ldrlt	r3, [r1, r0]
 800e310:	18c0      	addlt	r0, r0, r3
 800e312:	4770      	bx	lr

0800e314 <_raise_r>:
 800e314:	291f      	cmp	r1, #31
 800e316:	b538      	push	{r3, r4, r5, lr}
 800e318:	4604      	mov	r4, r0
 800e31a:	460d      	mov	r5, r1
 800e31c:	d904      	bls.n	800e328 <_raise_r+0x14>
 800e31e:	2316      	movs	r3, #22
 800e320:	6003      	str	r3, [r0, #0]
 800e322:	f04f 30ff 	mov.w	r0, #4294967295
 800e326:	bd38      	pop	{r3, r4, r5, pc}
 800e328:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e32a:	b112      	cbz	r2, 800e332 <_raise_r+0x1e>
 800e32c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e330:	b94b      	cbnz	r3, 800e346 <_raise_r+0x32>
 800e332:	4620      	mov	r0, r4
 800e334:	f000 f830 	bl	800e398 <_getpid_r>
 800e338:	462a      	mov	r2, r5
 800e33a:	4601      	mov	r1, r0
 800e33c:	4620      	mov	r0, r4
 800e33e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e342:	f000 b817 	b.w	800e374 <_kill_r>
 800e346:	2b01      	cmp	r3, #1
 800e348:	d00a      	beq.n	800e360 <_raise_r+0x4c>
 800e34a:	1c59      	adds	r1, r3, #1
 800e34c:	d103      	bne.n	800e356 <_raise_r+0x42>
 800e34e:	2316      	movs	r3, #22
 800e350:	6003      	str	r3, [r0, #0]
 800e352:	2001      	movs	r0, #1
 800e354:	e7e7      	b.n	800e326 <_raise_r+0x12>
 800e356:	2400      	movs	r4, #0
 800e358:	4628      	mov	r0, r5
 800e35a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e35e:	4798      	blx	r3
 800e360:	2000      	movs	r0, #0
 800e362:	e7e0      	b.n	800e326 <_raise_r+0x12>

0800e364 <raise>:
 800e364:	4b02      	ldr	r3, [pc, #8]	; (800e370 <raise+0xc>)
 800e366:	4601      	mov	r1, r0
 800e368:	6818      	ldr	r0, [r3, #0]
 800e36a:	f7ff bfd3 	b.w	800e314 <_raise_r>
 800e36e:	bf00      	nop
 800e370:	2000017c 	.word	0x2000017c

0800e374 <_kill_r>:
 800e374:	b538      	push	{r3, r4, r5, lr}
 800e376:	2300      	movs	r3, #0
 800e378:	4d06      	ldr	r5, [pc, #24]	; (800e394 <_kill_r+0x20>)
 800e37a:	4604      	mov	r4, r0
 800e37c:	4608      	mov	r0, r1
 800e37e:	4611      	mov	r1, r2
 800e380:	602b      	str	r3, [r5, #0]
 800e382:	f7f3 fa38 	bl	80017f6 <_kill>
 800e386:	1c43      	adds	r3, r0, #1
 800e388:	d102      	bne.n	800e390 <_kill_r+0x1c>
 800e38a:	682b      	ldr	r3, [r5, #0]
 800e38c:	b103      	cbz	r3, 800e390 <_kill_r+0x1c>
 800e38e:	6023      	str	r3, [r4, #0]
 800e390:	bd38      	pop	{r3, r4, r5, pc}
 800e392:	bf00      	nop
 800e394:	200019b8 	.word	0x200019b8

0800e398 <_getpid_r>:
 800e398:	f7f3 ba26 	b.w	80017e8 <_getpid>

0800e39c <__sread>:
 800e39c:	b510      	push	{r4, lr}
 800e39e:	460c      	mov	r4, r1
 800e3a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3a4:	f000 f894 	bl	800e4d0 <_read_r>
 800e3a8:	2800      	cmp	r0, #0
 800e3aa:	bfab      	itete	ge
 800e3ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e3ae:	89a3      	ldrhlt	r3, [r4, #12]
 800e3b0:	181b      	addge	r3, r3, r0
 800e3b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e3b6:	bfac      	ite	ge
 800e3b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800e3ba:	81a3      	strhlt	r3, [r4, #12]
 800e3bc:	bd10      	pop	{r4, pc}

0800e3be <__swrite>:
 800e3be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3c2:	461f      	mov	r7, r3
 800e3c4:	898b      	ldrh	r3, [r1, #12]
 800e3c6:	4605      	mov	r5, r0
 800e3c8:	05db      	lsls	r3, r3, #23
 800e3ca:	460c      	mov	r4, r1
 800e3cc:	4616      	mov	r6, r2
 800e3ce:	d505      	bpl.n	800e3dc <__swrite+0x1e>
 800e3d0:	2302      	movs	r3, #2
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3d8:	f000 f868 	bl	800e4ac <_lseek_r>
 800e3dc:	89a3      	ldrh	r3, [r4, #12]
 800e3de:	4632      	mov	r2, r6
 800e3e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e3e4:	81a3      	strh	r3, [r4, #12]
 800e3e6:	4628      	mov	r0, r5
 800e3e8:	463b      	mov	r3, r7
 800e3ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3f2:	f000 b817 	b.w	800e424 <_write_r>

0800e3f6 <__sseek>:
 800e3f6:	b510      	push	{r4, lr}
 800e3f8:	460c      	mov	r4, r1
 800e3fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3fe:	f000 f855 	bl	800e4ac <_lseek_r>
 800e402:	1c43      	adds	r3, r0, #1
 800e404:	89a3      	ldrh	r3, [r4, #12]
 800e406:	bf15      	itete	ne
 800e408:	6560      	strne	r0, [r4, #84]	; 0x54
 800e40a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e40e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e412:	81a3      	strheq	r3, [r4, #12]
 800e414:	bf18      	it	ne
 800e416:	81a3      	strhne	r3, [r4, #12]
 800e418:	bd10      	pop	{r4, pc}

0800e41a <__sclose>:
 800e41a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e41e:	f000 b813 	b.w	800e448 <_close_r>
	...

0800e424 <_write_r>:
 800e424:	b538      	push	{r3, r4, r5, lr}
 800e426:	4604      	mov	r4, r0
 800e428:	4608      	mov	r0, r1
 800e42a:	4611      	mov	r1, r2
 800e42c:	2200      	movs	r2, #0
 800e42e:	4d05      	ldr	r5, [pc, #20]	; (800e444 <_write_r+0x20>)
 800e430:	602a      	str	r2, [r5, #0]
 800e432:	461a      	mov	r2, r3
 800e434:	f7f3 fa16 	bl	8001864 <_write>
 800e438:	1c43      	adds	r3, r0, #1
 800e43a:	d102      	bne.n	800e442 <_write_r+0x1e>
 800e43c:	682b      	ldr	r3, [r5, #0]
 800e43e:	b103      	cbz	r3, 800e442 <_write_r+0x1e>
 800e440:	6023      	str	r3, [r4, #0]
 800e442:	bd38      	pop	{r3, r4, r5, pc}
 800e444:	200019b8 	.word	0x200019b8

0800e448 <_close_r>:
 800e448:	b538      	push	{r3, r4, r5, lr}
 800e44a:	2300      	movs	r3, #0
 800e44c:	4d05      	ldr	r5, [pc, #20]	; (800e464 <_close_r+0x1c>)
 800e44e:	4604      	mov	r4, r0
 800e450:	4608      	mov	r0, r1
 800e452:	602b      	str	r3, [r5, #0]
 800e454:	f7f3 fa22 	bl	800189c <_close>
 800e458:	1c43      	adds	r3, r0, #1
 800e45a:	d102      	bne.n	800e462 <_close_r+0x1a>
 800e45c:	682b      	ldr	r3, [r5, #0]
 800e45e:	b103      	cbz	r3, 800e462 <_close_r+0x1a>
 800e460:	6023      	str	r3, [r4, #0]
 800e462:	bd38      	pop	{r3, r4, r5, pc}
 800e464:	200019b8 	.word	0x200019b8

0800e468 <_fstat_r>:
 800e468:	b538      	push	{r3, r4, r5, lr}
 800e46a:	2300      	movs	r3, #0
 800e46c:	4d06      	ldr	r5, [pc, #24]	; (800e488 <_fstat_r+0x20>)
 800e46e:	4604      	mov	r4, r0
 800e470:	4608      	mov	r0, r1
 800e472:	4611      	mov	r1, r2
 800e474:	602b      	str	r3, [r5, #0]
 800e476:	f7f3 fa1c 	bl	80018b2 <_fstat>
 800e47a:	1c43      	adds	r3, r0, #1
 800e47c:	d102      	bne.n	800e484 <_fstat_r+0x1c>
 800e47e:	682b      	ldr	r3, [r5, #0]
 800e480:	b103      	cbz	r3, 800e484 <_fstat_r+0x1c>
 800e482:	6023      	str	r3, [r4, #0]
 800e484:	bd38      	pop	{r3, r4, r5, pc}
 800e486:	bf00      	nop
 800e488:	200019b8 	.word	0x200019b8

0800e48c <_isatty_r>:
 800e48c:	b538      	push	{r3, r4, r5, lr}
 800e48e:	2300      	movs	r3, #0
 800e490:	4d05      	ldr	r5, [pc, #20]	; (800e4a8 <_isatty_r+0x1c>)
 800e492:	4604      	mov	r4, r0
 800e494:	4608      	mov	r0, r1
 800e496:	602b      	str	r3, [r5, #0]
 800e498:	f7f3 fa1a 	bl	80018d0 <_isatty>
 800e49c:	1c43      	adds	r3, r0, #1
 800e49e:	d102      	bne.n	800e4a6 <_isatty_r+0x1a>
 800e4a0:	682b      	ldr	r3, [r5, #0]
 800e4a2:	b103      	cbz	r3, 800e4a6 <_isatty_r+0x1a>
 800e4a4:	6023      	str	r3, [r4, #0]
 800e4a6:	bd38      	pop	{r3, r4, r5, pc}
 800e4a8:	200019b8 	.word	0x200019b8

0800e4ac <_lseek_r>:
 800e4ac:	b538      	push	{r3, r4, r5, lr}
 800e4ae:	4604      	mov	r4, r0
 800e4b0:	4608      	mov	r0, r1
 800e4b2:	4611      	mov	r1, r2
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	4d05      	ldr	r5, [pc, #20]	; (800e4cc <_lseek_r+0x20>)
 800e4b8:	602a      	str	r2, [r5, #0]
 800e4ba:	461a      	mov	r2, r3
 800e4bc:	f7f3 fa12 	bl	80018e4 <_lseek>
 800e4c0:	1c43      	adds	r3, r0, #1
 800e4c2:	d102      	bne.n	800e4ca <_lseek_r+0x1e>
 800e4c4:	682b      	ldr	r3, [r5, #0]
 800e4c6:	b103      	cbz	r3, 800e4ca <_lseek_r+0x1e>
 800e4c8:	6023      	str	r3, [r4, #0]
 800e4ca:	bd38      	pop	{r3, r4, r5, pc}
 800e4cc:	200019b8 	.word	0x200019b8

0800e4d0 <_read_r>:
 800e4d0:	b538      	push	{r3, r4, r5, lr}
 800e4d2:	4604      	mov	r4, r0
 800e4d4:	4608      	mov	r0, r1
 800e4d6:	4611      	mov	r1, r2
 800e4d8:	2200      	movs	r2, #0
 800e4da:	4d05      	ldr	r5, [pc, #20]	; (800e4f0 <_read_r+0x20>)
 800e4dc:	602a      	str	r2, [r5, #0]
 800e4de:	461a      	mov	r2, r3
 800e4e0:	f7f3 f9a3 	bl	800182a <_read>
 800e4e4:	1c43      	adds	r3, r0, #1
 800e4e6:	d102      	bne.n	800e4ee <_read_r+0x1e>
 800e4e8:	682b      	ldr	r3, [r5, #0]
 800e4ea:	b103      	cbz	r3, 800e4ee <_read_r+0x1e>
 800e4ec:	6023      	str	r3, [r4, #0]
 800e4ee:	bd38      	pop	{r3, r4, r5, pc}
 800e4f0:	200019b8 	.word	0x200019b8

0800e4f4 <_init>:
 800e4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4f6:	bf00      	nop
 800e4f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4fa:	bc08      	pop	{r3}
 800e4fc:	469e      	mov	lr, r3
 800e4fe:	4770      	bx	lr

0800e500 <_fini>:
 800e500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e502:	bf00      	nop
 800e504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e506:	bc08      	pop	{r3}
 800e508:	469e      	mov	lr, r3
 800e50a:	4770      	bx	lr
