
Kauri.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e454  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  0800e568  0800e568  0001e568  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eaac  0800eaac  00020350  2**0
                  CONTENTS
  4 .ARM          00000000  0800eaac  0800eaac  00020350  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800eaac  0800eaac  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eaac  0800eaac  0001eaac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eab0  0800eab0  0001eab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800eab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001288  20000350  0800ee04  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015d8  0800ee04  000215d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c0f  00000000  00000000  00020379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003304  00000000  00000000  00033f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  00037290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f48  00000000  00000000  00038358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aff2  00000000  00000000  000392a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014302  00000000  00000000  00054292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a7ca  00000000  00000000  00068594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2d5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059ac  00000000  00000000  000f2db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000350 	.word	0x20000350
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e54c 	.word	0x0800e54c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000354 	.word	0x20000354
 800014c:	0800e54c 	.word	0x0800e54c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	4605      	mov	r5, r0
 8001028:	460c      	mov	r4, r1
 800102a:	2200      	movs	r2, #0
 800102c:	2300      	movs	r3, #0
 800102e:	4628      	mov	r0, r5
 8001030:	4621      	mov	r1, r4
 8001032:	f7ff fcc3 	bl	80009bc <__aeabi_dcmplt>
 8001036:	b928      	cbnz	r0, 8001044 <__aeabi_d2lz+0x20>
 8001038:	4628      	mov	r0, r5
 800103a:	4621      	mov	r1, r4
 800103c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001040:	f000 b80a 	b.w	8001058 <__aeabi_d2ulz>
 8001044:	4628      	mov	r0, r5
 8001046:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800104a:	f000 f805 	bl	8001058 <__aeabi_d2ulz>
 800104e:	4240      	negs	r0, r0
 8001050:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001054:	bd38      	pop	{r3, r4, r5, pc}
 8001056:	bf00      	nop

08001058 <__aeabi_d2ulz>:
 8001058:	b5d0      	push	{r4, r6, r7, lr}
 800105a:	2200      	movs	r2, #0
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <__aeabi_d2ulz+0x34>)
 800105e:	4606      	mov	r6, r0
 8001060:	460f      	mov	r7, r1
 8001062:	f7ff fa39 	bl	80004d8 <__aeabi_dmul>
 8001066:	f7ff fd0f 	bl	8000a88 <__aeabi_d2uiz>
 800106a:	4604      	mov	r4, r0
 800106c:	f7ff f9ba 	bl	80003e4 <__aeabi_ui2d>
 8001070:	2200      	movs	r2, #0
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <__aeabi_d2ulz+0x38>)
 8001074:	f7ff fa30 	bl	80004d8 <__aeabi_dmul>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4630      	mov	r0, r6
 800107e:	4639      	mov	r1, r7
 8001080:	f7ff f872 	bl	8000168 <__aeabi_dsub>
 8001084:	f7ff fd00 	bl	8000a88 <__aeabi_d2uiz>
 8001088:	4621      	mov	r1, r4
 800108a:	bdd0      	pop	{r4, r6, r7, pc}
 800108c:	3df00000 	.word	0x3df00000
 8001090:	41f00000 	.word	0x41f00000

08001094 <platform_write>:
static stmdev_ctx_t dev_ctx;


static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af04      	add	r7, sp, #16
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	461a      	mov	r2, r3
 80010a0:	460b      	mov	r3, r1
 80010a2:	72fb      	strb	r3, [r7, #11]
 80010a4:	4613      	mov	r3, r2
 80010a6:	813b      	strh	r3, [r7, #8]
  /* Write multiple command */
  reg |= 0x80;
 80010a8:	7afb      	ldrb	r3, [r7, #11]
 80010aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010ae:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Write(handle, LIS331DLH_I2C_ADD_L, reg,
 80010b0:	7afb      	ldrb	r3, [r7, #11]
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b8:	9302      	str	r3, [sp, #8]
 80010ba:	893b      	ldrh	r3, [r7, #8]
 80010bc:	9301      	str	r3, [sp, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	2301      	movs	r3, #1
 80010c4:	2131      	movs	r1, #49	; 0x31
 80010c6:	68f8      	ldr	r0, [r7, #12]
 80010c8:	f001 f902 	bl	80022d0 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
  return 0;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b088      	sub	sp, #32
 80010da:	af04      	add	r7, sp, #16
 80010dc:	60f8      	str	r0, [r7, #12]
 80010de:	607a      	str	r2, [r7, #4]
 80010e0:	461a      	mov	r2, r3
 80010e2:	460b      	mov	r3, r1
 80010e4:	72fb      	strb	r3, [r7, #11]
 80010e6:	4613      	mov	r3, r2
 80010e8:	813b      	strh	r3, [r7, #8]
  /* Read multiple command */
  reg |= 0x80;
 80010ea:	7afb      	ldrb	r3, [r7, #11]
 80010ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010f0:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Read(handle, LIS331DLH_I2C_ADD_L, reg,
 80010f2:	7afb      	ldrb	r3, [r7, #11]
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	893b      	ldrh	r3, [r7, #8]
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	2131      	movs	r1, #49	; 0x31
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	f001 f9db 	bl	80024c4 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <accel_init>:


void accel_init(I2C_HandleTypeDef * i2c_device){
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Initialize mems driver interface */

  dev_ctx.write_reg = platform_write;
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <accel_init+0x5c>)
 8001122:	4a15      	ldr	r2, [pc, #84]	; (8001178 <accel_init+0x60>)
 8001124:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <accel_init+0x5c>)
 8001128:	4a14      	ldr	r2, [pc, #80]	; (800117c <accel_init+0x64>)
 800112a:	605a      	str	r2, [r3, #4]
  dev_ctx.handle = i2c_device;
 800112c:	4a11      	ldr	r2, [pc, #68]	; (8001174 <accel_init+0x5c>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	60d3      	str	r3, [r2, #12]
  /* Initialize platform specific hardware */
  HAL_Delay(5);
 8001132:	2005      	movs	r0, #5
 8001134:	f000 fcd2 	bl	8001adc <HAL_Delay>
  /* Check device ID */
  lis331dlh_device_id_get(&dev_ctx, &whoamI);
 8001138:	4911      	ldr	r1, [pc, #68]	; (8001180 <accel_init+0x68>)
 800113a:	480e      	ldr	r0, [pc, #56]	; (8001174 <accel_init+0x5c>)
 800113c:	f000 f992 	bl	8001464 <lis331dlh_device_id_get>

  if (whoamI != LIS331DLH_ID) {
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <accel_init+0x68>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b32      	cmp	r3, #50	; 0x32
 8001146:	d000      	beq.n	800114a <accel_init+0x32>
	while (1) {
 8001148:	e7fe      	b.n	8001148 <accel_init+0x30>
	  /* manage here device not found */
	}
  }

  /* Enable Block Data Update */
  lis331dlh_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 800114a:	2101      	movs	r1, #1
 800114c:	4809      	ldr	r0, [pc, #36]	; (8001174 <accel_init+0x5c>)
 800114e:	f000 f907 	bl	8001360 <lis331dlh_block_data_update_set>
  /* Set full scale */
  lis331dlh_full_scale_set(&dev_ctx, LIS331DLH_2g);
 8001152:	2100      	movs	r1, #0
 8001154:	4807      	ldr	r0, [pc, #28]	; (8001174 <accel_init+0x5c>)
 8001156:	f000 f8dd 	bl	8001314 <lis331dlh_full_scale_set>
  /* Configure filtering chain */
  /* Accelerometer - High Pass / Slope path */
  lis331dlh_hp_path_set(&dev_ctx, LIS331DLH_HP_DISABLE);
 800115a:	2100      	movs	r1, #0
 800115c:	4805      	ldr	r0, [pc, #20]	; (8001174 <accel_init+0x5c>)
 800115e:	f000 f992 	bl	8001486 <lis331dlh_hp_path_set>
  //lis331dlh_hp_path_set(&dev_ctx, LIS331DLH_HP_ON_OUT);
  //lis331dlh_hp_reset_get(&dev_ctx);
  /* Set Output Data Rate */
  lis331dlh_data_rate_set(&dev_ctx, LIS331DLH_ODR_5Hz);
 8001162:	2105      	movs	r1, #5
 8001164:	4803      	ldr	r0, [pc, #12]	; (8001174 <accel_init+0x5c>)
 8001166:	f000 f8a6 	bl	80012b6 <lis331dlh_data_rate_set>

}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000384 	.word	0x20000384
 8001178:	08001095 	.word	0x08001095
 800117c:	080010d7 	.word	0x080010d7
 8001180:	20000380 	.word	0x20000380

08001184 <accel_get_data>:

int accel_get_data(float * data)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Read samples in polling mode (no int) */
  /* Read output only if new value is available */
  lis331dlh_reg_t reg;
  lis331dlh_status_reg_get(&dev_ctx, &reg.status_reg);
 800118c:	f107 0308 	add.w	r3, r7, #8
 8001190:	4619      	mov	r1, r3
 8001192:	4823      	ldr	r0, [pc, #140]	; (8001220 <accel_get_data+0x9c>)
 8001194:	f000 f90a 	bl	80013ac <lis331dlh_status_reg_get>
  if(!reg.status_reg.zyxda)
 8001198:	7a3b      	ldrb	r3, [r7, #8]
 800119a:	f003 0308 	and.w	r3, r3, #8
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d102      	bne.n	80011aa <accel_get_data+0x26>
	  return -1;
 80011a4:	f04f 33ff 	mov.w	r3, #4294967295
 80011a8:	e036      	b.n	8001218 <accel_get_data+0x94>

  /* Read acceleration data */
  memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 80011aa:	2206      	movs	r2, #6
 80011ac:	2100      	movs	r1, #0
 80011ae:	481d      	ldr	r0, [pc, #116]	; (8001224 <accel_get_data+0xa0>)
 80011b0:	f008 fd96 	bl	8009ce0 <memset>
  lis331dlh_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 80011b4:	491b      	ldr	r1, [pc, #108]	; (8001224 <accel_get_data+0xa0>)
 80011b6:	481a      	ldr	r0, [pc, #104]	; (8001220 <accel_get_data+0x9c>)
 80011b8:	f000 f909 	bl	80013ce <lis331dlh_acceleration_raw_get>
  acceleration_mg[0] =
		  lis331dlh_from_fs2_to_mg(data_raw_acceleration[0]);
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <accel_get_data+0xa0>)
 80011be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f862 	bl	800128c <lis331dlh_from_fs2_to_mg>
 80011c8:	4603      	mov	r3, r0
  acceleration_mg[0] =
 80011ca:	4a17      	ldr	r2, [pc, #92]	; (8001228 <accel_get_data+0xa4>)
 80011cc:	6013      	str	r3, [r2, #0]
  acceleration_mg[1] =
	lis331dlh_from_fs2_to_mg(data_raw_acceleration[1]);
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <accel_get_data+0xa0>)
 80011d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f000 f859 	bl	800128c <lis331dlh_from_fs2_to_mg>
 80011da:	4603      	mov	r3, r0
  acceleration_mg[1] =
 80011dc:	4a12      	ldr	r2, [pc, #72]	; (8001228 <accel_get_data+0xa4>)
 80011de:	6053      	str	r3, [r2, #4]
  acceleration_mg[2] =
	lis331dlh_from_fs2_to_mg(data_raw_acceleration[2]);
 80011e0:	4b10      	ldr	r3, [pc, #64]	; (8001224 <accel_get_data+0xa0>)
 80011e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f850 	bl	800128c <lis331dlh_from_fs2_to_mg>
 80011ec:	4603      	mov	r3, r0
  acceleration_mg[2] =
 80011ee:	4a0e      	ldr	r2, [pc, #56]	; (8001228 <accel_get_data+0xa4>)
 80011f0:	6093      	str	r3, [r2, #8]

  for(size_t i = 0; i < 3; i++)
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	e00b      	b.n	8001210 <accel_get_data+0x8c>
	  data[i] = acceleration_mg[i];
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	4413      	add	r3, r2
 8001200:	4909      	ldr	r1, [pc, #36]	; (8001228 <accel_get_data+0xa4>)
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001208:	601a      	str	r2, [r3, #0]
  for(size_t i = 0; i < 3; i++)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	3301      	adds	r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2b02      	cmp	r3, #2
 8001214:	d9f0      	bls.n	80011f8 <accel_get_data+0x74>
  return 0;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000384 	.word	0x20000384
 8001224:	2000036c 	.word	0x2000036c
 8001228:	20000374 	.word	0x20000374

0800122c <lis331dlh_read_reg>:
  *
  */
int32_t __weak lis331dlh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 800122c:	b590      	push	{r4, r7, lr}
 800122e:	b087      	sub	sp, #28
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	607a      	str	r2, [r7, #4]
 8001236:	461a      	mov	r2, r3
 8001238:	460b      	mov	r3, r1
 800123a:	72fb      	strb	r3, [r7, #11]
 800123c:	4613      	mov	r3, r2
 800123e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	685c      	ldr	r4, [r3, #4]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	68d8      	ldr	r0, [r3, #12]
 8001248:	893b      	ldrh	r3, [r7, #8]
 800124a:	7af9      	ldrb	r1, [r7, #11]
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	47a0      	blx	r4
 8001250:	6178      	str	r0, [r7, #20]

  return ret;
 8001252:	697b      	ldr	r3, [r7, #20]
}
 8001254:	4618      	mov	r0, r3
 8001256:	371c      	adds	r7, #28
 8001258:	46bd      	mov	sp, r7
 800125a:	bd90      	pop	{r4, r7, pc}

0800125c <lis331dlh_write_reg>:
  *
  */
int32_t __weak lis331dlh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 800125c:	b590      	push	{r4, r7, lr}
 800125e:	b087      	sub	sp, #28
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	461a      	mov	r2, r3
 8001268:	460b      	mov	r3, r1
 800126a:	72fb      	strb	r3, [r7, #11]
 800126c:	4613      	mov	r3, r2
 800126e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681c      	ldr	r4, [r3, #0]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	68d8      	ldr	r0, [r3, #12]
 8001278:	893b      	ldrh	r3, [r7, #8]
 800127a:	7af9      	ldrb	r1, [r7, #11]
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	47a0      	blx	r4
 8001280:	6178      	str	r0, [r7, #20]

  return ret;
 8001282:	697b      	ldr	r3, [r7, #20]
}
 8001284:	4618      	mov	r0, r3
 8001286:	371c      	adds	r7, #28
 8001288:	46bd      	mov	sp, r7
 800128a:	bd90      	pop	{r4, r7, pc}

0800128c <lis331dlh_from_fs2_to_mg>:
  * @{
  *
  */

float_t lis331dlh_from_fs2_to_mg(int16_t lsb)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 16.0f);
 8001296:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fd1e 	bl	8000cdc <__aeabi_i2f>
 80012a0:	4603      	mov	r3, r0
 80012a2:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fe20 	bl	8000eec <__aeabi_fdiv>
 80012ac:	4603      	mov	r3, r0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <lis331dlh_data_rate_set>:
  * @param  val         change the values of dr in reg CTRL_REG1
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_data_rate_set(stmdev_ctx_t *ctx, lis331dlh_dr_t val)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b084      	sub	sp, #16
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	460b      	mov	r3, r1
 80012c0:	70fb      	strb	r3, [r7, #3]
  lis331dlh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_CTRL_REG1,
 80012c2:	f107 0208 	add.w	r2, r7, #8
 80012c6:	2301      	movs	r3, #1
 80012c8:	2120      	movs	r1, #32
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ffae 	bl	800122c <lis331dlh_read_reg>
 80012d0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1, 1);

  if (ret == 0)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d118      	bne.n	800130a <lis331dlh_data_rate_set+0x54>
  {
    ctrl_reg1.pm = (uint8_t)val & 0x07U;
 80012d8:	78fb      	ldrb	r3, [r7, #3]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	7a3b      	ldrb	r3, [r7, #8]
 80012e2:	f362 1347 	bfi	r3, r2, #5, #3
 80012e6:	723b      	strb	r3, [r7, #8]
    ctrl_reg1.dr = ((uint8_t)val & 0x30U) >> 4;
 80012e8:	78fb      	ldrb	r3, [r7, #3]
 80012ea:	091b      	lsrs	r3, r3, #4
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	7a3b      	ldrb	r3, [r7, #8]
 80012f4:	f362 03c4 	bfi	r3, r2, #3, #2
 80012f8:	723b      	strb	r3, [r7, #8]
    ret = lis331dlh_write_reg(ctx, LIS331DLH_CTRL_REG1,
 80012fa:	f107 0208 	add.w	r2, r7, #8
 80012fe:	2301      	movs	r3, #1
 8001300:	2120      	movs	r1, #32
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ffaa 	bl	800125c <lis331dlh_write_reg>
 8001308:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1, 1);
  }

  return ret;
 800130a:	68fb      	ldr	r3, [r7, #12]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <lis331dlh_full_scale_set>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_full_scale_set(stmdev_ctx_t *ctx,
                                 lis331dlh_fs_t val)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	70fb      	strb	r3, [r7, #3]
  lis331dlh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_CTRL_REG4,
 8001320:	f107 0208 	add.w	r2, r7, #8
 8001324:	2301      	movs	r3, #1
 8001326:	2123      	movs	r1, #35	; 0x23
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ff7f 	bl	800122c <lis331dlh_read_reg>
 800132e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4, 1);

  if (ret == 0)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10f      	bne.n	8001356 <lis331dlh_full_scale_set+0x42>
  {
    ctrl_reg4.fs = (uint8_t)val;
 8001336:	78fb      	ldrb	r3, [r7, #3]
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	b2da      	uxtb	r2, r3
 800133e:	7a3b      	ldrb	r3, [r7, #8]
 8001340:	f362 1305 	bfi	r3, r2, #4, #2
 8001344:	723b      	strb	r3, [r7, #8]
    ret = lis331dlh_write_reg(ctx, LIS331DLH_CTRL_REG4,
 8001346:	f107 0208 	add.w	r2, r7, #8
 800134a:	2301      	movs	r3, #1
 800134c:	2123      	movs	r1, #35	; 0x23
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff ff84 	bl	800125c <lis331dlh_write_reg>
 8001354:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 8001356:	68fb      	ldr	r3, [r7, #12]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <lis331dlh_block_data_update_set>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_block_data_update_set(stmdev_ctx_t *ctx,
                                        uint8_t val)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	70fb      	strb	r3, [r7, #3]
  lis331dlh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_CTRL_REG4,
 800136c:	f107 0208 	add.w	r2, r7, #8
 8001370:	2301      	movs	r3, #1
 8001372:	2123      	movs	r1, #35	; 0x23
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff ff59 	bl	800122c <lis331dlh_read_reg>
 800137a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4, 1);

  if (ret == 0)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10f      	bne.n	80013a2 <lis331dlh_block_data_update_set+0x42>
  {
    ctrl_reg4.bdu = val;
 8001382:	78fb      	ldrb	r3, [r7, #3]
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	b2da      	uxtb	r2, r3
 800138a:	7a3b      	ldrb	r3, [r7, #8]
 800138c:	f362 13c7 	bfi	r3, r2, #7, #1
 8001390:	723b      	strb	r3, [r7, #8]
    ret = lis331dlh_write_reg(ctx, LIS331DLH_CTRL_REG4,
 8001392:	f107 0208 	add.w	r2, r7, #8
 8001396:	2301      	movs	r3, #1
 8001398:	2123      	movs	r1, #35	; 0x23
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ff5e 	bl	800125c <lis331dlh_write_reg>
 80013a0:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 80013a2:	68fb      	ldr	r3, [r7, #12]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <lis331dlh_status_reg_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_status_reg_get(stmdev_ctx_t *ctx,
                                 lis331dlh_status_reg_t *val)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_STATUS_REG, (uint8_t *) val, 1);
 80013b6:	2301      	movs	r3, #1
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	2127      	movs	r1, #39	; 0x27
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff ff35 	bl	800122c <lis331dlh_read_reg>
 80013c2:	60f8      	str	r0, [r7, #12]

  return ret;
 80013c4:	68fb      	ldr	r3, [r7, #12]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <lis331dlh_acceleration_raw_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b086      	sub	sp, #24
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_OUT_X_L, buff, 6);
 80013d8:	f107 020c 	add.w	r2, r7, #12
 80013dc:	2306      	movs	r3, #6
 80013de:	2128      	movs	r1, #40	; 0x28
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff ff23 	bl	800122c <lis331dlh_read_reg>
 80013e6:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80013e8:	7b7b      	ldrb	r3, [r7, #13]
 80013ea:	b21a      	sxth	r2, r3
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	021b      	lsls	r3, r3, #8
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	7b3b      	ldrb	r3, [r7, #12]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	4413      	add	r3, r2
 8001402:	b29b      	uxth	r3, r3
 8001404:	b21a      	sxth	r2, r3
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800140a:	7bfa      	ldrb	r2, [r7, #15]
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	3302      	adds	r3, #2
 8001410:	b212      	sxth	r2, r2
 8001412:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	3302      	adds	r3, #2
 8001418:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141c:	b29b      	uxth	r3, r3
 800141e:	021b      	lsls	r3, r3, #8
 8001420:	b29a      	uxth	r2, r3
 8001422:	7bbb      	ldrb	r3, [r7, #14]
 8001424:	b29b      	uxth	r3, r3
 8001426:	4413      	add	r3, r2
 8001428:	b29a      	uxth	r2, r3
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	3302      	adds	r3, #2
 800142e:	b212      	sxth	r2, r2
 8001430:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001432:	7c7a      	ldrb	r2, [r7, #17]
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	3304      	adds	r3, #4
 8001438:	b212      	sxth	r2, r2
 800143a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	3304      	adds	r3, #4
 8001440:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001444:	b29b      	uxth	r3, r3
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	b29a      	uxth	r2, r3
 800144a:	7c3b      	ldrb	r3, [r7, #16]
 800144c:	b29b      	uxth	r3, r3
 800144e:	4413      	add	r3, r2
 8001450:	b29a      	uxth	r2, r3
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	3304      	adds	r3, #4
 8001456:	b212      	sxth	r2, r2
 8001458:	801a      	strh	r2, [r3, #0]

  return ret;
 800145a:	697b      	ldr	r3, [r7, #20]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <lis331dlh_device_id_get>:
  * @param  buff        buffer that stores data read
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_WHO_AM_I, buff, 1);
 800146e:	2301      	movs	r3, #1
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	210f      	movs	r1, #15
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff fed9 	bl	800122c <lis331dlh_read_reg>
 800147a:	60f8      	str	r0, [r7, #12]

  return ret;
 800147c:	68fb      	ldr	r3, [r7, #12]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <lis331dlh_hp_path_set>:
  * @param  val         change the values of hpen in reg CTRL_REG2
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_hp_path_set(stmdev_ctx_t *ctx, lis331dlh_hpen_t val)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b084      	sub	sp, #16
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
 800148e:	460b      	mov	r3, r1
 8001490:	70fb      	strb	r3, [r7, #3]
  lis331dlh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_CTRL_REG2,
 8001492:	f107 0208 	add.w	r2, r7, #8
 8001496:	2301      	movs	r3, #1
 8001498:	2121      	movs	r1, #33	; 0x21
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff fec6 	bl	800122c <lis331dlh_read_reg>
 80014a0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg2, 1);

  if (ret == 0)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d118      	bne.n	80014da <lis331dlh_hp_path_set+0x54>
  {
    ctrl_reg2.hpen = (uint8_t)val & 0x03U;
 80014a8:	78fb      	ldrb	r3, [r7, #3]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	7a3b      	ldrb	r3, [r7, #8]
 80014b2:	f362 0383 	bfi	r3, r2, #2, #2
 80014b6:	723b      	strb	r3, [r7, #8]
    ctrl_reg2.fds = ((uint8_t)val & 0x04U) >> 2;
 80014b8:	78fb      	ldrb	r3, [r7, #3]
 80014ba:	089b      	lsrs	r3, r3, #2
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	7a3b      	ldrb	r3, [r7, #8]
 80014c4:	f362 1304 	bfi	r3, r2, #4, #1
 80014c8:	723b      	strb	r3, [r7, #8]
    ret = lis331dlh_write_reg(ctx, LIS331DLH_CTRL_REG2,
 80014ca:	f107 0208 	add.w	r2, r7, #8
 80014ce:	2301      	movs	r3, #1
 80014d0:	2121      	movs	r1, #33	; 0x21
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff fec2 	bl	800125c <lis331dlh_write_reg>
 80014d8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg2, 1);
  }

  return ret;
 80014da:	68fb      	ldr	r3, [r7, #12]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014e8:	b0a0      	sub	sp, #128	; 0x80
 80014ea:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ec:	f000 fa94 	bl	8001a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f0:	f000 f846 	bl	8001580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f4:	f000 f8ce 	bl	8001694 <MX_GPIO_Init>
  MX_I2C1_Init();
 80014f8:	f000 f89e 	bl	8001638 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80014fc:	f007 ff2a 	bl	8009354 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  char text[100] = {0};
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	f107 0310 	add.w	r3, r7, #16
 8001508:	2260      	movs	r2, #96	; 0x60
 800150a:	2100      	movs	r1, #0
 800150c:	4618      	mov	r0, r3
 800150e:	f008 fbe7 	bl	8009ce0 <memset>
  accel_init(&hi2c1);
 8001512:	4819      	ldr	r0, [pc, #100]	; (8001578 <main+0x94>)
 8001514:	f7ff fe00 	bl	8001118 <accel_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  float data[3] = {0};
 8001518:	463b      	mov	r3, r7
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
	  if(!accel_get_data(data)){
 8001522:	463b      	mov	r3, r7
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fe2d 	bl	8001184 <accel_get_data>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1f3      	bne.n	8001518 <main+0x34>
		  sprintf(text,
				  "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
				  data[0], data[1], data[2]);
 8001530:	683b      	ldr	r3, [r7, #0]
		  sprintf(text,
 8001532:	4618      	mov	r0, r3
 8001534:	f7fe ff78 	bl	8000428 <__aeabi_f2d>
 8001538:	4680      	mov	r8, r0
 800153a:	4689      	mov	r9, r1
				  data[0], data[1], data[2]);
 800153c:	687b      	ldr	r3, [r7, #4]
		  sprintf(text,
 800153e:	4618      	mov	r0, r3
 8001540:	f7fe ff72 	bl	8000428 <__aeabi_f2d>
 8001544:	4604      	mov	r4, r0
 8001546:	460d      	mov	r5, r1
				  data[0], data[1], data[2]);
 8001548:	68bb      	ldr	r3, [r7, #8]
		  sprintf(text,
 800154a:	4618      	mov	r0, r3
 800154c:	f7fe ff6c 	bl	8000428 <__aeabi_f2d>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	f107 000c 	add.w	r0, r7, #12
 8001558:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800155c:	e9cd 4500 	strd	r4, r5, [sp]
 8001560:	4642      	mov	r2, r8
 8001562:	464b      	mov	r3, r9
 8001564:	4905      	ldr	r1, [pc, #20]	; (800157c <main+0x98>)
 8001566:	f009 fa35 	bl	800a9d4 <siprintf>
		  CDC_Transmit_FS(text, sizeof(text));
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	2164      	movs	r1, #100	; 0x64
 8001570:	4618      	mov	r0, r3
 8001572:	f007 ffad 	bl	80094d0 <CDC_Transmit_FS>
  {
 8001576:	e7cf      	b.n	8001518 <main+0x34>
 8001578:	20000394 	.word	0x20000394
 800157c:	0800e568 	.word	0x0800e568

08001580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b094      	sub	sp, #80	; 0x50
 8001584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001586:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800158a:	2228      	movs	r2, #40	; 0x28
 800158c:	2100      	movs	r1, #0
 800158e:	4618      	mov	r0, r3
 8001590:	f008 fba6 	bl	8009ce0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015b0:	2301      	movs	r3, #1
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015ba:	2300      	movs	r3, #0
 80015bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015be:	2301      	movs	r3, #1
 80015c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c2:	2302      	movs	r3, #2
 80015c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80015cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015d6:	4618      	mov	r0, r3
 80015d8:	f003 fafe 	bl	8004bd8 <HAL_RCC_OscConfig>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80015e2:	f000 f885 	bl	80016f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e6:	230f      	movs	r3, #15
 80015e8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ea:	2302      	movs	r3, #2
 80015ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015f6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	2101      	movs	r1, #1
 8001602:	4618      	mov	r0, r3
 8001604:	f003 fd6a 	bl	80050dc <HAL_RCC_ClockConfig>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800160e:	f000 f86f 	bl	80016f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001612:	2310      	movs	r3, #16
 8001614:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001616:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800161a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	4618      	mov	r0, r3
 8001620:	f003 fed6 	bl	80053d0 <HAL_RCCEx_PeriphCLKConfig>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800162a:	f000 f861 	bl	80016f0 <Error_Handler>
  }
}
 800162e:	bf00      	nop
 8001630:	3750      	adds	r7, #80	; 0x50
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <MX_I2C1_Init+0x50>)
 800163e:	4a13      	ldr	r2, [pc, #76]	; (800168c <MX_I2C1_Init+0x54>)
 8001640:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <MX_I2C1_Init+0x50>)
 8001644:	4a12      	ldr	r2, [pc, #72]	; (8001690 <MX_I2C1_Init+0x58>)
 8001646:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <MX_I2C1_Init+0x50>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <MX_I2C1_Init+0x50>)
 8001650:	2200      	movs	r2, #0
 8001652:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <MX_I2C1_Init+0x50>)
 8001656:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800165a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800165c:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <MX_I2C1_Init+0x50>)
 800165e:	2200      	movs	r2, #0
 8001660:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <MX_I2C1_Init+0x50>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001668:	4b07      	ldr	r3, [pc, #28]	; (8001688 <MX_I2C1_Init+0x50>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <MX_I2C1_Init+0x50>)
 8001670:	2200      	movs	r2, #0
 8001672:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001674:	4804      	ldr	r0, [pc, #16]	; (8001688 <MX_I2C1_Init+0x50>)
 8001676:	f000 fce7 	bl	8002048 <HAL_I2C_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001680:	f000 f836 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000394 	.word	0x20000394
 800168c:	40005400 	.word	0x40005400
 8001690:	000186a0 	.word	0x000186a0

08001694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800169a:	4b14      	ldr	r3, [pc, #80]	; (80016ec <MX_GPIO_Init+0x58>)
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	4a13      	ldr	r2, [pc, #76]	; (80016ec <MX_GPIO_Init+0x58>)
 80016a0:	f043 0320 	orr.w	r3, r3, #32
 80016a4:	6193      	str	r3, [r2, #24]
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <MX_GPIO_Init+0x58>)
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	f003 0320 	and.w	r3, r3, #32
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <MX_GPIO_Init+0x58>)
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	4a0d      	ldr	r2, [pc, #52]	; (80016ec <MX_GPIO_Init+0x58>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	6193      	str	r3, [r2, #24]
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <MX_GPIO_Init+0x58>)
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <MX_GPIO_Init+0x58>)
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	4a07      	ldr	r2, [pc, #28]	; (80016ec <MX_GPIO_Init+0x58>)
 80016d0:	f043 0308 	orr.w	r3, r3, #8
 80016d4:	6193      	str	r3, [r2, #24]
 80016d6:	4b05      	ldr	r3, [pc, #20]	; (80016ec <MX_GPIO_Init+0x58>)
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]

}
 80016e2:	bf00      	nop
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	40021000 	.word	0x40021000

080016f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f4:	b672      	cpsid	i
}
 80016f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <Error_Handler+0x8>
	...

080016fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <HAL_MspInit+0x5c>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	4a14      	ldr	r2, [pc, #80]	; (8001758 <HAL_MspInit+0x5c>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6193      	str	r3, [r2, #24]
 800170e:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_MspInit+0x5c>)
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171a:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <HAL_MspInit+0x5c>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	4a0e      	ldr	r2, [pc, #56]	; (8001758 <HAL_MspInit+0x5c>)
 8001720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001724:	61d3      	str	r3, [r2, #28]
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <HAL_MspInit+0x5c>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <HAL_MspInit+0x60>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	4a04      	ldr	r2, [pc, #16]	; (800175c <HAL_MspInit+0x60>)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174e:	bf00      	nop
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	40021000 	.word	0x40021000
 800175c:	40010000 	.word	0x40010000

08001760 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a15      	ldr	r2, [pc, #84]	; (80017d0 <HAL_I2C_MspInit+0x70>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d123      	bne.n	80017c8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <HAL_I2C_MspInit+0x74>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a13      	ldr	r2, [pc, #76]	; (80017d4 <HAL_I2C_MspInit+0x74>)
 8001786:	f043 0308 	orr.w	r3, r3, #8
 800178a:	6193      	str	r3, [r2, #24]
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <HAL_I2C_MspInit+0x74>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001798:	23c0      	movs	r3, #192	; 0xc0
 800179a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800179c:	2312      	movs	r3, #18
 800179e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017a0:	2303      	movs	r3, #3
 80017a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	4619      	mov	r1, r3
 80017aa:	480b      	ldr	r0, [pc, #44]	; (80017d8 <HAL_I2C_MspInit+0x78>)
 80017ac:	f000 fac8 	bl	8001d40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <HAL_I2C_MspInit+0x74>)
 80017b2:	69db      	ldr	r3, [r3, #28]
 80017b4:	4a07      	ldr	r2, [pc, #28]	; (80017d4 <HAL_I2C_MspInit+0x74>)
 80017b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017ba:	61d3      	str	r3, [r2, #28]
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <HAL_I2C_MspInit+0x74>)
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017c8:	bf00      	nop
 80017ca:	3720      	adds	r7, #32
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40005400 	.word	0x40005400
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40010c00 	.word	0x40010c00

080017dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <NMI_Handler+0x4>

080017e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <HardFault_Handler+0x4>

080017e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <MemManage_Handler+0x4>

080017ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f2:	e7fe      	b.n	80017f2 <BusFault_Handler+0x4>

080017f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <UsageFault_Handler+0x4>

080017fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr

08001806 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr

08001812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr

0800181e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001822:	f000 f93f 	bl	8001aa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001832:	f001 fd87 	bl	8003344 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200010b8 	.word	0x200010b8

08001840 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return 1;
 8001844:	2301      	movs	r3, #1
}
 8001846:	4618      	mov	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr

0800184e <_kill>:

int _kill(int pid, int sig)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001858:	f008 fa18 	bl	8009c8c <__errno>
 800185c:	4603      	mov	r3, r0
 800185e:	2216      	movs	r2, #22
 8001860:	601a      	str	r2, [r3, #0]
  return -1;
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <_exit>:

void _exit (int status)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001876:	f04f 31ff 	mov.w	r1, #4294967295
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff ffe7 	bl	800184e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001880:	e7fe      	b.n	8001880 <_exit+0x12>

08001882 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b086      	sub	sp, #24
 8001886:	af00      	add	r7, sp, #0
 8001888:	60f8      	str	r0, [r7, #12]
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	e00a      	b.n	80018aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001894:	f3af 8000 	nop.w
 8001898:	4601      	mov	r1, r0
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	1c5a      	adds	r2, r3, #1
 800189e:	60ba      	str	r2, [r7, #8]
 80018a0:	b2ca      	uxtb	r2, r1
 80018a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	3301      	adds	r3, #1
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	dbf0      	blt.n	8001894 <_read+0x12>
  }

  return len;
 80018b2:	687b      	ldr	r3, [r7, #4]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	e009      	b.n	80018e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	1c5a      	adds	r2, r3, #1
 80018d2:	60ba      	str	r2, [r7, #8]
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	3301      	adds	r3, #1
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	dbf1      	blt.n	80018ce <_write+0x12>
  }
  return len;
 80018ea:	687b      	ldr	r3, [r7, #4]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <_close>:

int _close(int file)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr

0800190a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
 8001912:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800191a:	605a      	str	r2, [r3, #4]
  return 0;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr

08001928 <_isatty>:

int _isatty(int file)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001930:	2301      	movs	r3, #1
}
 8001932:	4618      	mov	r0, r3
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr

08001954 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800195c:	4a14      	ldr	r2, [pc, #80]	; (80019b0 <_sbrk+0x5c>)
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <_sbrk+0x60>)
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001968:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <_sbrk+0x64>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d102      	bne.n	8001976 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <_sbrk+0x64>)
 8001972:	4a12      	ldr	r2, [pc, #72]	; (80019bc <_sbrk+0x68>)
 8001974:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <_sbrk+0x64>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4413      	add	r3, r2
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	429a      	cmp	r2, r3
 8001982:	d207      	bcs.n	8001994 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001984:	f008 f982 	bl	8009c8c <__errno>
 8001988:	4603      	mov	r3, r0
 800198a:	220c      	movs	r2, #12
 800198c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
 8001992:	e009      	b.n	80019a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <_sbrk+0x64>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800199a:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <_sbrk+0x64>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	4a05      	ldr	r2, [pc, #20]	; (80019b8 <_sbrk+0x64>)
 80019a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019a6:	68fb      	ldr	r3, [r7, #12]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20005000 	.word	0x20005000
 80019b4:	00000400 	.word	0x00000400
 80019b8:	200003e8 	.word	0x200003e8
 80019bc:	200015d8 	.word	0x200015d8

080019c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019cc:	f7ff fff8 	bl	80019c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019d0:	480b      	ldr	r0, [pc, #44]	; (8001a00 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019d2:	490c      	ldr	r1, [pc, #48]	; (8001a04 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019d4:	4a0c      	ldr	r2, [pc, #48]	; (8001a08 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d8:	e002      	b.n	80019e0 <LoopCopyDataInit>

080019da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019de:	3304      	adds	r3, #4

080019e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e4:	d3f9      	bcc.n	80019da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019e6:	4a09      	ldr	r2, [pc, #36]	; (8001a0c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019e8:	4c09      	ldr	r4, [pc, #36]	; (8001a10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ec:	e001      	b.n	80019f2 <LoopFillZerobss>

080019ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f0:	3204      	adds	r2, #4

080019f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f4:	d3fb      	bcc.n	80019ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019f6:	f008 f94f 	bl	8009c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019fa:	f7ff fd73 	bl	80014e4 <main>
  bx lr
 80019fe:	4770      	bx	lr
  ldr r0, =_sdata
 8001a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a04:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8001a08:	0800eab4 	.word	0x0800eab4
  ldr r2, =_sbss
 8001a0c:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8001a10:	200015d8 	.word	0x200015d8

08001a14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a14:	e7fe      	b.n	8001a14 <ADC1_2_IRQHandler>
	...

08001a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a1c:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <HAL_Init+0x28>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a07      	ldr	r2, [pc, #28]	; (8001a40 <HAL_Init+0x28>)
 8001a22:	f043 0310 	orr.w	r3, r3, #16
 8001a26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a28:	2003      	movs	r0, #3
 8001a2a:	f000 f947 	bl	8001cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a2e:	200f      	movs	r0, #15
 8001a30:	f000 f808 	bl	8001a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a34:	f7ff fe62 	bl	80016fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40022000 	.word	0x40022000

08001a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_InitTick+0x54>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_InitTick+0x58>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	4619      	mov	r1, r3
 8001a56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 f95f 	bl	8001d26 <HAL_SYSTICK_Config>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00e      	b.n	8001a90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b0f      	cmp	r3, #15
 8001a76:	d80a      	bhi.n	8001a8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a80:	f000 f927 	bl	8001cd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a84:	4a06      	ldr	r2, [pc, #24]	; (8001aa0 <HAL_InitTick+0x5c>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e000      	b.n	8001a90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	20000008 	.word	0x20000008
 8001aa0:	20000004 	.word	0x20000004

08001aa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_IncTick+0x1c>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <HAL_IncTick+0x20>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	4a03      	ldr	r2, [pc, #12]	; (8001ac4 <HAL_IncTick+0x20>)
 8001ab6:	6013      	str	r3, [r2, #0]
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr
 8001ac0:	20000008 	.word	0x20000008
 8001ac4:	200003ec 	.word	0x200003ec

08001ac8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return uwTick;
 8001acc:	4b02      	ldr	r3, [pc, #8]	; (8001ad8 <HAL_GetTick+0x10>)
 8001ace:	681b      	ldr	r3, [r3, #0]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	200003ec 	.word	0x200003ec

08001adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae4:	f7ff fff0 	bl	8001ac8 <HAL_GetTick>
 8001ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af4:	d005      	beq.n	8001b02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001af6:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <HAL_Delay+0x44>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4413      	add	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b02:	bf00      	nop
 8001b04:	f7ff ffe0 	bl	8001ac8 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d8f7      	bhi.n	8001b04 <HAL_Delay+0x28>
  {
  }
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000008 	.word	0x20000008

08001b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <__NVIC_SetPriorityGrouping+0x44>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b40:	4013      	ands	r3, r2
 8001b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b56:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <__NVIC_SetPriorityGrouping+0x44>)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	60d3      	str	r3, [r2, #12]
}
 8001b5c:	bf00      	nop
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b70:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <__NVIC_GetPriorityGrouping+0x18>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	0a1b      	lsrs	r3, r3, #8
 8001b76:	f003 0307 	and.w	r3, r3, #7
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	db0b      	blt.n	8001bb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	f003 021f 	and.w	r2, r3, #31
 8001ba0:	4906      	ldr	r1, [pc, #24]	; (8001bbc <__NVIC_EnableIRQ+0x34>)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	095b      	lsrs	r3, r3, #5
 8001ba8:	2001      	movs	r0, #1
 8001baa:	fa00 f202 	lsl.w	r2, r0, r2
 8001bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr
 8001bbc:	e000e100 	.word	0xe000e100

08001bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	6039      	str	r1, [r7, #0]
 8001bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	db0a      	blt.n	8001bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	490c      	ldr	r1, [pc, #48]	; (8001c0c <__NVIC_SetPriority+0x4c>)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	0112      	lsls	r2, r2, #4
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	440b      	add	r3, r1
 8001be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be8:	e00a      	b.n	8001c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	4908      	ldr	r1, [pc, #32]	; (8001c10 <__NVIC_SetPriority+0x50>)
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	3b04      	subs	r3, #4
 8001bf8:	0112      	lsls	r2, r2, #4
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	761a      	strb	r2, [r3, #24]
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000e100 	.word	0xe000e100
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b089      	sub	sp, #36	; 0x24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f1c3 0307 	rsb	r3, r3, #7
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	bf28      	it	cs
 8001c32:	2304      	movcs	r3, #4
 8001c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3304      	adds	r3, #4
 8001c3a:	2b06      	cmp	r3, #6
 8001c3c:	d902      	bls.n	8001c44 <NVIC_EncodePriority+0x30>
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3b03      	subs	r3, #3
 8001c42:	e000      	b.n	8001c46 <NVIC_EncodePriority+0x32>
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	f04f 32ff 	mov.w	r2, #4294967295
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43da      	mvns	r2, r3
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	401a      	ands	r2, r3
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	fa01 f303 	lsl.w	r3, r1, r3
 8001c66:	43d9      	mvns	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c6c:	4313      	orrs	r3, r2
         );
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3724      	adds	r7, #36	; 0x24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c88:	d301      	bcc.n	8001c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e00f      	b.n	8001cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <SysTick_Config+0x40>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c96:	210f      	movs	r1, #15
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9c:	f7ff ff90 	bl	8001bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <SysTick_Config+0x40>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca6:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <SysTick_Config+0x40>)
 8001ca8:	2207      	movs	r2, #7
 8001caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	e000e010 	.word	0xe000e010

08001cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff ff2d 	bl	8001b24 <__NVIC_SetPriorityGrouping>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b086      	sub	sp, #24
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce4:	f7ff ff42 	bl	8001b6c <__NVIC_GetPriorityGrouping>
 8001ce8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	68b9      	ldr	r1, [r7, #8]
 8001cee:	6978      	ldr	r0, [r7, #20]
 8001cf0:	f7ff ff90 	bl	8001c14 <NVIC_EncodePriority>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ff5f 	bl	8001bc0 <__NVIC_SetPriority>
}
 8001d02:	bf00      	nop
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	4603      	mov	r3, r0
 8001d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff35 	bl	8001b88 <__NVIC_EnableIRQ>
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff ffa2 	bl	8001c78 <SysTick_Config>
 8001d34:	4603      	mov	r3, r0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b08b      	sub	sp, #44	; 0x2c
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d52:	e169      	b.n	8002028 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d54:	2201      	movs	r2, #1
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	69fa      	ldr	r2, [r7, #28]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	f040 8158 	bne.w	8002022 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	4a9a      	ldr	r2, [pc, #616]	; (8001fe0 <HAL_GPIO_Init+0x2a0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d05e      	beq.n	8001e3a <HAL_GPIO_Init+0xfa>
 8001d7c:	4a98      	ldr	r2, [pc, #608]	; (8001fe0 <HAL_GPIO_Init+0x2a0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d875      	bhi.n	8001e6e <HAL_GPIO_Init+0x12e>
 8001d82:	4a98      	ldr	r2, [pc, #608]	; (8001fe4 <HAL_GPIO_Init+0x2a4>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d058      	beq.n	8001e3a <HAL_GPIO_Init+0xfa>
 8001d88:	4a96      	ldr	r2, [pc, #600]	; (8001fe4 <HAL_GPIO_Init+0x2a4>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d86f      	bhi.n	8001e6e <HAL_GPIO_Init+0x12e>
 8001d8e:	4a96      	ldr	r2, [pc, #600]	; (8001fe8 <HAL_GPIO_Init+0x2a8>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d052      	beq.n	8001e3a <HAL_GPIO_Init+0xfa>
 8001d94:	4a94      	ldr	r2, [pc, #592]	; (8001fe8 <HAL_GPIO_Init+0x2a8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d869      	bhi.n	8001e6e <HAL_GPIO_Init+0x12e>
 8001d9a:	4a94      	ldr	r2, [pc, #592]	; (8001fec <HAL_GPIO_Init+0x2ac>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d04c      	beq.n	8001e3a <HAL_GPIO_Init+0xfa>
 8001da0:	4a92      	ldr	r2, [pc, #584]	; (8001fec <HAL_GPIO_Init+0x2ac>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d863      	bhi.n	8001e6e <HAL_GPIO_Init+0x12e>
 8001da6:	4a92      	ldr	r2, [pc, #584]	; (8001ff0 <HAL_GPIO_Init+0x2b0>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d046      	beq.n	8001e3a <HAL_GPIO_Init+0xfa>
 8001dac:	4a90      	ldr	r2, [pc, #576]	; (8001ff0 <HAL_GPIO_Init+0x2b0>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d85d      	bhi.n	8001e6e <HAL_GPIO_Init+0x12e>
 8001db2:	2b12      	cmp	r3, #18
 8001db4:	d82a      	bhi.n	8001e0c <HAL_GPIO_Init+0xcc>
 8001db6:	2b12      	cmp	r3, #18
 8001db8:	d859      	bhi.n	8001e6e <HAL_GPIO_Init+0x12e>
 8001dba:	a201      	add	r2, pc, #4	; (adr r2, 8001dc0 <HAL_GPIO_Init+0x80>)
 8001dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc0:	08001e3b 	.word	0x08001e3b
 8001dc4:	08001e15 	.word	0x08001e15
 8001dc8:	08001e27 	.word	0x08001e27
 8001dcc:	08001e69 	.word	0x08001e69
 8001dd0:	08001e6f 	.word	0x08001e6f
 8001dd4:	08001e6f 	.word	0x08001e6f
 8001dd8:	08001e6f 	.word	0x08001e6f
 8001ddc:	08001e6f 	.word	0x08001e6f
 8001de0:	08001e6f 	.word	0x08001e6f
 8001de4:	08001e6f 	.word	0x08001e6f
 8001de8:	08001e6f 	.word	0x08001e6f
 8001dec:	08001e6f 	.word	0x08001e6f
 8001df0:	08001e6f 	.word	0x08001e6f
 8001df4:	08001e6f 	.word	0x08001e6f
 8001df8:	08001e6f 	.word	0x08001e6f
 8001dfc:	08001e6f 	.word	0x08001e6f
 8001e00:	08001e6f 	.word	0x08001e6f
 8001e04:	08001e1d 	.word	0x08001e1d
 8001e08:	08001e31 	.word	0x08001e31
 8001e0c:	4a79      	ldr	r2, [pc, #484]	; (8001ff4 <HAL_GPIO_Init+0x2b4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d013      	beq.n	8001e3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e12:	e02c      	b.n	8001e6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	623b      	str	r3, [r7, #32]
          break;
 8001e1a:	e029      	b.n	8001e70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	3304      	adds	r3, #4
 8001e22:	623b      	str	r3, [r7, #32]
          break;
 8001e24:	e024      	b.n	8001e70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	3308      	adds	r3, #8
 8001e2c:	623b      	str	r3, [r7, #32]
          break;
 8001e2e:	e01f      	b.n	8001e70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	330c      	adds	r3, #12
 8001e36:	623b      	str	r3, [r7, #32]
          break;
 8001e38:	e01a      	b.n	8001e70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d102      	bne.n	8001e48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e42:	2304      	movs	r3, #4
 8001e44:	623b      	str	r3, [r7, #32]
          break;
 8001e46:	e013      	b.n	8001e70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d105      	bne.n	8001e5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e50:	2308      	movs	r3, #8
 8001e52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69fa      	ldr	r2, [r7, #28]
 8001e58:	611a      	str	r2, [r3, #16]
          break;
 8001e5a:	e009      	b.n	8001e70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e5c:	2308      	movs	r3, #8
 8001e5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	69fa      	ldr	r2, [r7, #28]
 8001e64:	615a      	str	r2, [r3, #20]
          break;
 8001e66:	e003      	b.n	8001e70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	623b      	str	r3, [r7, #32]
          break;
 8001e6c:	e000      	b.n	8001e70 <HAL_GPIO_Init+0x130>
          break;
 8001e6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	2bff      	cmp	r3, #255	; 0xff
 8001e74:	d801      	bhi.n	8001e7a <HAL_GPIO_Init+0x13a>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	e001      	b.n	8001e7e <HAL_GPIO_Init+0x13e>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	2bff      	cmp	r3, #255	; 0xff
 8001e84:	d802      	bhi.n	8001e8c <HAL_GPIO_Init+0x14c>
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	e002      	b.n	8001e92 <HAL_GPIO_Init+0x152>
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	3b08      	subs	r3, #8
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	210f      	movs	r1, #15
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	6a39      	ldr	r1, [r7, #32]
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eac:	431a      	orrs	r2, r3
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 80b1 	beq.w	8002022 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ec0:	4b4d      	ldr	r3, [pc, #308]	; (8001ff8 <HAL_GPIO_Init+0x2b8>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	4a4c      	ldr	r2, [pc, #304]	; (8001ff8 <HAL_GPIO_Init+0x2b8>)
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	6193      	str	r3, [r2, #24]
 8001ecc:	4b4a      	ldr	r3, [pc, #296]	; (8001ff8 <HAL_GPIO_Init+0x2b8>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ed8:	4a48      	ldr	r2, [pc, #288]	; (8001ffc <HAL_GPIO_Init+0x2bc>)
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	089b      	lsrs	r3, r3, #2
 8001ede:	3302      	adds	r3, #2
 8001ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	220f      	movs	r2, #15
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a40      	ldr	r2, [pc, #256]	; (8002000 <HAL_GPIO_Init+0x2c0>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d013      	beq.n	8001f2c <HAL_GPIO_Init+0x1ec>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a3f      	ldr	r2, [pc, #252]	; (8002004 <HAL_GPIO_Init+0x2c4>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d00d      	beq.n	8001f28 <HAL_GPIO_Init+0x1e8>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a3e      	ldr	r2, [pc, #248]	; (8002008 <HAL_GPIO_Init+0x2c8>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d007      	beq.n	8001f24 <HAL_GPIO_Init+0x1e4>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a3d      	ldr	r2, [pc, #244]	; (800200c <HAL_GPIO_Init+0x2cc>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d101      	bne.n	8001f20 <HAL_GPIO_Init+0x1e0>
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e006      	b.n	8001f2e <HAL_GPIO_Init+0x1ee>
 8001f20:	2304      	movs	r3, #4
 8001f22:	e004      	b.n	8001f2e <HAL_GPIO_Init+0x1ee>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e002      	b.n	8001f2e <HAL_GPIO_Init+0x1ee>
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e000      	b.n	8001f2e <HAL_GPIO_Init+0x1ee>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f30:	f002 0203 	and.w	r2, r2, #3
 8001f34:	0092      	lsls	r2, r2, #2
 8001f36:	4093      	lsls	r3, r2
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f3e:	492f      	ldr	r1, [pc, #188]	; (8001ffc <HAL_GPIO_Init+0x2bc>)
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	089b      	lsrs	r3, r3, #2
 8001f44:	3302      	adds	r3, #2
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d006      	beq.n	8001f66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f58:	4b2d      	ldr	r3, [pc, #180]	; (8002010 <HAL_GPIO_Init+0x2d0>)
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	492c      	ldr	r1, [pc, #176]	; (8002010 <HAL_GPIO_Init+0x2d0>)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	608b      	str	r3, [r1, #8]
 8001f64:	e006      	b.n	8001f74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f66:	4b2a      	ldr	r3, [pc, #168]	; (8002010 <HAL_GPIO_Init+0x2d0>)
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	4928      	ldr	r1, [pc, #160]	; (8002010 <HAL_GPIO_Init+0x2d0>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d006      	beq.n	8001f8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f80:	4b23      	ldr	r3, [pc, #140]	; (8002010 <HAL_GPIO_Init+0x2d0>)
 8001f82:	68da      	ldr	r2, [r3, #12]
 8001f84:	4922      	ldr	r1, [pc, #136]	; (8002010 <HAL_GPIO_Init+0x2d0>)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	60cb      	str	r3, [r1, #12]
 8001f8c:	e006      	b.n	8001f9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f8e:	4b20      	ldr	r3, [pc, #128]	; (8002010 <HAL_GPIO_Init+0x2d0>)
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	491e      	ldr	r1, [pc, #120]	; (8002010 <HAL_GPIO_Init+0x2d0>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d006      	beq.n	8001fb6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fa8:	4b19      	ldr	r3, [pc, #100]	; (8002010 <HAL_GPIO_Init+0x2d0>)
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	4918      	ldr	r1, [pc, #96]	; (8002010 <HAL_GPIO_Init+0x2d0>)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	604b      	str	r3, [r1, #4]
 8001fb4:	e006      	b.n	8001fc4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fb6:	4b16      	ldr	r3, [pc, #88]	; (8002010 <HAL_GPIO_Init+0x2d0>)
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	4914      	ldr	r1, [pc, #80]	; (8002010 <HAL_GPIO_Init+0x2d0>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d021      	beq.n	8002014 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fd0:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <HAL_GPIO_Init+0x2d0>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	490e      	ldr	r1, [pc, #56]	; (8002010 <HAL_GPIO_Init+0x2d0>)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	600b      	str	r3, [r1, #0]
 8001fdc:	e021      	b.n	8002022 <HAL_GPIO_Init+0x2e2>
 8001fde:	bf00      	nop
 8001fe0:	10320000 	.word	0x10320000
 8001fe4:	10310000 	.word	0x10310000
 8001fe8:	10220000 	.word	0x10220000
 8001fec:	10210000 	.word	0x10210000
 8001ff0:	10120000 	.word	0x10120000
 8001ff4:	10110000 	.word	0x10110000
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40010000 	.word	0x40010000
 8002000:	40010800 	.word	0x40010800
 8002004:	40010c00 	.word	0x40010c00
 8002008:	40011000 	.word	0x40011000
 800200c:	40011400 	.word	0x40011400
 8002010:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <HAL_GPIO_Init+0x304>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	43db      	mvns	r3, r3
 800201c:	4909      	ldr	r1, [pc, #36]	; (8002044 <HAL_GPIO_Init+0x304>)
 800201e:	4013      	ands	r3, r2
 8002020:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	3301      	adds	r3, #1
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	fa22 f303 	lsr.w	r3, r2, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	f47f ae8e 	bne.w	8001d54 <HAL_GPIO_Init+0x14>
  }
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	372c      	adds	r7, #44	; 0x2c
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr
 8002044:	40010400 	.word	0x40010400

08002048 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e12b      	b.n	80022b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d106      	bne.n	8002074 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff fb76 	bl	8001760 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2224      	movs	r2, #36	; 0x24
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0201 	bic.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800209a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020ac:	f003 f95e 	bl	800536c <HAL_RCC_GetPCLK1Freq>
 80020b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4a81      	ldr	r2, [pc, #516]	; (80022bc <HAL_I2C_Init+0x274>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d807      	bhi.n	80020cc <HAL_I2C_Init+0x84>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4a80      	ldr	r2, [pc, #512]	; (80022c0 <HAL_I2C_Init+0x278>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	bf94      	ite	ls
 80020c4:	2301      	movls	r3, #1
 80020c6:	2300      	movhi	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	e006      	b.n	80020da <HAL_I2C_Init+0x92>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4a7d      	ldr	r2, [pc, #500]	; (80022c4 <HAL_I2C_Init+0x27c>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	bf94      	ite	ls
 80020d4:	2301      	movls	r3, #1
 80020d6:	2300      	movhi	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e0e7      	b.n	80022b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4a78      	ldr	r2, [pc, #480]	; (80022c8 <HAL_I2C_Init+0x280>)
 80020e6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ea:	0c9b      	lsrs	r3, r3, #18
 80020ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	430a      	orrs	r2, r1
 8002100:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	4a6a      	ldr	r2, [pc, #424]	; (80022bc <HAL_I2C_Init+0x274>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d802      	bhi.n	800211c <HAL_I2C_Init+0xd4>
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	3301      	adds	r3, #1
 800211a:	e009      	b.n	8002130 <HAL_I2C_Init+0xe8>
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002122:	fb02 f303 	mul.w	r3, r2, r3
 8002126:	4a69      	ldr	r2, [pc, #420]	; (80022cc <HAL_I2C_Init+0x284>)
 8002128:	fba2 2303 	umull	r2, r3, r2, r3
 800212c:	099b      	lsrs	r3, r3, #6
 800212e:	3301      	adds	r3, #1
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	430b      	orrs	r3, r1
 8002136:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002142:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	495c      	ldr	r1, [pc, #368]	; (80022bc <HAL_I2C_Init+0x274>)
 800214c:	428b      	cmp	r3, r1
 800214e:	d819      	bhi.n	8002184 <HAL_I2C_Init+0x13c>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	1e59      	subs	r1, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	fbb1 f3f3 	udiv	r3, r1, r3
 800215e:	1c59      	adds	r1, r3, #1
 8002160:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002164:	400b      	ands	r3, r1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00a      	beq.n	8002180 <HAL_I2C_Init+0x138>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	1e59      	subs	r1, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	fbb1 f3f3 	udiv	r3, r1, r3
 8002178:	3301      	adds	r3, #1
 800217a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800217e:	e051      	b.n	8002224 <HAL_I2C_Init+0x1dc>
 8002180:	2304      	movs	r3, #4
 8002182:	e04f      	b.n	8002224 <HAL_I2C_Init+0x1dc>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d111      	bne.n	80021b0 <HAL_I2C_Init+0x168>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	1e58      	subs	r0, r3, #1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6859      	ldr	r1, [r3, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	440b      	add	r3, r1
 800219a:	fbb0 f3f3 	udiv	r3, r0, r3
 800219e:	3301      	adds	r3, #1
 80021a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	e012      	b.n	80021d6 <HAL_I2C_Init+0x18e>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	1e58      	subs	r0, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6859      	ldr	r1, [r3, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	0099      	lsls	r1, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021c6:	3301      	adds	r3, #1
 80021c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	bf0c      	ite	eq
 80021d0:	2301      	moveq	r3, #1
 80021d2:	2300      	movne	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_I2C_Init+0x196>
 80021da:	2301      	movs	r3, #1
 80021dc:	e022      	b.n	8002224 <HAL_I2C_Init+0x1dc>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10e      	bne.n	8002204 <HAL_I2C_Init+0x1bc>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	1e58      	subs	r0, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6859      	ldr	r1, [r3, #4]
 80021ee:	460b      	mov	r3, r1
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	440b      	add	r3, r1
 80021f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80021f8:	3301      	adds	r3, #1
 80021fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002202:	e00f      	b.n	8002224 <HAL_I2C_Init+0x1dc>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	1e58      	subs	r0, r3, #1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6859      	ldr	r1, [r3, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	0099      	lsls	r1, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	fbb0 f3f3 	udiv	r3, r0, r3
 800221a:	3301      	adds	r3, #1
 800221c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002220:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	6809      	ldr	r1, [r1, #0]
 8002228:	4313      	orrs	r3, r2
 800222a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69da      	ldr	r2, [r3, #28]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002252:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6911      	ldr	r1, [r2, #16]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	68d2      	ldr	r2, [r2, #12]
 800225e:	4311      	orrs	r1, r2
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6812      	ldr	r2, [r2, #0]
 8002264:	430b      	orrs	r3, r1
 8002266:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695a      	ldr	r2, [r3, #20]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0201 	orr.w	r2, r2, #1
 8002292:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2220      	movs	r2, #32
 800229e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	000186a0 	.word	0x000186a0
 80022c0:	001e847f 	.word	0x001e847f
 80022c4:	003d08ff 	.word	0x003d08ff
 80022c8:	431bde83 	.word	0x431bde83
 80022cc:	10624dd3 	.word	0x10624dd3

080022d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af02      	add	r7, sp, #8
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	4608      	mov	r0, r1
 80022da:	4611      	mov	r1, r2
 80022dc:	461a      	mov	r2, r3
 80022de:	4603      	mov	r3, r0
 80022e0:	817b      	strh	r3, [r7, #10]
 80022e2:	460b      	mov	r3, r1
 80022e4:	813b      	strh	r3, [r7, #8]
 80022e6:	4613      	mov	r3, r2
 80022e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022ea:	f7ff fbed 	bl	8001ac8 <HAL_GetTick>
 80022ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b20      	cmp	r3, #32
 80022fa:	f040 80d9 	bne.w	80024b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	2319      	movs	r3, #25
 8002304:	2201      	movs	r2, #1
 8002306:	496d      	ldr	r1, [pc, #436]	; (80024bc <HAL_I2C_Mem_Write+0x1ec>)
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f000 fcc1 	bl	8002c90 <I2C_WaitOnFlagUntilTimeout>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002314:	2302      	movs	r3, #2
 8002316:	e0cc      	b.n	80024b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <HAL_I2C_Mem_Write+0x56>
 8002322:	2302      	movs	r3, #2
 8002324:	e0c5      	b.n	80024b2 <HAL_I2C_Mem_Write+0x1e2>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b01      	cmp	r3, #1
 800233a:	d007      	beq.n	800234c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0201 	orr.w	r2, r2, #1
 800234a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800235a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2221      	movs	r2, #33	; 0x21
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2240      	movs	r2, #64	; 0x40
 8002368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6a3a      	ldr	r2, [r7, #32]
 8002376:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800237c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4a4d      	ldr	r2, [pc, #308]	; (80024c0 <HAL_I2C_Mem_Write+0x1f0>)
 800238c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800238e:	88f8      	ldrh	r0, [r7, #6]
 8002390:	893a      	ldrh	r2, [r7, #8]
 8002392:	8979      	ldrh	r1, [r7, #10]
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	9301      	str	r3, [sp, #4]
 8002398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	4603      	mov	r3, r0
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 faf8 	bl	8002994 <I2C_RequestMemoryWrite>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d052      	beq.n	8002450 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e081      	b.n	80024b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 fd86 	bl	8002ec4 <I2C_WaitOnTXEFlagUntilTimeout>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00d      	beq.n	80023da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d107      	bne.n	80023d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e06b      	b.n	80024b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	781a      	ldrb	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002400:	b29b      	uxth	r3, r3
 8002402:	3b01      	subs	r3, #1
 8002404:	b29a      	uxth	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b04      	cmp	r3, #4
 8002416:	d11b      	bne.n	8002450 <HAL_I2C_Mem_Write+0x180>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241c:	2b00      	cmp	r3, #0
 800241e:	d017      	beq.n	8002450 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	781a      	ldrb	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243a:	3b01      	subs	r3, #1
 800243c:	b29a      	uxth	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002446:	b29b      	uxth	r3, r3
 8002448:	3b01      	subs	r3, #1
 800244a:	b29a      	uxth	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1aa      	bne.n	80023ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f000 fd79 	bl	8002f54 <I2C_WaitOnBTFFlagUntilTimeout>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00d      	beq.n	8002484 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	2b04      	cmp	r3, #4
 800246e:	d107      	bne.n	8002480 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800247e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e016      	b.n	80024b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002492:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2220      	movs	r2, #32
 8002498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024ac:	2300      	movs	r3, #0
 80024ae:	e000      	b.n	80024b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80024b0:	2302      	movs	r3, #2
  }
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	00100002 	.word	0x00100002
 80024c0:	ffff0000 	.word	0xffff0000

080024c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08c      	sub	sp, #48	; 0x30
 80024c8:	af02      	add	r7, sp, #8
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	4608      	mov	r0, r1
 80024ce:	4611      	mov	r1, r2
 80024d0:	461a      	mov	r2, r3
 80024d2:	4603      	mov	r3, r0
 80024d4:	817b      	strh	r3, [r7, #10]
 80024d6:	460b      	mov	r3, r1
 80024d8:	813b      	strh	r3, [r7, #8]
 80024da:	4613      	mov	r3, r2
 80024dc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024e2:	f7ff faf1 	bl	8001ac8 <HAL_GetTick>
 80024e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b20      	cmp	r3, #32
 80024f2:	f040 8244 	bne.w	800297e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	2319      	movs	r3, #25
 80024fc:	2201      	movs	r2, #1
 80024fe:	4982      	ldr	r1, [pc, #520]	; (8002708 <HAL_I2C_Mem_Read+0x244>)
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 fbc5 	bl	8002c90 <I2C_WaitOnFlagUntilTimeout>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800250c:	2302      	movs	r3, #2
 800250e:	e237      	b.n	8002980 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <HAL_I2C_Mem_Read+0x5a>
 800251a:	2302      	movs	r3, #2
 800251c:	e230      	b.n	8002980 <HAL_I2C_Mem_Read+0x4bc>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b01      	cmp	r3, #1
 8002532:	d007      	beq.n	8002544 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0201 	orr.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002552:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2222      	movs	r2, #34	; 0x22
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2240      	movs	r2, #64	; 0x40
 8002560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800256e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002574:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4a62      	ldr	r2, [pc, #392]	; (800270c <HAL_I2C_Mem_Read+0x248>)
 8002584:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002586:	88f8      	ldrh	r0, [r7, #6]
 8002588:	893a      	ldrh	r2, [r7, #8]
 800258a:	8979      	ldrh	r1, [r7, #10]
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	9301      	str	r3, [sp, #4]
 8002590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	4603      	mov	r3, r0
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 fa92 	bl	8002ac0 <I2C_RequestMemoryRead>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e1ec      	b.n	8002980 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d113      	bne.n	80025d6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	61fb      	str	r3, [r7, #28]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	61fb      	str	r3, [r7, #28]
 80025c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	e1c0      	b.n	8002958 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d11e      	bne.n	800261c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80025ee:	b672      	cpsid	i
}
 80025f0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025f2:	2300      	movs	r3, #0
 80025f4:	61bb      	str	r3, [r7, #24]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	61bb      	str	r3, [r7, #24]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	61bb      	str	r3, [r7, #24]
 8002606:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002616:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002618:	b662      	cpsie	i
}
 800261a:	e035      	b.n	8002688 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002620:	2b02      	cmp	r3, #2
 8002622:	d11e      	bne.n	8002662 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002632:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002634:	b672      	cpsid	i
}
 8002636:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800265c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800265e:	b662      	cpsie	i
}
 8002660:	e012      	b.n	8002688 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002670:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	613b      	str	r3, [r7, #16]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002688:	e166      	b.n	8002958 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268e:	2b03      	cmp	r3, #3
 8002690:	f200 811f 	bhi.w	80028d2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002698:	2b01      	cmp	r3, #1
 800269a:	d123      	bne.n	80026e4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800269c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800269e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 fc9f 	bl	8002fe4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e167      	b.n	8002980 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691a      	ldr	r2, [r3, #16]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d8:	b29b      	uxth	r3, r3
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29a      	uxth	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026e2:	e139      	b.n	8002958 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d152      	bne.n	8002792 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f2:	2200      	movs	r2, #0
 80026f4:	4906      	ldr	r1, [pc, #24]	; (8002710 <HAL_I2C_Mem_Read+0x24c>)
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 faca 	bl	8002c90 <I2C_WaitOnFlagUntilTimeout>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d008      	beq.n	8002714 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e13c      	b.n	8002980 <HAL_I2C_Mem_Read+0x4bc>
 8002706:	bf00      	nop
 8002708:	00100002 	.word	0x00100002
 800270c:	ffff0000 	.word	0xffff0000
 8002710:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002714:	b672      	cpsid	i
}
 8002716:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002726:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	691a      	ldr	r2, [r3, #16]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002744:	3b01      	subs	r3, #1
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002750:	b29b      	uxth	r3, r3
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800275a:	b662      	cpsie	i
}
 800275c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002786:	b29b      	uxth	r3, r3
 8002788:	3b01      	subs	r3, #1
 800278a:	b29a      	uxth	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002790:	e0e2      	b.n	8002958 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002798:	2200      	movs	r2, #0
 800279a:	497b      	ldr	r1, [pc, #492]	; (8002988 <HAL_I2C_Mem_Read+0x4c4>)
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 fa77 	bl	8002c90 <I2C_WaitOnFlagUntilTimeout>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e0e9      	b.n	8002980 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027bc:	b672      	cpsid	i
}
 80027be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80027f2:	4b66      	ldr	r3, [pc, #408]	; (800298c <HAL_I2C_Mem_Read+0x4c8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	08db      	lsrs	r3, r3, #3
 80027f8:	4a65      	ldr	r2, [pc, #404]	; (8002990 <HAL_I2C_Mem_Read+0x4cc>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	0a1a      	lsrs	r2, r3, #8
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	00da      	lsls	r2, r3, #3
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	3b01      	subs	r3, #1
 8002810:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002812:	6a3b      	ldr	r3, [r7, #32]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d118      	bne.n	800284a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2220      	movs	r2, #32
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f043 0220 	orr.w	r2, r3, #32
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800283a:	b662      	cpsie	i
}
 800283c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e09a      	b.n	8002980 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b04      	cmp	r3, #4
 8002856:	d1d9      	bne.n	800280c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002866:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691a      	ldr	r2, [r3, #16]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002884:	3b01      	subs	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002890:	b29b      	uxth	r3, r3
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800289a:	b662      	cpsie	i
}
 800289c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	691a      	ldr	r2, [r3, #16]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028d0:	e042      	b.n	8002958 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 fb84 	bl	8002fe4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e04c      	b.n	8002980 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290e:	b29b      	uxth	r3, r3
 8002910:	3b01      	subs	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b04      	cmp	r3, #4
 8002924:	d118      	bne.n	8002958 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002942:	3b01      	subs	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294e:	b29b      	uxth	r3, r3
 8002950:	3b01      	subs	r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295c:	2b00      	cmp	r3, #0
 800295e:	f47f ae94 	bne.w	800268a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	e000      	b.n	8002980 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800297e:	2302      	movs	r3, #2
  }
}
 8002980:	4618      	mov	r0, r3
 8002982:	3728      	adds	r7, #40	; 0x28
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	00010004 	.word	0x00010004
 800298c:	20000000 	.word	0x20000000
 8002990:	14f8b589 	.word	0x14f8b589

08002994 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b088      	sub	sp, #32
 8002998:	af02      	add	r7, sp, #8
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	4608      	mov	r0, r1
 800299e:	4611      	mov	r1, r2
 80029a0:	461a      	mov	r2, r3
 80029a2:	4603      	mov	r3, r0
 80029a4:	817b      	strh	r3, [r7, #10]
 80029a6:	460b      	mov	r3, r1
 80029a8:	813b      	strh	r3, [r7, #8]
 80029aa:	4613      	mov	r3, r2
 80029ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f960 	bl	8002c90 <I2C_WaitOnFlagUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00d      	beq.n	80029f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029e4:	d103      	bne.n	80029ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e05f      	b.n	8002ab2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029f2:	897b      	ldrh	r3, [r7, #10]
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	461a      	mov	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	6a3a      	ldr	r2, [r7, #32]
 8002a06:	492d      	ldr	r1, [pc, #180]	; (8002abc <I2C_RequestMemoryWrite+0x128>)
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 f9bb 	bl	8002d84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e04c      	b.n	8002ab2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a30:	6a39      	ldr	r1, [r7, #32]
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 fa46 	bl	8002ec4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00d      	beq.n	8002a5a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d107      	bne.n	8002a56 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e02b      	b.n	8002ab2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a5a:	88fb      	ldrh	r3, [r7, #6]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d105      	bne.n	8002a6c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a60:	893b      	ldrh	r3, [r7, #8]
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	611a      	str	r2, [r3, #16]
 8002a6a:	e021      	b.n	8002ab0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a6c:	893b      	ldrh	r3, [r7, #8]
 8002a6e:	0a1b      	lsrs	r3, r3, #8
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a7c:	6a39      	ldr	r1, [r7, #32]
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 fa20 	bl	8002ec4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00d      	beq.n	8002aa6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d107      	bne.n	8002aa2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e005      	b.n	8002ab2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002aa6:	893b      	ldrh	r3, [r7, #8]
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	00010002 	.word	0x00010002

08002ac0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af02      	add	r7, sp, #8
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	4608      	mov	r0, r1
 8002aca:	4611      	mov	r1, r2
 8002acc:	461a      	mov	r2, r3
 8002ace:	4603      	mov	r3, r0
 8002ad0:	817b      	strh	r3, [r7, #10]
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	813b      	strh	r3, [r7, #8]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ae8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002af8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 f8c2 	bl	8002c90 <I2C_WaitOnFlagUntilTimeout>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00d      	beq.n	8002b2e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b20:	d103      	bne.n	8002b2a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e0aa      	b.n	8002c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b2e:	897b      	ldrh	r3, [r7, #10]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	461a      	mov	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	6a3a      	ldr	r2, [r7, #32]
 8002b42:	4952      	ldr	r1, [pc, #328]	; (8002c8c <I2C_RequestMemoryRead+0x1cc>)
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f91d 	bl	8002d84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e097      	b.n	8002c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b6c:	6a39      	ldr	r1, [r7, #32]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f9a8 	bl	8002ec4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00d      	beq.n	8002b96 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d107      	bne.n	8002b92 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e076      	b.n	8002c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d105      	bne.n	8002ba8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b9c:	893b      	ldrh	r3, [r7, #8]
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	611a      	str	r2, [r3, #16]
 8002ba6:	e021      	b.n	8002bec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ba8:	893b      	ldrh	r3, [r7, #8]
 8002baa:	0a1b      	lsrs	r3, r3, #8
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb8:	6a39      	ldr	r1, [r7, #32]
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 f982 	bl	8002ec4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00d      	beq.n	8002be2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d107      	bne.n	8002bde <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bdc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e050      	b.n	8002c84 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002be2:	893b      	ldrh	r3, [r7, #8]
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bee:	6a39      	ldr	r1, [r7, #32]
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 f967 	bl	8002ec4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00d      	beq.n	8002c18 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d107      	bne.n	8002c14 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c12:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e035      	b.n	8002c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c26:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 f82b 	bl	8002c90 <I2C_WaitOnFlagUntilTimeout>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00d      	beq.n	8002c5c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c4e:	d103      	bne.n	8002c58 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e013      	b.n	8002c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c5c:	897b      	ldrh	r3, [r7, #10]
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	6a3a      	ldr	r2, [r7, #32]
 8002c70:	4906      	ldr	r1, [pc, #24]	; (8002c8c <I2C_RequestMemoryRead+0x1cc>)
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 f886 	bl	8002d84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	00010002 	.word	0x00010002

08002c90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	603b      	str	r3, [r7, #0]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ca0:	e048      	b.n	8002d34 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca8:	d044      	beq.n	8002d34 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002caa:	f7fe ff0d 	bl	8001ac8 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d302      	bcc.n	8002cc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d139      	bne.n	8002d34 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	0c1b      	lsrs	r3, r3, #16
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d10d      	bne.n	8002ce6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	43da      	mvns	r2, r3
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	bf0c      	ite	eq
 8002cdc:	2301      	moveq	r3, #1
 8002cde:	2300      	movne	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	e00c      	b.n	8002d00 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	43da      	mvns	r2, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	bf0c      	ite	eq
 8002cf8:	2301      	moveq	r3, #1
 8002cfa:	2300      	movne	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	79fb      	ldrb	r3, [r7, #7]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d116      	bne.n	8002d34 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	f043 0220 	orr.w	r2, r3, #32
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e023      	b.n	8002d7c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	0c1b      	lsrs	r3, r3, #16
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d10d      	bne.n	8002d5a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	43da      	mvns	r2, r3
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	bf0c      	ite	eq
 8002d50:	2301      	moveq	r3, #1
 8002d52:	2300      	movne	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	461a      	mov	r2, r3
 8002d58:	e00c      	b.n	8002d74 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	43da      	mvns	r2, r3
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	4013      	ands	r3, r2
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	bf0c      	ite	eq
 8002d6c:	2301      	moveq	r3, #1
 8002d6e:	2300      	movne	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	461a      	mov	r2, r3
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d093      	beq.n	8002ca2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
 8002d90:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d92:	e071      	b.n	8002e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002da2:	d123      	bne.n	8002dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	f043 0204 	orr.w	r2, r3, #4
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e067      	b.n	8002ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df2:	d041      	beq.n	8002e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df4:	f7fe fe68 	bl	8001ac8 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d302      	bcc.n	8002e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d136      	bne.n	8002e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	0c1b      	lsrs	r3, r3, #16
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d10c      	bne.n	8002e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	43da      	mvns	r2, r3
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	bf14      	ite	ne
 8002e26:	2301      	movne	r3, #1
 8002e28:	2300      	moveq	r3, #0
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	e00b      	b.n	8002e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	43da      	mvns	r2, r3
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	bf14      	ite	ne
 8002e40:	2301      	movne	r3, #1
 8002e42:	2300      	moveq	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d016      	beq.n	8002e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	f043 0220 	orr.w	r2, r3, #32
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e021      	b.n	8002ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	0c1b      	lsrs	r3, r3, #16
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d10c      	bne.n	8002e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	43da      	mvns	r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	bf14      	ite	ne
 8002e94:	2301      	movne	r3, #1
 8002e96:	2300      	moveq	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	e00b      	b.n	8002eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	43da      	mvns	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	bf14      	ite	ne
 8002eae:	2301      	movne	r3, #1
 8002eb0:	2300      	moveq	r3, #0
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f47f af6d 	bne.w	8002d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ed0:	e034      	b.n	8002f3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 f8e3 	bl	800309e <I2C_IsAcknowledgeFailed>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e034      	b.n	8002f4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee8:	d028      	beq.n	8002f3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eea:	f7fe fded 	bl	8001ac8 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d302      	bcc.n	8002f00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d11d      	bne.n	8002f3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f0a:	2b80      	cmp	r3, #128	; 0x80
 8002f0c:	d016      	beq.n	8002f3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	f043 0220 	orr.w	r2, r3, #32
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e007      	b.n	8002f4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f46:	2b80      	cmp	r3, #128	; 0x80
 8002f48:	d1c3      	bne.n	8002ed2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f60:	e034      	b.n	8002fcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 f89b 	bl	800309e <I2C_IsAcknowledgeFailed>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e034      	b.n	8002fdc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f78:	d028      	beq.n	8002fcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7a:	f7fe fda5 	bl	8001ac8 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d302      	bcc.n	8002f90 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d11d      	bne.n	8002fcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	f003 0304 	and.w	r3, r3, #4
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d016      	beq.n	8002fcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	f043 0220 	orr.w	r2, r3, #32
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e007      	b.n	8002fdc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f003 0304 	and.w	r3, r3, #4
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d1c3      	bne.n	8002f62 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ff0:	e049      	b.n	8003086 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	2b10      	cmp	r3, #16
 8002ffe:	d119      	bne.n	8003034 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0210 	mvn.w	r2, #16
 8003008:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e030      	b.n	8003096 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003034:	f7fe fd48 	bl	8001ac8 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	429a      	cmp	r2, r3
 8003042:	d302      	bcc.n	800304a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d11d      	bne.n	8003086 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003054:	2b40      	cmp	r3, #64	; 0x40
 8003056:	d016      	beq.n	8003086 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f043 0220 	orr.w	r2, r3, #32
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e007      	b.n	8003096 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003090:	2b40      	cmp	r3, #64	; 0x40
 8003092:	d1ae      	bne.n	8002ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030b4:	d11b      	bne.n	80030ee <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030be:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2220      	movs	r2, #32
 80030ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f043 0204 	orr.w	r2, r3, #4
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bc80      	pop	{r7}
 80030f8:	4770      	bx	lr

080030fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030fc:	b08b      	sub	sp, #44	; 0x2c
 80030fe:	af06      	add	r7, sp, #24
 8003100:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0f1      	b.n	80032f0 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	d106      	bne.n	8003126 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f006 fb09 	bl	8009738 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2203      	movs	r2, #3
 800312a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f002 fa28 	bl	8005588 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	603b      	str	r3, [r7, #0]
 800313e:	687e      	ldr	r6, [r7, #4]
 8003140:	466d      	mov	r5, sp
 8003142:	f106 0410 	add.w	r4, r6, #16
 8003146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800314a:	6823      	ldr	r3, [r4, #0]
 800314c:	602b      	str	r3, [r5, #0]
 800314e:	1d33      	adds	r3, r6, #4
 8003150:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003152:	6838      	ldr	r0, [r7, #0]
 8003154:	f002 f9f2 	bl	800553c <USB_CoreInit>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d005      	beq.n	800316a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2202      	movs	r2, #2
 8003162:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e0c2      	b.n	80032f0 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2100      	movs	r1, #0
 8003170:	4618      	mov	r0, r3
 8003172:	f002 fa23 	bl	80055bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003176:	2300      	movs	r3, #0
 8003178:	73fb      	strb	r3, [r7, #15]
 800317a:	e040      	b.n	80031fe <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800317c:	7bfb      	ldrb	r3, [r7, #15]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	440b      	add	r3, r1
 800318c:	3301      	adds	r3, #1
 800318e:	2201      	movs	r2, #1
 8003190:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003192:	7bfb      	ldrb	r3, [r7, #15]
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	4613      	mov	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	440b      	add	r3, r1
 80031a2:	7bfa      	ldrb	r2, [r7, #15]
 80031a4:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	440b      	add	r3, r1
 80031b6:	3303      	adds	r3, #3
 80031b8:	2200      	movs	r2, #0
 80031ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031bc:	7bfa      	ldrb	r2, [r7, #15]
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	440b      	add	r3, r1
 80031ca:	3338      	adds	r3, #56	; 0x38
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031d0:	7bfa      	ldrb	r2, [r7, #15]
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	440b      	add	r3, r1
 80031de:	333c      	adds	r3, #60	; 0x3c
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031e4:	7bfa      	ldrb	r2, [r7, #15]
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	440b      	add	r3, r1
 80031f2:	3340      	adds	r3, #64	; 0x40
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
 80031fa:	3301      	adds	r3, #1
 80031fc:	73fb      	strb	r3, [r7, #15]
 80031fe:	7bfa      	ldrb	r2, [r7, #15]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	429a      	cmp	r2, r3
 8003206:	d3b9      	bcc.n	800317c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003208:	2300      	movs	r3, #0
 800320a:	73fb      	strb	r3, [r7, #15]
 800320c:	e044      	b.n	8003298 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800320e:	7bfa      	ldrb	r2, [r7, #15]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	440b      	add	r3, r1
 800321c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003220:	2200      	movs	r2, #0
 8003222:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003224:	7bfa      	ldrb	r2, [r7, #15]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	440b      	add	r3, r1
 8003232:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003236:	7bfa      	ldrb	r2, [r7, #15]
 8003238:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800323a:	7bfa      	ldrb	r2, [r7, #15]
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	440b      	add	r3, r1
 8003248:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800324c:	2200      	movs	r2, #0
 800324e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003250:	7bfa      	ldrb	r2, [r7, #15]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	440b      	add	r3, r1
 800325e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003266:	7bfa      	ldrb	r2, [r7, #15]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	440b      	add	r3, r1
 8003274:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800327c:	7bfa      	ldrb	r2, [r7, #15]
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	4613      	mov	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	440b      	add	r3, r1
 800328a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003292:	7bfb      	ldrb	r3, [r7, #15]
 8003294:	3301      	adds	r3, #1
 8003296:	73fb      	strb	r3, [r7, #15]
 8003298:	7bfa      	ldrb	r2, [r7, #15]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d3b5      	bcc.n	800320e <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	687e      	ldr	r6, [r7, #4]
 80032aa:	466d      	mov	r5, sp
 80032ac:	f106 0410 	add.w	r4, r6, #16
 80032b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032b4:	6823      	ldr	r3, [r4, #0]
 80032b6:	602b      	str	r3, [r5, #0]
 80032b8:	1d33      	adds	r3, r6, #4
 80032ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032bc:	6838      	ldr	r0, [r7, #0]
 80032be:	f002 f989 	bl	80055d4 <USB_DevInit>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e00d      	b.n	80032f0 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f004 fc0a 	bl	8007b02 <USB_DevDisconnect>

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_PCD_Start+0x16>
 800330a:	2302      	movs	r3, #2
 800330c:	e016      	b.n	800333c <HAL_PCD_Start+0x44>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f002 f91e 	bl	800555c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003320:	2101      	movs	r1, #1
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f006 fc7b 	bl	8009c1e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f004 fbde 	bl	8007aee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b088      	sub	sp, #32
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f004 fbe0 	bl	8007b16 <USB_ReadInterrupts>
 8003356:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fb1b 	bl	800399e <PCD_EP_ISR_Handler>

    return;
 8003368:	e119      	b.n	800359e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003370:	2b00      	cmp	r3, #0
 8003372:	d013      	beq.n	800339c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800337c:	b29a      	uxth	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003386:	b292      	uxth	r2, r2
 8003388:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f006 fa4e 	bl	800982e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003392:	2100      	movs	r1, #0
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f905 	bl	80035a4 <HAL_PCD_SetAddress>

    return;
 800339a:	e100      	b.n	800359e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00c      	beq.n	80033c0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033b8:	b292      	uxth	r2, r2
 80033ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80033be:	e0ee      	b.n	800359e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00c      	beq.n	80033e4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033dc:	b292      	uxth	r2, r2
 80033de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80033e2:	e0dc      	b.n	800359e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d027      	beq.n	800343e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0204 	bic.w	r2, r2, #4
 8003400:	b292      	uxth	r2, r2
 8003402:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800340e:	b29a      	uxth	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0208 	bic.w	r2, r2, #8
 8003418:	b292      	uxth	r2, r2
 800341a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f006 fa3e 	bl	80098a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800342c:	b29a      	uxth	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003436:	b292      	uxth	r2, r2
 8003438:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800343c:	e0af      	b.n	800359e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 8083 	beq.w	8003550 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800344a:	2300      	movs	r3, #0
 800344c:	77fb      	strb	r3, [r7, #31]
 800344e:	e010      	b.n	8003472 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	461a      	mov	r2, r3
 8003456:	7ffb      	ldrb	r3, [r7, #31]
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	441a      	add	r2, r3
 800345c:	7ffb      	ldrb	r3, [r7, #31]
 800345e:	8812      	ldrh	r2, [r2, #0]
 8003460:	b292      	uxth	r2, r2
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	3320      	adds	r3, #32
 8003466:	443b      	add	r3, r7
 8003468:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800346c:	7ffb      	ldrb	r3, [r7, #31]
 800346e:	3301      	adds	r3, #1
 8003470:	77fb      	strb	r3, [r7, #31]
 8003472:	7ffb      	ldrb	r3, [r7, #31]
 8003474:	2b07      	cmp	r3, #7
 8003476:	d9eb      	bls.n	8003450 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003480:	b29a      	uxth	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0201 	orr.w	r2, r2, #1
 800348a:	b292      	uxth	r2, r2
 800348c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003498:	b29a      	uxth	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0201 	bic.w	r2, r2, #1
 80034a2:	b292      	uxth	r2, r2
 80034a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80034a8:	bf00      	nop
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f6      	beq.n	80034aa <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ce:	b292      	uxth	r2, r2
 80034d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80034d4:	2300      	movs	r3, #0
 80034d6:	77fb      	strb	r3, [r7, #31]
 80034d8:	e00f      	b.n	80034fa <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80034da:	7ffb      	ldrb	r3, [r7, #31]
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6812      	ldr	r2, [r2, #0]
 80034e0:	4611      	mov	r1, r2
 80034e2:	7ffa      	ldrb	r2, [r7, #31]
 80034e4:	0092      	lsls	r2, r2, #2
 80034e6:	440a      	add	r2, r1
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	3320      	adds	r3, #32
 80034ec:	443b      	add	r3, r7
 80034ee:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80034f2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80034f4:	7ffb      	ldrb	r3, [r7, #31]
 80034f6:	3301      	adds	r3, #1
 80034f8:	77fb      	strb	r3, [r7, #31]
 80034fa:	7ffb      	ldrb	r3, [r7, #31]
 80034fc:	2b07      	cmp	r3, #7
 80034fe:	d9ec      	bls.n	80034da <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003508:	b29a      	uxth	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0208 	orr.w	r2, r2, #8
 8003512:	b292      	uxth	r2, r2
 8003514:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003520:	b29a      	uxth	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800352a:	b292      	uxth	r2, r2
 800352c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003538:	b29a      	uxth	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0204 	orr.w	r2, r2, #4
 8003542:	b292      	uxth	r2, r2
 8003544:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f006 f98f 	bl	800986c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800354e:	e026      	b.n	800359e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00f      	beq.n	800357a <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003562:	b29a      	uxth	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800356c:	b292      	uxth	r2, r2
 800356e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f006 f94d 	bl	8009812 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003578:	e011      	b.n	800359e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00c      	beq.n	800359e <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800358c:	b29a      	uxth	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003596:	b292      	uxth	r2, r2
 8003598:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800359c:	bf00      	nop
  }
}
 800359e:	3720      	adds	r7, #32
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	460b      	mov	r3, r1
 80035ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d101      	bne.n	80035be <HAL_PCD_SetAddress+0x1a>
 80035ba:	2302      	movs	r3, #2
 80035bc:	e013      	b.n	80035e6 <HAL_PCD_SetAddress+0x42>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	78fa      	ldrb	r2, [r7, #3]
 80035ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	78fa      	ldrb	r2, [r7, #3]
 80035d4:	4611      	mov	r1, r2
 80035d6:	4618      	mov	r0, r3
 80035d8:	f004 fa76 	bl	8007ac8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b084      	sub	sp, #16
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
 80035f6:	4608      	mov	r0, r1
 80035f8:	4611      	mov	r1, r2
 80035fa:	461a      	mov	r2, r3
 80035fc:	4603      	mov	r3, r0
 80035fe:	70fb      	strb	r3, [r7, #3]
 8003600:	460b      	mov	r3, r1
 8003602:	803b      	strh	r3, [r7, #0]
 8003604:	4613      	mov	r3, r2
 8003606:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003608:	2300      	movs	r3, #0
 800360a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800360c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003610:	2b00      	cmp	r3, #0
 8003612:	da0e      	bge.n	8003632 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003614:	78fb      	ldrb	r3, [r7, #3]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	4613      	mov	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	4413      	add	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2201      	movs	r2, #1
 800362e:	705a      	strb	r2, [r3, #1]
 8003630:	e00e      	b.n	8003650 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003632:	78fb      	ldrb	r3, [r7, #3]
 8003634:	f003 0207 	and.w	r2, r3, #7
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	4413      	add	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003650:	78fb      	ldrb	r3, [r7, #3]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	b2da      	uxtb	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800365c:	883a      	ldrh	r2, [r7, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	78ba      	ldrb	r2, [r7, #2]
 8003666:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003668:	78bb      	ldrb	r3, [r7, #2]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d102      	bne.n	8003674 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800367a:	2b01      	cmp	r3, #1
 800367c:	d101      	bne.n	8003682 <HAL_PCD_EP_Open+0x94>
 800367e:	2302      	movs	r3, #2
 8003680:	e00e      	b.n	80036a0 <HAL_PCD_EP_Open+0xb2>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68f9      	ldr	r1, [r7, #12]
 8003690:	4618      	mov	r0, r3
 8003692:	f001 ffbf 	bl	8005614 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800369e:	7afb      	ldrb	r3, [r7, #11]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	da0e      	bge.n	80036da <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036bc:	78fb      	ldrb	r3, [r7, #3]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	1c5a      	adds	r2, r3, #1
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	4413      	add	r3, r2
 80036d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2201      	movs	r2, #1
 80036d6:	705a      	strb	r2, [r3, #1]
 80036d8:	e00e      	b.n	80036f8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036da:	78fb      	ldrb	r3, [r7, #3]
 80036dc:	f003 0207 	and.w	r2, r3, #7
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	4413      	add	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_PCD_EP_Close+0x6a>
 800370e:	2302      	movs	r3, #2
 8003710:	e00e      	b.n	8003730 <HAL_PCD_EP_Close+0x88>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68f9      	ldr	r1, [r7, #12]
 8003720:	4618      	mov	r0, r3
 8003722:	f002 fb37 	bl	8005d94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	607a      	str	r2, [r7, #4]
 8003742:	603b      	str	r3, [r7, #0]
 8003744:	460b      	mov	r3, r1
 8003746:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003748:	7afb      	ldrb	r3, [r7, #11]
 800374a:	f003 0207 	and.w	r2, r3, #7
 800374e:	4613      	mov	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	4413      	add	r3, r2
 800375e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	2200      	movs	r2, #0
 8003770:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2200      	movs	r2, #0
 8003776:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003778:	7afb      	ldrb	r3, [r7, #11]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	b2da      	uxtb	r2, r3
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6979      	ldr	r1, [r7, #20]
 800378a:	4618      	mov	r0, r3
 800378c:	f002 fcee 	bl	800616c <USB_EPStartXfer>

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	460b      	mov	r3, r1
 80037a4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80037a6:	78fb      	ldrb	r3, [r7, #3]
 80037a8:	f003 0207 	and.w	r2, r3, #7
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	440b      	add	r3, r1
 80037b8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80037bc:	681b      	ldr	r3, [r3, #0]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr

080037c8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	607a      	str	r2, [r7, #4]
 80037d2:	603b      	str	r3, [r7, #0]
 80037d4:	460b      	mov	r3, r1
 80037d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037d8:	7afb      	ldrb	r3, [r7, #11]
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	1c5a      	adds	r2, r3, #1
 80037e0:	4613      	mov	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	4413      	add	r3, r2
 80037ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	2200      	movs	r2, #0
 800380c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2201      	movs	r2, #1
 8003812:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003814:	7afb      	ldrb	r3, [r7, #11]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	b2da      	uxtb	r2, r3
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6979      	ldr	r1, [r7, #20]
 8003826:	4618      	mov	r0, r3
 8003828:	f002 fca0 	bl	800616c <USB_EPStartXfer>

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3718      	adds	r7, #24
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b084      	sub	sp, #16
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
 800383e:	460b      	mov	r3, r1
 8003840:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003842:	78fb      	ldrb	r3, [r7, #3]
 8003844:	f003 0207 	and.w	r2, r3, #7
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	429a      	cmp	r2, r3
 800384e:	d901      	bls.n	8003854 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e04c      	b.n	80038ee <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003854:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003858:	2b00      	cmp	r3, #0
 800385a:	da0e      	bge.n	800387a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800385c:	78fb      	ldrb	r3, [r7, #3]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	1c5a      	adds	r2, r3, #1
 8003864:	4613      	mov	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	4413      	add	r3, r2
 8003870:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2201      	movs	r2, #1
 8003876:	705a      	strb	r2, [r3, #1]
 8003878:	e00c      	b.n	8003894 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800387a:	78fa      	ldrb	r2, [r7, #3]
 800387c:	4613      	mov	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	4413      	add	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2201      	movs	r2, #1
 8003898:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800389a:	78fb      	ldrb	r3, [r7, #3]
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_PCD_EP_SetStall+0x7e>
 80038b0:	2302      	movs	r3, #2
 80038b2:	e01c      	b.n	80038ee <HAL_PCD_EP_SetStall+0xb8>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68f9      	ldr	r1, [r7, #12]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f004 f803 	bl	80078ce <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038c8:	78fb      	ldrb	r3, [r7, #3]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d108      	bne.n	80038e4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80038dc:	4619      	mov	r1, r3
 80038de:	4610      	mov	r0, r2
 80038e0:	f004 f928 	bl	8007b34 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b084      	sub	sp, #16
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	460b      	mov	r3, r1
 8003900:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003902:	78fb      	ldrb	r3, [r7, #3]
 8003904:	f003 020f 	and.w	r2, r3, #15
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	429a      	cmp	r2, r3
 800390e:	d901      	bls.n	8003914 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e040      	b.n	8003996 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003914:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003918:	2b00      	cmp	r3, #0
 800391a:	da0e      	bge.n	800393a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800391c:	78fb      	ldrb	r3, [r7, #3]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	4413      	add	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2201      	movs	r2, #1
 8003936:	705a      	strb	r2, [r3, #1]
 8003938:	e00e      	b.n	8003958 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800393a:	78fb      	ldrb	r3, [r7, #3]
 800393c:	f003 0207 	and.w	r2, r3, #7
 8003940:	4613      	mov	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	4413      	add	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800395e:	78fb      	ldrb	r3, [r7, #3]
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	b2da      	uxtb	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003970:	2b01      	cmp	r3, #1
 8003972:	d101      	bne.n	8003978 <HAL_PCD_EP_ClrStall+0x82>
 8003974:	2302      	movs	r3, #2
 8003976:	e00e      	b.n	8003996 <HAL_PCD_EP_ClrStall+0xa0>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68f9      	ldr	r1, [r7, #12]
 8003986:	4618      	mov	r0, r3
 8003988:	f003 fff1 	bl	800796e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b096      	sub	sp, #88	; 0x58
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80039a6:	e3bf      	b.n	8004128 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80039b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80039c2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f040 8179 	bne.w	8003cbe <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80039cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d152      	bne.n	8003a7e <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80039e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e8:	81fb      	strh	r3, [r7, #14]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	89fb      	ldrh	r3, [r7, #14]
 80039f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3328      	adds	r3, #40	; 0x28
 8003a00:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4413      	add	r3, r2
 8003a16:	3302      	adds	r3, #2
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6812      	ldr	r2, [r2, #0]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a2c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a30:	695a      	ldr	r2, [r3, #20]
 8003a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	441a      	add	r2, r3
 8003a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a3a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f005 fecd 	bl	80097de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 836b 	beq.w	8004128 <PCD_EP_ISR_Handler+0x78a>
 8003a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f040 8366 	bne.w	8004128 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	b292      	uxth	r2, r2
 8003a70:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003a7c:	e354      	b.n	8004128 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a84:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	881b      	ldrh	r3, [r3, #0]
 8003a8c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003a90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d034      	beq.n	8003b06 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	4413      	add	r3, r2
 8003ab0:	3306      	adds	r3, #6
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6812      	ldr	r2, [r2, #0]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ac6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6818      	ldr	r0, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ad4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003ad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ad8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	f004 f87a 	bl	8007bd4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003aec:	4013      	ands	r3, r2
 8003aee:	823b      	strh	r3, [r7, #16]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	8a3a      	ldrh	r2, [r7, #16]
 8003af6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003afa:	b292      	uxth	r2, r2
 8003afc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f005 fe40 	bl	8009784 <HAL_PCD_SetupStageCallback>
 8003b04:	e310      	b.n	8004128 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003b06:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f280 830c 	bge.w	8004128 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	83fb      	strh	r3, [r7, #30]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	8bfa      	ldrh	r2, [r7, #30]
 8003b26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b2a:	b292      	uxth	r2, r2
 8003b2c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	461a      	mov	r2, r3
 8003b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	4413      	add	r3, r2
 8003b42:	3306      	adds	r3, #6
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6812      	ldr	r2, [r2, #0]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b50:	881b      	ldrh	r3, [r3, #0]
 8003b52:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b58:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d019      	beq.n	8003b96 <PCD_EP_ISR_Handler+0x1f8>
 8003b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d015      	beq.n	8003b96 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6818      	ldr	r0, [r3, #0]
 8003b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b70:	6959      	ldr	r1, [r3, #20]
 8003b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b74:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b78:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	f004 f82a 	bl	8007bd4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b82:	695a      	ldr	r2, [r3, #20]
 8003b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	441a      	add	r2, r3
 8003b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b8c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003b8e:	2100      	movs	r1, #0
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f005 fe09 	bl	80097a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003ba0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f040 82bd 	bne.w	8004128 <PCD_EP_ISR_Handler+0x78a>
 8003bae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003bb2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003bb6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bba:	f000 82b5 	beq.w	8004128 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	61bb      	str	r3, [r7, #24]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	461a      	mov	r2, r3
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	61bb      	str	r3, [r7, #24]
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	801a      	strh	r2, [r3, #0]
 8003bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	2b3e      	cmp	r3, #62	; 0x3e
 8003bf4:	d91d      	bls.n	8003c32 <PCD_EP_ISR_Handler+0x294>
 8003bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	095b      	lsrs	r3, r3, #5
 8003bfc:	647b      	str	r3, [r7, #68]	; 0x44
 8003bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f003 031f 	and.w	r3, r3, #31
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d102      	bne.n	8003c10 <PCD_EP_ISR_Handler+0x272>
 8003c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	029b      	lsls	r3, r3, #10
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	801a      	strh	r2, [r3, #0]
 8003c30:	e026      	b.n	8003c80 <PCD_EP_ISR_Handler+0x2e2>
 8003c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10a      	bne.n	8003c50 <PCD_EP_ISR_Handler+0x2b2>
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	801a      	strh	r2, [r3, #0]
 8003c4e:	e017      	b.n	8003c80 <PCD_EP_ISR_Handler+0x2e2>
 8003c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	085b      	lsrs	r3, r3, #1
 8003c56:	647b      	str	r3, [r7, #68]	; 0x44
 8003c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d002      	beq.n	8003c6a <PCD_EP_ISR_Handler+0x2cc>
 8003c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c66:	3301      	adds	r3, #1
 8003c68:	647b      	str	r3, [r7, #68]	; 0x44
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	029b      	lsls	r3, r3, #10
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c90:	827b      	strh	r3, [r7, #18]
 8003c92:	8a7b      	ldrh	r3, [r7, #18]
 8003c94:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003c98:	827b      	strh	r3, [r7, #18]
 8003c9a:	8a7b      	ldrh	r3, [r7, #18]
 8003c9c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003ca0:	827b      	strh	r3, [r7, #18]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	8a7b      	ldrh	r3, [r7, #18]
 8003ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	8013      	strh	r3, [r2, #0]
 8003cbc:	e234      	b.n	8004128 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003cd2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f280 80fc 	bge.w	8003ed4 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003d0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d0e:	b292      	uxth	r2, r2
 8003d10:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003d12:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003d16:	4613      	mov	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	4413      	add	r3, r2
 8003d26:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d2a:	7b1b      	ldrb	r3, [r3, #12]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d125      	bne.n	8003d7c <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	4413      	add	r3, r2
 8003d44:	3306      	adds	r3, #6
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6812      	ldr	r2, [r2, #0]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d52:	881b      	ldrh	r3, [r3, #0]
 8003d54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d58:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003d5c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 8092 	beq.w	8003e8a <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6818      	ldr	r0, [r3, #0]
 8003d6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d6c:	6959      	ldr	r1, [r3, #20]
 8003d6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d70:	88da      	ldrh	r2, [r3, #6]
 8003d72:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003d76:	f003 ff2d 	bl	8007bd4 <USB_ReadPMA>
 8003d7a:	e086      	b.n	8003e8a <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d7e:	78db      	ldrb	r3, [r3, #3]
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d10a      	bne.n	8003d9a <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003d84:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003d88:	461a      	mov	r2, r3
 8003d8a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f9d9 	bl	8004144 <HAL_PCD_EP_DB_Receive>
 8003d92:	4603      	mov	r3, r0
 8003d94:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003d98:	e077      	b.n	8003e8a <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	881b      	ldrh	r3, [r3, #0]
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	441a      	add	r2, r3
 8003dc6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003dca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dd6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	461a      	mov	r2, r3
 8003de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4413      	add	r3, r2
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d024      	beq.n	8003e42 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	461a      	mov	r2, r3
 8003e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	4413      	add	r3, r2
 8003e0c:	3302      	adds	r3, #2
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e1a:	881b      	ldrh	r3, [r3, #0]
 8003e1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e20:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003e24:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d02e      	beq.n	8003e8a <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6818      	ldr	r0, [r3, #0]
 8003e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e32:	6959      	ldr	r1, [r3, #20]
 8003e34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e36:	891a      	ldrh	r2, [r3, #8]
 8003e38:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003e3c:	f003 feca 	bl	8007bd4 <USB_ReadPMA>
 8003e40:	e023      	b.n	8003e8a <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	4413      	add	r3, r2
 8003e56:	3306      	adds	r3, #6
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6812      	ldr	r2, [r2, #0]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e6a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003e6e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d009      	beq.n	8003e8a <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6818      	ldr	r0, [r3, #0]
 8003e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e7c:	6959      	ldr	r1, [r3, #20]
 8003e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e80:	895a      	ldrh	r2, [r3, #10]
 8003e82:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003e86:	f003 fea5 	bl	8007bd4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e8c:	69da      	ldr	r2, [r3, #28]
 8003e8e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003e92:	441a      	add	r2, r3
 8003e94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e96:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e9a:	695a      	ldr	r2, [r3, #20]
 8003e9c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003ea0:	441a      	add	r2, r3
 8003ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ea4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d005      	beq.n	8003eba <PCD_EP_ISR_Handler+0x51c>
 8003eae:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d206      	bcs.n	8003ec8 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003eba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f005 fc71 	bl	80097a8 <HAL_PCD_DataOutStageCallback>
 8003ec6:	e005      	b.n	8003ed4 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f002 f94c 	bl	800616c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003ed4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 8123 	beq.w	8004128 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8003ee2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	4613      	mov	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f10:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	441a      	add	r2, r3
 8003f22:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003f26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f34:	78db      	ldrb	r3, [r3, #3]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	f040 80a2 	bne.w	8004080 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8003f3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f3e:	2200      	movs	r2, #0
 8003f40:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003f42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f44:	7b1b      	ldrb	r3, [r3, #12]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 8093 	beq.w	8004072 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d046      	beq.n	8003fe6 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f5a:	785b      	ldrb	r3, [r3, #1]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d126      	bne.n	8003fae <PCD_EP_ISR_Handler+0x610>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	627b      	str	r3, [r7, #36]	; 0x24
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	461a      	mov	r2, r3
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	4413      	add	r3, r2
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
 8003f78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	011a      	lsls	r2, r3, #4
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	4413      	add	r3, r2
 8003f82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f86:	623b      	str	r3, [r7, #32]
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	881b      	ldrh	r3, [r3, #0]
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	801a      	strh	r2, [r3, #0]
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	801a      	strh	r2, [r3, #0]
 8003fac:	e061      	b.n	8004072 <PCD_EP_ISR_Handler+0x6d4>
 8003fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fb0:	785b      	ldrb	r3, [r3, #1]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d15d      	bne.n	8004072 <PCD_EP_ISR_Handler+0x6d4>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fca:	4413      	add	r3, r2
 8003fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	011a      	lsls	r2, r3, #4
 8003fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	801a      	strh	r2, [r3, #0]
 8003fe4:	e045      	b.n	8004072 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fee:	785b      	ldrb	r3, [r3, #1]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d126      	bne.n	8004042 <PCD_EP_ISR_Handler+0x6a4>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004002:	b29b      	uxth	r3, r3
 8004004:	461a      	mov	r2, r3
 8004006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004008:	4413      	add	r3, r2
 800400a:	637b      	str	r3, [r7, #52]	; 0x34
 800400c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	011a      	lsls	r2, r3, #4
 8004012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004014:	4413      	add	r3, r2
 8004016:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800401a:	633b      	str	r3, [r7, #48]	; 0x30
 800401c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	b29b      	uxth	r3, r3
 8004022:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004026:	b29a      	uxth	r2, r3
 8004028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402a:	801a      	strh	r2, [r3, #0]
 800402c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	b29b      	uxth	r3, r3
 8004032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800403a:	b29a      	uxth	r2, r3
 800403c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403e:	801a      	strh	r2, [r3, #0]
 8004040:	e017      	b.n	8004072 <PCD_EP_ISR_Handler+0x6d4>
 8004042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004044:	785b      	ldrb	r3, [r3, #1]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d113      	bne.n	8004072 <PCD_EP_ISR_Handler+0x6d4>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004052:	b29b      	uxth	r3, r3
 8004054:	461a      	mov	r2, r3
 8004056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004058:	4413      	add	r3, r2
 800405a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800405c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	011a      	lsls	r2, r3, #4
 8004062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004064:	4413      	add	r3, r2
 8004066:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800406a:	63bb      	str	r3, [r7, #56]	; 0x38
 800406c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406e:	2200      	movs	r2, #0
 8004070:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	4619      	mov	r1, r3
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f005 fbb0 	bl	80097de <HAL_PCD_DataInStageCallback>
 800407e:	e053      	b.n	8004128 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004080:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004088:	2b00      	cmp	r3, #0
 800408a:	d146      	bne.n	800411a <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004094:	b29b      	uxth	r3, r3
 8004096:	461a      	mov	r2, r3
 8004098:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	4413      	add	r3, r2
 80040a0:	3302      	adds	r3, #2
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6812      	ldr	r2, [r2, #0]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040b4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80040b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ba:	699a      	ldr	r2, [r3, #24]
 80040bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d907      	bls.n	80040d4 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 80040c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040c6:	699a      	ldr	r2, [r3, #24]
 80040c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80040cc:	1ad2      	subs	r2, r2, r3
 80040ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040d0:	619a      	str	r2, [r3, #24]
 80040d2:	e002      	b.n	80040da <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 80040d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040d6:	2200      	movs	r2, #0
 80040d8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80040da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d106      	bne.n	80040f0 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80040e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	4619      	mov	r1, r3
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f005 fb78 	bl	80097de <HAL_PCD_DataInStageCallback>
 80040ee:	e01b      	b.n	8004128 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80040f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040f2:	695a      	ldr	r2, [r3, #20]
 80040f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80040f8:	441a      	add	r2, r3
 80040fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040fc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80040fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004100:	69da      	ldr	r2, [r3, #28]
 8004102:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004106:	441a      	add	r2, r3
 8004108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800410a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004112:	4618      	mov	r0, r3
 8004114:	f002 f82a 	bl	800616c <USB_EPStartXfer>
 8004118:	e006      	b.n	8004128 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800411a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800411e:	461a      	mov	r2, r3
 8004120:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f91b 	bl	800435e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004130:	b29b      	uxth	r3, r3
 8004132:	b21b      	sxth	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	f6ff ac37 	blt.w	80039a8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3758      	adds	r7, #88	; 0x58
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	4613      	mov	r3, r2
 8004150:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004152:	88fb      	ldrh	r3, [r7, #6]
 8004154:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d07e      	beq.n	800425a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004164:	b29b      	uxth	r3, r3
 8004166:	461a      	mov	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	4413      	add	r3, r2
 8004170:	3302      	adds	r3, #2
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	6812      	ldr	r2, [r2, #0]
 8004178:	4413      	add	r3, r2
 800417a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004184:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	699a      	ldr	r2, [r3, #24]
 800418a:	8b7b      	ldrh	r3, [r7, #26]
 800418c:	429a      	cmp	r2, r3
 800418e:	d306      	bcc.n	800419e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	699a      	ldr	r2, [r3, #24]
 8004194:	8b7b      	ldrh	r3, [r7, #26]
 8004196:	1ad2      	subs	r2, r2, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	619a      	str	r2, [r3, #24]
 800419c:	e002      	b.n	80041a4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	2200      	movs	r2, #0
 80041a2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d123      	bne.n	80041f4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	b29b      	uxth	r3, r3
 80041be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c6:	833b      	strh	r3, [r7, #24]
 80041c8:	8b3b      	ldrh	r3, [r7, #24]
 80041ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80041ce:	833b      	strh	r3, [r7, #24]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	461a      	mov	r2, r3
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	441a      	add	r2, r3
 80041de:	8b3b      	ldrh	r3, [r7, #24]
 80041e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80041f4:	88fb      	ldrh	r3, [r7, #6]
 80041f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d01f      	beq.n	800423e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	461a      	mov	r2, r3
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	b29b      	uxth	r3, r3
 8004210:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004218:	82fb      	strh	r3, [r7, #22]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	441a      	add	r2, r3
 8004228:	8afb      	ldrh	r3, [r7, #22]
 800422a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800422e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004236:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800423a:	b29b      	uxth	r3, r3
 800423c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800423e:	8b7b      	ldrh	r3, [r7, #26]
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 8087 	beq.w	8004354 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6818      	ldr	r0, [r3, #0]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	6959      	ldr	r1, [r3, #20]
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	891a      	ldrh	r2, [r3, #8]
 8004252:	8b7b      	ldrh	r3, [r7, #26]
 8004254:	f003 fcbe 	bl	8007bd4 <USB_ReadPMA>
 8004258:	e07c      	b.n	8004354 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004262:	b29b      	uxth	r3, r3
 8004264:	461a      	mov	r2, r3
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	4413      	add	r3, r2
 800426e:	3306      	adds	r3, #6
 8004270:	005b      	lsls	r3, r3, #1
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	6812      	ldr	r2, [r2, #0]
 8004276:	4413      	add	r3, r2
 8004278:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004282:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	699a      	ldr	r2, [r3, #24]
 8004288:	8b7b      	ldrh	r3, [r7, #26]
 800428a:	429a      	cmp	r2, r3
 800428c:	d306      	bcc.n	800429c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	699a      	ldr	r2, [r3, #24]
 8004292:	8b7b      	ldrh	r3, [r7, #26]
 8004294:	1ad2      	subs	r2, r2, r3
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	619a      	str	r2, [r3, #24]
 800429a:	e002      	b.n	80042a2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2200      	movs	r2, #0
 80042a0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d123      	bne.n	80042f2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	461a      	mov	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c4:	83fb      	strh	r3, [r7, #30]
 80042c6:	8bfb      	ldrh	r3, [r7, #30]
 80042c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80042cc:	83fb      	strh	r3, [r7, #30]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	461a      	mov	r2, r3
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	441a      	add	r2, r3
 80042dc:	8bfb      	ldrh	r3, [r7, #30]
 80042de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80042f2:	88fb      	ldrh	r3, [r7, #6]
 80042f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d11f      	bne.n	800433c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	461a      	mov	r2, r3
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	881b      	ldrh	r3, [r3, #0]
 800430c:	b29b      	uxth	r3, r3
 800430e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004316:	83bb      	strh	r3, [r7, #28]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	461a      	mov	r2, r3
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	441a      	add	r2, r3
 8004326:	8bbb      	ldrh	r3, [r7, #28]
 8004328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800432c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004334:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004338:	b29b      	uxth	r3, r3
 800433a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800433c:	8b7b      	ldrh	r3, [r7, #26]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d008      	beq.n	8004354 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6818      	ldr	r0, [r3, #0]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	6959      	ldr	r1, [r3, #20]
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	895a      	ldrh	r2, [r3, #10]
 800434e:	8b7b      	ldrh	r3, [r7, #26]
 8004350:	f003 fc40 	bl	8007bd4 <USB_ReadPMA>
    }
  }

  return count;
 8004354:	8b7b      	ldrh	r3, [r7, #26]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3720      	adds	r7, #32
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b0a4      	sub	sp, #144	; 0x90
 8004362:	af00      	add	r7, sp, #0
 8004364:	60f8      	str	r0, [r7, #12]
 8004366:	60b9      	str	r1, [r7, #8]
 8004368:	4613      	mov	r3, r2
 800436a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800436c:	88fb      	ldrh	r3, [r7, #6]
 800436e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 81dd 	beq.w	8004732 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004380:	b29b      	uxth	r3, r3
 8004382:	461a      	mov	r2, r3
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	4413      	add	r3, r2
 800438c:	3302      	adds	r3, #2
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	6812      	ldr	r2, [r2, #0]
 8004394:	4413      	add	r3, r2
 8004396:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043a0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	699a      	ldr	r2, [r3, #24]
 80043a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d907      	bls.n	80043c0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	699a      	ldr	r2, [r3, #24]
 80043b4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80043b8:	1ad2      	subs	r2, r2, r3
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	619a      	str	r2, [r3, #24]
 80043be:	e002      	b.n	80043c6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2200      	movs	r2, #0
 80043c4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f040 80b9 	bne.w	8004542 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	785b      	ldrb	r3, [r3, #1]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d126      	bne.n	8004426 <HAL_PCD_EP_DB_Transmit+0xc8>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	461a      	mov	r2, r3
 80043ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ec:	4413      	add	r3, r2
 80043ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	011a      	lsls	r2, r3, #4
 80043f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f8:	4413      	add	r3, r2
 80043fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	b29b      	uxth	r3, r3
 8004406:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800440a:	b29a      	uxth	r2, r3
 800440c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440e:	801a      	strh	r2, [r3, #0]
 8004410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004412:	881b      	ldrh	r3, [r3, #0]
 8004414:	b29b      	uxth	r3, r3
 8004416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800441a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800441e:	b29a      	uxth	r2, r3
 8004420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004422:	801a      	strh	r2, [r3, #0]
 8004424:	e01a      	b.n	800445c <HAL_PCD_EP_DB_Transmit+0xfe>
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	785b      	ldrb	r3, [r3, #1]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d116      	bne.n	800445c <HAL_PCD_EP_DB_Transmit+0xfe>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	637b      	str	r3, [r7, #52]	; 0x34
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800443c:	b29b      	uxth	r3, r3
 800443e:	461a      	mov	r2, r3
 8004440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004442:	4413      	add	r3, r2
 8004444:	637b      	str	r3, [r7, #52]	; 0x34
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	011a      	lsls	r2, r3, #4
 800444c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800444e:	4413      	add	r3, r2
 8004450:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004454:	633b      	str	r3, [r7, #48]	; 0x30
 8004456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004458:	2200      	movs	r2, #0
 800445a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	627b      	str	r3, [r7, #36]	; 0x24
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	785b      	ldrb	r3, [r3, #1]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d126      	bne.n	80044b8 <HAL_PCD_EP_DB_Transmit+0x15a>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	61fb      	str	r3, [r7, #28]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004478:	b29b      	uxth	r3, r3
 800447a:	461a      	mov	r2, r3
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	4413      	add	r3, r2
 8004480:	61fb      	str	r3, [r7, #28]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	011a      	lsls	r2, r3, #4
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	4413      	add	r3, r2
 800448c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004490:	61bb      	str	r3, [r7, #24]
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	b29b      	uxth	r3, r3
 8004498:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800449c:	b29a      	uxth	r2, r3
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	801a      	strh	r2, [r3, #0]
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	801a      	strh	r2, [r3, #0]
 80044b6:	e017      	b.n	80044e8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	785b      	ldrb	r3, [r3, #1]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d113      	bne.n	80044e8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	461a      	mov	r2, r3
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	4413      	add	r3, r2
 80044d0:	627b      	str	r3, [r7, #36]	; 0x24
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	011a      	lsls	r2, r3, #4
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	4413      	add	r3, r2
 80044dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044e0:	623b      	str	r3, [r7, #32]
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	2200      	movs	r2, #0
 80044e6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	4619      	mov	r1, r3
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f005 f975 	bl	80097de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80044f4:	88fb      	ldrh	r3, [r7, #6]
 80044f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 82fc 	beq.w	8004af8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	461a      	mov	r2, r3
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	881b      	ldrh	r3, [r3, #0]
 8004510:	b29b      	uxth	r3, r3
 8004512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451a:	82fb      	strh	r3, [r7, #22]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	461a      	mov	r2, r3
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	441a      	add	r2, r3
 800452a:	8afb      	ldrh	r3, [r7, #22]
 800452c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004534:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800453c:	b29b      	uxth	r3, r3
 800453e:	8013      	strh	r3, [r2, #0]
 8004540:	e2da      	b.n	8004af8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004542:	88fb      	ldrh	r3, [r7, #6]
 8004544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d021      	beq.n	8004590 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	461a      	mov	r2, r3
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4413      	add	r3, r2
 800455a:	881b      	ldrh	r3, [r3, #0]
 800455c:	b29b      	uxth	r3, r3
 800455e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004566:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	461a      	mov	r2, r3
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	441a      	add	r2, r3
 8004578:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800457c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004580:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004584:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800458c:	b29b      	uxth	r3, r3
 800458e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004596:	2b01      	cmp	r3, #1
 8004598:	f040 82ae 	bne.w	8004af8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	695a      	ldr	r2, [r3, #20]
 80045a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80045a4:	441a      	add	r2, r3
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	69da      	ldr	r2, [r3, #28]
 80045ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80045b2:	441a      	add	r2, r3
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	6a1a      	ldr	r2, [r3, #32]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d30b      	bcc.n	80045dc <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	6a1a      	ldr	r2, [r3, #32]
 80045d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045d4:	1ad2      	subs	r2, r2, r3
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	621a      	str	r2, [r3, #32]
 80045da:	e017      	b.n	800460c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d108      	bne.n	80045f6 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80045e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80045e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80045f4:	e00a      	b.n	800460c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2200      	movs	r2, #0
 800460a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	785b      	ldrb	r3, [r3, #1]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d165      	bne.n	80046e0 <HAL_PCD_EP_DB_Transmit+0x382>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	63fb      	str	r3, [r7, #60]	; 0x3c
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004622:	b29b      	uxth	r3, r3
 8004624:	461a      	mov	r2, r3
 8004626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004628:	4413      	add	r3, r2
 800462a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	011a      	lsls	r2, r3, #4
 8004632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004634:	4413      	add	r3, r2
 8004636:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800463a:	63bb      	str	r3, [r7, #56]	; 0x38
 800463c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	b29b      	uxth	r3, r3
 8004642:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004646:	b29a      	uxth	r2, r3
 8004648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800464a:	801a      	strh	r2, [r3, #0]
 800464c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004650:	2b3e      	cmp	r3, #62	; 0x3e
 8004652:	d91d      	bls.n	8004690 <HAL_PCD_EP_DB_Transmit+0x332>
 8004654:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004658:	095b      	lsrs	r3, r3, #5
 800465a:	64bb      	str	r3, [r7, #72]	; 0x48
 800465c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004660:	f003 031f 	and.w	r3, r3, #31
 8004664:	2b00      	cmp	r3, #0
 8004666:	d102      	bne.n	800466e <HAL_PCD_EP_DB_Transmit+0x310>
 8004668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800466a:	3b01      	subs	r3, #1
 800466c:	64bb      	str	r3, [r7, #72]	; 0x48
 800466e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	b29a      	uxth	r2, r3
 8004674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004676:	b29b      	uxth	r3, r3
 8004678:	029b      	lsls	r3, r3, #10
 800467a:	b29b      	uxth	r3, r3
 800467c:	4313      	orrs	r3, r2
 800467e:	b29b      	uxth	r3, r3
 8004680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004688:	b29a      	uxth	r2, r3
 800468a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468c:	801a      	strh	r2, [r3, #0]
 800468e:	e044      	b.n	800471a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004690:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10a      	bne.n	80046ae <HAL_PCD_EP_DB_Transmit+0x350>
 8004698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	b29b      	uxth	r3, r3
 800469e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046aa:	801a      	strh	r2, [r3, #0]
 80046ac:	e035      	b.n	800471a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80046ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046b2:	085b      	lsrs	r3, r3, #1
 80046b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80046b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <HAL_PCD_EP_DB_Transmit+0x36a>
 80046c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046c4:	3301      	adds	r3, #1
 80046c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80046c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ca:	881b      	ldrh	r3, [r3, #0]
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	029b      	lsls	r3, r3, #10
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	4313      	orrs	r3, r2
 80046d8:	b29a      	uxth	r2, r3
 80046da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046dc:	801a      	strh	r2, [r3, #0]
 80046de:	e01c      	b.n	800471a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	785b      	ldrb	r3, [r3, #1]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d118      	bne.n	800471a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	647b      	str	r3, [r7, #68]	; 0x44
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	461a      	mov	r2, r3
 80046fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046fc:	4413      	add	r3, r2
 80046fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	011a      	lsls	r2, r3, #4
 8004706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004708:	4413      	add	r3, r2
 800470a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800470e:	643b      	str	r3, [r7, #64]	; 0x40
 8004710:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004714:	b29a      	uxth	r2, r3
 8004716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004718:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6818      	ldr	r0, [r3, #0]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	6959      	ldr	r1, [r3, #20]
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	891a      	ldrh	r2, [r3, #8]
 8004726:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800472a:	b29b      	uxth	r3, r3
 800472c:	f003 fa0d 	bl	8007b4a <USB_WritePMA>
 8004730:	e1e2      	b.n	8004af8 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800473a:	b29b      	uxth	r3, r3
 800473c:	461a      	mov	r2, r3
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	4413      	add	r3, r2
 8004746:	3306      	adds	r3, #6
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	6812      	ldr	r2, [r2, #0]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004754:	881b      	ldrh	r3, [r3, #0]
 8004756:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800475a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	699a      	ldr	r2, [r3, #24]
 8004762:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004766:	429a      	cmp	r2, r3
 8004768:	d307      	bcc.n	800477a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	699a      	ldr	r2, [r3, #24]
 800476e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004772:	1ad2      	subs	r2, r2, r3
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	619a      	str	r2, [r3, #24]
 8004778:	e002      	b.n	8004780 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2200      	movs	r2, #0
 800477e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	2b00      	cmp	r3, #0
 8004786:	f040 80c0 	bne.w	800490a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	785b      	ldrb	r3, [r3, #1]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d126      	bne.n	80047e0 <HAL_PCD_EP_DB_Transmit+0x482>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	461a      	mov	r2, r3
 80047a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80047a6:	4413      	add	r3, r2
 80047a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	011a      	lsls	r2, r3, #4
 80047b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80047b2:	4413      	add	r3, r2
 80047b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80047ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	b29b      	uxth	r3, r3
 80047c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047c8:	801a      	strh	r2, [r3, #0]
 80047ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047cc:	881b      	ldrh	r3, [r3, #0]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047d8:	b29a      	uxth	r2, r3
 80047da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047dc:	801a      	strh	r2, [r3, #0]
 80047de:	e01a      	b.n	8004816 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	785b      	ldrb	r3, [r3, #1]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d116      	bne.n	8004816 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	667b      	str	r3, [r7, #100]	; 0x64
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	461a      	mov	r2, r3
 80047fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047fc:	4413      	add	r3, r2
 80047fe:	667b      	str	r3, [r7, #100]	; 0x64
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	011a      	lsls	r2, r3, #4
 8004806:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004808:	4413      	add	r3, r2
 800480a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800480e:	663b      	str	r3, [r7, #96]	; 0x60
 8004810:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004812:	2200      	movs	r2, #0
 8004814:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	677b      	str	r3, [r7, #116]	; 0x74
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	785b      	ldrb	r3, [r3, #1]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d12b      	bne.n	800487c <HAL_PCD_EP_DB_Transmit+0x51e>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	66fb      	str	r3, [r7, #108]	; 0x6c
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004832:	b29b      	uxth	r3, r3
 8004834:	461a      	mov	r2, r3
 8004836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004838:	4413      	add	r3, r2
 800483a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	011a      	lsls	r2, r3, #4
 8004842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004844:	4413      	add	r3, r2
 8004846:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800484a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800484e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	b29b      	uxth	r3, r3
 8004856:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800485a:	b29a      	uxth	r2, r3
 800485c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004860:	801a      	strh	r2, [r3, #0]
 8004862:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004866:	881b      	ldrh	r3, [r3, #0]
 8004868:	b29b      	uxth	r3, r3
 800486a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800486e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004872:	b29a      	uxth	r2, r3
 8004874:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004878:	801a      	strh	r2, [r3, #0]
 800487a:	e017      	b.n	80048ac <HAL_PCD_EP_DB_Transmit+0x54e>
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	785b      	ldrb	r3, [r3, #1]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d113      	bne.n	80048ac <HAL_PCD_EP_DB_Transmit+0x54e>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800488c:	b29b      	uxth	r3, r3
 800488e:	461a      	mov	r2, r3
 8004890:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004892:	4413      	add	r3, r2
 8004894:	677b      	str	r3, [r7, #116]	; 0x74
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	011a      	lsls	r2, r3, #4
 800489c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800489e:	4413      	add	r3, r2
 80048a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048a4:	673b      	str	r3, [r7, #112]	; 0x70
 80048a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048a8:	2200      	movs	r2, #0
 80048aa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	4619      	mov	r1, r3
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f004 ff93 	bl	80097de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80048b8:	88fb      	ldrh	r3, [r7, #6]
 80048ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f040 811a 	bne.w	8004af8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	461a      	mov	r2, r3
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048de:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	461a      	mov	r2, r3
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	441a      	add	r2, r3
 80048f0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80048f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004904:	b29b      	uxth	r3, r3
 8004906:	8013      	strh	r3, [r2, #0]
 8004908:	e0f6      	b.n	8004af8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800490a:	88fb      	ldrh	r3, [r7, #6]
 800490c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d121      	bne.n	8004958 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	461a      	mov	r2, r3
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4413      	add	r3, r2
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	b29b      	uxth	r3, r3
 8004926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800492a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	441a      	add	r2, r3
 8004940:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004944:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004948:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800494c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004954:	b29b      	uxth	r3, r3
 8004956:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800495e:	2b01      	cmp	r3, #1
 8004960:	f040 80ca 	bne.w	8004af8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	695a      	ldr	r2, [r3, #20]
 8004968:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800496c:	441a      	add	r2, r3
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	69da      	ldr	r2, [r3, #28]
 8004976:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800497a:	441a      	add	r2, r3
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	6a1a      	ldr	r2, [r3, #32]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	429a      	cmp	r2, r3
 800498a:	d30b      	bcc.n	80049a4 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	6a1a      	ldr	r2, [r3, #32]
 8004998:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800499c:	1ad2      	subs	r2, r2, r3
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	621a      	str	r2, [r3, #32]
 80049a2:	e017      	b.n	80049d4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d108      	bne.n	80049be <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80049ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80049b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80049bc:	e00a      	b.n	80049d4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2200      	movs	r2, #0
 80049ca:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	657b      	str	r3, [r7, #84]	; 0x54
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	785b      	ldrb	r3, [r3, #1]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d165      	bne.n	8004aae <HAL_PCD_EP_DB_Transmit+0x750>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	461a      	mov	r2, r3
 80049f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049f6:	4413      	add	r3, r2
 80049f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	011a      	lsls	r2, r3, #4
 8004a00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a02:	4413      	add	r3, r2
 8004a04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a08:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a18:	801a      	strh	r2, [r3, #0]
 8004a1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a1e:	2b3e      	cmp	r3, #62	; 0x3e
 8004a20:	d91d      	bls.n	8004a5e <HAL_PCD_EP_DB_Transmit+0x700>
 8004a22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a26:	095b      	lsrs	r3, r3, #5
 8004a28:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a2e:	f003 031f 	and.w	r3, r3, #31
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d102      	bne.n	8004a3c <HAL_PCD_EP_DB_Transmit+0x6de>
 8004a36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a3e:	881b      	ldrh	r3, [r3, #0]
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	029b      	lsls	r3, r3, #10
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a5a:	801a      	strh	r2, [r3, #0]
 8004a5c:	e041      	b.n	8004ae2 <HAL_PCD_EP_DB_Transmit+0x784>
 8004a5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10a      	bne.n	8004a7c <HAL_PCD_EP_DB_Transmit+0x71e>
 8004a66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a78:	801a      	strh	r2, [r3, #0]
 8004a7a:	e032      	b.n	8004ae2 <HAL_PCD_EP_DB_Transmit+0x784>
 8004a7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a80:	085b      	lsrs	r3, r3, #1
 8004a82:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <HAL_PCD_EP_DB_Transmit+0x738>
 8004a90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a92:	3301      	adds	r3, #1
 8004a94:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	029b      	lsls	r3, r3, #10
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004aaa:	801a      	strh	r2, [r3, #0]
 8004aac:	e019      	b.n	8004ae2 <HAL_PCD_EP_DB_Transmit+0x784>
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	785b      	ldrb	r3, [r3, #1]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d115      	bne.n	8004ae2 <HAL_PCD_EP_DB_Transmit+0x784>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ac4:	4413      	add	r3, r2
 8004ac6:	657b      	str	r3, [r7, #84]	; 0x54
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	011a      	lsls	r2, r3, #4
 8004ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ad6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ad8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ae0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6818      	ldr	r0, [r3, #0]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	6959      	ldr	r1, [r3, #20]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	895a      	ldrh	r2, [r3, #10]
 8004aee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	f003 f829 	bl	8007b4a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	461a      	mov	r2, r3
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b12:	82bb      	strh	r3, [r7, #20]
 8004b14:	8abb      	ldrh	r3, [r7, #20]
 8004b16:	f083 0310 	eor.w	r3, r3, #16
 8004b1a:	82bb      	strh	r3, [r7, #20]
 8004b1c:	8abb      	ldrh	r3, [r7, #20]
 8004b1e:	f083 0320 	eor.w	r3, r3, #32
 8004b22:	82bb      	strh	r3, [r7, #20]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	441a      	add	r2, r3
 8004b32:	8abb      	ldrh	r3, [r7, #20]
 8004b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3790      	adds	r7, #144	; 0x90
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b087      	sub	sp, #28
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	60f8      	str	r0, [r7, #12]
 8004b5a:	607b      	str	r3, [r7, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	817b      	strh	r3, [r7, #10]
 8004b60:	4613      	mov	r3, r2
 8004b62:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004b64:	897b      	ldrh	r3, [r7, #10]
 8004b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00b      	beq.n	8004b88 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b70:	897b      	ldrh	r3, [r7, #10]
 8004b72:	f003 0307 	and.w	r3, r3, #7
 8004b76:	1c5a      	adds	r2, r3, #1
 8004b78:	4613      	mov	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	4413      	add	r3, r2
 8004b84:	617b      	str	r3, [r7, #20]
 8004b86:	e009      	b.n	8004b9c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004b88:	897a      	ldrh	r2, [r7, #10]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	00db      	lsls	r3, r3, #3
 8004b92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	4413      	add	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004b9c:	893b      	ldrh	r3, [r7, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d107      	bne.n	8004bb2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	80da      	strh	r2, [r3, #6]
 8004bb0:	e00b      	b.n	8004bca <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	0c1b      	lsrs	r3, r3, #16
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	371c      	adds	r7, #28
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bc80      	pop	{r7}
 8004bd4:	4770      	bx	lr
	...

08004bd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e272      	b.n	80050d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 8087 	beq.w	8004d06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bf8:	4b92      	ldr	r3, [pc, #584]	; (8004e44 <HAL_RCC_OscConfig+0x26c>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f003 030c 	and.w	r3, r3, #12
 8004c00:	2b04      	cmp	r3, #4
 8004c02:	d00c      	beq.n	8004c1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c04:	4b8f      	ldr	r3, [pc, #572]	; (8004e44 <HAL_RCC_OscConfig+0x26c>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f003 030c 	and.w	r3, r3, #12
 8004c0c:	2b08      	cmp	r3, #8
 8004c0e:	d112      	bne.n	8004c36 <HAL_RCC_OscConfig+0x5e>
 8004c10:	4b8c      	ldr	r3, [pc, #560]	; (8004e44 <HAL_RCC_OscConfig+0x26c>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c1c:	d10b      	bne.n	8004c36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c1e:	4b89      	ldr	r3, [pc, #548]	; (8004e44 <HAL_RCC_OscConfig+0x26c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d06c      	beq.n	8004d04 <HAL_RCC_OscConfig+0x12c>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d168      	bne.n	8004d04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e24c      	b.n	80050d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c3e:	d106      	bne.n	8004c4e <HAL_RCC_OscConfig+0x76>
 8004c40:	4b80      	ldr	r3, [pc, #512]	; (8004e44 <HAL_RCC_OscConfig+0x26c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a7f      	ldr	r2, [pc, #508]	; (8004e44 <HAL_RCC_OscConfig+0x26c>)
 8004c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c4a:	6013      	str	r3, [r2, #0]
 8004c4c:	e02e      	b.n	8004cac <HAL_RCC_OscConfig+0xd4>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10c      	bne.n	8004c70 <HAL_RCC_OscConfig+0x98>
 8004c56:	4b7b      	ldr	r3, [pc, #492]	; (8004e44 <HAL_RCC_OscConfig+0x26c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a7a      	ldr	r2, [pc, #488]	; (8004e44 <HAL_RCC_OscConfig+0x26c>)
 8004c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c60:	6013      	str	r3, [r2, #0]
 8004c62:	4b78      	ldr	r3, [pc, #480]	; (8004e44 <HAL_RCC_OscConfig+0x26c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a77      	ldr	r2, [pc, #476]	; (8004e44 <HAL_RCC_OscConfig+0x26c>)
 8004c68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	e01d      	b.n	8004cac <HAL_RCC_OscConfig+0xd4>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c78:	d10c      	bne.n	8004c94 <HAL_RCC_OscConfig+0xbc>
 8004c7a:	4b72      	ldr	r3, [pc, #456]	; (8004e44 <HAL_RCC_OscConfig+0x26c>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a71      	ldr	r2, [pc, #452]	; (8004e44 <HAL_RCC_OscConfig+0x26c>)
 8004c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	4b6f      	ldr	r3, [pc, #444]	; (8004e44 <HAL_RCC_OscConfig+0x26c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a6e      	ldr	r2, [pc, #440]	; (8004e44 <HAL_RCC_OscConfig+0x26c>)
 8004c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	e00b      	b.n	8004cac <HAL_RCC_OscConfig+0xd4>
 8004c94:	4b6b      	ldr	r3, [pc, #428]	; (8004e44 <HAL_RCC_OscConfig+0x26c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a6a      	ldr	r2, [pc, #424]	; (8004e44 <HAL_RCC_OscConfig+0x26c>)
 8004c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c9e:	6013      	str	r3, [r2, #0]
 8004ca0:	4b68      	ldr	r3, [pc, #416]	; (8004e44 <HAL_RCC_OscConfig+0x26c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a67      	ldr	r2, [pc, #412]	; (8004e44 <HAL_RCC_OscConfig+0x26c>)
 8004ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004caa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d013      	beq.n	8004cdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb4:	f7fc ff08 	bl	8001ac8 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cbc:	f7fc ff04 	bl	8001ac8 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b64      	cmp	r3, #100	; 0x64
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e200      	b.n	80050d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cce:	4b5d      	ldr	r3, [pc, #372]	; (8004e44 <HAL_RCC_OscConfig+0x26c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0f0      	beq.n	8004cbc <HAL_RCC_OscConfig+0xe4>
 8004cda:	e014      	b.n	8004d06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cdc:	f7fc fef4 	bl	8001ac8 <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ce4:	f7fc fef0 	bl	8001ac8 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b64      	cmp	r3, #100	; 0x64
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e1ec      	b.n	80050d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cf6:	4b53      	ldr	r3, [pc, #332]	; (8004e44 <HAL_RCC_OscConfig+0x26c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1f0      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x10c>
 8004d02:	e000      	b.n	8004d06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d063      	beq.n	8004dda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d12:	4b4c      	ldr	r3, [pc, #304]	; (8004e44 <HAL_RCC_OscConfig+0x26c>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f003 030c 	and.w	r3, r3, #12
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00b      	beq.n	8004d36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004d1e:	4b49      	ldr	r3, [pc, #292]	; (8004e44 <HAL_RCC_OscConfig+0x26c>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f003 030c 	and.w	r3, r3, #12
 8004d26:	2b08      	cmp	r3, #8
 8004d28:	d11c      	bne.n	8004d64 <HAL_RCC_OscConfig+0x18c>
 8004d2a:	4b46      	ldr	r3, [pc, #280]	; (8004e44 <HAL_RCC_OscConfig+0x26c>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d116      	bne.n	8004d64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d36:	4b43      	ldr	r3, [pc, #268]	; (8004e44 <HAL_RCC_OscConfig+0x26c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d005      	beq.n	8004d4e <HAL_RCC_OscConfig+0x176>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d001      	beq.n	8004d4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e1c0      	b.n	80050d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d4e:	4b3d      	ldr	r3, [pc, #244]	; (8004e44 <HAL_RCC_OscConfig+0x26c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	4939      	ldr	r1, [pc, #228]	; (8004e44 <HAL_RCC_OscConfig+0x26c>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d62:	e03a      	b.n	8004dda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d020      	beq.n	8004dae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d6c:	4b36      	ldr	r3, [pc, #216]	; (8004e48 <HAL_RCC_OscConfig+0x270>)
 8004d6e:	2201      	movs	r2, #1
 8004d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d72:	f7fc fea9 	bl	8001ac8 <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d78:	e008      	b.n	8004d8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d7a:	f7fc fea5 	bl	8001ac8 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d901      	bls.n	8004d8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e1a1      	b.n	80050d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d8c:	4b2d      	ldr	r3, [pc, #180]	; (8004e44 <HAL_RCC_OscConfig+0x26c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0f0      	beq.n	8004d7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d98:	4b2a      	ldr	r3, [pc, #168]	; (8004e44 <HAL_RCC_OscConfig+0x26c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	00db      	lsls	r3, r3, #3
 8004da6:	4927      	ldr	r1, [pc, #156]	; (8004e44 <HAL_RCC_OscConfig+0x26c>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	600b      	str	r3, [r1, #0]
 8004dac:	e015      	b.n	8004dda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dae:	4b26      	ldr	r3, [pc, #152]	; (8004e48 <HAL_RCC_OscConfig+0x270>)
 8004db0:	2200      	movs	r2, #0
 8004db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db4:	f7fc fe88 	bl	8001ac8 <HAL_GetTick>
 8004db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dba:	e008      	b.n	8004dce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dbc:	f7fc fe84 	bl	8001ac8 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e180      	b.n	80050d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dce:	4b1d      	ldr	r3, [pc, #116]	; (8004e44 <HAL_RCC_OscConfig+0x26c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1f0      	bne.n	8004dbc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d03a      	beq.n	8004e5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d019      	beq.n	8004e22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dee:	4b17      	ldr	r3, [pc, #92]	; (8004e4c <HAL_RCC_OscConfig+0x274>)
 8004df0:	2201      	movs	r2, #1
 8004df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004df4:	f7fc fe68 	bl	8001ac8 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dfc:	f7fc fe64 	bl	8001ac8 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e160      	b.n	80050d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e0e:	4b0d      	ldr	r3, [pc, #52]	; (8004e44 <HAL_RCC_OscConfig+0x26c>)
 8004e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d0f0      	beq.n	8004dfc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004e1a:	2001      	movs	r0, #1
 8004e1c:	f000 faba 	bl	8005394 <RCC_Delay>
 8004e20:	e01c      	b.n	8004e5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e22:	4b0a      	ldr	r3, [pc, #40]	; (8004e4c <HAL_RCC_OscConfig+0x274>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e28:	f7fc fe4e 	bl	8001ac8 <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e2e:	e00f      	b.n	8004e50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e30:	f7fc fe4a 	bl	8001ac8 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d908      	bls.n	8004e50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e146      	b.n	80050d0 <HAL_RCC_OscConfig+0x4f8>
 8004e42:	bf00      	nop
 8004e44:	40021000 	.word	0x40021000
 8004e48:	42420000 	.word	0x42420000
 8004e4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e50:	4b92      	ldr	r3, [pc, #584]	; (800509c <HAL_RCC_OscConfig+0x4c4>)
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1e9      	bne.n	8004e30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 80a6 	beq.w	8004fb6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e6e:	4b8b      	ldr	r3, [pc, #556]	; (800509c <HAL_RCC_OscConfig+0x4c4>)
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10d      	bne.n	8004e96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e7a:	4b88      	ldr	r3, [pc, #544]	; (800509c <HAL_RCC_OscConfig+0x4c4>)
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	4a87      	ldr	r2, [pc, #540]	; (800509c <HAL_RCC_OscConfig+0x4c4>)
 8004e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e84:	61d3      	str	r3, [r2, #28]
 8004e86:	4b85      	ldr	r3, [pc, #532]	; (800509c <HAL_RCC_OscConfig+0x4c4>)
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e8e:	60bb      	str	r3, [r7, #8]
 8004e90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e92:	2301      	movs	r3, #1
 8004e94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e96:	4b82      	ldr	r3, [pc, #520]	; (80050a0 <HAL_RCC_OscConfig+0x4c8>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d118      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ea2:	4b7f      	ldr	r3, [pc, #508]	; (80050a0 <HAL_RCC_OscConfig+0x4c8>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a7e      	ldr	r2, [pc, #504]	; (80050a0 <HAL_RCC_OscConfig+0x4c8>)
 8004ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eae:	f7fc fe0b 	bl	8001ac8 <HAL_GetTick>
 8004eb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb4:	e008      	b.n	8004ec8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb6:	f7fc fe07 	bl	8001ac8 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b64      	cmp	r3, #100	; 0x64
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e103      	b.n	80050d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec8:	4b75      	ldr	r3, [pc, #468]	; (80050a0 <HAL_RCC_OscConfig+0x4c8>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0f0      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d106      	bne.n	8004eea <HAL_RCC_OscConfig+0x312>
 8004edc:	4b6f      	ldr	r3, [pc, #444]	; (800509c <HAL_RCC_OscConfig+0x4c4>)
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	4a6e      	ldr	r2, [pc, #440]	; (800509c <HAL_RCC_OscConfig+0x4c4>)
 8004ee2:	f043 0301 	orr.w	r3, r3, #1
 8004ee6:	6213      	str	r3, [r2, #32]
 8004ee8:	e02d      	b.n	8004f46 <HAL_RCC_OscConfig+0x36e>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10c      	bne.n	8004f0c <HAL_RCC_OscConfig+0x334>
 8004ef2:	4b6a      	ldr	r3, [pc, #424]	; (800509c <HAL_RCC_OscConfig+0x4c4>)
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	4a69      	ldr	r2, [pc, #420]	; (800509c <HAL_RCC_OscConfig+0x4c4>)
 8004ef8:	f023 0301 	bic.w	r3, r3, #1
 8004efc:	6213      	str	r3, [r2, #32]
 8004efe:	4b67      	ldr	r3, [pc, #412]	; (800509c <HAL_RCC_OscConfig+0x4c4>)
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	4a66      	ldr	r2, [pc, #408]	; (800509c <HAL_RCC_OscConfig+0x4c4>)
 8004f04:	f023 0304 	bic.w	r3, r3, #4
 8004f08:	6213      	str	r3, [r2, #32]
 8004f0a:	e01c      	b.n	8004f46 <HAL_RCC_OscConfig+0x36e>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	2b05      	cmp	r3, #5
 8004f12:	d10c      	bne.n	8004f2e <HAL_RCC_OscConfig+0x356>
 8004f14:	4b61      	ldr	r3, [pc, #388]	; (800509c <HAL_RCC_OscConfig+0x4c4>)
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	4a60      	ldr	r2, [pc, #384]	; (800509c <HAL_RCC_OscConfig+0x4c4>)
 8004f1a:	f043 0304 	orr.w	r3, r3, #4
 8004f1e:	6213      	str	r3, [r2, #32]
 8004f20:	4b5e      	ldr	r3, [pc, #376]	; (800509c <HAL_RCC_OscConfig+0x4c4>)
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	4a5d      	ldr	r2, [pc, #372]	; (800509c <HAL_RCC_OscConfig+0x4c4>)
 8004f26:	f043 0301 	orr.w	r3, r3, #1
 8004f2a:	6213      	str	r3, [r2, #32]
 8004f2c:	e00b      	b.n	8004f46 <HAL_RCC_OscConfig+0x36e>
 8004f2e:	4b5b      	ldr	r3, [pc, #364]	; (800509c <HAL_RCC_OscConfig+0x4c4>)
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	4a5a      	ldr	r2, [pc, #360]	; (800509c <HAL_RCC_OscConfig+0x4c4>)
 8004f34:	f023 0301 	bic.w	r3, r3, #1
 8004f38:	6213      	str	r3, [r2, #32]
 8004f3a:	4b58      	ldr	r3, [pc, #352]	; (800509c <HAL_RCC_OscConfig+0x4c4>)
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	4a57      	ldr	r2, [pc, #348]	; (800509c <HAL_RCC_OscConfig+0x4c4>)
 8004f40:	f023 0304 	bic.w	r3, r3, #4
 8004f44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d015      	beq.n	8004f7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f4e:	f7fc fdbb 	bl	8001ac8 <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f54:	e00a      	b.n	8004f6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f56:	f7fc fdb7 	bl	8001ac8 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e0b1      	b.n	80050d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f6c:	4b4b      	ldr	r3, [pc, #300]	; (800509c <HAL_RCC_OscConfig+0x4c4>)
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0ee      	beq.n	8004f56 <HAL_RCC_OscConfig+0x37e>
 8004f78:	e014      	b.n	8004fa4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f7a:	f7fc fda5 	bl	8001ac8 <HAL_GetTick>
 8004f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f80:	e00a      	b.n	8004f98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f82:	f7fc fda1 	bl	8001ac8 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d901      	bls.n	8004f98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e09b      	b.n	80050d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f98:	4b40      	ldr	r3, [pc, #256]	; (800509c <HAL_RCC_OscConfig+0x4c4>)
 8004f9a:	6a1b      	ldr	r3, [r3, #32]
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1ee      	bne.n	8004f82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004fa4:	7dfb      	ldrb	r3, [r7, #23]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d105      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004faa:	4b3c      	ldr	r3, [pc, #240]	; (800509c <HAL_RCC_OscConfig+0x4c4>)
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	4a3b      	ldr	r2, [pc, #236]	; (800509c <HAL_RCC_OscConfig+0x4c4>)
 8004fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fb4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 8087 	beq.w	80050ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fc0:	4b36      	ldr	r3, [pc, #216]	; (800509c <HAL_RCC_OscConfig+0x4c4>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f003 030c 	and.w	r3, r3, #12
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d061      	beq.n	8005090 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	69db      	ldr	r3, [r3, #28]
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d146      	bne.n	8005062 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fd4:	4b33      	ldr	r3, [pc, #204]	; (80050a4 <HAL_RCC_OscConfig+0x4cc>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fda:	f7fc fd75 	bl	8001ac8 <HAL_GetTick>
 8004fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fe0:	e008      	b.n	8004ff4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe2:	f7fc fd71 	bl	8001ac8 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d901      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e06d      	b.n	80050d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ff4:	4b29      	ldr	r3, [pc, #164]	; (800509c <HAL_RCC_OscConfig+0x4c4>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1f0      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005008:	d108      	bne.n	800501c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800500a:	4b24      	ldr	r3, [pc, #144]	; (800509c <HAL_RCC_OscConfig+0x4c4>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	4921      	ldr	r1, [pc, #132]	; (800509c <HAL_RCC_OscConfig+0x4c4>)
 8005018:	4313      	orrs	r3, r2
 800501a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800501c:	4b1f      	ldr	r3, [pc, #124]	; (800509c <HAL_RCC_OscConfig+0x4c4>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a19      	ldr	r1, [r3, #32]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	430b      	orrs	r3, r1
 800502e:	491b      	ldr	r1, [pc, #108]	; (800509c <HAL_RCC_OscConfig+0x4c4>)
 8005030:	4313      	orrs	r3, r2
 8005032:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005034:	4b1b      	ldr	r3, [pc, #108]	; (80050a4 <HAL_RCC_OscConfig+0x4cc>)
 8005036:	2201      	movs	r2, #1
 8005038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800503a:	f7fc fd45 	bl	8001ac8 <HAL_GetTick>
 800503e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005040:	e008      	b.n	8005054 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005042:	f7fc fd41 	bl	8001ac8 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d901      	bls.n	8005054 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e03d      	b.n	80050d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005054:	4b11      	ldr	r3, [pc, #68]	; (800509c <HAL_RCC_OscConfig+0x4c4>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0f0      	beq.n	8005042 <HAL_RCC_OscConfig+0x46a>
 8005060:	e035      	b.n	80050ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005062:	4b10      	ldr	r3, [pc, #64]	; (80050a4 <HAL_RCC_OscConfig+0x4cc>)
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005068:	f7fc fd2e 	bl	8001ac8 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005070:	f7fc fd2a 	bl	8001ac8 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e026      	b.n	80050d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005082:	4b06      	ldr	r3, [pc, #24]	; (800509c <HAL_RCC_OscConfig+0x4c4>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1f0      	bne.n	8005070 <HAL_RCC_OscConfig+0x498>
 800508e:	e01e      	b.n	80050ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	69db      	ldr	r3, [r3, #28]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d107      	bne.n	80050a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e019      	b.n	80050d0 <HAL_RCC_OscConfig+0x4f8>
 800509c:	40021000 	.word	0x40021000
 80050a0:	40007000 	.word	0x40007000
 80050a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80050a8:	4b0b      	ldr	r3, [pc, #44]	; (80050d8 <HAL_RCC_OscConfig+0x500>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d106      	bne.n	80050ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d001      	beq.n	80050ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e000      	b.n	80050d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3718      	adds	r7, #24
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	40021000 	.word	0x40021000

080050dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e0d0      	b.n	8005292 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050f0:	4b6a      	ldr	r3, [pc, #424]	; (800529c <HAL_RCC_ClockConfig+0x1c0>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d910      	bls.n	8005120 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050fe:	4b67      	ldr	r3, [pc, #412]	; (800529c <HAL_RCC_ClockConfig+0x1c0>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f023 0207 	bic.w	r2, r3, #7
 8005106:	4965      	ldr	r1, [pc, #404]	; (800529c <HAL_RCC_ClockConfig+0x1c0>)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	4313      	orrs	r3, r2
 800510c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800510e:	4b63      	ldr	r3, [pc, #396]	; (800529c <HAL_RCC_ClockConfig+0x1c0>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	429a      	cmp	r2, r3
 800511a:	d001      	beq.n	8005120 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e0b8      	b.n	8005292 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d020      	beq.n	800516e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0304 	and.w	r3, r3, #4
 8005134:	2b00      	cmp	r3, #0
 8005136:	d005      	beq.n	8005144 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005138:	4b59      	ldr	r3, [pc, #356]	; (80052a0 <HAL_RCC_ClockConfig+0x1c4>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	4a58      	ldr	r2, [pc, #352]	; (80052a0 <HAL_RCC_ClockConfig+0x1c4>)
 800513e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005142:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0308 	and.w	r3, r3, #8
 800514c:	2b00      	cmp	r3, #0
 800514e:	d005      	beq.n	800515c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005150:	4b53      	ldr	r3, [pc, #332]	; (80052a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	4a52      	ldr	r2, [pc, #328]	; (80052a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005156:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800515a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800515c:	4b50      	ldr	r3, [pc, #320]	; (80052a0 <HAL_RCC_ClockConfig+0x1c4>)
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	494d      	ldr	r1, [pc, #308]	; (80052a0 <HAL_RCC_ClockConfig+0x1c4>)
 800516a:	4313      	orrs	r3, r2
 800516c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d040      	beq.n	80051fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d107      	bne.n	8005192 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005182:	4b47      	ldr	r3, [pc, #284]	; (80052a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d115      	bne.n	80051ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e07f      	b.n	8005292 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2b02      	cmp	r3, #2
 8005198:	d107      	bne.n	80051aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800519a:	4b41      	ldr	r3, [pc, #260]	; (80052a0 <HAL_RCC_ClockConfig+0x1c4>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d109      	bne.n	80051ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e073      	b.n	8005292 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051aa:	4b3d      	ldr	r3, [pc, #244]	; (80052a0 <HAL_RCC_ClockConfig+0x1c4>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e06b      	b.n	8005292 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051ba:	4b39      	ldr	r3, [pc, #228]	; (80052a0 <HAL_RCC_ClockConfig+0x1c4>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f023 0203 	bic.w	r2, r3, #3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	4936      	ldr	r1, [pc, #216]	; (80052a0 <HAL_RCC_ClockConfig+0x1c4>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051cc:	f7fc fc7c 	bl	8001ac8 <HAL_GetTick>
 80051d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051d2:	e00a      	b.n	80051ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051d4:	f7fc fc78 	bl	8001ac8 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d901      	bls.n	80051ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e053      	b.n	8005292 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ea:	4b2d      	ldr	r3, [pc, #180]	; (80052a0 <HAL_RCC_ClockConfig+0x1c4>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f003 020c 	and.w	r2, r3, #12
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d1eb      	bne.n	80051d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051fc:	4b27      	ldr	r3, [pc, #156]	; (800529c <HAL_RCC_ClockConfig+0x1c0>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0307 	and.w	r3, r3, #7
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	429a      	cmp	r2, r3
 8005208:	d210      	bcs.n	800522c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800520a:	4b24      	ldr	r3, [pc, #144]	; (800529c <HAL_RCC_ClockConfig+0x1c0>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f023 0207 	bic.w	r2, r3, #7
 8005212:	4922      	ldr	r1, [pc, #136]	; (800529c <HAL_RCC_ClockConfig+0x1c0>)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	4313      	orrs	r3, r2
 8005218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800521a:	4b20      	ldr	r3, [pc, #128]	; (800529c <HAL_RCC_ClockConfig+0x1c0>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0307 	and.w	r3, r3, #7
 8005222:	683a      	ldr	r2, [r7, #0]
 8005224:	429a      	cmp	r2, r3
 8005226:	d001      	beq.n	800522c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e032      	b.n	8005292 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b00      	cmp	r3, #0
 8005236:	d008      	beq.n	800524a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005238:	4b19      	ldr	r3, [pc, #100]	; (80052a0 <HAL_RCC_ClockConfig+0x1c4>)
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	4916      	ldr	r1, [pc, #88]	; (80052a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005246:	4313      	orrs	r3, r2
 8005248:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0308 	and.w	r3, r3, #8
 8005252:	2b00      	cmp	r3, #0
 8005254:	d009      	beq.n	800526a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005256:	4b12      	ldr	r3, [pc, #72]	; (80052a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	490e      	ldr	r1, [pc, #56]	; (80052a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005266:	4313      	orrs	r3, r2
 8005268:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800526a:	f000 f821 	bl	80052b0 <HAL_RCC_GetSysClockFreq>
 800526e:	4602      	mov	r2, r0
 8005270:	4b0b      	ldr	r3, [pc, #44]	; (80052a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	091b      	lsrs	r3, r3, #4
 8005276:	f003 030f 	and.w	r3, r3, #15
 800527a:	490a      	ldr	r1, [pc, #40]	; (80052a4 <HAL_RCC_ClockConfig+0x1c8>)
 800527c:	5ccb      	ldrb	r3, [r1, r3]
 800527e:	fa22 f303 	lsr.w	r3, r2, r3
 8005282:	4a09      	ldr	r2, [pc, #36]	; (80052a8 <HAL_RCC_ClockConfig+0x1cc>)
 8005284:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005286:	4b09      	ldr	r3, [pc, #36]	; (80052ac <HAL_RCC_ClockConfig+0x1d0>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4618      	mov	r0, r3
 800528c:	f7fc fbda 	bl	8001a44 <HAL_InitTick>

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	40022000 	.word	0x40022000
 80052a0:	40021000 	.word	0x40021000
 80052a4:	0800e5d8 	.word	0x0800e5d8
 80052a8:	20000000 	.word	0x20000000
 80052ac:	20000004 	.word	0x20000004

080052b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	60fb      	str	r3, [r7, #12]
 80052ba:	2300      	movs	r3, #0
 80052bc:	60bb      	str	r3, [r7, #8]
 80052be:	2300      	movs	r3, #0
 80052c0:	617b      	str	r3, [r7, #20]
 80052c2:	2300      	movs	r3, #0
 80052c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80052c6:	2300      	movs	r3, #0
 80052c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80052ca:	4b1e      	ldr	r3, [pc, #120]	; (8005344 <HAL_RCC_GetSysClockFreq+0x94>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f003 030c 	and.w	r3, r3, #12
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	d002      	beq.n	80052e0 <HAL_RCC_GetSysClockFreq+0x30>
 80052da:	2b08      	cmp	r3, #8
 80052dc:	d003      	beq.n	80052e6 <HAL_RCC_GetSysClockFreq+0x36>
 80052de:	e027      	b.n	8005330 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80052e0:	4b19      	ldr	r3, [pc, #100]	; (8005348 <HAL_RCC_GetSysClockFreq+0x98>)
 80052e2:	613b      	str	r3, [r7, #16]
      break;
 80052e4:	e027      	b.n	8005336 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	0c9b      	lsrs	r3, r3, #18
 80052ea:	f003 030f 	and.w	r3, r3, #15
 80052ee:	4a17      	ldr	r2, [pc, #92]	; (800534c <HAL_RCC_GetSysClockFreq+0x9c>)
 80052f0:	5cd3      	ldrb	r3, [r2, r3]
 80052f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d010      	beq.n	8005320 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80052fe:	4b11      	ldr	r3, [pc, #68]	; (8005344 <HAL_RCC_GetSysClockFreq+0x94>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	0c5b      	lsrs	r3, r3, #17
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	4a11      	ldr	r2, [pc, #68]	; (8005350 <HAL_RCC_GetSysClockFreq+0xa0>)
 800530a:	5cd3      	ldrb	r3, [r2, r3]
 800530c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a0d      	ldr	r2, [pc, #52]	; (8005348 <HAL_RCC_GetSysClockFreq+0x98>)
 8005312:	fb03 f202 	mul.w	r2, r3, r2
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	fbb2 f3f3 	udiv	r3, r2, r3
 800531c:	617b      	str	r3, [r7, #20]
 800531e:	e004      	b.n	800532a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a0c      	ldr	r2, [pc, #48]	; (8005354 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005324:	fb02 f303 	mul.w	r3, r2, r3
 8005328:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	613b      	str	r3, [r7, #16]
      break;
 800532e:	e002      	b.n	8005336 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005330:	4b05      	ldr	r3, [pc, #20]	; (8005348 <HAL_RCC_GetSysClockFreq+0x98>)
 8005332:	613b      	str	r3, [r7, #16]
      break;
 8005334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005336:	693b      	ldr	r3, [r7, #16]
}
 8005338:	4618      	mov	r0, r3
 800533a:	371c      	adds	r7, #28
 800533c:	46bd      	mov	sp, r7
 800533e:	bc80      	pop	{r7}
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	40021000 	.word	0x40021000
 8005348:	007a1200 	.word	0x007a1200
 800534c:	0800e5f0 	.word	0x0800e5f0
 8005350:	0800e600 	.word	0x0800e600
 8005354:	003d0900 	.word	0x003d0900

08005358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005358:	b480      	push	{r7}
 800535a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800535c:	4b02      	ldr	r3, [pc, #8]	; (8005368 <HAL_RCC_GetHCLKFreq+0x10>)
 800535e:	681b      	ldr	r3, [r3, #0]
}
 8005360:	4618      	mov	r0, r3
 8005362:	46bd      	mov	sp, r7
 8005364:	bc80      	pop	{r7}
 8005366:	4770      	bx	lr
 8005368:	20000000 	.word	0x20000000

0800536c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005370:	f7ff fff2 	bl	8005358 <HAL_RCC_GetHCLKFreq>
 8005374:	4602      	mov	r2, r0
 8005376:	4b05      	ldr	r3, [pc, #20]	; (800538c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	0a1b      	lsrs	r3, r3, #8
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	4903      	ldr	r1, [pc, #12]	; (8005390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005382:	5ccb      	ldrb	r3, [r1, r3]
 8005384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005388:	4618      	mov	r0, r3
 800538a:	bd80      	pop	{r7, pc}
 800538c:	40021000 	.word	0x40021000
 8005390:	0800e5e8 	.word	0x0800e5e8

08005394 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800539c:	4b0a      	ldr	r3, [pc, #40]	; (80053c8 <RCC_Delay+0x34>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a0a      	ldr	r2, [pc, #40]	; (80053cc <RCC_Delay+0x38>)
 80053a2:	fba2 2303 	umull	r2, r3, r2, r3
 80053a6:	0a5b      	lsrs	r3, r3, #9
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	fb02 f303 	mul.w	r3, r2, r3
 80053ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80053b0:	bf00      	nop
  }
  while (Delay --);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	1e5a      	subs	r2, r3, #1
 80053b6:	60fa      	str	r2, [r7, #12]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1f9      	bne.n	80053b0 <RCC_Delay+0x1c>
}
 80053bc:	bf00      	nop
 80053be:	bf00      	nop
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bc80      	pop	{r7}
 80053c6:	4770      	bx	lr
 80053c8:	20000000 	.word	0x20000000
 80053cc:	10624dd3 	.word	0x10624dd3

080053d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	613b      	str	r3, [r7, #16]
 80053dc:	2300      	movs	r3, #0
 80053de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d07d      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80053ec:	2300      	movs	r3, #0
 80053ee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053f0:	4b4f      	ldr	r3, [pc, #316]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10d      	bne.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053fc:	4b4c      	ldr	r3, [pc, #304]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	4a4b      	ldr	r2, [pc, #300]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005406:	61d3      	str	r3, [r2, #28]
 8005408:	4b49      	ldr	r3, [pc, #292]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005410:	60bb      	str	r3, [r7, #8]
 8005412:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005414:	2301      	movs	r3, #1
 8005416:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005418:	4b46      	ldr	r3, [pc, #280]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005420:	2b00      	cmp	r3, #0
 8005422:	d118      	bne.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005424:	4b43      	ldr	r3, [pc, #268]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a42      	ldr	r2, [pc, #264]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800542a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800542e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005430:	f7fc fb4a 	bl	8001ac8 <HAL_GetTick>
 8005434:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005436:	e008      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005438:	f7fc fb46 	bl	8001ac8 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b64      	cmp	r3, #100	; 0x64
 8005444:	d901      	bls.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e06d      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800544a:	4b3a      	ldr	r3, [pc, #232]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005452:	2b00      	cmp	r3, #0
 8005454:	d0f0      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005456:	4b36      	ldr	r3, [pc, #216]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800545e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d02e      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	429a      	cmp	r2, r3
 8005472:	d027      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005474:	4b2e      	ldr	r3, [pc, #184]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800547c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800547e:	4b2e      	ldr	r3, [pc, #184]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005480:	2201      	movs	r2, #1
 8005482:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005484:	4b2c      	ldr	r3, [pc, #176]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005486:	2200      	movs	r2, #0
 8005488:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800548a:	4a29      	ldr	r2, [pc, #164]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d014      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800549a:	f7fc fb15 	bl	8001ac8 <HAL_GetTick>
 800549e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054a0:	e00a      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054a2:	f7fc fb11 	bl	8001ac8 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e036      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054b8:	4b1d      	ldr	r3, [pc, #116]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0ee      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054c4:	4b1a      	ldr	r3, [pc, #104]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	4917      	ldr	r1, [pc, #92]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80054d6:	7dfb      	ldrb	r3, [r7, #23]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d105      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054dc:	4b14      	ldr	r3, [pc, #80]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054de:	69db      	ldr	r3, [r3, #28]
 80054e0:	4a13      	ldr	r2, [pc, #76]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d008      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054f4:	4b0e      	ldr	r3, [pc, #56]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	490b      	ldr	r1, [pc, #44]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005502:	4313      	orrs	r3, r2
 8005504:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0310 	and.w	r3, r3, #16
 800550e:	2b00      	cmp	r3, #0
 8005510:	d008      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005512:	4b07      	ldr	r3, [pc, #28]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	4904      	ldr	r1, [pc, #16]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005520:	4313      	orrs	r3, r2
 8005522:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	40021000 	.word	0x40021000
 8005534:	40007000 	.word	0x40007000
 8005538:	42420440 	.word	0x42420440

0800553c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800553c:	b084      	sub	sp, #16
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
 8005546:	f107 0014 	add.w	r0, r7, #20
 800554a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	bc80      	pop	{r7}
 8005558:	b004      	add	sp, #16
 800555a:	4770      	bx	lr

0800555c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800556c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005570:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	b29a      	uxth	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	bc80      	pop	{r7}
 8005586:	4770      	bx	lr

08005588 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005590:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005594:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800559c:	b29a      	uxth	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	43db      	mvns	r3, r3
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	4013      	ands	r3, r2
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bc80      	pop	{r7}
 80055ba:	4770      	bx	lr

080055bc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	460b      	mov	r3, r1
 80055c6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bc80      	pop	{r7}
 80055d2:	4770      	bx	lr

080055d4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80055d4:	b084      	sub	sp, #16
 80055d6:	b480      	push	{r7}
 80055d8:	b083      	sub	sp, #12
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	f107 0014 	add.w	r0, r7, #20
 80055e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	bc80      	pop	{r7}
 8005610:	b004      	add	sp, #16
 8005612:	4770      	bx	lr

08005614 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005614:	b480      	push	{r7}
 8005616:	b09d      	sub	sp, #116	; 0x74
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	881b      	ldrh	r3, [r3, #0]
 8005630:	b29b      	uxth	r3, r3
 8005632:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	78db      	ldrb	r3, [r3, #3]
 8005642:	2b03      	cmp	r3, #3
 8005644:	d81f      	bhi.n	8005686 <USB_ActivateEndpoint+0x72>
 8005646:	a201      	add	r2, pc, #4	; (adr r2, 800564c <USB_ActivateEndpoint+0x38>)
 8005648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564c:	0800565d 	.word	0x0800565d
 8005650:	08005679 	.word	0x08005679
 8005654:	0800568f 	.word	0x0800568f
 8005658:	0800566b 	.word	0x0800566b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800565c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005660:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005664:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005668:	e012      	b.n	8005690 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800566a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800566e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005672:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005676:	e00b      	b.n	8005690 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005678:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800567c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005680:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005684:	e004      	b.n	8005690 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800568c:	e000      	b.n	8005690 <USB_ActivateEndpoint+0x7c>
      break;
 800568e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	441a      	add	r2, r3
 800569a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800569e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4413      	add	r3, r2
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	b29b      	uxth	r3, r3
 80056c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	4313      	orrs	r3, r2
 80056d2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	441a      	add	r2, r3
 80056e0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80056e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	7b1b      	ldrb	r3, [r3, #12]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f040 8178 	bne.w	80059f2 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	785b      	ldrb	r3, [r3, #1]
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 8084 	beq.w	8005814 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	61bb      	str	r3, [r7, #24]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005716:	b29b      	uxth	r3, r3
 8005718:	461a      	mov	r2, r3
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	4413      	add	r3, r2
 800571e:	61bb      	str	r3, [r7, #24]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	011a      	lsls	r2, r3, #4
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	4413      	add	r3, r2
 800572a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	88db      	ldrh	r3, [r3, #6]
 8005734:	085b      	lsrs	r3, r3, #1
 8005736:	b29b      	uxth	r3, r3
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	b29a      	uxth	r2, r3
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	827b      	strh	r3, [r7, #18]
 800574e:	8a7b      	ldrh	r3, [r7, #18]
 8005750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005754:	2b00      	cmp	r3, #0
 8005756:	d01b      	beq.n	8005790 <USB_ActivateEndpoint+0x17c>
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	b29b      	uxth	r3, r3
 8005766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800576a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576e:	823b      	strh	r3, [r7, #16]
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	441a      	add	r2, r3
 800577a:	8a3b      	ldrh	r3, [r7, #16]
 800577c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005788:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800578c:	b29b      	uxth	r3, r3
 800578e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	78db      	ldrb	r3, [r3, #3]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d020      	beq.n	80057da <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ae:	81bb      	strh	r3, [r7, #12]
 80057b0:	89bb      	ldrh	r3, [r7, #12]
 80057b2:	f083 0320 	eor.w	r3, r3, #32
 80057b6:	81bb      	strh	r3, [r7, #12]
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	441a      	add	r2, r3
 80057c2:	89bb      	ldrh	r3, [r7, #12]
 80057c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	8013      	strh	r3, [r2, #0]
 80057d8:	e2d5      	b.n	8005d86 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	881b      	ldrh	r3, [r3, #0]
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057f0:	81fb      	strh	r3, [r7, #14]
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	441a      	add	r2, r3
 80057fc:	89fb      	ldrh	r3, [r7, #14]
 80057fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005802:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800580a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800580e:	b29b      	uxth	r3, r3
 8005810:	8013      	strh	r3, [r2, #0]
 8005812:	e2b8      	b.n	8005d86 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	633b      	str	r3, [r7, #48]	; 0x30
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800581e:	b29b      	uxth	r3, r3
 8005820:	461a      	mov	r2, r3
 8005822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005824:	4413      	add	r3, r2
 8005826:	633b      	str	r3, [r7, #48]	; 0x30
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	011a      	lsls	r2, r3, #4
 800582e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005830:	4413      	add	r3, r2
 8005832:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005836:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	88db      	ldrh	r3, [r3, #6]
 800583c:	085b      	lsrs	r3, r3, #1
 800583e:	b29b      	uxth	r3, r3
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	b29a      	uxth	r2, r3
 8005844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005846:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	62bb      	str	r3, [r7, #40]	; 0x28
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005852:	b29b      	uxth	r3, r3
 8005854:	461a      	mov	r2, r3
 8005856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005858:	4413      	add	r3, r2
 800585a:	62bb      	str	r3, [r7, #40]	; 0x28
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	011a      	lsls	r2, r3, #4
 8005862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005864:	4413      	add	r3, r2
 8005866:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800586a:	627b      	str	r3, [r7, #36]	; 0x24
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	b29b      	uxth	r3, r3
 8005872:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005876:	b29a      	uxth	r2, r3
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	801a      	strh	r2, [r3, #0]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	2b3e      	cmp	r3, #62	; 0x3e
 8005882:	d91d      	bls.n	80058c0 <USB_ActivateEndpoint+0x2ac>
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	095b      	lsrs	r3, r3, #5
 800588a:	66bb      	str	r3, [r7, #104]	; 0x68
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	f003 031f 	and.w	r3, r3, #31
 8005894:	2b00      	cmp	r3, #0
 8005896:	d102      	bne.n	800589e <USB_ActivateEndpoint+0x28a>
 8005898:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800589a:	3b01      	subs	r3, #1
 800589c:	66bb      	str	r3, [r7, #104]	; 0x68
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	881b      	ldrh	r3, [r3, #0]
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	029b      	lsls	r3, r3, #10
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	4313      	orrs	r3, r2
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058bc:	801a      	strh	r2, [r3, #0]
 80058be:	e026      	b.n	800590e <USB_ActivateEndpoint+0x2fa>
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10a      	bne.n	80058de <USB_ActivateEndpoint+0x2ca>
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	881b      	ldrh	r3, [r3, #0]
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	801a      	strh	r2, [r3, #0]
 80058dc:	e017      	b.n	800590e <USB_ActivateEndpoint+0x2fa>
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	085b      	lsrs	r3, r3, #1
 80058e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d002      	beq.n	80058f8 <USB_ActivateEndpoint+0x2e4>
 80058f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058f4:	3301      	adds	r3, #1
 80058f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	881b      	ldrh	r3, [r3, #0]
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005900:	b29b      	uxth	r3, r3
 8005902:	029b      	lsls	r3, r3, #10
 8005904:	b29b      	uxth	r3, r3
 8005906:	4313      	orrs	r3, r2
 8005908:	b29a      	uxth	r2, r3
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	847b      	strh	r3, [r7, #34]	; 0x22
 800591c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800591e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d01b      	beq.n	800595e <USB_ActivateEndpoint+0x34a>
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4413      	add	r3, r2
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	b29b      	uxth	r3, r3
 8005934:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593c:	843b      	strh	r3, [r7, #32]
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	441a      	add	r2, r3
 8005948:	8c3b      	ldrh	r3, [r7, #32]
 800594a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800594e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005952:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800595a:	b29b      	uxth	r3, r3
 800595c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d124      	bne.n	80059b0 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4413      	add	r3, r2
 8005970:	881b      	ldrh	r3, [r3, #0]
 8005972:	b29b      	uxth	r3, r3
 8005974:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800597c:	83bb      	strh	r3, [r7, #28]
 800597e:	8bbb      	ldrh	r3, [r7, #28]
 8005980:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005984:	83bb      	strh	r3, [r7, #28]
 8005986:	8bbb      	ldrh	r3, [r7, #28]
 8005988:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800598c:	83bb      	strh	r3, [r7, #28]
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	441a      	add	r2, r3
 8005998:	8bbb      	ldrh	r3, [r7, #28]
 800599a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800599e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	8013      	strh	r3, [r2, #0]
 80059ae:	e1ea      	b.n	8005d86 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	881b      	ldrh	r3, [r3, #0]
 80059bc:	b29b      	uxth	r3, r3
 80059be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c6:	83fb      	strh	r3, [r7, #30]
 80059c8:	8bfb      	ldrh	r3, [r7, #30]
 80059ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80059ce:	83fb      	strh	r3, [r7, #30]
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	441a      	add	r2, r3
 80059da:	8bfb      	ldrh	r3, [r7, #30]
 80059dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	8013      	strh	r3, [r2, #0]
 80059f0:	e1c9      	b.n	8005d86 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	78db      	ldrb	r3, [r3, #3]
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d11e      	bne.n	8005a38 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4413      	add	r3, r2
 8005a04:	881b      	ldrh	r3, [r3, #0]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a10:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	441a      	add	r2, r3
 8005a1e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005a22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a2a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	8013      	strh	r3, [r2, #0]
 8005a36:	e01d      	b.n	8005a74 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	881b      	ldrh	r3, [r3, #0]
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	441a      	add	r2, r3
 8005a5c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005a60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	461a      	mov	r2, r3
 8005a82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a84:	4413      	add	r3, r2
 8005a86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	011a      	lsls	r2, r3, #4
 8005a8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a96:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	891b      	ldrh	r3, [r3, #8]
 8005a9c:	085b      	lsrs	r3, r3, #1
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005aa6:	801a      	strh	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	657b      	str	r3, [r7, #84]	; 0x54
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ab8:	4413      	add	r3, r2
 8005aba:	657b      	str	r3, [r7, #84]	; 0x54
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	011a      	lsls	r2, r3, #4
 8005ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005aca:	653b      	str	r3, [r7, #80]	; 0x50
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	895b      	ldrh	r3, [r3, #10]
 8005ad0:	085b      	lsrs	r3, r3, #1
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ada:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	785b      	ldrb	r3, [r3, #1]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f040 8093 	bne.w	8005c0c <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	4413      	add	r3, r2
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005af6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d01b      	beq.n	8005b3a <USB_ActivateEndpoint+0x526>
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	881b      	ldrh	r3, [r3, #0]
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b18:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	441a      	add	r2, r3
 8005b24:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005b26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005b48:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d01b      	beq.n	8005b8a <USB_ActivateEndpoint+0x576>
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	881b      	ldrh	r3, [r3, #0]
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b68:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	441a      	add	r2, r3
 8005b74:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005b76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4413      	add	r3, r2
 8005b94:	881b      	ldrh	r3, [r3, #0]
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba0:	873b      	strh	r3, [r7, #56]	; 0x38
 8005ba2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ba4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ba8:	873b      	strh	r3, [r7, #56]	; 0x38
 8005baa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005bac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005bb0:	873b      	strh	r3, [r7, #56]	; 0x38
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	441a      	add	r2, r3
 8005bbc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005bbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005be4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005be8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	441a      	add	r2, r3
 8005bf4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005bf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	8013      	strh	r3, [r2, #0]
 8005c0a:	e0bc      	b.n	8005d86 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	881b      	ldrh	r3, [r3, #0]
 8005c18:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005c1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005c20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d01d      	beq.n	8005c64 <USB_ActivateEndpoint+0x650>
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c3e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	441a      	add	r2, r3
 8005c4c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005c50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	881b      	ldrh	r3, [r3, #0]
 8005c70:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005c74:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d01d      	beq.n	8005cbc <USB_ActivateEndpoint+0x6a8>
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4413      	add	r3, r2
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c96:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	441a      	add	r2, r3
 8005ca4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	78db      	ldrb	r3, [r3, #3]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d024      	beq.n	8005d0e <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	881b      	ldrh	r3, [r3, #0]
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cda:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005cde:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005ce2:	f083 0320 	eor.w	r3, r3, #32
 8005ce6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	441a      	add	r2, r3
 8005cf4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005cf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	8013      	strh	r3, [r2, #0]
 8005d0c:	e01d      	b.n	8005d4a <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	881b      	ldrh	r3, [r3, #0]
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d24:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	441a      	add	r2, r3
 8005d32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005d36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	881b      	ldrh	r3, [r3, #0]
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d60:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	441a      	add	r2, r3
 8005d6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005d86:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3774      	adds	r7, #116	; 0x74
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bc80      	pop	{r7}
 8005d92:	4770      	bx	lr

08005d94 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b08d      	sub	sp, #52	; 0x34
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	7b1b      	ldrb	r3, [r3, #12]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f040 808e 	bne.w	8005ec4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	785b      	ldrb	r3, [r3, #1]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d044      	beq.n	8005e3a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4413      	add	r3, r2
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	81bb      	strh	r3, [r7, #12]
 8005dbe:	89bb      	ldrh	r3, [r7, #12]
 8005dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d01b      	beq.n	8005e00 <USB_DeactivateEndpoint+0x6c>
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	881b      	ldrh	r3, [r3, #0]
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dde:	817b      	strh	r3, [r7, #10]
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	441a      	add	r2, r3
 8005dea:	897b      	ldrh	r3, [r7, #10]
 8005dec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005df0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005df4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005df8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e16:	813b      	strh	r3, [r7, #8]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	441a      	add	r2, r3
 8005e22:	893b      	ldrh	r3, [r7, #8]
 8005e24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	8013      	strh	r3, [r2, #0]
 8005e38:	e192      	b.n	8006160 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4413      	add	r3, r2
 8005e44:	881b      	ldrh	r3, [r3, #0]
 8005e46:	827b      	strh	r3, [r7, #18]
 8005e48:	8a7b      	ldrh	r3, [r7, #18]
 8005e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d01b      	beq.n	8005e8a <USB_DeactivateEndpoint+0xf6>
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e68:	823b      	strh	r3, [r7, #16]
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	441a      	add	r2, r3
 8005e74:	8a3b      	ldrh	r3, [r7, #16]
 8005e76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	4413      	add	r3, r2
 8005e94:	881b      	ldrh	r3, [r3, #0]
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea0:	81fb      	strh	r3, [r7, #14]
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	441a      	add	r2, r3
 8005eac:	89fb      	ldrh	r3, [r7, #14]
 8005eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	8013      	strh	r3, [r2, #0]
 8005ec2:	e14d      	b.n	8006160 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	785b      	ldrb	r3, [r3, #1]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f040 80a5 	bne.w	8006018 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	843b      	strh	r3, [r7, #32]
 8005edc:	8c3b      	ldrh	r3, [r7, #32]
 8005ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d01b      	beq.n	8005f1e <USB_DeactivateEndpoint+0x18a>
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	881b      	ldrh	r3, [r3, #0]
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efc:	83fb      	strh	r3, [r7, #30]
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	441a      	add	r2, r3
 8005f08:	8bfb      	ldrh	r3, [r7, #30]
 8005f0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	83bb      	strh	r3, [r7, #28]
 8005f2c:	8bbb      	ldrh	r3, [r7, #28]
 8005f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d01b      	beq.n	8005f6e <USB_DeactivateEndpoint+0x1da>
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4c:	837b      	strh	r3, [r7, #26]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	441a      	add	r2, r3
 8005f58:	8b7b      	ldrh	r3, [r7, #26]
 8005f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4413      	add	r3, r2
 8005f78:	881b      	ldrh	r3, [r3, #0]
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f84:	833b      	strh	r3, [r7, #24]
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	441a      	add	r2, r3
 8005f90:	8b3b      	ldrh	r3, [r7, #24]
 8005f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4413      	add	r3, r2
 8005fb0:	881b      	ldrh	r3, [r3, #0]
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fbc:	82fb      	strh	r3, [r7, #22]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	441a      	add	r2, r3
 8005fc8:	8afb      	ldrh	r3, [r7, #22]
 8005fca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ff0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ff4:	82bb      	strh	r3, [r7, #20]
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	441a      	add	r2, r3
 8006000:	8abb      	ldrh	r3, [r7, #20]
 8006002:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006006:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800600a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800600e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006012:	b29b      	uxth	r3, r3
 8006014:	8013      	strh	r3, [r2, #0]
 8006016:	e0a3      	b.n	8006160 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006026:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d01b      	beq.n	8006068 <USB_DeactivateEndpoint+0x2d4>
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	b29b      	uxth	r3, r3
 800603e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006046:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	441a      	add	r2, r3
 8006052:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006054:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006058:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800605c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006064:	b29b      	uxth	r3, r3
 8006066:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	4413      	add	r3, r2
 8006072:	881b      	ldrh	r3, [r3, #0]
 8006074:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006076:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607c:	2b00      	cmp	r3, #0
 800607e:	d01b      	beq.n	80060b8 <USB_DeactivateEndpoint+0x324>
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	881b      	ldrh	r3, [r3, #0]
 800608c:	b29b      	uxth	r3, r3
 800608e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006096:	853b      	strh	r3, [r7, #40]	; 0x28
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	441a      	add	r2, r3
 80060a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80060a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4413      	add	r3, r2
 80060c2:	881b      	ldrh	r3, [r3, #0]
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ce:	84fb      	strh	r3, [r7, #38]	; 0x26
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	441a      	add	r2, r3
 80060da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006102:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006106:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	441a      	add	r2, r3
 8006112:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800611c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006124:	b29b      	uxth	r3, r3
 8006126:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	881b      	ldrh	r3, [r3, #0]
 8006134:	b29b      	uxth	r3, r3
 8006136:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800613a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	441a      	add	r2, r3
 800614a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800614c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800615c:	b29b      	uxth	r3, r3
 800615e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3734      	adds	r7, #52	; 0x34
 8006166:	46bd      	mov	sp, r7
 8006168:	bc80      	pop	{r7}
 800616a:	4770      	bx	lr

0800616c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b0c2      	sub	sp, #264	; 0x108
 8006170:	af00      	add	r7, sp, #0
 8006172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006176:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800617a:	6018      	str	r0, [r3, #0]
 800617c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006184:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800618a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	785b      	ldrb	r3, [r3, #1]
 8006192:	2b01      	cmp	r3, #1
 8006194:	f040 86b7 	bne.w	8006f06 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800619c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	699a      	ldr	r2, [r3, #24]
 80061a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d908      	bls.n	80061c6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80061b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80061c4:	e007      	b.n	80061d6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80061c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80061d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	7b1b      	ldrb	r3, [r3, #12]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d13a      	bne.n	800625c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80061e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6959      	ldr	r1, [r3, #20]
 80061f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	88da      	ldrh	r2, [r3, #6]
 80061fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006202:	b29b      	uxth	r3, r3
 8006204:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006208:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800620c:	6800      	ldr	r0, [r0, #0]
 800620e:	f001 fc9c 	bl	8007b4a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006216:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	613b      	str	r3, [r7, #16]
 800621e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006222:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800622c:	b29b      	uxth	r3, r3
 800622e:	461a      	mov	r2, r3
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	4413      	add	r3, r2
 8006234:	613b      	str	r3, [r7, #16]
 8006236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800623a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	011a      	lsls	r2, r3, #4
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	4413      	add	r3, r2
 8006248:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800624c:	60fb      	str	r3, [r7, #12]
 800624e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006252:	b29a      	uxth	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	801a      	strh	r2, [r3, #0]
 8006258:	f000 be1f 	b.w	8006e9a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800625c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	78db      	ldrb	r3, [r3, #3]
 8006268:	2b02      	cmp	r3, #2
 800626a:	f040 8462 	bne.w	8006b32 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800626e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6a1a      	ldr	r2, [r3, #32]
 800627a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800627e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	429a      	cmp	r2, r3
 8006288:	f240 83df 	bls.w	8006a4a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800628c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006290:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800629a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4413      	add	r3, r2
 80062a6:	881b      	ldrh	r3, [r3, #0]
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80062b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	441a      	add	r2, r3
 80062d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80062d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062dc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80062e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80062e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6a1a      	ldr	r2, [r3, #32]
 80062f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062f8:	1ad2      	subs	r2, r2, r3
 80062fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800630a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	b29b      	uxth	r3, r3
 8006324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006328:	2b00      	cmp	r3, #0
 800632a:	f000 81c7 	beq.w	80066bc <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800632e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006332:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	633b      	str	r3, [r7, #48]	; 0x30
 800633a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800633e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	785b      	ldrb	r3, [r3, #1]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d177      	bne.n	800643a <USB_EPStartXfer+0x2ce>
 800634a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800634e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	62bb      	str	r3, [r7, #40]	; 0x28
 8006356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800635a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006364:	b29b      	uxth	r3, r3
 8006366:	461a      	mov	r2, r3
 8006368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636a:	4413      	add	r3, r2
 800636c:	62bb      	str	r3, [r7, #40]	; 0x28
 800636e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	011a      	lsls	r2, r3, #4
 800637c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637e:	4413      	add	r3, r2
 8006380:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006384:	627b      	str	r3, [r7, #36]	; 0x24
 8006386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	b29b      	uxth	r3, r3
 800638c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006390:	b29a      	uxth	r2, r3
 8006392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006394:	801a      	strh	r2, [r3, #0]
 8006396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800639a:	2b3e      	cmp	r3, #62	; 0x3e
 800639c:	d921      	bls.n	80063e2 <USB_EPStartXfer+0x276>
 800639e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063a2:	095b      	lsrs	r3, r3, #5
 80063a4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80063a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063ac:	f003 031f 	and.w	r3, r3, #31
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d104      	bne.n	80063be <USB_EPStartXfer+0x252>
 80063b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80063b8:	3b01      	subs	r3, #1
 80063ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80063be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	029b      	lsls	r3, r3, #10
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	4313      	orrs	r3, r2
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063da:	b29a      	uxth	r2, r3
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	801a      	strh	r2, [r3, #0]
 80063e0:	e050      	b.n	8006484 <USB_EPStartXfer+0x318>
 80063e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10a      	bne.n	8006400 <USB_EPStartXfer+0x294>
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fc:	801a      	strh	r2, [r3, #0]
 80063fe:	e041      	b.n	8006484 <USB_EPStartXfer+0x318>
 8006400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006404:	085b      	lsrs	r3, r3, #1
 8006406:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800640a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b00      	cmp	r3, #0
 8006414:	d004      	beq.n	8006420 <USB_EPStartXfer+0x2b4>
 8006416:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800641a:	3301      	adds	r3, #1
 800641c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	881b      	ldrh	r3, [r3, #0]
 8006424:	b29a      	uxth	r2, r3
 8006426:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800642a:	b29b      	uxth	r3, r3
 800642c:	029b      	lsls	r3, r3, #10
 800642e:	b29b      	uxth	r3, r3
 8006430:	4313      	orrs	r3, r2
 8006432:	b29a      	uxth	r2, r3
 8006434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006436:	801a      	strh	r2, [r3, #0]
 8006438:	e024      	b.n	8006484 <USB_EPStartXfer+0x318>
 800643a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800643e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	785b      	ldrb	r3, [r3, #1]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d11c      	bne.n	8006484 <USB_EPStartXfer+0x318>
 800644a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800644e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006458:	b29b      	uxth	r3, r3
 800645a:	461a      	mov	r2, r3
 800645c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645e:	4413      	add	r3, r2
 8006460:	633b      	str	r3, [r7, #48]	; 0x30
 8006462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	011a      	lsls	r2, r3, #4
 8006470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006472:	4413      	add	r3, r2
 8006474:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006478:	62fb      	str	r3, [r7, #44]	; 0x2c
 800647a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800647e:	b29a      	uxth	r2, r3
 8006480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006482:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	895b      	ldrh	r3, [r3, #10]
 8006490:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6959      	ldr	r1, [r3, #20]
 80064a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80064aa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80064ae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80064b2:	6800      	ldr	r0, [r0, #0]
 80064b4:	f001 fb49 	bl	8007b4a <USB_WritePMA>
            ep->xfer_buff += len;
 80064b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	695a      	ldr	r2, [r3, #20]
 80064c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064c8:	441a      	add	r2, r3
 80064ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80064d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6a1a      	ldr	r2, [r3, #32]
 80064e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d90f      	bls.n	8006512 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80064f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6a1a      	ldr	r2, [r3, #32]
 80064fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006502:	1ad2      	subs	r2, r2, r3
 8006504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	621a      	str	r2, [r3, #32]
 8006510:	e00e      	b.n	8006530 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006516:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006526:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2200      	movs	r2, #0
 800652e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	785b      	ldrb	r3, [r3, #1]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d177      	bne.n	8006630 <USB_EPStartXfer+0x4c4>
 8006540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006544:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	61bb      	str	r3, [r7, #24]
 800654c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006550:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800655a:	b29b      	uxth	r3, r3
 800655c:	461a      	mov	r2, r3
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	4413      	add	r3, r2
 8006562:	61bb      	str	r3, [r7, #24]
 8006564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	011a      	lsls	r2, r3, #4
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	4413      	add	r3, r2
 8006576:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800657a:	617b      	str	r3, [r7, #20]
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	b29b      	uxth	r3, r3
 8006582:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006586:	b29a      	uxth	r2, r3
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	801a      	strh	r2, [r3, #0]
 800658c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006590:	2b3e      	cmp	r3, #62	; 0x3e
 8006592:	d921      	bls.n	80065d8 <USB_EPStartXfer+0x46c>
 8006594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006598:	095b      	lsrs	r3, r3, #5
 800659a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800659e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065a2:	f003 031f 	and.w	r3, r3, #31
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d104      	bne.n	80065b4 <USB_EPStartXfer+0x448>
 80065aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065ae:	3b01      	subs	r3, #1
 80065b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	881b      	ldrh	r3, [r3, #0]
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065be:	b29b      	uxth	r3, r3
 80065c0:	029b      	lsls	r3, r3, #10
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	4313      	orrs	r3, r2
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	801a      	strh	r2, [r3, #0]
 80065d6:	e056      	b.n	8006686 <USB_EPStartXfer+0x51a>
 80065d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10a      	bne.n	80065f6 <USB_EPStartXfer+0x48a>
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	801a      	strh	r2, [r3, #0]
 80065f4:	e047      	b.n	8006686 <USB_EPStartXfer+0x51a>
 80065f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065fa:	085b      	lsrs	r3, r3, #1
 80065fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	2b00      	cmp	r3, #0
 800660a:	d004      	beq.n	8006616 <USB_EPStartXfer+0x4aa>
 800660c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006610:	3301      	adds	r3, #1
 8006612:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	881b      	ldrh	r3, [r3, #0]
 800661a:	b29a      	uxth	r2, r3
 800661c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006620:	b29b      	uxth	r3, r3
 8006622:	029b      	lsls	r3, r3, #10
 8006624:	b29b      	uxth	r3, r3
 8006626:	4313      	orrs	r3, r2
 8006628:	b29a      	uxth	r2, r3
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	801a      	strh	r2, [r3, #0]
 800662e:	e02a      	b.n	8006686 <USB_EPStartXfer+0x51a>
 8006630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	785b      	ldrb	r3, [r3, #1]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d122      	bne.n	8006686 <USB_EPStartXfer+0x51a>
 8006640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006644:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	623b      	str	r3, [r7, #32]
 800664c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006650:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800665a:	b29b      	uxth	r3, r3
 800665c:	461a      	mov	r2, r3
 800665e:	6a3b      	ldr	r3, [r7, #32]
 8006660:	4413      	add	r3, r2
 8006662:	623b      	str	r3, [r7, #32]
 8006664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006668:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	011a      	lsls	r2, r3, #4
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	4413      	add	r3, r2
 8006676:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800667a:	61fb      	str	r3, [r7, #28]
 800667c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006680:	b29a      	uxth	r2, r3
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800668a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	891b      	ldrh	r3, [r3, #8]
 8006692:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800669a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6959      	ldr	r1, [r3, #20]
 80066a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80066ac:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80066b0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80066b4:	6800      	ldr	r0, [r0, #0]
 80066b6:	f001 fa48 	bl	8007b4a <USB_WritePMA>
 80066ba:	e3ee      	b.n	8006e9a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	785b      	ldrb	r3, [r3, #1]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d177      	bne.n	80067bc <USB_EPStartXfer+0x650>
 80066cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80066d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	461a      	mov	r2, r3
 80066ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ec:	4413      	add	r3, r2
 80066ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80066f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	011a      	lsls	r2, r3, #4
 80066fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006700:	4413      	add	r3, r2
 8006702:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006706:	647b      	str	r3, [r7, #68]	; 0x44
 8006708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	b29b      	uxth	r3, r3
 800670e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006712:	b29a      	uxth	r2, r3
 8006714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006716:	801a      	strh	r2, [r3, #0]
 8006718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800671c:	2b3e      	cmp	r3, #62	; 0x3e
 800671e:	d921      	bls.n	8006764 <USB_EPStartXfer+0x5f8>
 8006720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006724:	095b      	lsrs	r3, r3, #5
 8006726:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800672a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800672e:	f003 031f 	and.w	r3, r3, #31
 8006732:	2b00      	cmp	r3, #0
 8006734:	d104      	bne.n	8006740 <USB_EPStartXfer+0x5d4>
 8006736:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800673a:	3b01      	subs	r3, #1
 800673c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006742:	881b      	ldrh	r3, [r3, #0]
 8006744:	b29a      	uxth	r2, r3
 8006746:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800674a:	b29b      	uxth	r3, r3
 800674c:	029b      	lsls	r3, r3, #10
 800674e:	b29b      	uxth	r3, r3
 8006750:	4313      	orrs	r3, r2
 8006752:	b29b      	uxth	r3, r3
 8006754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800675c:	b29a      	uxth	r2, r3
 800675e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006760:	801a      	strh	r2, [r3, #0]
 8006762:	e056      	b.n	8006812 <USB_EPStartXfer+0x6a6>
 8006764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10a      	bne.n	8006782 <USB_EPStartXfer+0x616>
 800676c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	b29b      	uxth	r3, r3
 8006772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800677a:	b29a      	uxth	r2, r3
 800677c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800677e:	801a      	strh	r2, [r3, #0]
 8006780:	e047      	b.n	8006812 <USB_EPStartXfer+0x6a6>
 8006782:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006786:	085b      	lsrs	r3, r3, #1
 8006788:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800678c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006790:	f003 0301 	and.w	r3, r3, #1
 8006794:	2b00      	cmp	r3, #0
 8006796:	d004      	beq.n	80067a2 <USB_EPStartXfer+0x636>
 8006798:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800679c:	3301      	adds	r3, #1
 800679e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80067a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067a4:	881b      	ldrh	r3, [r3, #0]
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	029b      	lsls	r3, r3, #10
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	4313      	orrs	r3, r2
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067b8:	801a      	strh	r2, [r3, #0]
 80067ba:	e02a      	b.n	8006812 <USB_EPStartXfer+0x6a6>
 80067bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	785b      	ldrb	r3, [r3, #1]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d122      	bne.n	8006812 <USB_EPStartXfer+0x6a6>
 80067cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	653b      	str	r3, [r7, #80]	; 0x50
 80067d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	461a      	mov	r2, r3
 80067ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067ec:	4413      	add	r3, r2
 80067ee:	653b      	str	r3, [r7, #80]	; 0x50
 80067f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	011a      	lsls	r2, r3, #4
 80067fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006800:	4413      	add	r3, r2
 8006802:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006806:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800680c:	b29a      	uxth	r2, r3
 800680e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006810:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006816:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	891b      	ldrh	r3, [r3, #8]
 800681e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6959      	ldr	r1, [r3, #20]
 800682e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006832:	b29b      	uxth	r3, r3
 8006834:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006838:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800683c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006840:	6800      	ldr	r0, [r0, #0]
 8006842:	f001 f982 	bl	8007b4a <USB_WritePMA>
            ep->xfer_buff += len;
 8006846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800684a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	695a      	ldr	r2, [r3, #20]
 8006852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006856:	441a      	add	r2, r3
 8006858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800685c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6a1a      	ldr	r2, [r3, #32]
 8006870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	429a      	cmp	r2, r3
 800687e:	d90f      	bls.n	80068a0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6a1a      	ldr	r2, [r3, #32]
 800688c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006890:	1ad2      	subs	r2, r2, r3
 8006892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006896:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	621a      	str	r2, [r3, #32]
 800689e:	e00e      	b.n	80068be <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80068a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80068b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2200      	movs	r2, #0
 80068bc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80068be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	643b      	str	r3, [r7, #64]	; 0x40
 80068ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	785b      	ldrb	r3, [r3, #1]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d177      	bne.n	80069ca <USB_EPStartXfer+0x85e>
 80068da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80068e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	461a      	mov	r2, r3
 80068f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fa:	4413      	add	r3, r2
 80068fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80068fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006902:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	011a      	lsls	r2, r3, #4
 800690c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690e:	4413      	add	r3, r2
 8006910:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006914:	637b      	str	r3, [r7, #52]	; 0x34
 8006916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006918:	881b      	ldrh	r3, [r3, #0]
 800691a:	b29b      	uxth	r3, r3
 800691c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006920:	b29a      	uxth	r2, r3
 8006922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006924:	801a      	strh	r2, [r3, #0]
 8006926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800692a:	2b3e      	cmp	r3, #62	; 0x3e
 800692c:	d921      	bls.n	8006972 <USB_EPStartXfer+0x806>
 800692e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006932:	095b      	lsrs	r3, r3, #5
 8006934:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006938:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800693c:	f003 031f 	and.w	r3, r3, #31
 8006940:	2b00      	cmp	r3, #0
 8006942:	d104      	bne.n	800694e <USB_EPStartXfer+0x7e2>
 8006944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006948:	3b01      	subs	r3, #1
 800694a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800694e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006950:	881b      	ldrh	r3, [r3, #0]
 8006952:	b29a      	uxth	r2, r3
 8006954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006958:	b29b      	uxth	r3, r3
 800695a:	029b      	lsls	r3, r3, #10
 800695c:	b29b      	uxth	r3, r3
 800695e:	4313      	orrs	r3, r2
 8006960:	b29b      	uxth	r3, r3
 8006962:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006966:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800696a:	b29a      	uxth	r2, r3
 800696c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800696e:	801a      	strh	r2, [r3, #0]
 8006970:	e050      	b.n	8006a14 <USB_EPStartXfer+0x8a8>
 8006972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10a      	bne.n	8006990 <USB_EPStartXfer+0x824>
 800697a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800697c:	881b      	ldrh	r3, [r3, #0]
 800697e:	b29b      	uxth	r3, r3
 8006980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006988:	b29a      	uxth	r2, r3
 800698a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800698c:	801a      	strh	r2, [r3, #0]
 800698e:	e041      	b.n	8006a14 <USB_EPStartXfer+0x8a8>
 8006990:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006994:	085b      	lsrs	r3, r3, #1
 8006996:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800699a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d004      	beq.n	80069b0 <USB_EPStartXfer+0x844>
 80069a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069aa:	3301      	adds	r3, #1
 80069ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80069b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b2:	881b      	ldrh	r3, [r3, #0]
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	029b      	lsls	r3, r3, #10
 80069be:	b29b      	uxth	r3, r3
 80069c0:	4313      	orrs	r3, r2
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c6:	801a      	strh	r2, [r3, #0]
 80069c8:	e024      	b.n	8006a14 <USB_EPStartXfer+0x8a8>
 80069ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	785b      	ldrb	r3, [r3, #1]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d11c      	bne.n	8006a14 <USB_EPStartXfer+0x8a8>
 80069da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	461a      	mov	r2, r3
 80069ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ee:	4413      	add	r3, r2
 80069f0:	643b      	str	r3, [r7, #64]	; 0x40
 80069f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	011a      	lsls	r2, r3, #4
 8006a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a02:	4413      	add	r3, r2
 8006a04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a12:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	895b      	ldrh	r3, [r3, #10]
 8006a20:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	6959      	ldr	r1, [r3, #20]
 8006a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006a3a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006a3e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006a42:	6800      	ldr	r0, [r0, #0]
 8006a44:	f001 f881 	bl	8007b4a <USB_WritePMA>
 8006a48:	e227      	b.n	8006e9a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a80:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	441a      	add	r2, r3
 8006a9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ad6:	4413      	add	r3, r2
 8006ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	011a      	lsls	r2, r3, #4
 8006ae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006aea:	4413      	add	r3, r2
 8006aec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006af0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006afa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006afc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	891b      	ldrh	r3, [r3, #8]
 8006b08:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6959      	ldr	r1, [r3, #20]
 8006b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006b22:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006b26:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006b2a:	6800      	ldr	r0, [r0, #0]
 8006b2c:	f001 f80d 	bl	8007b4a <USB_WritePMA>
 8006b30:	e1b3      	b.n	8006e9a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6a1a      	ldr	r2, [r3, #32]
 8006b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b42:	1ad2      	subs	r2, r2, r3
 8006b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f000 80c6 	beq.w	8006d04 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	673b      	str	r3, [r7, #112]	; 0x70
 8006b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	785b      	ldrb	r3, [r3, #1]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d177      	bne.n	8006c84 <USB_EPStartXfer+0xb18>
 8006b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006bb4:	4413      	add	r3, r2
 8006bb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	011a      	lsls	r2, r3, #4
 8006bc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006bc8:	4413      	add	r3, r2
 8006bca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006bce:	667b      	str	r3, [r7, #100]	; 0x64
 8006bd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bd2:	881b      	ldrh	r3, [r3, #0]
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bde:	801a      	strh	r2, [r3, #0]
 8006be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006be4:	2b3e      	cmp	r3, #62	; 0x3e
 8006be6:	d921      	bls.n	8006c2c <USB_EPStartXfer+0xac0>
 8006be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bec:	095b      	lsrs	r3, r3, #5
 8006bee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bf6:	f003 031f 	and.w	r3, r3, #31
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d104      	bne.n	8006c08 <USB_EPStartXfer+0xa9c>
 8006bfe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c02:	3b01      	subs	r3, #1
 8006c04:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c0a:	881b      	ldrh	r3, [r3, #0]
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	029b      	lsls	r3, r3, #10
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c28:	801a      	strh	r2, [r3, #0]
 8006c2a:	e050      	b.n	8006cce <USB_EPStartXfer+0xb62>
 8006c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10a      	bne.n	8006c4a <USB_EPStartXfer+0xade>
 8006c34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c46:	801a      	strh	r2, [r3, #0]
 8006c48:	e041      	b.n	8006cce <USB_EPStartXfer+0xb62>
 8006c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c4e:	085b      	lsrs	r3, r3, #1
 8006c50:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d004      	beq.n	8006c6a <USB_EPStartXfer+0xafe>
 8006c60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c64:	3301      	adds	r3, #1
 8006c66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c6c:	881b      	ldrh	r3, [r3, #0]
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	029b      	lsls	r3, r3, #10
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c80:	801a      	strh	r2, [r3, #0]
 8006c82:	e024      	b.n	8006cce <USB_EPStartXfer+0xb62>
 8006c84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	785b      	ldrb	r3, [r3, #1]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d11c      	bne.n	8006cce <USB_EPStartXfer+0xb62>
 8006c94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ca8:	4413      	add	r3, r2
 8006caa:	673b      	str	r3, [r7, #112]	; 0x70
 8006cac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	011a      	lsls	r2, r3, #4
 8006cba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006cc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc8:	b29a      	uxth	r2, r3
 8006cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ccc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	895b      	ldrh	r3, [r3, #10]
 8006cda:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6959      	ldr	r1, [r3, #20]
 8006cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006cf4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006cf8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006cfc:	6800      	ldr	r0, [r0, #0]
 8006cfe:	f000 ff24 	bl	8007b4a <USB_WritePMA>
 8006d02:	e0ca      	b.n	8006e9a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	785b      	ldrb	r3, [r3, #1]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d177      	bne.n	8006e04 <USB_EPStartXfer+0xc98>
 8006d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	461a      	mov	r2, r3
 8006d32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d34:	4413      	add	r3, r2
 8006d36:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	011a      	lsls	r2, r3, #4
 8006d46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d48:	4413      	add	r3, r2
 8006d4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d4e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d52:	881b      	ldrh	r3, [r3, #0]
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d5e:	801a      	strh	r2, [r3, #0]
 8006d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d64:	2b3e      	cmp	r3, #62	; 0x3e
 8006d66:	d921      	bls.n	8006dac <USB_EPStartXfer+0xc40>
 8006d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d6c:	095b      	lsrs	r3, r3, #5
 8006d6e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d76:	f003 031f 	and.w	r3, r3, #31
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d104      	bne.n	8006d88 <USB_EPStartXfer+0xc1c>
 8006d7e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d82:	3b01      	subs	r3, #1
 8006d84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d8a:	881b      	ldrh	r3, [r3, #0]
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	029b      	lsls	r3, r3, #10
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006da0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006da8:	801a      	strh	r2, [r3, #0]
 8006daa:	e05c      	b.n	8006e66 <USB_EPStartXfer+0xcfa>
 8006dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10a      	bne.n	8006dca <USB_EPStartXfer+0xc5e>
 8006db4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006db6:	881b      	ldrh	r3, [r3, #0]
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dc6:	801a      	strh	r2, [r3, #0]
 8006dc8:	e04d      	b.n	8006e66 <USB_EPStartXfer+0xcfa>
 8006dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dce:	085b      	lsrs	r3, r3, #1
 8006dd0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dd8:	f003 0301 	and.w	r3, r3, #1
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d004      	beq.n	8006dea <USB_EPStartXfer+0xc7e>
 8006de0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006de4:	3301      	adds	r3, #1
 8006de6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006dea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	029b      	lsls	r3, r3, #10
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e00:	801a      	strh	r2, [r3, #0]
 8006e02:	e030      	b.n	8006e66 <USB_EPStartXfer+0xcfa>
 8006e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	785b      	ldrb	r3, [r3, #1]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d128      	bne.n	8006e66 <USB_EPStartXfer+0xcfa>
 8006e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	461a      	mov	r2, r3
 8006e34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e38:	4413      	add	r3, r2
 8006e3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	011a      	lsls	r2, r3, #4
 8006e4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e50:	4413      	add	r3, r2
 8006e52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e64:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006e66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	891b      	ldrh	r3, [r3, #8]
 8006e72:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	6959      	ldr	r1, [r3, #20]
 8006e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006e8c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006e90:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006e94:	6800      	ldr	r0, [r0, #0]
 8006e96:	f000 fe58 	bl	8007b4a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4413      	add	r3, r2
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ec0:	817b      	strh	r3, [r7, #10]
 8006ec2:	897b      	ldrh	r3, [r7, #10]
 8006ec4:	f083 0310 	eor.w	r3, r3, #16
 8006ec8:	817b      	strh	r3, [r7, #10]
 8006eca:	897b      	ldrh	r3, [r7, #10]
 8006ecc:	f083 0320 	eor.w	r3, r3, #32
 8006ed0:	817b      	strh	r3, [r7, #10]
 8006ed2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	441a      	add	r2, r3
 8006eec:	897b      	ldrh	r3, [r7, #10]
 8006eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	8013      	strh	r3, [r2, #0]
 8006f02:	f000 bcde 	b.w	80078c2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006f06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	7b1b      	ldrb	r3, [r3, #12]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f040 80bb 	bne.w	800708e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	699a      	ldr	r2, [r3, #24]
 8006f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d917      	bls.n	8006f64 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	699a      	ldr	r2, [r3, #24]
 8006f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f54:	1ad2      	subs	r2, r2, r3
 8006f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	619a      	str	r2, [r3, #24]
 8006f62:	e00e      	b.n	8006f82 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006f64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	699b      	ldr	r3, [r3, #24]
 8006f70:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006f74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	011a      	lsls	r2, r3, #4
 8006fba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fbe:	4413      	add	r3, r2
 8006fc0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006fc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006fc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fcc:	881b      	ldrh	r3, [r3, #0]
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fda:	801a      	strh	r2, [r3, #0]
 8006fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fe0:	2b3e      	cmp	r3, #62	; 0x3e
 8006fe2:	d924      	bls.n	800702e <USB_EPStartXfer+0xec2>
 8006fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fe8:	095b      	lsrs	r3, r3, #5
 8006fea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ff2:	f003 031f 	and.w	r3, r3, #31
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d104      	bne.n	8007004 <USB_EPStartXfer+0xe98>
 8006ffa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ffe:	3b01      	subs	r3, #1
 8007000:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007004:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007008:	881b      	ldrh	r3, [r3, #0]
 800700a:	b29a      	uxth	r2, r3
 800700c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007010:	b29b      	uxth	r3, r3
 8007012:	029b      	lsls	r3, r3, #10
 8007014:	b29b      	uxth	r3, r3
 8007016:	4313      	orrs	r3, r2
 8007018:	b29b      	uxth	r3, r3
 800701a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800701e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007022:	b29a      	uxth	r2, r3
 8007024:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007028:	801a      	strh	r2, [r3, #0]
 800702a:	f000 bc10 	b.w	800784e <USB_EPStartXfer+0x16e2>
 800702e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10c      	bne.n	8007050 <USB_EPStartXfer+0xee4>
 8007036:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800703a:	881b      	ldrh	r3, [r3, #0]
 800703c:	b29b      	uxth	r3, r3
 800703e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007046:	b29a      	uxth	r2, r3
 8007048:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800704c:	801a      	strh	r2, [r3, #0]
 800704e:	e3fe      	b.n	800784e <USB_EPStartXfer+0x16e2>
 8007050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007054:	085b      	lsrs	r3, r3, #1
 8007056:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800705a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	2b00      	cmp	r3, #0
 8007064:	d004      	beq.n	8007070 <USB_EPStartXfer+0xf04>
 8007066:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800706a:	3301      	adds	r3, #1
 800706c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007070:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007074:	881b      	ldrh	r3, [r3, #0]
 8007076:	b29a      	uxth	r2, r3
 8007078:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800707c:	b29b      	uxth	r3, r3
 800707e:	029b      	lsls	r3, r3, #10
 8007080:	b29b      	uxth	r3, r3
 8007082:	4313      	orrs	r3, r2
 8007084:	b29a      	uxth	r2, r3
 8007086:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800708a:	801a      	strh	r2, [r3, #0]
 800708c:	e3df      	b.n	800784e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800708e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	78db      	ldrb	r3, [r3, #3]
 800709a:	2b02      	cmp	r3, #2
 800709c:	f040 8218 	bne.w	80074d0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80070a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	785b      	ldrb	r3, [r3, #1]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f040 809d 	bne.w	80071ec <USB_EPStartXfer+0x1080>
 80070b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80070c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	461a      	mov	r2, r3
 80070d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070d6:	4413      	add	r3, r2
 80070d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80070dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	011a      	lsls	r2, r3, #4
 80070ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070ee:	4413      	add	r3, r2
 80070f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80070f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070fc:	881b      	ldrh	r3, [r3, #0]
 80070fe:	b29b      	uxth	r3, r3
 8007100:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007104:	b29a      	uxth	r2, r3
 8007106:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800710a:	801a      	strh	r2, [r3, #0]
 800710c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	2b3e      	cmp	r3, #62	; 0x3e
 800711a:	d92b      	bls.n	8007174 <USB_EPStartXfer+0x1008>
 800711c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007120:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	095b      	lsrs	r3, r3, #5
 800712a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800712e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	f003 031f 	and.w	r3, r3, #31
 800713e:	2b00      	cmp	r3, #0
 8007140:	d104      	bne.n	800714c <USB_EPStartXfer+0xfe0>
 8007142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007146:	3b01      	subs	r3, #1
 8007148:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800714c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007150:	881b      	ldrh	r3, [r3, #0]
 8007152:	b29a      	uxth	r2, r3
 8007154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007158:	b29b      	uxth	r3, r3
 800715a:	029b      	lsls	r3, r3, #10
 800715c:	b29b      	uxth	r3, r3
 800715e:	4313      	orrs	r3, r2
 8007160:	b29b      	uxth	r3, r3
 8007162:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007166:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800716a:	b29a      	uxth	r2, r3
 800716c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007170:	801a      	strh	r2, [r3, #0]
 8007172:	e070      	b.n	8007256 <USB_EPStartXfer+0x10ea>
 8007174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10c      	bne.n	800719e <USB_EPStartXfer+0x1032>
 8007184:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007188:	881b      	ldrh	r3, [r3, #0]
 800718a:	b29b      	uxth	r3, r3
 800718c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007194:	b29a      	uxth	r2, r3
 8007196:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800719a:	801a      	strh	r2, [r3, #0]
 800719c:	e05b      	b.n	8007256 <USB_EPStartXfer+0x10ea>
 800719e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	085b      	lsrs	r3, r3, #1
 80071ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80071b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d004      	beq.n	80071ce <USB_EPStartXfer+0x1062>
 80071c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071c8:	3301      	adds	r3, #1
 80071ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80071ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071d2:	881b      	ldrh	r3, [r3, #0]
 80071d4:	b29a      	uxth	r2, r3
 80071d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071da:	b29b      	uxth	r3, r3
 80071dc:	029b      	lsls	r3, r3, #10
 80071de:	b29b      	uxth	r3, r3
 80071e0:	4313      	orrs	r3, r2
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071e8:	801a      	strh	r2, [r3, #0]
 80071ea:	e034      	b.n	8007256 <USB_EPStartXfer+0x10ea>
 80071ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	785b      	ldrb	r3, [r3, #1]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d12c      	bne.n	8007256 <USB_EPStartXfer+0x10ea>
 80071fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007200:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800720a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800720e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007218:	b29b      	uxth	r3, r3
 800721a:	461a      	mov	r2, r3
 800721c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007220:	4413      	add	r3, r2
 8007222:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800722a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	011a      	lsls	r2, r3, #4
 8007234:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007238:	4413      	add	r3, r2
 800723a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800723e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	b29a      	uxth	r2, r3
 8007250:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007254:	801a      	strh	r2, [r3, #0]
 8007256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800725a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	785b      	ldrb	r3, [r3, #1]
 8007270:	2b00      	cmp	r3, #0
 8007272:	f040 809d 	bne.w	80073b0 <USB_EPStartXfer+0x1244>
 8007276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800727a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007288:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007292:	b29b      	uxth	r3, r3
 8007294:	461a      	mov	r2, r3
 8007296:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800729a:	4413      	add	r3, r2
 800729c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80072a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	011a      	lsls	r2, r3, #4
 80072ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072b2:	4413      	add	r3, r2
 80072b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80072bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072c0:	881b      	ldrh	r3, [r3, #0]
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072ce:	801a      	strh	r2, [r3, #0]
 80072d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	2b3e      	cmp	r3, #62	; 0x3e
 80072de:	d92b      	bls.n	8007338 <USB_EPStartXfer+0x11cc>
 80072e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	095b      	lsrs	r3, r3, #5
 80072ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	f003 031f 	and.w	r3, r3, #31
 8007302:	2b00      	cmp	r3, #0
 8007304:	d104      	bne.n	8007310 <USB_EPStartXfer+0x11a4>
 8007306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800730a:	3b01      	subs	r3, #1
 800730c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007310:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007314:	881b      	ldrh	r3, [r3, #0]
 8007316:	b29a      	uxth	r2, r3
 8007318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800731c:	b29b      	uxth	r3, r3
 800731e:	029b      	lsls	r3, r3, #10
 8007320:	b29b      	uxth	r3, r3
 8007322:	4313      	orrs	r3, r2
 8007324:	b29b      	uxth	r3, r3
 8007326:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800732a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800732e:	b29a      	uxth	r2, r3
 8007330:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007334:	801a      	strh	r2, [r3, #0]
 8007336:	e069      	b.n	800740c <USB_EPStartXfer+0x12a0>
 8007338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800733c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10c      	bne.n	8007362 <USB_EPStartXfer+0x11f6>
 8007348:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800734c:	881b      	ldrh	r3, [r3, #0]
 800734e:	b29b      	uxth	r3, r3
 8007350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007358:	b29a      	uxth	r2, r3
 800735a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800735e:	801a      	strh	r2, [r3, #0]
 8007360:	e054      	b.n	800740c <USB_EPStartXfer+0x12a0>
 8007362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007366:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	085b      	lsrs	r3, r3, #1
 8007370:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007378:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	f003 0301 	and.w	r3, r3, #1
 8007384:	2b00      	cmp	r3, #0
 8007386:	d004      	beq.n	8007392 <USB_EPStartXfer+0x1226>
 8007388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800738c:	3301      	adds	r3, #1
 800738e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007392:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007396:	881b      	ldrh	r3, [r3, #0]
 8007398:	b29a      	uxth	r2, r3
 800739a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800739e:	b29b      	uxth	r3, r3
 80073a0:	029b      	lsls	r3, r3, #10
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	4313      	orrs	r3, r2
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073ac:	801a      	strh	r2, [r3, #0]
 80073ae:	e02d      	b.n	800740c <USB_EPStartXfer+0x12a0>
 80073b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	785b      	ldrb	r3, [r3, #1]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d125      	bne.n	800740c <USB_EPStartXfer+0x12a0>
 80073c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	461a      	mov	r2, r3
 80073d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80073d6:	4413      	add	r3, r2
 80073d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80073dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	011a      	lsls	r2, r3, #4
 80073ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80073ee:	4413      	add	r3, r2
 80073f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80073f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	b29a      	uxth	r2, r3
 8007406:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800740a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800740c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	69db      	ldr	r3, [r3, #28]
 8007418:	2b00      	cmp	r3, #0
 800741a:	f000 8218 	beq.w	800784e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800741e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007422:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800742c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4413      	add	r3, r2
 8007438:	881b      	ldrh	r3, [r3, #0]
 800743a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800743e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007446:	2b00      	cmp	r3, #0
 8007448:	d005      	beq.n	8007456 <USB_EPStartXfer+0x12ea>
 800744a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800744e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10d      	bne.n	8007472 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007456:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800745a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800745e:	2b00      	cmp	r3, #0
 8007460:	f040 81f5 	bne.w	800784e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007464:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746c:	2b00      	cmp	r3, #0
 800746e:	f040 81ee 	bne.w	800784e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007476:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4413      	add	r3, r2
 800748c:	881b      	ldrh	r3, [r3, #0]
 800748e:	b29b      	uxth	r3, r3
 8007490:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007498:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800749c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	441a      	add	r2, r3
 80074b6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80074ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	8013      	strh	r3, [r2, #0]
 80074ce:	e1be      	b.n	800784e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80074d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	78db      	ldrb	r3, [r3, #3]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	f040 81b4 	bne.w	800784a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80074e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	699a      	ldr	r2, [r3, #24]
 80074ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d917      	bls.n	800752e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80074fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007502:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800750e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007512:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	699a      	ldr	r2, [r3, #24]
 800751a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800751e:	1ad2      	subs	r2, r2, r3
 8007520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	619a      	str	r2, [r3, #24]
 800752c:	e00e      	b.n	800754c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800752e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800753e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007542:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2200      	movs	r2, #0
 800754a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800754c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007550:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	785b      	ldrb	r3, [r3, #1]
 8007558:	2b00      	cmp	r3, #0
 800755a:	f040 8085 	bne.w	8007668 <USB_EPStartXfer+0x14fc>
 800755e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007562:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800756c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007570:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800757a:	b29b      	uxth	r3, r3
 800757c:	461a      	mov	r2, r3
 800757e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007582:	4413      	add	r3, r2
 8007584:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800758c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	011a      	lsls	r2, r3, #4
 8007596:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800759a:	4413      	add	r3, r2
 800759c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80075a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075a8:	881b      	ldrh	r3, [r3, #0]
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075b6:	801a      	strh	r2, [r3, #0]
 80075b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075bc:	2b3e      	cmp	r3, #62	; 0x3e
 80075be:	d923      	bls.n	8007608 <USB_EPStartXfer+0x149c>
 80075c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075c4:	095b      	lsrs	r3, r3, #5
 80075c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80075ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075ce:	f003 031f 	and.w	r3, r3, #31
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d104      	bne.n	80075e0 <USB_EPStartXfer+0x1474>
 80075d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075da:	3b01      	subs	r3, #1
 80075dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80075e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075e4:	881b      	ldrh	r3, [r3, #0]
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	029b      	lsls	r3, r3, #10
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	4313      	orrs	r3, r2
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075fe:	b29a      	uxth	r2, r3
 8007600:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007604:	801a      	strh	r2, [r3, #0]
 8007606:	e060      	b.n	80076ca <USB_EPStartXfer+0x155e>
 8007608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10c      	bne.n	800762a <USB_EPStartXfer+0x14be>
 8007610:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007614:	881b      	ldrh	r3, [r3, #0]
 8007616:	b29b      	uxth	r3, r3
 8007618:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800761c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007620:	b29a      	uxth	r2, r3
 8007622:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007626:	801a      	strh	r2, [r3, #0]
 8007628:	e04f      	b.n	80076ca <USB_EPStartXfer+0x155e>
 800762a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800762e:	085b      	lsrs	r3, r3, #1
 8007630:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007638:	f003 0301 	and.w	r3, r3, #1
 800763c:	2b00      	cmp	r3, #0
 800763e:	d004      	beq.n	800764a <USB_EPStartXfer+0x14de>
 8007640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007644:	3301      	adds	r3, #1
 8007646:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800764a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800764e:	881b      	ldrh	r3, [r3, #0]
 8007650:	b29a      	uxth	r2, r3
 8007652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007656:	b29b      	uxth	r3, r3
 8007658:	029b      	lsls	r3, r3, #10
 800765a:	b29b      	uxth	r3, r3
 800765c:	4313      	orrs	r3, r2
 800765e:	b29a      	uxth	r2, r3
 8007660:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007664:	801a      	strh	r2, [r3, #0]
 8007666:	e030      	b.n	80076ca <USB_EPStartXfer+0x155e>
 8007668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800766c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	785b      	ldrb	r3, [r3, #1]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d128      	bne.n	80076ca <USB_EPStartXfer+0x155e>
 8007678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800767c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800768a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007694:	b29b      	uxth	r3, r3
 8007696:	461a      	mov	r2, r3
 8007698:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800769c:	4413      	add	r3, r2
 800769e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80076a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	011a      	lsls	r2, r3, #4
 80076b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076b4:	4413      	add	r3, r2
 80076b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80076ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80076c8:	801a      	strh	r2, [r3, #0]
 80076ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80076d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	785b      	ldrb	r3, [r3, #1]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f040 8085 	bne.w	80077f4 <USB_EPStartXfer+0x1688>
 80076ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80076f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007706:	b29b      	uxth	r3, r3
 8007708:	461a      	mov	r2, r3
 800770a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800770e:	4413      	add	r3, r2
 8007710:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	011a      	lsls	r2, r3, #4
 8007722:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007726:	4413      	add	r3, r2
 8007728:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800772c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007730:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007734:	881b      	ldrh	r3, [r3, #0]
 8007736:	b29b      	uxth	r3, r3
 8007738:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800773c:	b29a      	uxth	r2, r3
 800773e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007742:	801a      	strh	r2, [r3, #0]
 8007744:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007748:	2b3e      	cmp	r3, #62	; 0x3e
 800774a:	d923      	bls.n	8007794 <USB_EPStartXfer+0x1628>
 800774c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007750:	095b      	lsrs	r3, r3, #5
 8007752:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007756:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800775a:	f003 031f 	and.w	r3, r3, #31
 800775e:	2b00      	cmp	r3, #0
 8007760:	d104      	bne.n	800776c <USB_EPStartXfer+0x1600>
 8007762:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007766:	3b01      	subs	r3, #1
 8007768:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800776c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007770:	881b      	ldrh	r3, [r3, #0]
 8007772:	b29a      	uxth	r2, r3
 8007774:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007778:	b29b      	uxth	r3, r3
 800777a:	029b      	lsls	r3, r3, #10
 800777c:	b29b      	uxth	r3, r3
 800777e:	4313      	orrs	r3, r2
 8007780:	b29b      	uxth	r3, r3
 8007782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800778a:	b29a      	uxth	r2, r3
 800778c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007790:	801a      	strh	r2, [r3, #0]
 8007792:	e05c      	b.n	800784e <USB_EPStartXfer+0x16e2>
 8007794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10c      	bne.n	80077b6 <USB_EPStartXfer+0x164a>
 800779c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80077a0:	881b      	ldrh	r3, [r3, #0]
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80077b2:	801a      	strh	r2, [r3, #0]
 80077b4:	e04b      	b.n	800784e <USB_EPStartXfer+0x16e2>
 80077b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077ba:	085b      	lsrs	r3, r3, #1
 80077bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80077c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d004      	beq.n	80077d6 <USB_EPStartXfer+0x166a>
 80077cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077d0:	3301      	adds	r3, #1
 80077d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80077d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80077da:	881b      	ldrh	r3, [r3, #0]
 80077dc:	b29a      	uxth	r2, r3
 80077de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	029b      	lsls	r3, r3, #10
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	4313      	orrs	r3, r2
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80077f0:	801a      	strh	r2, [r3, #0]
 80077f2:	e02c      	b.n	800784e <USB_EPStartXfer+0x16e2>
 80077f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	785b      	ldrb	r3, [r3, #1]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d124      	bne.n	800784e <USB_EPStartXfer+0x16e2>
 8007804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007808:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007812:	b29b      	uxth	r3, r3
 8007814:	461a      	mov	r2, r3
 8007816:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800781a:	4413      	add	r3, r2
 800781c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	011a      	lsls	r2, r3, #4
 800782e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007832:	4413      	add	r3, r2
 8007834:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007838:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800783c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007840:	b29a      	uxth	r2, r3
 8007842:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007846:	801a      	strh	r2, [r3, #0]
 8007848:	e001      	b.n	800784e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e03a      	b.n	80078c4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800784e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007852:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800785c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	881b      	ldrh	r3, [r3, #0]
 800786a:	b29b      	uxth	r3, r3
 800786c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007874:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007878:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800787c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007880:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007884:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007888:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800788c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007894:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800789e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	441a      	add	r2, r3
 80078aa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80078ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078be:	b29b      	uxth	r3, r3
 80078c0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80078ce:	b480      	push	{r7}
 80078d0:	b085      	sub	sp, #20
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
 80078d6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	785b      	ldrb	r3, [r3, #1]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d020      	beq.n	8007922 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	4413      	add	r3, r2
 80078ea:	881b      	ldrh	r3, [r3, #0]
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078f6:	81bb      	strh	r3, [r7, #12]
 80078f8:	89bb      	ldrh	r3, [r7, #12]
 80078fa:	f083 0310 	eor.w	r3, r3, #16
 80078fe:	81bb      	strh	r3, [r7, #12]
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	441a      	add	r2, r3
 800790a:	89bb      	ldrh	r3, [r7, #12]
 800790c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007910:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800791c:	b29b      	uxth	r3, r3
 800791e:	8013      	strh	r3, [r2, #0]
 8007920:	e01f      	b.n	8007962 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	4413      	add	r3, r2
 800792c:	881b      	ldrh	r3, [r3, #0]
 800792e:	b29b      	uxth	r3, r3
 8007930:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007938:	81fb      	strh	r3, [r7, #14]
 800793a:	89fb      	ldrh	r3, [r7, #14]
 800793c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007940:	81fb      	strh	r3, [r7, #14]
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	441a      	add	r2, r3
 800794c:	89fb      	ldrh	r3, [r7, #14]
 800794e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800795a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800795e:	b29b      	uxth	r3, r3
 8007960:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3714      	adds	r7, #20
 8007968:	46bd      	mov	sp, r7
 800796a:	bc80      	pop	{r7}
 800796c:	4770      	bx	lr

0800796e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800796e:	b480      	push	{r7}
 8007970:	b087      	sub	sp, #28
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
 8007976:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	7b1b      	ldrb	r3, [r3, #12]
 800797c:	2b00      	cmp	r3, #0
 800797e:	f040 809d 	bne.w	8007abc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	785b      	ldrb	r3, [r3, #1]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d04c      	beq.n	8007a24 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4413      	add	r3, r2
 8007994:	881b      	ldrh	r3, [r3, #0]
 8007996:	823b      	strh	r3, [r7, #16]
 8007998:	8a3b      	ldrh	r3, [r7, #16]
 800799a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d01b      	beq.n	80079da <USB_EPClearStall+0x6c>
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4413      	add	r3, r2
 80079ac:	881b      	ldrh	r3, [r3, #0]
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079b8:	81fb      	strh	r3, [r7, #14]
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	441a      	add	r2, r3
 80079c4:	89fb      	ldrh	r3, [r7, #14]
 80079c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	78db      	ldrb	r3, [r3, #3]
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d06c      	beq.n	8007abc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4413      	add	r3, r2
 80079ec:	881b      	ldrh	r3, [r3, #0]
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079f8:	81bb      	strh	r3, [r7, #12]
 80079fa:	89bb      	ldrh	r3, [r7, #12]
 80079fc:	f083 0320 	eor.w	r3, r3, #32
 8007a00:	81bb      	strh	r3, [r7, #12]
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	441a      	add	r2, r3
 8007a0c:	89bb      	ldrh	r3, [r7, #12]
 8007a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	8013      	strh	r3, [r2, #0]
 8007a22:	e04b      	b.n	8007abc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	4413      	add	r3, r2
 8007a2e:	881b      	ldrh	r3, [r3, #0]
 8007a30:	82fb      	strh	r3, [r7, #22]
 8007a32:	8afb      	ldrh	r3, [r7, #22]
 8007a34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d01b      	beq.n	8007a74 <USB_EPClearStall+0x106>
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	4413      	add	r3, r2
 8007a46:	881b      	ldrh	r3, [r3, #0]
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a52:	82bb      	strh	r3, [r7, #20]
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	441a      	add	r2, r3
 8007a5e:	8abb      	ldrh	r3, [r7, #20]
 8007a60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	4413      	add	r3, r2
 8007a7e:	881b      	ldrh	r3, [r3, #0]
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a8a:	827b      	strh	r3, [r7, #18]
 8007a8c:	8a7b      	ldrh	r3, [r7, #18]
 8007a8e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a92:	827b      	strh	r3, [r7, #18]
 8007a94:	8a7b      	ldrh	r3, [r7, #18]
 8007a96:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a9a:	827b      	strh	r3, [r7, #18]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	441a      	add	r2, r3
 8007aa6:	8a7b      	ldrh	r3, [r7, #18]
 8007aa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	371c      	adds	r7, #28
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bc80      	pop	{r7}
 8007ac6:	4770      	bx	lr

08007ac8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007ad4:	78fb      	ldrb	r3, [r7, #3]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d103      	bne.n	8007ae2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2280      	movs	r2, #128	; 0x80
 8007ade:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bc80      	pop	{r7}
 8007aec:	4770      	bx	lr

08007aee <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007aee:	b480      	push	{r7}
 8007af0:	b083      	sub	sp, #12
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bc80      	pop	{r7}
 8007b00:	4770      	bx	lr

08007b02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b083      	sub	sp, #12
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bc80      	pop	{r7}
 8007b14:	4770      	bx	lr

08007b16 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b085      	sub	sp, #20
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007b28:	68fb      	ldr	r3, [r7, #12]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3714      	adds	r7, #20
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bc80      	pop	{r7}
 8007b32:	4770      	bx	lr

08007b34 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007b3e:	2300      	movs	r3, #0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bc80      	pop	{r7}
 8007b48:	4770      	bx	lr

08007b4a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007b4a:	b480      	push	{r7}
 8007b4c:	b08b      	sub	sp, #44	; 0x2c
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	60f8      	str	r0, [r7, #12]
 8007b52:	60b9      	str	r1, [r7, #8]
 8007b54:	4611      	mov	r1, r2
 8007b56:	461a      	mov	r2, r3
 8007b58:	460b      	mov	r3, r1
 8007b5a:	80fb      	strh	r3, [r7, #6]
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007b60:	88bb      	ldrh	r3, [r7, #4]
 8007b62:	3301      	adds	r3, #1
 8007b64:	085b      	lsrs	r3, r3, #1
 8007b66:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007b70:	88fb      	ldrh	r3, [r7, #6]
 8007b72:	005a      	lsls	r2, r3, #1
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b7c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	627b      	str	r3, [r7, #36]	; 0x24
 8007b82:	e01e      	b.n	8007bc2 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	021b      	lsls	r3, r3, #8
 8007b92:	b21a      	sxth	r2, r3
 8007b94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	b21b      	sxth	r3, r3
 8007b9c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007b9e:	6a3b      	ldr	r3, [r7, #32]
 8007ba0:	8a7a      	ldrh	r2, [r7, #18]
 8007ba2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007ba4:	6a3b      	ldr	r3, [r7, #32]
 8007ba6:	3302      	adds	r3, #2
 8007ba8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007baa:	6a3b      	ldr	r3, [r7, #32]
 8007bac:	3302      	adds	r3, #2
 8007bae:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8007bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d1dd      	bne.n	8007b84 <USB_WritePMA+0x3a>
  }
}
 8007bc8:	bf00      	nop
 8007bca:	bf00      	nop
 8007bcc:	372c      	adds	r7, #44	; 0x2c
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bc80      	pop	{r7}
 8007bd2:	4770      	bx	lr

08007bd4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b08b      	sub	sp, #44	; 0x2c
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	4611      	mov	r1, r2
 8007be0:	461a      	mov	r2, r3
 8007be2:	460b      	mov	r3, r1
 8007be4:	80fb      	strh	r3, [r7, #6]
 8007be6:	4613      	mov	r3, r2
 8007be8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007bea:	88bb      	ldrh	r3, [r7, #4]
 8007bec:	085b      	lsrs	r3, r3, #1
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007bfa:	88fb      	ldrh	r3, [r7, #6]
 8007bfc:	005a      	lsls	r2, r3, #1
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	4413      	add	r3, r2
 8007c02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c06:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8007c0c:	e01b      	b.n	8007c46 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007c0e:	6a3b      	ldr	r3, [r7, #32]
 8007c10:	881b      	ldrh	r3, [r3, #0]
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007c16:	6a3b      	ldr	r3, [r7, #32]
 8007c18:	3302      	adds	r3, #2
 8007c1a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	b2da      	uxtb	r2, r3
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	3301      	adds	r3, #1
 8007c28:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	0a1b      	lsrs	r3, r3, #8
 8007c2e:	b2da      	uxtb	r2, r3
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	3301      	adds	r3, #1
 8007c38:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007c3a:	6a3b      	ldr	r3, [r7, #32]
 8007c3c:	3302      	adds	r3, #2
 8007c3e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c42:	3b01      	subs	r3, #1
 8007c44:	627b      	str	r3, [r7, #36]	; 0x24
 8007c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1e0      	bne.n	8007c0e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007c4c:	88bb      	ldrh	r3, [r7, #4]
 8007c4e:	f003 0301 	and.w	r3, r3, #1
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d007      	beq.n	8007c68 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007c58:	6a3b      	ldr	r3, [r7, #32]
 8007c5a:	881b      	ldrh	r3, [r3, #0]
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	b2da      	uxtb	r2, r3
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	701a      	strb	r2, [r3, #0]
  }
}
 8007c68:	bf00      	nop
 8007c6a:	372c      	adds	r7, #44	; 0x2c
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bc80      	pop	{r7}
 8007c70:	4770      	bx	lr

08007c72 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b084      	sub	sp, #16
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	7c1b      	ldrb	r3, [r3, #16]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d115      	bne.n	8007cb6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c8e:	2202      	movs	r2, #2
 8007c90:	2181      	movs	r1, #129	; 0x81
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f001 fe87 	bl	80099a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ca2:	2202      	movs	r2, #2
 8007ca4:	2101      	movs	r1, #1
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f001 fe7d 	bl	80099a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007cb4:	e012      	b.n	8007cdc <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007cb6:	2340      	movs	r3, #64	; 0x40
 8007cb8:	2202      	movs	r2, #2
 8007cba:	2181      	movs	r1, #129	; 0x81
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f001 fe72 	bl	80099a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007cc8:	2340      	movs	r3, #64	; 0x40
 8007cca:	2202      	movs	r2, #2
 8007ccc:	2101      	movs	r1, #1
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f001 fe69 	bl	80099a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007cdc:	2308      	movs	r3, #8
 8007cde:	2203      	movs	r2, #3
 8007ce0:	2182      	movs	r1, #130	; 0x82
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f001 fe5f 	bl	80099a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007cee:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007cf2:	f001 ff7f 	bl	8009bf4 <USBD_static_malloc>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d102      	bne.n	8007d0e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	73fb      	strb	r3, [r7, #15]
 8007d0c:	e026      	b.n	8007d5c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d14:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	7c1b      	ldrb	r3, [r3, #16]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d109      	bne.n	8007d4c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d42:	2101      	movs	r1, #1
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f001 ff1f 	bl	8009b88 <USBD_LL_PrepareReceive>
 8007d4a:	e007      	b.n	8007d5c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d52:	2340      	movs	r3, #64	; 0x40
 8007d54:	2101      	movs	r1, #1
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f001 ff16 	bl	8009b88 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b084      	sub	sp, #16
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	460b      	mov	r3, r1
 8007d70:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007d72:	2300      	movs	r3, #0
 8007d74:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007d76:	2181      	movs	r1, #129	; 0x81
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f001 fe3a 	bl	80099f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007d84:	2101      	movs	r1, #1
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f001 fe33 	bl	80099f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007d94:	2182      	movs	r1, #130	; 0x82
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f001 fe2b 	bl	80099f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00e      	beq.n	8007dca <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f001 ff25 	bl	8009c0c <USBD_static_free>
    pdev->pClassData = NULL;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007de6:	2300      	movs	r3, #0
 8007de8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007dea:	2300      	movs	r3, #0
 8007dec:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007dee:	2300      	movs	r3, #0
 8007df0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d039      	beq.n	8007e72 <USBD_CDC_Setup+0x9e>
 8007dfe:	2b20      	cmp	r3, #32
 8007e00:	d17f      	bne.n	8007f02 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	88db      	ldrh	r3, [r3, #6]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d029      	beq.n	8007e5e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	b25b      	sxtb	r3, r3
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	da11      	bge.n	8007e38 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	683a      	ldr	r2, [r7, #0]
 8007e1e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007e20:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e22:	683a      	ldr	r2, [r7, #0]
 8007e24:	88d2      	ldrh	r2, [r2, #6]
 8007e26:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007e28:	6939      	ldr	r1, [r7, #16]
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	88db      	ldrh	r3, [r3, #6]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f001 fa0a 	bl	800924a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007e36:	e06b      	b.n	8007f10 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	785a      	ldrb	r2, [r3, #1]
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	88db      	ldrh	r3, [r3, #6]
 8007e46:	b2da      	uxtb	r2, r3
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007e4e:	6939      	ldr	r1, [r7, #16]
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	88db      	ldrh	r3, [r3, #6]
 8007e54:	461a      	mov	r2, r3
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f001 fa25 	bl	80092a6 <USBD_CtlPrepareRx>
      break;
 8007e5c:	e058      	b.n	8007f10 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	683a      	ldr	r2, [r7, #0]
 8007e68:	7850      	ldrb	r0, [r2, #1]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	4798      	blx	r3
      break;
 8007e70:	e04e      	b.n	8007f10 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	785b      	ldrb	r3, [r3, #1]
 8007e76:	2b0b      	cmp	r3, #11
 8007e78:	d02e      	beq.n	8007ed8 <USBD_CDC_Setup+0x104>
 8007e7a:	2b0b      	cmp	r3, #11
 8007e7c:	dc38      	bgt.n	8007ef0 <USBD_CDC_Setup+0x11c>
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d002      	beq.n	8007e88 <USBD_CDC_Setup+0xb4>
 8007e82:	2b0a      	cmp	r3, #10
 8007e84:	d014      	beq.n	8007eb0 <USBD_CDC_Setup+0xdc>
 8007e86:	e033      	b.n	8007ef0 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e8e:	2b03      	cmp	r3, #3
 8007e90:	d107      	bne.n	8007ea2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007e92:	f107 030c 	add.w	r3, r7, #12
 8007e96:	2202      	movs	r2, #2
 8007e98:	4619      	mov	r1, r3
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f001 f9d5 	bl	800924a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ea0:	e02e      	b.n	8007f00 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007ea2:	6839      	ldr	r1, [r7, #0]
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f001 f966 	bl	8009176 <USBD_CtlError>
            ret = USBD_FAIL;
 8007eaa:	2302      	movs	r3, #2
 8007eac:	75fb      	strb	r3, [r7, #23]
          break;
 8007eae:	e027      	b.n	8007f00 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb6:	2b03      	cmp	r3, #3
 8007eb8:	d107      	bne.n	8007eca <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007eba:	f107 030f 	add.w	r3, r7, #15
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f001 f9c1 	bl	800924a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ec8:	e01a      	b.n	8007f00 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007eca:	6839      	ldr	r1, [r7, #0]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f001 f952 	bl	8009176 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ed2:	2302      	movs	r3, #2
 8007ed4:	75fb      	strb	r3, [r7, #23]
          break;
 8007ed6:	e013      	b.n	8007f00 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ede:	2b03      	cmp	r3, #3
 8007ee0:	d00d      	beq.n	8007efe <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007ee2:	6839      	ldr	r1, [r7, #0]
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f001 f946 	bl	8009176 <USBD_CtlError>
            ret = USBD_FAIL;
 8007eea:	2302      	movs	r3, #2
 8007eec:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007eee:	e006      	b.n	8007efe <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007ef0:	6839      	ldr	r1, [r7, #0]
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f001 f93f 	bl	8009176 <USBD_CtlError>
          ret = USBD_FAIL;
 8007ef8:	2302      	movs	r3, #2
 8007efa:	75fb      	strb	r3, [r7, #23]
          break;
 8007efc:	e000      	b.n	8007f00 <USBD_CDC_Setup+0x12c>
          break;
 8007efe:	bf00      	nop
      }
      break;
 8007f00:	e006      	b.n	8007f10 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f001 f936 	bl	8009176 <USBD_CtlError>
      ret = USBD_FAIL;
 8007f0a:	2302      	movs	r3, #2
 8007f0c:	75fb      	strb	r3, [r7, #23]
      break;
 8007f0e:	bf00      	nop
  }

  return ret;
 8007f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3718      	adds	r7, #24
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b084      	sub	sp, #16
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
 8007f22:	460b      	mov	r3, r1
 8007f24:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f2c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f34:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d03a      	beq.n	8007fb6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007f40:	78fa      	ldrb	r2, [r7, #3]
 8007f42:	6879      	ldr	r1, [r7, #4]
 8007f44:	4613      	mov	r3, r2
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	4413      	add	r3, r2
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	440b      	add	r3, r1
 8007f4e:	331c      	adds	r3, #28
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d029      	beq.n	8007faa <USBD_CDC_DataIn+0x90>
 8007f56:	78fa      	ldrb	r2, [r7, #3]
 8007f58:	6879      	ldr	r1, [r7, #4]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	4413      	add	r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	440b      	add	r3, r1
 8007f64:	331c      	adds	r3, #28
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	78f9      	ldrb	r1, [r7, #3]
 8007f6a:	68b8      	ldr	r0, [r7, #8]
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	440b      	add	r3, r1
 8007f72:	00db      	lsls	r3, r3, #3
 8007f74:	4403      	add	r3, r0
 8007f76:	3338      	adds	r3, #56	; 0x38
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f7e:	fb01 f303 	mul.w	r3, r1, r3
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d110      	bne.n	8007faa <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007f88:	78fa      	ldrb	r2, [r7, #3]
 8007f8a:	6879      	ldr	r1, [r7, #4]
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	4413      	add	r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	440b      	add	r3, r1
 8007f96:	331c      	adds	r3, #28
 8007f98:	2200      	movs	r2, #0
 8007f9a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007f9c:	78f9      	ldrb	r1, [r7, #3]
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f001 fdcd 	bl	8009b42 <USBD_LL_Transmit>
 8007fa8:	e003      	b.n	8007fb2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	e000      	b.n	8007fb8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007fb6:	2302      	movs	r3, #2
  }
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	460b      	mov	r3, r1
 8007fca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fd2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007fd4:	78fb      	ldrb	r3, [r7, #3]
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f001 fdf8 	bl	8009bce <USBD_LL_GetRxDataSize>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00d      	beq.n	800800c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008004:	4611      	mov	r1, r2
 8008006:	4798      	blx	r3

    return USBD_OK;
 8008008:	2300      	movs	r3, #0
 800800a:	e000      	b.n	800800e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800800c:	2302      	movs	r3, #2
  }
}
 800800e:	4618      	mov	r0, r3
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b084      	sub	sp, #16
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008024:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800802c:	2b00      	cmp	r3, #0
 800802e:	d015      	beq.n	800805c <USBD_CDC_EP0_RxReady+0x46>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008036:	2bff      	cmp	r3, #255	; 0xff
 8008038:	d010      	beq.n	800805c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	68fa      	ldr	r2, [r7, #12]
 8008044:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008048:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008050:	b292      	uxth	r2, r2
 8008052:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	22ff      	movs	r2, #255	; 0xff
 8008058:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
	...

08008068 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2243      	movs	r2, #67	; 0x43
 8008074:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008076:	4b03      	ldr	r3, [pc, #12]	; (8008084 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008078:	4618      	mov	r0, r3
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	bc80      	pop	{r7}
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	20000094 	.word	0x20000094

08008088 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2243      	movs	r2, #67	; 0x43
 8008094:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008096:	4b03      	ldr	r3, [pc, #12]	; (80080a4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008098:	4618      	mov	r0, r3
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	bc80      	pop	{r7}
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	20000050 	.word	0x20000050

080080a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2243      	movs	r2, #67	; 0x43
 80080b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80080b6:	4b03      	ldr	r3, [pc, #12]	; (80080c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	bc80      	pop	{r7}
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	200000d8 	.word	0x200000d8

080080c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	220a      	movs	r2, #10
 80080d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80080d6:	4b03      	ldr	r3, [pc, #12]	; (80080e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80080d8:	4618      	mov	r0, r3
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	bc80      	pop	{r7}
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop
 80080e4:	2000000c 	.word	0x2000000c

080080e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80080f2:	2302      	movs	r3, #2
 80080f4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d005      	beq.n	8008108 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	683a      	ldr	r2, [r7, #0]
 8008100:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008104:	2300      	movs	r3, #0
 8008106:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008108:	7bfb      	ldrb	r3, [r7, #15]
}
 800810a:	4618      	mov	r0, r3
 800810c:	3714      	adds	r7, #20
 800810e:	46bd      	mov	sp, r7
 8008110:	bc80      	pop	{r7}
 8008112:	4770      	bx	lr

08008114 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008114:	b480      	push	{r7}
 8008116:	b087      	sub	sp, #28
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	4613      	mov	r3, r2
 8008120:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008128:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008132:	88fa      	ldrh	r2, [r7, #6]
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	371c      	adds	r7, #28
 8008140:	46bd      	mov	sp, r7
 8008142:	bc80      	pop	{r7}
 8008144:	4770      	bx	lr

08008146 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008146:	b480      	push	{r7}
 8008148:	b085      	sub	sp, #20
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
 800814e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008156:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	683a      	ldr	r2, [r7, #0]
 800815c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3714      	adds	r7, #20
 8008166:	46bd      	mov	sp, r7
 8008168:	bc80      	pop	{r7}
 800816a:	4770      	bx	lr

0800816c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800817a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008182:	2b00      	cmp	r3, #0
 8008184:	d01c      	beq.n	80081c0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800818c:	2b00      	cmp	r3, #0
 800818e:	d115      	bne.n	80081bc <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2201      	movs	r2, #1
 8008194:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	2181      	movs	r1, #129	; 0x81
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f001 fcc5 	bl	8009b42 <USBD_LL_Transmit>

      return USBD_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	e002      	b.n	80081c2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80081bc:	2301      	movs	r3, #1
 80081be:	e000      	b.n	80081c2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80081c0:	2302      	movs	r3, #2
  }
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3710      	adds	r7, #16
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b084      	sub	sp, #16
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081d8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d017      	beq.n	8008214 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	7c1b      	ldrb	r3, [r3, #16]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d109      	bne.n	8008200 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081f6:	2101      	movs	r1, #1
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f001 fcc5 	bl	8009b88 <USBD_LL_PrepareReceive>
 80081fe:	e007      	b.n	8008210 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008206:	2340      	movs	r3, #64	; 0x40
 8008208:	2101      	movs	r1, #1
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f001 fcbc 	bl	8009b88 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008210:	2300      	movs	r3, #0
 8008212:	e000      	b.n	8008216 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008214:	2302      	movs	r3, #2
  }
}
 8008216:	4618      	mov	r0, r3
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b084      	sub	sp, #16
 8008222:	af00      	add	r7, sp, #0
 8008224:	60f8      	str	r0, [r7, #12]
 8008226:	60b9      	str	r1, [r7, #8]
 8008228:	4613      	mov	r3, r2
 800822a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d101      	bne.n	8008236 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008232:	2302      	movs	r3, #2
 8008234:	e01a      	b.n	800826c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800823c:	2b00      	cmp	r3, #0
 800823e:	d003      	beq.n	8008248 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2200      	movs	r2, #0
 8008244:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d003      	beq.n	8008256 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	68ba      	ldr	r2, [r7, #8]
 8008252:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2201      	movs	r2, #1
 800825a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	79fa      	ldrb	r2, [r7, #7]
 8008262:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f001 fb29 	bl	80098bc <USBD_LL_Init>

  return USBD_OK;
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008274:	b480      	push	{r7}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800827e:	2300      	movs	r3, #0
 8008280:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d006      	beq.n	8008296 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	683a      	ldr	r2, [r7, #0]
 800828c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008290:	2300      	movs	r3, #0
 8008292:	73fb      	strb	r3, [r7, #15]
 8008294:	e001      	b.n	800829a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008296:	2302      	movs	r3, #2
 8008298:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800829a:	7bfb      	ldrb	r3, [r7, #15]
}
 800829c:	4618      	mov	r0, r3
 800829e:	3714      	adds	r7, #20
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bc80      	pop	{r7}
 80082a4:	4770      	bx	lr

080082a6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b082      	sub	sp, #8
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f001 fb5e 	bl	8009970 <USBD_LL_Start>

  return USBD_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3708      	adds	r7, #8
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80082be:	b480      	push	{r7}
 80082c0:	b083      	sub	sp, #12
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bc80      	pop	{r7}
 80082d0:	4770      	bx	lr

080082d2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b084      	sub	sp, #16
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
 80082da:	460b      	mov	r3, r1
 80082dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80082de:	2302      	movs	r3, #2
 80082e0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00c      	beq.n	8008306 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	78fa      	ldrb	r2, [r7, #3]
 80082f6:	4611      	mov	r1, r2
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	4798      	blx	r3
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d101      	bne.n	8008306 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008302:	2300      	movs	r3, #0
 8008304:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008306:	7bfb      	ldrb	r3, [r7, #15]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	460b      	mov	r3, r1
 800831a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	78fa      	ldrb	r2, [r7, #3]
 8008326:	4611      	mov	r1, r2
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	4798      	blx	r3

  return USBD_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3708      	adds	r7, #8
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b082      	sub	sp, #8
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
 800833e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008346:	6839      	ldr	r1, [r7, #0]
 8008348:	4618      	mov	r0, r3
 800834a:	f000 fed8 	bl	80090fe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2201      	movs	r2, #1
 8008352:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800835c:	461a      	mov	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800836a:	f003 031f 	and.w	r3, r3, #31
 800836e:	2b02      	cmp	r3, #2
 8008370:	d016      	beq.n	80083a0 <USBD_LL_SetupStage+0x6a>
 8008372:	2b02      	cmp	r3, #2
 8008374:	d81c      	bhi.n	80083b0 <USBD_LL_SetupStage+0x7a>
 8008376:	2b00      	cmp	r3, #0
 8008378:	d002      	beq.n	8008380 <USBD_LL_SetupStage+0x4a>
 800837a:	2b01      	cmp	r3, #1
 800837c:	d008      	beq.n	8008390 <USBD_LL_SetupStage+0x5a>
 800837e:	e017      	b.n	80083b0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008386:	4619      	mov	r1, r3
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 f9cb 	bl	8008724 <USBD_StdDevReq>
      break;
 800838e:	e01a      	b.n	80083c6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008396:	4619      	mov	r1, r3
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 fa2d 	bl	80087f8 <USBD_StdItfReq>
      break;
 800839e:	e012      	b.n	80083c6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80083a6:	4619      	mov	r1, r3
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 fa6d 	bl	8008888 <USBD_StdEPReq>
      break;
 80083ae:	e00a      	b.n	80083c6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80083b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	4619      	mov	r1, r3
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f001 fb36 	bl	8009a30 <USBD_LL_StallEP>
      break;
 80083c4:	bf00      	nop
  }

  return USBD_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3708      	adds	r7, #8
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	460b      	mov	r3, r1
 80083da:	607a      	str	r2, [r7, #4]
 80083dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80083de:	7afb      	ldrb	r3, [r7, #11]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d14b      	bne.n	800847c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80083ea:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083f2:	2b03      	cmp	r3, #3
 80083f4:	d134      	bne.n	8008460 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	68da      	ldr	r2, [r3, #12]
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d919      	bls.n	8008436 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	68da      	ldr	r2, [r3, #12]
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	1ad2      	subs	r2, r2, r3
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	68da      	ldr	r2, [r3, #12]
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008418:	429a      	cmp	r2, r3
 800841a:	d203      	bcs.n	8008424 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008420:	b29b      	uxth	r3, r3
 8008422:	e002      	b.n	800842a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008428:	b29b      	uxth	r3, r3
 800842a:	461a      	mov	r2, r3
 800842c:	6879      	ldr	r1, [r7, #4]
 800842e:	68f8      	ldr	r0, [r7, #12]
 8008430:	f000 ff57 	bl	80092e2 <USBD_CtlContinueRx>
 8008434:	e038      	b.n	80084a8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00a      	beq.n	8008458 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008448:	2b03      	cmp	r3, #3
 800844a:	d105      	bne.n	8008458 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008458:	68f8      	ldr	r0, [r7, #12]
 800845a:	f000 ff54 	bl	8009306 <USBD_CtlSendStatus>
 800845e:	e023      	b.n	80084a8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008466:	2b05      	cmp	r3, #5
 8008468:	d11e      	bne.n	80084a8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2200      	movs	r2, #0
 800846e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008472:	2100      	movs	r1, #0
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f001 fadb 	bl	8009a30 <USBD_LL_StallEP>
 800847a:	e015      	b.n	80084a8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008482:	699b      	ldr	r3, [r3, #24]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00d      	beq.n	80084a4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800848e:	2b03      	cmp	r3, #3
 8008490:	d108      	bne.n	80084a4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	7afa      	ldrb	r2, [r7, #11]
 800849c:	4611      	mov	r1, r2
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	4798      	blx	r3
 80084a2:	e001      	b.n	80084a8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80084a4:	2302      	movs	r3, #2
 80084a6:	e000      	b.n	80084aa <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3718      	adds	r7, #24
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b086      	sub	sp, #24
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	60f8      	str	r0, [r7, #12]
 80084ba:	460b      	mov	r3, r1
 80084bc:	607a      	str	r2, [r7, #4]
 80084be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80084c0:	7afb      	ldrb	r3, [r7, #11]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d17f      	bne.n	80085c6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	3314      	adds	r3, #20
 80084ca:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d15c      	bne.n	8008590 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	68da      	ldr	r2, [r3, #12]
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d915      	bls.n	800850e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	68da      	ldr	r2, [r3, #12]
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	1ad2      	subs	r2, r2, r3
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	461a      	mov	r2, r3
 80084f8:	6879      	ldr	r1, [r7, #4]
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	f000 fec1 	bl	8009282 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008500:	2300      	movs	r3, #0
 8008502:	2200      	movs	r2, #0
 8008504:	2100      	movs	r1, #0
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f001 fb3e 	bl	8009b88 <USBD_LL_PrepareReceive>
 800850c:	e04e      	b.n	80085ac <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	6912      	ldr	r2, [r2, #16]
 8008516:	fbb3 f1f2 	udiv	r1, r3, r2
 800851a:	fb01 f202 	mul.w	r2, r1, r2
 800851e:	1a9b      	subs	r3, r3, r2
 8008520:	2b00      	cmp	r3, #0
 8008522:	d11c      	bne.n	800855e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	689a      	ldr	r2, [r3, #8]
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800852c:	429a      	cmp	r2, r3
 800852e:	d316      	bcc.n	800855e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	689a      	ldr	r2, [r3, #8]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800853a:	429a      	cmp	r2, r3
 800853c:	d20f      	bcs.n	800855e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800853e:	2200      	movs	r2, #0
 8008540:	2100      	movs	r1, #0
 8008542:	68f8      	ldr	r0, [r7, #12]
 8008544:	f000 fe9d 	bl	8009282 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2200      	movs	r2, #0
 800854c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008550:	2300      	movs	r3, #0
 8008552:	2200      	movs	r2, #0
 8008554:	2100      	movs	r1, #0
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f001 fb16 	bl	8009b88 <USBD_LL_PrepareReceive>
 800855c:	e026      	b.n	80085ac <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00a      	beq.n	8008580 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008570:	2b03      	cmp	r3, #3
 8008572:	d105      	bne.n	8008580 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008580:	2180      	movs	r1, #128	; 0x80
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f001 fa54 	bl	8009a30 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	f000 fecf 	bl	800932c <USBD_CtlReceiveStatus>
 800858e:	e00d      	b.n	80085ac <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008596:	2b04      	cmp	r3, #4
 8008598:	d004      	beq.n	80085a4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d103      	bne.n	80085ac <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80085a4:	2180      	movs	r1, #128	; 0x80
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	f001 fa42 	bl	8009a30 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d11d      	bne.n	80085f2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	f7ff fe81 	bl	80082be <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2200      	movs	r2, #0
 80085c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80085c4:	e015      	b.n	80085f2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00d      	beq.n	80085ee <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80085d8:	2b03      	cmp	r3, #3
 80085da:	d108      	bne.n	80085ee <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085e2:	695b      	ldr	r3, [r3, #20]
 80085e4:	7afa      	ldrb	r2, [r7, #11]
 80085e6:	4611      	mov	r1, r2
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	4798      	blx	r3
 80085ec:	e001      	b.n	80085f2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80085ee:	2302      	movs	r3, #2
 80085f0:	e000      	b.n	80085f4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3718      	adds	r7, #24
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008604:	2340      	movs	r3, #64	; 0x40
 8008606:	2200      	movs	r2, #0
 8008608:	2100      	movs	r1, #0
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f001 f9cb 	bl	80099a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2240      	movs	r2, #64	; 0x40
 800861c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008620:	2340      	movs	r3, #64	; 0x40
 8008622:	2200      	movs	r2, #0
 8008624:	2180      	movs	r1, #128	; 0x80
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f001 f9bd 	bl	80099a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2240      	movs	r2, #64	; 0x40
 8008636:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800865c:	2b00      	cmp	r3, #0
 800865e:	d009      	beq.n	8008674 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	6852      	ldr	r2, [r2, #4]
 800866c:	b2d2      	uxtb	r2, r2
 800866e:	4611      	mov	r1, r2
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	4798      	blx	r3
  }

  return USBD_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3708      	adds	r7, #8
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800867e:	b480      	push	{r7}
 8008680:	b083      	sub	sp, #12
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
 8008686:	460b      	mov	r3, r1
 8008688:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	78fa      	ldrb	r2, [r7, #3]
 800868e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	370c      	adds	r7, #12
 8008696:	46bd      	mov	sp, r7
 8008698:	bc80      	pop	{r7}
 800869a:	4770      	bx	lr

0800869c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2204      	movs	r2, #4
 80086b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	370c      	adds	r7, #12
 80086be:	46bd      	mov	sp, r7
 80086c0:	bc80      	pop	{r7}
 80086c2:	4770      	bx	lr

080086c4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086d2:	2b04      	cmp	r3, #4
 80086d4:	d105      	bne.n	80086e2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bc80      	pop	{r7}
 80086ec:	4770      	bx	lr

080086ee <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b082      	sub	sp, #8
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086fc:	2b03      	cmp	r3, #3
 80086fe:	d10b      	bne.n	8008718 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008706:	69db      	ldr	r3, [r3, #28]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d005      	beq.n	8008718 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008712:	69db      	ldr	r3, [r3, #28]
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
	...

08008724 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800872e:	2300      	movs	r3, #0
 8008730:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800873a:	2b40      	cmp	r3, #64	; 0x40
 800873c:	d005      	beq.n	800874a <USBD_StdDevReq+0x26>
 800873e:	2b40      	cmp	r3, #64	; 0x40
 8008740:	d84f      	bhi.n	80087e2 <USBD_StdDevReq+0xbe>
 8008742:	2b00      	cmp	r3, #0
 8008744:	d009      	beq.n	800875a <USBD_StdDevReq+0x36>
 8008746:	2b20      	cmp	r3, #32
 8008748:	d14b      	bne.n	80087e2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	4798      	blx	r3
      break;
 8008758:	e048      	b.n	80087ec <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	785b      	ldrb	r3, [r3, #1]
 800875e:	2b09      	cmp	r3, #9
 8008760:	d839      	bhi.n	80087d6 <USBD_StdDevReq+0xb2>
 8008762:	a201      	add	r2, pc, #4	; (adr r2, 8008768 <USBD_StdDevReq+0x44>)
 8008764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008768:	080087b9 	.word	0x080087b9
 800876c:	080087cd 	.word	0x080087cd
 8008770:	080087d7 	.word	0x080087d7
 8008774:	080087c3 	.word	0x080087c3
 8008778:	080087d7 	.word	0x080087d7
 800877c:	0800879b 	.word	0x0800879b
 8008780:	08008791 	.word	0x08008791
 8008784:	080087d7 	.word	0x080087d7
 8008788:	080087af 	.word	0x080087af
 800878c:	080087a5 	.word	0x080087a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008790:	6839      	ldr	r1, [r7, #0]
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f9dc 	bl	8008b50 <USBD_GetDescriptor>
          break;
 8008798:	e022      	b.n	80087e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 fb3f 	bl	8008e20 <USBD_SetAddress>
          break;
 80087a2:	e01d      	b.n	80087e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fb7e 	bl	8008ea8 <USBD_SetConfig>
          break;
 80087ac:	e018      	b.n	80087e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80087ae:	6839      	ldr	r1, [r7, #0]
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fc07 	bl	8008fc4 <USBD_GetConfig>
          break;
 80087b6:	e013      	b.n	80087e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80087b8:	6839      	ldr	r1, [r7, #0]
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 fc37 	bl	800902e <USBD_GetStatus>
          break;
 80087c0:	e00e      	b.n	80087e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80087c2:	6839      	ldr	r1, [r7, #0]
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 fc65 	bl	8009094 <USBD_SetFeature>
          break;
 80087ca:	e009      	b.n	80087e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80087cc:	6839      	ldr	r1, [r7, #0]
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fc74 	bl	80090bc <USBD_ClrFeature>
          break;
 80087d4:	e004      	b.n	80087e0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80087d6:	6839      	ldr	r1, [r7, #0]
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 fccc 	bl	8009176 <USBD_CtlError>
          break;
 80087de:	bf00      	nop
      }
      break;
 80087e0:	e004      	b.n	80087ec <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80087e2:	6839      	ldr	r1, [r7, #0]
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 fcc6 	bl	8009176 <USBD_CtlError>
      break;
 80087ea:	bf00      	nop
  }

  return ret;
 80087ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop

080087f8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008802:	2300      	movs	r3, #0
 8008804:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800880e:	2b40      	cmp	r3, #64	; 0x40
 8008810:	d005      	beq.n	800881e <USBD_StdItfReq+0x26>
 8008812:	2b40      	cmp	r3, #64	; 0x40
 8008814:	d82e      	bhi.n	8008874 <USBD_StdItfReq+0x7c>
 8008816:	2b00      	cmp	r3, #0
 8008818:	d001      	beq.n	800881e <USBD_StdItfReq+0x26>
 800881a:	2b20      	cmp	r3, #32
 800881c:	d12a      	bne.n	8008874 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008824:	3b01      	subs	r3, #1
 8008826:	2b02      	cmp	r3, #2
 8008828:	d81d      	bhi.n	8008866 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	889b      	ldrh	r3, [r3, #4]
 800882e:	b2db      	uxtb	r3, r3
 8008830:	2b01      	cmp	r3, #1
 8008832:	d813      	bhi.n	800885c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	6839      	ldr	r1, [r7, #0]
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	4798      	blx	r3
 8008842:	4603      	mov	r3, r0
 8008844:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	88db      	ldrh	r3, [r3, #6]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d110      	bne.n	8008870 <USBD_StdItfReq+0x78>
 800884e:	7bfb      	ldrb	r3, [r7, #15]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d10d      	bne.n	8008870 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 fd56 	bl	8009306 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800885a:	e009      	b.n	8008870 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800885c:	6839      	ldr	r1, [r7, #0]
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 fc89 	bl	8009176 <USBD_CtlError>
          break;
 8008864:	e004      	b.n	8008870 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008866:	6839      	ldr	r1, [r7, #0]
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 fc84 	bl	8009176 <USBD_CtlError>
          break;
 800886e:	e000      	b.n	8008872 <USBD_StdItfReq+0x7a>
          break;
 8008870:	bf00      	nop
      }
      break;
 8008872:	e004      	b.n	800887e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008874:	6839      	ldr	r1, [r7, #0]
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 fc7d 	bl	8009176 <USBD_CtlError>
      break;
 800887c:	bf00      	nop
  }

  return USBD_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008892:	2300      	movs	r3, #0
 8008894:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	889b      	ldrh	r3, [r3, #4]
 800889a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088a4:	2b40      	cmp	r3, #64	; 0x40
 80088a6:	d007      	beq.n	80088b8 <USBD_StdEPReq+0x30>
 80088a8:	2b40      	cmp	r3, #64	; 0x40
 80088aa:	f200 8146 	bhi.w	8008b3a <USBD_StdEPReq+0x2b2>
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00a      	beq.n	80088c8 <USBD_StdEPReq+0x40>
 80088b2:	2b20      	cmp	r3, #32
 80088b4:	f040 8141 	bne.w	8008b3a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	6839      	ldr	r1, [r7, #0]
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	4798      	blx	r3
      break;
 80088c6:	e13d      	b.n	8008b44 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088d0:	2b20      	cmp	r3, #32
 80088d2:	d10a      	bne.n	80088ea <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	6839      	ldr	r1, [r7, #0]
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	4798      	blx	r3
 80088e2:	4603      	mov	r3, r0
 80088e4:	73fb      	strb	r3, [r7, #15]

        return ret;
 80088e6:	7bfb      	ldrb	r3, [r7, #15]
 80088e8:	e12d      	b.n	8008b46 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	785b      	ldrb	r3, [r3, #1]
 80088ee:	2b03      	cmp	r3, #3
 80088f0:	d007      	beq.n	8008902 <USBD_StdEPReq+0x7a>
 80088f2:	2b03      	cmp	r3, #3
 80088f4:	f300 811b 	bgt.w	8008b2e <USBD_StdEPReq+0x2a6>
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d072      	beq.n	80089e2 <USBD_StdEPReq+0x15a>
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d03a      	beq.n	8008976 <USBD_StdEPReq+0xee>
 8008900:	e115      	b.n	8008b2e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008908:	2b02      	cmp	r3, #2
 800890a:	d002      	beq.n	8008912 <USBD_StdEPReq+0x8a>
 800890c:	2b03      	cmp	r3, #3
 800890e:	d015      	beq.n	800893c <USBD_StdEPReq+0xb4>
 8008910:	e02b      	b.n	800896a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008912:	7bbb      	ldrb	r3, [r7, #14]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00c      	beq.n	8008932 <USBD_StdEPReq+0xaa>
 8008918:	7bbb      	ldrb	r3, [r7, #14]
 800891a:	2b80      	cmp	r3, #128	; 0x80
 800891c:	d009      	beq.n	8008932 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800891e:	7bbb      	ldrb	r3, [r7, #14]
 8008920:	4619      	mov	r1, r3
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f001 f884 	bl	8009a30 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008928:	2180      	movs	r1, #128	; 0x80
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f001 f880 	bl	8009a30 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008930:	e020      	b.n	8008974 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008932:	6839      	ldr	r1, [r7, #0]
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 fc1e 	bl	8009176 <USBD_CtlError>
              break;
 800893a:	e01b      	b.n	8008974 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	885b      	ldrh	r3, [r3, #2]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10e      	bne.n	8008962 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008944:	7bbb      	ldrb	r3, [r7, #14]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00b      	beq.n	8008962 <USBD_StdEPReq+0xda>
 800894a:	7bbb      	ldrb	r3, [r7, #14]
 800894c:	2b80      	cmp	r3, #128	; 0x80
 800894e:	d008      	beq.n	8008962 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	88db      	ldrh	r3, [r3, #6]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d104      	bne.n	8008962 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008958:	7bbb      	ldrb	r3, [r7, #14]
 800895a:	4619      	mov	r1, r3
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f001 f867 	bl	8009a30 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 fccf 	bl	8009306 <USBD_CtlSendStatus>

              break;
 8008968:	e004      	b.n	8008974 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800896a:	6839      	ldr	r1, [r7, #0]
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 fc02 	bl	8009176 <USBD_CtlError>
              break;
 8008972:	bf00      	nop
          }
          break;
 8008974:	e0e0      	b.n	8008b38 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800897c:	2b02      	cmp	r3, #2
 800897e:	d002      	beq.n	8008986 <USBD_StdEPReq+0xfe>
 8008980:	2b03      	cmp	r3, #3
 8008982:	d015      	beq.n	80089b0 <USBD_StdEPReq+0x128>
 8008984:	e026      	b.n	80089d4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008986:	7bbb      	ldrb	r3, [r7, #14]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00c      	beq.n	80089a6 <USBD_StdEPReq+0x11e>
 800898c:	7bbb      	ldrb	r3, [r7, #14]
 800898e:	2b80      	cmp	r3, #128	; 0x80
 8008990:	d009      	beq.n	80089a6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008992:	7bbb      	ldrb	r3, [r7, #14]
 8008994:	4619      	mov	r1, r3
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f001 f84a 	bl	8009a30 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800899c:	2180      	movs	r1, #128	; 0x80
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f001 f846 	bl	8009a30 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80089a4:	e01c      	b.n	80089e0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80089a6:	6839      	ldr	r1, [r7, #0]
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 fbe4 	bl	8009176 <USBD_CtlError>
              break;
 80089ae:	e017      	b.n	80089e0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	885b      	ldrh	r3, [r3, #2]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d112      	bne.n	80089de <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80089b8:	7bbb      	ldrb	r3, [r7, #14]
 80089ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d004      	beq.n	80089cc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80089c2:	7bbb      	ldrb	r3, [r7, #14]
 80089c4:	4619      	mov	r1, r3
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f001 f851 	bl	8009a6e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 fc9a 	bl	8009306 <USBD_CtlSendStatus>
              }
              break;
 80089d2:	e004      	b.n	80089de <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80089d4:	6839      	ldr	r1, [r7, #0]
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fbcd 	bl	8009176 <USBD_CtlError>
              break;
 80089dc:	e000      	b.n	80089e0 <USBD_StdEPReq+0x158>
              break;
 80089de:	bf00      	nop
          }
          break;
 80089e0:	e0aa      	b.n	8008b38 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d002      	beq.n	80089f2 <USBD_StdEPReq+0x16a>
 80089ec:	2b03      	cmp	r3, #3
 80089ee:	d032      	beq.n	8008a56 <USBD_StdEPReq+0x1ce>
 80089f0:	e097      	b.n	8008b22 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089f2:	7bbb      	ldrb	r3, [r7, #14]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d007      	beq.n	8008a08 <USBD_StdEPReq+0x180>
 80089f8:	7bbb      	ldrb	r3, [r7, #14]
 80089fa:	2b80      	cmp	r3, #128	; 0x80
 80089fc:	d004      	beq.n	8008a08 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80089fe:	6839      	ldr	r1, [r7, #0]
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fbb8 	bl	8009176 <USBD_CtlError>
                break;
 8008a06:	e091      	b.n	8008b2c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	da0b      	bge.n	8008a28 <USBD_StdEPReq+0x1a0>
 8008a10:	7bbb      	ldrb	r3, [r7, #14]
 8008a12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a16:	4613      	mov	r3, r2
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	4413      	add	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	3310      	adds	r3, #16
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	4413      	add	r3, r2
 8008a24:	3304      	adds	r3, #4
 8008a26:	e00b      	b.n	8008a40 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a28:	7bbb      	ldrb	r3, [r7, #14]
 8008a2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a2e:	4613      	mov	r3, r2
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	4413      	add	r3, r2
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	3304      	adds	r3, #4
 8008a40:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	2200      	movs	r2, #0
 8008a46:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	2202      	movs	r2, #2
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 fbfb 	bl	800924a <USBD_CtlSendData>
              break;
 8008a54:	e06a      	b.n	8008b2c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008a56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	da11      	bge.n	8008a82 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a5e:	7bbb      	ldrb	r3, [r7, #14]
 8008a60:	f003 020f 	and.w	r2, r3, #15
 8008a64:	6879      	ldr	r1, [r7, #4]
 8008a66:	4613      	mov	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	4413      	add	r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	440b      	add	r3, r1
 8008a70:	3318      	adds	r3, #24
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d117      	bne.n	8008aa8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fb7b 	bl	8009176 <USBD_CtlError>
                  break;
 8008a80:	e054      	b.n	8008b2c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a82:	7bbb      	ldrb	r3, [r7, #14]
 8008a84:	f003 020f 	and.w	r2, r3, #15
 8008a88:	6879      	ldr	r1, [r7, #4]
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	4413      	add	r3, r2
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	440b      	add	r3, r1
 8008a94:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d104      	bne.n	8008aa8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008a9e:	6839      	ldr	r1, [r7, #0]
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 fb68 	bl	8009176 <USBD_CtlError>
                  break;
 8008aa6:	e041      	b.n	8008b2c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008aa8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	da0b      	bge.n	8008ac8 <USBD_StdEPReq+0x240>
 8008ab0:	7bbb      	ldrb	r3, [r7, #14]
 8008ab2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	4413      	add	r3, r2
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	3310      	adds	r3, #16
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	3304      	adds	r3, #4
 8008ac6:	e00b      	b.n	8008ae0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ac8:	7bbb      	ldrb	r3, [r7, #14]
 8008aca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ace:	4613      	mov	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	4413      	add	r3, r2
 8008ade:	3304      	adds	r3, #4
 8008ae0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ae2:	7bbb      	ldrb	r3, [r7, #14]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d002      	beq.n	8008aee <USBD_StdEPReq+0x266>
 8008ae8:	7bbb      	ldrb	r3, [r7, #14]
 8008aea:	2b80      	cmp	r3, #128	; 0x80
 8008aec:	d103      	bne.n	8008af6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	2200      	movs	r2, #0
 8008af2:	601a      	str	r2, [r3, #0]
 8008af4:	e00e      	b.n	8008b14 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008af6:	7bbb      	ldrb	r3, [r7, #14]
 8008af8:	4619      	mov	r1, r3
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 ffd6 	bl	8009aac <USBD_LL_IsStallEP>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d003      	beq.n	8008b0e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	601a      	str	r2, [r3, #0]
 8008b0c:	e002      	b.n	8008b14 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	2200      	movs	r2, #0
 8008b12:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	2202      	movs	r2, #2
 8008b18:	4619      	mov	r1, r3
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fb95 	bl	800924a <USBD_CtlSendData>
              break;
 8008b20:	e004      	b.n	8008b2c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008b22:	6839      	ldr	r1, [r7, #0]
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 fb26 	bl	8009176 <USBD_CtlError>
              break;
 8008b2a:	bf00      	nop
          }
          break;
 8008b2c:	e004      	b.n	8008b38 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008b2e:	6839      	ldr	r1, [r7, #0]
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 fb20 	bl	8009176 <USBD_CtlError>
          break;
 8008b36:	bf00      	nop
      }
      break;
 8008b38:	e004      	b.n	8008b44 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008b3a:	6839      	ldr	r1, [r7, #0]
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fb1a 	bl	8009176 <USBD_CtlError>
      break;
 8008b42:	bf00      	nop
  }

  return ret;
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
	...

08008b50 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b62:	2300      	movs	r3, #0
 8008b64:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	885b      	ldrh	r3, [r3, #2]
 8008b6a:	0a1b      	lsrs	r3, r3, #8
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	2b06      	cmp	r3, #6
 8008b72:	f200 8128 	bhi.w	8008dc6 <USBD_GetDescriptor+0x276>
 8008b76:	a201      	add	r2, pc, #4	; (adr r2, 8008b7c <USBD_GetDescriptor+0x2c>)
 8008b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b7c:	08008b99 	.word	0x08008b99
 8008b80:	08008bb1 	.word	0x08008bb1
 8008b84:	08008bf1 	.word	0x08008bf1
 8008b88:	08008dc7 	.word	0x08008dc7
 8008b8c:	08008dc7 	.word	0x08008dc7
 8008b90:	08008d67 	.word	0x08008d67
 8008b94:	08008d93 	.word	0x08008d93
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	7c12      	ldrb	r2, [r2, #16]
 8008ba4:	f107 0108 	add.w	r1, r7, #8
 8008ba8:	4610      	mov	r0, r2
 8008baa:	4798      	blx	r3
 8008bac:	60f8      	str	r0, [r7, #12]
      break;
 8008bae:	e112      	b.n	8008dd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	7c1b      	ldrb	r3, [r3, #16]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d10d      	bne.n	8008bd4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc0:	f107 0208 	add.w	r2, r7, #8
 8008bc4:	4610      	mov	r0, r2
 8008bc6:	4798      	blx	r3
 8008bc8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	2202      	movs	r2, #2
 8008bd0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008bd2:	e100      	b.n	8008dd6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bdc:	f107 0208 	add.w	r2, r7, #8
 8008be0:	4610      	mov	r0, r2
 8008be2:	4798      	blx	r3
 8008be4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	3301      	adds	r3, #1
 8008bea:	2202      	movs	r2, #2
 8008bec:	701a      	strb	r2, [r3, #0]
      break;
 8008bee:	e0f2      	b.n	8008dd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	885b      	ldrh	r3, [r3, #2]
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	2b05      	cmp	r3, #5
 8008bf8:	f200 80ac 	bhi.w	8008d54 <USBD_GetDescriptor+0x204>
 8008bfc:	a201      	add	r2, pc, #4	; (adr r2, 8008c04 <USBD_GetDescriptor+0xb4>)
 8008bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c02:	bf00      	nop
 8008c04:	08008c1d 	.word	0x08008c1d
 8008c08:	08008c51 	.word	0x08008c51
 8008c0c:	08008c85 	.word	0x08008c85
 8008c10:	08008cb9 	.word	0x08008cb9
 8008c14:	08008ced 	.word	0x08008ced
 8008c18:	08008d21 	.word	0x08008d21
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d00b      	beq.n	8008c40 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	7c12      	ldrb	r2, [r2, #16]
 8008c34:	f107 0108 	add.w	r1, r7, #8
 8008c38:	4610      	mov	r0, r2
 8008c3a:	4798      	blx	r3
 8008c3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c3e:	e091      	b.n	8008d64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c40:	6839      	ldr	r1, [r7, #0]
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 fa97 	bl	8009176 <USBD_CtlError>
            err++;
 8008c48:	7afb      	ldrb	r3, [r7, #11]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c4e:	e089      	b.n	8008d64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d00b      	beq.n	8008c74 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	7c12      	ldrb	r2, [r2, #16]
 8008c68:	f107 0108 	add.w	r1, r7, #8
 8008c6c:	4610      	mov	r0, r2
 8008c6e:	4798      	blx	r3
 8008c70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c72:	e077      	b.n	8008d64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c74:	6839      	ldr	r1, [r7, #0]
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 fa7d 	bl	8009176 <USBD_CtlError>
            err++;
 8008c7c:	7afb      	ldrb	r3, [r7, #11]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	72fb      	strb	r3, [r7, #11]
          break;
 8008c82:	e06f      	b.n	8008d64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00b      	beq.n	8008ca8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	7c12      	ldrb	r2, [r2, #16]
 8008c9c:	f107 0108 	add.w	r1, r7, #8
 8008ca0:	4610      	mov	r0, r2
 8008ca2:	4798      	blx	r3
 8008ca4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ca6:	e05d      	b.n	8008d64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ca8:	6839      	ldr	r1, [r7, #0]
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 fa63 	bl	8009176 <USBD_CtlError>
            err++;
 8008cb0:	7afb      	ldrb	r3, [r7, #11]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	72fb      	strb	r3, [r7, #11]
          break;
 8008cb6:	e055      	b.n	8008d64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00b      	beq.n	8008cdc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	7c12      	ldrb	r2, [r2, #16]
 8008cd0:	f107 0108 	add.w	r1, r7, #8
 8008cd4:	4610      	mov	r0, r2
 8008cd6:	4798      	blx	r3
 8008cd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cda:	e043      	b.n	8008d64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cdc:	6839      	ldr	r1, [r7, #0]
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 fa49 	bl	8009176 <USBD_CtlError>
            err++;
 8008ce4:	7afb      	ldrb	r3, [r7, #11]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	72fb      	strb	r3, [r7, #11]
          break;
 8008cea:	e03b      	b.n	8008d64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cf2:	695b      	ldr	r3, [r3, #20]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d00b      	beq.n	8008d10 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cfe:	695b      	ldr	r3, [r3, #20]
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	7c12      	ldrb	r2, [r2, #16]
 8008d04:	f107 0108 	add.w	r1, r7, #8
 8008d08:	4610      	mov	r0, r2
 8008d0a:	4798      	blx	r3
 8008d0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d0e:	e029      	b.n	8008d64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d10:	6839      	ldr	r1, [r7, #0]
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fa2f 	bl	8009176 <USBD_CtlError>
            err++;
 8008d18:	7afb      	ldrb	r3, [r7, #11]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d1e:	e021      	b.n	8008d64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d26:	699b      	ldr	r3, [r3, #24]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d00b      	beq.n	8008d44 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d32:	699b      	ldr	r3, [r3, #24]
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	7c12      	ldrb	r2, [r2, #16]
 8008d38:	f107 0108 	add.w	r1, r7, #8
 8008d3c:	4610      	mov	r0, r2
 8008d3e:	4798      	blx	r3
 8008d40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d42:	e00f      	b.n	8008d64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d44:	6839      	ldr	r1, [r7, #0]
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fa15 	bl	8009176 <USBD_CtlError>
            err++;
 8008d4c:	7afb      	ldrb	r3, [r7, #11]
 8008d4e:	3301      	adds	r3, #1
 8008d50:	72fb      	strb	r3, [r7, #11]
          break;
 8008d52:	e007      	b.n	8008d64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008d54:	6839      	ldr	r1, [r7, #0]
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fa0d 	bl	8009176 <USBD_CtlError>
          err++;
 8008d5c:	7afb      	ldrb	r3, [r7, #11]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008d62:	e038      	b.n	8008dd6 <USBD_GetDescriptor+0x286>
 8008d64:	e037      	b.n	8008dd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	7c1b      	ldrb	r3, [r3, #16]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d109      	bne.n	8008d82 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d76:	f107 0208 	add.w	r2, r7, #8
 8008d7a:	4610      	mov	r0, r2
 8008d7c:	4798      	blx	r3
 8008d7e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d80:	e029      	b.n	8008dd6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d82:	6839      	ldr	r1, [r7, #0]
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 f9f6 	bl	8009176 <USBD_CtlError>
        err++;
 8008d8a:	7afb      	ldrb	r3, [r7, #11]
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	72fb      	strb	r3, [r7, #11]
      break;
 8008d90:	e021      	b.n	8008dd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	7c1b      	ldrb	r3, [r3, #16]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d10d      	bne.n	8008db6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da2:	f107 0208 	add.w	r2, r7, #8
 8008da6:	4610      	mov	r0, r2
 8008da8:	4798      	blx	r3
 8008daa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	3301      	adds	r3, #1
 8008db0:	2207      	movs	r2, #7
 8008db2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008db4:	e00f      	b.n	8008dd6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008db6:	6839      	ldr	r1, [r7, #0]
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 f9dc 	bl	8009176 <USBD_CtlError>
        err++;
 8008dbe:	7afb      	ldrb	r3, [r7, #11]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	72fb      	strb	r3, [r7, #11]
      break;
 8008dc4:	e007      	b.n	8008dd6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008dc6:	6839      	ldr	r1, [r7, #0]
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f9d4 	bl	8009176 <USBD_CtlError>
      err++;
 8008dce:	7afb      	ldrb	r3, [r7, #11]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	72fb      	strb	r3, [r7, #11]
      break;
 8008dd4:	bf00      	nop
  }

  if (err != 0U)
 8008dd6:	7afb      	ldrb	r3, [r7, #11]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d11c      	bne.n	8008e16 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008ddc:	893b      	ldrh	r3, [r7, #8]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d011      	beq.n	8008e06 <USBD_GetDescriptor+0x2b6>
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	88db      	ldrh	r3, [r3, #6]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d00d      	beq.n	8008e06 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	88da      	ldrh	r2, [r3, #6]
 8008dee:	893b      	ldrh	r3, [r7, #8]
 8008df0:	4293      	cmp	r3, r2
 8008df2:	bf28      	it	cs
 8008df4:	4613      	movcs	r3, r2
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008dfa:	893b      	ldrh	r3, [r7, #8]
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	68f9      	ldr	r1, [r7, #12]
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 fa22 	bl	800924a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	88db      	ldrh	r3, [r3, #6]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d104      	bne.n	8008e18 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 fa79 	bl	8009306 <USBD_CtlSendStatus>
 8008e14:	e000      	b.n	8008e18 <USBD_GetDescriptor+0x2c8>
    return;
 8008e16:	bf00      	nop
    }
  }
}
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop

08008e20 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	889b      	ldrh	r3, [r3, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d130      	bne.n	8008e94 <USBD_SetAddress+0x74>
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	88db      	ldrh	r3, [r3, #6]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d12c      	bne.n	8008e94 <USBD_SetAddress+0x74>
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	885b      	ldrh	r3, [r3, #2]
 8008e3e:	2b7f      	cmp	r3, #127	; 0x7f
 8008e40:	d828      	bhi.n	8008e94 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	885b      	ldrh	r3, [r3, #2]
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e4c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e54:	2b03      	cmp	r3, #3
 8008e56:	d104      	bne.n	8008e62 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f98b 	bl	8009176 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e60:	e01d      	b.n	8008e9e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	7bfa      	ldrb	r2, [r7, #15]
 8008e66:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e6a:	7bfb      	ldrb	r3, [r7, #15]
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fe48 	bl	8009b04 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 fa46 	bl	8009306 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e7a:	7bfb      	ldrb	r3, [r7, #15]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d004      	beq.n	8008e8a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2202      	movs	r2, #2
 8008e84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e88:	e009      	b.n	8008e9e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e92:	e004      	b.n	8008e9e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008e94:	6839      	ldr	r1, [r7, #0]
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 f96d 	bl	8009176 <USBD_CtlError>
  }
}
 8008e9c:	bf00      	nop
 8008e9e:	bf00      	nop
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
	...

08008ea8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	885b      	ldrh	r3, [r3, #2]
 8008eb6:	b2da      	uxtb	r2, r3
 8008eb8:	4b41      	ldr	r3, [pc, #260]	; (8008fc0 <USBD_SetConfig+0x118>)
 8008eba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ebc:	4b40      	ldr	r3, [pc, #256]	; (8008fc0 <USBD_SetConfig+0x118>)
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d904      	bls.n	8008ece <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008ec4:	6839      	ldr	r1, [r7, #0]
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 f955 	bl	8009176 <USBD_CtlError>
 8008ecc:	e075      	b.n	8008fba <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ed4:	2b02      	cmp	r3, #2
 8008ed6:	d002      	beq.n	8008ede <USBD_SetConfig+0x36>
 8008ed8:	2b03      	cmp	r3, #3
 8008eda:	d023      	beq.n	8008f24 <USBD_SetConfig+0x7c>
 8008edc:	e062      	b.n	8008fa4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008ede:	4b38      	ldr	r3, [pc, #224]	; (8008fc0 <USBD_SetConfig+0x118>)
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d01a      	beq.n	8008f1c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008ee6:	4b36      	ldr	r3, [pc, #216]	; (8008fc0 <USBD_SetConfig+0x118>)
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	461a      	mov	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2203      	movs	r2, #3
 8008ef4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008ef8:	4b31      	ldr	r3, [pc, #196]	; (8008fc0 <USBD_SetConfig+0x118>)
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	4619      	mov	r1, r3
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f7ff f9e7 	bl	80082d2 <USBD_SetClassConfig>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	d104      	bne.n	8008f14 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008f0a:	6839      	ldr	r1, [r7, #0]
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 f932 	bl	8009176 <USBD_CtlError>
            return;
 8008f12:	e052      	b.n	8008fba <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f9f6 	bl	8009306 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008f1a:	e04e      	b.n	8008fba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 f9f2 	bl	8009306 <USBD_CtlSendStatus>
        break;
 8008f22:	e04a      	b.n	8008fba <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008f24:	4b26      	ldr	r3, [pc, #152]	; (8008fc0 <USBD_SetConfig+0x118>)
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d112      	bne.n	8008f52 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2202      	movs	r2, #2
 8008f30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008f34:	4b22      	ldr	r3, [pc, #136]	; (8008fc0 <USBD_SetConfig+0x118>)
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	461a      	mov	r2, r3
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008f3e:	4b20      	ldr	r3, [pc, #128]	; (8008fc0 <USBD_SetConfig+0x118>)
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	4619      	mov	r1, r3
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f7ff f9e3 	bl	8008310 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f9db 	bl	8009306 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008f50:	e033      	b.n	8008fba <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008f52:	4b1b      	ldr	r3, [pc, #108]	; (8008fc0 <USBD_SetConfig+0x118>)
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	461a      	mov	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d01d      	beq.n	8008f9c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	4619      	mov	r1, r3
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f7ff f9d1 	bl	8008310 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008f6e:	4b14      	ldr	r3, [pc, #80]	; (8008fc0 <USBD_SetConfig+0x118>)
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	461a      	mov	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008f78:	4b11      	ldr	r3, [pc, #68]	; (8008fc0 <USBD_SetConfig+0x118>)
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f7ff f9a7 	bl	80082d2 <USBD_SetClassConfig>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	d104      	bne.n	8008f94 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008f8a:	6839      	ldr	r1, [r7, #0]
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 f8f2 	bl	8009176 <USBD_CtlError>
            return;
 8008f92:	e012      	b.n	8008fba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 f9b6 	bl	8009306 <USBD_CtlSendStatus>
        break;
 8008f9a:	e00e      	b.n	8008fba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 f9b2 	bl	8009306 <USBD_CtlSendStatus>
        break;
 8008fa2:	e00a      	b.n	8008fba <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008fa4:	6839      	ldr	r1, [r7, #0]
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 f8e5 	bl	8009176 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008fac:	4b04      	ldr	r3, [pc, #16]	; (8008fc0 <USBD_SetConfig+0x118>)
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f7ff f9ac 	bl	8008310 <USBD_ClrClassConfig>
        break;
 8008fb8:	bf00      	nop
    }
  }
}
 8008fba:	3708      	adds	r7, #8
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	200003f0 	.word	0x200003f0

08008fc4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	88db      	ldrh	r3, [r3, #6]
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d004      	beq.n	8008fe0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008fd6:	6839      	ldr	r1, [r7, #0]
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 f8cc 	bl	8009176 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008fde:	e022      	b.n	8009026 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	dc02      	bgt.n	8008ff0 <USBD_GetConfig+0x2c>
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	dc03      	bgt.n	8008ff6 <USBD_GetConfig+0x32>
 8008fee:	e015      	b.n	800901c <USBD_GetConfig+0x58>
 8008ff0:	2b03      	cmp	r3, #3
 8008ff2:	d00b      	beq.n	800900c <USBD_GetConfig+0x48>
 8008ff4:	e012      	b.n	800901c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	3308      	adds	r3, #8
 8009000:	2201      	movs	r2, #1
 8009002:	4619      	mov	r1, r3
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 f920 	bl	800924a <USBD_CtlSendData>
        break;
 800900a:	e00c      	b.n	8009026 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	3304      	adds	r3, #4
 8009010:	2201      	movs	r2, #1
 8009012:	4619      	mov	r1, r3
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 f918 	bl	800924a <USBD_CtlSendData>
        break;
 800901a:	e004      	b.n	8009026 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800901c:	6839      	ldr	r1, [r7, #0]
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 f8a9 	bl	8009176 <USBD_CtlError>
        break;
 8009024:	bf00      	nop
}
 8009026:	bf00      	nop
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b082      	sub	sp, #8
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
 8009036:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800903e:	3b01      	subs	r3, #1
 8009040:	2b02      	cmp	r3, #2
 8009042:	d81e      	bhi.n	8009082 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	88db      	ldrh	r3, [r3, #6]
 8009048:	2b02      	cmp	r3, #2
 800904a:	d004      	beq.n	8009056 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800904c:	6839      	ldr	r1, [r7, #0]
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f891 	bl	8009176 <USBD_CtlError>
        break;
 8009054:	e01a      	b.n	800908c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2201      	movs	r2, #1
 800905a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009062:	2b00      	cmp	r3, #0
 8009064:	d005      	beq.n	8009072 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	f043 0202 	orr.w	r2, r3, #2
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	330c      	adds	r3, #12
 8009076:	2202      	movs	r2, #2
 8009078:	4619      	mov	r1, r3
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f8e5 	bl	800924a <USBD_CtlSendData>
      break;
 8009080:	e004      	b.n	800908c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009082:	6839      	ldr	r1, [r7, #0]
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f876 	bl	8009176 <USBD_CtlError>
      break;
 800908a:	bf00      	nop
  }
}
 800908c:	bf00      	nop
 800908e:	3708      	adds	r7, #8
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	885b      	ldrh	r3, [r3, #2]
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d106      	bne.n	80090b4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2201      	movs	r2, #1
 80090aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f929 	bl	8009306 <USBD_CtlSendStatus>
  }
}
 80090b4:	bf00      	nop
 80090b6:	3708      	adds	r7, #8
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090cc:	3b01      	subs	r3, #1
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	d80b      	bhi.n	80090ea <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	885b      	ldrh	r3, [r3, #2]
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d10c      	bne.n	80090f4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 f90f 	bl	8009306 <USBD_CtlSendStatus>
      }
      break;
 80090e8:	e004      	b.n	80090f4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80090ea:	6839      	ldr	r1, [r7, #0]
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 f842 	bl	8009176 <USBD_CtlError>
      break;
 80090f2:	e000      	b.n	80090f6 <USBD_ClrFeature+0x3a>
      break;
 80090f4:	bf00      	nop
  }
}
 80090f6:	bf00      	nop
 80090f8:	3708      	adds	r7, #8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80090fe:	b480      	push	{r7}
 8009100:	b083      	sub	sp, #12
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
 8009106:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	781a      	ldrb	r2, [r3, #0]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	785a      	ldrb	r2, [r3, #1]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	3302      	adds	r3, #2
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	b29a      	uxth	r2, r3
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	3303      	adds	r3, #3
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	b29b      	uxth	r3, r3
 8009128:	021b      	lsls	r3, r3, #8
 800912a:	b29b      	uxth	r3, r3
 800912c:	4413      	add	r3, r2
 800912e:	b29a      	uxth	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	3304      	adds	r3, #4
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	b29a      	uxth	r2, r3
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	3305      	adds	r3, #5
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	b29b      	uxth	r3, r3
 8009144:	021b      	lsls	r3, r3, #8
 8009146:	b29b      	uxth	r3, r3
 8009148:	4413      	add	r3, r2
 800914a:	b29a      	uxth	r2, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	3306      	adds	r3, #6
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	b29a      	uxth	r2, r3
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	3307      	adds	r3, #7
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	b29b      	uxth	r3, r3
 8009160:	021b      	lsls	r3, r3, #8
 8009162:	b29b      	uxth	r3, r3
 8009164:	4413      	add	r3, r2
 8009166:	b29a      	uxth	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	80da      	strh	r2, [r3, #6]

}
 800916c:	bf00      	nop
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	bc80      	pop	{r7}
 8009174:	4770      	bx	lr

08009176 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b082      	sub	sp, #8
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
 800917e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009180:	2180      	movs	r1, #128	; 0x80
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 fc54 	bl	8009a30 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009188:	2100      	movs	r1, #0
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 fc50 	bl	8009a30 <USBD_LL_StallEP>
}
 8009190:	bf00      	nop
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b086      	sub	sp, #24
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80091a4:	2300      	movs	r3, #0
 80091a6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d032      	beq.n	8009214 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80091ae:	68f8      	ldr	r0, [r7, #12]
 80091b0:	f000 f834 	bl	800921c <USBD_GetLen>
 80091b4:	4603      	mov	r3, r0
 80091b6:	3301      	adds	r3, #1
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	005b      	lsls	r3, r3, #1
 80091bc:	b29a      	uxth	r2, r3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80091c2:	7dfb      	ldrb	r3, [r7, #23]
 80091c4:	1c5a      	adds	r2, r3, #1
 80091c6:	75fa      	strb	r2, [r7, #23]
 80091c8:	461a      	mov	r2, r3
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	4413      	add	r3, r2
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	7812      	ldrb	r2, [r2, #0]
 80091d2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80091d4:	7dfb      	ldrb	r3, [r7, #23]
 80091d6:	1c5a      	adds	r2, r3, #1
 80091d8:	75fa      	strb	r2, [r7, #23]
 80091da:	461a      	mov	r2, r3
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	4413      	add	r3, r2
 80091e0:	2203      	movs	r2, #3
 80091e2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80091e4:	e012      	b.n	800920c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	1c5a      	adds	r2, r3, #1
 80091ea:	60fa      	str	r2, [r7, #12]
 80091ec:	7dfa      	ldrb	r2, [r7, #23]
 80091ee:	1c51      	adds	r1, r2, #1
 80091f0:	75f9      	strb	r1, [r7, #23]
 80091f2:	4611      	mov	r1, r2
 80091f4:	68ba      	ldr	r2, [r7, #8]
 80091f6:	440a      	add	r2, r1
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80091fc:	7dfb      	ldrb	r3, [r7, #23]
 80091fe:	1c5a      	adds	r2, r3, #1
 8009200:	75fa      	strb	r2, [r7, #23]
 8009202:	461a      	mov	r2, r3
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	4413      	add	r3, r2
 8009208:	2200      	movs	r2, #0
 800920a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d1e8      	bne.n	80091e6 <USBD_GetString+0x4e>
    }
  }
}
 8009214:	bf00      	nop
 8009216:	3718      	adds	r7, #24
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009224:	2300      	movs	r3, #0
 8009226:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009228:	e005      	b.n	8009236 <USBD_GetLen+0x1a>
  {
    len++;
 800922a:	7bfb      	ldrb	r3, [r7, #15]
 800922c:	3301      	adds	r3, #1
 800922e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	3301      	adds	r3, #1
 8009234:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1f5      	bne.n	800922a <USBD_GetLen+0xe>
  }

  return len;
 800923e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009240:	4618      	mov	r0, r3
 8009242:	3714      	adds	r7, #20
 8009244:	46bd      	mov	sp, r7
 8009246:	bc80      	pop	{r7}
 8009248:	4770      	bx	lr

0800924a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b084      	sub	sp, #16
 800924e:	af00      	add	r7, sp, #0
 8009250:	60f8      	str	r0, [r7, #12]
 8009252:	60b9      	str	r1, [r7, #8]
 8009254:	4613      	mov	r3, r2
 8009256:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2202      	movs	r2, #2
 800925c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009260:	88fa      	ldrh	r2, [r7, #6]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009266:	88fa      	ldrh	r2, [r7, #6]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800926c:	88fb      	ldrh	r3, [r7, #6]
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	2100      	movs	r1, #0
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f000 fc65 	bl	8009b42 <USBD_LL_Transmit>

  return USBD_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b084      	sub	sp, #16
 8009286:	af00      	add	r7, sp, #0
 8009288:	60f8      	str	r0, [r7, #12]
 800928a:	60b9      	str	r1, [r7, #8]
 800928c:	4613      	mov	r3, r2
 800928e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009290:	88fb      	ldrh	r3, [r7, #6]
 8009292:	68ba      	ldr	r2, [r7, #8]
 8009294:	2100      	movs	r1, #0
 8009296:	68f8      	ldr	r0, [r7, #12]
 8009298:	f000 fc53 	bl	8009b42 <USBD_LL_Transmit>

  return USBD_OK;
 800929c:	2300      	movs	r3, #0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b084      	sub	sp, #16
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	60f8      	str	r0, [r7, #12]
 80092ae:	60b9      	str	r1, [r7, #8]
 80092b0:	4613      	mov	r3, r2
 80092b2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2203      	movs	r2, #3
 80092b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80092bc:	88fa      	ldrh	r2, [r7, #6]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80092c4:	88fa      	ldrh	r2, [r7, #6]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80092cc:	88fb      	ldrh	r3, [r7, #6]
 80092ce:	68ba      	ldr	r2, [r7, #8]
 80092d0:	2100      	movs	r1, #0
 80092d2:	68f8      	ldr	r0, [r7, #12]
 80092d4:	f000 fc58 	bl	8009b88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b084      	sub	sp, #16
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	60f8      	str	r0, [r7, #12]
 80092ea:	60b9      	str	r1, [r7, #8]
 80092ec:	4613      	mov	r3, r2
 80092ee:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80092f0:	88fb      	ldrh	r3, [r7, #6]
 80092f2:	68ba      	ldr	r2, [r7, #8]
 80092f4:	2100      	movs	r1, #0
 80092f6:	68f8      	ldr	r0, [r7, #12]
 80092f8:	f000 fc46 	bl	8009b88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3710      	adds	r7, #16
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b082      	sub	sp, #8
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2204      	movs	r2, #4
 8009312:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009316:	2300      	movs	r3, #0
 8009318:	2200      	movs	r2, #0
 800931a:	2100      	movs	r1, #0
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 fc10 	bl	8009b42 <USBD_LL_Transmit>

  return USBD_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3708      	adds	r7, #8
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2205      	movs	r2, #5
 8009338:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800933c:	2300      	movs	r3, #0
 800933e:	2200      	movs	r2, #0
 8009340:	2100      	movs	r1, #0
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 fc20 	bl	8009b88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3708      	adds	r7, #8
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
	...

08009354 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009358:	2200      	movs	r2, #0
 800935a:	4912      	ldr	r1, [pc, #72]	; (80093a4 <MX_USB_DEVICE_Init+0x50>)
 800935c:	4812      	ldr	r0, [pc, #72]	; (80093a8 <MX_USB_DEVICE_Init+0x54>)
 800935e:	f7fe ff5e 	bl	800821e <USBD_Init>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d001      	beq.n	800936c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009368:	f7f8 f9c2 	bl	80016f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800936c:	490f      	ldr	r1, [pc, #60]	; (80093ac <MX_USB_DEVICE_Init+0x58>)
 800936e:	480e      	ldr	r0, [pc, #56]	; (80093a8 <MX_USB_DEVICE_Init+0x54>)
 8009370:	f7fe ff80 	bl	8008274 <USBD_RegisterClass>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d001      	beq.n	800937e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800937a:	f7f8 f9b9 	bl	80016f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800937e:	490c      	ldr	r1, [pc, #48]	; (80093b0 <MX_USB_DEVICE_Init+0x5c>)
 8009380:	4809      	ldr	r0, [pc, #36]	; (80093a8 <MX_USB_DEVICE_Init+0x54>)
 8009382:	f7fe feb1 	bl	80080e8 <USBD_CDC_RegisterInterface>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d001      	beq.n	8009390 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800938c:	f7f8 f9b0 	bl	80016f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009390:	4805      	ldr	r0, [pc, #20]	; (80093a8 <MX_USB_DEVICE_Init+0x54>)
 8009392:	f7fe ff88 	bl	80082a6 <USBD_Start>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d001      	beq.n	80093a0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800939c:	f7f8 f9a8 	bl	80016f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80093a0:	bf00      	nop
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	2000012c 	.word	0x2000012c
 80093a8:	200003f4 	.word	0x200003f4
 80093ac:	20000018 	.word	0x20000018
 80093b0:	2000011c 	.word	0x2000011c

080093b4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80093b8:	2200      	movs	r2, #0
 80093ba:	4905      	ldr	r1, [pc, #20]	; (80093d0 <CDC_Init_FS+0x1c>)
 80093bc:	4805      	ldr	r0, [pc, #20]	; (80093d4 <CDC_Init_FS+0x20>)
 80093be:	f7fe fea9 	bl	8008114 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80093c2:	4905      	ldr	r1, [pc, #20]	; (80093d8 <CDC_Init_FS+0x24>)
 80093c4:	4803      	ldr	r0, [pc, #12]	; (80093d4 <CDC_Init_FS+0x20>)
 80093c6:	f7fe febe 	bl	8008146 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80093ca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	20000ab8 	.word	0x20000ab8
 80093d4:	200003f4 	.word	0x200003f4
 80093d8:	200006b8 	.word	0x200006b8

080093dc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80093dc:	b480      	push	{r7}
 80093de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80093e0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bc80      	pop	{r7}
 80093e8:	4770      	bx	lr
	...

080093ec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	4603      	mov	r3, r0
 80093f4:	6039      	str	r1, [r7, #0]
 80093f6:	71fb      	strb	r3, [r7, #7]
 80093f8:	4613      	mov	r3, r2
 80093fa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80093fc:	79fb      	ldrb	r3, [r7, #7]
 80093fe:	2b23      	cmp	r3, #35	; 0x23
 8009400:	d84a      	bhi.n	8009498 <CDC_Control_FS+0xac>
 8009402:	a201      	add	r2, pc, #4	; (adr r2, 8009408 <CDC_Control_FS+0x1c>)
 8009404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009408:	08009499 	.word	0x08009499
 800940c:	08009499 	.word	0x08009499
 8009410:	08009499 	.word	0x08009499
 8009414:	08009499 	.word	0x08009499
 8009418:	08009499 	.word	0x08009499
 800941c:	08009499 	.word	0x08009499
 8009420:	08009499 	.word	0x08009499
 8009424:	08009499 	.word	0x08009499
 8009428:	08009499 	.word	0x08009499
 800942c:	08009499 	.word	0x08009499
 8009430:	08009499 	.word	0x08009499
 8009434:	08009499 	.word	0x08009499
 8009438:	08009499 	.word	0x08009499
 800943c:	08009499 	.word	0x08009499
 8009440:	08009499 	.word	0x08009499
 8009444:	08009499 	.word	0x08009499
 8009448:	08009499 	.word	0x08009499
 800944c:	08009499 	.word	0x08009499
 8009450:	08009499 	.word	0x08009499
 8009454:	08009499 	.word	0x08009499
 8009458:	08009499 	.word	0x08009499
 800945c:	08009499 	.word	0x08009499
 8009460:	08009499 	.word	0x08009499
 8009464:	08009499 	.word	0x08009499
 8009468:	08009499 	.word	0x08009499
 800946c:	08009499 	.word	0x08009499
 8009470:	08009499 	.word	0x08009499
 8009474:	08009499 	.word	0x08009499
 8009478:	08009499 	.word	0x08009499
 800947c:	08009499 	.word	0x08009499
 8009480:	08009499 	.word	0x08009499
 8009484:	08009499 	.word	0x08009499
 8009488:	08009499 	.word	0x08009499
 800948c:	08009499 	.word	0x08009499
 8009490:	08009499 	.word	0x08009499
 8009494:	08009499 	.word	0x08009499
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009498:	bf00      	nop
  }

  return (USBD_OK);
 800949a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800949c:	4618      	mov	r0, r3
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bc80      	pop	{r7}
 80094a4:	4770      	bx	lr
 80094a6:	bf00      	nop

080094a8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80094b2:	6879      	ldr	r1, [r7, #4]
 80094b4:	4805      	ldr	r0, [pc, #20]	; (80094cc <CDC_Receive_FS+0x24>)
 80094b6:	f7fe fe46 	bl	8008146 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80094ba:	4804      	ldr	r0, [pc, #16]	; (80094cc <CDC_Receive_FS+0x24>)
 80094bc:	f7fe fe85 	bl	80081ca <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80094c0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	200003f4 	.word	0x200003f4

080094d0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	460b      	mov	r3, r1
 80094da:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80094dc:	2300      	movs	r3, #0
 80094de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80094e0:	4b0d      	ldr	r3, [pc, #52]	; (8009518 <CDC_Transmit_FS+0x48>)
 80094e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094e6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d001      	beq.n	80094f6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80094f2:	2301      	movs	r3, #1
 80094f4:	e00b      	b.n	800950e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80094f6:	887b      	ldrh	r3, [r7, #2]
 80094f8:	461a      	mov	r2, r3
 80094fa:	6879      	ldr	r1, [r7, #4]
 80094fc:	4806      	ldr	r0, [pc, #24]	; (8009518 <CDC_Transmit_FS+0x48>)
 80094fe:	f7fe fe09 	bl	8008114 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009502:	4805      	ldr	r0, [pc, #20]	; (8009518 <CDC_Transmit_FS+0x48>)
 8009504:	f7fe fe32 	bl	800816c <USBD_CDC_TransmitPacket>
 8009508:	4603      	mov	r3, r0
 800950a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800950c:	7bfb      	ldrb	r3, [r7, #15]
}
 800950e:	4618      	mov	r0, r3
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	200003f4 	.word	0x200003f4

0800951c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	4603      	mov	r3, r0
 8009524:	6039      	str	r1, [r7, #0]
 8009526:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	2212      	movs	r2, #18
 800952c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800952e:	4b03      	ldr	r3, [pc, #12]	; (800953c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009530:	4618      	mov	r0, r3
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	bc80      	pop	{r7}
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	20000148 	.word	0x20000148

08009540 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
 8009546:	4603      	mov	r3, r0
 8009548:	6039      	str	r1, [r7, #0]
 800954a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	2204      	movs	r2, #4
 8009550:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009552:	4b03      	ldr	r3, [pc, #12]	; (8009560 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009554:	4618      	mov	r0, r3
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	bc80      	pop	{r7}
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop
 8009560:	2000015c 	.word	0x2000015c

08009564 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	4603      	mov	r3, r0
 800956c:	6039      	str	r1, [r7, #0]
 800956e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009570:	79fb      	ldrb	r3, [r7, #7]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d105      	bne.n	8009582 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009576:	683a      	ldr	r2, [r7, #0]
 8009578:	4907      	ldr	r1, [pc, #28]	; (8009598 <USBD_FS_ProductStrDescriptor+0x34>)
 800957a:	4808      	ldr	r0, [pc, #32]	; (800959c <USBD_FS_ProductStrDescriptor+0x38>)
 800957c:	f7ff fe0c 	bl	8009198 <USBD_GetString>
 8009580:	e004      	b.n	800958c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009582:	683a      	ldr	r2, [r7, #0]
 8009584:	4904      	ldr	r1, [pc, #16]	; (8009598 <USBD_FS_ProductStrDescriptor+0x34>)
 8009586:	4805      	ldr	r0, [pc, #20]	; (800959c <USBD_FS_ProductStrDescriptor+0x38>)
 8009588:	f7ff fe06 	bl	8009198 <USBD_GetString>
  }
  return USBD_StrDesc;
 800958c:	4b02      	ldr	r3, [pc, #8]	; (8009598 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800958e:	4618      	mov	r0, r3
 8009590:	3708      	adds	r7, #8
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	20000eb8 	.word	0x20000eb8
 800959c:	0800e590 	.word	0x0800e590

080095a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	4603      	mov	r3, r0
 80095a8:	6039      	str	r1, [r7, #0]
 80095aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80095ac:	683a      	ldr	r2, [r7, #0]
 80095ae:	4904      	ldr	r1, [pc, #16]	; (80095c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80095b0:	4804      	ldr	r0, [pc, #16]	; (80095c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80095b2:	f7ff fdf1 	bl	8009198 <USBD_GetString>
  return USBD_StrDesc;
 80095b6:	4b02      	ldr	r3, [pc, #8]	; (80095c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3708      	adds	r7, #8
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	20000eb8 	.word	0x20000eb8
 80095c4:	0800e5a8 	.word	0x0800e5a8

080095c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	4603      	mov	r3, r0
 80095d0:	6039      	str	r1, [r7, #0]
 80095d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	221a      	movs	r2, #26
 80095d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80095da:	f000 f843 	bl	8009664 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80095de:	4b02      	ldr	r3, [pc, #8]	; (80095e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	20000160 	.word	0x20000160

080095ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	4603      	mov	r3, r0
 80095f4:	6039      	str	r1, [r7, #0]
 80095f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80095f8:	79fb      	ldrb	r3, [r7, #7]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d105      	bne.n	800960a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095fe:	683a      	ldr	r2, [r7, #0]
 8009600:	4907      	ldr	r1, [pc, #28]	; (8009620 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009602:	4808      	ldr	r0, [pc, #32]	; (8009624 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009604:	f7ff fdc8 	bl	8009198 <USBD_GetString>
 8009608:	e004      	b.n	8009614 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800960a:	683a      	ldr	r2, [r7, #0]
 800960c:	4904      	ldr	r1, [pc, #16]	; (8009620 <USBD_FS_ConfigStrDescriptor+0x34>)
 800960e:	4805      	ldr	r0, [pc, #20]	; (8009624 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009610:	f7ff fdc2 	bl	8009198 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009614:	4b02      	ldr	r3, [pc, #8]	; (8009620 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009616:	4618      	mov	r0, r3
 8009618:	3708      	adds	r7, #8
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	20000eb8 	.word	0x20000eb8
 8009624:	0800e5bc 	.word	0x0800e5bc

08009628 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	4603      	mov	r3, r0
 8009630:	6039      	str	r1, [r7, #0]
 8009632:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009634:	79fb      	ldrb	r3, [r7, #7]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d105      	bne.n	8009646 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800963a:	683a      	ldr	r2, [r7, #0]
 800963c:	4907      	ldr	r1, [pc, #28]	; (800965c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800963e:	4808      	ldr	r0, [pc, #32]	; (8009660 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009640:	f7ff fdaa 	bl	8009198 <USBD_GetString>
 8009644:	e004      	b.n	8009650 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009646:	683a      	ldr	r2, [r7, #0]
 8009648:	4904      	ldr	r1, [pc, #16]	; (800965c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800964a:	4805      	ldr	r0, [pc, #20]	; (8009660 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800964c:	f7ff fda4 	bl	8009198 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009650:	4b02      	ldr	r3, [pc, #8]	; (800965c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009652:	4618      	mov	r0, r3
 8009654:	3708      	adds	r7, #8
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	20000eb8 	.word	0x20000eb8
 8009660:	0800e5c8 	.word	0x0800e5c8

08009664 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800966a:	4b0f      	ldr	r3, [pc, #60]	; (80096a8 <Get_SerialNum+0x44>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009670:	4b0e      	ldr	r3, [pc, #56]	; (80096ac <Get_SerialNum+0x48>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009676:	4b0e      	ldr	r3, [pc, #56]	; (80096b0 <Get_SerialNum+0x4c>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4413      	add	r3, r2
 8009682:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d009      	beq.n	800969e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800968a:	2208      	movs	r2, #8
 800968c:	4909      	ldr	r1, [pc, #36]	; (80096b4 <Get_SerialNum+0x50>)
 800968e:	68f8      	ldr	r0, [r7, #12]
 8009690:	f000 f814 	bl	80096bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009694:	2204      	movs	r2, #4
 8009696:	4908      	ldr	r1, [pc, #32]	; (80096b8 <Get_SerialNum+0x54>)
 8009698:	68b8      	ldr	r0, [r7, #8]
 800969a:	f000 f80f 	bl	80096bc <IntToUnicode>
  }
}
 800969e:	bf00      	nop
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	1ffff7e8 	.word	0x1ffff7e8
 80096ac:	1ffff7ec 	.word	0x1ffff7ec
 80096b0:	1ffff7f0 	.word	0x1ffff7f0
 80096b4:	20000162 	.word	0x20000162
 80096b8:	20000172 	.word	0x20000172

080096bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80096bc:	b480      	push	{r7}
 80096be:	b087      	sub	sp, #28
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	4613      	mov	r3, r2
 80096c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80096ca:	2300      	movs	r3, #0
 80096cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80096ce:	2300      	movs	r3, #0
 80096d0:	75fb      	strb	r3, [r7, #23]
 80096d2:	e027      	b.n	8009724 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	0f1b      	lsrs	r3, r3, #28
 80096d8:	2b09      	cmp	r3, #9
 80096da:	d80b      	bhi.n	80096f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	0f1b      	lsrs	r3, r3, #28
 80096e0:	b2da      	uxtb	r2, r3
 80096e2:	7dfb      	ldrb	r3, [r7, #23]
 80096e4:	005b      	lsls	r3, r3, #1
 80096e6:	4619      	mov	r1, r3
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	440b      	add	r3, r1
 80096ec:	3230      	adds	r2, #48	; 0x30
 80096ee:	b2d2      	uxtb	r2, r2
 80096f0:	701a      	strb	r2, [r3, #0]
 80096f2:	e00a      	b.n	800970a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	0f1b      	lsrs	r3, r3, #28
 80096f8:	b2da      	uxtb	r2, r3
 80096fa:	7dfb      	ldrb	r3, [r7, #23]
 80096fc:	005b      	lsls	r3, r3, #1
 80096fe:	4619      	mov	r1, r3
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	440b      	add	r3, r1
 8009704:	3237      	adds	r2, #55	; 0x37
 8009706:	b2d2      	uxtb	r2, r2
 8009708:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	011b      	lsls	r3, r3, #4
 800970e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009710:	7dfb      	ldrb	r3, [r7, #23]
 8009712:	005b      	lsls	r3, r3, #1
 8009714:	3301      	adds	r3, #1
 8009716:	68ba      	ldr	r2, [r7, #8]
 8009718:	4413      	add	r3, r2
 800971a:	2200      	movs	r2, #0
 800971c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800971e:	7dfb      	ldrb	r3, [r7, #23]
 8009720:	3301      	adds	r3, #1
 8009722:	75fb      	strb	r3, [r7, #23]
 8009724:	7dfa      	ldrb	r2, [r7, #23]
 8009726:	79fb      	ldrb	r3, [r7, #7]
 8009728:	429a      	cmp	r2, r3
 800972a:	d3d3      	bcc.n	80096d4 <IntToUnicode+0x18>
  }
}
 800972c:	bf00      	nop
 800972e:	bf00      	nop
 8009730:	371c      	adds	r7, #28
 8009732:	46bd      	mov	sp, r7
 8009734:	bc80      	pop	{r7}
 8009736:	4770      	bx	lr

08009738 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a0d      	ldr	r2, [pc, #52]	; (800977c <HAL_PCD_MspInit+0x44>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d113      	bne.n	8009772 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800974a:	4b0d      	ldr	r3, [pc, #52]	; (8009780 <HAL_PCD_MspInit+0x48>)
 800974c:	69db      	ldr	r3, [r3, #28]
 800974e:	4a0c      	ldr	r2, [pc, #48]	; (8009780 <HAL_PCD_MspInit+0x48>)
 8009750:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009754:	61d3      	str	r3, [r2, #28]
 8009756:	4b0a      	ldr	r3, [pc, #40]	; (8009780 <HAL_PCD_MspInit+0x48>)
 8009758:	69db      	ldr	r3, [r3, #28]
 800975a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800975e:	60fb      	str	r3, [r7, #12]
 8009760:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009762:	2200      	movs	r2, #0
 8009764:	2100      	movs	r1, #0
 8009766:	2014      	movs	r0, #20
 8009768:	f7f8 fab3 	bl	8001cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800976c:	2014      	movs	r0, #20
 800976e:	f7f8 facc 	bl	8001d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009772:	bf00      	nop
 8009774:	3710      	adds	r7, #16
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	40005c00 	.word	0x40005c00
 8009780:	40021000 	.word	0x40021000

08009784 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009798:	4619      	mov	r1, r3
 800979a:	4610      	mov	r0, r2
 800979c:	f7fe fdcb 	bl	8008336 <USBD_LL_SetupStage>
}
 80097a0:	bf00      	nop
 80097a2:	3708      	adds	r7, #8
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	460b      	mov	r3, r1
 80097b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80097ba:	78fa      	ldrb	r2, [r7, #3]
 80097bc:	6879      	ldr	r1, [r7, #4]
 80097be:	4613      	mov	r3, r2
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	4413      	add	r3, r2
 80097c4:	00db      	lsls	r3, r3, #3
 80097c6:	440b      	add	r3, r1
 80097c8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	78fb      	ldrb	r3, [r7, #3]
 80097d0:	4619      	mov	r1, r3
 80097d2:	f7fe fdfd 	bl	80083d0 <USBD_LL_DataOutStage>
}
 80097d6:	bf00      	nop
 80097d8:	3708      	adds	r7, #8
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}

080097de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b082      	sub	sp, #8
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
 80097e6:	460b      	mov	r3, r1
 80097e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80097f0:	78fa      	ldrb	r2, [r7, #3]
 80097f2:	6879      	ldr	r1, [r7, #4]
 80097f4:	4613      	mov	r3, r2
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	4413      	add	r3, r2
 80097fa:	00db      	lsls	r3, r3, #3
 80097fc:	440b      	add	r3, r1
 80097fe:	333c      	adds	r3, #60	; 0x3c
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	78fb      	ldrb	r3, [r7, #3]
 8009804:	4619      	mov	r1, r3
 8009806:	f7fe fe54 	bl	80084b2 <USBD_LL_DataInStage>
}
 800980a:	bf00      	nop
 800980c:	3708      	adds	r7, #8
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b082      	sub	sp, #8
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009820:	4618      	mov	r0, r3
 8009822:	f7fe ff64 	bl	80086ee <USBD_LL_SOF>
}
 8009826:	bf00      	nop
 8009828:	3708      	adds	r7, #8
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800982e:	b580      	push	{r7, lr}
 8009830:	b084      	sub	sp, #16
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009836:	2301      	movs	r3, #1
 8009838:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	2b02      	cmp	r3, #2
 8009840:	d001      	beq.n	8009846 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009842:	f7f7 ff55 	bl	80016f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800984c:	7bfa      	ldrb	r2, [r7, #15]
 800984e:	4611      	mov	r1, r2
 8009850:	4618      	mov	r0, r3
 8009852:	f7fe ff14 	bl	800867e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800985c:	4618      	mov	r0, r3
 800985e:	f7fe fecd 	bl	80085fc <USBD_LL_Reset>
}
 8009862:	bf00      	nop
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
	...

0800986c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800987a:	4618      	mov	r0, r3
 800987c:	f7fe ff0e 	bl	800869c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	699b      	ldr	r3, [r3, #24]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d005      	beq.n	8009894 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009888:	4b04      	ldr	r3, [pc, #16]	; (800989c <HAL_PCD_SuspendCallback+0x30>)
 800988a:	691b      	ldr	r3, [r3, #16]
 800988c:	4a03      	ldr	r2, [pc, #12]	; (800989c <HAL_PCD_SuspendCallback+0x30>)
 800988e:	f043 0306 	orr.w	r3, r3, #6
 8009892:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009894:	bf00      	nop
 8009896:	3708      	adds	r7, #8
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}
 800989c:	e000ed00 	.word	0xe000ed00

080098a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80098ae:	4618      	mov	r0, r3
 80098b0:	f7fe ff08 	bl	80086c4 <USBD_LL_Resume>
}
 80098b4:	bf00      	nop
 80098b6:	3708      	adds	r7, #8
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80098c4:	4a28      	ldr	r2, [pc, #160]	; (8009968 <USBD_LL_Init+0xac>)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4a26      	ldr	r2, [pc, #152]	; (8009968 <USBD_LL_Init+0xac>)
 80098d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80098d4:	4b24      	ldr	r3, [pc, #144]	; (8009968 <USBD_LL_Init+0xac>)
 80098d6:	4a25      	ldr	r2, [pc, #148]	; (800996c <USBD_LL_Init+0xb0>)
 80098d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80098da:	4b23      	ldr	r3, [pc, #140]	; (8009968 <USBD_LL_Init+0xac>)
 80098dc:	2208      	movs	r2, #8
 80098de:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80098e0:	4b21      	ldr	r3, [pc, #132]	; (8009968 <USBD_LL_Init+0xac>)
 80098e2:	2202      	movs	r2, #2
 80098e4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80098e6:	4b20      	ldr	r3, [pc, #128]	; (8009968 <USBD_LL_Init+0xac>)
 80098e8:	2200      	movs	r2, #0
 80098ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80098ec:	4b1e      	ldr	r3, [pc, #120]	; (8009968 <USBD_LL_Init+0xac>)
 80098ee:	2200      	movs	r2, #0
 80098f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80098f2:	4b1d      	ldr	r3, [pc, #116]	; (8009968 <USBD_LL_Init+0xac>)
 80098f4:	2200      	movs	r2, #0
 80098f6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80098f8:	481b      	ldr	r0, [pc, #108]	; (8009968 <USBD_LL_Init+0xac>)
 80098fa:	f7f9 fbfe 	bl	80030fa <HAL_PCD_Init>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d001      	beq.n	8009908 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009904:	f7f7 fef4 	bl	80016f0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800990e:	2318      	movs	r3, #24
 8009910:	2200      	movs	r2, #0
 8009912:	2100      	movs	r1, #0
 8009914:	f7fb f91d 	bl	8004b52 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800991e:	2358      	movs	r3, #88	; 0x58
 8009920:	2200      	movs	r2, #0
 8009922:	2180      	movs	r1, #128	; 0x80
 8009924:	f7fb f915 	bl	8004b52 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800992e:	23c0      	movs	r3, #192	; 0xc0
 8009930:	2200      	movs	r2, #0
 8009932:	2181      	movs	r1, #129	; 0x81
 8009934:	f7fb f90d 	bl	8004b52 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800993e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009942:	2200      	movs	r2, #0
 8009944:	2101      	movs	r1, #1
 8009946:	f7fb f904 	bl	8004b52 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009950:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009954:	2200      	movs	r2, #0
 8009956:	2182      	movs	r1, #130	; 0x82
 8009958:	f7fb f8fb 	bl	8004b52 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	200010b8 	.word	0x200010b8
 800996c:	40005c00 	.word	0x40005c00

08009970 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009978:	2300      	movs	r3, #0
 800997a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800997c:	2300      	movs	r3, #0
 800997e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009986:	4618      	mov	r0, r3
 8009988:	f7f9 fcb6 	bl	80032f8 <HAL_PCD_Start>
 800998c:	4603      	mov	r3, r0
 800998e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009990:	7bfb      	ldrb	r3, [r7, #15]
 8009992:	4618      	mov	r0, r3
 8009994:	f000 f94e 	bl	8009c34 <USBD_Get_USB_Status>
 8009998:	4603      	mov	r3, r0
 800999a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800999c:	7bbb      	ldrb	r3, [r7, #14]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b084      	sub	sp, #16
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
 80099ae:	4608      	mov	r0, r1
 80099b0:	4611      	mov	r1, r2
 80099b2:	461a      	mov	r2, r3
 80099b4:	4603      	mov	r3, r0
 80099b6:	70fb      	strb	r3, [r7, #3]
 80099b8:	460b      	mov	r3, r1
 80099ba:	70bb      	strb	r3, [r7, #2]
 80099bc:	4613      	mov	r3, r2
 80099be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099c0:	2300      	movs	r3, #0
 80099c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099c4:	2300      	movs	r3, #0
 80099c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80099ce:	78bb      	ldrb	r3, [r7, #2]
 80099d0:	883a      	ldrh	r2, [r7, #0]
 80099d2:	78f9      	ldrb	r1, [r7, #3]
 80099d4:	f7f9 fe0b 	bl	80035ee <HAL_PCD_EP_Open>
 80099d8:	4603      	mov	r3, r0
 80099da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099dc:	7bfb      	ldrb	r3, [r7, #15]
 80099de:	4618      	mov	r0, r3
 80099e0:	f000 f928 	bl	8009c34 <USBD_Get_USB_Status>
 80099e4:	4603      	mov	r3, r0
 80099e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b084      	sub	sp, #16
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
 80099fa:	460b      	mov	r3, r1
 80099fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099fe:	2300      	movs	r3, #0
 8009a00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a02:	2300      	movs	r3, #0
 8009a04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a0c:	78fa      	ldrb	r2, [r7, #3]
 8009a0e:	4611      	mov	r1, r2
 8009a10:	4618      	mov	r0, r3
 8009a12:	f7f9 fe49 	bl	80036a8 <HAL_PCD_EP_Close>
 8009a16:	4603      	mov	r3, r0
 8009a18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a1a:	7bfb      	ldrb	r3, [r7, #15]
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f000 f909 	bl	8009c34 <USBD_Get_USB_Status>
 8009a22:	4603      	mov	r3, r0
 8009a24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a26:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3710      	adds	r7, #16
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	460b      	mov	r3, r1
 8009a3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a40:	2300      	movs	r3, #0
 8009a42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a4a:	78fa      	ldrb	r2, [r7, #3]
 8009a4c:	4611      	mov	r1, r2
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7f9 fef1 	bl	8003836 <HAL_PCD_EP_SetStall>
 8009a54:	4603      	mov	r3, r0
 8009a56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a58:	7bfb      	ldrb	r3, [r7, #15]
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f000 f8ea 	bl	8009c34 <USBD_Get_USB_Status>
 8009a60:	4603      	mov	r3, r0
 8009a62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a64:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b084      	sub	sp, #16
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
 8009a76:	460b      	mov	r3, r1
 8009a78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a88:	78fa      	ldrb	r2, [r7, #3]
 8009a8a:	4611      	mov	r1, r2
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7f9 ff32 	bl	80038f6 <HAL_PCD_EP_ClrStall>
 8009a92:	4603      	mov	r3, r0
 8009a94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a96:	7bfb      	ldrb	r3, [r7, #15]
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f000 f8cb 	bl	8009c34 <USBD_Get_USB_Status>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009aa2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3710      	adds	r7, #16
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b085      	sub	sp, #20
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009abe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009ac0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	da0c      	bge.n	8009ae2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009ac8:	78fb      	ldrb	r3, [r7, #3]
 8009aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ace:	68f9      	ldr	r1, [r7, #12]
 8009ad0:	1c5a      	adds	r2, r3, #1
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	4413      	add	r3, r2
 8009ad8:	00db      	lsls	r3, r3, #3
 8009ada:	440b      	add	r3, r1
 8009adc:	3302      	adds	r3, #2
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	e00b      	b.n	8009afa <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009ae2:	78fb      	ldrb	r3, [r7, #3]
 8009ae4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ae8:	68f9      	ldr	r1, [r7, #12]
 8009aea:	4613      	mov	r3, r2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	4413      	add	r3, r2
 8009af0:	00db      	lsls	r3, r3, #3
 8009af2:	440b      	add	r3, r1
 8009af4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009af8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3714      	adds	r7, #20
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bc80      	pop	{r7}
 8009b02:	4770      	bx	lr

08009b04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b10:	2300      	movs	r3, #0
 8009b12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b14:	2300      	movs	r3, #0
 8009b16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b1e:	78fa      	ldrb	r2, [r7, #3]
 8009b20:	4611      	mov	r1, r2
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7f9 fd3e 	bl	80035a4 <HAL_PCD_SetAddress>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b2c:	7bfb      	ldrb	r3, [r7, #15]
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f000 f880 	bl	8009c34 <USBD_Get_USB_Status>
 8009b34:	4603      	mov	r3, r0
 8009b36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b38:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3710      	adds	r7, #16
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b086      	sub	sp, #24
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	60f8      	str	r0, [r7, #12]
 8009b4a:	607a      	str	r2, [r7, #4]
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	460b      	mov	r3, r1
 8009b50:	72fb      	strb	r3, [r7, #11]
 8009b52:	4613      	mov	r3, r2
 8009b54:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b56:	2300      	movs	r3, #0
 8009b58:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b64:	893b      	ldrh	r3, [r7, #8]
 8009b66:	7af9      	ldrb	r1, [r7, #11]
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	f7f9 fe2d 	bl	80037c8 <HAL_PCD_EP_Transmit>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b72:	7dfb      	ldrb	r3, [r7, #23]
 8009b74:	4618      	mov	r0, r3
 8009b76:	f000 f85d 	bl	8009c34 <USBD_Get_USB_Status>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b7e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3718      	adds	r7, #24
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b086      	sub	sp, #24
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	607a      	str	r2, [r7, #4]
 8009b92:	461a      	mov	r2, r3
 8009b94:	460b      	mov	r3, r1
 8009b96:	72fb      	strb	r3, [r7, #11]
 8009b98:	4613      	mov	r3, r2
 8009b9a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009baa:	893b      	ldrh	r3, [r7, #8]
 8009bac:	7af9      	ldrb	r1, [r7, #11]
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	f7f9 fdc2 	bl	8003738 <HAL_PCD_EP_Receive>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bb8:	7dfb      	ldrb	r3, [r7, #23]
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f000 f83a 	bl	8009c34 <USBD_Get_USB_Status>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009bc4:	7dbb      	ldrb	r3, [r7, #22]
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3718      	adds	r7, #24
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b082      	sub	sp, #8
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
 8009bd6:	460b      	mov	r3, r1
 8009bd8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009be0:	78fa      	ldrb	r2, [r7, #3]
 8009be2:	4611      	mov	r1, r2
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7f9 fdd8 	bl	800379a <HAL_PCD_EP_GetRxCount>
 8009bea:	4603      	mov	r3, r0
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3708      	adds	r7, #8
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009bfc:	4b02      	ldr	r3, [pc, #8]	; (8009c08 <USBD_static_malloc+0x14>)
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	370c      	adds	r7, #12
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bc80      	pop	{r7}
 8009c06:	4770      	bx	lr
 8009c08:	200013a8 	.word	0x200013a8

08009c0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]

}
 8009c14:	bf00      	nop
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bc80      	pop	{r7}
 8009c1c:	4770      	bx	lr

08009c1e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c1e:	b480      	push	{r7}
 8009c20:	b083      	sub	sp, #12
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
 8009c26:	460b      	mov	r3, r1
 8009c28:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009c2a:	bf00      	nop
 8009c2c:	370c      	adds	r7, #12
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bc80      	pop	{r7}
 8009c32:	4770      	bx	lr

08009c34 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b085      	sub	sp, #20
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c42:	79fb      	ldrb	r3, [r7, #7]
 8009c44:	2b03      	cmp	r3, #3
 8009c46:	d817      	bhi.n	8009c78 <USBD_Get_USB_Status+0x44>
 8009c48:	a201      	add	r2, pc, #4	; (adr r2, 8009c50 <USBD_Get_USB_Status+0x1c>)
 8009c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c4e:	bf00      	nop
 8009c50:	08009c61 	.word	0x08009c61
 8009c54:	08009c67 	.word	0x08009c67
 8009c58:	08009c6d 	.word	0x08009c6d
 8009c5c:	08009c73 	.word	0x08009c73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009c60:	2300      	movs	r3, #0
 8009c62:	73fb      	strb	r3, [r7, #15]
    break;
 8009c64:	e00b      	b.n	8009c7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c66:	2302      	movs	r3, #2
 8009c68:	73fb      	strb	r3, [r7, #15]
    break;
 8009c6a:	e008      	b.n	8009c7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	73fb      	strb	r3, [r7, #15]
    break;
 8009c70:	e005      	b.n	8009c7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c72:	2302      	movs	r3, #2
 8009c74:	73fb      	strb	r3, [r7, #15]
    break;
 8009c76:	e002      	b.n	8009c7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009c78:	2302      	movs	r3, #2
 8009c7a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c7c:	bf00      	nop
  }
  return usb_status;
 8009c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3714      	adds	r7, #20
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bc80      	pop	{r7}
 8009c88:	4770      	bx	lr
 8009c8a:	bf00      	nop

08009c8c <__errno>:
 8009c8c:	4b01      	ldr	r3, [pc, #4]	; (8009c94 <__errno+0x8>)
 8009c8e:	6818      	ldr	r0, [r3, #0]
 8009c90:	4770      	bx	lr
 8009c92:	bf00      	nop
 8009c94:	2000017c 	.word	0x2000017c

08009c98 <__libc_init_array>:
 8009c98:	b570      	push	{r4, r5, r6, lr}
 8009c9a:	2600      	movs	r6, #0
 8009c9c:	4d0c      	ldr	r5, [pc, #48]	; (8009cd0 <__libc_init_array+0x38>)
 8009c9e:	4c0d      	ldr	r4, [pc, #52]	; (8009cd4 <__libc_init_array+0x3c>)
 8009ca0:	1b64      	subs	r4, r4, r5
 8009ca2:	10a4      	asrs	r4, r4, #2
 8009ca4:	42a6      	cmp	r6, r4
 8009ca6:	d109      	bne.n	8009cbc <__libc_init_array+0x24>
 8009ca8:	f004 fc50 	bl	800e54c <_init>
 8009cac:	2600      	movs	r6, #0
 8009cae:	4d0a      	ldr	r5, [pc, #40]	; (8009cd8 <__libc_init_array+0x40>)
 8009cb0:	4c0a      	ldr	r4, [pc, #40]	; (8009cdc <__libc_init_array+0x44>)
 8009cb2:	1b64      	subs	r4, r4, r5
 8009cb4:	10a4      	asrs	r4, r4, #2
 8009cb6:	42a6      	cmp	r6, r4
 8009cb8:	d105      	bne.n	8009cc6 <__libc_init_array+0x2e>
 8009cba:	bd70      	pop	{r4, r5, r6, pc}
 8009cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cc0:	4798      	blx	r3
 8009cc2:	3601      	adds	r6, #1
 8009cc4:	e7ee      	b.n	8009ca4 <__libc_init_array+0xc>
 8009cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cca:	4798      	blx	r3
 8009ccc:	3601      	adds	r6, #1
 8009cce:	e7f2      	b.n	8009cb6 <__libc_init_array+0x1e>
 8009cd0:	0800eaac 	.word	0x0800eaac
 8009cd4:	0800eaac 	.word	0x0800eaac
 8009cd8:	0800eaac 	.word	0x0800eaac
 8009cdc:	0800eab0 	.word	0x0800eab0

08009ce0 <memset>:
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	4402      	add	r2, r0
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d100      	bne.n	8009cea <memset+0xa>
 8009ce8:	4770      	bx	lr
 8009cea:	f803 1b01 	strb.w	r1, [r3], #1
 8009cee:	e7f9      	b.n	8009ce4 <memset+0x4>

08009cf0 <__cvt>:
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cf6:	461f      	mov	r7, r3
 8009cf8:	bfbb      	ittet	lt
 8009cfa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009cfe:	461f      	movlt	r7, r3
 8009d00:	2300      	movge	r3, #0
 8009d02:	232d      	movlt	r3, #45	; 0x2d
 8009d04:	b088      	sub	sp, #32
 8009d06:	4614      	mov	r4, r2
 8009d08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d0a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009d0c:	7013      	strb	r3, [r2, #0]
 8009d0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d10:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009d14:	f023 0820 	bic.w	r8, r3, #32
 8009d18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009d1c:	d005      	beq.n	8009d2a <__cvt+0x3a>
 8009d1e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009d22:	d100      	bne.n	8009d26 <__cvt+0x36>
 8009d24:	3501      	adds	r5, #1
 8009d26:	2302      	movs	r3, #2
 8009d28:	e000      	b.n	8009d2c <__cvt+0x3c>
 8009d2a:	2303      	movs	r3, #3
 8009d2c:	aa07      	add	r2, sp, #28
 8009d2e:	9204      	str	r2, [sp, #16]
 8009d30:	aa06      	add	r2, sp, #24
 8009d32:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009d36:	e9cd 3500 	strd	r3, r5, [sp]
 8009d3a:	4622      	mov	r2, r4
 8009d3c:	463b      	mov	r3, r7
 8009d3e:	f001 fd83 	bl	800b848 <_dtoa_r>
 8009d42:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009d46:	4606      	mov	r6, r0
 8009d48:	d102      	bne.n	8009d50 <__cvt+0x60>
 8009d4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d4c:	07db      	lsls	r3, r3, #31
 8009d4e:	d522      	bpl.n	8009d96 <__cvt+0xa6>
 8009d50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009d54:	eb06 0905 	add.w	r9, r6, r5
 8009d58:	d110      	bne.n	8009d7c <__cvt+0x8c>
 8009d5a:	7833      	ldrb	r3, [r6, #0]
 8009d5c:	2b30      	cmp	r3, #48	; 0x30
 8009d5e:	d10a      	bne.n	8009d76 <__cvt+0x86>
 8009d60:	2200      	movs	r2, #0
 8009d62:	2300      	movs	r3, #0
 8009d64:	4620      	mov	r0, r4
 8009d66:	4639      	mov	r1, r7
 8009d68:	f7f6 fe1e 	bl	80009a8 <__aeabi_dcmpeq>
 8009d6c:	b918      	cbnz	r0, 8009d76 <__cvt+0x86>
 8009d6e:	f1c5 0501 	rsb	r5, r5, #1
 8009d72:	f8ca 5000 	str.w	r5, [sl]
 8009d76:	f8da 3000 	ldr.w	r3, [sl]
 8009d7a:	4499      	add	r9, r3
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	2300      	movs	r3, #0
 8009d80:	4620      	mov	r0, r4
 8009d82:	4639      	mov	r1, r7
 8009d84:	f7f6 fe10 	bl	80009a8 <__aeabi_dcmpeq>
 8009d88:	b108      	cbz	r0, 8009d8e <__cvt+0x9e>
 8009d8a:	f8cd 901c 	str.w	r9, [sp, #28]
 8009d8e:	2230      	movs	r2, #48	; 0x30
 8009d90:	9b07      	ldr	r3, [sp, #28]
 8009d92:	454b      	cmp	r3, r9
 8009d94:	d307      	bcc.n	8009da6 <__cvt+0xb6>
 8009d96:	4630      	mov	r0, r6
 8009d98:	9b07      	ldr	r3, [sp, #28]
 8009d9a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009d9c:	1b9b      	subs	r3, r3, r6
 8009d9e:	6013      	str	r3, [r2, #0]
 8009da0:	b008      	add	sp, #32
 8009da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009da6:	1c59      	adds	r1, r3, #1
 8009da8:	9107      	str	r1, [sp, #28]
 8009daa:	701a      	strb	r2, [r3, #0]
 8009dac:	e7f0      	b.n	8009d90 <__cvt+0xa0>

08009dae <__exponent>:
 8009dae:	4603      	mov	r3, r0
 8009db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009db2:	2900      	cmp	r1, #0
 8009db4:	f803 2b02 	strb.w	r2, [r3], #2
 8009db8:	bfb6      	itet	lt
 8009dba:	222d      	movlt	r2, #45	; 0x2d
 8009dbc:	222b      	movge	r2, #43	; 0x2b
 8009dbe:	4249      	neglt	r1, r1
 8009dc0:	2909      	cmp	r1, #9
 8009dc2:	7042      	strb	r2, [r0, #1]
 8009dc4:	dd2b      	ble.n	8009e1e <__exponent+0x70>
 8009dc6:	f10d 0407 	add.w	r4, sp, #7
 8009dca:	46a4      	mov	ip, r4
 8009dcc:	270a      	movs	r7, #10
 8009dce:	fb91 f6f7 	sdiv	r6, r1, r7
 8009dd2:	460a      	mov	r2, r1
 8009dd4:	46a6      	mov	lr, r4
 8009dd6:	fb07 1516 	mls	r5, r7, r6, r1
 8009dda:	2a63      	cmp	r2, #99	; 0x63
 8009ddc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009de0:	4631      	mov	r1, r6
 8009de2:	f104 34ff 	add.w	r4, r4, #4294967295
 8009de6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009dea:	dcf0      	bgt.n	8009dce <__exponent+0x20>
 8009dec:	3130      	adds	r1, #48	; 0x30
 8009dee:	f1ae 0502 	sub.w	r5, lr, #2
 8009df2:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009df6:	4629      	mov	r1, r5
 8009df8:	1c44      	adds	r4, r0, #1
 8009dfa:	4561      	cmp	r1, ip
 8009dfc:	d30a      	bcc.n	8009e14 <__exponent+0x66>
 8009dfe:	f10d 0209 	add.w	r2, sp, #9
 8009e02:	eba2 020e 	sub.w	r2, r2, lr
 8009e06:	4565      	cmp	r5, ip
 8009e08:	bf88      	it	hi
 8009e0a:	2200      	movhi	r2, #0
 8009e0c:	4413      	add	r3, r2
 8009e0e:	1a18      	subs	r0, r3, r0
 8009e10:	b003      	add	sp, #12
 8009e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e14:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e18:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009e1c:	e7ed      	b.n	8009dfa <__exponent+0x4c>
 8009e1e:	2330      	movs	r3, #48	; 0x30
 8009e20:	3130      	adds	r1, #48	; 0x30
 8009e22:	7083      	strb	r3, [r0, #2]
 8009e24:	70c1      	strb	r1, [r0, #3]
 8009e26:	1d03      	adds	r3, r0, #4
 8009e28:	e7f1      	b.n	8009e0e <__exponent+0x60>
	...

08009e2c <_printf_float>:
 8009e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e30:	b091      	sub	sp, #68	; 0x44
 8009e32:	460c      	mov	r4, r1
 8009e34:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009e38:	4616      	mov	r6, r2
 8009e3a:	461f      	mov	r7, r3
 8009e3c:	4605      	mov	r5, r0
 8009e3e:	f002 fe57 	bl	800caf0 <_localeconv_r>
 8009e42:	6803      	ldr	r3, [r0, #0]
 8009e44:	4618      	mov	r0, r3
 8009e46:	9309      	str	r3, [sp, #36]	; 0x24
 8009e48:	f7f6 f982 	bl	8000150 <strlen>
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	930e      	str	r3, [sp, #56]	; 0x38
 8009e50:	f8d8 3000 	ldr.w	r3, [r8]
 8009e54:	900a      	str	r0, [sp, #40]	; 0x28
 8009e56:	3307      	adds	r3, #7
 8009e58:	f023 0307 	bic.w	r3, r3, #7
 8009e5c:	f103 0208 	add.w	r2, r3, #8
 8009e60:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009e64:	f8d4 b000 	ldr.w	fp, [r4]
 8009e68:	f8c8 2000 	str.w	r2, [r8]
 8009e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e70:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009e74:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009e78:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009e7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e82:	4640      	mov	r0, r8
 8009e84:	4b9c      	ldr	r3, [pc, #624]	; (800a0f8 <_printf_float+0x2cc>)
 8009e86:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e88:	f7f6 fdc0 	bl	8000a0c <__aeabi_dcmpun>
 8009e8c:	bb70      	cbnz	r0, 8009eec <_printf_float+0xc0>
 8009e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e92:	4640      	mov	r0, r8
 8009e94:	4b98      	ldr	r3, [pc, #608]	; (800a0f8 <_printf_float+0x2cc>)
 8009e96:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e98:	f7f6 fd9a 	bl	80009d0 <__aeabi_dcmple>
 8009e9c:	bb30      	cbnz	r0, 8009eec <_printf_float+0xc0>
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	4640      	mov	r0, r8
 8009ea4:	4651      	mov	r1, sl
 8009ea6:	f7f6 fd89 	bl	80009bc <__aeabi_dcmplt>
 8009eaa:	b110      	cbz	r0, 8009eb2 <_printf_float+0x86>
 8009eac:	232d      	movs	r3, #45	; 0x2d
 8009eae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009eb2:	4b92      	ldr	r3, [pc, #584]	; (800a0fc <_printf_float+0x2d0>)
 8009eb4:	4892      	ldr	r0, [pc, #584]	; (800a100 <_printf_float+0x2d4>)
 8009eb6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009eba:	bf94      	ite	ls
 8009ebc:	4698      	movls	r8, r3
 8009ebe:	4680      	movhi	r8, r0
 8009ec0:	2303      	movs	r3, #3
 8009ec2:	f04f 0a00 	mov.w	sl, #0
 8009ec6:	6123      	str	r3, [r4, #16]
 8009ec8:	f02b 0304 	bic.w	r3, fp, #4
 8009ecc:	6023      	str	r3, [r4, #0]
 8009ece:	4633      	mov	r3, r6
 8009ed0:	4621      	mov	r1, r4
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	9700      	str	r7, [sp, #0]
 8009ed6:	aa0f      	add	r2, sp, #60	; 0x3c
 8009ed8:	f000 f9d4 	bl	800a284 <_printf_common>
 8009edc:	3001      	adds	r0, #1
 8009ede:	f040 8090 	bne.w	800a002 <_printf_float+0x1d6>
 8009ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee6:	b011      	add	sp, #68	; 0x44
 8009ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eec:	4642      	mov	r2, r8
 8009eee:	4653      	mov	r3, sl
 8009ef0:	4640      	mov	r0, r8
 8009ef2:	4651      	mov	r1, sl
 8009ef4:	f7f6 fd8a 	bl	8000a0c <__aeabi_dcmpun>
 8009ef8:	b148      	cbz	r0, 8009f0e <_printf_float+0xe2>
 8009efa:	f1ba 0f00 	cmp.w	sl, #0
 8009efe:	bfb8      	it	lt
 8009f00:	232d      	movlt	r3, #45	; 0x2d
 8009f02:	4880      	ldr	r0, [pc, #512]	; (800a104 <_printf_float+0x2d8>)
 8009f04:	bfb8      	it	lt
 8009f06:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009f0a:	4b7f      	ldr	r3, [pc, #508]	; (800a108 <_printf_float+0x2dc>)
 8009f0c:	e7d3      	b.n	8009eb6 <_printf_float+0x8a>
 8009f0e:	6863      	ldr	r3, [r4, #4]
 8009f10:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009f14:	1c5a      	adds	r2, r3, #1
 8009f16:	d142      	bne.n	8009f9e <_printf_float+0x172>
 8009f18:	2306      	movs	r3, #6
 8009f1a:	6063      	str	r3, [r4, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	9206      	str	r2, [sp, #24]
 8009f20:	aa0e      	add	r2, sp, #56	; 0x38
 8009f22:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009f26:	aa0d      	add	r2, sp, #52	; 0x34
 8009f28:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009f2c:	9203      	str	r2, [sp, #12]
 8009f2e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009f32:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009f36:	6023      	str	r3, [r4, #0]
 8009f38:	6863      	ldr	r3, [r4, #4]
 8009f3a:	4642      	mov	r2, r8
 8009f3c:	9300      	str	r3, [sp, #0]
 8009f3e:	4628      	mov	r0, r5
 8009f40:	4653      	mov	r3, sl
 8009f42:	910b      	str	r1, [sp, #44]	; 0x2c
 8009f44:	f7ff fed4 	bl	8009cf0 <__cvt>
 8009f48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f4a:	4680      	mov	r8, r0
 8009f4c:	2947      	cmp	r1, #71	; 0x47
 8009f4e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009f50:	d108      	bne.n	8009f64 <_printf_float+0x138>
 8009f52:	1cc8      	adds	r0, r1, #3
 8009f54:	db02      	blt.n	8009f5c <_printf_float+0x130>
 8009f56:	6863      	ldr	r3, [r4, #4]
 8009f58:	4299      	cmp	r1, r3
 8009f5a:	dd40      	ble.n	8009fde <_printf_float+0x1b2>
 8009f5c:	f1a9 0902 	sub.w	r9, r9, #2
 8009f60:	fa5f f989 	uxtb.w	r9, r9
 8009f64:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009f68:	d81f      	bhi.n	8009faa <_printf_float+0x17e>
 8009f6a:	464a      	mov	r2, r9
 8009f6c:	3901      	subs	r1, #1
 8009f6e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009f72:	910d      	str	r1, [sp, #52]	; 0x34
 8009f74:	f7ff ff1b 	bl	8009dae <__exponent>
 8009f78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f7a:	4682      	mov	sl, r0
 8009f7c:	1813      	adds	r3, r2, r0
 8009f7e:	2a01      	cmp	r2, #1
 8009f80:	6123      	str	r3, [r4, #16]
 8009f82:	dc02      	bgt.n	8009f8a <_printf_float+0x15e>
 8009f84:	6822      	ldr	r2, [r4, #0]
 8009f86:	07d2      	lsls	r2, r2, #31
 8009f88:	d501      	bpl.n	8009f8e <_printf_float+0x162>
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	6123      	str	r3, [r4, #16]
 8009f8e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d09b      	beq.n	8009ece <_printf_float+0xa2>
 8009f96:	232d      	movs	r3, #45	; 0x2d
 8009f98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f9c:	e797      	b.n	8009ece <_printf_float+0xa2>
 8009f9e:	2947      	cmp	r1, #71	; 0x47
 8009fa0:	d1bc      	bne.n	8009f1c <_printf_float+0xf0>
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d1ba      	bne.n	8009f1c <_printf_float+0xf0>
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e7b7      	b.n	8009f1a <_printf_float+0xee>
 8009faa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009fae:	d118      	bne.n	8009fe2 <_printf_float+0x1b6>
 8009fb0:	2900      	cmp	r1, #0
 8009fb2:	6863      	ldr	r3, [r4, #4]
 8009fb4:	dd0b      	ble.n	8009fce <_printf_float+0x1a2>
 8009fb6:	6121      	str	r1, [r4, #16]
 8009fb8:	b913      	cbnz	r3, 8009fc0 <_printf_float+0x194>
 8009fba:	6822      	ldr	r2, [r4, #0]
 8009fbc:	07d0      	lsls	r0, r2, #31
 8009fbe:	d502      	bpl.n	8009fc6 <_printf_float+0x19a>
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	440b      	add	r3, r1
 8009fc4:	6123      	str	r3, [r4, #16]
 8009fc6:	f04f 0a00 	mov.w	sl, #0
 8009fca:	65a1      	str	r1, [r4, #88]	; 0x58
 8009fcc:	e7df      	b.n	8009f8e <_printf_float+0x162>
 8009fce:	b913      	cbnz	r3, 8009fd6 <_printf_float+0x1aa>
 8009fd0:	6822      	ldr	r2, [r4, #0]
 8009fd2:	07d2      	lsls	r2, r2, #31
 8009fd4:	d501      	bpl.n	8009fda <_printf_float+0x1ae>
 8009fd6:	3302      	adds	r3, #2
 8009fd8:	e7f4      	b.n	8009fc4 <_printf_float+0x198>
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e7f2      	b.n	8009fc4 <_printf_float+0x198>
 8009fde:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009fe2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fe4:	4299      	cmp	r1, r3
 8009fe6:	db05      	blt.n	8009ff4 <_printf_float+0x1c8>
 8009fe8:	6823      	ldr	r3, [r4, #0]
 8009fea:	6121      	str	r1, [r4, #16]
 8009fec:	07d8      	lsls	r0, r3, #31
 8009fee:	d5ea      	bpl.n	8009fc6 <_printf_float+0x19a>
 8009ff0:	1c4b      	adds	r3, r1, #1
 8009ff2:	e7e7      	b.n	8009fc4 <_printf_float+0x198>
 8009ff4:	2900      	cmp	r1, #0
 8009ff6:	bfcc      	ite	gt
 8009ff8:	2201      	movgt	r2, #1
 8009ffa:	f1c1 0202 	rsble	r2, r1, #2
 8009ffe:	4413      	add	r3, r2
 800a000:	e7e0      	b.n	8009fc4 <_printf_float+0x198>
 800a002:	6823      	ldr	r3, [r4, #0]
 800a004:	055a      	lsls	r2, r3, #21
 800a006:	d407      	bmi.n	800a018 <_printf_float+0x1ec>
 800a008:	6923      	ldr	r3, [r4, #16]
 800a00a:	4642      	mov	r2, r8
 800a00c:	4631      	mov	r1, r6
 800a00e:	4628      	mov	r0, r5
 800a010:	47b8      	blx	r7
 800a012:	3001      	adds	r0, #1
 800a014:	d12b      	bne.n	800a06e <_printf_float+0x242>
 800a016:	e764      	b.n	8009ee2 <_printf_float+0xb6>
 800a018:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a01c:	f240 80dd 	bls.w	800a1da <_printf_float+0x3ae>
 800a020:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a024:	2200      	movs	r2, #0
 800a026:	2300      	movs	r3, #0
 800a028:	f7f6 fcbe 	bl	80009a8 <__aeabi_dcmpeq>
 800a02c:	2800      	cmp	r0, #0
 800a02e:	d033      	beq.n	800a098 <_printf_float+0x26c>
 800a030:	2301      	movs	r3, #1
 800a032:	4631      	mov	r1, r6
 800a034:	4628      	mov	r0, r5
 800a036:	4a35      	ldr	r2, [pc, #212]	; (800a10c <_printf_float+0x2e0>)
 800a038:	47b8      	blx	r7
 800a03a:	3001      	adds	r0, #1
 800a03c:	f43f af51 	beq.w	8009ee2 <_printf_float+0xb6>
 800a040:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a044:	429a      	cmp	r2, r3
 800a046:	db02      	blt.n	800a04e <_printf_float+0x222>
 800a048:	6823      	ldr	r3, [r4, #0]
 800a04a:	07d8      	lsls	r0, r3, #31
 800a04c:	d50f      	bpl.n	800a06e <_printf_float+0x242>
 800a04e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a052:	4631      	mov	r1, r6
 800a054:	4628      	mov	r0, r5
 800a056:	47b8      	blx	r7
 800a058:	3001      	adds	r0, #1
 800a05a:	f43f af42 	beq.w	8009ee2 <_printf_float+0xb6>
 800a05e:	f04f 0800 	mov.w	r8, #0
 800a062:	f104 091a 	add.w	r9, r4, #26
 800a066:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a068:	3b01      	subs	r3, #1
 800a06a:	4543      	cmp	r3, r8
 800a06c:	dc09      	bgt.n	800a082 <_printf_float+0x256>
 800a06e:	6823      	ldr	r3, [r4, #0]
 800a070:	079b      	lsls	r3, r3, #30
 800a072:	f100 8102 	bmi.w	800a27a <_printf_float+0x44e>
 800a076:	68e0      	ldr	r0, [r4, #12]
 800a078:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a07a:	4298      	cmp	r0, r3
 800a07c:	bfb8      	it	lt
 800a07e:	4618      	movlt	r0, r3
 800a080:	e731      	b.n	8009ee6 <_printf_float+0xba>
 800a082:	2301      	movs	r3, #1
 800a084:	464a      	mov	r2, r9
 800a086:	4631      	mov	r1, r6
 800a088:	4628      	mov	r0, r5
 800a08a:	47b8      	blx	r7
 800a08c:	3001      	adds	r0, #1
 800a08e:	f43f af28 	beq.w	8009ee2 <_printf_float+0xb6>
 800a092:	f108 0801 	add.w	r8, r8, #1
 800a096:	e7e6      	b.n	800a066 <_printf_float+0x23a>
 800a098:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	dc38      	bgt.n	800a110 <_printf_float+0x2e4>
 800a09e:	2301      	movs	r3, #1
 800a0a0:	4631      	mov	r1, r6
 800a0a2:	4628      	mov	r0, r5
 800a0a4:	4a19      	ldr	r2, [pc, #100]	; (800a10c <_printf_float+0x2e0>)
 800a0a6:	47b8      	blx	r7
 800a0a8:	3001      	adds	r0, #1
 800a0aa:	f43f af1a 	beq.w	8009ee2 <_printf_float+0xb6>
 800a0ae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	d102      	bne.n	800a0bc <_printf_float+0x290>
 800a0b6:	6823      	ldr	r3, [r4, #0]
 800a0b8:	07d9      	lsls	r1, r3, #31
 800a0ba:	d5d8      	bpl.n	800a06e <_printf_float+0x242>
 800a0bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0c0:	4631      	mov	r1, r6
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	47b8      	blx	r7
 800a0c6:	3001      	adds	r0, #1
 800a0c8:	f43f af0b 	beq.w	8009ee2 <_printf_float+0xb6>
 800a0cc:	f04f 0900 	mov.w	r9, #0
 800a0d0:	f104 0a1a 	add.w	sl, r4, #26
 800a0d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0d6:	425b      	negs	r3, r3
 800a0d8:	454b      	cmp	r3, r9
 800a0da:	dc01      	bgt.n	800a0e0 <_printf_float+0x2b4>
 800a0dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0de:	e794      	b.n	800a00a <_printf_float+0x1de>
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	4652      	mov	r2, sl
 800a0e4:	4631      	mov	r1, r6
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	47b8      	blx	r7
 800a0ea:	3001      	adds	r0, #1
 800a0ec:	f43f aef9 	beq.w	8009ee2 <_printf_float+0xb6>
 800a0f0:	f109 0901 	add.w	r9, r9, #1
 800a0f4:	e7ee      	b.n	800a0d4 <_printf_float+0x2a8>
 800a0f6:	bf00      	nop
 800a0f8:	7fefffff 	.word	0x7fefffff
 800a0fc:	0800e608 	.word	0x0800e608
 800a100:	0800e60c 	.word	0x0800e60c
 800a104:	0800e614 	.word	0x0800e614
 800a108:	0800e610 	.word	0x0800e610
 800a10c:	0800e618 	.word	0x0800e618
 800a110:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a112:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a114:	429a      	cmp	r2, r3
 800a116:	bfa8      	it	ge
 800a118:	461a      	movge	r2, r3
 800a11a:	2a00      	cmp	r2, #0
 800a11c:	4691      	mov	r9, r2
 800a11e:	dc37      	bgt.n	800a190 <_printf_float+0x364>
 800a120:	f04f 0b00 	mov.w	fp, #0
 800a124:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a128:	f104 021a 	add.w	r2, r4, #26
 800a12c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a130:	ebaa 0309 	sub.w	r3, sl, r9
 800a134:	455b      	cmp	r3, fp
 800a136:	dc33      	bgt.n	800a1a0 <_printf_float+0x374>
 800a138:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a13c:	429a      	cmp	r2, r3
 800a13e:	db3b      	blt.n	800a1b8 <_printf_float+0x38c>
 800a140:	6823      	ldr	r3, [r4, #0]
 800a142:	07da      	lsls	r2, r3, #31
 800a144:	d438      	bmi.n	800a1b8 <_printf_float+0x38c>
 800a146:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a148:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a14a:	eba3 020a 	sub.w	r2, r3, sl
 800a14e:	eba3 0901 	sub.w	r9, r3, r1
 800a152:	4591      	cmp	r9, r2
 800a154:	bfa8      	it	ge
 800a156:	4691      	movge	r9, r2
 800a158:	f1b9 0f00 	cmp.w	r9, #0
 800a15c:	dc34      	bgt.n	800a1c8 <_printf_float+0x39c>
 800a15e:	f04f 0800 	mov.w	r8, #0
 800a162:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a166:	f104 0a1a 	add.w	sl, r4, #26
 800a16a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a16e:	1a9b      	subs	r3, r3, r2
 800a170:	eba3 0309 	sub.w	r3, r3, r9
 800a174:	4543      	cmp	r3, r8
 800a176:	f77f af7a 	ble.w	800a06e <_printf_float+0x242>
 800a17a:	2301      	movs	r3, #1
 800a17c:	4652      	mov	r2, sl
 800a17e:	4631      	mov	r1, r6
 800a180:	4628      	mov	r0, r5
 800a182:	47b8      	blx	r7
 800a184:	3001      	adds	r0, #1
 800a186:	f43f aeac 	beq.w	8009ee2 <_printf_float+0xb6>
 800a18a:	f108 0801 	add.w	r8, r8, #1
 800a18e:	e7ec      	b.n	800a16a <_printf_float+0x33e>
 800a190:	4613      	mov	r3, r2
 800a192:	4631      	mov	r1, r6
 800a194:	4642      	mov	r2, r8
 800a196:	4628      	mov	r0, r5
 800a198:	47b8      	blx	r7
 800a19a:	3001      	adds	r0, #1
 800a19c:	d1c0      	bne.n	800a120 <_printf_float+0x2f4>
 800a19e:	e6a0      	b.n	8009ee2 <_printf_float+0xb6>
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	4631      	mov	r1, r6
 800a1a4:	4628      	mov	r0, r5
 800a1a6:	920b      	str	r2, [sp, #44]	; 0x2c
 800a1a8:	47b8      	blx	r7
 800a1aa:	3001      	adds	r0, #1
 800a1ac:	f43f ae99 	beq.w	8009ee2 <_printf_float+0xb6>
 800a1b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a1b2:	f10b 0b01 	add.w	fp, fp, #1
 800a1b6:	e7b9      	b.n	800a12c <_printf_float+0x300>
 800a1b8:	4631      	mov	r1, r6
 800a1ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1be:	4628      	mov	r0, r5
 800a1c0:	47b8      	blx	r7
 800a1c2:	3001      	adds	r0, #1
 800a1c4:	d1bf      	bne.n	800a146 <_printf_float+0x31a>
 800a1c6:	e68c      	b.n	8009ee2 <_printf_float+0xb6>
 800a1c8:	464b      	mov	r3, r9
 800a1ca:	4631      	mov	r1, r6
 800a1cc:	4628      	mov	r0, r5
 800a1ce:	eb08 020a 	add.w	r2, r8, sl
 800a1d2:	47b8      	blx	r7
 800a1d4:	3001      	adds	r0, #1
 800a1d6:	d1c2      	bne.n	800a15e <_printf_float+0x332>
 800a1d8:	e683      	b.n	8009ee2 <_printf_float+0xb6>
 800a1da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a1dc:	2a01      	cmp	r2, #1
 800a1de:	dc01      	bgt.n	800a1e4 <_printf_float+0x3b8>
 800a1e0:	07db      	lsls	r3, r3, #31
 800a1e2:	d537      	bpl.n	800a254 <_printf_float+0x428>
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	4642      	mov	r2, r8
 800a1e8:	4631      	mov	r1, r6
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	47b8      	blx	r7
 800a1ee:	3001      	adds	r0, #1
 800a1f0:	f43f ae77 	beq.w	8009ee2 <_printf_float+0xb6>
 800a1f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1f8:	4631      	mov	r1, r6
 800a1fa:	4628      	mov	r0, r5
 800a1fc:	47b8      	blx	r7
 800a1fe:	3001      	adds	r0, #1
 800a200:	f43f ae6f 	beq.w	8009ee2 <_printf_float+0xb6>
 800a204:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a208:	2200      	movs	r2, #0
 800a20a:	2300      	movs	r3, #0
 800a20c:	f7f6 fbcc 	bl	80009a8 <__aeabi_dcmpeq>
 800a210:	b9d8      	cbnz	r0, 800a24a <_printf_float+0x41e>
 800a212:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a214:	f108 0201 	add.w	r2, r8, #1
 800a218:	3b01      	subs	r3, #1
 800a21a:	4631      	mov	r1, r6
 800a21c:	4628      	mov	r0, r5
 800a21e:	47b8      	blx	r7
 800a220:	3001      	adds	r0, #1
 800a222:	d10e      	bne.n	800a242 <_printf_float+0x416>
 800a224:	e65d      	b.n	8009ee2 <_printf_float+0xb6>
 800a226:	2301      	movs	r3, #1
 800a228:	464a      	mov	r2, r9
 800a22a:	4631      	mov	r1, r6
 800a22c:	4628      	mov	r0, r5
 800a22e:	47b8      	blx	r7
 800a230:	3001      	adds	r0, #1
 800a232:	f43f ae56 	beq.w	8009ee2 <_printf_float+0xb6>
 800a236:	f108 0801 	add.w	r8, r8, #1
 800a23a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a23c:	3b01      	subs	r3, #1
 800a23e:	4543      	cmp	r3, r8
 800a240:	dcf1      	bgt.n	800a226 <_printf_float+0x3fa>
 800a242:	4653      	mov	r3, sl
 800a244:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a248:	e6e0      	b.n	800a00c <_printf_float+0x1e0>
 800a24a:	f04f 0800 	mov.w	r8, #0
 800a24e:	f104 091a 	add.w	r9, r4, #26
 800a252:	e7f2      	b.n	800a23a <_printf_float+0x40e>
 800a254:	2301      	movs	r3, #1
 800a256:	4642      	mov	r2, r8
 800a258:	e7df      	b.n	800a21a <_printf_float+0x3ee>
 800a25a:	2301      	movs	r3, #1
 800a25c:	464a      	mov	r2, r9
 800a25e:	4631      	mov	r1, r6
 800a260:	4628      	mov	r0, r5
 800a262:	47b8      	blx	r7
 800a264:	3001      	adds	r0, #1
 800a266:	f43f ae3c 	beq.w	8009ee2 <_printf_float+0xb6>
 800a26a:	f108 0801 	add.w	r8, r8, #1
 800a26e:	68e3      	ldr	r3, [r4, #12]
 800a270:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a272:	1a5b      	subs	r3, r3, r1
 800a274:	4543      	cmp	r3, r8
 800a276:	dcf0      	bgt.n	800a25a <_printf_float+0x42e>
 800a278:	e6fd      	b.n	800a076 <_printf_float+0x24a>
 800a27a:	f04f 0800 	mov.w	r8, #0
 800a27e:	f104 0919 	add.w	r9, r4, #25
 800a282:	e7f4      	b.n	800a26e <_printf_float+0x442>

0800a284 <_printf_common>:
 800a284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a288:	4616      	mov	r6, r2
 800a28a:	4699      	mov	r9, r3
 800a28c:	688a      	ldr	r2, [r1, #8]
 800a28e:	690b      	ldr	r3, [r1, #16]
 800a290:	4607      	mov	r7, r0
 800a292:	4293      	cmp	r3, r2
 800a294:	bfb8      	it	lt
 800a296:	4613      	movlt	r3, r2
 800a298:	6033      	str	r3, [r6, #0]
 800a29a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a29e:	460c      	mov	r4, r1
 800a2a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a2a4:	b10a      	cbz	r2, 800a2aa <_printf_common+0x26>
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	6033      	str	r3, [r6, #0]
 800a2aa:	6823      	ldr	r3, [r4, #0]
 800a2ac:	0699      	lsls	r1, r3, #26
 800a2ae:	bf42      	ittt	mi
 800a2b0:	6833      	ldrmi	r3, [r6, #0]
 800a2b2:	3302      	addmi	r3, #2
 800a2b4:	6033      	strmi	r3, [r6, #0]
 800a2b6:	6825      	ldr	r5, [r4, #0]
 800a2b8:	f015 0506 	ands.w	r5, r5, #6
 800a2bc:	d106      	bne.n	800a2cc <_printf_common+0x48>
 800a2be:	f104 0a19 	add.w	sl, r4, #25
 800a2c2:	68e3      	ldr	r3, [r4, #12]
 800a2c4:	6832      	ldr	r2, [r6, #0]
 800a2c6:	1a9b      	subs	r3, r3, r2
 800a2c8:	42ab      	cmp	r3, r5
 800a2ca:	dc28      	bgt.n	800a31e <_printf_common+0x9a>
 800a2cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a2d0:	1e13      	subs	r3, r2, #0
 800a2d2:	6822      	ldr	r2, [r4, #0]
 800a2d4:	bf18      	it	ne
 800a2d6:	2301      	movne	r3, #1
 800a2d8:	0692      	lsls	r2, r2, #26
 800a2da:	d42d      	bmi.n	800a338 <_printf_common+0xb4>
 800a2dc:	4649      	mov	r1, r9
 800a2de:	4638      	mov	r0, r7
 800a2e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2e4:	47c0      	blx	r8
 800a2e6:	3001      	adds	r0, #1
 800a2e8:	d020      	beq.n	800a32c <_printf_common+0xa8>
 800a2ea:	6823      	ldr	r3, [r4, #0]
 800a2ec:	68e5      	ldr	r5, [r4, #12]
 800a2ee:	f003 0306 	and.w	r3, r3, #6
 800a2f2:	2b04      	cmp	r3, #4
 800a2f4:	bf18      	it	ne
 800a2f6:	2500      	movne	r5, #0
 800a2f8:	6832      	ldr	r2, [r6, #0]
 800a2fa:	f04f 0600 	mov.w	r6, #0
 800a2fe:	68a3      	ldr	r3, [r4, #8]
 800a300:	bf08      	it	eq
 800a302:	1aad      	subeq	r5, r5, r2
 800a304:	6922      	ldr	r2, [r4, #16]
 800a306:	bf08      	it	eq
 800a308:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a30c:	4293      	cmp	r3, r2
 800a30e:	bfc4      	itt	gt
 800a310:	1a9b      	subgt	r3, r3, r2
 800a312:	18ed      	addgt	r5, r5, r3
 800a314:	341a      	adds	r4, #26
 800a316:	42b5      	cmp	r5, r6
 800a318:	d11a      	bne.n	800a350 <_printf_common+0xcc>
 800a31a:	2000      	movs	r0, #0
 800a31c:	e008      	b.n	800a330 <_printf_common+0xac>
 800a31e:	2301      	movs	r3, #1
 800a320:	4652      	mov	r2, sl
 800a322:	4649      	mov	r1, r9
 800a324:	4638      	mov	r0, r7
 800a326:	47c0      	blx	r8
 800a328:	3001      	adds	r0, #1
 800a32a:	d103      	bne.n	800a334 <_printf_common+0xb0>
 800a32c:	f04f 30ff 	mov.w	r0, #4294967295
 800a330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a334:	3501      	adds	r5, #1
 800a336:	e7c4      	b.n	800a2c2 <_printf_common+0x3e>
 800a338:	2030      	movs	r0, #48	; 0x30
 800a33a:	18e1      	adds	r1, r4, r3
 800a33c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a340:	1c5a      	adds	r2, r3, #1
 800a342:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a346:	4422      	add	r2, r4
 800a348:	3302      	adds	r3, #2
 800a34a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a34e:	e7c5      	b.n	800a2dc <_printf_common+0x58>
 800a350:	2301      	movs	r3, #1
 800a352:	4622      	mov	r2, r4
 800a354:	4649      	mov	r1, r9
 800a356:	4638      	mov	r0, r7
 800a358:	47c0      	blx	r8
 800a35a:	3001      	adds	r0, #1
 800a35c:	d0e6      	beq.n	800a32c <_printf_common+0xa8>
 800a35e:	3601      	adds	r6, #1
 800a360:	e7d9      	b.n	800a316 <_printf_common+0x92>
	...

0800a364 <_printf_i>:
 800a364:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a368:	7e0f      	ldrb	r7, [r1, #24]
 800a36a:	4691      	mov	r9, r2
 800a36c:	2f78      	cmp	r7, #120	; 0x78
 800a36e:	4680      	mov	r8, r0
 800a370:	460c      	mov	r4, r1
 800a372:	469a      	mov	sl, r3
 800a374:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a376:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a37a:	d807      	bhi.n	800a38c <_printf_i+0x28>
 800a37c:	2f62      	cmp	r7, #98	; 0x62
 800a37e:	d80a      	bhi.n	800a396 <_printf_i+0x32>
 800a380:	2f00      	cmp	r7, #0
 800a382:	f000 80d9 	beq.w	800a538 <_printf_i+0x1d4>
 800a386:	2f58      	cmp	r7, #88	; 0x58
 800a388:	f000 80a4 	beq.w	800a4d4 <_printf_i+0x170>
 800a38c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a390:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a394:	e03a      	b.n	800a40c <_printf_i+0xa8>
 800a396:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a39a:	2b15      	cmp	r3, #21
 800a39c:	d8f6      	bhi.n	800a38c <_printf_i+0x28>
 800a39e:	a101      	add	r1, pc, #4	; (adr r1, 800a3a4 <_printf_i+0x40>)
 800a3a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a3a4:	0800a3fd 	.word	0x0800a3fd
 800a3a8:	0800a411 	.word	0x0800a411
 800a3ac:	0800a38d 	.word	0x0800a38d
 800a3b0:	0800a38d 	.word	0x0800a38d
 800a3b4:	0800a38d 	.word	0x0800a38d
 800a3b8:	0800a38d 	.word	0x0800a38d
 800a3bc:	0800a411 	.word	0x0800a411
 800a3c0:	0800a38d 	.word	0x0800a38d
 800a3c4:	0800a38d 	.word	0x0800a38d
 800a3c8:	0800a38d 	.word	0x0800a38d
 800a3cc:	0800a38d 	.word	0x0800a38d
 800a3d0:	0800a51f 	.word	0x0800a51f
 800a3d4:	0800a441 	.word	0x0800a441
 800a3d8:	0800a501 	.word	0x0800a501
 800a3dc:	0800a38d 	.word	0x0800a38d
 800a3e0:	0800a38d 	.word	0x0800a38d
 800a3e4:	0800a541 	.word	0x0800a541
 800a3e8:	0800a38d 	.word	0x0800a38d
 800a3ec:	0800a441 	.word	0x0800a441
 800a3f0:	0800a38d 	.word	0x0800a38d
 800a3f4:	0800a38d 	.word	0x0800a38d
 800a3f8:	0800a509 	.word	0x0800a509
 800a3fc:	682b      	ldr	r3, [r5, #0]
 800a3fe:	1d1a      	adds	r2, r3, #4
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	602a      	str	r2, [r5, #0]
 800a404:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a408:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a40c:	2301      	movs	r3, #1
 800a40e:	e0a4      	b.n	800a55a <_printf_i+0x1f6>
 800a410:	6820      	ldr	r0, [r4, #0]
 800a412:	6829      	ldr	r1, [r5, #0]
 800a414:	0606      	lsls	r6, r0, #24
 800a416:	f101 0304 	add.w	r3, r1, #4
 800a41a:	d50a      	bpl.n	800a432 <_printf_i+0xce>
 800a41c:	680e      	ldr	r6, [r1, #0]
 800a41e:	602b      	str	r3, [r5, #0]
 800a420:	2e00      	cmp	r6, #0
 800a422:	da03      	bge.n	800a42c <_printf_i+0xc8>
 800a424:	232d      	movs	r3, #45	; 0x2d
 800a426:	4276      	negs	r6, r6
 800a428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a42c:	230a      	movs	r3, #10
 800a42e:	485e      	ldr	r0, [pc, #376]	; (800a5a8 <_printf_i+0x244>)
 800a430:	e019      	b.n	800a466 <_printf_i+0x102>
 800a432:	680e      	ldr	r6, [r1, #0]
 800a434:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a438:	602b      	str	r3, [r5, #0]
 800a43a:	bf18      	it	ne
 800a43c:	b236      	sxthne	r6, r6
 800a43e:	e7ef      	b.n	800a420 <_printf_i+0xbc>
 800a440:	682b      	ldr	r3, [r5, #0]
 800a442:	6820      	ldr	r0, [r4, #0]
 800a444:	1d19      	adds	r1, r3, #4
 800a446:	6029      	str	r1, [r5, #0]
 800a448:	0601      	lsls	r1, r0, #24
 800a44a:	d501      	bpl.n	800a450 <_printf_i+0xec>
 800a44c:	681e      	ldr	r6, [r3, #0]
 800a44e:	e002      	b.n	800a456 <_printf_i+0xf2>
 800a450:	0646      	lsls	r6, r0, #25
 800a452:	d5fb      	bpl.n	800a44c <_printf_i+0xe8>
 800a454:	881e      	ldrh	r6, [r3, #0]
 800a456:	2f6f      	cmp	r7, #111	; 0x6f
 800a458:	bf0c      	ite	eq
 800a45a:	2308      	moveq	r3, #8
 800a45c:	230a      	movne	r3, #10
 800a45e:	4852      	ldr	r0, [pc, #328]	; (800a5a8 <_printf_i+0x244>)
 800a460:	2100      	movs	r1, #0
 800a462:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a466:	6865      	ldr	r5, [r4, #4]
 800a468:	2d00      	cmp	r5, #0
 800a46a:	bfa8      	it	ge
 800a46c:	6821      	ldrge	r1, [r4, #0]
 800a46e:	60a5      	str	r5, [r4, #8]
 800a470:	bfa4      	itt	ge
 800a472:	f021 0104 	bicge.w	r1, r1, #4
 800a476:	6021      	strge	r1, [r4, #0]
 800a478:	b90e      	cbnz	r6, 800a47e <_printf_i+0x11a>
 800a47a:	2d00      	cmp	r5, #0
 800a47c:	d04d      	beq.n	800a51a <_printf_i+0x1b6>
 800a47e:	4615      	mov	r5, r2
 800a480:	fbb6 f1f3 	udiv	r1, r6, r3
 800a484:	fb03 6711 	mls	r7, r3, r1, r6
 800a488:	5dc7      	ldrb	r7, [r0, r7]
 800a48a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a48e:	4637      	mov	r7, r6
 800a490:	42bb      	cmp	r3, r7
 800a492:	460e      	mov	r6, r1
 800a494:	d9f4      	bls.n	800a480 <_printf_i+0x11c>
 800a496:	2b08      	cmp	r3, #8
 800a498:	d10b      	bne.n	800a4b2 <_printf_i+0x14e>
 800a49a:	6823      	ldr	r3, [r4, #0]
 800a49c:	07de      	lsls	r6, r3, #31
 800a49e:	d508      	bpl.n	800a4b2 <_printf_i+0x14e>
 800a4a0:	6923      	ldr	r3, [r4, #16]
 800a4a2:	6861      	ldr	r1, [r4, #4]
 800a4a4:	4299      	cmp	r1, r3
 800a4a6:	bfde      	ittt	le
 800a4a8:	2330      	movle	r3, #48	; 0x30
 800a4aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a4ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a4b2:	1b52      	subs	r2, r2, r5
 800a4b4:	6122      	str	r2, [r4, #16]
 800a4b6:	464b      	mov	r3, r9
 800a4b8:	4621      	mov	r1, r4
 800a4ba:	4640      	mov	r0, r8
 800a4bc:	f8cd a000 	str.w	sl, [sp]
 800a4c0:	aa03      	add	r2, sp, #12
 800a4c2:	f7ff fedf 	bl	800a284 <_printf_common>
 800a4c6:	3001      	adds	r0, #1
 800a4c8:	d14c      	bne.n	800a564 <_printf_i+0x200>
 800a4ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ce:	b004      	add	sp, #16
 800a4d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4d4:	4834      	ldr	r0, [pc, #208]	; (800a5a8 <_printf_i+0x244>)
 800a4d6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a4da:	6829      	ldr	r1, [r5, #0]
 800a4dc:	6823      	ldr	r3, [r4, #0]
 800a4de:	f851 6b04 	ldr.w	r6, [r1], #4
 800a4e2:	6029      	str	r1, [r5, #0]
 800a4e4:	061d      	lsls	r5, r3, #24
 800a4e6:	d514      	bpl.n	800a512 <_printf_i+0x1ae>
 800a4e8:	07df      	lsls	r7, r3, #31
 800a4ea:	bf44      	itt	mi
 800a4ec:	f043 0320 	orrmi.w	r3, r3, #32
 800a4f0:	6023      	strmi	r3, [r4, #0]
 800a4f2:	b91e      	cbnz	r6, 800a4fc <_printf_i+0x198>
 800a4f4:	6823      	ldr	r3, [r4, #0]
 800a4f6:	f023 0320 	bic.w	r3, r3, #32
 800a4fa:	6023      	str	r3, [r4, #0]
 800a4fc:	2310      	movs	r3, #16
 800a4fe:	e7af      	b.n	800a460 <_printf_i+0xfc>
 800a500:	6823      	ldr	r3, [r4, #0]
 800a502:	f043 0320 	orr.w	r3, r3, #32
 800a506:	6023      	str	r3, [r4, #0]
 800a508:	2378      	movs	r3, #120	; 0x78
 800a50a:	4828      	ldr	r0, [pc, #160]	; (800a5ac <_printf_i+0x248>)
 800a50c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a510:	e7e3      	b.n	800a4da <_printf_i+0x176>
 800a512:	0659      	lsls	r1, r3, #25
 800a514:	bf48      	it	mi
 800a516:	b2b6      	uxthmi	r6, r6
 800a518:	e7e6      	b.n	800a4e8 <_printf_i+0x184>
 800a51a:	4615      	mov	r5, r2
 800a51c:	e7bb      	b.n	800a496 <_printf_i+0x132>
 800a51e:	682b      	ldr	r3, [r5, #0]
 800a520:	6826      	ldr	r6, [r4, #0]
 800a522:	1d18      	adds	r0, r3, #4
 800a524:	6961      	ldr	r1, [r4, #20]
 800a526:	6028      	str	r0, [r5, #0]
 800a528:	0635      	lsls	r5, r6, #24
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	d501      	bpl.n	800a532 <_printf_i+0x1ce>
 800a52e:	6019      	str	r1, [r3, #0]
 800a530:	e002      	b.n	800a538 <_printf_i+0x1d4>
 800a532:	0670      	lsls	r0, r6, #25
 800a534:	d5fb      	bpl.n	800a52e <_printf_i+0x1ca>
 800a536:	8019      	strh	r1, [r3, #0]
 800a538:	2300      	movs	r3, #0
 800a53a:	4615      	mov	r5, r2
 800a53c:	6123      	str	r3, [r4, #16]
 800a53e:	e7ba      	b.n	800a4b6 <_printf_i+0x152>
 800a540:	682b      	ldr	r3, [r5, #0]
 800a542:	2100      	movs	r1, #0
 800a544:	1d1a      	adds	r2, r3, #4
 800a546:	602a      	str	r2, [r5, #0]
 800a548:	681d      	ldr	r5, [r3, #0]
 800a54a:	6862      	ldr	r2, [r4, #4]
 800a54c:	4628      	mov	r0, r5
 800a54e:	f002 faed 	bl	800cb2c <memchr>
 800a552:	b108      	cbz	r0, 800a558 <_printf_i+0x1f4>
 800a554:	1b40      	subs	r0, r0, r5
 800a556:	6060      	str	r0, [r4, #4]
 800a558:	6863      	ldr	r3, [r4, #4]
 800a55a:	6123      	str	r3, [r4, #16]
 800a55c:	2300      	movs	r3, #0
 800a55e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a562:	e7a8      	b.n	800a4b6 <_printf_i+0x152>
 800a564:	462a      	mov	r2, r5
 800a566:	4649      	mov	r1, r9
 800a568:	4640      	mov	r0, r8
 800a56a:	6923      	ldr	r3, [r4, #16]
 800a56c:	47d0      	blx	sl
 800a56e:	3001      	adds	r0, #1
 800a570:	d0ab      	beq.n	800a4ca <_printf_i+0x166>
 800a572:	6823      	ldr	r3, [r4, #0]
 800a574:	079b      	lsls	r3, r3, #30
 800a576:	d413      	bmi.n	800a5a0 <_printf_i+0x23c>
 800a578:	68e0      	ldr	r0, [r4, #12]
 800a57a:	9b03      	ldr	r3, [sp, #12]
 800a57c:	4298      	cmp	r0, r3
 800a57e:	bfb8      	it	lt
 800a580:	4618      	movlt	r0, r3
 800a582:	e7a4      	b.n	800a4ce <_printf_i+0x16a>
 800a584:	2301      	movs	r3, #1
 800a586:	4632      	mov	r2, r6
 800a588:	4649      	mov	r1, r9
 800a58a:	4640      	mov	r0, r8
 800a58c:	47d0      	blx	sl
 800a58e:	3001      	adds	r0, #1
 800a590:	d09b      	beq.n	800a4ca <_printf_i+0x166>
 800a592:	3501      	adds	r5, #1
 800a594:	68e3      	ldr	r3, [r4, #12]
 800a596:	9903      	ldr	r1, [sp, #12]
 800a598:	1a5b      	subs	r3, r3, r1
 800a59a:	42ab      	cmp	r3, r5
 800a59c:	dcf2      	bgt.n	800a584 <_printf_i+0x220>
 800a59e:	e7eb      	b.n	800a578 <_printf_i+0x214>
 800a5a0:	2500      	movs	r5, #0
 800a5a2:	f104 0619 	add.w	r6, r4, #25
 800a5a6:	e7f5      	b.n	800a594 <_printf_i+0x230>
 800a5a8:	0800e61a 	.word	0x0800e61a
 800a5ac:	0800e62b 	.word	0x0800e62b

0800a5b0 <_scanf_float>:
 800a5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b4:	b087      	sub	sp, #28
 800a5b6:	9303      	str	r3, [sp, #12]
 800a5b8:	688b      	ldr	r3, [r1, #8]
 800a5ba:	4617      	mov	r7, r2
 800a5bc:	1e5a      	subs	r2, r3, #1
 800a5be:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a5c2:	bf85      	ittet	hi
 800a5c4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a5c8:	195b      	addhi	r3, r3, r5
 800a5ca:	2300      	movls	r3, #0
 800a5cc:	9302      	strhi	r3, [sp, #8]
 800a5ce:	bf88      	it	hi
 800a5d0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a5d4:	468b      	mov	fp, r1
 800a5d6:	f04f 0500 	mov.w	r5, #0
 800a5da:	bf8c      	ite	hi
 800a5dc:	608b      	strhi	r3, [r1, #8]
 800a5de:	9302      	strls	r3, [sp, #8]
 800a5e0:	680b      	ldr	r3, [r1, #0]
 800a5e2:	4680      	mov	r8, r0
 800a5e4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a5e8:	f84b 3b1c 	str.w	r3, [fp], #28
 800a5ec:	460c      	mov	r4, r1
 800a5ee:	465e      	mov	r6, fp
 800a5f0:	46aa      	mov	sl, r5
 800a5f2:	46a9      	mov	r9, r5
 800a5f4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a5f8:	9501      	str	r5, [sp, #4]
 800a5fa:	68a2      	ldr	r2, [r4, #8]
 800a5fc:	b152      	cbz	r2, 800a614 <_scanf_float+0x64>
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	2b4e      	cmp	r3, #78	; 0x4e
 800a604:	d864      	bhi.n	800a6d0 <_scanf_float+0x120>
 800a606:	2b40      	cmp	r3, #64	; 0x40
 800a608:	d83c      	bhi.n	800a684 <_scanf_float+0xd4>
 800a60a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a60e:	b2c8      	uxtb	r0, r1
 800a610:	280e      	cmp	r0, #14
 800a612:	d93a      	bls.n	800a68a <_scanf_float+0xda>
 800a614:	f1b9 0f00 	cmp.w	r9, #0
 800a618:	d003      	beq.n	800a622 <_scanf_float+0x72>
 800a61a:	6823      	ldr	r3, [r4, #0]
 800a61c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a620:	6023      	str	r3, [r4, #0]
 800a622:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a626:	f1ba 0f01 	cmp.w	sl, #1
 800a62a:	f200 8113 	bhi.w	800a854 <_scanf_float+0x2a4>
 800a62e:	455e      	cmp	r6, fp
 800a630:	f200 8105 	bhi.w	800a83e <_scanf_float+0x28e>
 800a634:	2501      	movs	r5, #1
 800a636:	4628      	mov	r0, r5
 800a638:	b007      	add	sp, #28
 800a63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a63e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a642:	2a0d      	cmp	r2, #13
 800a644:	d8e6      	bhi.n	800a614 <_scanf_float+0x64>
 800a646:	a101      	add	r1, pc, #4	; (adr r1, 800a64c <_scanf_float+0x9c>)
 800a648:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a64c:	0800a78b 	.word	0x0800a78b
 800a650:	0800a615 	.word	0x0800a615
 800a654:	0800a615 	.word	0x0800a615
 800a658:	0800a615 	.word	0x0800a615
 800a65c:	0800a7eb 	.word	0x0800a7eb
 800a660:	0800a7c3 	.word	0x0800a7c3
 800a664:	0800a615 	.word	0x0800a615
 800a668:	0800a615 	.word	0x0800a615
 800a66c:	0800a799 	.word	0x0800a799
 800a670:	0800a615 	.word	0x0800a615
 800a674:	0800a615 	.word	0x0800a615
 800a678:	0800a615 	.word	0x0800a615
 800a67c:	0800a615 	.word	0x0800a615
 800a680:	0800a751 	.word	0x0800a751
 800a684:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a688:	e7db      	b.n	800a642 <_scanf_float+0x92>
 800a68a:	290e      	cmp	r1, #14
 800a68c:	d8c2      	bhi.n	800a614 <_scanf_float+0x64>
 800a68e:	a001      	add	r0, pc, #4	; (adr r0, 800a694 <_scanf_float+0xe4>)
 800a690:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a694:	0800a743 	.word	0x0800a743
 800a698:	0800a615 	.word	0x0800a615
 800a69c:	0800a743 	.word	0x0800a743
 800a6a0:	0800a7d7 	.word	0x0800a7d7
 800a6a4:	0800a615 	.word	0x0800a615
 800a6a8:	0800a6f1 	.word	0x0800a6f1
 800a6ac:	0800a72d 	.word	0x0800a72d
 800a6b0:	0800a72d 	.word	0x0800a72d
 800a6b4:	0800a72d 	.word	0x0800a72d
 800a6b8:	0800a72d 	.word	0x0800a72d
 800a6bc:	0800a72d 	.word	0x0800a72d
 800a6c0:	0800a72d 	.word	0x0800a72d
 800a6c4:	0800a72d 	.word	0x0800a72d
 800a6c8:	0800a72d 	.word	0x0800a72d
 800a6cc:	0800a72d 	.word	0x0800a72d
 800a6d0:	2b6e      	cmp	r3, #110	; 0x6e
 800a6d2:	d809      	bhi.n	800a6e8 <_scanf_float+0x138>
 800a6d4:	2b60      	cmp	r3, #96	; 0x60
 800a6d6:	d8b2      	bhi.n	800a63e <_scanf_float+0x8e>
 800a6d8:	2b54      	cmp	r3, #84	; 0x54
 800a6da:	d077      	beq.n	800a7cc <_scanf_float+0x21c>
 800a6dc:	2b59      	cmp	r3, #89	; 0x59
 800a6de:	d199      	bne.n	800a614 <_scanf_float+0x64>
 800a6e0:	2d07      	cmp	r5, #7
 800a6e2:	d197      	bne.n	800a614 <_scanf_float+0x64>
 800a6e4:	2508      	movs	r5, #8
 800a6e6:	e029      	b.n	800a73c <_scanf_float+0x18c>
 800a6e8:	2b74      	cmp	r3, #116	; 0x74
 800a6ea:	d06f      	beq.n	800a7cc <_scanf_float+0x21c>
 800a6ec:	2b79      	cmp	r3, #121	; 0x79
 800a6ee:	e7f6      	b.n	800a6de <_scanf_float+0x12e>
 800a6f0:	6821      	ldr	r1, [r4, #0]
 800a6f2:	05c8      	lsls	r0, r1, #23
 800a6f4:	d51a      	bpl.n	800a72c <_scanf_float+0x17c>
 800a6f6:	9b02      	ldr	r3, [sp, #8]
 800a6f8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a6fc:	6021      	str	r1, [r4, #0]
 800a6fe:	f109 0901 	add.w	r9, r9, #1
 800a702:	b11b      	cbz	r3, 800a70c <_scanf_float+0x15c>
 800a704:	3b01      	subs	r3, #1
 800a706:	3201      	adds	r2, #1
 800a708:	9302      	str	r3, [sp, #8]
 800a70a:	60a2      	str	r2, [r4, #8]
 800a70c:	68a3      	ldr	r3, [r4, #8]
 800a70e:	3b01      	subs	r3, #1
 800a710:	60a3      	str	r3, [r4, #8]
 800a712:	6923      	ldr	r3, [r4, #16]
 800a714:	3301      	adds	r3, #1
 800a716:	6123      	str	r3, [r4, #16]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	3b01      	subs	r3, #1
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	607b      	str	r3, [r7, #4]
 800a720:	f340 8084 	ble.w	800a82c <_scanf_float+0x27c>
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	3301      	adds	r3, #1
 800a728:	603b      	str	r3, [r7, #0]
 800a72a:	e766      	b.n	800a5fa <_scanf_float+0x4a>
 800a72c:	eb1a 0f05 	cmn.w	sl, r5
 800a730:	f47f af70 	bne.w	800a614 <_scanf_float+0x64>
 800a734:	6822      	ldr	r2, [r4, #0]
 800a736:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a73a:	6022      	str	r2, [r4, #0]
 800a73c:	f806 3b01 	strb.w	r3, [r6], #1
 800a740:	e7e4      	b.n	800a70c <_scanf_float+0x15c>
 800a742:	6822      	ldr	r2, [r4, #0]
 800a744:	0610      	lsls	r0, r2, #24
 800a746:	f57f af65 	bpl.w	800a614 <_scanf_float+0x64>
 800a74a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a74e:	e7f4      	b.n	800a73a <_scanf_float+0x18a>
 800a750:	f1ba 0f00 	cmp.w	sl, #0
 800a754:	d10e      	bne.n	800a774 <_scanf_float+0x1c4>
 800a756:	f1b9 0f00 	cmp.w	r9, #0
 800a75a:	d10e      	bne.n	800a77a <_scanf_float+0x1ca>
 800a75c:	6822      	ldr	r2, [r4, #0]
 800a75e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a762:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a766:	d108      	bne.n	800a77a <_scanf_float+0x1ca>
 800a768:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a76c:	f04f 0a01 	mov.w	sl, #1
 800a770:	6022      	str	r2, [r4, #0]
 800a772:	e7e3      	b.n	800a73c <_scanf_float+0x18c>
 800a774:	f1ba 0f02 	cmp.w	sl, #2
 800a778:	d055      	beq.n	800a826 <_scanf_float+0x276>
 800a77a:	2d01      	cmp	r5, #1
 800a77c:	d002      	beq.n	800a784 <_scanf_float+0x1d4>
 800a77e:	2d04      	cmp	r5, #4
 800a780:	f47f af48 	bne.w	800a614 <_scanf_float+0x64>
 800a784:	3501      	adds	r5, #1
 800a786:	b2ed      	uxtb	r5, r5
 800a788:	e7d8      	b.n	800a73c <_scanf_float+0x18c>
 800a78a:	f1ba 0f01 	cmp.w	sl, #1
 800a78e:	f47f af41 	bne.w	800a614 <_scanf_float+0x64>
 800a792:	f04f 0a02 	mov.w	sl, #2
 800a796:	e7d1      	b.n	800a73c <_scanf_float+0x18c>
 800a798:	b97d      	cbnz	r5, 800a7ba <_scanf_float+0x20a>
 800a79a:	f1b9 0f00 	cmp.w	r9, #0
 800a79e:	f47f af3c 	bne.w	800a61a <_scanf_float+0x6a>
 800a7a2:	6822      	ldr	r2, [r4, #0]
 800a7a4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a7a8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a7ac:	f47f af39 	bne.w	800a622 <_scanf_float+0x72>
 800a7b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a7b4:	2501      	movs	r5, #1
 800a7b6:	6022      	str	r2, [r4, #0]
 800a7b8:	e7c0      	b.n	800a73c <_scanf_float+0x18c>
 800a7ba:	2d03      	cmp	r5, #3
 800a7bc:	d0e2      	beq.n	800a784 <_scanf_float+0x1d4>
 800a7be:	2d05      	cmp	r5, #5
 800a7c0:	e7de      	b.n	800a780 <_scanf_float+0x1d0>
 800a7c2:	2d02      	cmp	r5, #2
 800a7c4:	f47f af26 	bne.w	800a614 <_scanf_float+0x64>
 800a7c8:	2503      	movs	r5, #3
 800a7ca:	e7b7      	b.n	800a73c <_scanf_float+0x18c>
 800a7cc:	2d06      	cmp	r5, #6
 800a7ce:	f47f af21 	bne.w	800a614 <_scanf_float+0x64>
 800a7d2:	2507      	movs	r5, #7
 800a7d4:	e7b2      	b.n	800a73c <_scanf_float+0x18c>
 800a7d6:	6822      	ldr	r2, [r4, #0]
 800a7d8:	0591      	lsls	r1, r2, #22
 800a7da:	f57f af1b 	bpl.w	800a614 <_scanf_float+0x64>
 800a7de:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a7e2:	6022      	str	r2, [r4, #0]
 800a7e4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a7e8:	e7a8      	b.n	800a73c <_scanf_float+0x18c>
 800a7ea:	6822      	ldr	r2, [r4, #0]
 800a7ec:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a7f0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a7f4:	d006      	beq.n	800a804 <_scanf_float+0x254>
 800a7f6:	0550      	lsls	r0, r2, #21
 800a7f8:	f57f af0c 	bpl.w	800a614 <_scanf_float+0x64>
 800a7fc:	f1b9 0f00 	cmp.w	r9, #0
 800a800:	f43f af0f 	beq.w	800a622 <_scanf_float+0x72>
 800a804:	0591      	lsls	r1, r2, #22
 800a806:	bf58      	it	pl
 800a808:	9901      	ldrpl	r1, [sp, #4]
 800a80a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a80e:	bf58      	it	pl
 800a810:	eba9 0101 	subpl.w	r1, r9, r1
 800a814:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a818:	f04f 0900 	mov.w	r9, #0
 800a81c:	bf58      	it	pl
 800a81e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a822:	6022      	str	r2, [r4, #0]
 800a824:	e78a      	b.n	800a73c <_scanf_float+0x18c>
 800a826:	f04f 0a03 	mov.w	sl, #3
 800a82a:	e787      	b.n	800a73c <_scanf_float+0x18c>
 800a82c:	4639      	mov	r1, r7
 800a82e:	4640      	mov	r0, r8
 800a830:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a834:	4798      	blx	r3
 800a836:	2800      	cmp	r0, #0
 800a838:	f43f aedf 	beq.w	800a5fa <_scanf_float+0x4a>
 800a83c:	e6ea      	b.n	800a614 <_scanf_float+0x64>
 800a83e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a842:	463a      	mov	r2, r7
 800a844:	4640      	mov	r0, r8
 800a846:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a84a:	4798      	blx	r3
 800a84c:	6923      	ldr	r3, [r4, #16]
 800a84e:	3b01      	subs	r3, #1
 800a850:	6123      	str	r3, [r4, #16]
 800a852:	e6ec      	b.n	800a62e <_scanf_float+0x7e>
 800a854:	1e6b      	subs	r3, r5, #1
 800a856:	2b06      	cmp	r3, #6
 800a858:	d825      	bhi.n	800a8a6 <_scanf_float+0x2f6>
 800a85a:	2d02      	cmp	r5, #2
 800a85c:	d836      	bhi.n	800a8cc <_scanf_float+0x31c>
 800a85e:	455e      	cmp	r6, fp
 800a860:	f67f aee8 	bls.w	800a634 <_scanf_float+0x84>
 800a864:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a868:	463a      	mov	r2, r7
 800a86a:	4640      	mov	r0, r8
 800a86c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a870:	4798      	blx	r3
 800a872:	6923      	ldr	r3, [r4, #16]
 800a874:	3b01      	subs	r3, #1
 800a876:	6123      	str	r3, [r4, #16]
 800a878:	e7f1      	b.n	800a85e <_scanf_float+0x2ae>
 800a87a:	9802      	ldr	r0, [sp, #8]
 800a87c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a880:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a884:	463a      	mov	r2, r7
 800a886:	9002      	str	r0, [sp, #8]
 800a888:	4640      	mov	r0, r8
 800a88a:	4798      	blx	r3
 800a88c:	6923      	ldr	r3, [r4, #16]
 800a88e:	3b01      	subs	r3, #1
 800a890:	6123      	str	r3, [r4, #16]
 800a892:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a896:	fa5f fa8a 	uxtb.w	sl, sl
 800a89a:	f1ba 0f02 	cmp.w	sl, #2
 800a89e:	d1ec      	bne.n	800a87a <_scanf_float+0x2ca>
 800a8a0:	3d03      	subs	r5, #3
 800a8a2:	b2ed      	uxtb	r5, r5
 800a8a4:	1b76      	subs	r6, r6, r5
 800a8a6:	6823      	ldr	r3, [r4, #0]
 800a8a8:	05da      	lsls	r2, r3, #23
 800a8aa:	d52f      	bpl.n	800a90c <_scanf_float+0x35c>
 800a8ac:	055b      	lsls	r3, r3, #21
 800a8ae:	d510      	bpl.n	800a8d2 <_scanf_float+0x322>
 800a8b0:	455e      	cmp	r6, fp
 800a8b2:	f67f aebf 	bls.w	800a634 <_scanf_float+0x84>
 800a8b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a8ba:	463a      	mov	r2, r7
 800a8bc:	4640      	mov	r0, r8
 800a8be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a8c2:	4798      	blx	r3
 800a8c4:	6923      	ldr	r3, [r4, #16]
 800a8c6:	3b01      	subs	r3, #1
 800a8c8:	6123      	str	r3, [r4, #16]
 800a8ca:	e7f1      	b.n	800a8b0 <_scanf_float+0x300>
 800a8cc:	46aa      	mov	sl, r5
 800a8ce:	9602      	str	r6, [sp, #8]
 800a8d0:	e7df      	b.n	800a892 <_scanf_float+0x2e2>
 800a8d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a8d6:	6923      	ldr	r3, [r4, #16]
 800a8d8:	2965      	cmp	r1, #101	; 0x65
 800a8da:	f103 33ff 	add.w	r3, r3, #4294967295
 800a8de:	f106 35ff 	add.w	r5, r6, #4294967295
 800a8e2:	6123      	str	r3, [r4, #16]
 800a8e4:	d00c      	beq.n	800a900 <_scanf_float+0x350>
 800a8e6:	2945      	cmp	r1, #69	; 0x45
 800a8e8:	d00a      	beq.n	800a900 <_scanf_float+0x350>
 800a8ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a8ee:	463a      	mov	r2, r7
 800a8f0:	4640      	mov	r0, r8
 800a8f2:	4798      	blx	r3
 800a8f4:	6923      	ldr	r3, [r4, #16]
 800a8f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a8fa:	3b01      	subs	r3, #1
 800a8fc:	1eb5      	subs	r5, r6, #2
 800a8fe:	6123      	str	r3, [r4, #16]
 800a900:	463a      	mov	r2, r7
 800a902:	4640      	mov	r0, r8
 800a904:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a908:	4798      	blx	r3
 800a90a:	462e      	mov	r6, r5
 800a90c:	6825      	ldr	r5, [r4, #0]
 800a90e:	f015 0510 	ands.w	r5, r5, #16
 800a912:	d155      	bne.n	800a9c0 <_scanf_float+0x410>
 800a914:	7035      	strb	r5, [r6, #0]
 800a916:	6823      	ldr	r3, [r4, #0]
 800a918:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a91c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a920:	d11b      	bne.n	800a95a <_scanf_float+0x3aa>
 800a922:	9b01      	ldr	r3, [sp, #4]
 800a924:	454b      	cmp	r3, r9
 800a926:	eba3 0209 	sub.w	r2, r3, r9
 800a92a:	d123      	bne.n	800a974 <_scanf_float+0x3c4>
 800a92c:	2200      	movs	r2, #0
 800a92e:	4659      	mov	r1, fp
 800a930:	4640      	mov	r0, r8
 800a932:	f000 fe79 	bl	800b628 <_strtod_r>
 800a936:	6822      	ldr	r2, [r4, #0]
 800a938:	9b03      	ldr	r3, [sp, #12]
 800a93a:	f012 0f02 	tst.w	r2, #2
 800a93e:	4606      	mov	r6, r0
 800a940:	460f      	mov	r7, r1
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	d021      	beq.n	800a98a <_scanf_float+0x3da>
 800a946:	1d1a      	adds	r2, r3, #4
 800a948:	9903      	ldr	r1, [sp, #12]
 800a94a:	600a      	str	r2, [r1, #0]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	e9c3 6700 	strd	r6, r7, [r3]
 800a952:	68e3      	ldr	r3, [r4, #12]
 800a954:	3301      	adds	r3, #1
 800a956:	60e3      	str	r3, [r4, #12]
 800a958:	e66d      	b.n	800a636 <_scanf_float+0x86>
 800a95a:	9b04      	ldr	r3, [sp, #16]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d0e5      	beq.n	800a92c <_scanf_float+0x37c>
 800a960:	9905      	ldr	r1, [sp, #20]
 800a962:	230a      	movs	r3, #10
 800a964:	462a      	mov	r2, r5
 800a966:	4640      	mov	r0, r8
 800a968:	3101      	adds	r1, #1
 800a96a:	f000 fedf 	bl	800b72c <_strtol_r>
 800a96e:	9b04      	ldr	r3, [sp, #16]
 800a970:	9e05      	ldr	r6, [sp, #20]
 800a972:	1ac2      	subs	r2, r0, r3
 800a974:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a978:	429e      	cmp	r6, r3
 800a97a:	bf28      	it	cs
 800a97c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a980:	4630      	mov	r0, r6
 800a982:	4910      	ldr	r1, [pc, #64]	; (800a9c4 <_scanf_float+0x414>)
 800a984:	f000 f826 	bl	800a9d4 <siprintf>
 800a988:	e7d0      	b.n	800a92c <_scanf_float+0x37c>
 800a98a:	f012 0f04 	tst.w	r2, #4
 800a98e:	f103 0204 	add.w	r2, r3, #4
 800a992:	d1d9      	bne.n	800a948 <_scanf_float+0x398>
 800a994:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800a998:	f8cc 2000 	str.w	r2, [ip]
 800a99c:	f8d3 8000 	ldr.w	r8, [r3]
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	460b      	mov	r3, r1
 800a9a4:	f7f6 f832 	bl	8000a0c <__aeabi_dcmpun>
 800a9a8:	b128      	cbz	r0, 800a9b6 <_scanf_float+0x406>
 800a9aa:	4807      	ldr	r0, [pc, #28]	; (800a9c8 <_scanf_float+0x418>)
 800a9ac:	f000 f80e 	bl	800a9cc <nanf>
 800a9b0:	f8c8 0000 	str.w	r0, [r8]
 800a9b4:	e7cd      	b.n	800a952 <_scanf_float+0x3a2>
 800a9b6:	4630      	mov	r0, r6
 800a9b8:	4639      	mov	r1, r7
 800a9ba:	f7f6 f885 	bl	8000ac8 <__aeabi_d2f>
 800a9be:	e7f7      	b.n	800a9b0 <_scanf_float+0x400>
 800a9c0:	2500      	movs	r5, #0
 800a9c2:	e638      	b.n	800a636 <_scanf_float+0x86>
 800a9c4:	0800e63c 	.word	0x0800e63c
 800a9c8:	0800ea48 	.word	0x0800ea48

0800a9cc <nanf>:
 800a9cc:	4800      	ldr	r0, [pc, #0]	; (800a9d0 <nanf+0x4>)
 800a9ce:	4770      	bx	lr
 800a9d0:	7fc00000 	.word	0x7fc00000

0800a9d4 <siprintf>:
 800a9d4:	b40e      	push	{r1, r2, r3}
 800a9d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a9da:	b500      	push	{lr}
 800a9dc:	b09c      	sub	sp, #112	; 0x70
 800a9de:	ab1d      	add	r3, sp, #116	; 0x74
 800a9e0:	9002      	str	r0, [sp, #8]
 800a9e2:	9006      	str	r0, [sp, #24]
 800a9e4:	9107      	str	r1, [sp, #28]
 800a9e6:	9104      	str	r1, [sp, #16]
 800a9e8:	4808      	ldr	r0, [pc, #32]	; (800aa0c <siprintf+0x38>)
 800a9ea:	4909      	ldr	r1, [pc, #36]	; (800aa10 <siprintf+0x3c>)
 800a9ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9f0:	9105      	str	r1, [sp, #20]
 800a9f2:	6800      	ldr	r0, [r0, #0]
 800a9f4:	a902      	add	r1, sp, #8
 800a9f6:	9301      	str	r3, [sp, #4]
 800a9f8:	f002 feb8 	bl	800d76c <_svfiprintf_r>
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	9b02      	ldr	r3, [sp, #8]
 800aa00:	701a      	strb	r2, [r3, #0]
 800aa02:	b01c      	add	sp, #112	; 0x70
 800aa04:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa08:	b003      	add	sp, #12
 800aa0a:	4770      	bx	lr
 800aa0c:	2000017c 	.word	0x2000017c
 800aa10:	ffff0208 	.word	0xffff0208

0800aa14 <sulp>:
 800aa14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa18:	460f      	mov	r7, r1
 800aa1a:	4690      	mov	r8, r2
 800aa1c:	f002 fc12 	bl	800d244 <__ulp>
 800aa20:	4604      	mov	r4, r0
 800aa22:	460d      	mov	r5, r1
 800aa24:	f1b8 0f00 	cmp.w	r8, #0
 800aa28:	d011      	beq.n	800aa4e <sulp+0x3a>
 800aa2a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800aa2e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	dd0b      	ble.n	800aa4e <sulp+0x3a>
 800aa36:	2400      	movs	r4, #0
 800aa38:	051b      	lsls	r3, r3, #20
 800aa3a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800aa3e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800aa42:	4622      	mov	r2, r4
 800aa44:	462b      	mov	r3, r5
 800aa46:	f7f5 fd47 	bl	80004d8 <__aeabi_dmul>
 800aa4a:	4604      	mov	r4, r0
 800aa4c:	460d      	mov	r5, r1
 800aa4e:	4620      	mov	r0, r4
 800aa50:	4629      	mov	r1, r5
 800aa52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800aa58 <_strtod_l>:
 800aa58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa5c:	469b      	mov	fp, r3
 800aa5e:	2300      	movs	r3, #0
 800aa60:	b09f      	sub	sp, #124	; 0x7c
 800aa62:	931a      	str	r3, [sp, #104]	; 0x68
 800aa64:	4b9e      	ldr	r3, [pc, #632]	; (800ace0 <_strtod_l+0x288>)
 800aa66:	4682      	mov	sl, r0
 800aa68:	681f      	ldr	r7, [r3, #0]
 800aa6a:	460e      	mov	r6, r1
 800aa6c:	4638      	mov	r0, r7
 800aa6e:	9215      	str	r2, [sp, #84]	; 0x54
 800aa70:	f7f5 fb6e 	bl	8000150 <strlen>
 800aa74:	f04f 0800 	mov.w	r8, #0
 800aa78:	4604      	mov	r4, r0
 800aa7a:	f04f 0900 	mov.w	r9, #0
 800aa7e:	9619      	str	r6, [sp, #100]	; 0x64
 800aa80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aa82:	781a      	ldrb	r2, [r3, #0]
 800aa84:	2a2b      	cmp	r2, #43	; 0x2b
 800aa86:	d04c      	beq.n	800ab22 <_strtod_l+0xca>
 800aa88:	d83a      	bhi.n	800ab00 <_strtod_l+0xa8>
 800aa8a:	2a0d      	cmp	r2, #13
 800aa8c:	d833      	bhi.n	800aaf6 <_strtod_l+0x9e>
 800aa8e:	2a08      	cmp	r2, #8
 800aa90:	d833      	bhi.n	800aafa <_strtod_l+0xa2>
 800aa92:	2a00      	cmp	r2, #0
 800aa94:	d03d      	beq.n	800ab12 <_strtod_l+0xba>
 800aa96:	2300      	movs	r3, #0
 800aa98:	930a      	str	r3, [sp, #40]	; 0x28
 800aa9a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800aa9c:	782b      	ldrb	r3, [r5, #0]
 800aa9e:	2b30      	cmp	r3, #48	; 0x30
 800aaa0:	f040 80aa 	bne.w	800abf8 <_strtod_l+0x1a0>
 800aaa4:	786b      	ldrb	r3, [r5, #1]
 800aaa6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aaaa:	2b58      	cmp	r3, #88	; 0x58
 800aaac:	d166      	bne.n	800ab7c <_strtod_l+0x124>
 800aaae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aab0:	4650      	mov	r0, sl
 800aab2:	9301      	str	r3, [sp, #4]
 800aab4:	ab1a      	add	r3, sp, #104	; 0x68
 800aab6:	9300      	str	r3, [sp, #0]
 800aab8:	4a8a      	ldr	r2, [pc, #552]	; (800ace4 <_strtod_l+0x28c>)
 800aaba:	f8cd b008 	str.w	fp, [sp, #8]
 800aabe:	ab1b      	add	r3, sp, #108	; 0x6c
 800aac0:	a919      	add	r1, sp, #100	; 0x64
 800aac2:	f001 fd17 	bl	800c4f4 <__gethex>
 800aac6:	f010 0607 	ands.w	r6, r0, #7
 800aaca:	4604      	mov	r4, r0
 800aacc:	d005      	beq.n	800aada <_strtod_l+0x82>
 800aace:	2e06      	cmp	r6, #6
 800aad0:	d129      	bne.n	800ab26 <_strtod_l+0xce>
 800aad2:	2300      	movs	r3, #0
 800aad4:	3501      	adds	r5, #1
 800aad6:	9519      	str	r5, [sp, #100]	; 0x64
 800aad8:	930a      	str	r3, [sp, #40]	; 0x28
 800aada:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aadc:	2b00      	cmp	r3, #0
 800aade:	f040 858a 	bne.w	800b5f6 <_strtod_l+0xb9e>
 800aae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aae4:	b1d3      	cbz	r3, 800ab1c <_strtod_l+0xc4>
 800aae6:	4642      	mov	r2, r8
 800aae8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800aaec:	4610      	mov	r0, r2
 800aaee:	4619      	mov	r1, r3
 800aaf0:	b01f      	add	sp, #124	; 0x7c
 800aaf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaf6:	2a20      	cmp	r2, #32
 800aaf8:	d1cd      	bne.n	800aa96 <_strtod_l+0x3e>
 800aafa:	3301      	adds	r3, #1
 800aafc:	9319      	str	r3, [sp, #100]	; 0x64
 800aafe:	e7bf      	b.n	800aa80 <_strtod_l+0x28>
 800ab00:	2a2d      	cmp	r2, #45	; 0x2d
 800ab02:	d1c8      	bne.n	800aa96 <_strtod_l+0x3e>
 800ab04:	2201      	movs	r2, #1
 800ab06:	920a      	str	r2, [sp, #40]	; 0x28
 800ab08:	1c5a      	adds	r2, r3, #1
 800ab0a:	9219      	str	r2, [sp, #100]	; 0x64
 800ab0c:	785b      	ldrb	r3, [r3, #1]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d1c3      	bne.n	800aa9a <_strtod_l+0x42>
 800ab12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab14:	9619      	str	r6, [sp, #100]	; 0x64
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	f040 856b 	bne.w	800b5f2 <_strtod_l+0xb9a>
 800ab1c:	4642      	mov	r2, r8
 800ab1e:	464b      	mov	r3, r9
 800ab20:	e7e4      	b.n	800aaec <_strtod_l+0x94>
 800ab22:	2200      	movs	r2, #0
 800ab24:	e7ef      	b.n	800ab06 <_strtod_l+0xae>
 800ab26:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ab28:	b13a      	cbz	r2, 800ab3a <_strtod_l+0xe2>
 800ab2a:	2135      	movs	r1, #53	; 0x35
 800ab2c:	a81c      	add	r0, sp, #112	; 0x70
 800ab2e:	f002 fc8d 	bl	800d44c <__copybits>
 800ab32:	4650      	mov	r0, sl
 800ab34:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ab36:	f002 f855 	bl	800cbe4 <_Bfree>
 800ab3a:	3e01      	subs	r6, #1
 800ab3c:	2e04      	cmp	r6, #4
 800ab3e:	d806      	bhi.n	800ab4e <_strtod_l+0xf6>
 800ab40:	e8df f006 	tbb	[pc, r6]
 800ab44:	1714030a 	.word	0x1714030a
 800ab48:	0a          	.byte	0x0a
 800ab49:	00          	.byte	0x00
 800ab4a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800ab4e:	0721      	lsls	r1, r4, #28
 800ab50:	d5c3      	bpl.n	800aada <_strtod_l+0x82>
 800ab52:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800ab56:	e7c0      	b.n	800aada <_strtod_l+0x82>
 800ab58:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ab5a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800ab5e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ab62:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ab66:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ab6a:	e7f0      	b.n	800ab4e <_strtod_l+0xf6>
 800ab6c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ace8 <_strtod_l+0x290>
 800ab70:	e7ed      	b.n	800ab4e <_strtod_l+0xf6>
 800ab72:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ab76:	f04f 38ff 	mov.w	r8, #4294967295
 800ab7a:	e7e8      	b.n	800ab4e <_strtod_l+0xf6>
 800ab7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab7e:	1c5a      	adds	r2, r3, #1
 800ab80:	9219      	str	r2, [sp, #100]	; 0x64
 800ab82:	785b      	ldrb	r3, [r3, #1]
 800ab84:	2b30      	cmp	r3, #48	; 0x30
 800ab86:	d0f9      	beq.n	800ab7c <_strtod_l+0x124>
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d0a6      	beq.n	800aada <_strtod_l+0x82>
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	9307      	str	r3, [sp, #28]
 800ab90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab92:	220a      	movs	r2, #10
 800ab94:	9308      	str	r3, [sp, #32]
 800ab96:	2300      	movs	r3, #0
 800ab98:	469b      	mov	fp, r3
 800ab9a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800ab9e:	9819      	ldr	r0, [sp, #100]	; 0x64
 800aba0:	7805      	ldrb	r5, [r0, #0]
 800aba2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800aba6:	b2d9      	uxtb	r1, r3
 800aba8:	2909      	cmp	r1, #9
 800abaa:	d927      	bls.n	800abfc <_strtod_l+0x1a4>
 800abac:	4622      	mov	r2, r4
 800abae:	4639      	mov	r1, r7
 800abb0:	f002 fef2 	bl	800d998 <strncmp>
 800abb4:	2800      	cmp	r0, #0
 800abb6:	d033      	beq.n	800ac20 <_strtod_l+0x1c8>
 800abb8:	2000      	movs	r0, #0
 800abba:	462a      	mov	r2, r5
 800abbc:	465c      	mov	r4, fp
 800abbe:	4603      	mov	r3, r0
 800abc0:	9004      	str	r0, [sp, #16]
 800abc2:	2a65      	cmp	r2, #101	; 0x65
 800abc4:	d001      	beq.n	800abca <_strtod_l+0x172>
 800abc6:	2a45      	cmp	r2, #69	; 0x45
 800abc8:	d114      	bne.n	800abf4 <_strtod_l+0x19c>
 800abca:	b91c      	cbnz	r4, 800abd4 <_strtod_l+0x17c>
 800abcc:	9a07      	ldr	r2, [sp, #28]
 800abce:	4302      	orrs	r2, r0
 800abd0:	d09f      	beq.n	800ab12 <_strtod_l+0xba>
 800abd2:	2400      	movs	r4, #0
 800abd4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800abd6:	1c72      	adds	r2, r6, #1
 800abd8:	9219      	str	r2, [sp, #100]	; 0x64
 800abda:	7872      	ldrb	r2, [r6, #1]
 800abdc:	2a2b      	cmp	r2, #43	; 0x2b
 800abde:	d079      	beq.n	800acd4 <_strtod_l+0x27c>
 800abe0:	2a2d      	cmp	r2, #45	; 0x2d
 800abe2:	f000 8083 	beq.w	800acec <_strtod_l+0x294>
 800abe6:	2700      	movs	r7, #0
 800abe8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800abec:	2909      	cmp	r1, #9
 800abee:	f240 8083 	bls.w	800acf8 <_strtod_l+0x2a0>
 800abf2:	9619      	str	r6, [sp, #100]	; 0x64
 800abf4:	2500      	movs	r5, #0
 800abf6:	e09f      	b.n	800ad38 <_strtod_l+0x2e0>
 800abf8:	2300      	movs	r3, #0
 800abfa:	e7c8      	b.n	800ab8e <_strtod_l+0x136>
 800abfc:	f1bb 0f08 	cmp.w	fp, #8
 800ac00:	bfd5      	itete	le
 800ac02:	9906      	ldrle	r1, [sp, #24]
 800ac04:	9905      	ldrgt	r1, [sp, #20]
 800ac06:	fb02 3301 	mlale	r3, r2, r1, r3
 800ac0a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ac0e:	f100 0001 	add.w	r0, r0, #1
 800ac12:	bfd4      	ite	le
 800ac14:	9306      	strle	r3, [sp, #24]
 800ac16:	9305      	strgt	r3, [sp, #20]
 800ac18:	f10b 0b01 	add.w	fp, fp, #1
 800ac1c:	9019      	str	r0, [sp, #100]	; 0x64
 800ac1e:	e7be      	b.n	800ab9e <_strtod_l+0x146>
 800ac20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ac22:	191a      	adds	r2, r3, r4
 800ac24:	9219      	str	r2, [sp, #100]	; 0x64
 800ac26:	5d1a      	ldrb	r2, [r3, r4]
 800ac28:	f1bb 0f00 	cmp.w	fp, #0
 800ac2c:	d036      	beq.n	800ac9c <_strtod_l+0x244>
 800ac2e:	465c      	mov	r4, fp
 800ac30:	9004      	str	r0, [sp, #16]
 800ac32:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ac36:	2b09      	cmp	r3, #9
 800ac38:	d912      	bls.n	800ac60 <_strtod_l+0x208>
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e7c1      	b.n	800abc2 <_strtod_l+0x16a>
 800ac3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ac40:	3001      	adds	r0, #1
 800ac42:	1c5a      	adds	r2, r3, #1
 800ac44:	9219      	str	r2, [sp, #100]	; 0x64
 800ac46:	785a      	ldrb	r2, [r3, #1]
 800ac48:	2a30      	cmp	r2, #48	; 0x30
 800ac4a:	d0f8      	beq.n	800ac3e <_strtod_l+0x1e6>
 800ac4c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ac50:	2b08      	cmp	r3, #8
 800ac52:	f200 84d5 	bhi.w	800b600 <_strtod_l+0xba8>
 800ac56:	9004      	str	r0, [sp, #16]
 800ac58:	2000      	movs	r0, #0
 800ac5a:	4604      	mov	r4, r0
 800ac5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ac5e:	9308      	str	r3, [sp, #32]
 800ac60:	3a30      	subs	r2, #48	; 0x30
 800ac62:	f100 0301 	add.w	r3, r0, #1
 800ac66:	d013      	beq.n	800ac90 <_strtod_l+0x238>
 800ac68:	9904      	ldr	r1, [sp, #16]
 800ac6a:	1905      	adds	r5, r0, r4
 800ac6c:	4419      	add	r1, r3
 800ac6e:	9104      	str	r1, [sp, #16]
 800ac70:	4623      	mov	r3, r4
 800ac72:	210a      	movs	r1, #10
 800ac74:	42ab      	cmp	r3, r5
 800ac76:	d113      	bne.n	800aca0 <_strtod_l+0x248>
 800ac78:	1823      	adds	r3, r4, r0
 800ac7a:	2b08      	cmp	r3, #8
 800ac7c:	f104 0401 	add.w	r4, r4, #1
 800ac80:	4404      	add	r4, r0
 800ac82:	dc1b      	bgt.n	800acbc <_strtod_l+0x264>
 800ac84:	230a      	movs	r3, #10
 800ac86:	9906      	ldr	r1, [sp, #24]
 800ac88:	fb03 2301 	mla	r3, r3, r1, r2
 800ac8c:	9306      	str	r3, [sp, #24]
 800ac8e:	2300      	movs	r3, #0
 800ac90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ac92:	4618      	mov	r0, r3
 800ac94:	1c51      	adds	r1, r2, #1
 800ac96:	9119      	str	r1, [sp, #100]	; 0x64
 800ac98:	7852      	ldrb	r2, [r2, #1]
 800ac9a:	e7ca      	b.n	800ac32 <_strtod_l+0x1da>
 800ac9c:	4658      	mov	r0, fp
 800ac9e:	e7d3      	b.n	800ac48 <_strtod_l+0x1f0>
 800aca0:	2b08      	cmp	r3, #8
 800aca2:	dc04      	bgt.n	800acae <_strtod_l+0x256>
 800aca4:	9f06      	ldr	r7, [sp, #24]
 800aca6:	434f      	muls	r7, r1
 800aca8:	9706      	str	r7, [sp, #24]
 800acaa:	3301      	adds	r3, #1
 800acac:	e7e2      	b.n	800ac74 <_strtod_l+0x21c>
 800acae:	1c5f      	adds	r7, r3, #1
 800acb0:	2f10      	cmp	r7, #16
 800acb2:	bfde      	ittt	le
 800acb4:	9f05      	ldrle	r7, [sp, #20]
 800acb6:	434f      	mulle	r7, r1
 800acb8:	9705      	strle	r7, [sp, #20]
 800acba:	e7f6      	b.n	800acaa <_strtod_l+0x252>
 800acbc:	2c10      	cmp	r4, #16
 800acbe:	bfdf      	itttt	le
 800acc0:	230a      	movle	r3, #10
 800acc2:	9905      	ldrle	r1, [sp, #20]
 800acc4:	fb03 2301 	mlale	r3, r3, r1, r2
 800acc8:	9305      	strle	r3, [sp, #20]
 800acca:	e7e0      	b.n	800ac8e <_strtod_l+0x236>
 800accc:	2300      	movs	r3, #0
 800acce:	9304      	str	r3, [sp, #16]
 800acd0:	2301      	movs	r3, #1
 800acd2:	e77b      	b.n	800abcc <_strtod_l+0x174>
 800acd4:	2700      	movs	r7, #0
 800acd6:	1cb2      	adds	r2, r6, #2
 800acd8:	9219      	str	r2, [sp, #100]	; 0x64
 800acda:	78b2      	ldrb	r2, [r6, #2]
 800acdc:	e784      	b.n	800abe8 <_strtod_l+0x190>
 800acde:	bf00      	nop
 800ace0:	0800e890 	.word	0x0800e890
 800ace4:	0800e644 	.word	0x0800e644
 800ace8:	7ff00000 	.word	0x7ff00000
 800acec:	2701      	movs	r7, #1
 800acee:	e7f2      	b.n	800acd6 <_strtod_l+0x27e>
 800acf0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800acf2:	1c51      	adds	r1, r2, #1
 800acf4:	9119      	str	r1, [sp, #100]	; 0x64
 800acf6:	7852      	ldrb	r2, [r2, #1]
 800acf8:	2a30      	cmp	r2, #48	; 0x30
 800acfa:	d0f9      	beq.n	800acf0 <_strtod_l+0x298>
 800acfc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ad00:	2908      	cmp	r1, #8
 800ad02:	f63f af77 	bhi.w	800abf4 <_strtod_l+0x19c>
 800ad06:	f04f 0e0a 	mov.w	lr, #10
 800ad0a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800ad0e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ad10:	9209      	str	r2, [sp, #36]	; 0x24
 800ad12:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ad14:	1c51      	adds	r1, r2, #1
 800ad16:	9119      	str	r1, [sp, #100]	; 0x64
 800ad18:	7852      	ldrb	r2, [r2, #1]
 800ad1a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800ad1e:	2d09      	cmp	r5, #9
 800ad20:	d935      	bls.n	800ad8e <_strtod_l+0x336>
 800ad22:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ad24:	1b49      	subs	r1, r1, r5
 800ad26:	2908      	cmp	r1, #8
 800ad28:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800ad2c:	dc02      	bgt.n	800ad34 <_strtod_l+0x2dc>
 800ad2e:	4565      	cmp	r5, ip
 800ad30:	bfa8      	it	ge
 800ad32:	4665      	movge	r5, ip
 800ad34:	b107      	cbz	r7, 800ad38 <_strtod_l+0x2e0>
 800ad36:	426d      	negs	r5, r5
 800ad38:	2c00      	cmp	r4, #0
 800ad3a:	d14c      	bne.n	800add6 <_strtod_l+0x37e>
 800ad3c:	9907      	ldr	r1, [sp, #28]
 800ad3e:	4301      	orrs	r1, r0
 800ad40:	f47f aecb 	bne.w	800aada <_strtod_l+0x82>
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	f47f aee4 	bne.w	800ab12 <_strtod_l+0xba>
 800ad4a:	2a69      	cmp	r2, #105	; 0x69
 800ad4c:	d026      	beq.n	800ad9c <_strtod_l+0x344>
 800ad4e:	dc23      	bgt.n	800ad98 <_strtod_l+0x340>
 800ad50:	2a49      	cmp	r2, #73	; 0x49
 800ad52:	d023      	beq.n	800ad9c <_strtod_l+0x344>
 800ad54:	2a4e      	cmp	r2, #78	; 0x4e
 800ad56:	f47f aedc 	bne.w	800ab12 <_strtod_l+0xba>
 800ad5a:	499d      	ldr	r1, [pc, #628]	; (800afd0 <_strtod_l+0x578>)
 800ad5c:	a819      	add	r0, sp, #100	; 0x64
 800ad5e:	f001 fe17 	bl	800c990 <__match>
 800ad62:	2800      	cmp	r0, #0
 800ad64:	f43f aed5 	beq.w	800ab12 <_strtod_l+0xba>
 800ad68:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad6a:	781b      	ldrb	r3, [r3, #0]
 800ad6c:	2b28      	cmp	r3, #40	; 0x28
 800ad6e:	d12c      	bne.n	800adca <_strtod_l+0x372>
 800ad70:	4998      	ldr	r1, [pc, #608]	; (800afd4 <_strtod_l+0x57c>)
 800ad72:	aa1c      	add	r2, sp, #112	; 0x70
 800ad74:	a819      	add	r0, sp, #100	; 0x64
 800ad76:	f001 fe1f 	bl	800c9b8 <__hexnan>
 800ad7a:	2805      	cmp	r0, #5
 800ad7c:	d125      	bne.n	800adca <_strtod_l+0x372>
 800ad7e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ad80:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800ad84:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ad88:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ad8c:	e6a5      	b.n	800aada <_strtod_l+0x82>
 800ad8e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800ad92:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800ad96:	e7bc      	b.n	800ad12 <_strtod_l+0x2ba>
 800ad98:	2a6e      	cmp	r2, #110	; 0x6e
 800ad9a:	e7dc      	b.n	800ad56 <_strtod_l+0x2fe>
 800ad9c:	498e      	ldr	r1, [pc, #568]	; (800afd8 <_strtod_l+0x580>)
 800ad9e:	a819      	add	r0, sp, #100	; 0x64
 800ada0:	f001 fdf6 	bl	800c990 <__match>
 800ada4:	2800      	cmp	r0, #0
 800ada6:	f43f aeb4 	beq.w	800ab12 <_strtod_l+0xba>
 800adaa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800adac:	498b      	ldr	r1, [pc, #556]	; (800afdc <_strtod_l+0x584>)
 800adae:	3b01      	subs	r3, #1
 800adb0:	a819      	add	r0, sp, #100	; 0x64
 800adb2:	9319      	str	r3, [sp, #100]	; 0x64
 800adb4:	f001 fdec 	bl	800c990 <__match>
 800adb8:	b910      	cbnz	r0, 800adc0 <_strtod_l+0x368>
 800adba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800adbc:	3301      	adds	r3, #1
 800adbe:	9319      	str	r3, [sp, #100]	; 0x64
 800adc0:	f04f 0800 	mov.w	r8, #0
 800adc4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800afe0 <_strtod_l+0x588>
 800adc8:	e687      	b.n	800aada <_strtod_l+0x82>
 800adca:	4886      	ldr	r0, [pc, #536]	; (800afe4 <_strtod_l+0x58c>)
 800adcc:	f002 fdce 	bl	800d96c <nan>
 800add0:	4680      	mov	r8, r0
 800add2:	4689      	mov	r9, r1
 800add4:	e681      	b.n	800aada <_strtod_l+0x82>
 800add6:	9b04      	ldr	r3, [sp, #16]
 800add8:	f1bb 0f00 	cmp.w	fp, #0
 800addc:	bf08      	it	eq
 800adde:	46a3      	moveq	fp, r4
 800ade0:	1aeb      	subs	r3, r5, r3
 800ade2:	2c10      	cmp	r4, #16
 800ade4:	9806      	ldr	r0, [sp, #24]
 800ade6:	4626      	mov	r6, r4
 800ade8:	9307      	str	r3, [sp, #28]
 800adea:	bfa8      	it	ge
 800adec:	2610      	movge	r6, #16
 800adee:	f7f5 faf9 	bl	80003e4 <__aeabi_ui2d>
 800adf2:	2c09      	cmp	r4, #9
 800adf4:	4680      	mov	r8, r0
 800adf6:	4689      	mov	r9, r1
 800adf8:	dd13      	ble.n	800ae22 <_strtod_l+0x3ca>
 800adfa:	4b7b      	ldr	r3, [pc, #492]	; (800afe8 <_strtod_l+0x590>)
 800adfc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ae00:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ae04:	f7f5 fb68 	bl	80004d8 <__aeabi_dmul>
 800ae08:	4680      	mov	r8, r0
 800ae0a:	9805      	ldr	r0, [sp, #20]
 800ae0c:	4689      	mov	r9, r1
 800ae0e:	f7f5 fae9 	bl	80003e4 <__aeabi_ui2d>
 800ae12:	4602      	mov	r2, r0
 800ae14:	460b      	mov	r3, r1
 800ae16:	4640      	mov	r0, r8
 800ae18:	4649      	mov	r1, r9
 800ae1a:	f7f5 f9a7 	bl	800016c <__adddf3>
 800ae1e:	4680      	mov	r8, r0
 800ae20:	4689      	mov	r9, r1
 800ae22:	2c0f      	cmp	r4, #15
 800ae24:	dc36      	bgt.n	800ae94 <_strtod_l+0x43c>
 800ae26:	9b07      	ldr	r3, [sp, #28]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	f43f ae56 	beq.w	800aada <_strtod_l+0x82>
 800ae2e:	dd22      	ble.n	800ae76 <_strtod_l+0x41e>
 800ae30:	2b16      	cmp	r3, #22
 800ae32:	dc09      	bgt.n	800ae48 <_strtod_l+0x3f0>
 800ae34:	496c      	ldr	r1, [pc, #432]	; (800afe8 <_strtod_l+0x590>)
 800ae36:	4642      	mov	r2, r8
 800ae38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae3c:	464b      	mov	r3, r9
 800ae3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae42:	f7f5 fb49 	bl	80004d8 <__aeabi_dmul>
 800ae46:	e7c3      	b.n	800add0 <_strtod_l+0x378>
 800ae48:	9a07      	ldr	r2, [sp, #28]
 800ae4a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	db20      	blt.n	800ae94 <_strtod_l+0x43c>
 800ae52:	4d65      	ldr	r5, [pc, #404]	; (800afe8 <_strtod_l+0x590>)
 800ae54:	f1c4 040f 	rsb	r4, r4, #15
 800ae58:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800ae5c:	4642      	mov	r2, r8
 800ae5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae62:	464b      	mov	r3, r9
 800ae64:	f7f5 fb38 	bl	80004d8 <__aeabi_dmul>
 800ae68:	9b07      	ldr	r3, [sp, #28]
 800ae6a:	1b1c      	subs	r4, r3, r4
 800ae6c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800ae70:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae74:	e7e5      	b.n	800ae42 <_strtod_l+0x3ea>
 800ae76:	9b07      	ldr	r3, [sp, #28]
 800ae78:	3316      	adds	r3, #22
 800ae7a:	db0b      	blt.n	800ae94 <_strtod_l+0x43c>
 800ae7c:	9b04      	ldr	r3, [sp, #16]
 800ae7e:	4640      	mov	r0, r8
 800ae80:	1b5d      	subs	r5, r3, r5
 800ae82:	4b59      	ldr	r3, [pc, #356]	; (800afe8 <_strtod_l+0x590>)
 800ae84:	4649      	mov	r1, r9
 800ae86:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ae8a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae8e:	f7f5 fc4d 	bl	800072c <__aeabi_ddiv>
 800ae92:	e79d      	b.n	800add0 <_strtod_l+0x378>
 800ae94:	9b07      	ldr	r3, [sp, #28]
 800ae96:	1ba6      	subs	r6, r4, r6
 800ae98:	441e      	add	r6, r3
 800ae9a:	2e00      	cmp	r6, #0
 800ae9c:	dd74      	ble.n	800af88 <_strtod_l+0x530>
 800ae9e:	f016 030f 	ands.w	r3, r6, #15
 800aea2:	d00a      	beq.n	800aeba <_strtod_l+0x462>
 800aea4:	4950      	ldr	r1, [pc, #320]	; (800afe8 <_strtod_l+0x590>)
 800aea6:	4642      	mov	r2, r8
 800aea8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aeac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aeb0:	464b      	mov	r3, r9
 800aeb2:	f7f5 fb11 	bl	80004d8 <__aeabi_dmul>
 800aeb6:	4680      	mov	r8, r0
 800aeb8:	4689      	mov	r9, r1
 800aeba:	f036 060f 	bics.w	r6, r6, #15
 800aebe:	d052      	beq.n	800af66 <_strtod_l+0x50e>
 800aec0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800aec4:	dd27      	ble.n	800af16 <_strtod_l+0x4be>
 800aec6:	f04f 0b00 	mov.w	fp, #0
 800aeca:	f8cd b010 	str.w	fp, [sp, #16]
 800aece:	f8cd b020 	str.w	fp, [sp, #32]
 800aed2:	f8cd b018 	str.w	fp, [sp, #24]
 800aed6:	2322      	movs	r3, #34	; 0x22
 800aed8:	f04f 0800 	mov.w	r8, #0
 800aedc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800afe0 <_strtod_l+0x588>
 800aee0:	f8ca 3000 	str.w	r3, [sl]
 800aee4:	9b08      	ldr	r3, [sp, #32]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	f43f adf7 	beq.w	800aada <_strtod_l+0x82>
 800aeec:	4650      	mov	r0, sl
 800aeee:	991a      	ldr	r1, [sp, #104]	; 0x68
 800aef0:	f001 fe78 	bl	800cbe4 <_Bfree>
 800aef4:	4650      	mov	r0, sl
 800aef6:	9906      	ldr	r1, [sp, #24]
 800aef8:	f001 fe74 	bl	800cbe4 <_Bfree>
 800aefc:	4650      	mov	r0, sl
 800aefe:	9904      	ldr	r1, [sp, #16]
 800af00:	f001 fe70 	bl	800cbe4 <_Bfree>
 800af04:	4650      	mov	r0, sl
 800af06:	9908      	ldr	r1, [sp, #32]
 800af08:	f001 fe6c 	bl	800cbe4 <_Bfree>
 800af0c:	4659      	mov	r1, fp
 800af0e:	4650      	mov	r0, sl
 800af10:	f001 fe68 	bl	800cbe4 <_Bfree>
 800af14:	e5e1      	b.n	800aada <_strtod_l+0x82>
 800af16:	4b35      	ldr	r3, [pc, #212]	; (800afec <_strtod_l+0x594>)
 800af18:	4640      	mov	r0, r8
 800af1a:	9305      	str	r3, [sp, #20]
 800af1c:	2300      	movs	r3, #0
 800af1e:	4649      	mov	r1, r9
 800af20:	461f      	mov	r7, r3
 800af22:	1136      	asrs	r6, r6, #4
 800af24:	2e01      	cmp	r6, #1
 800af26:	dc21      	bgt.n	800af6c <_strtod_l+0x514>
 800af28:	b10b      	cbz	r3, 800af2e <_strtod_l+0x4d6>
 800af2a:	4680      	mov	r8, r0
 800af2c:	4689      	mov	r9, r1
 800af2e:	4b2f      	ldr	r3, [pc, #188]	; (800afec <_strtod_l+0x594>)
 800af30:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800af34:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800af38:	4642      	mov	r2, r8
 800af3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af3e:	464b      	mov	r3, r9
 800af40:	f7f5 faca 	bl	80004d8 <__aeabi_dmul>
 800af44:	4b26      	ldr	r3, [pc, #152]	; (800afe0 <_strtod_l+0x588>)
 800af46:	460a      	mov	r2, r1
 800af48:	400b      	ands	r3, r1
 800af4a:	4929      	ldr	r1, [pc, #164]	; (800aff0 <_strtod_l+0x598>)
 800af4c:	4680      	mov	r8, r0
 800af4e:	428b      	cmp	r3, r1
 800af50:	d8b9      	bhi.n	800aec6 <_strtod_l+0x46e>
 800af52:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800af56:	428b      	cmp	r3, r1
 800af58:	bf86      	itte	hi
 800af5a:	f04f 38ff 	movhi.w	r8, #4294967295
 800af5e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800aff4 <_strtod_l+0x59c>
 800af62:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800af66:	2300      	movs	r3, #0
 800af68:	9305      	str	r3, [sp, #20]
 800af6a:	e07f      	b.n	800b06c <_strtod_l+0x614>
 800af6c:	07f2      	lsls	r2, r6, #31
 800af6e:	d505      	bpl.n	800af7c <_strtod_l+0x524>
 800af70:	9b05      	ldr	r3, [sp, #20]
 800af72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af76:	f7f5 faaf 	bl	80004d8 <__aeabi_dmul>
 800af7a:	2301      	movs	r3, #1
 800af7c:	9a05      	ldr	r2, [sp, #20]
 800af7e:	3701      	adds	r7, #1
 800af80:	3208      	adds	r2, #8
 800af82:	1076      	asrs	r6, r6, #1
 800af84:	9205      	str	r2, [sp, #20]
 800af86:	e7cd      	b.n	800af24 <_strtod_l+0x4cc>
 800af88:	d0ed      	beq.n	800af66 <_strtod_l+0x50e>
 800af8a:	4276      	negs	r6, r6
 800af8c:	f016 020f 	ands.w	r2, r6, #15
 800af90:	d00a      	beq.n	800afa8 <_strtod_l+0x550>
 800af92:	4b15      	ldr	r3, [pc, #84]	; (800afe8 <_strtod_l+0x590>)
 800af94:	4640      	mov	r0, r8
 800af96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af9a:	4649      	mov	r1, r9
 800af9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa0:	f7f5 fbc4 	bl	800072c <__aeabi_ddiv>
 800afa4:	4680      	mov	r8, r0
 800afa6:	4689      	mov	r9, r1
 800afa8:	1136      	asrs	r6, r6, #4
 800afaa:	d0dc      	beq.n	800af66 <_strtod_l+0x50e>
 800afac:	2e1f      	cmp	r6, #31
 800afae:	dd23      	ble.n	800aff8 <_strtod_l+0x5a0>
 800afb0:	f04f 0b00 	mov.w	fp, #0
 800afb4:	f8cd b010 	str.w	fp, [sp, #16]
 800afb8:	f8cd b020 	str.w	fp, [sp, #32]
 800afbc:	f8cd b018 	str.w	fp, [sp, #24]
 800afc0:	2322      	movs	r3, #34	; 0x22
 800afc2:	f04f 0800 	mov.w	r8, #0
 800afc6:	f04f 0900 	mov.w	r9, #0
 800afca:	f8ca 3000 	str.w	r3, [sl]
 800afce:	e789      	b.n	800aee4 <_strtod_l+0x48c>
 800afd0:	0800e615 	.word	0x0800e615
 800afd4:	0800e658 	.word	0x0800e658
 800afd8:	0800e60d 	.word	0x0800e60d
 800afdc:	0800e79c 	.word	0x0800e79c
 800afe0:	7ff00000 	.word	0x7ff00000
 800afe4:	0800ea48 	.word	0x0800ea48
 800afe8:	0800e928 	.word	0x0800e928
 800afec:	0800e900 	.word	0x0800e900
 800aff0:	7ca00000 	.word	0x7ca00000
 800aff4:	7fefffff 	.word	0x7fefffff
 800aff8:	f016 0310 	ands.w	r3, r6, #16
 800affc:	bf18      	it	ne
 800affe:	236a      	movne	r3, #106	; 0x6a
 800b000:	4640      	mov	r0, r8
 800b002:	9305      	str	r3, [sp, #20]
 800b004:	4649      	mov	r1, r9
 800b006:	2300      	movs	r3, #0
 800b008:	4fb0      	ldr	r7, [pc, #704]	; (800b2cc <_strtod_l+0x874>)
 800b00a:	07f2      	lsls	r2, r6, #31
 800b00c:	d504      	bpl.n	800b018 <_strtod_l+0x5c0>
 800b00e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b012:	f7f5 fa61 	bl	80004d8 <__aeabi_dmul>
 800b016:	2301      	movs	r3, #1
 800b018:	1076      	asrs	r6, r6, #1
 800b01a:	f107 0708 	add.w	r7, r7, #8
 800b01e:	d1f4      	bne.n	800b00a <_strtod_l+0x5b2>
 800b020:	b10b      	cbz	r3, 800b026 <_strtod_l+0x5ce>
 800b022:	4680      	mov	r8, r0
 800b024:	4689      	mov	r9, r1
 800b026:	9b05      	ldr	r3, [sp, #20]
 800b028:	b1c3      	cbz	r3, 800b05c <_strtod_l+0x604>
 800b02a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b02e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b032:	2b00      	cmp	r3, #0
 800b034:	4649      	mov	r1, r9
 800b036:	dd11      	ble.n	800b05c <_strtod_l+0x604>
 800b038:	2b1f      	cmp	r3, #31
 800b03a:	f340 8127 	ble.w	800b28c <_strtod_l+0x834>
 800b03e:	2b34      	cmp	r3, #52	; 0x34
 800b040:	bfd8      	it	le
 800b042:	f04f 33ff 	movle.w	r3, #4294967295
 800b046:	f04f 0800 	mov.w	r8, #0
 800b04a:	bfcf      	iteee	gt
 800b04c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b050:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b054:	fa03 f202 	lslle.w	r2, r3, r2
 800b058:	ea02 0901 	andle.w	r9, r2, r1
 800b05c:	2200      	movs	r2, #0
 800b05e:	2300      	movs	r3, #0
 800b060:	4640      	mov	r0, r8
 800b062:	4649      	mov	r1, r9
 800b064:	f7f5 fca0 	bl	80009a8 <__aeabi_dcmpeq>
 800b068:	2800      	cmp	r0, #0
 800b06a:	d1a1      	bne.n	800afb0 <_strtod_l+0x558>
 800b06c:	9b06      	ldr	r3, [sp, #24]
 800b06e:	465a      	mov	r2, fp
 800b070:	9300      	str	r3, [sp, #0]
 800b072:	4650      	mov	r0, sl
 800b074:	4623      	mov	r3, r4
 800b076:	9908      	ldr	r1, [sp, #32]
 800b078:	f001 fe1c 	bl	800ccb4 <__s2b>
 800b07c:	9008      	str	r0, [sp, #32]
 800b07e:	2800      	cmp	r0, #0
 800b080:	f43f af21 	beq.w	800aec6 <_strtod_l+0x46e>
 800b084:	9b04      	ldr	r3, [sp, #16]
 800b086:	f04f 0b00 	mov.w	fp, #0
 800b08a:	1b5d      	subs	r5, r3, r5
 800b08c:	9b07      	ldr	r3, [sp, #28]
 800b08e:	f8cd b010 	str.w	fp, [sp, #16]
 800b092:	2b00      	cmp	r3, #0
 800b094:	bfb4      	ite	lt
 800b096:	462b      	movlt	r3, r5
 800b098:	2300      	movge	r3, #0
 800b09a:	930e      	str	r3, [sp, #56]	; 0x38
 800b09c:	9b07      	ldr	r3, [sp, #28]
 800b09e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b0a2:	9314      	str	r3, [sp, #80]	; 0x50
 800b0a4:	9b08      	ldr	r3, [sp, #32]
 800b0a6:	4650      	mov	r0, sl
 800b0a8:	6859      	ldr	r1, [r3, #4]
 800b0aa:	f001 fd5b 	bl	800cb64 <_Balloc>
 800b0ae:	9006      	str	r0, [sp, #24]
 800b0b0:	2800      	cmp	r0, #0
 800b0b2:	f43f af10 	beq.w	800aed6 <_strtod_l+0x47e>
 800b0b6:	9b08      	ldr	r3, [sp, #32]
 800b0b8:	300c      	adds	r0, #12
 800b0ba:	691a      	ldr	r2, [r3, #16]
 800b0bc:	f103 010c 	add.w	r1, r3, #12
 800b0c0:	3202      	adds	r2, #2
 800b0c2:	0092      	lsls	r2, r2, #2
 800b0c4:	f001 fd40 	bl	800cb48 <memcpy>
 800b0c8:	ab1c      	add	r3, sp, #112	; 0x70
 800b0ca:	9301      	str	r3, [sp, #4]
 800b0cc:	ab1b      	add	r3, sp, #108	; 0x6c
 800b0ce:	9300      	str	r3, [sp, #0]
 800b0d0:	4642      	mov	r2, r8
 800b0d2:	464b      	mov	r3, r9
 800b0d4:	4650      	mov	r0, sl
 800b0d6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800b0da:	f002 f92d 	bl	800d338 <__d2b>
 800b0de:	901a      	str	r0, [sp, #104]	; 0x68
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	f43f aef8 	beq.w	800aed6 <_strtod_l+0x47e>
 800b0e6:	2101      	movs	r1, #1
 800b0e8:	4650      	mov	r0, sl
 800b0ea:	f001 fe7b 	bl	800cde4 <__i2b>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	9004      	str	r0, [sp, #16]
 800b0f2:	2800      	cmp	r0, #0
 800b0f4:	f43f aeef 	beq.w	800aed6 <_strtod_l+0x47e>
 800b0f8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b0fa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b0fc:	2d00      	cmp	r5, #0
 800b0fe:	bfab      	itete	ge
 800b100:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800b102:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800b104:	18ee      	addge	r6, r5, r3
 800b106:	1b5c      	sublt	r4, r3, r5
 800b108:	9b05      	ldr	r3, [sp, #20]
 800b10a:	bfa8      	it	ge
 800b10c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800b10e:	eba5 0503 	sub.w	r5, r5, r3
 800b112:	4415      	add	r5, r2
 800b114:	4b6e      	ldr	r3, [pc, #440]	; (800b2d0 <_strtod_l+0x878>)
 800b116:	f105 35ff 	add.w	r5, r5, #4294967295
 800b11a:	bfb8      	it	lt
 800b11c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800b11e:	429d      	cmp	r5, r3
 800b120:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b124:	f280 80c4 	bge.w	800b2b0 <_strtod_l+0x858>
 800b128:	1b5b      	subs	r3, r3, r5
 800b12a:	2b1f      	cmp	r3, #31
 800b12c:	f04f 0701 	mov.w	r7, #1
 800b130:	eba2 0203 	sub.w	r2, r2, r3
 800b134:	f300 80b1 	bgt.w	800b29a <_strtod_l+0x842>
 800b138:	2500      	movs	r5, #0
 800b13a:	fa07 f303 	lsl.w	r3, r7, r3
 800b13e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b140:	18b7      	adds	r7, r6, r2
 800b142:	9b05      	ldr	r3, [sp, #20]
 800b144:	42be      	cmp	r6, r7
 800b146:	4414      	add	r4, r2
 800b148:	441c      	add	r4, r3
 800b14a:	4633      	mov	r3, r6
 800b14c:	bfa8      	it	ge
 800b14e:	463b      	movge	r3, r7
 800b150:	42a3      	cmp	r3, r4
 800b152:	bfa8      	it	ge
 800b154:	4623      	movge	r3, r4
 800b156:	2b00      	cmp	r3, #0
 800b158:	bfc2      	ittt	gt
 800b15a:	1aff      	subgt	r7, r7, r3
 800b15c:	1ae4      	subgt	r4, r4, r3
 800b15e:	1af6      	subgt	r6, r6, r3
 800b160:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b162:	2b00      	cmp	r3, #0
 800b164:	dd17      	ble.n	800b196 <_strtod_l+0x73e>
 800b166:	461a      	mov	r2, r3
 800b168:	4650      	mov	r0, sl
 800b16a:	9904      	ldr	r1, [sp, #16]
 800b16c:	f001 fef8 	bl	800cf60 <__pow5mult>
 800b170:	9004      	str	r0, [sp, #16]
 800b172:	2800      	cmp	r0, #0
 800b174:	f43f aeaf 	beq.w	800aed6 <_strtod_l+0x47e>
 800b178:	4601      	mov	r1, r0
 800b17a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b17c:	4650      	mov	r0, sl
 800b17e:	f001 fe47 	bl	800ce10 <__multiply>
 800b182:	9009      	str	r0, [sp, #36]	; 0x24
 800b184:	2800      	cmp	r0, #0
 800b186:	f43f aea6 	beq.w	800aed6 <_strtod_l+0x47e>
 800b18a:	4650      	mov	r0, sl
 800b18c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b18e:	f001 fd29 	bl	800cbe4 <_Bfree>
 800b192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b194:	931a      	str	r3, [sp, #104]	; 0x68
 800b196:	2f00      	cmp	r7, #0
 800b198:	f300 808e 	bgt.w	800b2b8 <_strtod_l+0x860>
 800b19c:	9b07      	ldr	r3, [sp, #28]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	dd08      	ble.n	800b1b4 <_strtod_l+0x75c>
 800b1a2:	4650      	mov	r0, sl
 800b1a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b1a6:	9906      	ldr	r1, [sp, #24]
 800b1a8:	f001 feda 	bl	800cf60 <__pow5mult>
 800b1ac:	9006      	str	r0, [sp, #24]
 800b1ae:	2800      	cmp	r0, #0
 800b1b0:	f43f ae91 	beq.w	800aed6 <_strtod_l+0x47e>
 800b1b4:	2c00      	cmp	r4, #0
 800b1b6:	dd08      	ble.n	800b1ca <_strtod_l+0x772>
 800b1b8:	4622      	mov	r2, r4
 800b1ba:	4650      	mov	r0, sl
 800b1bc:	9906      	ldr	r1, [sp, #24]
 800b1be:	f001 ff29 	bl	800d014 <__lshift>
 800b1c2:	9006      	str	r0, [sp, #24]
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	f43f ae86 	beq.w	800aed6 <_strtod_l+0x47e>
 800b1ca:	2e00      	cmp	r6, #0
 800b1cc:	dd08      	ble.n	800b1e0 <_strtod_l+0x788>
 800b1ce:	4632      	mov	r2, r6
 800b1d0:	4650      	mov	r0, sl
 800b1d2:	9904      	ldr	r1, [sp, #16]
 800b1d4:	f001 ff1e 	bl	800d014 <__lshift>
 800b1d8:	9004      	str	r0, [sp, #16]
 800b1da:	2800      	cmp	r0, #0
 800b1dc:	f43f ae7b 	beq.w	800aed6 <_strtod_l+0x47e>
 800b1e0:	4650      	mov	r0, sl
 800b1e2:	9a06      	ldr	r2, [sp, #24]
 800b1e4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b1e6:	f001 ffa1 	bl	800d12c <__mdiff>
 800b1ea:	4683      	mov	fp, r0
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	f43f ae72 	beq.w	800aed6 <_strtod_l+0x47e>
 800b1f2:	2400      	movs	r4, #0
 800b1f4:	68c3      	ldr	r3, [r0, #12]
 800b1f6:	9904      	ldr	r1, [sp, #16]
 800b1f8:	60c4      	str	r4, [r0, #12]
 800b1fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1fc:	f001 ff7a 	bl	800d0f4 <__mcmp>
 800b200:	42a0      	cmp	r0, r4
 800b202:	da6b      	bge.n	800b2dc <_strtod_l+0x884>
 800b204:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b206:	ea53 0308 	orrs.w	r3, r3, r8
 800b20a:	f040 8091 	bne.w	800b330 <_strtod_l+0x8d8>
 800b20e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b212:	2b00      	cmp	r3, #0
 800b214:	f040 808c 	bne.w	800b330 <_strtod_l+0x8d8>
 800b218:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b21c:	0d1b      	lsrs	r3, r3, #20
 800b21e:	051b      	lsls	r3, r3, #20
 800b220:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b224:	f240 8084 	bls.w	800b330 <_strtod_l+0x8d8>
 800b228:	f8db 3014 	ldr.w	r3, [fp, #20]
 800b22c:	b91b      	cbnz	r3, 800b236 <_strtod_l+0x7de>
 800b22e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b232:	2b01      	cmp	r3, #1
 800b234:	dd7c      	ble.n	800b330 <_strtod_l+0x8d8>
 800b236:	4659      	mov	r1, fp
 800b238:	2201      	movs	r2, #1
 800b23a:	4650      	mov	r0, sl
 800b23c:	f001 feea 	bl	800d014 <__lshift>
 800b240:	9904      	ldr	r1, [sp, #16]
 800b242:	4683      	mov	fp, r0
 800b244:	f001 ff56 	bl	800d0f4 <__mcmp>
 800b248:	2800      	cmp	r0, #0
 800b24a:	dd71      	ble.n	800b330 <_strtod_l+0x8d8>
 800b24c:	9905      	ldr	r1, [sp, #20]
 800b24e:	464b      	mov	r3, r9
 800b250:	4a20      	ldr	r2, [pc, #128]	; (800b2d4 <_strtod_l+0x87c>)
 800b252:	2900      	cmp	r1, #0
 800b254:	f000 808c 	beq.w	800b370 <_strtod_l+0x918>
 800b258:	ea02 0109 	and.w	r1, r2, r9
 800b25c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b260:	f300 8086 	bgt.w	800b370 <_strtod_l+0x918>
 800b264:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b268:	f77f aeaa 	ble.w	800afc0 <_strtod_l+0x568>
 800b26c:	4640      	mov	r0, r8
 800b26e:	4649      	mov	r1, r9
 800b270:	4b19      	ldr	r3, [pc, #100]	; (800b2d8 <_strtod_l+0x880>)
 800b272:	2200      	movs	r2, #0
 800b274:	f7f5 f930 	bl	80004d8 <__aeabi_dmul>
 800b278:	460b      	mov	r3, r1
 800b27a:	4303      	orrs	r3, r0
 800b27c:	bf08      	it	eq
 800b27e:	2322      	moveq	r3, #34	; 0x22
 800b280:	4680      	mov	r8, r0
 800b282:	4689      	mov	r9, r1
 800b284:	bf08      	it	eq
 800b286:	f8ca 3000 	streq.w	r3, [sl]
 800b28a:	e62f      	b.n	800aeec <_strtod_l+0x494>
 800b28c:	f04f 32ff 	mov.w	r2, #4294967295
 800b290:	fa02 f303 	lsl.w	r3, r2, r3
 800b294:	ea03 0808 	and.w	r8, r3, r8
 800b298:	e6e0      	b.n	800b05c <_strtod_l+0x604>
 800b29a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800b29e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800b2a2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800b2a6:	35e2      	adds	r5, #226	; 0xe2
 800b2a8:	fa07 f505 	lsl.w	r5, r7, r5
 800b2ac:	970f      	str	r7, [sp, #60]	; 0x3c
 800b2ae:	e747      	b.n	800b140 <_strtod_l+0x6e8>
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	2500      	movs	r5, #0
 800b2b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2b6:	e743      	b.n	800b140 <_strtod_l+0x6e8>
 800b2b8:	463a      	mov	r2, r7
 800b2ba:	4650      	mov	r0, sl
 800b2bc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b2be:	f001 fea9 	bl	800d014 <__lshift>
 800b2c2:	901a      	str	r0, [sp, #104]	; 0x68
 800b2c4:	2800      	cmp	r0, #0
 800b2c6:	f47f af69 	bne.w	800b19c <_strtod_l+0x744>
 800b2ca:	e604      	b.n	800aed6 <_strtod_l+0x47e>
 800b2cc:	0800e670 	.word	0x0800e670
 800b2d0:	fffffc02 	.word	0xfffffc02
 800b2d4:	7ff00000 	.word	0x7ff00000
 800b2d8:	39500000 	.word	0x39500000
 800b2dc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b2e0:	d165      	bne.n	800b3ae <_strtod_l+0x956>
 800b2e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b2e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2e8:	b35a      	cbz	r2, 800b342 <_strtod_l+0x8ea>
 800b2ea:	4a99      	ldr	r2, [pc, #612]	; (800b550 <_strtod_l+0xaf8>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d12b      	bne.n	800b348 <_strtod_l+0x8f0>
 800b2f0:	9b05      	ldr	r3, [sp, #20]
 800b2f2:	4641      	mov	r1, r8
 800b2f4:	b303      	cbz	r3, 800b338 <_strtod_l+0x8e0>
 800b2f6:	464a      	mov	r2, r9
 800b2f8:	4b96      	ldr	r3, [pc, #600]	; (800b554 <_strtod_l+0xafc>)
 800b2fa:	4013      	ands	r3, r2
 800b2fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b300:	f04f 32ff 	mov.w	r2, #4294967295
 800b304:	d81b      	bhi.n	800b33e <_strtod_l+0x8e6>
 800b306:	0d1b      	lsrs	r3, r3, #20
 800b308:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b30c:	fa02 f303 	lsl.w	r3, r2, r3
 800b310:	4299      	cmp	r1, r3
 800b312:	d119      	bne.n	800b348 <_strtod_l+0x8f0>
 800b314:	4b90      	ldr	r3, [pc, #576]	; (800b558 <_strtod_l+0xb00>)
 800b316:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b318:	429a      	cmp	r2, r3
 800b31a:	d102      	bne.n	800b322 <_strtod_l+0x8ca>
 800b31c:	3101      	adds	r1, #1
 800b31e:	f43f adda 	beq.w	800aed6 <_strtod_l+0x47e>
 800b322:	f04f 0800 	mov.w	r8, #0
 800b326:	4b8b      	ldr	r3, [pc, #556]	; (800b554 <_strtod_l+0xafc>)
 800b328:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b32a:	401a      	ands	r2, r3
 800b32c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800b330:	9b05      	ldr	r3, [sp, #20]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d19a      	bne.n	800b26c <_strtod_l+0x814>
 800b336:	e5d9      	b.n	800aeec <_strtod_l+0x494>
 800b338:	f04f 33ff 	mov.w	r3, #4294967295
 800b33c:	e7e8      	b.n	800b310 <_strtod_l+0x8b8>
 800b33e:	4613      	mov	r3, r2
 800b340:	e7e6      	b.n	800b310 <_strtod_l+0x8b8>
 800b342:	ea53 0308 	orrs.w	r3, r3, r8
 800b346:	d081      	beq.n	800b24c <_strtod_l+0x7f4>
 800b348:	b1e5      	cbz	r5, 800b384 <_strtod_l+0x92c>
 800b34a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b34c:	421d      	tst	r5, r3
 800b34e:	d0ef      	beq.n	800b330 <_strtod_l+0x8d8>
 800b350:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b352:	4640      	mov	r0, r8
 800b354:	4649      	mov	r1, r9
 800b356:	9a05      	ldr	r2, [sp, #20]
 800b358:	b1c3      	cbz	r3, 800b38c <_strtod_l+0x934>
 800b35a:	f7ff fb5b 	bl	800aa14 <sulp>
 800b35e:	4602      	mov	r2, r0
 800b360:	460b      	mov	r3, r1
 800b362:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b366:	f7f4 ff01 	bl	800016c <__adddf3>
 800b36a:	4680      	mov	r8, r0
 800b36c:	4689      	mov	r9, r1
 800b36e:	e7df      	b.n	800b330 <_strtod_l+0x8d8>
 800b370:	4013      	ands	r3, r2
 800b372:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b376:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b37a:	f04f 38ff 	mov.w	r8, #4294967295
 800b37e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b382:	e7d5      	b.n	800b330 <_strtod_l+0x8d8>
 800b384:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b386:	ea13 0f08 	tst.w	r3, r8
 800b38a:	e7e0      	b.n	800b34e <_strtod_l+0x8f6>
 800b38c:	f7ff fb42 	bl	800aa14 <sulp>
 800b390:	4602      	mov	r2, r0
 800b392:	460b      	mov	r3, r1
 800b394:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b398:	f7f4 fee6 	bl	8000168 <__aeabi_dsub>
 800b39c:	2200      	movs	r2, #0
 800b39e:	2300      	movs	r3, #0
 800b3a0:	4680      	mov	r8, r0
 800b3a2:	4689      	mov	r9, r1
 800b3a4:	f7f5 fb00 	bl	80009a8 <__aeabi_dcmpeq>
 800b3a8:	2800      	cmp	r0, #0
 800b3aa:	d0c1      	beq.n	800b330 <_strtod_l+0x8d8>
 800b3ac:	e608      	b.n	800afc0 <_strtod_l+0x568>
 800b3ae:	4658      	mov	r0, fp
 800b3b0:	9904      	ldr	r1, [sp, #16]
 800b3b2:	f002 f81d 	bl	800d3f0 <__ratio>
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b3bc:	4606      	mov	r6, r0
 800b3be:	460f      	mov	r7, r1
 800b3c0:	f7f5 fb06 	bl	80009d0 <__aeabi_dcmple>
 800b3c4:	2800      	cmp	r0, #0
 800b3c6:	d070      	beq.n	800b4aa <_strtod_l+0xa52>
 800b3c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d042      	beq.n	800b454 <_strtod_l+0x9fc>
 800b3ce:	2600      	movs	r6, #0
 800b3d0:	4f62      	ldr	r7, [pc, #392]	; (800b55c <_strtod_l+0xb04>)
 800b3d2:	4d62      	ldr	r5, [pc, #392]	; (800b55c <_strtod_l+0xb04>)
 800b3d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b3da:	0d1b      	lsrs	r3, r3, #20
 800b3dc:	051b      	lsls	r3, r3, #20
 800b3de:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b3e2:	4b5f      	ldr	r3, [pc, #380]	; (800b560 <_strtod_l+0xb08>)
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	f040 80c3 	bne.w	800b570 <_strtod_l+0xb18>
 800b3ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3ec:	4640      	mov	r0, r8
 800b3ee:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800b3f2:	4649      	mov	r1, r9
 800b3f4:	f001 ff26 	bl	800d244 <__ulp>
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	460b      	mov	r3, r1
 800b3fc:	4630      	mov	r0, r6
 800b3fe:	4639      	mov	r1, r7
 800b400:	f7f5 f86a 	bl	80004d8 <__aeabi_dmul>
 800b404:	4642      	mov	r2, r8
 800b406:	464b      	mov	r3, r9
 800b408:	f7f4 feb0 	bl	800016c <__adddf3>
 800b40c:	460b      	mov	r3, r1
 800b40e:	4951      	ldr	r1, [pc, #324]	; (800b554 <_strtod_l+0xafc>)
 800b410:	4a54      	ldr	r2, [pc, #336]	; (800b564 <_strtod_l+0xb0c>)
 800b412:	4019      	ands	r1, r3
 800b414:	4291      	cmp	r1, r2
 800b416:	4680      	mov	r8, r0
 800b418:	d95d      	bls.n	800b4d6 <_strtod_l+0xa7e>
 800b41a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b41c:	4b4e      	ldr	r3, [pc, #312]	; (800b558 <_strtod_l+0xb00>)
 800b41e:	429a      	cmp	r2, r3
 800b420:	d103      	bne.n	800b42a <_strtod_l+0x9d2>
 800b422:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b424:	3301      	adds	r3, #1
 800b426:	f43f ad56 	beq.w	800aed6 <_strtod_l+0x47e>
 800b42a:	f04f 38ff 	mov.w	r8, #4294967295
 800b42e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800b558 <_strtod_l+0xb00>
 800b432:	4650      	mov	r0, sl
 800b434:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b436:	f001 fbd5 	bl	800cbe4 <_Bfree>
 800b43a:	4650      	mov	r0, sl
 800b43c:	9906      	ldr	r1, [sp, #24]
 800b43e:	f001 fbd1 	bl	800cbe4 <_Bfree>
 800b442:	4650      	mov	r0, sl
 800b444:	9904      	ldr	r1, [sp, #16]
 800b446:	f001 fbcd 	bl	800cbe4 <_Bfree>
 800b44a:	4659      	mov	r1, fp
 800b44c:	4650      	mov	r0, sl
 800b44e:	f001 fbc9 	bl	800cbe4 <_Bfree>
 800b452:	e627      	b.n	800b0a4 <_strtod_l+0x64c>
 800b454:	f1b8 0f00 	cmp.w	r8, #0
 800b458:	d119      	bne.n	800b48e <_strtod_l+0xa36>
 800b45a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b45c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b460:	b9e3      	cbnz	r3, 800b49c <_strtod_l+0xa44>
 800b462:	2200      	movs	r2, #0
 800b464:	4630      	mov	r0, r6
 800b466:	4639      	mov	r1, r7
 800b468:	4b3c      	ldr	r3, [pc, #240]	; (800b55c <_strtod_l+0xb04>)
 800b46a:	f7f5 faa7 	bl	80009bc <__aeabi_dcmplt>
 800b46e:	b9c8      	cbnz	r0, 800b4a4 <_strtod_l+0xa4c>
 800b470:	2200      	movs	r2, #0
 800b472:	4630      	mov	r0, r6
 800b474:	4639      	mov	r1, r7
 800b476:	4b3c      	ldr	r3, [pc, #240]	; (800b568 <_strtod_l+0xb10>)
 800b478:	f7f5 f82e 	bl	80004d8 <__aeabi_dmul>
 800b47c:	4604      	mov	r4, r0
 800b47e:	460d      	mov	r5, r1
 800b480:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b484:	9416      	str	r4, [sp, #88]	; 0x58
 800b486:	9317      	str	r3, [sp, #92]	; 0x5c
 800b488:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800b48c:	e7a2      	b.n	800b3d4 <_strtod_l+0x97c>
 800b48e:	f1b8 0f01 	cmp.w	r8, #1
 800b492:	d103      	bne.n	800b49c <_strtod_l+0xa44>
 800b494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b496:	2b00      	cmp	r3, #0
 800b498:	f43f ad92 	beq.w	800afc0 <_strtod_l+0x568>
 800b49c:	2600      	movs	r6, #0
 800b49e:	2400      	movs	r4, #0
 800b4a0:	4f32      	ldr	r7, [pc, #200]	; (800b56c <_strtod_l+0xb14>)
 800b4a2:	e796      	b.n	800b3d2 <_strtod_l+0x97a>
 800b4a4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b4a6:	4d30      	ldr	r5, [pc, #192]	; (800b568 <_strtod_l+0xb10>)
 800b4a8:	e7ea      	b.n	800b480 <_strtod_l+0xa28>
 800b4aa:	4b2f      	ldr	r3, [pc, #188]	; (800b568 <_strtod_l+0xb10>)
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	4630      	mov	r0, r6
 800b4b0:	4639      	mov	r1, r7
 800b4b2:	f7f5 f811 	bl	80004d8 <__aeabi_dmul>
 800b4b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4b8:	4604      	mov	r4, r0
 800b4ba:	460d      	mov	r5, r1
 800b4bc:	b933      	cbnz	r3, 800b4cc <_strtod_l+0xa74>
 800b4be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b4c2:	9010      	str	r0, [sp, #64]	; 0x40
 800b4c4:	9311      	str	r3, [sp, #68]	; 0x44
 800b4c6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b4ca:	e783      	b.n	800b3d4 <_strtod_l+0x97c>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b4d4:	e7f7      	b.n	800b4c6 <_strtod_l+0xa6e>
 800b4d6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b4da:	9b05      	ldr	r3, [sp, #20]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d1a8      	bne.n	800b432 <_strtod_l+0x9da>
 800b4e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b4e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b4e6:	0d1b      	lsrs	r3, r3, #20
 800b4e8:	051b      	lsls	r3, r3, #20
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	d1a1      	bne.n	800b432 <_strtod_l+0x9da>
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	4629      	mov	r1, r5
 800b4f2:	f7f5 fd97 	bl	8001024 <__aeabi_d2lz>
 800b4f6:	f7f4 ffc1 	bl	800047c <__aeabi_l2d>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	4620      	mov	r0, r4
 800b500:	4629      	mov	r1, r5
 800b502:	f7f4 fe31 	bl	8000168 <__aeabi_dsub>
 800b506:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b508:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b50c:	ea43 0308 	orr.w	r3, r3, r8
 800b510:	4313      	orrs	r3, r2
 800b512:	4604      	mov	r4, r0
 800b514:	460d      	mov	r5, r1
 800b516:	d066      	beq.n	800b5e6 <_strtod_l+0xb8e>
 800b518:	a309      	add	r3, pc, #36	; (adr r3, 800b540 <_strtod_l+0xae8>)
 800b51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51e:	f7f5 fa4d 	bl	80009bc <__aeabi_dcmplt>
 800b522:	2800      	cmp	r0, #0
 800b524:	f47f ace2 	bne.w	800aeec <_strtod_l+0x494>
 800b528:	a307      	add	r3, pc, #28	; (adr r3, 800b548 <_strtod_l+0xaf0>)
 800b52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52e:	4620      	mov	r0, r4
 800b530:	4629      	mov	r1, r5
 800b532:	f7f5 fa61 	bl	80009f8 <__aeabi_dcmpgt>
 800b536:	2800      	cmp	r0, #0
 800b538:	f43f af7b 	beq.w	800b432 <_strtod_l+0x9da>
 800b53c:	e4d6      	b.n	800aeec <_strtod_l+0x494>
 800b53e:	bf00      	nop
 800b540:	94a03595 	.word	0x94a03595
 800b544:	3fdfffff 	.word	0x3fdfffff
 800b548:	35afe535 	.word	0x35afe535
 800b54c:	3fe00000 	.word	0x3fe00000
 800b550:	000fffff 	.word	0x000fffff
 800b554:	7ff00000 	.word	0x7ff00000
 800b558:	7fefffff 	.word	0x7fefffff
 800b55c:	3ff00000 	.word	0x3ff00000
 800b560:	7fe00000 	.word	0x7fe00000
 800b564:	7c9fffff 	.word	0x7c9fffff
 800b568:	3fe00000 	.word	0x3fe00000
 800b56c:	bff00000 	.word	0xbff00000
 800b570:	9b05      	ldr	r3, [sp, #20]
 800b572:	b313      	cbz	r3, 800b5ba <_strtod_l+0xb62>
 800b574:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b576:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b57a:	d81e      	bhi.n	800b5ba <_strtod_l+0xb62>
 800b57c:	a326      	add	r3, pc, #152	; (adr r3, 800b618 <_strtod_l+0xbc0>)
 800b57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b582:	4620      	mov	r0, r4
 800b584:	4629      	mov	r1, r5
 800b586:	f7f5 fa23 	bl	80009d0 <__aeabi_dcmple>
 800b58a:	b190      	cbz	r0, 800b5b2 <_strtod_l+0xb5a>
 800b58c:	4629      	mov	r1, r5
 800b58e:	4620      	mov	r0, r4
 800b590:	f7f5 fa7a 	bl	8000a88 <__aeabi_d2uiz>
 800b594:	2801      	cmp	r0, #1
 800b596:	bf38      	it	cc
 800b598:	2001      	movcc	r0, #1
 800b59a:	f7f4 ff23 	bl	80003e4 <__aeabi_ui2d>
 800b59e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5a0:	4604      	mov	r4, r0
 800b5a2:	460d      	mov	r5, r1
 800b5a4:	b9d3      	cbnz	r3, 800b5dc <_strtod_l+0xb84>
 800b5a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5aa:	9012      	str	r0, [sp, #72]	; 0x48
 800b5ac:	9313      	str	r3, [sp, #76]	; 0x4c
 800b5ae:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800b5b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b5b4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800b5b8:	1a9f      	subs	r7, r3, r2
 800b5ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b5be:	f001 fe41 	bl	800d244 <__ulp>
 800b5c2:	4602      	mov	r2, r0
 800b5c4:	460b      	mov	r3, r1
 800b5c6:	4630      	mov	r0, r6
 800b5c8:	4639      	mov	r1, r7
 800b5ca:	f7f4 ff85 	bl	80004d8 <__aeabi_dmul>
 800b5ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b5d2:	f7f4 fdcb 	bl	800016c <__adddf3>
 800b5d6:	4680      	mov	r8, r0
 800b5d8:	4689      	mov	r9, r1
 800b5da:	e77e      	b.n	800b4da <_strtod_l+0xa82>
 800b5dc:	4602      	mov	r2, r0
 800b5de:	460b      	mov	r3, r1
 800b5e0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800b5e4:	e7e3      	b.n	800b5ae <_strtod_l+0xb56>
 800b5e6:	a30e      	add	r3, pc, #56	; (adr r3, 800b620 <_strtod_l+0xbc8>)
 800b5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ec:	f7f5 f9e6 	bl	80009bc <__aeabi_dcmplt>
 800b5f0:	e7a1      	b.n	800b536 <_strtod_l+0xade>
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	930a      	str	r3, [sp, #40]	; 0x28
 800b5f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b5f8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b5fa:	6013      	str	r3, [r2, #0]
 800b5fc:	f7ff ba71 	b.w	800aae2 <_strtod_l+0x8a>
 800b600:	2a65      	cmp	r2, #101	; 0x65
 800b602:	f43f ab63 	beq.w	800accc <_strtod_l+0x274>
 800b606:	2a45      	cmp	r2, #69	; 0x45
 800b608:	f43f ab60 	beq.w	800accc <_strtod_l+0x274>
 800b60c:	2301      	movs	r3, #1
 800b60e:	f7ff bb95 	b.w	800ad3c <_strtod_l+0x2e4>
 800b612:	bf00      	nop
 800b614:	f3af 8000 	nop.w
 800b618:	ffc00000 	.word	0xffc00000
 800b61c:	41dfffff 	.word	0x41dfffff
 800b620:	94a03595 	.word	0x94a03595
 800b624:	3fcfffff 	.word	0x3fcfffff

0800b628 <_strtod_r>:
 800b628:	4b01      	ldr	r3, [pc, #4]	; (800b630 <_strtod_r+0x8>)
 800b62a:	f7ff ba15 	b.w	800aa58 <_strtod_l>
 800b62e:	bf00      	nop
 800b630:	200001e4 	.word	0x200001e4

0800b634 <_strtol_l.constprop.0>:
 800b634:	2b01      	cmp	r3, #1
 800b636:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b63a:	4680      	mov	r8, r0
 800b63c:	d001      	beq.n	800b642 <_strtol_l.constprop.0+0xe>
 800b63e:	2b24      	cmp	r3, #36	; 0x24
 800b640:	d906      	bls.n	800b650 <_strtol_l.constprop.0+0x1c>
 800b642:	f7fe fb23 	bl	8009c8c <__errno>
 800b646:	2316      	movs	r3, #22
 800b648:	6003      	str	r3, [r0, #0]
 800b64a:	2000      	movs	r0, #0
 800b64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b650:	460d      	mov	r5, r1
 800b652:	4f35      	ldr	r7, [pc, #212]	; (800b728 <_strtol_l.constprop.0+0xf4>)
 800b654:	4628      	mov	r0, r5
 800b656:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b65a:	5de6      	ldrb	r6, [r4, r7]
 800b65c:	f016 0608 	ands.w	r6, r6, #8
 800b660:	d1f8      	bne.n	800b654 <_strtol_l.constprop.0+0x20>
 800b662:	2c2d      	cmp	r4, #45	; 0x2d
 800b664:	d12f      	bne.n	800b6c6 <_strtol_l.constprop.0+0x92>
 800b666:	2601      	movs	r6, #1
 800b668:	782c      	ldrb	r4, [r5, #0]
 800b66a:	1c85      	adds	r5, r0, #2
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d057      	beq.n	800b720 <_strtol_l.constprop.0+0xec>
 800b670:	2b10      	cmp	r3, #16
 800b672:	d109      	bne.n	800b688 <_strtol_l.constprop.0+0x54>
 800b674:	2c30      	cmp	r4, #48	; 0x30
 800b676:	d107      	bne.n	800b688 <_strtol_l.constprop.0+0x54>
 800b678:	7828      	ldrb	r0, [r5, #0]
 800b67a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b67e:	2858      	cmp	r0, #88	; 0x58
 800b680:	d149      	bne.n	800b716 <_strtol_l.constprop.0+0xe2>
 800b682:	2310      	movs	r3, #16
 800b684:	786c      	ldrb	r4, [r5, #1]
 800b686:	3502      	adds	r5, #2
 800b688:	2700      	movs	r7, #0
 800b68a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800b68e:	f10e 3eff 	add.w	lr, lr, #4294967295
 800b692:	fbbe f9f3 	udiv	r9, lr, r3
 800b696:	4638      	mov	r0, r7
 800b698:	fb03 ea19 	mls	sl, r3, r9, lr
 800b69c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b6a0:	f1bc 0f09 	cmp.w	ip, #9
 800b6a4:	d814      	bhi.n	800b6d0 <_strtol_l.constprop.0+0x9c>
 800b6a6:	4664      	mov	r4, ip
 800b6a8:	42a3      	cmp	r3, r4
 800b6aa:	dd22      	ble.n	800b6f2 <_strtol_l.constprop.0+0xbe>
 800b6ac:	2f00      	cmp	r7, #0
 800b6ae:	db1d      	blt.n	800b6ec <_strtol_l.constprop.0+0xb8>
 800b6b0:	4581      	cmp	r9, r0
 800b6b2:	d31b      	bcc.n	800b6ec <_strtol_l.constprop.0+0xb8>
 800b6b4:	d101      	bne.n	800b6ba <_strtol_l.constprop.0+0x86>
 800b6b6:	45a2      	cmp	sl, r4
 800b6b8:	db18      	blt.n	800b6ec <_strtol_l.constprop.0+0xb8>
 800b6ba:	2701      	movs	r7, #1
 800b6bc:	fb00 4003 	mla	r0, r0, r3, r4
 800b6c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b6c4:	e7ea      	b.n	800b69c <_strtol_l.constprop.0+0x68>
 800b6c6:	2c2b      	cmp	r4, #43	; 0x2b
 800b6c8:	bf04      	itt	eq
 800b6ca:	782c      	ldrbeq	r4, [r5, #0]
 800b6cc:	1c85      	addeq	r5, r0, #2
 800b6ce:	e7cd      	b.n	800b66c <_strtol_l.constprop.0+0x38>
 800b6d0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b6d4:	f1bc 0f19 	cmp.w	ip, #25
 800b6d8:	d801      	bhi.n	800b6de <_strtol_l.constprop.0+0xaa>
 800b6da:	3c37      	subs	r4, #55	; 0x37
 800b6dc:	e7e4      	b.n	800b6a8 <_strtol_l.constprop.0+0x74>
 800b6de:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b6e2:	f1bc 0f19 	cmp.w	ip, #25
 800b6e6:	d804      	bhi.n	800b6f2 <_strtol_l.constprop.0+0xbe>
 800b6e8:	3c57      	subs	r4, #87	; 0x57
 800b6ea:	e7dd      	b.n	800b6a8 <_strtol_l.constprop.0+0x74>
 800b6ec:	f04f 37ff 	mov.w	r7, #4294967295
 800b6f0:	e7e6      	b.n	800b6c0 <_strtol_l.constprop.0+0x8c>
 800b6f2:	2f00      	cmp	r7, #0
 800b6f4:	da07      	bge.n	800b706 <_strtol_l.constprop.0+0xd2>
 800b6f6:	2322      	movs	r3, #34	; 0x22
 800b6f8:	4670      	mov	r0, lr
 800b6fa:	f8c8 3000 	str.w	r3, [r8]
 800b6fe:	2a00      	cmp	r2, #0
 800b700:	d0a4      	beq.n	800b64c <_strtol_l.constprop.0+0x18>
 800b702:	1e69      	subs	r1, r5, #1
 800b704:	e005      	b.n	800b712 <_strtol_l.constprop.0+0xde>
 800b706:	b106      	cbz	r6, 800b70a <_strtol_l.constprop.0+0xd6>
 800b708:	4240      	negs	r0, r0
 800b70a:	2a00      	cmp	r2, #0
 800b70c:	d09e      	beq.n	800b64c <_strtol_l.constprop.0+0x18>
 800b70e:	2f00      	cmp	r7, #0
 800b710:	d1f7      	bne.n	800b702 <_strtol_l.constprop.0+0xce>
 800b712:	6011      	str	r1, [r2, #0]
 800b714:	e79a      	b.n	800b64c <_strtol_l.constprop.0+0x18>
 800b716:	2430      	movs	r4, #48	; 0x30
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d1b5      	bne.n	800b688 <_strtol_l.constprop.0+0x54>
 800b71c:	2308      	movs	r3, #8
 800b71e:	e7b3      	b.n	800b688 <_strtol_l.constprop.0+0x54>
 800b720:	2c30      	cmp	r4, #48	; 0x30
 800b722:	d0a9      	beq.n	800b678 <_strtol_l.constprop.0+0x44>
 800b724:	230a      	movs	r3, #10
 800b726:	e7af      	b.n	800b688 <_strtol_l.constprop.0+0x54>
 800b728:	0800e699 	.word	0x0800e699

0800b72c <_strtol_r>:
 800b72c:	f7ff bf82 	b.w	800b634 <_strtol_l.constprop.0>

0800b730 <quorem>:
 800b730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b734:	6903      	ldr	r3, [r0, #16]
 800b736:	690c      	ldr	r4, [r1, #16]
 800b738:	4607      	mov	r7, r0
 800b73a:	42a3      	cmp	r3, r4
 800b73c:	f2c0 8082 	blt.w	800b844 <quorem+0x114>
 800b740:	3c01      	subs	r4, #1
 800b742:	f100 0514 	add.w	r5, r0, #20
 800b746:	f101 0814 	add.w	r8, r1, #20
 800b74a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b74e:	9301      	str	r3, [sp, #4]
 800b750:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b754:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b758:	3301      	adds	r3, #1
 800b75a:	429a      	cmp	r2, r3
 800b75c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b760:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b764:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b768:	d331      	bcc.n	800b7ce <quorem+0x9e>
 800b76a:	f04f 0e00 	mov.w	lr, #0
 800b76e:	4640      	mov	r0, r8
 800b770:	46ac      	mov	ip, r5
 800b772:	46f2      	mov	sl, lr
 800b774:	f850 2b04 	ldr.w	r2, [r0], #4
 800b778:	b293      	uxth	r3, r2
 800b77a:	fb06 e303 	mla	r3, r6, r3, lr
 800b77e:	0c12      	lsrs	r2, r2, #16
 800b780:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b784:	b29b      	uxth	r3, r3
 800b786:	fb06 e202 	mla	r2, r6, r2, lr
 800b78a:	ebaa 0303 	sub.w	r3, sl, r3
 800b78e:	f8dc a000 	ldr.w	sl, [ip]
 800b792:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b796:	fa1f fa8a 	uxth.w	sl, sl
 800b79a:	4453      	add	r3, sl
 800b79c:	f8dc a000 	ldr.w	sl, [ip]
 800b7a0:	b292      	uxth	r2, r2
 800b7a2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b7a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b7aa:	b29b      	uxth	r3, r3
 800b7ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7b0:	4581      	cmp	r9, r0
 800b7b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b7b6:	f84c 3b04 	str.w	r3, [ip], #4
 800b7ba:	d2db      	bcs.n	800b774 <quorem+0x44>
 800b7bc:	f855 300b 	ldr.w	r3, [r5, fp]
 800b7c0:	b92b      	cbnz	r3, 800b7ce <quorem+0x9e>
 800b7c2:	9b01      	ldr	r3, [sp, #4]
 800b7c4:	3b04      	subs	r3, #4
 800b7c6:	429d      	cmp	r5, r3
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	d32f      	bcc.n	800b82c <quorem+0xfc>
 800b7cc:	613c      	str	r4, [r7, #16]
 800b7ce:	4638      	mov	r0, r7
 800b7d0:	f001 fc90 	bl	800d0f4 <__mcmp>
 800b7d4:	2800      	cmp	r0, #0
 800b7d6:	db25      	blt.n	800b824 <quorem+0xf4>
 800b7d8:	4628      	mov	r0, r5
 800b7da:	f04f 0c00 	mov.w	ip, #0
 800b7de:	3601      	adds	r6, #1
 800b7e0:	f858 1b04 	ldr.w	r1, [r8], #4
 800b7e4:	f8d0 e000 	ldr.w	lr, [r0]
 800b7e8:	b28b      	uxth	r3, r1
 800b7ea:	ebac 0303 	sub.w	r3, ip, r3
 800b7ee:	fa1f f28e 	uxth.w	r2, lr
 800b7f2:	4413      	add	r3, r2
 800b7f4:	0c0a      	lsrs	r2, r1, #16
 800b7f6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b7fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b804:	45c1      	cmp	r9, r8
 800b806:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b80a:	f840 3b04 	str.w	r3, [r0], #4
 800b80e:	d2e7      	bcs.n	800b7e0 <quorem+0xb0>
 800b810:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b814:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b818:	b922      	cbnz	r2, 800b824 <quorem+0xf4>
 800b81a:	3b04      	subs	r3, #4
 800b81c:	429d      	cmp	r5, r3
 800b81e:	461a      	mov	r2, r3
 800b820:	d30a      	bcc.n	800b838 <quorem+0x108>
 800b822:	613c      	str	r4, [r7, #16]
 800b824:	4630      	mov	r0, r6
 800b826:	b003      	add	sp, #12
 800b828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b82c:	6812      	ldr	r2, [r2, #0]
 800b82e:	3b04      	subs	r3, #4
 800b830:	2a00      	cmp	r2, #0
 800b832:	d1cb      	bne.n	800b7cc <quorem+0x9c>
 800b834:	3c01      	subs	r4, #1
 800b836:	e7c6      	b.n	800b7c6 <quorem+0x96>
 800b838:	6812      	ldr	r2, [r2, #0]
 800b83a:	3b04      	subs	r3, #4
 800b83c:	2a00      	cmp	r2, #0
 800b83e:	d1f0      	bne.n	800b822 <quorem+0xf2>
 800b840:	3c01      	subs	r4, #1
 800b842:	e7eb      	b.n	800b81c <quorem+0xec>
 800b844:	2000      	movs	r0, #0
 800b846:	e7ee      	b.n	800b826 <quorem+0xf6>

0800b848 <_dtoa_r>:
 800b848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b84c:	4616      	mov	r6, r2
 800b84e:	461f      	mov	r7, r3
 800b850:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b852:	b099      	sub	sp, #100	; 0x64
 800b854:	4605      	mov	r5, r0
 800b856:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b85a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b85e:	b974      	cbnz	r4, 800b87e <_dtoa_r+0x36>
 800b860:	2010      	movs	r0, #16
 800b862:	f001 f949 	bl	800caf8 <malloc>
 800b866:	4602      	mov	r2, r0
 800b868:	6268      	str	r0, [r5, #36]	; 0x24
 800b86a:	b920      	cbnz	r0, 800b876 <_dtoa_r+0x2e>
 800b86c:	21ea      	movs	r1, #234	; 0xea
 800b86e:	4ba8      	ldr	r3, [pc, #672]	; (800bb10 <_dtoa_r+0x2c8>)
 800b870:	48a8      	ldr	r0, [pc, #672]	; (800bb14 <_dtoa_r+0x2cc>)
 800b872:	f002 f8b3 	bl	800d9dc <__assert_func>
 800b876:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b87a:	6004      	str	r4, [r0, #0]
 800b87c:	60c4      	str	r4, [r0, #12]
 800b87e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b880:	6819      	ldr	r1, [r3, #0]
 800b882:	b151      	cbz	r1, 800b89a <_dtoa_r+0x52>
 800b884:	685a      	ldr	r2, [r3, #4]
 800b886:	2301      	movs	r3, #1
 800b888:	4093      	lsls	r3, r2
 800b88a:	604a      	str	r2, [r1, #4]
 800b88c:	608b      	str	r3, [r1, #8]
 800b88e:	4628      	mov	r0, r5
 800b890:	f001 f9a8 	bl	800cbe4 <_Bfree>
 800b894:	2200      	movs	r2, #0
 800b896:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b898:	601a      	str	r2, [r3, #0]
 800b89a:	1e3b      	subs	r3, r7, #0
 800b89c:	bfaf      	iteee	ge
 800b89e:	2300      	movge	r3, #0
 800b8a0:	2201      	movlt	r2, #1
 800b8a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b8a6:	9305      	strlt	r3, [sp, #20]
 800b8a8:	bfa8      	it	ge
 800b8aa:	f8c8 3000 	strge.w	r3, [r8]
 800b8ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b8b2:	4b99      	ldr	r3, [pc, #612]	; (800bb18 <_dtoa_r+0x2d0>)
 800b8b4:	bfb8      	it	lt
 800b8b6:	f8c8 2000 	strlt.w	r2, [r8]
 800b8ba:	ea33 0309 	bics.w	r3, r3, r9
 800b8be:	d119      	bne.n	800b8f4 <_dtoa_r+0xac>
 800b8c0:	f242 730f 	movw	r3, #9999	; 0x270f
 800b8c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b8c6:	6013      	str	r3, [r2, #0]
 800b8c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b8cc:	4333      	orrs	r3, r6
 800b8ce:	f000 857f 	beq.w	800c3d0 <_dtoa_r+0xb88>
 800b8d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b8d4:	b953      	cbnz	r3, 800b8ec <_dtoa_r+0xa4>
 800b8d6:	4b91      	ldr	r3, [pc, #580]	; (800bb1c <_dtoa_r+0x2d4>)
 800b8d8:	e022      	b.n	800b920 <_dtoa_r+0xd8>
 800b8da:	4b91      	ldr	r3, [pc, #580]	; (800bb20 <_dtoa_r+0x2d8>)
 800b8dc:	9303      	str	r3, [sp, #12]
 800b8de:	3308      	adds	r3, #8
 800b8e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b8e2:	6013      	str	r3, [r2, #0]
 800b8e4:	9803      	ldr	r0, [sp, #12]
 800b8e6:	b019      	add	sp, #100	; 0x64
 800b8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ec:	4b8b      	ldr	r3, [pc, #556]	; (800bb1c <_dtoa_r+0x2d4>)
 800b8ee:	9303      	str	r3, [sp, #12]
 800b8f0:	3303      	adds	r3, #3
 800b8f2:	e7f5      	b.n	800b8e0 <_dtoa_r+0x98>
 800b8f4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b8f8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b8fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b900:	2200      	movs	r2, #0
 800b902:	2300      	movs	r3, #0
 800b904:	f7f5 f850 	bl	80009a8 <__aeabi_dcmpeq>
 800b908:	4680      	mov	r8, r0
 800b90a:	b158      	cbz	r0, 800b924 <_dtoa_r+0xdc>
 800b90c:	2301      	movs	r3, #1
 800b90e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b910:	6013      	str	r3, [r2, #0]
 800b912:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b914:	2b00      	cmp	r3, #0
 800b916:	f000 8558 	beq.w	800c3ca <_dtoa_r+0xb82>
 800b91a:	4882      	ldr	r0, [pc, #520]	; (800bb24 <_dtoa_r+0x2dc>)
 800b91c:	6018      	str	r0, [r3, #0]
 800b91e:	1e43      	subs	r3, r0, #1
 800b920:	9303      	str	r3, [sp, #12]
 800b922:	e7df      	b.n	800b8e4 <_dtoa_r+0x9c>
 800b924:	ab16      	add	r3, sp, #88	; 0x58
 800b926:	9301      	str	r3, [sp, #4]
 800b928:	ab17      	add	r3, sp, #92	; 0x5c
 800b92a:	9300      	str	r3, [sp, #0]
 800b92c:	4628      	mov	r0, r5
 800b92e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b932:	f001 fd01 	bl	800d338 <__d2b>
 800b936:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b93a:	4683      	mov	fp, r0
 800b93c:	2c00      	cmp	r4, #0
 800b93e:	d07f      	beq.n	800ba40 <_dtoa_r+0x1f8>
 800b940:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b944:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b946:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b94a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b94e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b952:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b956:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b95a:	2200      	movs	r2, #0
 800b95c:	4b72      	ldr	r3, [pc, #456]	; (800bb28 <_dtoa_r+0x2e0>)
 800b95e:	f7f4 fc03 	bl	8000168 <__aeabi_dsub>
 800b962:	a365      	add	r3, pc, #404	; (adr r3, 800baf8 <_dtoa_r+0x2b0>)
 800b964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b968:	f7f4 fdb6 	bl	80004d8 <__aeabi_dmul>
 800b96c:	a364      	add	r3, pc, #400	; (adr r3, 800bb00 <_dtoa_r+0x2b8>)
 800b96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b972:	f7f4 fbfb 	bl	800016c <__adddf3>
 800b976:	4606      	mov	r6, r0
 800b978:	4620      	mov	r0, r4
 800b97a:	460f      	mov	r7, r1
 800b97c:	f7f4 fd42 	bl	8000404 <__aeabi_i2d>
 800b980:	a361      	add	r3, pc, #388	; (adr r3, 800bb08 <_dtoa_r+0x2c0>)
 800b982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b986:	f7f4 fda7 	bl	80004d8 <__aeabi_dmul>
 800b98a:	4602      	mov	r2, r0
 800b98c:	460b      	mov	r3, r1
 800b98e:	4630      	mov	r0, r6
 800b990:	4639      	mov	r1, r7
 800b992:	f7f4 fbeb 	bl	800016c <__adddf3>
 800b996:	4606      	mov	r6, r0
 800b998:	460f      	mov	r7, r1
 800b99a:	f7f5 f84d 	bl	8000a38 <__aeabi_d2iz>
 800b99e:	2200      	movs	r2, #0
 800b9a0:	4682      	mov	sl, r0
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	4630      	mov	r0, r6
 800b9a6:	4639      	mov	r1, r7
 800b9a8:	f7f5 f808 	bl	80009bc <__aeabi_dcmplt>
 800b9ac:	b148      	cbz	r0, 800b9c2 <_dtoa_r+0x17a>
 800b9ae:	4650      	mov	r0, sl
 800b9b0:	f7f4 fd28 	bl	8000404 <__aeabi_i2d>
 800b9b4:	4632      	mov	r2, r6
 800b9b6:	463b      	mov	r3, r7
 800b9b8:	f7f4 fff6 	bl	80009a8 <__aeabi_dcmpeq>
 800b9bc:	b908      	cbnz	r0, 800b9c2 <_dtoa_r+0x17a>
 800b9be:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b9c2:	f1ba 0f16 	cmp.w	sl, #22
 800b9c6:	d858      	bhi.n	800ba7a <_dtoa_r+0x232>
 800b9c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b9cc:	4b57      	ldr	r3, [pc, #348]	; (800bb2c <_dtoa_r+0x2e4>)
 800b9ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d6:	f7f4 fff1 	bl	80009bc <__aeabi_dcmplt>
 800b9da:	2800      	cmp	r0, #0
 800b9dc:	d04f      	beq.n	800ba7e <_dtoa_r+0x236>
 800b9de:	2300      	movs	r3, #0
 800b9e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b9e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b9e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b9e8:	1b1c      	subs	r4, r3, r4
 800b9ea:	1e63      	subs	r3, r4, #1
 800b9ec:	9309      	str	r3, [sp, #36]	; 0x24
 800b9ee:	bf49      	itett	mi
 800b9f0:	f1c4 0301 	rsbmi	r3, r4, #1
 800b9f4:	2300      	movpl	r3, #0
 800b9f6:	9306      	strmi	r3, [sp, #24]
 800b9f8:	2300      	movmi	r3, #0
 800b9fa:	bf54      	ite	pl
 800b9fc:	9306      	strpl	r3, [sp, #24]
 800b9fe:	9309      	strmi	r3, [sp, #36]	; 0x24
 800ba00:	f1ba 0f00 	cmp.w	sl, #0
 800ba04:	db3d      	blt.n	800ba82 <_dtoa_r+0x23a>
 800ba06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba08:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ba0c:	4453      	add	r3, sl
 800ba0e:	9309      	str	r3, [sp, #36]	; 0x24
 800ba10:	2300      	movs	r3, #0
 800ba12:	930a      	str	r3, [sp, #40]	; 0x28
 800ba14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba16:	2b09      	cmp	r3, #9
 800ba18:	f200 808c 	bhi.w	800bb34 <_dtoa_r+0x2ec>
 800ba1c:	2b05      	cmp	r3, #5
 800ba1e:	bfc4      	itt	gt
 800ba20:	3b04      	subgt	r3, #4
 800ba22:	9322      	strgt	r3, [sp, #136]	; 0x88
 800ba24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba26:	bfc8      	it	gt
 800ba28:	2400      	movgt	r4, #0
 800ba2a:	f1a3 0302 	sub.w	r3, r3, #2
 800ba2e:	bfd8      	it	le
 800ba30:	2401      	movle	r4, #1
 800ba32:	2b03      	cmp	r3, #3
 800ba34:	f200 808a 	bhi.w	800bb4c <_dtoa_r+0x304>
 800ba38:	e8df f003 	tbb	[pc, r3]
 800ba3c:	5b4d4f2d 	.word	0x5b4d4f2d
 800ba40:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800ba44:	441c      	add	r4, r3
 800ba46:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800ba4a:	2b20      	cmp	r3, #32
 800ba4c:	bfc3      	ittte	gt
 800ba4e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ba52:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800ba56:	fa09 f303 	lslgt.w	r3, r9, r3
 800ba5a:	f1c3 0320 	rsble	r3, r3, #32
 800ba5e:	bfc6      	itte	gt
 800ba60:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ba64:	4318      	orrgt	r0, r3
 800ba66:	fa06 f003 	lslle.w	r0, r6, r3
 800ba6a:	f7f4 fcbb 	bl	80003e4 <__aeabi_ui2d>
 800ba6e:	2301      	movs	r3, #1
 800ba70:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ba74:	3c01      	subs	r4, #1
 800ba76:	9313      	str	r3, [sp, #76]	; 0x4c
 800ba78:	e76f      	b.n	800b95a <_dtoa_r+0x112>
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	e7b2      	b.n	800b9e4 <_dtoa_r+0x19c>
 800ba7e:	900f      	str	r0, [sp, #60]	; 0x3c
 800ba80:	e7b1      	b.n	800b9e6 <_dtoa_r+0x19e>
 800ba82:	9b06      	ldr	r3, [sp, #24]
 800ba84:	eba3 030a 	sub.w	r3, r3, sl
 800ba88:	9306      	str	r3, [sp, #24]
 800ba8a:	f1ca 0300 	rsb	r3, sl, #0
 800ba8e:	930a      	str	r3, [sp, #40]	; 0x28
 800ba90:	2300      	movs	r3, #0
 800ba92:	930e      	str	r3, [sp, #56]	; 0x38
 800ba94:	e7be      	b.n	800ba14 <_dtoa_r+0x1cc>
 800ba96:	2300      	movs	r3, #0
 800ba98:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	dc58      	bgt.n	800bb52 <_dtoa_r+0x30a>
 800baa0:	f04f 0901 	mov.w	r9, #1
 800baa4:	464b      	mov	r3, r9
 800baa6:	f8cd 9020 	str.w	r9, [sp, #32]
 800baaa:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800baae:	2200      	movs	r2, #0
 800bab0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800bab2:	6042      	str	r2, [r0, #4]
 800bab4:	2204      	movs	r2, #4
 800bab6:	f102 0614 	add.w	r6, r2, #20
 800baba:	429e      	cmp	r6, r3
 800babc:	6841      	ldr	r1, [r0, #4]
 800babe:	d94e      	bls.n	800bb5e <_dtoa_r+0x316>
 800bac0:	4628      	mov	r0, r5
 800bac2:	f001 f84f 	bl	800cb64 <_Balloc>
 800bac6:	9003      	str	r0, [sp, #12]
 800bac8:	2800      	cmp	r0, #0
 800baca:	d14c      	bne.n	800bb66 <_dtoa_r+0x31e>
 800bacc:	4602      	mov	r2, r0
 800bace:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bad2:	4b17      	ldr	r3, [pc, #92]	; (800bb30 <_dtoa_r+0x2e8>)
 800bad4:	e6cc      	b.n	800b870 <_dtoa_r+0x28>
 800bad6:	2301      	movs	r3, #1
 800bad8:	e7de      	b.n	800ba98 <_dtoa_r+0x250>
 800bada:	2300      	movs	r3, #0
 800badc:	930b      	str	r3, [sp, #44]	; 0x2c
 800bade:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bae0:	eb0a 0903 	add.w	r9, sl, r3
 800bae4:	f109 0301 	add.w	r3, r9, #1
 800bae8:	2b01      	cmp	r3, #1
 800baea:	9308      	str	r3, [sp, #32]
 800baec:	bfb8      	it	lt
 800baee:	2301      	movlt	r3, #1
 800baf0:	e7dd      	b.n	800baae <_dtoa_r+0x266>
 800baf2:	2301      	movs	r3, #1
 800baf4:	e7f2      	b.n	800badc <_dtoa_r+0x294>
 800baf6:	bf00      	nop
 800baf8:	636f4361 	.word	0x636f4361
 800bafc:	3fd287a7 	.word	0x3fd287a7
 800bb00:	8b60c8b3 	.word	0x8b60c8b3
 800bb04:	3fc68a28 	.word	0x3fc68a28
 800bb08:	509f79fb 	.word	0x509f79fb
 800bb0c:	3fd34413 	.word	0x3fd34413
 800bb10:	0800e7a6 	.word	0x0800e7a6
 800bb14:	0800e7bd 	.word	0x0800e7bd
 800bb18:	7ff00000 	.word	0x7ff00000
 800bb1c:	0800e7a2 	.word	0x0800e7a2
 800bb20:	0800e799 	.word	0x0800e799
 800bb24:	0800e619 	.word	0x0800e619
 800bb28:	3ff80000 	.word	0x3ff80000
 800bb2c:	0800e928 	.word	0x0800e928
 800bb30:	0800e818 	.word	0x0800e818
 800bb34:	2401      	movs	r4, #1
 800bb36:	2300      	movs	r3, #0
 800bb38:	940b      	str	r4, [sp, #44]	; 0x2c
 800bb3a:	9322      	str	r3, [sp, #136]	; 0x88
 800bb3c:	f04f 39ff 	mov.w	r9, #4294967295
 800bb40:	2200      	movs	r2, #0
 800bb42:	2312      	movs	r3, #18
 800bb44:	f8cd 9020 	str.w	r9, [sp, #32]
 800bb48:	9223      	str	r2, [sp, #140]	; 0x8c
 800bb4a:	e7b0      	b.n	800baae <_dtoa_r+0x266>
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb50:	e7f4      	b.n	800bb3c <_dtoa_r+0x2f4>
 800bb52:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800bb56:	464b      	mov	r3, r9
 800bb58:	f8cd 9020 	str.w	r9, [sp, #32]
 800bb5c:	e7a7      	b.n	800baae <_dtoa_r+0x266>
 800bb5e:	3101      	adds	r1, #1
 800bb60:	6041      	str	r1, [r0, #4]
 800bb62:	0052      	lsls	r2, r2, #1
 800bb64:	e7a7      	b.n	800bab6 <_dtoa_r+0x26e>
 800bb66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bb68:	9a03      	ldr	r2, [sp, #12]
 800bb6a:	601a      	str	r2, [r3, #0]
 800bb6c:	9b08      	ldr	r3, [sp, #32]
 800bb6e:	2b0e      	cmp	r3, #14
 800bb70:	f200 80a8 	bhi.w	800bcc4 <_dtoa_r+0x47c>
 800bb74:	2c00      	cmp	r4, #0
 800bb76:	f000 80a5 	beq.w	800bcc4 <_dtoa_r+0x47c>
 800bb7a:	f1ba 0f00 	cmp.w	sl, #0
 800bb7e:	dd34      	ble.n	800bbea <_dtoa_r+0x3a2>
 800bb80:	4a9a      	ldr	r2, [pc, #616]	; (800bdec <_dtoa_r+0x5a4>)
 800bb82:	f00a 030f 	and.w	r3, sl, #15
 800bb86:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bb8a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800bb8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bb92:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bb96:	ea4f 142a 	mov.w	r4, sl, asr #4
 800bb9a:	d016      	beq.n	800bbca <_dtoa_r+0x382>
 800bb9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bba0:	4b93      	ldr	r3, [pc, #588]	; (800bdf0 <_dtoa_r+0x5a8>)
 800bba2:	2703      	movs	r7, #3
 800bba4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bba8:	f7f4 fdc0 	bl	800072c <__aeabi_ddiv>
 800bbac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bbb0:	f004 040f 	and.w	r4, r4, #15
 800bbb4:	4e8e      	ldr	r6, [pc, #568]	; (800bdf0 <_dtoa_r+0x5a8>)
 800bbb6:	b954      	cbnz	r4, 800bbce <_dtoa_r+0x386>
 800bbb8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bbbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bbc0:	f7f4 fdb4 	bl	800072c <__aeabi_ddiv>
 800bbc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bbc8:	e029      	b.n	800bc1e <_dtoa_r+0x3d6>
 800bbca:	2702      	movs	r7, #2
 800bbcc:	e7f2      	b.n	800bbb4 <_dtoa_r+0x36c>
 800bbce:	07e1      	lsls	r1, r4, #31
 800bbd0:	d508      	bpl.n	800bbe4 <_dtoa_r+0x39c>
 800bbd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bbd6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bbda:	f7f4 fc7d 	bl	80004d8 <__aeabi_dmul>
 800bbde:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bbe2:	3701      	adds	r7, #1
 800bbe4:	1064      	asrs	r4, r4, #1
 800bbe6:	3608      	adds	r6, #8
 800bbe8:	e7e5      	b.n	800bbb6 <_dtoa_r+0x36e>
 800bbea:	f000 80a5 	beq.w	800bd38 <_dtoa_r+0x4f0>
 800bbee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bbf2:	f1ca 0400 	rsb	r4, sl, #0
 800bbf6:	4b7d      	ldr	r3, [pc, #500]	; (800bdec <_dtoa_r+0x5a4>)
 800bbf8:	f004 020f 	and.w	r2, r4, #15
 800bbfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc04:	f7f4 fc68 	bl	80004d8 <__aeabi_dmul>
 800bc08:	2702      	movs	r7, #2
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc10:	4e77      	ldr	r6, [pc, #476]	; (800bdf0 <_dtoa_r+0x5a8>)
 800bc12:	1124      	asrs	r4, r4, #4
 800bc14:	2c00      	cmp	r4, #0
 800bc16:	f040 8084 	bne.w	800bd22 <_dtoa_r+0x4da>
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d1d2      	bne.n	800bbc4 <_dtoa_r+0x37c>
 800bc1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	f000 808b 	beq.w	800bd3c <_dtoa_r+0x4f4>
 800bc26:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bc2a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bc2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bc32:	2200      	movs	r2, #0
 800bc34:	4b6f      	ldr	r3, [pc, #444]	; (800bdf4 <_dtoa_r+0x5ac>)
 800bc36:	f7f4 fec1 	bl	80009bc <__aeabi_dcmplt>
 800bc3a:	2800      	cmp	r0, #0
 800bc3c:	d07e      	beq.n	800bd3c <_dtoa_r+0x4f4>
 800bc3e:	9b08      	ldr	r3, [sp, #32]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d07b      	beq.n	800bd3c <_dtoa_r+0x4f4>
 800bc44:	f1b9 0f00 	cmp.w	r9, #0
 800bc48:	dd38      	ble.n	800bcbc <_dtoa_r+0x474>
 800bc4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bc4e:	2200      	movs	r2, #0
 800bc50:	4b69      	ldr	r3, [pc, #420]	; (800bdf8 <_dtoa_r+0x5b0>)
 800bc52:	f7f4 fc41 	bl	80004d8 <__aeabi_dmul>
 800bc56:	464c      	mov	r4, r9
 800bc58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc5c:	f10a 38ff 	add.w	r8, sl, #4294967295
 800bc60:	3701      	adds	r7, #1
 800bc62:	4638      	mov	r0, r7
 800bc64:	f7f4 fbce 	bl	8000404 <__aeabi_i2d>
 800bc68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc6c:	f7f4 fc34 	bl	80004d8 <__aeabi_dmul>
 800bc70:	2200      	movs	r2, #0
 800bc72:	4b62      	ldr	r3, [pc, #392]	; (800bdfc <_dtoa_r+0x5b4>)
 800bc74:	f7f4 fa7a 	bl	800016c <__adddf3>
 800bc78:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bc7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bc80:	9611      	str	r6, [sp, #68]	; 0x44
 800bc82:	2c00      	cmp	r4, #0
 800bc84:	d15d      	bne.n	800bd42 <_dtoa_r+0x4fa>
 800bc86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	4b5c      	ldr	r3, [pc, #368]	; (800be00 <_dtoa_r+0x5b8>)
 800bc8e:	f7f4 fa6b 	bl	8000168 <__aeabi_dsub>
 800bc92:	4602      	mov	r2, r0
 800bc94:	460b      	mov	r3, r1
 800bc96:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bc9a:	4633      	mov	r3, r6
 800bc9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bc9e:	f7f4 feab 	bl	80009f8 <__aeabi_dcmpgt>
 800bca2:	2800      	cmp	r0, #0
 800bca4:	f040 829c 	bne.w	800c1e0 <_dtoa_r+0x998>
 800bca8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bcac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bcae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bcb2:	f7f4 fe83 	bl	80009bc <__aeabi_dcmplt>
 800bcb6:	2800      	cmp	r0, #0
 800bcb8:	f040 8290 	bne.w	800c1dc <_dtoa_r+0x994>
 800bcbc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800bcc0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bcc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	f2c0 8152 	blt.w	800bf70 <_dtoa_r+0x728>
 800bccc:	f1ba 0f0e 	cmp.w	sl, #14
 800bcd0:	f300 814e 	bgt.w	800bf70 <_dtoa_r+0x728>
 800bcd4:	4b45      	ldr	r3, [pc, #276]	; (800bdec <_dtoa_r+0x5a4>)
 800bcd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bcda:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bcde:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800bce2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	f280 80db 	bge.w	800bea0 <_dtoa_r+0x658>
 800bcea:	9b08      	ldr	r3, [sp, #32]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	f300 80d7 	bgt.w	800bea0 <_dtoa_r+0x658>
 800bcf2:	f040 8272 	bne.w	800c1da <_dtoa_r+0x992>
 800bcf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	4b40      	ldr	r3, [pc, #256]	; (800be00 <_dtoa_r+0x5b8>)
 800bcfe:	f7f4 fbeb 	bl	80004d8 <__aeabi_dmul>
 800bd02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd06:	f7f4 fe6d 	bl	80009e4 <__aeabi_dcmpge>
 800bd0a:	9c08      	ldr	r4, [sp, #32]
 800bd0c:	4626      	mov	r6, r4
 800bd0e:	2800      	cmp	r0, #0
 800bd10:	f040 8248 	bne.w	800c1a4 <_dtoa_r+0x95c>
 800bd14:	2331      	movs	r3, #49	; 0x31
 800bd16:	9f03      	ldr	r7, [sp, #12]
 800bd18:	f10a 0a01 	add.w	sl, sl, #1
 800bd1c:	f807 3b01 	strb.w	r3, [r7], #1
 800bd20:	e244      	b.n	800c1ac <_dtoa_r+0x964>
 800bd22:	07e2      	lsls	r2, r4, #31
 800bd24:	d505      	bpl.n	800bd32 <_dtoa_r+0x4ea>
 800bd26:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bd2a:	f7f4 fbd5 	bl	80004d8 <__aeabi_dmul>
 800bd2e:	2301      	movs	r3, #1
 800bd30:	3701      	adds	r7, #1
 800bd32:	1064      	asrs	r4, r4, #1
 800bd34:	3608      	adds	r6, #8
 800bd36:	e76d      	b.n	800bc14 <_dtoa_r+0x3cc>
 800bd38:	2702      	movs	r7, #2
 800bd3a:	e770      	b.n	800bc1e <_dtoa_r+0x3d6>
 800bd3c:	46d0      	mov	r8, sl
 800bd3e:	9c08      	ldr	r4, [sp, #32]
 800bd40:	e78f      	b.n	800bc62 <_dtoa_r+0x41a>
 800bd42:	9903      	ldr	r1, [sp, #12]
 800bd44:	4b29      	ldr	r3, [pc, #164]	; (800bdec <_dtoa_r+0x5a4>)
 800bd46:	4421      	add	r1, r4
 800bd48:	9112      	str	r1, [sp, #72]	; 0x48
 800bd4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bd4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bd50:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800bd54:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bd58:	2900      	cmp	r1, #0
 800bd5a:	d055      	beq.n	800be08 <_dtoa_r+0x5c0>
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	4929      	ldr	r1, [pc, #164]	; (800be04 <_dtoa_r+0x5bc>)
 800bd60:	f7f4 fce4 	bl	800072c <__aeabi_ddiv>
 800bd64:	463b      	mov	r3, r7
 800bd66:	4632      	mov	r2, r6
 800bd68:	f7f4 f9fe 	bl	8000168 <__aeabi_dsub>
 800bd6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bd70:	9f03      	ldr	r7, [sp, #12]
 800bd72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd76:	f7f4 fe5f 	bl	8000a38 <__aeabi_d2iz>
 800bd7a:	4604      	mov	r4, r0
 800bd7c:	f7f4 fb42 	bl	8000404 <__aeabi_i2d>
 800bd80:	4602      	mov	r2, r0
 800bd82:	460b      	mov	r3, r1
 800bd84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd88:	f7f4 f9ee 	bl	8000168 <__aeabi_dsub>
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	460b      	mov	r3, r1
 800bd90:	3430      	adds	r4, #48	; 0x30
 800bd92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bd96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bd9a:	f807 4b01 	strb.w	r4, [r7], #1
 800bd9e:	f7f4 fe0d 	bl	80009bc <__aeabi_dcmplt>
 800bda2:	2800      	cmp	r0, #0
 800bda4:	d174      	bne.n	800be90 <_dtoa_r+0x648>
 800bda6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdaa:	2000      	movs	r0, #0
 800bdac:	4911      	ldr	r1, [pc, #68]	; (800bdf4 <_dtoa_r+0x5ac>)
 800bdae:	f7f4 f9db 	bl	8000168 <__aeabi_dsub>
 800bdb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bdb6:	f7f4 fe01 	bl	80009bc <__aeabi_dcmplt>
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	f040 80b7 	bne.w	800bf2e <_dtoa_r+0x6e6>
 800bdc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bdc2:	429f      	cmp	r7, r3
 800bdc4:	f43f af7a 	beq.w	800bcbc <_dtoa_r+0x474>
 800bdc8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bdcc:	2200      	movs	r2, #0
 800bdce:	4b0a      	ldr	r3, [pc, #40]	; (800bdf8 <_dtoa_r+0x5b0>)
 800bdd0:	f7f4 fb82 	bl	80004d8 <__aeabi_dmul>
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bdda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bdde:	4b06      	ldr	r3, [pc, #24]	; (800bdf8 <_dtoa_r+0x5b0>)
 800bde0:	f7f4 fb7a 	bl	80004d8 <__aeabi_dmul>
 800bde4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bde8:	e7c3      	b.n	800bd72 <_dtoa_r+0x52a>
 800bdea:	bf00      	nop
 800bdec:	0800e928 	.word	0x0800e928
 800bdf0:	0800e900 	.word	0x0800e900
 800bdf4:	3ff00000 	.word	0x3ff00000
 800bdf8:	40240000 	.word	0x40240000
 800bdfc:	401c0000 	.word	0x401c0000
 800be00:	40140000 	.word	0x40140000
 800be04:	3fe00000 	.word	0x3fe00000
 800be08:	4630      	mov	r0, r6
 800be0a:	4639      	mov	r1, r7
 800be0c:	f7f4 fb64 	bl	80004d8 <__aeabi_dmul>
 800be10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800be12:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800be16:	9c03      	ldr	r4, [sp, #12]
 800be18:	9314      	str	r3, [sp, #80]	; 0x50
 800be1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be1e:	f7f4 fe0b 	bl	8000a38 <__aeabi_d2iz>
 800be22:	9015      	str	r0, [sp, #84]	; 0x54
 800be24:	f7f4 faee 	bl	8000404 <__aeabi_i2d>
 800be28:	4602      	mov	r2, r0
 800be2a:	460b      	mov	r3, r1
 800be2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be30:	f7f4 f99a 	bl	8000168 <__aeabi_dsub>
 800be34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be36:	4606      	mov	r6, r0
 800be38:	3330      	adds	r3, #48	; 0x30
 800be3a:	f804 3b01 	strb.w	r3, [r4], #1
 800be3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800be40:	460f      	mov	r7, r1
 800be42:	429c      	cmp	r4, r3
 800be44:	f04f 0200 	mov.w	r2, #0
 800be48:	d124      	bne.n	800be94 <_dtoa_r+0x64c>
 800be4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800be4e:	4bb0      	ldr	r3, [pc, #704]	; (800c110 <_dtoa_r+0x8c8>)
 800be50:	f7f4 f98c 	bl	800016c <__adddf3>
 800be54:	4602      	mov	r2, r0
 800be56:	460b      	mov	r3, r1
 800be58:	4630      	mov	r0, r6
 800be5a:	4639      	mov	r1, r7
 800be5c:	f7f4 fdcc 	bl	80009f8 <__aeabi_dcmpgt>
 800be60:	2800      	cmp	r0, #0
 800be62:	d163      	bne.n	800bf2c <_dtoa_r+0x6e4>
 800be64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800be68:	2000      	movs	r0, #0
 800be6a:	49a9      	ldr	r1, [pc, #676]	; (800c110 <_dtoa_r+0x8c8>)
 800be6c:	f7f4 f97c 	bl	8000168 <__aeabi_dsub>
 800be70:	4602      	mov	r2, r0
 800be72:	460b      	mov	r3, r1
 800be74:	4630      	mov	r0, r6
 800be76:	4639      	mov	r1, r7
 800be78:	f7f4 fda0 	bl	80009bc <__aeabi_dcmplt>
 800be7c:	2800      	cmp	r0, #0
 800be7e:	f43f af1d 	beq.w	800bcbc <_dtoa_r+0x474>
 800be82:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800be84:	1e7b      	subs	r3, r7, #1
 800be86:	9314      	str	r3, [sp, #80]	; 0x50
 800be88:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800be8c:	2b30      	cmp	r3, #48	; 0x30
 800be8e:	d0f8      	beq.n	800be82 <_dtoa_r+0x63a>
 800be90:	46c2      	mov	sl, r8
 800be92:	e03b      	b.n	800bf0c <_dtoa_r+0x6c4>
 800be94:	4b9f      	ldr	r3, [pc, #636]	; (800c114 <_dtoa_r+0x8cc>)
 800be96:	f7f4 fb1f 	bl	80004d8 <__aeabi_dmul>
 800be9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be9e:	e7bc      	b.n	800be1a <_dtoa_r+0x5d2>
 800bea0:	9f03      	ldr	r7, [sp, #12]
 800bea2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800bea6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800beaa:	4640      	mov	r0, r8
 800beac:	4649      	mov	r1, r9
 800beae:	f7f4 fc3d 	bl	800072c <__aeabi_ddiv>
 800beb2:	f7f4 fdc1 	bl	8000a38 <__aeabi_d2iz>
 800beb6:	4604      	mov	r4, r0
 800beb8:	f7f4 faa4 	bl	8000404 <__aeabi_i2d>
 800bebc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bec0:	f7f4 fb0a 	bl	80004d8 <__aeabi_dmul>
 800bec4:	4602      	mov	r2, r0
 800bec6:	460b      	mov	r3, r1
 800bec8:	4640      	mov	r0, r8
 800beca:	4649      	mov	r1, r9
 800becc:	f7f4 f94c 	bl	8000168 <__aeabi_dsub>
 800bed0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800bed4:	f807 6b01 	strb.w	r6, [r7], #1
 800bed8:	9e03      	ldr	r6, [sp, #12]
 800beda:	f8dd c020 	ldr.w	ip, [sp, #32]
 800bede:	1bbe      	subs	r6, r7, r6
 800bee0:	45b4      	cmp	ip, r6
 800bee2:	4602      	mov	r2, r0
 800bee4:	460b      	mov	r3, r1
 800bee6:	d136      	bne.n	800bf56 <_dtoa_r+0x70e>
 800bee8:	f7f4 f940 	bl	800016c <__adddf3>
 800beec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bef0:	4680      	mov	r8, r0
 800bef2:	4689      	mov	r9, r1
 800bef4:	f7f4 fd80 	bl	80009f8 <__aeabi_dcmpgt>
 800bef8:	bb58      	cbnz	r0, 800bf52 <_dtoa_r+0x70a>
 800befa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800befe:	4640      	mov	r0, r8
 800bf00:	4649      	mov	r1, r9
 800bf02:	f7f4 fd51 	bl	80009a8 <__aeabi_dcmpeq>
 800bf06:	b108      	cbz	r0, 800bf0c <_dtoa_r+0x6c4>
 800bf08:	07e1      	lsls	r1, r4, #31
 800bf0a:	d422      	bmi.n	800bf52 <_dtoa_r+0x70a>
 800bf0c:	4628      	mov	r0, r5
 800bf0e:	4659      	mov	r1, fp
 800bf10:	f000 fe68 	bl	800cbe4 <_Bfree>
 800bf14:	2300      	movs	r3, #0
 800bf16:	703b      	strb	r3, [r7, #0]
 800bf18:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bf1a:	f10a 0001 	add.w	r0, sl, #1
 800bf1e:	6018      	str	r0, [r3, #0]
 800bf20:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	f43f acde 	beq.w	800b8e4 <_dtoa_r+0x9c>
 800bf28:	601f      	str	r7, [r3, #0]
 800bf2a:	e4db      	b.n	800b8e4 <_dtoa_r+0x9c>
 800bf2c:	4627      	mov	r7, r4
 800bf2e:	463b      	mov	r3, r7
 800bf30:	461f      	mov	r7, r3
 800bf32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf36:	2a39      	cmp	r2, #57	; 0x39
 800bf38:	d107      	bne.n	800bf4a <_dtoa_r+0x702>
 800bf3a:	9a03      	ldr	r2, [sp, #12]
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d1f7      	bne.n	800bf30 <_dtoa_r+0x6e8>
 800bf40:	2230      	movs	r2, #48	; 0x30
 800bf42:	9903      	ldr	r1, [sp, #12]
 800bf44:	f108 0801 	add.w	r8, r8, #1
 800bf48:	700a      	strb	r2, [r1, #0]
 800bf4a:	781a      	ldrb	r2, [r3, #0]
 800bf4c:	3201      	adds	r2, #1
 800bf4e:	701a      	strb	r2, [r3, #0]
 800bf50:	e79e      	b.n	800be90 <_dtoa_r+0x648>
 800bf52:	46d0      	mov	r8, sl
 800bf54:	e7eb      	b.n	800bf2e <_dtoa_r+0x6e6>
 800bf56:	2200      	movs	r2, #0
 800bf58:	4b6e      	ldr	r3, [pc, #440]	; (800c114 <_dtoa_r+0x8cc>)
 800bf5a:	f7f4 fabd 	bl	80004d8 <__aeabi_dmul>
 800bf5e:	2200      	movs	r2, #0
 800bf60:	2300      	movs	r3, #0
 800bf62:	4680      	mov	r8, r0
 800bf64:	4689      	mov	r9, r1
 800bf66:	f7f4 fd1f 	bl	80009a8 <__aeabi_dcmpeq>
 800bf6a:	2800      	cmp	r0, #0
 800bf6c:	d09b      	beq.n	800bea6 <_dtoa_r+0x65e>
 800bf6e:	e7cd      	b.n	800bf0c <_dtoa_r+0x6c4>
 800bf70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bf72:	2a00      	cmp	r2, #0
 800bf74:	f000 80d0 	beq.w	800c118 <_dtoa_r+0x8d0>
 800bf78:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bf7a:	2a01      	cmp	r2, #1
 800bf7c:	f300 80ae 	bgt.w	800c0dc <_dtoa_r+0x894>
 800bf80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bf82:	2a00      	cmp	r2, #0
 800bf84:	f000 80a6 	beq.w	800c0d4 <_dtoa_r+0x88c>
 800bf88:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bf8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bf8e:	9f06      	ldr	r7, [sp, #24]
 800bf90:	9a06      	ldr	r2, [sp, #24]
 800bf92:	2101      	movs	r1, #1
 800bf94:	441a      	add	r2, r3
 800bf96:	9206      	str	r2, [sp, #24]
 800bf98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf9a:	4628      	mov	r0, r5
 800bf9c:	441a      	add	r2, r3
 800bf9e:	9209      	str	r2, [sp, #36]	; 0x24
 800bfa0:	f000 ff20 	bl	800cde4 <__i2b>
 800bfa4:	4606      	mov	r6, r0
 800bfa6:	2f00      	cmp	r7, #0
 800bfa8:	dd0c      	ble.n	800bfc4 <_dtoa_r+0x77c>
 800bfaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	dd09      	ble.n	800bfc4 <_dtoa_r+0x77c>
 800bfb0:	42bb      	cmp	r3, r7
 800bfb2:	bfa8      	it	ge
 800bfb4:	463b      	movge	r3, r7
 800bfb6:	9a06      	ldr	r2, [sp, #24]
 800bfb8:	1aff      	subs	r7, r7, r3
 800bfba:	1ad2      	subs	r2, r2, r3
 800bfbc:	9206      	str	r2, [sp, #24]
 800bfbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfc0:	1ad3      	subs	r3, r2, r3
 800bfc2:	9309      	str	r3, [sp, #36]	; 0x24
 800bfc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfc6:	b1f3      	cbz	r3, 800c006 <_dtoa_r+0x7be>
 800bfc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	f000 80a8 	beq.w	800c120 <_dtoa_r+0x8d8>
 800bfd0:	2c00      	cmp	r4, #0
 800bfd2:	dd10      	ble.n	800bff6 <_dtoa_r+0x7ae>
 800bfd4:	4631      	mov	r1, r6
 800bfd6:	4622      	mov	r2, r4
 800bfd8:	4628      	mov	r0, r5
 800bfda:	f000 ffc1 	bl	800cf60 <__pow5mult>
 800bfde:	465a      	mov	r2, fp
 800bfe0:	4601      	mov	r1, r0
 800bfe2:	4606      	mov	r6, r0
 800bfe4:	4628      	mov	r0, r5
 800bfe6:	f000 ff13 	bl	800ce10 <__multiply>
 800bfea:	4680      	mov	r8, r0
 800bfec:	4659      	mov	r1, fp
 800bfee:	4628      	mov	r0, r5
 800bff0:	f000 fdf8 	bl	800cbe4 <_Bfree>
 800bff4:	46c3      	mov	fp, r8
 800bff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bff8:	1b1a      	subs	r2, r3, r4
 800bffa:	d004      	beq.n	800c006 <_dtoa_r+0x7be>
 800bffc:	4659      	mov	r1, fp
 800bffe:	4628      	mov	r0, r5
 800c000:	f000 ffae 	bl	800cf60 <__pow5mult>
 800c004:	4683      	mov	fp, r0
 800c006:	2101      	movs	r1, #1
 800c008:	4628      	mov	r0, r5
 800c00a:	f000 feeb 	bl	800cde4 <__i2b>
 800c00e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c010:	4604      	mov	r4, r0
 800c012:	2b00      	cmp	r3, #0
 800c014:	f340 8086 	ble.w	800c124 <_dtoa_r+0x8dc>
 800c018:	461a      	mov	r2, r3
 800c01a:	4601      	mov	r1, r0
 800c01c:	4628      	mov	r0, r5
 800c01e:	f000 ff9f 	bl	800cf60 <__pow5mult>
 800c022:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c024:	4604      	mov	r4, r0
 800c026:	2b01      	cmp	r3, #1
 800c028:	dd7f      	ble.n	800c12a <_dtoa_r+0x8e2>
 800c02a:	f04f 0800 	mov.w	r8, #0
 800c02e:	6923      	ldr	r3, [r4, #16]
 800c030:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c034:	6918      	ldr	r0, [r3, #16]
 800c036:	f000 fe87 	bl	800cd48 <__hi0bits>
 800c03a:	f1c0 0020 	rsb	r0, r0, #32
 800c03e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c040:	4418      	add	r0, r3
 800c042:	f010 001f 	ands.w	r0, r0, #31
 800c046:	f000 8092 	beq.w	800c16e <_dtoa_r+0x926>
 800c04a:	f1c0 0320 	rsb	r3, r0, #32
 800c04e:	2b04      	cmp	r3, #4
 800c050:	f340 808a 	ble.w	800c168 <_dtoa_r+0x920>
 800c054:	f1c0 001c 	rsb	r0, r0, #28
 800c058:	9b06      	ldr	r3, [sp, #24]
 800c05a:	4407      	add	r7, r0
 800c05c:	4403      	add	r3, r0
 800c05e:	9306      	str	r3, [sp, #24]
 800c060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c062:	4403      	add	r3, r0
 800c064:	9309      	str	r3, [sp, #36]	; 0x24
 800c066:	9b06      	ldr	r3, [sp, #24]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	dd05      	ble.n	800c078 <_dtoa_r+0x830>
 800c06c:	4659      	mov	r1, fp
 800c06e:	461a      	mov	r2, r3
 800c070:	4628      	mov	r0, r5
 800c072:	f000 ffcf 	bl	800d014 <__lshift>
 800c076:	4683      	mov	fp, r0
 800c078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	dd05      	ble.n	800c08a <_dtoa_r+0x842>
 800c07e:	4621      	mov	r1, r4
 800c080:	461a      	mov	r2, r3
 800c082:	4628      	mov	r0, r5
 800c084:	f000 ffc6 	bl	800d014 <__lshift>
 800c088:	4604      	mov	r4, r0
 800c08a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d070      	beq.n	800c172 <_dtoa_r+0x92a>
 800c090:	4621      	mov	r1, r4
 800c092:	4658      	mov	r0, fp
 800c094:	f001 f82e 	bl	800d0f4 <__mcmp>
 800c098:	2800      	cmp	r0, #0
 800c09a:	da6a      	bge.n	800c172 <_dtoa_r+0x92a>
 800c09c:	2300      	movs	r3, #0
 800c09e:	4659      	mov	r1, fp
 800c0a0:	220a      	movs	r2, #10
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	f000 fdc0 	bl	800cc28 <__multadd>
 800c0a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0aa:	4683      	mov	fp, r0
 800c0ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	f000 8194 	beq.w	800c3de <_dtoa_r+0xb96>
 800c0b6:	4631      	mov	r1, r6
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	220a      	movs	r2, #10
 800c0bc:	4628      	mov	r0, r5
 800c0be:	f000 fdb3 	bl	800cc28 <__multadd>
 800c0c2:	f1b9 0f00 	cmp.w	r9, #0
 800c0c6:	4606      	mov	r6, r0
 800c0c8:	f300 8093 	bgt.w	800c1f2 <_dtoa_r+0x9aa>
 800c0cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c0ce:	2b02      	cmp	r3, #2
 800c0d0:	dc57      	bgt.n	800c182 <_dtoa_r+0x93a>
 800c0d2:	e08e      	b.n	800c1f2 <_dtoa_r+0x9aa>
 800c0d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c0d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c0da:	e757      	b.n	800bf8c <_dtoa_r+0x744>
 800c0dc:	9b08      	ldr	r3, [sp, #32]
 800c0de:	1e5c      	subs	r4, r3, #1
 800c0e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0e2:	42a3      	cmp	r3, r4
 800c0e4:	bfb7      	itett	lt
 800c0e6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c0e8:	1b1c      	subge	r4, r3, r4
 800c0ea:	1ae2      	sublt	r2, r4, r3
 800c0ec:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c0ee:	bfbe      	ittt	lt
 800c0f0:	940a      	strlt	r4, [sp, #40]	; 0x28
 800c0f2:	189b      	addlt	r3, r3, r2
 800c0f4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c0f6:	9b08      	ldr	r3, [sp, #32]
 800c0f8:	bfb8      	it	lt
 800c0fa:	2400      	movlt	r4, #0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	bfbb      	ittet	lt
 800c100:	9b06      	ldrlt	r3, [sp, #24]
 800c102:	9a08      	ldrlt	r2, [sp, #32]
 800c104:	9f06      	ldrge	r7, [sp, #24]
 800c106:	1a9f      	sublt	r7, r3, r2
 800c108:	bfac      	ite	ge
 800c10a:	9b08      	ldrge	r3, [sp, #32]
 800c10c:	2300      	movlt	r3, #0
 800c10e:	e73f      	b.n	800bf90 <_dtoa_r+0x748>
 800c110:	3fe00000 	.word	0x3fe00000
 800c114:	40240000 	.word	0x40240000
 800c118:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c11a:	9f06      	ldr	r7, [sp, #24]
 800c11c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c11e:	e742      	b.n	800bfa6 <_dtoa_r+0x75e>
 800c120:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c122:	e76b      	b.n	800bffc <_dtoa_r+0x7b4>
 800c124:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c126:	2b01      	cmp	r3, #1
 800c128:	dc19      	bgt.n	800c15e <_dtoa_r+0x916>
 800c12a:	9b04      	ldr	r3, [sp, #16]
 800c12c:	b9bb      	cbnz	r3, 800c15e <_dtoa_r+0x916>
 800c12e:	9b05      	ldr	r3, [sp, #20]
 800c130:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c134:	b99b      	cbnz	r3, 800c15e <_dtoa_r+0x916>
 800c136:	9b05      	ldr	r3, [sp, #20]
 800c138:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c13c:	0d1b      	lsrs	r3, r3, #20
 800c13e:	051b      	lsls	r3, r3, #20
 800c140:	b183      	cbz	r3, 800c164 <_dtoa_r+0x91c>
 800c142:	f04f 0801 	mov.w	r8, #1
 800c146:	9b06      	ldr	r3, [sp, #24]
 800c148:	3301      	adds	r3, #1
 800c14a:	9306      	str	r3, [sp, #24]
 800c14c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c14e:	3301      	adds	r3, #1
 800c150:	9309      	str	r3, [sp, #36]	; 0x24
 800c152:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c154:	2b00      	cmp	r3, #0
 800c156:	f47f af6a 	bne.w	800c02e <_dtoa_r+0x7e6>
 800c15a:	2001      	movs	r0, #1
 800c15c:	e76f      	b.n	800c03e <_dtoa_r+0x7f6>
 800c15e:	f04f 0800 	mov.w	r8, #0
 800c162:	e7f6      	b.n	800c152 <_dtoa_r+0x90a>
 800c164:	4698      	mov	r8, r3
 800c166:	e7f4      	b.n	800c152 <_dtoa_r+0x90a>
 800c168:	f43f af7d 	beq.w	800c066 <_dtoa_r+0x81e>
 800c16c:	4618      	mov	r0, r3
 800c16e:	301c      	adds	r0, #28
 800c170:	e772      	b.n	800c058 <_dtoa_r+0x810>
 800c172:	9b08      	ldr	r3, [sp, #32]
 800c174:	2b00      	cmp	r3, #0
 800c176:	dc36      	bgt.n	800c1e6 <_dtoa_r+0x99e>
 800c178:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c17a:	2b02      	cmp	r3, #2
 800c17c:	dd33      	ble.n	800c1e6 <_dtoa_r+0x99e>
 800c17e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c182:	f1b9 0f00 	cmp.w	r9, #0
 800c186:	d10d      	bne.n	800c1a4 <_dtoa_r+0x95c>
 800c188:	4621      	mov	r1, r4
 800c18a:	464b      	mov	r3, r9
 800c18c:	2205      	movs	r2, #5
 800c18e:	4628      	mov	r0, r5
 800c190:	f000 fd4a 	bl	800cc28 <__multadd>
 800c194:	4601      	mov	r1, r0
 800c196:	4604      	mov	r4, r0
 800c198:	4658      	mov	r0, fp
 800c19a:	f000 ffab 	bl	800d0f4 <__mcmp>
 800c19e:	2800      	cmp	r0, #0
 800c1a0:	f73f adb8 	bgt.w	800bd14 <_dtoa_r+0x4cc>
 800c1a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c1a6:	9f03      	ldr	r7, [sp, #12]
 800c1a8:	ea6f 0a03 	mvn.w	sl, r3
 800c1ac:	f04f 0800 	mov.w	r8, #0
 800c1b0:	4621      	mov	r1, r4
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	f000 fd16 	bl	800cbe4 <_Bfree>
 800c1b8:	2e00      	cmp	r6, #0
 800c1ba:	f43f aea7 	beq.w	800bf0c <_dtoa_r+0x6c4>
 800c1be:	f1b8 0f00 	cmp.w	r8, #0
 800c1c2:	d005      	beq.n	800c1d0 <_dtoa_r+0x988>
 800c1c4:	45b0      	cmp	r8, r6
 800c1c6:	d003      	beq.n	800c1d0 <_dtoa_r+0x988>
 800c1c8:	4641      	mov	r1, r8
 800c1ca:	4628      	mov	r0, r5
 800c1cc:	f000 fd0a 	bl	800cbe4 <_Bfree>
 800c1d0:	4631      	mov	r1, r6
 800c1d2:	4628      	mov	r0, r5
 800c1d4:	f000 fd06 	bl	800cbe4 <_Bfree>
 800c1d8:	e698      	b.n	800bf0c <_dtoa_r+0x6c4>
 800c1da:	2400      	movs	r4, #0
 800c1dc:	4626      	mov	r6, r4
 800c1de:	e7e1      	b.n	800c1a4 <_dtoa_r+0x95c>
 800c1e0:	46c2      	mov	sl, r8
 800c1e2:	4626      	mov	r6, r4
 800c1e4:	e596      	b.n	800bd14 <_dtoa_r+0x4cc>
 800c1e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	f000 80fd 	beq.w	800c3ec <_dtoa_r+0xba4>
 800c1f2:	2f00      	cmp	r7, #0
 800c1f4:	dd05      	ble.n	800c202 <_dtoa_r+0x9ba>
 800c1f6:	4631      	mov	r1, r6
 800c1f8:	463a      	mov	r2, r7
 800c1fa:	4628      	mov	r0, r5
 800c1fc:	f000 ff0a 	bl	800d014 <__lshift>
 800c200:	4606      	mov	r6, r0
 800c202:	f1b8 0f00 	cmp.w	r8, #0
 800c206:	d05c      	beq.n	800c2c2 <_dtoa_r+0xa7a>
 800c208:	4628      	mov	r0, r5
 800c20a:	6871      	ldr	r1, [r6, #4]
 800c20c:	f000 fcaa 	bl	800cb64 <_Balloc>
 800c210:	4607      	mov	r7, r0
 800c212:	b928      	cbnz	r0, 800c220 <_dtoa_r+0x9d8>
 800c214:	4602      	mov	r2, r0
 800c216:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c21a:	4b7f      	ldr	r3, [pc, #508]	; (800c418 <_dtoa_r+0xbd0>)
 800c21c:	f7ff bb28 	b.w	800b870 <_dtoa_r+0x28>
 800c220:	6932      	ldr	r2, [r6, #16]
 800c222:	f106 010c 	add.w	r1, r6, #12
 800c226:	3202      	adds	r2, #2
 800c228:	0092      	lsls	r2, r2, #2
 800c22a:	300c      	adds	r0, #12
 800c22c:	f000 fc8c 	bl	800cb48 <memcpy>
 800c230:	2201      	movs	r2, #1
 800c232:	4639      	mov	r1, r7
 800c234:	4628      	mov	r0, r5
 800c236:	f000 feed 	bl	800d014 <__lshift>
 800c23a:	46b0      	mov	r8, r6
 800c23c:	4606      	mov	r6, r0
 800c23e:	9b03      	ldr	r3, [sp, #12]
 800c240:	3301      	adds	r3, #1
 800c242:	9308      	str	r3, [sp, #32]
 800c244:	9b03      	ldr	r3, [sp, #12]
 800c246:	444b      	add	r3, r9
 800c248:	930a      	str	r3, [sp, #40]	; 0x28
 800c24a:	9b04      	ldr	r3, [sp, #16]
 800c24c:	f003 0301 	and.w	r3, r3, #1
 800c250:	9309      	str	r3, [sp, #36]	; 0x24
 800c252:	9b08      	ldr	r3, [sp, #32]
 800c254:	4621      	mov	r1, r4
 800c256:	3b01      	subs	r3, #1
 800c258:	4658      	mov	r0, fp
 800c25a:	9304      	str	r3, [sp, #16]
 800c25c:	f7ff fa68 	bl	800b730 <quorem>
 800c260:	4603      	mov	r3, r0
 800c262:	4641      	mov	r1, r8
 800c264:	3330      	adds	r3, #48	; 0x30
 800c266:	9006      	str	r0, [sp, #24]
 800c268:	4658      	mov	r0, fp
 800c26a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c26c:	f000 ff42 	bl	800d0f4 <__mcmp>
 800c270:	4632      	mov	r2, r6
 800c272:	4681      	mov	r9, r0
 800c274:	4621      	mov	r1, r4
 800c276:	4628      	mov	r0, r5
 800c278:	f000 ff58 	bl	800d12c <__mdiff>
 800c27c:	68c2      	ldr	r2, [r0, #12]
 800c27e:	4607      	mov	r7, r0
 800c280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c282:	bb02      	cbnz	r2, 800c2c6 <_dtoa_r+0xa7e>
 800c284:	4601      	mov	r1, r0
 800c286:	4658      	mov	r0, fp
 800c288:	f000 ff34 	bl	800d0f4 <__mcmp>
 800c28c:	4602      	mov	r2, r0
 800c28e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c290:	4639      	mov	r1, r7
 800c292:	4628      	mov	r0, r5
 800c294:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800c298:	f000 fca4 	bl	800cbe4 <_Bfree>
 800c29c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c29e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c2a0:	9f08      	ldr	r7, [sp, #32]
 800c2a2:	ea43 0102 	orr.w	r1, r3, r2
 800c2a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2a8:	430b      	orrs	r3, r1
 800c2aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2ac:	d10d      	bne.n	800c2ca <_dtoa_r+0xa82>
 800c2ae:	2b39      	cmp	r3, #57	; 0x39
 800c2b0:	d029      	beq.n	800c306 <_dtoa_r+0xabe>
 800c2b2:	f1b9 0f00 	cmp.w	r9, #0
 800c2b6:	dd01      	ble.n	800c2bc <_dtoa_r+0xa74>
 800c2b8:	9b06      	ldr	r3, [sp, #24]
 800c2ba:	3331      	adds	r3, #49	; 0x31
 800c2bc:	9a04      	ldr	r2, [sp, #16]
 800c2be:	7013      	strb	r3, [r2, #0]
 800c2c0:	e776      	b.n	800c1b0 <_dtoa_r+0x968>
 800c2c2:	4630      	mov	r0, r6
 800c2c4:	e7b9      	b.n	800c23a <_dtoa_r+0x9f2>
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	e7e2      	b.n	800c290 <_dtoa_r+0xa48>
 800c2ca:	f1b9 0f00 	cmp.w	r9, #0
 800c2ce:	db06      	blt.n	800c2de <_dtoa_r+0xa96>
 800c2d0:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c2d2:	ea41 0909 	orr.w	r9, r1, r9
 800c2d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c2d8:	ea59 0101 	orrs.w	r1, r9, r1
 800c2dc:	d120      	bne.n	800c320 <_dtoa_r+0xad8>
 800c2de:	2a00      	cmp	r2, #0
 800c2e0:	ddec      	ble.n	800c2bc <_dtoa_r+0xa74>
 800c2e2:	4659      	mov	r1, fp
 800c2e4:	2201      	movs	r2, #1
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	9308      	str	r3, [sp, #32]
 800c2ea:	f000 fe93 	bl	800d014 <__lshift>
 800c2ee:	4621      	mov	r1, r4
 800c2f0:	4683      	mov	fp, r0
 800c2f2:	f000 feff 	bl	800d0f4 <__mcmp>
 800c2f6:	2800      	cmp	r0, #0
 800c2f8:	9b08      	ldr	r3, [sp, #32]
 800c2fa:	dc02      	bgt.n	800c302 <_dtoa_r+0xaba>
 800c2fc:	d1de      	bne.n	800c2bc <_dtoa_r+0xa74>
 800c2fe:	07da      	lsls	r2, r3, #31
 800c300:	d5dc      	bpl.n	800c2bc <_dtoa_r+0xa74>
 800c302:	2b39      	cmp	r3, #57	; 0x39
 800c304:	d1d8      	bne.n	800c2b8 <_dtoa_r+0xa70>
 800c306:	2339      	movs	r3, #57	; 0x39
 800c308:	9a04      	ldr	r2, [sp, #16]
 800c30a:	7013      	strb	r3, [r2, #0]
 800c30c:	463b      	mov	r3, r7
 800c30e:	461f      	mov	r7, r3
 800c310:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c314:	3b01      	subs	r3, #1
 800c316:	2a39      	cmp	r2, #57	; 0x39
 800c318:	d050      	beq.n	800c3bc <_dtoa_r+0xb74>
 800c31a:	3201      	adds	r2, #1
 800c31c:	701a      	strb	r2, [r3, #0]
 800c31e:	e747      	b.n	800c1b0 <_dtoa_r+0x968>
 800c320:	2a00      	cmp	r2, #0
 800c322:	dd03      	ble.n	800c32c <_dtoa_r+0xae4>
 800c324:	2b39      	cmp	r3, #57	; 0x39
 800c326:	d0ee      	beq.n	800c306 <_dtoa_r+0xabe>
 800c328:	3301      	adds	r3, #1
 800c32a:	e7c7      	b.n	800c2bc <_dtoa_r+0xa74>
 800c32c:	9a08      	ldr	r2, [sp, #32]
 800c32e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c330:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c334:	428a      	cmp	r2, r1
 800c336:	d02a      	beq.n	800c38e <_dtoa_r+0xb46>
 800c338:	4659      	mov	r1, fp
 800c33a:	2300      	movs	r3, #0
 800c33c:	220a      	movs	r2, #10
 800c33e:	4628      	mov	r0, r5
 800c340:	f000 fc72 	bl	800cc28 <__multadd>
 800c344:	45b0      	cmp	r8, r6
 800c346:	4683      	mov	fp, r0
 800c348:	f04f 0300 	mov.w	r3, #0
 800c34c:	f04f 020a 	mov.w	r2, #10
 800c350:	4641      	mov	r1, r8
 800c352:	4628      	mov	r0, r5
 800c354:	d107      	bne.n	800c366 <_dtoa_r+0xb1e>
 800c356:	f000 fc67 	bl	800cc28 <__multadd>
 800c35a:	4680      	mov	r8, r0
 800c35c:	4606      	mov	r6, r0
 800c35e:	9b08      	ldr	r3, [sp, #32]
 800c360:	3301      	adds	r3, #1
 800c362:	9308      	str	r3, [sp, #32]
 800c364:	e775      	b.n	800c252 <_dtoa_r+0xa0a>
 800c366:	f000 fc5f 	bl	800cc28 <__multadd>
 800c36a:	4631      	mov	r1, r6
 800c36c:	4680      	mov	r8, r0
 800c36e:	2300      	movs	r3, #0
 800c370:	220a      	movs	r2, #10
 800c372:	4628      	mov	r0, r5
 800c374:	f000 fc58 	bl	800cc28 <__multadd>
 800c378:	4606      	mov	r6, r0
 800c37a:	e7f0      	b.n	800c35e <_dtoa_r+0xb16>
 800c37c:	f1b9 0f00 	cmp.w	r9, #0
 800c380:	bfcc      	ite	gt
 800c382:	464f      	movgt	r7, r9
 800c384:	2701      	movle	r7, #1
 800c386:	f04f 0800 	mov.w	r8, #0
 800c38a:	9a03      	ldr	r2, [sp, #12]
 800c38c:	4417      	add	r7, r2
 800c38e:	4659      	mov	r1, fp
 800c390:	2201      	movs	r2, #1
 800c392:	4628      	mov	r0, r5
 800c394:	9308      	str	r3, [sp, #32]
 800c396:	f000 fe3d 	bl	800d014 <__lshift>
 800c39a:	4621      	mov	r1, r4
 800c39c:	4683      	mov	fp, r0
 800c39e:	f000 fea9 	bl	800d0f4 <__mcmp>
 800c3a2:	2800      	cmp	r0, #0
 800c3a4:	dcb2      	bgt.n	800c30c <_dtoa_r+0xac4>
 800c3a6:	d102      	bne.n	800c3ae <_dtoa_r+0xb66>
 800c3a8:	9b08      	ldr	r3, [sp, #32]
 800c3aa:	07db      	lsls	r3, r3, #31
 800c3ac:	d4ae      	bmi.n	800c30c <_dtoa_r+0xac4>
 800c3ae:	463b      	mov	r3, r7
 800c3b0:	461f      	mov	r7, r3
 800c3b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3b6:	2a30      	cmp	r2, #48	; 0x30
 800c3b8:	d0fa      	beq.n	800c3b0 <_dtoa_r+0xb68>
 800c3ba:	e6f9      	b.n	800c1b0 <_dtoa_r+0x968>
 800c3bc:	9a03      	ldr	r2, [sp, #12]
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	d1a5      	bne.n	800c30e <_dtoa_r+0xac6>
 800c3c2:	2331      	movs	r3, #49	; 0x31
 800c3c4:	f10a 0a01 	add.w	sl, sl, #1
 800c3c8:	e779      	b.n	800c2be <_dtoa_r+0xa76>
 800c3ca:	4b14      	ldr	r3, [pc, #80]	; (800c41c <_dtoa_r+0xbd4>)
 800c3cc:	f7ff baa8 	b.w	800b920 <_dtoa_r+0xd8>
 800c3d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	f47f aa81 	bne.w	800b8da <_dtoa_r+0x92>
 800c3d8:	4b11      	ldr	r3, [pc, #68]	; (800c420 <_dtoa_r+0xbd8>)
 800c3da:	f7ff baa1 	b.w	800b920 <_dtoa_r+0xd8>
 800c3de:	f1b9 0f00 	cmp.w	r9, #0
 800c3e2:	dc03      	bgt.n	800c3ec <_dtoa_r+0xba4>
 800c3e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c3e6:	2b02      	cmp	r3, #2
 800c3e8:	f73f aecb 	bgt.w	800c182 <_dtoa_r+0x93a>
 800c3ec:	9f03      	ldr	r7, [sp, #12]
 800c3ee:	4621      	mov	r1, r4
 800c3f0:	4658      	mov	r0, fp
 800c3f2:	f7ff f99d 	bl	800b730 <quorem>
 800c3f6:	9a03      	ldr	r2, [sp, #12]
 800c3f8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c3fc:	f807 3b01 	strb.w	r3, [r7], #1
 800c400:	1aba      	subs	r2, r7, r2
 800c402:	4591      	cmp	r9, r2
 800c404:	ddba      	ble.n	800c37c <_dtoa_r+0xb34>
 800c406:	4659      	mov	r1, fp
 800c408:	2300      	movs	r3, #0
 800c40a:	220a      	movs	r2, #10
 800c40c:	4628      	mov	r0, r5
 800c40e:	f000 fc0b 	bl	800cc28 <__multadd>
 800c412:	4683      	mov	fp, r0
 800c414:	e7eb      	b.n	800c3ee <_dtoa_r+0xba6>
 800c416:	bf00      	nop
 800c418:	0800e818 	.word	0x0800e818
 800c41c:	0800e618 	.word	0x0800e618
 800c420:	0800e799 	.word	0x0800e799

0800c424 <rshift>:
 800c424:	6903      	ldr	r3, [r0, #16]
 800c426:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c42a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c42e:	f100 0414 	add.w	r4, r0, #20
 800c432:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c436:	dd46      	ble.n	800c4c6 <rshift+0xa2>
 800c438:	f011 011f 	ands.w	r1, r1, #31
 800c43c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c440:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c444:	d10c      	bne.n	800c460 <rshift+0x3c>
 800c446:	4629      	mov	r1, r5
 800c448:	f100 0710 	add.w	r7, r0, #16
 800c44c:	42b1      	cmp	r1, r6
 800c44e:	d335      	bcc.n	800c4bc <rshift+0x98>
 800c450:	1a9b      	subs	r3, r3, r2
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	1eea      	subs	r2, r5, #3
 800c456:	4296      	cmp	r6, r2
 800c458:	bf38      	it	cc
 800c45a:	2300      	movcc	r3, #0
 800c45c:	4423      	add	r3, r4
 800c45e:	e015      	b.n	800c48c <rshift+0x68>
 800c460:	46a1      	mov	r9, r4
 800c462:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c466:	f1c1 0820 	rsb	r8, r1, #32
 800c46a:	40cf      	lsrs	r7, r1
 800c46c:	f105 0e04 	add.w	lr, r5, #4
 800c470:	4576      	cmp	r6, lr
 800c472:	46f4      	mov	ip, lr
 800c474:	d816      	bhi.n	800c4a4 <rshift+0x80>
 800c476:	1a9a      	subs	r2, r3, r2
 800c478:	0092      	lsls	r2, r2, #2
 800c47a:	3a04      	subs	r2, #4
 800c47c:	3501      	adds	r5, #1
 800c47e:	42ae      	cmp	r6, r5
 800c480:	bf38      	it	cc
 800c482:	2200      	movcc	r2, #0
 800c484:	18a3      	adds	r3, r4, r2
 800c486:	50a7      	str	r7, [r4, r2]
 800c488:	b107      	cbz	r7, 800c48c <rshift+0x68>
 800c48a:	3304      	adds	r3, #4
 800c48c:	42a3      	cmp	r3, r4
 800c48e:	eba3 0204 	sub.w	r2, r3, r4
 800c492:	bf08      	it	eq
 800c494:	2300      	moveq	r3, #0
 800c496:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c49a:	6102      	str	r2, [r0, #16]
 800c49c:	bf08      	it	eq
 800c49e:	6143      	streq	r3, [r0, #20]
 800c4a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4a4:	f8dc c000 	ldr.w	ip, [ip]
 800c4a8:	fa0c fc08 	lsl.w	ip, ip, r8
 800c4ac:	ea4c 0707 	orr.w	r7, ip, r7
 800c4b0:	f849 7b04 	str.w	r7, [r9], #4
 800c4b4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c4b8:	40cf      	lsrs	r7, r1
 800c4ba:	e7d9      	b.n	800c470 <rshift+0x4c>
 800c4bc:	f851 cb04 	ldr.w	ip, [r1], #4
 800c4c0:	f847 cf04 	str.w	ip, [r7, #4]!
 800c4c4:	e7c2      	b.n	800c44c <rshift+0x28>
 800c4c6:	4623      	mov	r3, r4
 800c4c8:	e7e0      	b.n	800c48c <rshift+0x68>

0800c4ca <__hexdig_fun>:
 800c4ca:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c4ce:	2b09      	cmp	r3, #9
 800c4d0:	d802      	bhi.n	800c4d8 <__hexdig_fun+0xe>
 800c4d2:	3820      	subs	r0, #32
 800c4d4:	b2c0      	uxtb	r0, r0
 800c4d6:	4770      	bx	lr
 800c4d8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c4dc:	2b05      	cmp	r3, #5
 800c4de:	d801      	bhi.n	800c4e4 <__hexdig_fun+0x1a>
 800c4e0:	3847      	subs	r0, #71	; 0x47
 800c4e2:	e7f7      	b.n	800c4d4 <__hexdig_fun+0xa>
 800c4e4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c4e8:	2b05      	cmp	r3, #5
 800c4ea:	d801      	bhi.n	800c4f0 <__hexdig_fun+0x26>
 800c4ec:	3827      	subs	r0, #39	; 0x27
 800c4ee:	e7f1      	b.n	800c4d4 <__hexdig_fun+0xa>
 800c4f0:	2000      	movs	r0, #0
 800c4f2:	4770      	bx	lr

0800c4f4 <__gethex>:
 800c4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4f8:	b08b      	sub	sp, #44	; 0x2c
 800c4fa:	9305      	str	r3, [sp, #20]
 800c4fc:	4bb2      	ldr	r3, [pc, #712]	; (800c7c8 <__gethex+0x2d4>)
 800c4fe:	9002      	str	r0, [sp, #8]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	468b      	mov	fp, r1
 800c504:	4618      	mov	r0, r3
 800c506:	4690      	mov	r8, r2
 800c508:	9303      	str	r3, [sp, #12]
 800c50a:	f7f3 fe21 	bl	8000150 <strlen>
 800c50e:	4682      	mov	sl, r0
 800c510:	9b03      	ldr	r3, [sp, #12]
 800c512:	f8db 2000 	ldr.w	r2, [fp]
 800c516:	4403      	add	r3, r0
 800c518:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c51c:	9306      	str	r3, [sp, #24]
 800c51e:	1c93      	adds	r3, r2, #2
 800c520:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c524:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c528:	32fe      	adds	r2, #254	; 0xfe
 800c52a:	18d1      	adds	r1, r2, r3
 800c52c:	461f      	mov	r7, r3
 800c52e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c532:	9101      	str	r1, [sp, #4]
 800c534:	2830      	cmp	r0, #48	; 0x30
 800c536:	d0f8      	beq.n	800c52a <__gethex+0x36>
 800c538:	f7ff ffc7 	bl	800c4ca <__hexdig_fun>
 800c53c:	4604      	mov	r4, r0
 800c53e:	2800      	cmp	r0, #0
 800c540:	d13a      	bne.n	800c5b8 <__gethex+0xc4>
 800c542:	4652      	mov	r2, sl
 800c544:	4638      	mov	r0, r7
 800c546:	9903      	ldr	r1, [sp, #12]
 800c548:	f001 fa26 	bl	800d998 <strncmp>
 800c54c:	4605      	mov	r5, r0
 800c54e:	2800      	cmp	r0, #0
 800c550:	d166      	bne.n	800c620 <__gethex+0x12c>
 800c552:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c556:	eb07 060a 	add.w	r6, r7, sl
 800c55a:	f7ff ffb6 	bl	800c4ca <__hexdig_fun>
 800c55e:	2800      	cmp	r0, #0
 800c560:	d060      	beq.n	800c624 <__gethex+0x130>
 800c562:	4633      	mov	r3, r6
 800c564:	7818      	ldrb	r0, [r3, #0]
 800c566:	461f      	mov	r7, r3
 800c568:	2830      	cmp	r0, #48	; 0x30
 800c56a:	f103 0301 	add.w	r3, r3, #1
 800c56e:	d0f9      	beq.n	800c564 <__gethex+0x70>
 800c570:	f7ff ffab 	bl	800c4ca <__hexdig_fun>
 800c574:	2301      	movs	r3, #1
 800c576:	fab0 f480 	clz	r4, r0
 800c57a:	4635      	mov	r5, r6
 800c57c:	0964      	lsrs	r4, r4, #5
 800c57e:	9301      	str	r3, [sp, #4]
 800c580:	463a      	mov	r2, r7
 800c582:	4616      	mov	r6, r2
 800c584:	7830      	ldrb	r0, [r6, #0]
 800c586:	3201      	adds	r2, #1
 800c588:	f7ff ff9f 	bl	800c4ca <__hexdig_fun>
 800c58c:	2800      	cmp	r0, #0
 800c58e:	d1f8      	bne.n	800c582 <__gethex+0x8e>
 800c590:	4652      	mov	r2, sl
 800c592:	4630      	mov	r0, r6
 800c594:	9903      	ldr	r1, [sp, #12]
 800c596:	f001 f9ff 	bl	800d998 <strncmp>
 800c59a:	b980      	cbnz	r0, 800c5be <__gethex+0xca>
 800c59c:	b94d      	cbnz	r5, 800c5b2 <__gethex+0xbe>
 800c59e:	eb06 050a 	add.w	r5, r6, sl
 800c5a2:	462a      	mov	r2, r5
 800c5a4:	4616      	mov	r6, r2
 800c5a6:	7830      	ldrb	r0, [r6, #0]
 800c5a8:	3201      	adds	r2, #1
 800c5aa:	f7ff ff8e 	bl	800c4ca <__hexdig_fun>
 800c5ae:	2800      	cmp	r0, #0
 800c5b0:	d1f8      	bne.n	800c5a4 <__gethex+0xb0>
 800c5b2:	1bad      	subs	r5, r5, r6
 800c5b4:	00ad      	lsls	r5, r5, #2
 800c5b6:	e004      	b.n	800c5c2 <__gethex+0xce>
 800c5b8:	2400      	movs	r4, #0
 800c5ba:	4625      	mov	r5, r4
 800c5bc:	e7e0      	b.n	800c580 <__gethex+0x8c>
 800c5be:	2d00      	cmp	r5, #0
 800c5c0:	d1f7      	bne.n	800c5b2 <__gethex+0xbe>
 800c5c2:	7833      	ldrb	r3, [r6, #0]
 800c5c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c5c8:	2b50      	cmp	r3, #80	; 0x50
 800c5ca:	d139      	bne.n	800c640 <__gethex+0x14c>
 800c5cc:	7873      	ldrb	r3, [r6, #1]
 800c5ce:	2b2b      	cmp	r3, #43	; 0x2b
 800c5d0:	d02a      	beq.n	800c628 <__gethex+0x134>
 800c5d2:	2b2d      	cmp	r3, #45	; 0x2d
 800c5d4:	d02c      	beq.n	800c630 <__gethex+0x13c>
 800c5d6:	f04f 0900 	mov.w	r9, #0
 800c5da:	1c71      	adds	r1, r6, #1
 800c5dc:	7808      	ldrb	r0, [r1, #0]
 800c5de:	f7ff ff74 	bl	800c4ca <__hexdig_fun>
 800c5e2:	1e43      	subs	r3, r0, #1
 800c5e4:	b2db      	uxtb	r3, r3
 800c5e6:	2b18      	cmp	r3, #24
 800c5e8:	d82a      	bhi.n	800c640 <__gethex+0x14c>
 800c5ea:	f1a0 0210 	sub.w	r2, r0, #16
 800c5ee:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c5f2:	f7ff ff6a 	bl	800c4ca <__hexdig_fun>
 800c5f6:	1e43      	subs	r3, r0, #1
 800c5f8:	b2db      	uxtb	r3, r3
 800c5fa:	2b18      	cmp	r3, #24
 800c5fc:	d91b      	bls.n	800c636 <__gethex+0x142>
 800c5fe:	f1b9 0f00 	cmp.w	r9, #0
 800c602:	d000      	beq.n	800c606 <__gethex+0x112>
 800c604:	4252      	negs	r2, r2
 800c606:	4415      	add	r5, r2
 800c608:	f8cb 1000 	str.w	r1, [fp]
 800c60c:	b1d4      	cbz	r4, 800c644 <__gethex+0x150>
 800c60e:	9b01      	ldr	r3, [sp, #4]
 800c610:	2b00      	cmp	r3, #0
 800c612:	bf14      	ite	ne
 800c614:	2700      	movne	r7, #0
 800c616:	2706      	moveq	r7, #6
 800c618:	4638      	mov	r0, r7
 800c61a:	b00b      	add	sp, #44	; 0x2c
 800c61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c620:	463e      	mov	r6, r7
 800c622:	4625      	mov	r5, r4
 800c624:	2401      	movs	r4, #1
 800c626:	e7cc      	b.n	800c5c2 <__gethex+0xce>
 800c628:	f04f 0900 	mov.w	r9, #0
 800c62c:	1cb1      	adds	r1, r6, #2
 800c62e:	e7d5      	b.n	800c5dc <__gethex+0xe8>
 800c630:	f04f 0901 	mov.w	r9, #1
 800c634:	e7fa      	b.n	800c62c <__gethex+0x138>
 800c636:	230a      	movs	r3, #10
 800c638:	fb03 0202 	mla	r2, r3, r2, r0
 800c63c:	3a10      	subs	r2, #16
 800c63e:	e7d6      	b.n	800c5ee <__gethex+0xfa>
 800c640:	4631      	mov	r1, r6
 800c642:	e7e1      	b.n	800c608 <__gethex+0x114>
 800c644:	4621      	mov	r1, r4
 800c646:	1bf3      	subs	r3, r6, r7
 800c648:	3b01      	subs	r3, #1
 800c64a:	2b07      	cmp	r3, #7
 800c64c:	dc0a      	bgt.n	800c664 <__gethex+0x170>
 800c64e:	9802      	ldr	r0, [sp, #8]
 800c650:	f000 fa88 	bl	800cb64 <_Balloc>
 800c654:	4604      	mov	r4, r0
 800c656:	b940      	cbnz	r0, 800c66a <__gethex+0x176>
 800c658:	4602      	mov	r2, r0
 800c65a:	21de      	movs	r1, #222	; 0xde
 800c65c:	4b5b      	ldr	r3, [pc, #364]	; (800c7cc <__gethex+0x2d8>)
 800c65e:	485c      	ldr	r0, [pc, #368]	; (800c7d0 <__gethex+0x2dc>)
 800c660:	f001 f9bc 	bl	800d9dc <__assert_func>
 800c664:	3101      	adds	r1, #1
 800c666:	105b      	asrs	r3, r3, #1
 800c668:	e7ef      	b.n	800c64a <__gethex+0x156>
 800c66a:	f04f 0b00 	mov.w	fp, #0
 800c66e:	f100 0914 	add.w	r9, r0, #20
 800c672:	f1ca 0301 	rsb	r3, sl, #1
 800c676:	f8cd 9010 	str.w	r9, [sp, #16]
 800c67a:	f8cd b004 	str.w	fp, [sp, #4]
 800c67e:	9308      	str	r3, [sp, #32]
 800c680:	42b7      	cmp	r7, r6
 800c682:	d33f      	bcc.n	800c704 <__gethex+0x210>
 800c684:	9f04      	ldr	r7, [sp, #16]
 800c686:	9b01      	ldr	r3, [sp, #4]
 800c688:	f847 3b04 	str.w	r3, [r7], #4
 800c68c:	eba7 0709 	sub.w	r7, r7, r9
 800c690:	10bf      	asrs	r7, r7, #2
 800c692:	6127      	str	r7, [r4, #16]
 800c694:	4618      	mov	r0, r3
 800c696:	f000 fb57 	bl	800cd48 <__hi0bits>
 800c69a:	017f      	lsls	r7, r7, #5
 800c69c:	f8d8 6000 	ldr.w	r6, [r8]
 800c6a0:	1a3f      	subs	r7, r7, r0
 800c6a2:	42b7      	cmp	r7, r6
 800c6a4:	dd62      	ble.n	800c76c <__gethex+0x278>
 800c6a6:	1bbf      	subs	r7, r7, r6
 800c6a8:	4639      	mov	r1, r7
 800c6aa:	4620      	mov	r0, r4
 800c6ac:	f000 fef1 	bl	800d492 <__any_on>
 800c6b0:	4682      	mov	sl, r0
 800c6b2:	b1a8      	cbz	r0, 800c6e0 <__gethex+0x1ec>
 800c6b4:	f04f 0a01 	mov.w	sl, #1
 800c6b8:	1e7b      	subs	r3, r7, #1
 800c6ba:	1159      	asrs	r1, r3, #5
 800c6bc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c6c0:	f003 021f 	and.w	r2, r3, #31
 800c6c4:	fa0a f202 	lsl.w	r2, sl, r2
 800c6c8:	420a      	tst	r2, r1
 800c6ca:	d009      	beq.n	800c6e0 <__gethex+0x1ec>
 800c6cc:	4553      	cmp	r3, sl
 800c6ce:	dd05      	ble.n	800c6dc <__gethex+0x1e8>
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	1eb9      	subs	r1, r7, #2
 800c6d4:	f000 fedd 	bl	800d492 <__any_on>
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	d144      	bne.n	800c766 <__gethex+0x272>
 800c6dc:	f04f 0a02 	mov.w	sl, #2
 800c6e0:	4639      	mov	r1, r7
 800c6e2:	4620      	mov	r0, r4
 800c6e4:	f7ff fe9e 	bl	800c424 <rshift>
 800c6e8:	443d      	add	r5, r7
 800c6ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c6ee:	42ab      	cmp	r3, r5
 800c6f0:	da4a      	bge.n	800c788 <__gethex+0x294>
 800c6f2:	4621      	mov	r1, r4
 800c6f4:	9802      	ldr	r0, [sp, #8]
 800c6f6:	f000 fa75 	bl	800cbe4 <_Bfree>
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c6fe:	27a3      	movs	r7, #163	; 0xa3
 800c700:	6013      	str	r3, [r2, #0]
 800c702:	e789      	b.n	800c618 <__gethex+0x124>
 800c704:	1e73      	subs	r3, r6, #1
 800c706:	9a06      	ldr	r2, [sp, #24]
 800c708:	9307      	str	r3, [sp, #28]
 800c70a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c70e:	4293      	cmp	r3, r2
 800c710:	d019      	beq.n	800c746 <__gethex+0x252>
 800c712:	f1bb 0f20 	cmp.w	fp, #32
 800c716:	d107      	bne.n	800c728 <__gethex+0x234>
 800c718:	9b04      	ldr	r3, [sp, #16]
 800c71a:	9a01      	ldr	r2, [sp, #4]
 800c71c:	f843 2b04 	str.w	r2, [r3], #4
 800c720:	9304      	str	r3, [sp, #16]
 800c722:	2300      	movs	r3, #0
 800c724:	469b      	mov	fp, r3
 800c726:	9301      	str	r3, [sp, #4]
 800c728:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c72c:	f7ff fecd 	bl	800c4ca <__hexdig_fun>
 800c730:	9b01      	ldr	r3, [sp, #4]
 800c732:	f000 000f 	and.w	r0, r0, #15
 800c736:	fa00 f00b 	lsl.w	r0, r0, fp
 800c73a:	4303      	orrs	r3, r0
 800c73c:	9301      	str	r3, [sp, #4]
 800c73e:	f10b 0b04 	add.w	fp, fp, #4
 800c742:	9b07      	ldr	r3, [sp, #28]
 800c744:	e00d      	b.n	800c762 <__gethex+0x26e>
 800c746:	9a08      	ldr	r2, [sp, #32]
 800c748:	1e73      	subs	r3, r6, #1
 800c74a:	4413      	add	r3, r2
 800c74c:	42bb      	cmp	r3, r7
 800c74e:	d3e0      	bcc.n	800c712 <__gethex+0x21e>
 800c750:	4618      	mov	r0, r3
 800c752:	4652      	mov	r2, sl
 800c754:	9903      	ldr	r1, [sp, #12]
 800c756:	9309      	str	r3, [sp, #36]	; 0x24
 800c758:	f001 f91e 	bl	800d998 <strncmp>
 800c75c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c75e:	2800      	cmp	r0, #0
 800c760:	d1d7      	bne.n	800c712 <__gethex+0x21e>
 800c762:	461e      	mov	r6, r3
 800c764:	e78c      	b.n	800c680 <__gethex+0x18c>
 800c766:	f04f 0a03 	mov.w	sl, #3
 800c76a:	e7b9      	b.n	800c6e0 <__gethex+0x1ec>
 800c76c:	da09      	bge.n	800c782 <__gethex+0x28e>
 800c76e:	1bf7      	subs	r7, r6, r7
 800c770:	4621      	mov	r1, r4
 800c772:	463a      	mov	r2, r7
 800c774:	9802      	ldr	r0, [sp, #8]
 800c776:	f000 fc4d 	bl	800d014 <__lshift>
 800c77a:	4604      	mov	r4, r0
 800c77c:	1bed      	subs	r5, r5, r7
 800c77e:	f100 0914 	add.w	r9, r0, #20
 800c782:	f04f 0a00 	mov.w	sl, #0
 800c786:	e7b0      	b.n	800c6ea <__gethex+0x1f6>
 800c788:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c78c:	42a8      	cmp	r0, r5
 800c78e:	dd72      	ble.n	800c876 <__gethex+0x382>
 800c790:	1b45      	subs	r5, r0, r5
 800c792:	42ae      	cmp	r6, r5
 800c794:	dc35      	bgt.n	800c802 <__gethex+0x30e>
 800c796:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c79a:	2b02      	cmp	r3, #2
 800c79c:	d029      	beq.n	800c7f2 <__gethex+0x2fe>
 800c79e:	2b03      	cmp	r3, #3
 800c7a0:	d02b      	beq.n	800c7fa <__gethex+0x306>
 800c7a2:	2b01      	cmp	r3, #1
 800c7a4:	d11c      	bne.n	800c7e0 <__gethex+0x2ec>
 800c7a6:	42ae      	cmp	r6, r5
 800c7a8:	d11a      	bne.n	800c7e0 <__gethex+0x2ec>
 800c7aa:	2e01      	cmp	r6, #1
 800c7ac:	d112      	bne.n	800c7d4 <__gethex+0x2e0>
 800c7ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c7b2:	9a05      	ldr	r2, [sp, #20]
 800c7b4:	2762      	movs	r7, #98	; 0x62
 800c7b6:	6013      	str	r3, [r2, #0]
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	6123      	str	r3, [r4, #16]
 800c7bc:	f8c9 3000 	str.w	r3, [r9]
 800c7c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c7c2:	601c      	str	r4, [r3, #0]
 800c7c4:	e728      	b.n	800c618 <__gethex+0x124>
 800c7c6:	bf00      	nop
 800c7c8:	0800e890 	.word	0x0800e890
 800c7cc:	0800e818 	.word	0x0800e818
 800c7d0:	0800e829 	.word	0x0800e829
 800c7d4:	4620      	mov	r0, r4
 800c7d6:	1e71      	subs	r1, r6, #1
 800c7d8:	f000 fe5b 	bl	800d492 <__any_on>
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	d1e6      	bne.n	800c7ae <__gethex+0x2ba>
 800c7e0:	4621      	mov	r1, r4
 800c7e2:	9802      	ldr	r0, [sp, #8]
 800c7e4:	f000 f9fe 	bl	800cbe4 <_Bfree>
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c7ec:	2750      	movs	r7, #80	; 0x50
 800c7ee:	6013      	str	r3, [r2, #0]
 800c7f0:	e712      	b.n	800c618 <__gethex+0x124>
 800c7f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d1f3      	bne.n	800c7e0 <__gethex+0x2ec>
 800c7f8:	e7d9      	b.n	800c7ae <__gethex+0x2ba>
 800c7fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d1d6      	bne.n	800c7ae <__gethex+0x2ba>
 800c800:	e7ee      	b.n	800c7e0 <__gethex+0x2ec>
 800c802:	1e6f      	subs	r7, r5, #1
 800c804:	f1ba 0f00 	cmp.w	sl, #0
 800c808:	d132      	bne.n	800c870 <__gethex+0x37c>
 800c80a:	b127      	cbz	r7, 800c816 <__gethex+0x322>
 800c80c:	4639      	mov	r1, r7
 800c80e:	4620      	mov	r0, r4
 800c810:	f000 fe3f 	bl	800d492 <__any_on>
 800c814:	4682      	mov	sl, r0
 800c816:	2101      	movs	r1, #1
 800c818:	117b      	asrs	r3, r7, #5
 800c81a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c81e:	f007 071f 	and.w	r7, r7, #31
 800c822:	fa01 f707 	lsl.w	r7, r1, r7
 800c826:	421f      	tst	r7, r3
 800c828:	f04f 0702 	mov.w	r7, #2
 800c82c:	4629      	mov	r1, r5
 800c82e:	4620      	mov	r0, r4
 800c830:	bf18      	it	ne
 800c832:	f04a 0a02 	orrne.w	sl, sl, #2
 800c836:	1b76      	subs	r6, r6, r5
 800c838:	f7ff fdf4 	bl	800c424 <rshift>
 800c83c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c840:	f1ba 0f00 	cmp.w	sl, #0
 800c844:	d048      	beq.n	800c8d8 <__gethex+0x3e4>
 800c846:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c84a:	2b02      	cmp	r3, #2
 800c84c:	d015      	beq.n	800c87a <__gethex+0x386>
 800c84e:	2b03      	cmp	r3, #3
 800c850:	d017      	beq.n	800c882 <__gethex+0x38e>
 800c852:	2b01      	cmp	r3, #1
 800c854:	d109      	bne.n	800c86a <__gethex+0x376>
 800c856:	f01a 0f02 	tst.w	sl, #2
 800c85a:	d006      	beq.n	800c86a <__gethex+0x376>
 800c85c:	f8d9 0000 	ldr.w	r0, [r9]
 800c860:	ea4a 0a00 	orr.w	sl, sl, r0
 800c864:	f01a 0f01 	tst.w	sl, #1
 800c868:	d10e      	bne.n	800c888 <__gethex+0x394>
 800c86a:	f047 0710 	orr.w	r7, r7, #16
 800c86e:	e033      	b.n	800c8d8 <__gethex+0x3e4>
 800c870:	f04f 0a01 	mov.w	sl, #1
 800c874:	e7cf      	b.n	800c816 <__gethex+0x322>
 800c876:	2701      	movs	r7, #1
 800c878:	e7e2      	b.n	800c840 <__gethex+0x34c>
 800c87a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c87c:	f1c3 0301 	rsb	r3, r3, #1
 800c880:	9315      	str	r3, [sp, #84]	; 0x54
 800c882:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c884:	2b00      	cmp	r3, #0
 800c886:	d0f0      	beq.n	800c86a <__gethex+0x376>
 800c888:	f04f 0c00 	mov.w	ip, #0
 800c88c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c890:	f104 0314 	add.w	r3, r4, #20
 800c894:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c898:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c89c:	4618      	mov	r0, r3
 800c89e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8a2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c8a6:	d01c      	beq.n	800c8e2 <__gethex+0x3ee>
 800c8a8:	3201      	adds	r2, #1
 800c8aa:	6002      	str	r2, [r0, #0]
 800c8ac:	2f02      	cmp	r7, #2
 800c8ae:	f104 0314 	add.w	r3, r4, #20
 800c8b2:	d13d      	bne.n	800c930 <__gethex+0x43c>
 800c8b4:	f8d8 2000 	ldr.w	r2, [r8]
 800c8b8:	3a01      	subs	r2, #1
 800c8ba:	42b2      	cmp	r2, r6
 800c8bc:	d10a      	bne.n	800c8d4 <__gethex+0x3e0>
 800c8be:	2201      	movs	r2, #1
 800c8c0:	1171      	asrs	r1, r6, #5
 800c8c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c8c6:	f006 061f 	and.w	r6, r6, #31
 800c8ca:	fa02 f606 	lsl.w	r6, r2, r6
 800c8ce:	421e      	tst	r6, r3
 800c8d0:	bf18      	it	ne
 800c8d2:	4617      	movne	r7, r2
 800c8d4:	f047 0720 	orr.w	r7, r7, #32
 800c8d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c8da:	601c      	str	r4, [r3, #0]
 800c8dc:	9b05      	ldr	r3, [sp, #20]
 800c8de:	601d      	str	r5, [r3, #0]
 800c8e0:	e69a      	b.n	800c618 <__gethex+0x124>
 800c8e2:	4299      	cmp	r1, r3
 800c8e4:	f843 cc04 	str.w	ip, [r3, #-4]
 800c8e8:	d8d8      	bhi.n	800c89c <__gethex+0x3a8>
 800c8ea:	68a3      	ldr	r3, [r4, #8]
 800c8ec:	459b      	cmp	fp, r3
 800c8ee:	db17      	blt.n	800c920 <__gethex+0x42c>
 800c8f0:	6861      	ldr	r1, [r4, #4]
 800c8f2:	9802      	ldr	r0, [sp, #8]
 800c8f4:	3101      	adds	r1, #1
 800c8f6:	f000 f935 	bl	800cb64 <_Balloc>
 800c8fa:	4681      	mov	r9, r0
 800c8fc:	b918      	cbnz	r0, 800c906 <__gethex+0x412>
 800c8fe:	4602      	mov	r2, r0
 800c900:	2184      	movs	r1, #132	; 0x84
 800c902:	4b19      	ldr	r3, [pc, #100]	; (800c968 <__gethex+0x474>)
 800c904:	e6ab      	b.n	800c65e <__gethex+0x16a>
 800c906:	6922      	ldr	r2, [r4, #16]
 800c908:	f104 010c 	add.w	r1, r4, #12
 800c90c:	3202      	adds	r2, #2
 800c90e:	0092      	lsls	r2, r2, #2
 800c910:	300c      	adds	r0, #12
 800c912:	f000 f919 	bl	800cb48 <memcpy>
 800c916:	4621      	mov	r1, r4
 800c918:	9802      	ldr	r0, [sp, #8]
 800c91a:	f000 f963 	bl	800cbe4 <_Bfree>
 800c91e:	464c      	mov	r4, r9
 800c920:	6923      	ldr	r3, [r4, #16]
 800c922:	1c5a      	adds	r2, r3, #1
 800c924:	6122      	str	r2, [r4, #16]
 800c926:	2201      	movs	r2, #1
 800c928:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c92c:	615a      	str	r2, [r3, #20]
 800c92e:	e7bd      	b.n	800c8ac <__gethex+0x3b8>
 800c930:	6922      	ldr	r2, [r4, #16]
 800c932:	455a      	cmp	r2, fp
 800c934:	dd0b      	ble.n	800c94e <__gethex+0x45a>
 800c936:	2101      	movs	r1, #1
 800c938:	4620      	mov	r0, r4
 800c93a:	f7ff fd73 	bl	800c424 <rshift>
 800c93e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c942:	3501      	adds	r5, #1
 800c944:	42ab      	cmp	r3, r5
 800c946:	f6ff aed4 	blt.w	800c6f2 <__gethex+0x1fe>
 800c94a:	2701      	movs	r7, #1
 800c94c:	e7c2      	b.n	800c8d4 <__gethex+0x3e0>
 800c94e:	f016 061f 	ands.w	r6, r6, #31
 800c952:	d0fa      	beq.n	800c94a <__gethex+0x456>
 800c954:	4453      	add	r3, sl
 800c956:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c95a:	f000 f9f5 	bl	800cd48 <__hi0bits>
 800c95e:	f1c6 0620 	rsb	r6, r6, #32
 800c962:	42b0      	cmp	r0, r6
 800c964:	dbe7      	blt.n	800c936 <__gethex+0x442>
 800c966:	e7f0      	b.n	800c94a <__gethex+0x456>
 800c968:	0800e818 	.word	0x0800e818

0800c96c <L_shift>:
 800c96c:	f1c2 0208 	rsb	r2, r2, #8
 800c970:	0092      	lsls	r2, r2, #2
 800c972:	b570      	push	{r4, r5, r6, lr}
 800c974:	f1c2 0620 	rsb	r6, r2, #32
 800c978:	6843      	ldr	r3, [r0, #4]
 800c97a:	6804      	ldr	r4, [r0, #0]
 800c97c:	fa03 f506 	lsl.w	r5, r3, r6
 800c980:	432c      	orrs	r4, r5
 800c982:	40d3      	lsrs	r3, r2
 800c984:	6004      	str	r4, [r0, #0]
 800c986:	f840 3f04 	str.w	r3, [r0, #4]!
 800c98a:	4288      	cmp	r0, r1
 800c98c:	d3f4      	bcc.n	800c978 <L_shift+0xc>
 800c98e:	bd70      	pop	{r4, r5, r6, pc}

0800c990 <__match>:
 800c990:	b530      	push	{r4, r5, lr}
 800c992:	6803      	ldr	r3, [r0, #0]
 800c994:	3301      	adds	r3, #1
 800c996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c99a:	b914      	cbnz	r4, 800c9a2 <__match+0x12>
 800c99c:	6003      	str	r3, [r0, #0]
 800c99e:	2001      	movs	r0, #1
 800c9a0:	bd30      	pop	{r4, r5, pc}
 800c9a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c9aa:	2d19      	cmp	r5, #25
 800c9ac:	bf98      	it	ls
 800c9ae:	3220      	addls	r2, #32
 800c9b0:	42a2      	cmp	r2, r4
 800c9b2:	d0f0      	beq.n	800c996 <__match+0x6>
 800c9b4:	2000      	movs	r0, #0
 800c9b6:	e7f3      	b.n	800c9a0 <__match+0x10>

0800c9b8 <__hexnan>:
 800c9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9bc:	2500      	movs	r5, #0
 800c9be:	680b      	ldr	r3, [r1, #0]
 800c9c0:	4682      	mov	sl, r0
 800c9c2:	115e      	asrs	r6, r3, #5
 800c9c4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c9c8:	f013 031f 	ands.w	r3, r3, #31
 800c9cc:	bf18      	it	ne
 800c9ce:	3604      	addne	r6, #4
 800c9d0:	1f37      	subs	r7, r6, #4
 800c9d2:	46b9      	mov	r9, r7
 800c9d4:	463c      	mov	r4, r7
 800c9d6:	46ab      	mov	fp, r5
 800c9d8:	b087      	sub	sp, #28
 800c9da:	4690      	mov	r8, r2
 800c9dc:	6802      	ldr	r2, [r0, #0]
 800c9de:	9301      	str	r3, [sp, #4]
 800c9e0:	f846 5c04 	str.w	r5, [r6, #-4]
 800c9e4:	9502      	str	r5, [sp, #8]
 800c9e6:	7851      	ldrb	r1, [r2, #1]
 800c9e8:	1c53      	adds	r3, r2, #1
 800c9ea:	9303      	str	r3, [sp, #12]
 800c9ec:	b341      	cbz	r1, 800ca40 <__hexnan+0x88>
 800c9ee:	4608      	mov	r0, r1
 800c9f0:	9205      	str	r2, [sp, #20]
 800c9f2:	9104      	str	r1, [sp, #16]
 800c9f4:	f7ff fd69 	bl	800c4ca <__hexdig_fun>
 800c9f8:	2800      	cmp	r0, #0
 800c9fa:	d14f      	bne.n	800ca9c <__hexnan+0xe4>
 800c9fc:	9904      	ldr	r1, [sp, #16]
 800c9fe:	9a05      	ldr	r2, [sp, #20]
 800ca00:	2920      	cmp	r1, #32
 800ca02:	d818      	bhi.n	800ca36 <__hexnan+0x7e>
 800ca04:	9b02      	ldr	r3, [sp, #8]
 800ca06:	459b      	cmp	fp, r3
 800ca08:	dd13      	ble.n	800ca32 <__hexnan+0x7a>
 800ca0a:	454c      	cmp	r4, r9
 800ca0c:	d206      	bcs.n	800ca1c <__hexnan+0x64>
 800ca0e:	2d07      	cmp	r5, #7
 800ca10:	dc04      	bgt.n	800ca1c <__hexnan+0x64>
 800ca12:	462a      	mov	r2, r5
 800ca14:	4649      	mov	r1, r9
 800ca16:	4620      	mov	r0, r4
 800ca18:	f7ff ffa8 	bl	800c96c <L_shift>
 800ca1c:	4544      	cmp	r4, r8
 800ca1e:	d950      	bls.n	800cac2 <__hexnan+0x10a>
 800ca20:	2300      	movs	r3, #0
 800ca22:	f1a4 0904 	sub.w	r9, r4, #4
 800ca26:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca2a:	461d      	mov	r5, r3
 800ca2c:	464c      	mov	r4, r9
 800ca2e:	f8cd b008 	str.w	fp, [sp, #8]
 800ca32:	9a03      	ldr	r2, [sp, #12]
 800ca34:	e7d7      	b.n	800c9e6 <__hexnan+0x2e>
 800ca36:	2929      	cmp	r1, #41	; 0x29
 800ca38:	d156      	bne.n	800cae8 <__hexnan+0x130>
 800ca3a:	3202      	adds	r2, #2
 800ca3c:	f8ca 2000 	str.w	r2, [sl]
 800ca40:	f1bb 0f00 	cmp.w	fp, #0
 800ca44:	d050      	beq.n	800cae8 <__hexnan+0x130>
 800ca46:	454c      	cmp	r4, r9
 800ca48:	d206      	bcs.n	800ca58 <__hexnan+0xa0>
 800ca4a:	2d07      	cmp	r5, #7
 800ca4c:	dc04      	bgt.n	800ca58 <__hexnan+0xa0>
 800ca4e:	462a      	mov	r2, r5
 800ca50:	4649      	mov	r1, r9
 800ca52:	4620      	mov	r0, r4
 800ca54:	f7ff ff8a 	bl	800c96c <L_shift>
 800ca58:	4544      	cmp	r4, r8
 800ca5a:	d934      	bls.n	800cac6 <__hexnan+0x10e>
 800ca5c:	4623      	mov	r3, r4
 800ca5e:	f1a8 0204 	sub.w	r2, r8, #4
 800ca62:	f853 1b04 	ldr.w	r1, [r3], #4
 800ca66:	429f      	cmp	r7, r3
 800ca68:	f842 1f04 	str.w	r1, [r2, #4]!
 800ca6c:	d2f9      	bcs.n	800ca62 <__hexnan+0xaa>
 800ca6e:	1b3b      	subs	r3, r7, r4
 800ca70:	f023 0303 	bic.w	r3, r3, #3
 800ca74:	3304      	adds	r3, #4
 800ca76:	3401      	adds	r4, #1
 800ca78:	3e03      	subs	r6, #3
 800ca7a:	42b4      	cmp	r4, r6
 800ca7c:	bf88      	it	hi
 800ca7e:	2304      	movhi	r3, #4
 800ca80:	2200      	movs	r2, #0
 800ca82:	4443      	add	r3, r8
 800ca84:	f843 2b04 	str.w	r2, [r3], #4
 800ca88:	429f      	cmp	r7, r3
 800ca8a:	d2fb      	bcs.n	800ca84 <__hexnan+0xcc>
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	b91b      	cbnz	r3, 800ca98 <__hexnan+0xe0>
 800ca90:	4547      	cmp	r7, r8
 800ca92:	d127      	bne.n	800cae4 <__hexnan+0x12c>
 800ca94:	2301      	movs	r3, #1
 800ca96:	603b      	str	r3, [r7, #0]
 800ca98:	2005      	movs	r0, #5
 800ca9a:	e026      	b.n	800caea <__hexnan+0x132>
 800ca9c:	3501      	adds	r5, #1
 800ca9e:	2d08      	cmp	r5, #8
 800caa0:	f10b 0b01 	add.w	fp, fp, #1
 800caa4:	dd06      	ble.n	800cab4 <__hexnan+0xfc>
 800caa6:	4544      	cmp	r4, r8
 800caa8:	d9c3      	bls.n	800ca32 <__hexnan+0x7a>
 800caaa:	2300      	movs	r3, #0
 800caac:	2501      	movs	r5, #1
 800caae:	f844 3c04 	str.w	r3, [r4, #-4]
 800cab2:	3c04      	subs	r4, #4
 800cab4:	6822      	ldr	r2, [r4, #0]
 800cab6:	f000 000f 	and.w	r0, r0, #15
 800caba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cabe:	6022      	str	r2, [r4, #0]
 800cac0:	e7b7      	b.n	800ca32 <__hexnan+0x7a>
 800cac2:	2508      	movs	r5, #8
 800cac4:	e7b5      	b.n	800ca32 <__hexnan+0x7a>
 800cac6:	9b01      	ldr	r3, [sp, #4]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d0df      	beq.n	800ca8c <__hexnan+0xd4>
 800cacc:	f04f 32ff 	mov.w	r2, #4294967295
 800cad0:	f1c3 0320 	rsb	r3, r3, #32
 800cad4:	fa22 f303 	lsr.w	r3, r2, r3
 800cad8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cadc:	401a      	ands	r2, r3
 800cade:	f846 2c04 	str.w	r2, [r6, #-4]
 800cae2:	e7d3      	b.n	800ca8c <__hexnan+0xd4>
 800cae4:	3f04      	subs	r7, #4
 800cae6:	e7d1      	b.n	800ca8c <__hexnan+0xd4>
 800cae8:	2004      	movs	r0, #4
 800caea:	b007      	add	sp, #28
 800caec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800caf0 <_localeconv_r>:
 800caf0:	4800      	ldr	r0, [pc, #0]	; (800caf4 <_localeconv_r+0x4>)
 800caf2:	4770      	bx	lr
 800caf4:	200002d4 	.word	0x200002d4

0800caf8 <malloc>:
 800caf8:	4b02      	ldr	r3, [pc, #8]	; (800cb04 <malloc+0xc>)
 800cafa:	4601      	mov	r1, r0
 800cafc:	6818      	ldr	r0, [r3, #0]
 800cafe:	f000 bd65 	b.w	800d5cc <_malloc_r>
 800cb02:	bf00      	nop
 800cb04:	2000017c 	.word	0x2000017c

0800cb08 <__ascii_mbtowc>:
 800cb08:	b082      	sub	sp, #8
 800cb0a:	b901      	cbnz	r1, 800cb0e <__ascii_mbtowc+0x6>
 800cb0c:	a901      	add	r1, sp, #4
 800cb0e:	b142      	cbz	r2, 800cb22 <__ascii_mbtowc+0x1a>
 800cb10:	b14b      	cbz	r3, 800cb26 <__ascii_mbtowc+0x1e>
 800cb12:	7813      	ldrb	r3, [r2, #0]
 800cb14:	600b      	str	r3, [r1, #0]
 800cb16:	7812      	ldrb	r2, [r2, #0]
 800cb18:	1e10      	subs	r0, r2, #0
 800cb1a:	bf18      	it	ne
 800cb1c:	2001      	movne	r0, #1
 800cb1e:	b002      	add	sp, #8
 800cb20:	4770      	bx	lr
 800cb22:	4610      	mov	r0, r2
 800cb24:	e7fb      	b.n	800cb1e <__ascii_mbtowc+0x16>
 800cb26:	f06f 0001 	mvn.w	r0, #1
 800cb2a:	e7f8      	b.n	800cb1e <__ascii_mbtowc+0x16>

0800cb2c <memchr>:
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	b510      	push	{r4, lr}
 800cb30:	b2c9      	uxtb	r1, r1
 800cb32:	4402      	add	r2, r0
 800cb34:	4293      	cmp	r3, r2
 800cb36:	4618      	mov	r0, r3
 800cb38:	d101      	bne.n	800cb3e <memchr+0x12>
 800cb3a:	2000      	movs	r0, #0
 800cb3c:	e003      	b.n	800cb46 <memchr+0x1a>
 800cb3e:	7804      	ldrb	r4, [r0, #0]
 800cb40:	3301      	adds	r3, #1
 800cb42:	428c      	cmp	r4, r1
 800cb44:	d1f6      	bne.n	800cb34 <memchr+0x8>
 800cb46:	bd10      	pop	{r4, pc}

0800cb48 <memcpy>:
 800cb48:	440a      	add	r2, r1
 800cb4a:	4291      	cmp	r1, r2
 800cb4c:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb50:	d100      	bne.n	800cb54 <memcpy+0xc>
 800cb52:	4770      	bx	lr
 800cb54:	b510      	push	{r4, lr}
 800cb56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb5a:	4291      	cmp	r1, r2
 800cb5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb60:	d1f9      	bne.n	800cb56 <memcpy+0xe>
 800cb62:	bd10      	pop	{r4, pc}

0800cb64 <_Balloc>:
 800cb64:	b570      	push	{r4, r5, r6, lr}
 800cb66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cb68:	4604      	mov	r4, r0
 800cb6a:	460d      	mov	r5, r1
 800cb6c:	b976      	cbnz	r6, 800cb8c <_Balloc+0x28>
 800cb6e:	2010      	movs	r0, #16
 800cb70:	f7ff ffc2 	bl	800caf8 <malloc>
 800cb74:	4602      	mov	r2, r0
 800cb76:	6260      	str	r0, [r4, #36]	; 0x24
 800cb78:	b920      	cbnz	r0, 800cb84 <_Balloc+0x20>
 800cb7a:	2166      	movs	r1, #102	; 0x66
 800cb7c:	4b17      	ldr	r3, [pc, #92]	; (800cbdc <_Balloc+0x78>)
 800cb7e:	4818      	ldr	r0, [pc, #96]	; (800cbe0 <_Balloc+0x7c>)
 800cb80:	f000 ff2c 	bl	800d9dc <__assert_func>
 800cb84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb88:	6006      	str	r6, [r0, #0]
 800cb8a:	60c6      	str	r6, [r0, #12]
 800cb8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cb8e:	68f3      	ldr	r3, [r6, #12]
 800cb90:	b183      	cbz	r3, 800cbb4 <_Balloc+0x50>
 800cb92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb94:	68db      	ldr	r3, [r3, #12]
 800cb96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb9a:	b9b8      	cbnz	r0, 800cbcc <_Balloc+0x68>
 800cb9c:	2101      	movs	r1, #1
 800cb9e:	fa01 f605 	lsl.w	r6, r1, r5
 800cba2:	1d72      	adds	r2, r6, #5
 800cba4:	4620      	mov	r0, r4
 800cba6:	0092      	lsls	r2, r2, #2
 800cba8:	f000 fc94 	bl	800d4d4 <_calloc_r>
 800cbac:	b160      	cbz	r0, 800cbc8 <_Balloc+0x64>
 800cbae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cbb2:	e00e      	b.n	800cbd2 <_Balloc+0x6e>
 800cbb4:	2221      	movs	r2, #33	; 0x21
 800cbb6:	2104      	movs	r1, #4
 800cbb8:	4620      	mov	r0, r4
 800cbba:	f000 fc8b 	bl	800d4d4 <_calloc_r>
 800cbbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cbc0:	60f0      	str	r0, [r6, #12]
 800cbc2:	68db      	ldr	r3, [r3, #12]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d1e4      	bne.n	800cb92 <_Balloc+0x2e>
 800cbc8:	2000      	movs	r0, #0
 800cbca:	bd70      	pop	{r4, r5, r6, pc}
 800cbcc:	6802      	ldr	r2, [r0, #0]
 800cbce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cbd8:	e7f7      	b.n	800cbca <_Balloc+0x66>
 800cbda:	bf00      	nop
 800cbdc:	0800e7a6 	.word	0x0800e7a6
 800cbe0:	0800e8a4 	.word	0x0800e8a4

0800cbe4 <_Bfree>:
 800cbe4:	b570      	push	{r4, r5, r6, lr}
 800cbe6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cbe8:	4605      	mov	r5, r0
 800cbea:	460c      	mov	r4, r1
 800cbec:	b976      	cbnz	r6, 800cc0c <_Bfree+0x28>
 800cbee:	2010      	movs	r0, #16
 800cbf0:	f7ff ff82 	bl	800caf8 <malloc>
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	6268      	str	r0, [r5, #36]	; 0x24
 800cbf8:	b920      	cbnz	r0, 800cc04 <_Bfree+0x20>
 800cbfa:	218a      	movs	r1, #138	; 0x8a
 800cbfc:	4b08      	ldr	r3, [pc, #32]	; (800cc20 <_Bfree+0x3c>)
 800cbfe:	4809      	ldr	r0, [pc, #36]	; (800cc24 <_Bfree+0x40>)
 800cc00:	f000 feec 	bl	800d9dc <__assert_func>
 800cc04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc08:	6006      	str	r6, [r0, #0]
 800cc0a:	60c6      	str	r6, [r0, #12]
 800cc0c:	b13c      	cbz	r4, 800cc1e <_Bfree+0x3a>
 800cc0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cc10:	6862      	ldr	r2, [r4, #4]
 800cc12:	68db      	ldr	r3, [r3, #12]
 800cc14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cc18:	6021      	str	r1, [r4, #0]
 800cc1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cc1e:	bd70      	pop	{r4, r5, r6, pc}
 800cc20:	0800e7a6 	.word	0x0800e7a6
 800cc24:	0800e8a4 	.word	0x0800e8a4

0800cc28 <__multadd>:
 800cc28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc2c:	4607      	mov	r7, r0
 800cc2e:	460c      	mov	r4, r1
 800cc30:	461e      	mov	r6, r3
 800cc32:	2000      	movs	r0, #0
 800cc34:	690d      	ldr	r5, [r1, #16]
 800cc36:	f101 0c14 	add.w	ip, r1, #20
 800cc3a:	f8dc 3000 	ldr.w	r3, [ip]
 800cc3e:	3001      	adds	r0, #1
 800cc40:	b299      	uxth	r1, r3
 800cc42:	fb02 6101 	mla	r1, r2, r1, r6
 800cc46:	0c1e      	lsrs	r6, r3, #16
 800cc48:	0c0b      	lsrs	r3, r1, #16
 800cc4a:	fb02 3306 	mla	r3, r2, r6, r3
 800cc4e:	b289      	uxth	r1, r1
 800cc50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cc54:	4285      	cmp	r5, r0
 800cc56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cc5a:	f84c 1b04 	str.w	r1, [ip], #4
 800cc5e:	dcec      	bgt.n	800cc3a <__multadd+0x12>
 800cc60:	b30e      	cbz	r6, 800cca6 <__multadd+0x7e>
 800cc62:	68a3      	ldr	r3, [r4, #8]
 800cc64:	42ab      	cmp	r3, r5
 800cc66:	dc19      	bgt.n	800cc9c <__multadd+0x74>
 800cc68:	6861      	ldr	r1, [r4, #4]
 800cc6a:	4638      	mov	r0, r7
 800cc6c:	3101      	adds	r1, #1
 800cc6e:	f7ff ff79 	bl	800cb64 <_Balloc>
 800cc72:	4680      	mov	r8, r0
 800cc74:	b928      	cbnz	r0, 800cc82 <__multadd+0x5a>
 800cc76:	4602      	mov	r2, r0
 800cc78:	21b5      	movs	r1, #181	; 0xb5
 800cc7a:	4b0c      	ldr	r3, [pc, #48]	; (800ccac <__multadd+0x84>)
 800cc7c:	480c      	ldr	r0, [pc, #48]	; (800ccb0 <__multadd+0x88>)
 800cc7e:	f000 fead 	bl	800d9dc <__assert_func>
 800cc82:	6922      	ldr	r2, [r4, #16]
 800cc84:	f104 010c 	add.w	r1, r4, #12
 800cc88:	3202      	adds	r2, #2
 800cc8a:	0092      	lsls	r2, r2, #2
 800cc8c:	300c      	adds	r0, #12
 800cc8e:	f7ff ff5b 	bl	800cb48 <memcpy>
 800cc92:	4621      	mov	r1, r4
 800cc94:	4638      	mov	r0, r7
 800cc96:	f7ff ffa5 	bl	800cbe4 <_Bfree>
 800cc9a:	4644      	mov	r4, r8
 800cc9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cca0:	3501      	adds	r5, #1
 800cca2:	615e      	str	r6, [r3, #20]
 800cca4:	6125      	str	r5, [r4, #16]
 800cca6:	4620      	mov	r0, r4
 800cca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccac:	0800e818 	.word	0x0800e818
 800ccb0:	0800e8a4 	.word	0x0800e8a4

0800ccb4 <__s2b>:
 800ccb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccb8:	4615      	mov	r5, r2
 800ccba:	2209      	movs	r2, #9
 800ccbc:	461f      	mov	r7, r3
 800ccbe:	3308      	adds	r3, #8
 800ccc0:	460c      	mov	r4, r1
 800ccc2:	fb93 f3f2 	sdiv	r3, r3, r2
 800ccc6:	4606      	mov	r6, r0
 800ccc8:	2201      	movs	r2, #1
 800ccca:	2100      	movs	r1, #0
 800cccc:	429a      	cmp	r2, r3
 800ccce:	db09      	blt.n	800cce4 <__s2b+0x30>
 800ccd0:	4630      	mov	r0, r6
 800ccd2:	f7ff ff47 	bl	800cb64 <_Balloc>
 800ccd6:	b940      	cbnz	r0, 800ccea <__s2b+0x36>
 800ccd8:	4602      	mov	r2, r0
 800ccda:	21ce      	movs	r1, #206	; 0xce
 800ccdc:	4b18      	ldr	r3, [pc, #96]	; (800cd40 <__s2b+0x8c>)
 800ccde:	4819      	ldr	r0, [pc, #100]	; (800cd44 <__s2b+0x90>)
 800cce0:	f000 fe7c 	bl	800d9dc <__assert_func>
 800cce4:	0052      	lsls	r2, r2, #1
 800cce6:	3101      	adds	r1, #1
 800cce8:	e7f0      	b.n	800cccc <__s2b+0x18>
 800ccea:	9b08      	ldr	r3, [sp, #32]
 800ccec:	2d09      	cmp	r5, #9
 800ccee:	6143      	str	r3, [r0, #20]
 800ccf0:	f04f 0301 	mov.w	r3, #1
 800ccf4:	6103      	str	r3, [r0, #16]
 800ccf6:	dd16      	ble.n	800cd26 <__s2b+0x72>
 800ccf8:	f104 0909 	add.w	r9, r4, #9
 800ccfc:	46c8      	mov	r8, r9
 800ccfe:	442c      	add	r4, r5
 800cd00:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cd04:	4601      	mov	r1, r0
 800cd06:	220a      	movs	r2, #10
 800cd08:	4630      	mov	r0, r6
 800cd0a:	3b30      	subs	r3, #48	; 0x30
 800cd0c:	f7ff ff8c 	bl	800cc28 <__multadd>
 800cd10:	45a0      	cmp	r8, r4
 800cd12:	d1f5      	bne.n	800cd00 <__s2b+0x4c>
 800cd14:	f1a5 0408 	sub.w	r4, r5, #8
 800cd18:	444c      	add	r4, r9
 800cd1a:	1b2d      	subs	r5, r5, r4
 800cd1c:	1963      	adds	r3, r4, r5
 800cd1e:	42bb      	cmp	r3, r7
 800cd20:	db04      	blt.n	800cd2c <__s2b+0x78>
 800cd22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd26:	2509      	movs	r5, #9
 800cd28:	340a      	adds	r4, #10
 800cd2a:	e7f6      	b.n	800cd1a <__s2b+0x66>
 800cd2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cd30:	4601      	mov	r1, r0
 800cd32:	220a      	movs	r2, #10
 800cd34:	4630      	mov	r0, r6
 800cd36:	3b30      	subs	r3, #48	; 0x30
 800cd38:	f7ff ff76 	bl	800cc28 <__multadd>
 800cd3c:	e7ee      	b.n	800cd1c <__s2b+0x68>
 800cd3e:	bf00      	nop
 800cd40:	0800e818 	.word	0x0800e818
 800cd44:	0800e8a4 	.word	0x0800e8a4

0800cd48 <__hi0bits>:
 800cd48:	0c02      	lsrs	r2, r0, #16
 800cd4a:	0412      	lsls	r2, r2, #16
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	b9ca      	cbnz	r2, 800cd84 <__hi0bits+0x3c>
 800cd50:	0403      	lsls	r3, r0, #16
 800cd52:	2010      	movs	r0, #16
 800cd54:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800cd58:	bf04      	itt	eq
 800cd5a:	021b      	lsleq	r3, r3, #8
 800cd5c:	3008      	addeq	r0, #8
 800cd5e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cd62:	bf04      	itt	eq
 800cd64:	011b      	lsleq	r3, r3, #4
 800cd66:	3004      	addeq	r0, #4
 800cd68:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cd6c:	bf04      	itt	eq
 800cd6e:	009b      	lsleq	r3, r3, #2
 800cd70:	3002      	addeq	r0, #2
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	db05      	blt.n	800cd82 <__hi0bits+0x3a>
 800cd76:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800cd7a:	f100 0001 	add.w	r0, r0, #1
 800cd7e:	bf08      	it	eq
 800cd80:	2020      	moveq	r0, #32
 800cd82:	4770      	bx	lr
 800cd84:	2000      	movs	r0, #0
 800cd86:	e7e5      	b.n	800cd54 <__hi0bits+0xc>

0800cd88 <__lo0bits>:
 800cd88:	6803      	ldr	r3, [r0, #0]
 800cd8a:	4602      	mov	r2, r0
 800cd8c:	f013 0007 	ands.w	r0, r3, #7
 800cd90:	d00b      	beq.n	800cdaa <__lo0bits+0x22>
 800cd92:	07d9      	lsls	r1, r3, #31
 800cd94:	d421      	bmi.n	800cdda <__lo0bits+0x52>
 800cd96:	0798      	lsls	r0, r3, #30
 800cd98:	bf49      	itett	mi
 800cd9a:	085b      	lsrmi	r3, r3, #1
 800cd9c:	089b      	lsrpl	r3, r3, #2
 800cd9e:	2001      	movmi	r0, #1
 800cda0:	6013      	strmi	r3, [r2, #0]
 800cda2:	bf5c      	itt	pl
 800cda4:	2002      	movpl	r0, #2
 800cda6:	6013      	strpl	r3, [r2, #0]
 800cda8:	4770      	bx	lr
 800cdaa:	b299      	uxth	r1, r3
 800cdac:	b909      	cbnz	r1, 800cdb2 <__lo0bits+0x2a>
 800cdae:	2010      	movs	r0, #16
 800cdb0:	0c1b      	lsrs	r3, r3, #16
 800cdb2:	b2d9      	uxtb	r1, r3
 800cdb4:	b909      	cbnz	r1, 800cdba <__lo0bits+0x32>
 800cdb6:	3008      	adds	r0, #8
 800cdb8:	0a1b      	lsrs	r3, r3, #8
 800cdba:	0719      	lsls	r1, r3, #28
 800cdbc:	bf04      	itt	eq
 800cdbe:	091b      	lsreq	r3, r3, #4
 800cdc0:	3004      	addeq	r0, #4
 800cdc2:	0799      	lsls	r1, r3, #30
 800cdc4:	bf04      	itt	eq
 800cdc6:	089b      	lsreq	r3, r3, #2
 800cdc8:	3002      	addeq	r0, #2
 800cdca:	07d9      	lsls	r1, r3, #31
 800cdcc:	d403      	bmi.n	800cdd6 <__lo0bits+0x4e>
 800cdce:	085b      	lsrs	r3, r3, #1
 800cdd0:	f100 0001 	add.w	r0, r0, #1
 800cdd4:	d003      	beq.n	800cdde <__lo0bits+0x56>
 800cdd6:	6013      	str	r3, [r2, #0]
 800cdd8:	4770      	bx	lr
 800cdda:	2000      	movs	r0, #0
 800cddc:	4770      	bx	lr
 800cdde:	2020      	movs	r0, #32
 800cde0:	4770      	bx	lr
	...

0800cde4 <__i2b>:
 800cde4:	b510      	push	{r4, lr}
 800cde6:	460c      	mov	r4, r1
 800cde8:	2101      	movs	r1, #1
 800cdea:	f7ff febb 	bl	800cb64 <_Balloc>
 800cdee:	4602      	mov	r2, r0
 800cdf0:	b928      	cbnz	r0, 800cdfe <__i2b+0x1a>
 800cdf2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cdf6:	4b04      	ldr	r3, [pc, #16]	; (800ce08 <__i2b+0x24>)
 800cdf8:	4804      	ldr	r0, [pc, #16]	; (800ce0c <__i2b+0x28>)
 800cdfa:	f000 fdef 	bl	800d9dc <__assert_func>
 800cdfe:	2301      	movs	r3, #1
 800ce00:	6144      	str	r4, [r0, #20]
 800ce02:	6103      	str	r3, [r0, #16]
 800ce04:	bd10      	pop	{r4, pc}
 800ce06:	bf00      	nop
 800ce08:	0800e818 	.word	0x0800e818
 800ce0c:	0800e8a4 	.word	0x0800e8a4

0800ce10 <__multiply>:
 800ce10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce14:	4691      	mov	r9, r2
 800ce16:	690a      	ldr	r2, [r1, #16]
 800ce18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ce1c:	460c      	mov	r4, r1
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	bfbe      	ittt	lt
 800ce22:	460b      	movlt	r3, r1
 800ce24:	464c      	movlt	r4, r9
 800ce26:	4699      	movlt	r9, r3
 800ce28:	6927      	ldr	r7, [r4, #16]
 800ce2a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ce2e:	68a3      	ldr	r3, [r4, #8]
 800ce30:	6861      	ldr	r1, [r4, #4]
 800ce32:	eb07 060a 	add.w	r6, r7, sl
 800ce36:	42b3      	cmp	r3, r6
 800ce38:	b085      	sub	sp, #20
 800ce3a:	bfb8      	it	lt
 800ce3c:	3101      	addlt	r1, #1
 800ce3e:	f7ff fe91 	bl	800cb64 <_Balloc>
 800ce42:	b930      	cbnz	r0, 800ce52 <__multiply+0x42>
 800ce44:	4602      	mov	r2, r0
 800ce46:	f240 115d 	movw	r1, #349	; 0x15d
 800ce4a:	4b43      	ldr	r3, [pc, #268]	; (800cf58 <__multiply+0x148>)
 800ce4c:	4843      	ldr	r0, [pc, #268]	; (800cf5c <__multiply+0x14c>)
 800ce4e:	f000 fdc5 	bl	800d9dc <__assert_func>
 800ce52:	f100 0514 	add.w	r5, r0, #20
 800ce56:	462b      	mov	r3, r5
 800ce58:	2200      	movs	r2, #0
 800ce5a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ce5e:	4543      	cmp	r3, r8
 800ce60:	d321      	bcc.n	800cea6 <__multiply+0x96>
 800ce62:	f104 0314 	add.w	r3, r4, #20
 800ce66:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ce6a:	f109 0314 	add.w	r3, r9, #20
 800ce6e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ce72:	9202      	str	r2, [sp, #8]
 800ce74:	1b3a      	subs	r2, r7, r4
 800ce76:	3a15      	subs	r2, #21
 800ce78:	f022 0203 	bic.w	r2, r2, #3
 800ce7c:	3204      	adds	r2, #4
 800ce7e:	f104 0115 	add.w	r1, r4, #21
 800ce82:	428f      	cmp	r7, r1
 800ce84:	bf38      	it	cc
 800ce86:	2204      	movcc	r2, #4
 800ce88:	9201      	str	r2, [sp, #4]
 800ce8a:	9a02      	ldr	r2, [sp, #8]
 800ce8c:	9303      	str	r3, [sp, #12]
 800ce8e:	429a      	cmp	r2, r3
 800ce90:	d80c      	bhi.n	800ceac <__multiply+0x9c>
 800ce92:	2e00      	cmp	r6, #0
 800ce94:	dd03      	ble.n	800ce9e <__multiply+0x8e>
 800ce96:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d059      	beq.n	800cf52 <__multiply+0x142>
 800ce9e:	6106      	str	r6, [r0, #16]
 800cea0:	b005      	add	sp, #20
 800cea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cea6:	f843 2b04 	str.w	r2, [r3], #4
 800ceaa:	e7d8      	b.n	800ce5e <__multiply+0x4e>
 800ceac:	f8b3 a000 	ldrh.w	sl, [r3]
 800ceb0:	f1ba 0f00 	cmp.w	sl, #0
 800ceb4:	d023      	beq.n	800cefe <__multiply+0xee>
 800ceb6:	46a9      	mov	r9, r5
 800ceb8:	f04f 0c00 	mov.w	ip, #0
 800cebc:	f104 0e14 	add.w	lr, r4, #20
 800cec0:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cec4:	f8d9 1000 	ldr.w	r1, [r9]
 800cec8:	fa1f fb82 	uxth.w	fp, r2
 800cecc:	b289      	uxth	r1, r1
 800cece:	fb0a 110b 	mla	r1, sl, fp, r1
 800ced2:	4461      	add	r1, ip
 800ced4:	f8d9 c000 	ldr.w	ip, [r9]
 800ced8:	0c12      	lsrs	r2, r2, #16
 800ceda:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800cede:	fb0a c202 	mla	r2, sl, r2, ip
 800cee2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cee6:	b289      	uxth	r1, r1
 800cee8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ceec:	4577      	cmp	r7, lr
 800ceee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cef2:	f849 1b04 	str.w	r1, [r9], #4
 800cef6:	d8e3      	bhi.n	800cec0 <__multiply+0xb0>
 800cef8:	9a01      	ldr	r2, [sp, #4]
 800cefa:	f845 c002 	str.w	ip, [r5, r2]
 800cefe:	9a03      	ldr	r2, [sp, #12]
 800cf00:	3304      	adds	r3, #4
 800cf02:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cf06:	f1b9 0f00 	cmp.w	r9, #0
 800cf0a:	d020      	beq.n	800cf4e <__multiply+0x13e>
 800cf0c:	46ae      	mov	lr, r5
 800cf0e:	f04f 0a00 	mov.w	sl, #0
 800cf12:	6829      	ldr	r1, [r5, #0]
 800cf14:	f104 0c14 	add.w	ip, r4, #20
 800cf18:	f8bc b000 	ldrh.w	fp, [ip]
 800cf1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cf20:	b289      	uxth	r1, r1
 800cf22:	fb09 220b 	mla	r2, r9, fp, r2
 800cf26:	4492      	add	sl, r2
 800cf28:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cf2c:	f84e 1b04 	str.w	r1, [lr], #4
 800cf30:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cf34:	f8be 1000 	ldrh.w	r1, [lr]
 800cf38:	0c12      	lsrs	r2, r2, #16
 800cf3a:	fb09 1102 	mla	r1, r9, r2, r1
 800cf3e:	4567      	cmp	r7, ip
 800cf40:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cf44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cf48:	d8e6      	bhi.n	800cf18 <__multiply+0x108>
 800cf4a:	9a01      	ldr	r2, [sp, #4]
 800cf4c:	50a9      	str	r1, [r5, r2]
 800cf4e:	3504      	adds	r5, #4
 800cf50:	e79b      	b.n	800ce8a <__multiply+0x7a>
 800cf52:	3e01      	subs	r6, #1
 800cf54:	e79d      	b.n	800ce92 <__multiply+0x82>
 800cf56:	bf00      	nop
 800cf58:	0800e818 	.word	0x0800e818
 800cf5c:	0800e8a4 	.word	0x0800e8a4

0800cf60 <__pow5mult>:
 800cf60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf64:	4615      	mov	r5, r2
 800cf66:	f012 0203 	ands.w	r2, r2, #3
 800cf6a:	4606      	mov	r6, r0
 800cf6c:	460f      	mov	r7, r1
 800cf6e:	d007      	beq.n	800cf80 <__pow5mult+0x20>
 800cf70:	4c25      	ldr	r4, [pc, #148]	; (800d008 <__pow5mult+0xa8>)
 800cf72:	3a01      	subs	r2, #1
 800cf74:	2300      	movs	r3, #0
 800cf76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf7a:	f7ff fe55 	bl	800cc28 <__multadd>
 800cf7e:	4607      	mov	r7, r0
 800cf80:	10ad      	asrs	r5, r5, #2
 800cf82:	d03d      	beq.n	800d000 <__pow5mult+0xa0>
 800cf84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cf86:	b97c      	cbnz	r4, 800cfa8 <__pow5mult+0x48>
 800cf88:	2010      	movs	r0, #16
 800cf8a:	f7ff fdb5 	bl	800caf8 <malloc>
 800cf8e:	4602      	mov	r2, r0
 800cf90:	6270      	str	r0, [r6, #36]	; 0x24
 800cf92:	b928      	cbnz	r0, 800cfa0 <__pow5mult+0x40>
 800cf94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cf98:	4b1c      	ldr	r3, [pc, #112]	; (800d00c <__pow5mult+0xac>)
 800cf9a:	481d      	ldr	r0, [pc, #116]	; (800d010 <__pow5mult+0xb0>)
 800cf9c:	f000 fd1e 	bl	800d9dc <__assert_func>
 800cfa0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cfa4:	6004      	str	r4, [r0, #0]
 800cfa6:	60c4      	str	r4, [r0, #12]
 800cfa8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cfac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cfb0:	b94c      	cbnz	r4, 800cfc6 <__pow5mult+0x66>
 800cfb2:	f240 2171 	movw	r1, #625	; 0x271
 800cfb6:	4630      	mov	r0, r6
 800cfb8:	f7ff ff14 	bl	800cde4 <__i2b>
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	4604      	mov	r4, r0
 800cfc0:	f8c8 0008 	str.w	r0, [r8, #8]
 800cfc4:	6003      	str	r3, [r0, #0]
 800cfc6:	f04f 0900 	mov.w	r9, #0
 800cfca:	07eb      	lsls	r3, r5, #31
 800cfcc:	d50a      	bpl.n	800cfe4 <__pow5mult+0x84>
 800cfce:	4639      	mov	r1, r7
 800cfd0:	4622      	mov	r2, r4
 800cfd2:	4630      	mov	r0, r6
 800cfd4:	f7ff ff1c 	bl	800ce10 <__multiply>
 800cfd8:	4680      	mov	r8, r0
 800cfda:	4639      	mov	r1, r7
 800cfdc:	4630      	mov	r0, r6
 800cfde:	f7ff fe01 	bl	800cbe4 <_Bfree>
 800cfe2:	4647      	mov	r7, r8
 800cfe4:	106d      	asrs	r5, r5, #1
 800cfe6:	d00b      	beq.n	800d000 <__pow5mult+0xa0>
 800cfe8:	6820      	ldr	r0, [r4, #0]
 800cfea:	b938      	cbnz	r0, 800cffc <__pow5mult+0x9c>
 800cfec:	4622      	mov	r2, r4
 800cfee:	4621      	mov	r1, r4
 800cff0:	4630      	mov	r0, r6
 800cff2:	f7ff ff0d 	bl	800ce10 <__multiply>
 800cff6:	6020      	str	r0, [r4, #0]
 800cff8:	f8c0 9000 	str.w	r9, [r0]
 800cffc:	4604      	mov	r4, r0
 800cffe:	e7e4      	b.n	800cfca <__pow5mult+0x6a>
 800d000:	4638      	mov	r0, r7
 800d002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d006:	bf00      	nop
 800d008:	0800e9f0 	.word	0x0800e9f0
 800d00c:	0800e7a6 	.word	0x0800e7a6
 800d010:	0800e8a4 	.word	0x0800e8a4

0800d014 <__lshift>:
 800d014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d018:	460c      	mov	r4, r1
 800d01a:	4607      	mov	r7, r0
 800d01c:	4691      	mov	r9, r2
 800d01e:	6923      	ldr	r3, [r4, #16]
 800d020:	6849      	ldr	r1, [r1, #4]
 800d022:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d026:	68a3      	ldr	r3, [r4, #8]
 800d028:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d02c:	f108 0601 	add.w	r6, r8, #1
 800d030:	42b3      	cmp	r3, r6
 800d032:	db0b      	blt.n	800d04c <__lshift+0x38>
 800d034:	4638      	mov	r0, r7
 800d036:	f7ff fd95 	bl	800cb64 <_Balloc>
 800d03a:	4605      	mov	r5, r0
 800d03c:	b948      	cbnz	r0, 800d052 <__lshift+0x3e>
 800d03e:	4602      	mov	r2, r0
 800d040:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d044:	4b29      	ldr	r3, [pc, #164]	; (800d0ec <__lshift+0xd8>)
 800d046:	482a      	ldr	r0, [pc, #168]	; (800d0f0 <__lshift+0xdc>)
 800d048:	f000 fcc8 	bl	800d9dc <__assert_func>
 800d04c:	3101      	adds	r1, #1
 800d04e:	005b      	lsls	r3, r3, #1
 800d050:	e7ee      	b.n	800d030 <__lshift+0x1c>
 800d052:	2300      	movs	r3, #0
 800d054:	f100 0114 	add.w	r1, r0, #20
 800d058:	f100 0210 	add.w	r2, r0, #16
 800d05c:	4618      	mov	r0, r3
 800d05e:	4553      	cmp	r3, sl
 800d060:	db37      	blt.n	800d0d2 <__lshift+0xbe>
 800d062:	6920      	ldr	r0, [r4, #16]
 800d064:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d068:	f104 0314 	add.w	r3, r4, #20
 800d06c:	f019 091f 	ands.w	r9, r9, #31
 800d070:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d074:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d078:	d02f      	beq.n	800d0da <__lshift+0xc6>
 800d07a:	468a      	mov	sl, r1
 800d07c:	f04f 0c00 	mov.w	ip, #0
 800d080:	f1c9 0e20 	rsb	lr, r9, #32
 800d084:	681a      	ldr	r2, [r3, #0]
 800d086:	fa02 f209 	lsl.w	r2, r2, r9
 800d08a:	ea42 020c 	orr.w	r2, r2, ip
 800d08e:	f84a 2b04 	str.w	r2, [sl], #4
 800d092:	f853 2b04 	ldr.w	r2, [r3], #4
 800d096:	4298      	cmp	r0, r3
 800d098:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d09c:	d8f2      	bhi.n	800d084 <__lshift+0x70>
 800d09e:	1b03      	subs	r3, r0, r4
 800d0a0:	3b15      	subs	r3, #21
 800d0a2:	f023 0303 	bic.w	r3, r3, #3
 800d0a6:	3304      	adds	r3, #4
 800d0a8:	f104 0215 	add.w	r2, r4, #21
 800d0ac:	4290      	cmp	r0, r2
 800d0ae:	bf38      	it	cc
 800d0b0:	2304      	movcc	r3, #4
 800d0b2:	f841 c003 	str.w	ip, [r1, r3]
 800d0b6:	f1bc 0f00 	cmp.w	ip, #0
 800d0ba:	d001      	beq.n	800d0c0 <__lshift+0xac>
 800d0bc:	f108 0602 	add.w	r6, r8, #2
 800d0c0:	3e01      	subs	r6, #1
 800d0c2:	4638      	mov	r0, r7
 800d0c4:	4621      	mov	r1, r4
 800d0c6:	612e      	str	r6, [r5, #16]
 800d0c8:	f7ff fd8c 	bl	800cbe4 <_Bfree>
 800d0cc:	4628      	mov	r0, r5
 800d0ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d0d6:	3301      	adds	r3, #1
 800d0d8:	e7c1      	b.n	800d05e <__lshift+0x4a>
 800d0da:	3904      	subs	r1, #4
 800d0dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0e0:	4298      	cmp	r0, r3
 800d0e2:	f841 2f04 	str.w	r2, [r1, #4]!
 800d0e6:	d8f9      	bhi.n	800d0dc <__lshift+0xc8>
 800d0e8:	e7ea      	b.n	800d0c0 <__lshift+0xac>
 800d0ea:	bf00      	nop
 800d0ec:	0800e818 	.word	0x0800e818
 800d0f0:	0800e8a4 	.word	0x0800e8a4

0800d0f4 <__mcmp>:
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	690a      	ldr	r2, [r1, #16]
 800d0f8:	6900      	ldr	r0, [r0, #16]
 800d0fa:	b530      	push	{r4, r5, lr}
 800d0fc:	1a80      	subs	r0, r0, r2
 800d0fe:	d10d      	bne.n	800d11c <__mcmp+0x28>
 800d100:	3314      	adds	r3, #20
 800d102:	3114      	adds	r1, #20
 800d104:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d108:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d10c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d110:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d114:	4295      	cmp	r5, r2
 800d116:	d002      	beq.n	800d11e <__mcmp+0x2a>
 800d118:	d304      	bcc.n	800d124 <__mcmp+0x30>
 800d11a:	2001      	movs	r0, #1
 800d11c:	bd30      	pop	{r4, r5, pc}
 800d11e:	42a3      	cmp	r3, r4
 800d120:	d3f4      	bcc.n	800d10c <__mcmp+0x18>
 800d122:	e7fb      	b.n	800d11c <__mcmp+0x28>
 800d124:	f04f 30ff 	mov.w	r0, #4294967295
 800d128:	e7f8      	b.n	800d11c <__mcmp+0x28>
	...

0800d12c <__mdiff>:
 800d12c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d130:	460d      	mov	r5, r1
 800d132:	4607      	mov	r7, r0
 800d134:	4611      	mov	r1, r2
 800d136:	4628      	mov	r0, r5
 800d138:	4614      	mov	r4, r2
 800d13a:	f7ff ffdb 	bl	800d0f4 <__mcmp>
 800d13e:	1e06      	subs	r6, r0, #0
 800d140:	d111      	bne.n	800d166 <__mdiff+0x3a>
 800d142:	4631      	mov	r1, r6
 800d144:	4638      	mov	r0, r7
 800d146:	f7ff fd0d 	bl	800cb64 <_Balloc>
 800d14a:	4602      	mov	r2, r0
 800d14c:	b928      	cbnz	r0, 800d15a <__mdiff+0x2e>
 800d14e:	f240 2132 	movw	r1, #562	; 0x232
 800d152:	4b3a      	ldr	r3, [pc, #232]	; (800d23c <__mdiff+0x110>)
 800d154:	483a      	ldr	r0, [pc, #232]	; (800d240 <__mdiff+0x114>)
 800d156:	f000 fc41 	bl	800d9dc <__assert_func>
 800d15a:	2301      	movs	r3, #1
 800d15c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d160:	4610      	mov	r0, r2
 800d162:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d166:	bfa4      	itt	ge
 800d168:	4623      	movge	r3, r4
 800d16a:	462c      	movge	r4, r5
 800d16c:	4638      	mov	r0, r7
 800d16e:	6861      	ldr	r1, [r4, #4]
 800d170:	bfa6      	itte	ge
 800d172:	461d      	movge	r5, r3
 800d174:	2600      	movge	r6, #0
 800d176:	2601      	movlt	r6, #1
 800d178:	f7ff fcf4 	bl	800cb64 <_Balloc>
 800d17c:	4602      	mov	r2, r0
 800d17e:	b918      	cbnz	r0, 800d188 <__mdiff+0x5c>
 800d180:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d184:	4b2d      	ldr	r3, [pc, #180]	; (800d23c <__mdiff+0x110>)
 800d186:	e7e5      	b.n	800d154 <__mdiff+0x28>
 800d188:	f102 0814 	add.w	r8, r2, #20
 800d18c:	46c2      	mov	sl, r8
 800d18e:	f04f 0c00 	mov.w	ip, #0
 800d192:	6927      	ldr	r7, [r4, #16]
 800d194:	60c6      	str	r6, [r0, #12]
 800d196:	692e      	ldr	r6, [r5, #16]
 800d198:	f104 0014 	add.w	r0, r4, #20
 800d19c:	f105 0914 	add.w	r9, r5, #20
 800d1a0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800d1a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d1a8:	3410      	adds	r4, #16
 800d1aa:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800d1ae:	f859 3b04 	ldr.w	r3, [r9], #4
 800d1b2:	fa1f f18b 	uxth.w	r1, fp
 800d1b6:	448c      	add	ip, r1
 800d1b8:	b299      	uxth	r1, r3
 800d1ba:	0c1b      	lsrs	r3, r3, #16
 800d1bc:	ebac 0101 	sub.w	r1, ip, r1
 800d1c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d1c4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d1c8:	b289      	uxth	r1, r1
 800d1ca:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d1ce:	454e      	cmp	r6, r9
 800d1d0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d1d4:	f84a 3b04 	str.w	r3, [sl], #4
 800d1d8:	d8e7      	bhi.n	800d1aa <__mdiff+0x7e>
 800d1da:	1b73      	subs	r3, r6, r5
 800d1dc:	3b15      	subs	r3, #21
 800d1de:	f023 0303 	bic.w	r3, r3, #3
 800d1e2:	3515      	adds	r5, #21
 800d1e4:	3304      	adds	r3, #4
 800d1e6:	42ae      	cmp	r6, r5
 800d1e8:	bf38      	it	cc
 800d1ea:	2304      	movcc	r3, #4
 800d1ec:	4418      	add	r0, r3
 800d1ee:	4443      	add	r3, r8
 800d1f0:	461e      	mov	r6, r3
 800d1f2:	4605      	mov	r5, r0
 800d1f4:	4575      	cmp	r5, lr
 800d1f6:	d30e      	bcc.n	800d216 <__mdiff+0xea>
 800d1f8:	f10e 0103 	add.w	r1, lr, #3
 800d1fc:	1a09      	subs	r1, r1, r0
 800d1fe:	f021 0103 	bic.w	r1, r1, #3
 800d202:	3803      	subs	r0, #3
 800d204:	4586      	cmp	lr, r0
 800d206:	bf38      	it	cc
 800d208:	2100      	movcc	r1, #0
 800d20a:	4419      	add	r1, r3
 800d20c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d210:	b18b      	cbz	r3, 800d236 <__mdiff+0x10a>
 800d212:	6117      	str	r7, [r2, #16]
 800d214:	e7a4      	b.n	800d160 <__mdiff+0x34>
 800d216:	f855 8b04 	ldr.w	r8, [r5], #4
 800d21a:	fa1f f188 	uxth.w	r1, r8
 800d21e:	4461      	add	r1, ip
 800d220:	140c      	asrs	r4, r1, #16
 800d222:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d226:	b289      	uxth	r1, r1
 800d228:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d22c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800d230:	f846 1b04 	str.w	r1, [r6], #4
 800d234:	e7de      	b.n	800d1f4 <__mdiff+0xc8>
 800d236:	3f01      	subs	r7, #1
 800d238:	e7e8      	b.n	800d20c <__mdiff+0xe0>
 800d23a:	bf00      	nop
 800d23c:	0800e818 	.word	0x0800e818
 800d240:	0800e8a4 	.word	0x0800e8a4

0800d244 <__ulp>:
 800d244:	4b11      	ldr	r3, [pc, #68]	; (800d28c <__ulp+0x48>)
 800d246:	400b      	ands	r3, r1
 800d248:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	dd02      	ble.n	800d256 <__ulp+0x12>
 800d250:	2000      	movs	r0, #0
 800d252:	4619      	mov	r1, r3
 800d254:	4770      	bx	lr
 800d256:	425b      	negs	r3, r3
 800d258:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d25c:	f04f 0000 	mov.w	r0, #0
 800d260:	f04f 0100 	mov.w	r1, #0
 800d264:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d268:	da04      	bge.n	800d274 <__ulp+0x30>
 800d26a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d26e:	fa43 f102 	asr.w	r1, r3, r2
 800d272:	4770      	bx	lr
 800d274:	f1a2 0314 	sub.w	r3, r2, #20
 800d278:	2b1e      	cmp	r3, #30
 800d27a:	bfd6      	itet	le
 800d27c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d280:	2301      	movgt	r3, #1
 800d282:	fa22 f303 	lsrle.w	r3, r2, r3
 800d286:	4618      	mov	r0, r3
 800d288:	4770      	bx	lr
 800d28a:	bf00      	nop
 800d28c:	7ff00000 	.word	0x7ff00000

0800d290 <__b2d>:
 800d290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d294:	6907      	ldr	r7, [r0, #16]
 800d296:	f100 0914 	add.w	r9, r0, #20
 800d29a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800d29e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800d2a2:	f1a7 0804 	sub.w	r8, r7, #4
 800d2a6:	4630      	mov	r0, r6
 800d2a8:	f7ff fd4e 	bl	800cd48 <__hi0bits>
 800d2ac:	f1c0 0320 	rsb	r3, r0, #32
 800d2b0:	280a      	cmp	r0, #10
 800d2b2:	600b      	str	r3, [r1, #0]
 800d2b4:	491f      	ldr	r1, [pc, #124]	; (800d334 <__b2d+0xa4>)
 800d2b6:	dc17      	bgt.n	800d2e8 <__b2d+0x58>
 800d2b8:	45c1      	cmp	r9, r8
 800d2ba:	bf28      	it	cs
 800d2bc:	2200      	movcs	r2, #0
 800d2be:	f1c0 0c0b 	rsb	ip, r0, #11
 800d2c2:	fa26 f30c 	lsr.w	r3, r6, ip
 800d2c6:	bf38      	it	cc
 800d2c8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d2cc:	ea43 0501 	orr.w	r5, r3, r1
 800d2d0:	f100 0315 	add.w	r3, r0, #21
 800d2d4:	fa06 f303 	lsl.w	r3, r6, r3
 800d2d8:	fa22 f20c 	lsr.w	r2, r2, ip
 800d2dc:	ea43 0402 	orr.w	r4, r3, r2
 800d2e0:	4620      	mov	r0, r4
 800d2e2:	4629      	mov	r1, r5
 800d2e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2e8:	45c1      	cmp	r9, r8
 800d2ea:	bf2e      	itee	cs
 800d2ec:	2200      	movcs	r2, #0
 800d2ee:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d2f2:	f1a7 0808 	subcc.w	r8, r7, #8
 800d2f6:	f1b0 030b 	subs.w	r3, r0, #11
 800d2fa:	d016      	beq.n	800d32a <__b2d+0x9a>
 800d2fc:	f1c3 0720 	rsb	r7, r3, #32
 800d300:	fa22 f107 	lsr.w	r1, r2, r7
 800d304:	45c8      	cmp	r8, r9
 800d306:	fa06 f603 	lsl.w	r6, r6, r3
 800d30a:	ea46 0601 	orr.w	r6, r6, r1
 800d30e:	bf94      	ite	ls
 800d310:	2100      	movls	r1, #0
 800d312:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800d316:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800d31a:	fa02 f003 	lsl.w	r0, r2, r3
 800d31e:	40f9      	lsrs	r1, r7
 800d320:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d324:	ea40 0401 	orr.w	r4, r0, r1
 800d328:	e7da      	b.n	800d2e0 <__b2d+0x50>
 800d32a:	4614      	mov	r4, r2
 800d32c:	ea46 0501 	orr.w	r5, r6, r1
 800d330:	e7d6      	b.n	800d2e0 <__b2d+0x50>
 800d332:	bf00      	nop
 800d334:	3ff00000 	.word	0x3ff00000

0800d338 <__d2b>:
 800d338:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d33c:	2101      	movs	r1, #1
 800d33e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800d342:	4690      	mov	r8, r2
 800d344:	461d      	mov	r5, r3
 800d346:	f7ff fc0d 	bl	800cb64 <_Balloc>
 800d34a:	4604      	mov	r4, r0
 800d34c:	b930      	cbnz	r0, 800d35c <__d2b+0x24>
 800d34e:	4602      	mov	r2, r0
 800d350:	f240 310a 	movw	r1, #778	; 0x30a
 800d354:	4b24      	ldr	r3, [pc, #144]	; (800d3e8 <__d2b+0xb0>)
 800d356:	4825      	ldr	r0, [pc, #148]	; (800d3ec <__d2b+0xb4>)
 800d358:	f000 fb40 	bl	800d9dc <__assert_func>
 800d35c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d360:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800d364:	bb2d      	cbnz	r5, 800d3b2 <__d2b+0x7a>
 800d366:	9301      	str	r3, [sp, #4]
 800d368:	f1b8 0300 	subs.w	r3, r8, #0
 800d36c:	d026      	beq.n	800d3bc <__d2b+0x84>
 800d36e:	4668      	mov	r0, sp
 800d370:	9300      	str	r3, [sp, #0]
 800d372:	f7ff fd09 	bl	800cd88 <__lo0bits>
 800d376:	9900      	ldr	r1, [sp, #0]
 800d378:	b1f0      	cbz	r0, 800d3b8 <__d2b+0x80>
 800d37a:	9a01      	ldr	r2, [sp, #4]
 800d37c:	f1c0 0320 	rsb	r3, r0, #32
 800d380:	fa02 f303 	lsl.w	r3, r2, r3
 800d384:	430b      	orrs	r3, r1
 800d386:	40c2      	lsrs	r2, r0
 800d388:	6163      	str	r3, [r4, #20]
 800d38a:	9201      	str	r2, [sp, #4]
 800d38c:	9b01      	ldr	r3, [sp, #4]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	bf14      	ite	ne
 800d392:	2102      	movne	r1, #2
 800d394:	2101      	moveq	r1, #1
 800d396:	61a3      	str	r3, [r4, #24]
 800d398:	6121      	str	r1, [r4, #16]
 800d39a:	b1c5      	cbz	r5, 800d3ce <__d2b+0x96>
 800d39c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d3a0:	4405      	add	r5, r0
 800d3a2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d3a6:	603d      	str	r5, [r7, #0]
 800d3a8:	6030      	str	r0, [r6, #0]
 800d3aa:	4620      	mov	r0, r4
 800d3ac:	b002      	add	sp, #8
 800d3ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d3b6:	e7d6      	b.n	800d366 <__d2b+0x2e>
 800d3b8:	6161      	str	r1, [r4, #20]
 800d3ba:	e7e7      	b.n	800d38c <__d2b+0x54>
 800d3bc:	a801      	add	r0, sp, #4
 800d3be:	f7ff fce3 	bl	800cd88 <__lo0bits>
 800d3c2:	2101      	movs	r1, #1
 800d3c4:	9b01      	ldr	r3, [sp, #4]
 800d3c6:	6121      	str	r1, [r4, #16]
 800d3c8:	6163      	str	r3, [r4, #20]
 800d3ca:	3020      	adds	r0, #32
 800d3cc:	e7e5      	b.n	800d39a <__d2b+0x62>
 800d3ce:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800d3d2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d3d6:	6038      	str	r0, [r7, #0]
 800d3d8:	6918      	ldr	r0, [r3, #16]
 800d3da:	f7ff fcb5 	bl	800cd48 <__hi0bits>
 800d3de:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800d3e2:	6031      	str	r1, [r6, #0]
 800d3e4:	e7e1      	b.n	800d3aa <__d2b+0x72>
 800d3e6:	bf00      	nop
 800d3e8:	0800e818 	.word	0x0800e818
 800d3ec:	0800e8a4 	.word	0x0800e8a4

0800d3f0 <__ratio>:
 800d3f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3f4:	4688      	mov	r8, r1
 800d3f6:	4669      	mov	r1, sp
 800d3f8:	4681      	mov	r9, r0
 800d3fa:	f7ff ff49 	bl	800d290 <__b2d>
 800d3fe:	460f      	mov	r7, r1
 800d400:	4604      	mov	r4, r0
 800d402:	460d      	mov	r5, r1
 800d404:	4640      	mov	r0, r8
 800d406:	a901      	add	r1, sp, #4
 800d408:	f7ff ff42 	bl	800d290 <__b2d>
 800d40c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d410:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d414:	468b      	mov	fp, r1
 800d416:	eba3 0c02 	sub.w	ip, r3, r2
 800d41a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d41e:	1a9b      	subs	r3, r3, r2
 800d420:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d424:	2b00      	cmp	r3, #0
 800d426:	bfd5      	itete	le
 800d428:	460a      	movle	r2, r1
 800d42a:	462a      	movgt	r2, r5
 800d42c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d430:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d434:	bfd8      	it	le
 800d436:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d43a:	465b      	mov	r3, fp
 800d43c:	4602      	mov	r2, r0
 800d43e:	4639      	mov	r1, r7
 800d440:	4620      	mov	r0, r4
 800d442:	f7f3 f973 	bl	800072c <__aeabi_ddiv>
 800d446:	b003      	add	sp, #12
 800d448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d44c <__copybits>:
 800d44c:	3901      	subs	r1, #1
 800d44e:	b570      	push	{r4, r5, r6, lr}
 800d450:	1149      	asrs	r1, r1, #5
 800d452:	6914      	ldr	r4, [r2, #16]
 800d454:	3101      	adds	r1, #1
 800d456:	f102 0314 	add.w	r3, r2, #20
 800d45a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d45e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d462:	1f05      	subs	r5, r0, #4
 800d464:	42a3      	cmp	r3, r4
 800d466:	d30c      	bcc.n	800d482 <__copybits+0x36>
 800d468:	1aa3      	subs	r3, r4, r2
 800d46a:	3b11      	subs	r3, #17
 800d46c:	f023 0303 	bic.w	r3, r3, #3
 800d470:	3211      	adds	r2, #17
 800d472:	42a2      	cmp	r2, r4
 800d474:	bf88      	it	hi
 800d476:	2300      	movhi	r3, #0
 800d478:	4418      	add	r0, r3
 800d47a:	2300      	movs	r3, #0
 800d47c:	4288      	cmp	r0, r1
 800d47e:	d305      	bcc.n	800d48c <__copybits+0x40>
 800d480:	bd70      	pop	{r4, r5, r6, pc}
 800d482:	f853 6b04 	ldr.w	r6, [r3], #4
 800d486:	f845 6f04 	str.w	r6, [r5, #4]!
 800d48a:	e7eb      	b.n	800d464 <__copybits+0x18>
 800d48c:	f840 3b04 	str.w	r3, [r0], #4
 800d490:	e7f4      	b.n	800d47c <__copybits+0x30>

0800d492 <__any_on>:
 800d492:	f100 0214 	add.w	r2, r0, #20
 800d496:	6900      	ldr	r0, [r0, #16]
 800d498:	114b      	asrs	r3, r1, #5
 800d49a:	4298      	cmp	r0, r3
 800d49c:	b510      	push	{r4, lr}
 800d49e:	db11      	blt.n	800d4c4 <__any_on+0x32>
 800d4a0:	dd0a      	ble.n	800d4b8 <__any_on+0x26>
 800d4a2:	f011 011f 	ands.w	r1, r1, #31
 800d4a6:	d007      	beq.n	800d4b8 <__any_on+0x26>
 800d4a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d4ac:	fa24 f001 	lsr.w	r0, r4, r1
 800d4b0:	fa00 f101 	lsl.w	r1, r0, r1
 800d4b4:	428c      	cmp	r4, r1
 800d4b6:	d10b      	bne.n	800d4d0 <__any_on+0x3e>
 800d4b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d4bc:	4293      	cmp	r3, r2
 800d4be:	d803      	bhi.n	800d4c8 <__any_on+0x36>
 800d4c0:	2000      	movs	r0, #0
 800d4c2:	bd10      	pop	{r4, pc}
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	e7f7      	b.n	800d4b8 <__any_on+0x26>
 800d4c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d4cc:	2900      	cmp	r1, #0
 800d4ce:	d0f5      	beq.n	800d4bc <__any_on+0x2a>
 800d4d0:	2001      	movs	r0, #1
 800d4d2:	e7f6      	b.n	800d4c2 <__any_on+0x30>

0800d4d4 <_calloc_r>:
 800d4d4:	b570      	push	{r4, r5, r6, lr}
 800d4d6:	fba1 5402 	umull	r5, r4, r1, r2
 800d4da:	b934      	cbnz	r4, 800d4ea <_calloc_r+0x16>
 800d4dc:	4629      	mov	r1, r5
 800d4de:	f000 f875 	bl	800d5cc <_malloc_r>
 800d4e2:	4606      	mov	r6, r0
 800d4e4:	b928      	cbnz	r0, 800d4f2 <_calloc_r+0x1e>
 800d4e6:	4630      	mov	r0, r6
 800d4e8:	bd70      	pop	{r4, r5, r6, pc}
 800d4ea:	220c      	movs	r2, #12
 800d4ec:	2600      	movs	r6, #0
 800d4ee:	6002      	str	r2, [r0, #0]
 800d4f0:	e7f9      	b.n	800d4e6 <_calloc_r+0x12>
 800d4f2:	462a      	mov	r2, r5
 800d4f4:	4621      	mov	r1, r4
 800d4f6:	f7fc fbf3 	bl	8009ce0 <memset>
 800d4fa:	e7f4      	b.n	800d4e6 <_calloc_r+0x12>

0800d4fc <_free_r>:
 800d4fc:	b538      	push	{r3, r4, r5, lr}
 800d4fe:	4605      	mov	r5, r0
 800d500:	2900      	cmp	r1, #0
 800d502:	d040      	beq.n	800d586 <_free_r+0x8a>
 800d504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d508:	1f0c      	subs	r4, r1, #4
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	bfb8      	it	lt
 800d50e:	18e4      	addlt	r4, r4, r3
 800d510:	f000 faae 	bl	800da70 <__malloc_lock>
 800d514:	4a1c      	ldr	r2, [pc, #112]	; (800d588 <_free_r+0x8c>)
 800d516:	6813      	ldr	r3, [r2, #0]
 800d518:	b933      	cbnz	r3, 800d528 <_free_r+0x2c>
 800d51a:	6063      	str	r3, [r4, #4]
 800d51c:	6014      	str	r4, [r2, #0]
 800d51e:	4628      	mov	r0, r5
 800d520:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d524:	f000 baaa 	b.w	800da7c <__malloc_unlock>
 800d528:	42a3      	cmp	r3, r4
 800d52a:	d908      	bls.n	800d53e <_free_r+0x42>
 800d52c:	6820      	ldr	r0, [r4, #0]
 800d52e:	1821      	adds	r1, r4, r0
 800d530:	428b      	cmp	r3, r1
 800d532:	bf01      	itttt	eq
 800d534:	6819      	ldreq	r1, [r3, #0]
 800d536:	685b      	ldreq	r3, [r3, #4]
 800d538:	1809      	addeq	r1, r1, r0
 800d53a:	6021      	streq	r1, [r4, #0]
 800d53c:	e7ed      	b.n	800d51a <_free_r+0x1e>
 800d53e:	461a      	mov	r2, r3
 800d540:	685b      	ldr	r3, [r3, #4]
 800d542:	b10b      	cbz	r3, 800d548 <_free_r+0x4c>
 800d544:	42a3      	cmp	r3, r4
 800d546:	d9fa      	bls.n	800d53e <_free_r+0x42>
 800d548:	6811      	ldr	r1, [r2, #0]
 800d54a:	1850      	adds	r0, r2, r1
 800d54c:	42a0      	cmp	r0, r4
 800d54e:	d10b      	bne.n	800d568 <_free_r+0x6c>
 800d550:	6820      	ldr	r0, [r4, #0]
 800d552:	4401      	add	r1, r0
 800d554:	1850      	adds	r0, r2, r1
 800d556:	4283      	cmp	r3, r0
 800d558:	6011      	str	r1, [r2, #0]
 800d55a:	d1e0      	bne.n	800d51e <_free_r+0x22>
 800d55c:	6818      	ldr	r0, [r3, #0]
 800d55e:	685b      	ldr	r3, [r3, #4]
 800d560:	4401      	add	r1, r0
 800d562:	6011      	str	r1, [r2, #0]
 800d564:	6053      	str	r3, [r2, #4]
 800d566:	e7da      	b.n	800d51e <_free_r+0x22>
 800d568:	d902      	bls.n	800d570 <_free_r+0x74>
 800d56a:	230c      	movs	r3, #12
 800d56c:	602b      	str	r3, [r5, #0]
 800d56e:	e7d6      	b.n	800d51e <_free_r+0x22>
 800d570:	6820      	ldr	r0, [r4, #0]
 800d572:	1821      	adds	r1, r4, r0
 800d574:	428b      	cmp	r3, r1
 800d576:	bf01      	itttt	eq
 800d578:	6819      	ldreq	r1, [r3, #0]
 800d57a:	685b      	ldreq	r3, [r3, #4]
 800d57c:	1809      	addeq	r1, r1, r0
 800d57e:	6021      	streq	r1, [r4, #0]
 800d580:	6063      	str	r3, [r4, #4]
 800d582:	6054      	str	r4, [r2, #4]
 800d584:	e7cb      	b.n	800d51e <_free_r+0x22>
 800d586:	bd38      	pop	{r3, r4, r5, pc}
 800d588:	200015c8 	.word	0x200015c8

0800d58c <sbrk_aligned>:
 800d58c:	b570      	push	{r4, r5, r6, lr}
 800d58e:	4e0e      	ldr	r6, [pc, #56]	; (800d5c8 <sbrk_aligned+0x3c>)
 800d590:	460c      	mov	r4, r1
 800d592:	6831      	ldr	r1, [r6, #0]
 800d594:	4605      	mov	r5, r0
 800d596:	b911      	cbnz	r1, 800d59e <sbrk_aligned+0x12>
 800d598:	f000 f9ee 	bl	800d978 <_sbrk_r>
 800d59c:	6030      	str	r0, [r6, #0]
 800d59e:	4621      	mov	r1, r4
 800d5a0:	4628      	mov	r0, r5
 800d5a2:	f000 f9e9 	bl	800d978 <_sbrk_r>
 800d5a6:	1c43      	adds	r3, r0, #1
 800d5a8:	d00a      	beq.n	800d5c0 <sbrk_aligned+0x34>
 800d5aa:	1cc4      	adds	r4, r0, #3
 800d5ac:	f024 0403 	bic.w	r4, r4, #3
 800d5b0:	42a0      	cmp	r0, r4
 800d5b2:	d007      	beq.n	800d5c4 <sbrk_aligned+0x38>
 800d5b4:	1a21      	subs	r1, r4, r0
 800d5b6:	4628      	mov	r0, r5
 800d5b8:	f000 f9de 	bl	800d978 <_sbrk_r>
 800d5bc:	3001      	adds	r0, #1
 800d5be:	d101      	bne.n	800d5c4 <sbrk_aligned+0x38>
 800d5c0:	f04f 34ff 	mov.w	r4, #4294967295
 800d5c4:	4620      	mov	r0, r4
 800d5c6:	bd70      	pop	{r4, r5, r6, pc}
 800d5c8:	200015cc 	.word	0x200015cc

0800d5cc <_malloc_r>:
 800d5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5d0:	1ccd      	adds	r5, r1, #3
 800d5d2:	f025 0503 	bic.w	r5, r5, #3
 800d5d6:	3508      	adds	r5, #8
 800d5d8:	2d0c      	cmp	r5, #12
 800d5da:	bf38      	it	cc
 800d5dc:	250c      	movcc	r5, #12
 800d5de:	2d00      	cmp	r5, #0
 800d5e0:	4607      	mov	r7, r0
 800d5e2:	db01      	blt.n	800d5e8 <_malloc_r+0x1c>
 800d5e4:	42a9      	cmp	r1, r5
 800d5e6:	d905      	bls.n	800d5f4 <_malloc_r+0x28>
 800d5e8:	230c      	movs	r3, #12
 800d5ea:	2600      	movs	r6, #0
 800d5ec:	603b      	str	r3, [r7, #0]
 800d5ee:	4630      	mov	r0, r6
 800d5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5f4:	4e2e      	ldr	r6, [pc, #184]	; (800d6b0 <_malloc_r+0xe4>)
 800d5f6:	f000 fa3b 	bl	800da70 <__malloc_lock>
 800d5fa:	6833      	ldr	r3, [r6, #0]
 800d5fc:	461c      	mov	r4, r3
 800d5fe:	bb34      	cbnz	r4, 800d64e <_malloc_r+0x82>
 800d600:	4629      	mov	r1, r5
 800d602:	4638      	mov	r0, r7
 800d604:	f7ff ffc2 	bl	800d58c <sbrk_aligned>
 800d608:	1c43      	adds	r3, r0, #1
 800d60a:	4604      	mov	r4, r0
 800d60c:	d14d      	bne.n	800d6aa <_malloc_r+0xde>
 800d60e:	6834      	ldr	r4, [r6, #0]
 800d610:	4626      	mov	r6, r4
 800d612:	2e00      	cmp	r6, #0
 800d614:	d140      	bne.n	800d698 <_malloc_r+0xcc>
 800d616:	6823      	ldr	r3, [r4, #0]
 800d618:	4631      	mov	r1, r6
 800d61a:	4638      	mov	r0, r7
 800d61c:	eb04 0803 	add.w	r8, r4, r3
 800d620:	f000 f9aa 	bl	800d978 <_sbrk_r>
 800d624:	4580      	cmp	r8, r0
 800d626:	d13a      	bne.n	800d69e <_malloc_r+0xd2>
 800d628:	6821      	ldr	r1, [r4, #0]
 800d62a:	3503      	adds	r5, #3
 800d62c:	1a6d      	subs	r5, r5, r1
 800d62e:	f025 0503 	bic.w	r5, r5, #3
 800d632:	3508      	adds	r5, #8
 800d634:	2d0c      	cmp	r5, #12
 800d636:	bf38      	it	cc
 800d638:	250c      	movcc	r5, #12
 800d63a:	4638      	mov	r0, r7
 800d63c:	4629      	mov	r1, r5
 800d63e:	f7ff ffa5 	bl	800d58c <sbrk_aligned>
 800d642:	3001      	adds	r0, #1
 800d644:	d02b      	beq.n	800d69e <_malloc_r+0xd2>
 800d646:	6823      	ldr	r3, [r4, #0]
 800d648:	442b      	add	r3, r5
 800d64a:	6023      	str	r3, [r4, #0]
 800d64c:	e00e      	b.n	800d66c <_malloc_r+0xa0>
 800d64e:	6822      	ldr	r2, [r4, #0]
 800d650:	1b52      	subs	r2, r2, r5
 800d652:	d41e      	bmi.n	800d692 <_malloc_r+0xc6>
 800d654:	2a0b      	cmp	r2, #11
 800d656:	d916      	bls.n	800d686 <_malloc_r+0xba>
 800d658:	1961      	adds	r1, r4, r5
 800d65a:	42a3      	cmp	r3, r4
 800d65c:	6025      	str	r5, [r4, #0]
 800d65e:	bf18      	it	ne
 800d660:	6059      	strne	r1, [r3, #4]
 800d662:	6863      	ldr	r3, [r4, #4]
 800d664:	bf08      	it	eq
 800d666:	6031      	streq	r1, [r6, #0]
 800d668:	5162      	str	r2, [r4, r5]
 800d66a:	604b      	str	r3, [r1, #4]
 800d66c:	4638      	mov	r0, r7
 800d66e:	f104 060b 	add.w	r6, r4, #11
 800d672:	f000 fa03 	bl	800da7c <__malloc_unlock>
 800d676:	f026 0607 	bic.w	r6, r6, #7
 800d67a:	1d23      	adds	r3, r4, #4
 800d67c:	1af2      	subs	r2, r6, r3
 800d67e:	d0b6      	beq.n	800d5ee <_malloc_r+0x22>
 800d680:	1b9b      	subs	r3, r3, r6
 800d682:	50a3      	str	r3, [r4, r2]
 800d684:	e7b3      	b.n	800d5ee <_malloc_r+0x22>
 800d686:	6862      	ldr	r2, [r4, #4]
 800d688:	42a3      	cmp	r3, r4
 800d68a:	bf0c      	ite	eq
 800d68c:	6032      	streq	r2, [r6, #0]
 800d68e:	605a      	strne	r2, [r3, #4]
 800d690:	e7ec      	b.n	800d66c <_malloc_r+0xa0>
 800d692:	4623      	mov	r3, r4
 800d694:	6864      	ldr	r4, [r4, #4]
 800d696:	e7b2      	b.n	800d5fe <_malloc_r+0x32>
 800d698:	4634      	mov	r4, r6
 800d69a:	6876      	ldr	r6, [r6, #4]
 800d69c:	e7b9      	b.n	800d612 <_malloc_r+0x46>
 800d69e:	230c      	movs	r3, #12
 800d6a0:	4638      	mov	r0, r7
 800d6a2:	603b      	str	r3, [r7, #0]
 800d6a4:	f000 f9ea 	bl	800da7c <__malloc_unlock>
 800d6a8:	e7a1      	b.n	800d5ee <_malloc_r+0x22>
 800d6aa:	6025      	str	r5, [r4, #0]
 800d6ac:	e7de      	b.n	800d66c <_malloc_r+0xa0>
 800d6ae:	bf00      	nop
 800d6b0:	200015c8 	.word	0x200015c8

0800d6b4 <__ssputs_r>:
 800d6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6b8:	688e      	ldr	r6, [r1, #8]
 800d6ba:	4682      	mov	sl, r0
 800d6bc:	429e      	cmp	r6, r3
 800d6be:	460c      	mov	r4, r1
 800d6c0:	4690      	mov	r8, r2
 800d6c2:	461f      	mov	r7, r3
 800d6c4:	d838      	bhi.n	800d738 <__ssputs_r+0x84>
 800d6c6:	898a      	ldrh	r2, [r1, #12]
 800d6c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d6cc:	d032      	beq.n	800d734 <__ssputs_r+0x80>
 800d6ce:	6825      	ldr	r5, [r4, #0]
 800d6d0:	6909      	ldr	r1, [r1, #16]
 800d6d2:	3301      	adds	r3, #1
 800d6d4:	eba5 0901 	sub.w	r9, r5, r1
 800d6d8:	6965      	ldr	r5, [r4, #20]
 800d6da:	444b      	add	r3, r9
 800d6dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d6e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d6e4:	106d      	asrs	r5, r5, #1
 800d6e6:	429d      	cmp	r5, r3
 800d6e8:	bf38      	it	cc
 800d6ea:	461d      	movcc	r5, r3
 800d6ec:	0553      	lsls	r3, r2, #21
 800d6ee:	d531      	bpl.n	800d754 <__ssputs_r+0xa0>
 800d6f0:	4629      	mov	r1, r5
 800d6f2:	f7ff ff6b 	bl	800d5cc <_malloc_r>
 800d6f6:	4606      	mov	r6, r0
 800d6f8:	b950      	cbnz	r0, 800d710 <__ssputs_r+0x5c>
 800d6fa:	230c      	movs	r3, #12
 800d6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d700:	f8ca 3000 	str.w	r3, [sl]
 800d704:	89a3      	ldrh	r3, [r4, #12]
 800d706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d70a:	81a3      	strh	r3, [r4, #12]
 800d70c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d710:	464a      	mov	r2, r9
 800d712:	6921      	ldr	r1, [r4, #16]
 800d714:	f7ff fa18 	bl	800cb48 <memcpy>
 800d718:	89a3      	ldrh	r3, [r4, #12]
 800d71a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d71e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d722:	81a3      	strh	r3, [r4, #12]
 800d724:	6126      	str	r6, [r4, #16]
 800d726:	444e      	add	r6, r9
 800d728:	6026      	str	r6, [r4, #0]
 800d72a:	463e      	mov	r6, r7
 800d72c:	6165      	str	r5, [r4, #20]
 800d72e:	eba5 0509 	sub.w	r5, r5, r9
 800d732:	60a5      	str	r5, [r4, #8]
 800d734:	42be      	cmp	r6, r7
 800d736:	d900      	bls.n	800d73a <__ssputs_r+0x86>
 800d738:	463e      	mov	r6, r7
 800d73a:	4632      	mov	r2, r6
 800d73c:	4641      	mov	r1, r8
 800d73e:	6820      	ldr	r0, [r4, #0]
 800d740:	f000 f97c 	bl	800da3c <memmove>
 800d744:	68a3      	ldr	r3, [r4, #8]
 800d746:	2000      	movs	r0, #0
 800d748:	1b9b      	subs	r3, r3, r6
 800d74a:	60a3      	str	r3, [r4, #8]
 800d74c:	6823      	ldr	r3, [r4, #0]
 800d74e:	4433      	add	r3, r6
 800d750:	6023      	str	r3, [r4, #0]
 800d752:	e7db      	b.n	800d70c <__ssputs_r+0x58>
 800d754:	462a      	mov	r2, r5
 800d756:	f000 f997 	bl	800da88 <_realloc_r>
 800d75a:	4606      	mov	r6, r0
 800d75c:	2800      	cmp	r0, #0
 800d75e:	d1e1      	bne.n	800d724 <__ssputs_r+0x70>
 800d760:	4650      	mov	r0, sl
 800d762:	6921      	ldr	r1, [r4, #16]
 800d764:	f7ff feca 	bl	800d4fc <_free_r>
 800d768:	e7c7      	b.n	800d6fa <__ssputs_r+0x46>
	...

0800d76c <_svfiprintf_r>:
 800d76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d770:	4698      	mov	r8, r3
 800d772:	898b      	ldrh	r3, [r1, #12]
 800d774:	4607      	mov	r7, r0
 800d776:	061b      	lsls	r3, r3, #24
 800d778:	460d      	mov	r5, r1
 800d77a:	4614      	mov	r4, r2
 800d77c:	b09d      	sub	sp, #116	; 0x74
 800d77e:	d50e      	bpl.n	800d79e <_svfiprintf_r+0x32>
 800d780:	690b      	ldr	r3, [r1, #16]
 800d782:	b963      	cbnz	r3, 800d79e <_svfiprintf_r+0x32>
 800d784:	2140      	movs	r1, #64	; 0x40
 800d786:	f7ff ff21 	bl	800d5cc <_malloc_r>
 800d78a:	6028      	str	r0, [r5, #0]
 800d78c:	6128      	str	r0, [r5, #16]
 800d78e:	b920      	cbnz	r0, 800d79a <_svfiprintf_r+0x2e>
 800d790:	230c      	movs	r3, #12
 800d792:	603b      	str	r3, [r7, #0]
 800d794:	f04f 30ff 	mov.w	r0, #4294967295
 800d798:	e0d1      	b.n	800d93e <_svfiprintf_r+0x1d2>
 800d79a:	2340      	movs	r3, #64	; 0x40
 800d79c:	616b      	str	r3, [r5, #20]
 800d79e:	2300      	movs	r3, #0
 800d7a0:	9309      	str	r3, [sp, #36]	; 0x24
 800d7a2:	2320      	movs	r3, #32
 800d7a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d7a8:	2330      	movs	r3, #48	; 0x30
 800d7aa:	f04f 0901 	mov.w	r9, #1
 800d7ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d958 <_svfiprintf_r+0x1ec>
 800d7b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d7ba:	4623      	mov	r3, r4
 800d7bc:	469a      	mov	sl, r3
 800d7be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7c2:	b10a      	cbz	r2, 800d7c8 <_svfiprintf_r+0x5c>
 800d7c4:	2a25      	cmp	r2, #37	; 0x25
 800d7c6:	d1f9      	bne.n	800d7bc <_svfiprintf_r+0x50>
 800d7c8:	ebba 0b04 	subs.w	fp, sl, r4
 800d7cc:	d00b      	beq.n	800d7e6 <_svfiprintf_r+0x7a>
 800d7ce:	465b      	mov	r3, fp
 800d7d0:	4622      	mov	r2, r4
 800d7d2:	4629      	mov	r1, r5
 800d7d4:	4638      	mov	r0, r7
 800d7d6:	f7ff ff6d 	bl	800d6b4 <__ssputs_r>
 800d7da:	3001      	adds	r0, #1
 800d7dc:	f000 80aa 	beq.w	800d934 <_svfiprintf_r+0x1c8>
 800d7e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7e2:	445a      	add	r2, fp
 800d7e4:	9209      	str	r2, [sp, #36]	; 0x24
 800d7e6:	f89a 3000 	ldrb.w	r3, [sl]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	f000 80a2 	beq.w	800d934 <_svfiprintf_r+0x1c8>
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	f04f 32ff 	mov.w	r2, #4294967295
 800d7f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7fa:	f10a 0a01 	add.w	sl, sl, #1
 800d7fe:	9304      	str	r3, [sp, #16]
 800d800:	9307      	str	r3, [sp, #28]
 800d802:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d806:	931a      	str	r3, [sp, #104]	; 0x68
 800d808:	4654      	mov	r4, sl
 800d80a:	2205      	movs	r2, #5
 800d80c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d810:	4851      	ldr	r0, [pc, #324]	; (800d958 <_svfiprintf_r+0x1ec>)
 800d812:	f7ff f98b 	bl	800cb2c <memchr>
 800d816:	9a04      	ldr	r2, [sp, #16]
 800d818:	b9d8      	cbnz	r0, 800d852 <_svfiprintf_r+0xe6>
 800d81a:	06d0      	lsls	r0, r2, #27
 800d81c:	bf44      	itt	mi
 800d81e:	2320      	movmi	r3, #32
 800d820:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d824:	0711      	lsls	r1, r2, #28
 800d826:	bf44      	itt	mi
 800d828:	232b      	movmi	r3, #43	; 0x2b
 800d82a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d82e:	f89a 3000 	ldrb.w	r3, [sl]
 800d832:	2b2a      	cmp	r3, #42	; 0x2a
 800d834:	d015      	beq.n	800d862 <_svfiprintf_r+0xf6>
 800d836:	4654      	mov	r4, sl
 800d838:	2000      	movs	r0, #0
 800d83a:	f04f 0c0a 	mov.w	ip, #10
 800d83e:	9a07      	ldr	r2, [sp, #28]
 800d840:	4621      	mov	r1, r4
 800d842:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d846:	3b30      	subs	r3, #48	; 0x30
 800d848:	2b09      	cmp	r3, #9
 800d84a:	d94e      	bls.n	800d8ea <_svfiprintf_r+0x17e>
 800d84c:	b1b0      	cbz	r0, 800d87c <_svfiprintf_r+0x110>
 800d84e:	9207      	str	r2, [sp, #28]
 800d850:	e014      	b.n	800d87c <_svfiprintf_r+0x110>
 800d852:	eba0 0308 	sub.w	r3, r0, r8
 800d856:	fa09 f303 	lsl.w	r3, r9, r3
 800d85a:	4313      	orrs	r3, r2
 800d85c:	46a2      	mov	sl, r4
 800d85e:	9304      	str	r3, [sp, #16]
 800d860:	e7d2      	b.n	800d808 <_svfiprintf_r+0x9c>
 800d862:	9b03      	ldr	r3, [sp, #12]
 800d864:	1d19      	adds	r1, r3, #4
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	9103      	str	r1, [sp, #12]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	bfbb      	ittet	lt
 800d86e:	425b      	neglt	r3, r3
 800d870:	f042 0202 	orrlt.w	r2, r2, #2
 800d874:	9307      	strge	r3, [sp, #28]
 800d876:	9307      	strlt	r3, [sp, #28]
 800d878:	bfb8      	it	lt
 800d87a:	9204      	strlt	r2, [sp, #16]
 800d87c:	7823      	ldrb	r3, [r4, #0]
 800d87e:	2b2e      	cmp	r3, #46	; 0x2e
 800d880:	d10c      	bne.n	800d89c <_svfiprintf_r+0x130>
 800d882:	7863      	ldrb	r3, [r4, #1]
 800d884:	2b2a      	cmp	r3, #42	; 0x2a
 800d886:	d135      	bne.n	800d8f4 <_svfiprintf_r+0x188>
 800d888:	9b03      	ldr	r3, [sp, #12]
 800d88a:	3402      	adds	r4, #2
 800d88c:	1d1a      	adds	r2, r3, #4
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	9203      	str	r2, [sp, #12]
 800d892:	2b00      	cmp	r3, #0
 800d894:	bfb8      	it	lt
 800d896:	f04f 33ff 	movlt.w	r3, #4294967295
 800d89a:	9305      	str	r3, [sp, #20]
 800d89c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d95c <_svfiprintf_r+0x1f0>
 800d8a0:	2203      	movs	r2, #3
 800d8a2:	4650      	mov	r0, sl
 800d8a4:	7821      	ldrb	r1, [r4, #0]
 800d8a6:	f7ff f941 	bl	800cb2c <memchr>
 800d8aa:	b140      	cbz	r0, 800d8be <_svfiprintf_r+0x152>
 800d8ac:	2340      	movs	r3, #64	; 0x40
 800d8ae:	eba0 000a 	sub.w	r0, r0, sl
 800d8b2:	fa03 f000 	lsl.w	r0, r3, r0
 800d8b6:	9b04      	ldr	r3, [sp, #16]
 800d8b8:	3401      	adds	r4, #1
 800d8ba:	4303      	orrs	r3, r0
 800d8bc:	9304      	str	r3, [sp, #16]
 800d8be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8c2:	2206      	movs	r2, #6
 800d8c4:	4826      	ldr	r0, [pc, #152]	; (800d960 <_svfiprintf_r+0x1f4>)
 800d8c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d8ca:	f7ff f92f 	bl	800cb2c <memchr>
 800d8ce:	2800      	cmp	r0, #0
 800d8d0:	d038      	beq.n	800d944 <_svfiprintf_r+0x1d8>
 800d8d2:	4b24      	ldr	r3, [pc, #144]	; (800d964 <_svfiprintf_r+0x1f8>)
 800d8d4:	bb1b      	cbnz	r3, 800d91e <_svfiprintf_r+0x1b2>
 800d8d6:	9b03      	ldr	r3, [sp, #12]
 800d8d8:	3307      	adds	r3, #7
 800d8da:	f023 0307 	bic.w	r3, r3, #7
 800d8de:	3308      	adds	r3, #8
 800d8e0:	9303      	str	r3, [sp, #12]
 800d8e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8e4:	4433      	add	r3, r6
 800d8e6:	9309      	str	r3, [sp, #36]	; 0x24
 800d8e8:	e767      	b.n	800d7ba <_svfiprintf_r+0x4e>
 800d8ea:	460c      	mov	r4, r1
 800d8ec:	2001      	movs	r0, #1
 800d8ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8f2:	e7a5      	b.n	800d840 <_svfiprintf_r+0xd4>
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	f04f 0c0a 	mov.w	ip, #10
 800d8fa:	4619      	mov	r1, r3
 800d8fc:	3401      	adds	r4, #1
 800d8fe:	9305      	str	r3, [sp, #20]
 800d900:	4620      	mov	r0, r4
 800d902:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d906:	3a30      	subs	r2, #48	; 0x30
 800d908:	2a09      	cmp	r2, #9
 800d90a:	d903      	bls.n	800d914 <_svfiprintf_r+0x1a8>
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d0c5      	beq.n	800d89c <_svfiprintf_r+0x130>
 800d910:	9105      	str	r1, [sp, #20]
 800d912:	e7c3      	b.n	800d89c <_svfiprintf_r+0x130>
 800d914:	4604      	mov	r4, r0
 800d916:	2301      	movs	r3, #1
 800d918:	fb0c 2101 	mla	r1, ip, r1, r2
 800d91c:	e7f0      	b.n	800d900 <_svfiprintf_r+0x194>
 800d91e:	ab03      	add	r3, sp, #12
 800d920:	9300      	str	r3, [sp, #0]
 800d922:	462a      	mov	r2, r5
 800d924:	4638      	mov	r0, r7
 800d926:	4b10      	ldr	r3, [pc, #64]	; (800d968 <_svfiprintf_r+0x1fc>)
 800d928:	a904      	add	r1, sp, #16
 800d92a:	f7fc fa7f 	bl	8009e2c <_printf_float>
 800d92e:	1c42      	adds	r2, r0, #1
 800d930:	4606      	mov	r6, r0
 800d932:	d1d6      	bne.n	800d8e2 <_svfiprintf_r+0x176>
 800d934:	89ab      	ldrh	r3, [r5, #12]
 800d936:	065b      	lsls	r3, r3, #25
 800d938:	f53f af2c 	bmi.w	800d794 <_svfiprintf_r+0x28>
 800d93c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d93e:	b01d      	add	sp, #116	; 0x74
 800d940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d944:	ab03      	add	r3, sp, #12
 800d946:	9300      	str	r3, [sp, #0]
 800d948:	462a      	mov	r2, r5
 800d94a:	4638      	mov	r0, r7
 800d94c:	4b06      	ldr	r3, [pc, #24]	; (800d968 <_svfiprintf_r+0x1fc>)
 800d94e:	a904      	add	r1, sp, #16
 800d950:	f7fc fd08 	bl	800a364 <_printf_i>
 800d954:	e7eb      	b.n	800d92e <_svfiprintf_r+0x1c2>
 800d956:	bf00      	nop
 800d958:	0800e9fc 	.word	0x0800e9fc
 800d95c:	0800ea02 	.word	0x0800ea02
 800d960:	0800ea06 	.word	0x0800ea06
 800d964:	08009e2d 	.word	0x08009e2d
 800d968:	0800d6b5 	.word	0x0800d6b5

0800d96c <nan>:
 800d96c:	2000      	movs	r0, #0
 800d96e:	4901      	ldr	r1, [pc, #4]	; (800d974 <nan+0x8>)
 800d970:	4770      	bx	lr
 800d972:	bf00      	nop
 800d974:	7ff80000 	.word	0x7ff80000

0800d978 <_sbrk_r>:
 800d978:	b538      	push	{r3, r4, r5, lr}
 800d97a:	2300      	movs	r3, #0
 800d97c:	4d05      	ldr	r5, [pc, #20]	; (800d994 <_sbrk_r+0x1c>)
 800d97e:	4604      	mov	r4, r0
 800d980:	4608      	mov	r0, r1
 800d982:	602b      	str	r3, [r5, #0]
 800d984:	f7f3 ffe6 	bl	8001954 <_sbrk>
 800d988:	1c43      	adds	r3, r0, #1
 800d98a:	d102      	bne.n	800d992 <_sbrk_r+0x1a>
 800d98c:	682b      	ldr	r3, [r5, #0]
 800d98e:	b103      	cbz	r3, 800d992 <_sbrk_r+0x1a>
 800d990:	6023      	str	r3, [r4, #0]
 800d992:	bd38      	pop	{r3, r4, r5, pc}
 800d994:	200015d0 	.word	0x200015d0

0800d998 <strncmp>:
 800d998:	4603      	mov	r3, r0
 800d99a:	b510      	push	{r4, lr}
 800d99c:	b172      	cbz	r2, 800d9bc <strncmp+0x24>
 800d99e:	3901      	subs	r1, #1
 800d9a0:	1884      	adds	r4, r0, r2
 800d9a2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d9a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d9aa:	4290      	cmp	r0, r2
 800d9ac:	d101      	bne.n	800d9b2 <strncmp+0x1a>
 800d9ae:	42a3      	cmp	r3, r4
 800d9b0:	d101      	bne.n	800d9b6 <strncmp+0x1e>
 800d9b2:	1a80      	subs	r0, r0, r2
 800d9b4:	bd10      	pop	{r4, pc}
 800d9b6:	2800      	cmp	r0, #0
 800d9b8:	d1f3      	bne.n	800d9a2 <strncmp+0xa>
 800d9ba:	e7fa      	b.n	800d9b2 <strncmp+0x1a>
 800d9bc:	4610      	mov	r0, r2
 800d9be:	e7f9      	b.n	800d9b4 <strncmp+0x1c>

0800d9c0 <__ascii_wctomb>:
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	4608      	mov	r0, r1
 800d9c4:	b141      	cbz	r1, 800d9d8 <__ascii_wctomb+0x18>
 800d9c6:	2aff      	cmp	r2, #255	; 0xff
 800d9c8:	d904      	bls.n	800d9d4 <__ascii_wctomb+0x14>
 800d9ca:	228a      	movs	r2, #138	; 0x8a
 800d9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d9d0:	601a      	str	r2, [r3, #0]
 800d9d2:	4770      	bx	lr
 800d9d4:	2001      	movs	r0, #1
 800d9d6:	700a      	strb	r2, [r1, #0]
 800d9d8:	4770      	bx	lr
	...

0800d9dc <__assert_func>:
 800d9dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d9de:	4614      	mov	r4, r2
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	4b09      	ldr	r3, [pc, #36]	; (800da08 <__assert_func+0x2c>)
 800d9e4:	4605      	mov	r5, r0
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	68d8      	ldr	r0, [r3, #12]
 800d9ea:	b14c      	cbz	r4, 800da00 <__assert_func+0x24>
 800d9ec:	4b07      	ldr	r3, [pc, #28]	; (800da0c <__assert_func+0x30>)
 800d9ee:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d9f2:	9100      	str	r1, [sp, #0]
 800d9f4:	462b      	mov	r3, r5
 800d9f6:	4906      	ldr	r1, [pc, #24]	; (800da10 <__assert_func+0x34>)
 800d9f8:	f000 f80e 	bl	800da18 <fiprintf>
 800d9fc:	f000 fa8a 	bl	800df14 <abort>
 800da00:	4b04      	ldr	r3, [pc, #16]	; (800da14 <__assert_func+0x38>)
 800da02:	461c      	mov	r4, r3
 800da04:	e7f3      	b.n	800d9ee <__assert_func+0x12>
 800da06:	bf00      	nop
 800da08:	2000017c 	.word	0x2000017c
 800da0c:	0800ea0d 	.word	0x0800ea0d
 800da10:	0800ea1a 	.word	0x0800ea1a
 800da14:	0800ea48 	.word	0x0800ea48

0800da18 <fiprintf>:
 800da18:	b40e      	push	{r1, r2, r3}
 800da1a:	b503      	push	{r0, r1, lr}
 800da1c:	4601      	mov	r1, r0
 800da1e:	ab03      	add	r3, sp, #12
 800da20:	4805      	ldr	r0, [pc, #20]	; (800da38 <fiprintf+0x20>)
 800da22:	f853 2b04 	ldr.w	r2, [r3], #4
 800da26:	6800      	ldr	r0, [r0, #0]
 800da28:	9301      	str	r3, [sp, #4]
 800da2a:	f000 f883 	bl	800db34 <_vfiprintf_r>
 800da2e:	b002      	add	sp, #8
 800da30:	f85d eb04 	ldr.w	lr, [sp], #4
 800da34:	b003      	add	sp, #12
 800da36:	4770      	bx	lr
 800da38:	2000017c 	.word	0x2000017c

0800da3c <memmove>:
 800da3c:	4288      	cmp	r0, r1
 800da3e:	b510      	push	{r4, lr}
 800da40:	eb01 0402 	add.w	r4, r1, r2
 800da44:	d902      	bls.n	800da4c <memmove+0x10>
 800da46:	4284      	cmp	r4, r0
 800da48:	4623      	mov	r3, r4
 800da4a:	d807      	bhi.n	800da5c <memmove+0x20>
 800da4c:	1e43      	subs	r3, r0, #1
 800da4e:	42a1      	cmp	r1, r4
 800da50:	d008      	beq.n	800da64 <memmove+0x28>
 800da52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da56:	f803 2f01 	strb.w	r2, [r3, #1]!
 800da5a:	e7f8      	b.n	800da4e <memmove+0x12>
 800da5c:	4601      	mov	r1, r0
 800da5e:	4402      	add	r2, r0
 800da60:	428a      	cmp	r2, r1
 800da62:	d100      	bne.n	800da66 <memmove+0x2a>
 800da64:	bd10      	pop	{r4, pc}
 800da66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800da6e:	e7f7      	b.n	800da60 <memmove+0x24>

0800da70 <__malloc_lock>:
 800da70:	4801      	ldr	r0, [pc, #4]	; (800da78 <__malloc_lock+0x8>)
 800da72:	f000 bc0b 	b.w	800e28c <__retarget_lock_acquire_recursive>
 800da76:	bf00      	nop
 800da78:	200015d4 	.word	0x200015d4

0800da7c <__malloc_unlock>:
 800da7c:	4801      	ldr	r0, [pc, #4]	; (800da84 <__malloc_unlock+0x8>)
 800da7e:	f000 bc06 	b.w	800e28e <__retarget_lock_release_recursive>
 800da82:	bf00      	nop
 800da84:	200015d4 	.word	0x200015d4

0800da88 <_realloc_r>:
 800da88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da8c:	4680      	mov	r8, r0
 800da8e:	4614      	mov	r4, r2
 800da90:	460e      	mov	r6, r1
 800da92:	b921      	cbnz	r1, 800da9e <_realloc_r+0x16>
 800da94:	4611      	mov	r1, r2
 800da96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da9a:	f7ff bd97 	b.w	800d5cc <_malloc_r>
 800da9e:	b92a      	cbnz	r2, 800daac <_realloc_r+0x24>
 800daa0:	f7ff fd2c 	bl	800d4fc <_free_r>
 800daa4:	4625      	mov	r5, r4
 800daa6:	4628      	mov	r0, r5
 800daa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daac:	f000 fc56 	bl	800e35c <_malloc_usable_size_r>
 800dab0:	4284      	cmp	r4, r0
 800dab2:	4607      	mov	r7, r0
 800dab4:	d802      	bhi.n	800dabc <_realloc_r+0x34>
 800dab6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800daba:	d812      	bhi.n	800dae2 <_realloc_r+0x5a>
 800dabc:	4621      	mov	r1, r4
 800dabe:	4640      	mov	r0, r8
 800dac0:	f7ff fd84 	bl	800d5cc <_malloc_r>
 800dac4:	4605      	mov	r5, r0
 800dac6:	2800      	cmp	r0, #0
 800dac8:	d0ed      	beq.n	800daa6 <_realloc_r+0x1e>
 800daca:	42bc      	cmp	r4, r7
 800dacc:	4622      	mov	r2, r4
 800dace:	4631      	mov	r1, r6
 800dad0:	bf28      	it	cs
 800dad2:	463a      	movcs	r2, r7
 800dad4:	f7ff f838 	bl	800cb48 <memcpy>
 800dad8:	4631      	mov	r1, r6
 800dada:	4640      	mov	r0, r8
 800dadc:	f7ff fd0e 	bl	800d4fc <_free_r>
 800dae0:	e7e1      	b.n	800daa6 <_realloc_r+0x1e>
 800dae2:	4635      	mov	r5, r6
 800dae4:	e7df      	b.n	800daa6 <_realloc_r+0x1e>

0800dae6 <__sfputc_r>:
 800dae6:	6893      	ldr	r3, [r2, #8]
 800dae8:	b410      	push	{r4}
 800daea:	3b01      	subs	r3, #1
 800daec:	2b00      	cmp	r3, #0
 800daee:	6093      	str	r3, [r2, #8]
 800daf0:	da07      	bge.n	800db02 <__sfputc_r+0x1c>
 800daf2:	6994      	ldr	r4, [r2, #24]
 800daf4:	42a3      	cmp	r3, r4
 800daf6:	db01      	blt.n	800dafc <__sfputc_r+0x16>
 800daf8:	290a      	cmp	r1, #10
 800dafa:	d102      	bne.n	800db02 <__sfputc_r+0x1c>
 800dafc:	bc10      	pop	{r4}
 800dafe:	f000 b949 	b.w	800dd94 <__swbuf_r>
 800db02:	6813      	ldr	r3, [r2, #0]
 800db04:	1c58      	adds	r0, r3, #1
 800db06:	6010      	str	r0, [r2, #0]
 800db08:	7019      	strb	r1, [r3, #0]
 800db0a:	4608      	mov	r0, r1
 800db0c:	bc10      	pop	{r4}
 800db0e:	4770      	bx	lr

0800db10 <__sfputs_r>:
 800db10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db12:	4606      	mov	r6, r0
 800db14:	460f      	mov	r7, r1
 800db16:	4614      	mov	r4, r2
 800db18:	18d5      	adds	r5, r2, r3
 800db1a:	42ac      	cmp	r4, r5
 800db1c:	d101      	bne.n	800db22 <__sfputs_r+0x12>
 800db1e:	2000      	movs	r0, #0
 800db20:	e007      	b.n	800db32 <__sfputs_r+0x22>
 800db22:	463a      	mov	r2, r7
 800db24:	4630      	mov	r0, r6
 800db26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db2a:	f7ff ffdc 	bl	800dae6 <__sfputc_r>
 800db2e:	1c43      	adds	r3, r0, #1
 800db30:	d1f3      	bne.n	800db1a <__sfputs_r+0xa>
 800db32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800db34 <_vfiprintf_r>:
 800db34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db38:	460d      	mov	r5, r1
 800db3a:	4614      	mov	r4, r2
 800db3c:	4698      	mov	r8, r3
 800db3e:	4606      	mov	r6, r0
 800db40:	b09d      	sub	sp, #116	; 0x74
 800db42:	b118      	cbz	r0, 800db4c <_vfiprintf_r+0x18>
 800db44:	6983      	ldr	r3, [r0, #24]
 800db46:	b90b      	cbnz	r3, 800db4c <_vfiprintf_r+0x18>
 800db48:	f000 fb02 	bl	800e150 <__sinit>
 800db4c:	4b89      	ldr	r3, [pc, #548]	; (800dd74 <_vfiprintf_r+0x240>)
 800db4e:	429d      	cmp	r5, r3
 800db50:	d11b      	bne.n	800db8a <_vfiprintf_r+0x56>
 800db52:	6875      	ldr	r5, [r6, #4]
 800db54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db56:	07d9      	lsls	r1, r3, #31
 800db58:	d405      	bmi.n	800db66 <_vfiprintf_r+0x32>
 800db5a:	89ab      	ldrh	r3, [r5, #12]
 800db5c:	059a      	lsls	r2, r3, #22
 800db5e:	d402      	bmi.n	800db66 <_vfiprintf_r+0x32>
 800db60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db62:	f000 fb93 	bl	800e28c <__retarget_lock_acquire_recursive>
 800db66:	89ab      	ldrh	r3, [r5, #12]
 800db68:	071b      	lsls	r3, r3, #28
 800db6a:	d501      	bpl.n	800db70 <_vfiprintf_r+0x3c>
 800db6c:	692b      	ldr	r3, [r5, #16]
 800db6e:	b9eb      	cbnz	r3, 800dbac <_vfiprintf_r+0x78>
 800db70:	4629      	mov	r1, r5
 800db72:	4630      	mov	r0, r6
 800db74:	f000 f960 	bl	800de38 <__swsetup_r>
 800db78:	b1c0      	cbz	r0, 800dbac <_vfiprintf_r+0x78>
 800db7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db7c:	07dc      	lsls	r4, r3, #31
 800db7e:	d50e      	bpl.n	800db9e <_vfiprintf_r+0x6a>
 800db80:	f04f 30ff 	mov.w	r0, #4294967295
 800db84:	b01d      	add	sp, #116	; 0x74
 800db86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db8a:	4b7b      	ldr	r3, [pc, #492]	; (800dd78 <_vfiprintf_r+0x244>)
 800db8c:	429d      	cmp	r5, r3
 800db8e:	d101      	bne.n	800db94 <_vfiprintf_r+0x60>
 800db90:	68b5      	ldr	r5, [r6, #8]
 800db92:	e7df      	b.n	800db54 <_vfiprintf_r+0x20>
 800db94:	4b79      	ldr	r3, [pc, #484]	; (800dd7c <_vfiprintf_r+0x248>)
 800db96:	429d      	cmp	r5, r3
 800db98:	bf08      	it	eq
 800db9a:	68f5      	ldreq	r5, [r6, #12]
 800db9c:	e7da      	b.n	800db54 <_vfiprintf_r+0x20>
 800db9e:	89ab      	ldrh	r3, [r5, #12]
 800dba0:	0598      	lsls	r0, r3, #22
 800dba2:	d4ed      	bmi.n	800db80 <_vfiprintf_r+0x4c>
 800dba4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dba6:	f000 fb72 	bl	800e28e <__retarget_lock_release_recursive>
 800dbaa:	e7e9      	b.n	800db80 <_vfiprintf_r+0x4c>
 800dbac:	2300      	movs	r3, #0
 800dbae:	9309      	str	r3, [sp, #36]	; 0x24
 800dbb0:	2320      	movs	r3, #32
 800dbb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dbb6:	2330      	movs	r3, #48	; 0x30
 800dbb8:	f04f 0901 	mov.w	r9, #1
 800dbbc:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbc0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800dd80 <_vfiprintf_r+0x24c>
 800dbc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dbc8:	4623      	mov	r3, r4
 800dbca:	469a      	mov	sl, r3
 800dbcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbd0:	b10a      	cbz	r2, 800dbd6 <_vfiprintf_r+0xa2>
 800dbd2:	2a25      	cmp	r2, #37	; 0x25
 800dbd4:	d1f9      	bne.n	800dbca <_vfiprintf_r+0x96>
 800dbd6:	ebba 0b04 	subs.w	fp, sl, r4
 800dbda:	d00b      	beq.n	800dbf4 <_vfiprintf_r+0xc0>
 800dbdc:	465b      	mov	r3, fp
 800dbde:	4622      	mov	r2, r4
 800dbe0:	4629      	mov	r1, r5
 800dbe2:	4630      	mov	r0, r6
 800dbe4:	f7ff ff94 	bl	800db10 <__sfputs_r>
 800dbe8:	3001      	adds	r0, #1
 800dbea:	f000 80aa 	beq.w	800dd42 <_vfiprintf_r+0x20e>
 800dbee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbf0:	445a      	add	r2, fp
 800dbf2:	9209      	str	r2, [sp, #36]	; 0x24
 800dbf4:	f89a 3000 	ldrb.w	r3, [sl]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	f000 80a2 	beq.w	800dd42 <_vfiprintf_r+0x20e>
 800dbfe:	2300      	movs	r3, #0
 800dc00:	f04f 32ff 	mov.w	r2, #4294967295
 800dc04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc08:	f10a 0a01 	add.w	sl, sl, #1
 800dc0c:	9304      	str	r3, [sp, #16]
 800dc0e:	9307      	str	r3, [sp, #28]
 800dc10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc14:	931a      	str	r3, [sp, #104]	; 0x68
 800dc16:	4654      	mov	r4, sl
 800dc18:	2205      	movs	r2, #5
 800dc1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc1e:	4858      	ldr	r0, [pc, #352]	; (800dd80 <_vfiprintf_r+0x24c>)
 800dc20:	f7fe ff84 	bl	800cb2c <memchr>
 800dc24:	9a04      	ldr	r2, [sp, #16]
 800dc26:	b9d8      	cbnz	r0, 800dc60 <_vfiprintf_r+0x12c>
 800dc28:	06d1      	lsls	r1, r2, #27
 800dc2a:	bf44      	itt	mi
 800dc2c:	2320      	movmi	r3, #32
 800dc2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc32:	0713      	lsls	r3, r2, #28
 800dc34:	bf44      	itt	mi
 800dc36:	232b      	movmi	r3, #43	; 0x2b
 800dc38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc3c:	f89a 3000 	ldrb.w	r3, [sl]
 800dc40:	2b2a      	cmp	r3, #42	; 0x2a
 800dc42:	d015      	beq.n	800dc70 <_vfiprintf_r+0x13c>
 800dc44:	4654      	mov	r4, sl
 800dc46:	2000      	movs	r0, #0
 800dc48:	f04f 0c0a 	mov.w	ip, #10
 800dc4c:	9a07      	ldr	r2, [sp, #28]
 800dc4e:	4621      	mov	r1, r4
 800dc50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc54:	3b30      	subs	r3, #48	; 0x30
 800dc56:	2b09      	cmp	r3, #9
 800dc58:	d94e      	bls.n	800dcf8 <_vfiprintf_r+0x1c4>
 800dc5a:	b1b0      	cbz	r0, 800dc8a <_vfiprintf_r+0x156>
 800dc5c:	9207      	str	r2, [sp, #28]
 800dc5e:	e014      	b.n	800dc8a <_vfiprintf_r+0x156>
 800dc60:	eba0 0308 	sub.w	r3, r0, r8
 800dc64:	fa09 f303 	lsl.w	r3, r9, r3
 800dc68:	4313      	orrs	r3, r2
 800dc6a:	46a2      	mov	sl, r4
 800dc6c:	9304      	str	r3, [sp, #16]
 800dc6e:	e7d2      	b.n	800dc16 <_vfiprintf_r+0xe2>
 800dc70:	9b03      	ldr	r3, [sp, #12]
 800dc72:	1d19      	adds	r1, r3, #4
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	9103      	str	r1, [sp, #12]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	bfbb      	ittet	lt
 800dc7c:	425b      	neglt	r3, r3
 800dc7e:	f042 0202 	orrlt.w	r2, r2, #2
 800dc82:	9307      	strge	r3, [sp, #28]
 800dc84:	9307      	strlt	r3, [sp, #28]
 800dc86:	bfb8      	it	lt
 800dc88:	9204      	strlt	r2, [sp, #16]
 800dc8a:	7823      	ldrb	r3, [r4, #0]
 800dc8c:	2b2e      	cmp	r3, #46	; 0x2e
 800dc8e:	d10c      	bne.n	800dcaa <_vfiprintf_r+0x176>
 800dc90:	7863      	ldrb	r3, [r4, #1]
 800dc92:	2b2a      	cmp	r3, #42	; 0x2a
 800dc94:	d135      	bne.n	800dd02 <_vfiprintf_r+0x1ce>
 800dc96:	9b03      	ldr	r3, [sp, #12]
 800dc98:	3402      	adds	r4, #2
 800dc9a:	1d1a      	adds	r2, r3, #4
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	9203      	str	r2, [sp, #12]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	bfb8      	it	lt
 800dca4:	f04f 33ff 	movlt.w	r3, #4294967295
 800dca8:	9305      	str	r3, [sp, #20]
 800dcaa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800dd84 <_vfiprintf_r+0x250>
 800dcae:	2203      	movs	r2, #3
 800dcb0:	4650      	mov	r0, sl
 800dcb2:	7821      	ldrb	r1, [r4, #0]
 800dcb4:	f7fe ff3a 	bl	800cb2c <memchr>
 800dcb8:	b140      	cbz	r0, 800dccc <_vfiprintf_r+0x198>
 800dcba:	2340      	movs	r3, #64	; 0x40
 800dcbc:	eba0 000a 	sub.w	r0, r0, sl
 800dcc0:	fa03 f000 	lsl.w	r0, r3, r0
 800dcc4:	9b04      	ldr	r3, [sp, #16]
 800dcc6:	3401      	adds	r4, #1
 800dcc8:	4303      	orrs	r3, r0
 800dcca:	9304      	str	r3, [sp, #16]
 800dccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcd0:	2206      	movs	r2, #6
 800dcd2:	482d      	ldr	r0, [pc, #180]	; (800dd88 <_vfiprintf_r+0x254>)
 800dcd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dcd8:	f7fe ff28 	bl	800cb2c <memchr>
 800dcdc:	2800      	cmp	r0, #0
 800dcde:	d03f      	beq.n	800dd60 <_vfiprintf_r+0x22c>
 800dce0:	4b2a      	ldr	r3, [pc, #168]	; (800dd8c <_vfiprintf_r+0x258>)
 800dce2:	bb1b      	cbnz	r3, 800dd2c <_vfiprintf_r+0x1f8>
 800dce4:	9b03      	ldr	r3, [sp, #12]
 800dce6:	3307      	adds	r3, #7
 800dce8:	f023 0307 	bic.w	r3, r3, #7
 800dcec:	3308      	adds	r3, #8
 800dcee:	9303      	str	r3, [sp, #12]
 800dcf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcf2:	443b      	add	r3, r7
 800dcf4:	9309      	str	r3, [sp, #36]	; 0x24
 800dcf6:	e767      	b.n	800dbc8 <_vfiprintf_r+0x94>
 800dcf8:	460c      	mov	r4, r1
 800dcfa:	2001      	movs	r0, #1
 800dcfc:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd00:	e7a5      	b.n	800dc4e <_vfiprintf_r+0x11a>
 800dd02:	2300      	movs	r3, #0
 800dd04:	f04f 0c0a 	mov.w	ip, #10
 800dd08:	4619      	mov	r1, r3
 800dd0a:	3401      	adds	r4, #1
 800dd0c:	9305      	str	r3, [sp, #20]
 800dd0e:	4620      	mov	r0, r4
 800dd10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd14:	3a30      	subs	r2, #48	; 0x30
 800dd16:	2a09      	cmp	r2, #9
 800dd18:	d903      	bls.n	800dd22 <_vfiprintf_r+0x1ee>
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d0c5      	beq.n	800dcaa <_vfiprintf_r+0x176>
 800dd1e:	9105      	str	r1, [sp, #20]
 800dd20:	e7c3      	b.n	800dcaa <_vfiprintf_r+0x176>
 800dd22:	4604      	mov	r4, r0
 800dd24:	2301      	movs	r3, #1
 800dd26:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd2a:	e7f0      	b.n	800dd0e <_vfiprintf_r+0x1da>
 800dd2c:	ab03      	add	r3, sp, #12
 800dd2e:	9300      	str	r3, [sp, #0]
 800dd30:	462a      	mov	r2, r5
 800dd32:	4630      	mov	r0, r6
 800dd34:	4b16      	ldr	r3, [pc, #88]	; (800dd90 <_vfiprintf_r+0x25c>)
 800dd36:	a904      	add	r1, sp, #16
 800dd38:	f7fc f878 	bl	8009e2c <_printf_float>
 800dd3c:	4607      	mov	r7, r0
 800dd3e:	1c78      	adds	r0, r7, #1
 800dd40:	d1d6      	bne.n	800dcf0 <_vfiprintf_r+0x1bc>
 800dd42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd44:	07d9      	lsls	r1, r3, #31
 800dd46:	d405      	bmi.n	800dd54 <_vfiprintf_r+0x220>
 800dd48:	89ab      	ldrh	r3, [r5, #12]
 800dd4a:	059a      	lsls	r2, r3, #22
 800dd4c:	d402      	bmi.n	800dd54 <_vfiprintf_r+0x220>
 800dd4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd50:	f000 fa9d 	bl	800e28e <__retarget_lock_release_recursive>
 800dd54:	89ab      	ldrh	r3, [r5, #12]
 800dd56:	065b      	lsls	r3, r3, #25
 800dd58:	f53f af12 	bmi.w	800db80 <_vfiprintf_r+0x4c>
 800dd5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd5e:	e711      	b.n	800db84 <_vfiprintf_r+0x50>
 800dd60:	ab03      	add	r3, sp, #12
 800dd62:	9300      	str	r3, [sp, #0]
 800dd64:	462a      	mov	r2, r5
 800dd66:	4630      	mov	r0, r6
 800dd68:	4b09      	ldr	r3, [pc, #36]	; (800dd90 <_vfiprintf_r+0x25c>)
 800dd6a:	a904      	add	r1, sp, #16
 800dd6c:	f7fc fafa 	bl	800a364 <_printf_i>
 800dd70:	e7e4      	b.n	800dd3c <_vfiprintf_r+0x208>
 800dd72:	bf00      	nop
 800dd74:	0800ea6c 	.word	0x0800ea6c
 800dd78:	0800ea8c 	.word	0x0800ea8c
 800dd7c:	0800ea4c 	.word	0x0800ea4c
 800dd80:	0800e9fc 	.word	0x0800e9fc
 800dd84:	0800ea02 	.word	0x0800ea02
 800dd88:	0800ea06 	.word	0x0800ea06
 800dd8c:	08009e2d 	.word	0x08009e2d
 800dd90:	0800db11 	.word	0x0800db11

0800dd94 <__swbuf_r>:
 800dd94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd96:	460e      	mov	r6, r1
 800dd98:	4614      	mov	r4, r2
 800dd9a:	4605      	mov	r5, r0
 800dd9c:	b118      	cbz	r0, 800dda6 <__swbuf_r+0x12>
 800dd9e:	6983      	ldr	r3, [r0, #24]
 800dda0:	b90b      	cbnz	r3, 800dda6 <__swbuf_r+0x12>
 800dda2:	f000 f9d5 	bl	800e150 <__sinit>
 800dda6:	4b21      	ldr	r3, [pc, #132]	; (800de2c <__swbuf_r+0x98>)
 800dda8:	429c      	cmp	r4, r3
 800ddaa:	d12b      	bne.n	800de04 <__swbuf_r+0x70>
 800ddac:	686c      	ldr	r4, [r5, #4]
 800ddae:	69a3      	ldr	r3, [r4, #24]
 800ddb0:	60a3      	str	r3, [r4, #8]
 800ddb2:	89a3      	ldrh	r3, [r4, #12]
 800ddb4:	071a      	lsls	r2, r3, #28
 800ddb6:	d52f      	bpl.n	800de18 <__swbuf_r+0x84>
 800ddb8:	6923      	ldr	r3, [r4, #16]
 800ddba:	b36b      	cbz	r3, 800de18 <__swbuf_r+0x84>
 800ddbc:	6923      	ldr	r3, [r4, #16]
 800ddbe:	6820      	ldr	r0, [r4, #0]
 800ddc0:	b2f6      	uxtb	r6, r6
 800ddc2:	1ac0      	subs	r0, r0, r3
 800ddc4:	6963      	ldr	r3, [r4, #20]
 800ddc6:	4637      	mov	r7, r6
 800ddc8:	4283      	cmp	r3, r0
 800ddca:	dc04      	bgt.n	800ddd6 <__swbuf_r+0x42>
 800ddcc:	4621      	mov	r1, r4
 800ddce:	4628      	mov	r0, r5
 800ddd0:	f000 f92a 	bl	800e028 <_fflush_r>
 800ddd4:	bb30      	cbnz	r0, 800de24 <__swbuf_r+0x90>
 800ddd6:	68a3      	ldr	r3, [r4, #8]
 800ddd8:	3001      	adds	r0, #1
 800ddda:	3b01      	subs	r3, #1
 800dddc:	60a3      	str	r3, [r4, #8]
 800ddde:	6823      	ldr	r3, [r4, #0]
 800dde0:	1c5a      	adds	r2, r3, #1
 800dde2:	6022      	str	r2, [r4, #0]
 800dde4:	701e      	strb	r6, [r3, #0]
 800dde6:	6963      	ldr	r3, [r4, #20]
 800dde8:	4283      	cmp	r3, r0
 800ddea:	d004      	beq.n	800ddf6 <__swbuf_r+0x62>
 800ddec:	89a3      	ldrh	r3, [r4, #12]
 800ddee:	07db      	lsls	r3, r3, #31
 800ddf0:	d506      	bpl.n	800de00 <__swbuf_r+0x6c>
 800ddf2:	2e0a      	cmp	r6, #10
 800ddf4:	d104      	bne.n	800de00 <__swbuf_r+0x6c>
 800ddf6:	4621      	mov	r1, r4
 800ddf8:	4628      	mov	r0, r5
 800ddfa:	f000 f915 	bl	800e028 <_fflush_r>
 800ddfe:	b988      	cbnz	r0, 800de24 <__swbuf_r+0x90>
 800de00:	4638      	mov	r0, r7
 800de02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de04:	4b0a      	ldr	r3, [pc, #40]	; (800de30 <__swbuf_r+0x9c>)
 800de06:	429c      	cmp	r4, r3
 800de08:	d101      	bne.n	800de0e <__swbuf_r+0x7a>
 800de0a:	68ac      	ldr	r4, [r5, #8]
 800de0c:	e7cf      	b.n	800ddae <__swbuf_r+0x1a>
 800de0e:	4b09      	ldr	r3, [pc, #36]	; (800de34 <__swbuf_r+0xa0>)
 800de10:	429c      	cmp	r4, r3
 800de12:	bf08      	it	eq
 800de14:	68ec      	ldreq	r4, [r5, #12]
 800de16:	e7ca      	b.n	800ddae <__swbuf_r+0x1a>
 800de18:	4621      	mov	r1, r4
 800de1a:	4628      	mov	r0, r5
 800de1c:	f000 f80c 	bl	800de38 <__swsetup_r>
 800de20:	2800      	cmp	r0, #0
 800de22:	d0cb      	beq.n	800ddbc <__swbuf_r+0x28>
 800de24:	f04f 37ff 	mov.w	r7, #4294967295
 800de28:	e7ea      	b.n	800de00 <__swbuf_r+0x6c>
 800de2a:	bf00      	nop
 800de2c:	0800ea6c 	.word	0x0800ea6c
 800de30:	0800ea8c 	.word	0x0800ea8c
 800de34:	0800ea4c 	.word	0x0800ea4c

0800de38 <__swsetup_r>:
 800de38:	4b32      	ldr	r3, [pc, #200]	; (800df04 <__swsetup_r+0xcc>)
 800de3a:	b570      	push	{r4, r5, r6, lr}
 800de3c:	681d      	ldr	r5, [r3, #0]
 800de3e:	4606      	mov	r6, r0
 800de40:	460c      	mov	r4, r1
 800de42:	b125      	cbz	r5, 800de4e <__swsetup_r+0x16>
 800de44:	69ab      	ldr	r3, [r5, #24]
 800de46:	b913      	cbnz	r3, 800de4e <__swsetup_r+0x16>
 800de48:	4628      	mov	r0, r5
 800de4a:	f000 f981 	bl	800e150 <__sinit>
 800de4e:	4b2e      	ldr	r3, [pc, #184]	; (800df08 <__swsetup_r+0xd0>)
 800de50:	429c      	cmp	r4, r3
 800de52:	d10f      	bne.n	800de74 <__swsetup_r+0x3c>
 800de54:	686c      	ldr	r4, [r5, #4]
 800de56:	89a3      	ldrh	r3, [r4, #12]
 800de58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de5c:	0719      	lsls	r1, r3, #28
 800de5e:	d42c      	bmi.n	800deba <__swsetup_r+0x82>
 800de60:	06dd      	lsls	r5, r3, #27
 800de62:	d411      	bmi.n	800de88 <__swsetup_r+0x50>
 800de64:	2309      	movs	r3, #9
 800de66:	6033      	str	r3, [r6, #0]
 800de68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800de6c:	f04f 30ff 	mov.w	r0, #4294967295
 800de70:	81a3      	strh	r3, [r4, #12]
 800de72:	e03e      	b.n	800def2 <__swsetup_r+0xba>
 800de74:	4b25      	ldr	r3, [pc, #148]	; (800df0c <__swsetup_r+0xd4>)
 800de76:	429c      	cmp	r4, r3
 800de78:	d101      	bne.n	800de7e <__swsetup_r+0x46>
 800de7a:	68ac      	ldr	r4, [r5, #8]
 800de7c:	e7eb      	b.n	800de56 <__swsetup_r+0x1e>
 800de7e:	4b24      	ldr	r3, [pc, #144]	; (800df10 <__swsetup_r+0xd8>)
 800de80:	429c      	cmp	r4, r3
 800de82:	bf08      	it	eq
 800de84:	68ec      	ldreq	r4, [r5, #12]
 800de86:	e7e6      	b.n	800de56 <__swsetup_r+0x1e>
 800de88:	0758      	lsls	r0, r3, #29
 800de8a:	d512      	bpl.n	800deb2 <__swsetup_r+0x7a>
 800de8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de8e:	b141      	cbz	r1, 800dea2 <__swsetup_r+0x6a>
 800de90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de94:	4299      	cmp	r1, r3
 800de96:	d002      	beq.n	800de9e <__swsetup_r+0x66>
 800de98:	4630      	mov	r0, r6
 800de9a:	f7ff fb2f 	bl	800d4fc <_free_r>
 800de9e:	2300      	movs	r3, #0
 800dea0:	6363      	str	r3, [r4, #52]	; 0x34
 800dea2:	89a3      	ldrh	r3, [r4, #12]
 800dea4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dea8:	81a3      	strh	r3, [r4, #12]
 800deaa:	2300      	movs	r3, #0
 800deac:	6063      	str	r3, [r4, #4]
 800deae:	6923      	ldr	r3, [r4, #16]
 800deb0:	6023      	str	r3, [r4, #0]
 800deb2:	89a3      	ldrh	r3, [r4, #12]
 800deb4:	f043 0308 	orr.w	r3, r3, #8
 800deb8:	81a3      	strh	r3, [r4, #12]
 800deba:	6923      	ldr	r3, [r4, #16]
 800debc:	b94b      	cbnz	r3, 800ded2 <__swsetup_r+0x9a>
 800debe:	89a3      	ldrh	r3, [r4, #12]
 800dec0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dec8:	d003      	beq.n	800ded2 <__swsetup_r+0x9a>
 800deca:	4621      	mov	r1, r4
 800decc:	4630      	mov	r0, r6
 800dece:	f000 fa05 	bl	800e2dc <__smakebuf_r>
 800ded2:	89a0      	ldrh	r0, [r4, #12]
 800ded4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ded8:	f010 0301 	ands.w	r3, r0, #1
 800dedc:	d00a      	beq.n	800def4 <__swsetup_r+0xbc>
 800dede:	2300      	movs	r3, #0
 800dee0:	60a3      	str	r3, [r4, #8]
 800dee2:	6963      	ldr	r3, [r4, #20]
 800dee4:	425b      	negs	r3, r3
 800dee6:	61a3      	str	r3, [r4, #24]
 800dee8:	6923      	ldr	r3, [r4, #16]
 800deea:	b943      	cbnz	r3, 800defe <__swsetup_r+0xc6>
 800deec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800def0:	d1ba      	bne.n	800de68 <__swsetup_r+0x30>
 800def2:	bd70      	pop	{r4, r5, r6, pc}
 800def4:	0781      	lsls	r1, r0, #30
 800def6:	bf58      	it	pl
 800def8:	6963      	ldrpl	r3, [r4, #20]
 800defa:	60a3      	str	r3, [r4, #8]
 800defc:	e7f4      	b.n	800dee8 <__swsetup_r+0xb0>
 800defe:	2000      	movs	r0, #0
 800df00:	e7f7      	b.n	800def2 <__swsetup_r+0xba>
 800df02:	bf00      	nop
 800df04:	2000017c 	.word	0x2000017c
 800df08:	0800ea6c 	.word	0x0800ea6c
 800df0c:	0800ea8c 	.word	0x0800ea8c
 800df10:	0800ea4c 	.word	0x0800ea4c

0800df14 <abort>:
 800df14:	2006      	movs	r0, #6
 800df16:	b508      	push	{r3, lr}
 800df18:	f000 fa50 	bl	800e3bc <raise>
 800df1c:	2001      	movs	r0, #1
 800df1e:	f7f3 fca6 	bl	800186e <_exit>
	...

0800df24 <__sflush_r>:
 800df24:	898a      	ldrh	r2, [r1, #12]
 800df26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df28:	4605      	mov	r5, r0
 800df2a:	0710      	lsls	r0, r2, #28
 800df2c:	460c      	mov	r4, r1
 800df2e:	d457      	bmi.n	800dfe0 <__sflush_r+0xbc>
 800df30:	684b      	ldr	r3, [r1, #4]
 800df32:	2b00      	cmp	r3, #0
 800df34:	dc04      	bgt.n	800df40 <__sflush_r+0x1c>
 800df36:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800df38:	2b00      	cmp	r3, #0
 800df3a:	dc01      	bgt.n	800df40 <__sflush_r+0x1c>
 800df3c:	2000      	movs	r0, #0
 800df3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df42:	2e00      	cmp	r6, #0
 800df44:	d0fa      	beq.n	800df3c <__sflush_r+0x18>
 800df46:	2300      	movs	r3, #0
 800df48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800df4c:	682f      	ldr	r7, [r5, #0]
 800df4e:	602b      	str	r3, [r5, #0]
 800df50:	d032      	beq.n	800dfb8 <__sflush_r+0x94>
 800df52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800df54:	89a3      	ldrh	r3, [r4, #12]
 800df56:	075a      	lsls	r2, r3, #29
 800df58:	d505      	bpl.n	800df66 <__sflush_r+0x42>
 800df5a:	6863      	ldr	r3, [r4, #4]
 800df5c:	1ac0      	subs	r0, r0, r3
 800df5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800df60:	b10b      	cbz	r3, 800df66 <__sflush_r+0x42>
 800df62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800df64:	1ac0      	subs	r0, r0, r3
 800df66:	2300      	movs	r3, #0
 800df68:	4602      	mov	r2, r0
 800df6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df6c:	4628      	mov	r0, r5
 800df6e:	6a21      	ldr	r1, [r4, #32]
 800df70:	47b0      	blx	r6
 800df72:	1c43      	adds	r3, r0, #1
 800df74:	89a3      	ldrh	r3, [r4, #12]
 800df76:	d106      	bne.n	800df86 <__sflush_r+0x62>
 800df78:	6829      	ldr	r1, [r5, #0]
 800df7a:	291d      	cmp	r1, #29
 800df7c:	d82c      	bhi.n	800dfd8 <__sflush_r+0xb4>
 800df7e:	4a29      	ldr	r2, [pc, #164]	; (800e024 <__sflush_r+0x100>)
 800df80:	40ca      	lsrs	r2, r1
 800df82:	07d6      	lsls	r6, r2, #31
 800df84:	d528      	bpl.n	800dfd8 <__sflush_r+0xb4>
 800df86:	2200      	movs	r2, #0
 800df88:	6062      	str	r2, [r4, #4]
 800df8a:	6922      	ldr	r2, [r4, #16]
 800df8c:	04d9      	lsls	r1, r3, #19
 800df8e:	6022      	str	r2, [r4, #0]
 800df90:	d504      	bpl.n	800df9c <__sflush_r+0x78>
 800df92:	1c42      	adds	r2, r0, #1
 800df94:	d101      	bne.n	800df9a <__sflush_r+0x76>
 800df96:	682b      	ldr	r3, [r5, #0]
 800df98:	b903      	cbnz	r3, 800df9c <__sflush_r+0x78>
 800df9a:	6560      	str	r0, [r4, #84]	; 0x54
 800df9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df9e:	602f      	str	r7, [r5, #0]
 800dfa0:	2900      	cmp	r1, #0
 800dfa2:	d0cb      	beq.n	800df3c <__sflush_r+0x18>
 800dfa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dfa8:	4299      	cmp	r1, r3
 800dfaa:	d002      	beq.n	800dfb2 <__sflush_r+0x8e>
 800dfac:	4628      	mov	r0, r5
 800dfae:	f7ff faa5 	bl	800d4fc <_free_r>
 800dfb2:	2000      	movs	r0, #0
 800dfb4:	6360      	str	r0, [r4, #52]	; 0x34
 800dfb6:	e7c2      	b.n	800df3e <__sflush_r+0x1a>
 800dfb8:	6a21      	ldr	r1, [r4, #32]
 800dfba:	2301      	movs	r3, #1
 800dfbc:	4628      	mov	r0, r5
 800dfbe:	47b0      	blx	r6
 800dfc0:	1c41      	adds	r1, r0, #1
 800dfc2:	d1c7      	bne.n	800df54 <__sflush_r+0x30>
 800dfc4:	682b      	ldr	r3, [r5, #0]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d0c4      	beq.n	800df54 <__sflush_r+0x30>
 800dfca:	2b1d      	cmp	r3, #29
 800dfcc:	d001      	beq.n	800dfd2 <__sflush_r+0xae>
 800dfce:	2b16      	cmp	r3, #22
 800dfd0:	d101      	bne.n	800dfd6 <__sflush_r+0xb2>
 800dfd2:	602f      	str	r7, [r5, #0]
 800dfd4:	e7b2      	b.n	800df3c <__sflush_r+0x18>
 800dfd6:	89a3      	ldrh	r3, [r4, #12]
 800dfd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfdc:	81a3      	strh	r3, [r4, #12]
 800dfde:	e7ae      	b.n	800df3e <__sflush_r+0x1a>
 800dfe0:	690f      	ldr	r7, [r1, #16]
 800dfe2:	2f00      	cmp	r7, #0
 800dfe4:	d0aa      	beq.n	800df3c <__sflush_r+0x18>
 800dfe6:	0793      	lsls	r3, r2, #30
 800dfe8:	bf18      	it	ne
 800dfea:	2300      	movne	r3, #0
 800dfec:	680e      	ldr	r6, [r1, #0]
 800dfee:	bf08      	it	eq
 800dff0:	694b      	ldreq	r3, [r1, #20]
 800dff2:	1bf6      	subs	r6, r6, r7
 800dff4:	600f      	str	r7, [r1, #0]
 800dff6:	608b      	str	r3, [r1, #8]
 800dff8:	2e00      	cmp	r6, #0
 800dffa:	dd9f      	ble.n	800df3c <__sflush_r+0x18>
 800dffc:	4633      	mov	r3, r6
 800dffe:	463a      	mov	r2, r7
 800e000:	4628      	mov	r0, r5
 800e002:	6a21      	ldr	r1, [r4, #32]
 800e004:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800e008:	47e0      	blx	ip
 800e00a:	2800      	cmp	r0, #0
 800e00c:	dc06      	bgt.n	800e01c <__sflush_r+0xf8>
 800e00e:	89a3      	ldrh	r3, [r4, #12]
 800e010:	f04f 30ff 	mov.w	r0, #4294967295
 800e014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e018:	81a3      	strh	r3, [r4, #12]
 800e01a:	e790      	b.n	800df3e <__sflush_r+0x1a>
 800e01c:	4407      	add	r7, r0
 800e01e:	1a36      	subs	r6, r6, r0
 800e020:	e7ea      	b.n	800dff8 <__sflush_r+0xd4>
 800e022:	bf00      	nop
 800e024:	20400001 	.word	0x20400001

0800e028 <_fflush_r>:
 800e028:	b538      	push	{r3, r4, r5, lr}
 800e02a:	690b      	ldr	r3, [r1, #16]
 800e02c:	4605      	mov	r5, r0
 800e02e:	460c      	mov	r4, r1
 800e030:	b913      	cbnz	r3, 800e038 <_fflush_r+0x10>
 800e032:	2500      	movs	r5, #0
 800e034:	4628      	mov	r0, r5
 800e036:	bd38      	pop	{r3, r4, r5, pc}
 800e038:	b118      	cbz	r0, 800e042 <_fflush_r+0x1a>
 800e03a:	6983      	ldr	r3, [r0, #24]
 800e03c:	b90b      	cbnz	r3, 800e042 <_fflush_r+0x1a>
 800e03e:	f000 f887 	bl	800e150 <__sinit>
 800e042:	4b14      	ldr	r3, [pc, #80]	; (800e094 <_fflush_r+0x6c>)
 800e044:	429c      	cmp	r4, r3
 800e046:	d11b      	bne.n	800e080 <_fflush_r+0x58>
 800e048:	686c      	ldr	r4, [r5, #4]
 800e04a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d0ef      	beq.n	800e032 <_fflush_r+0xa>
 800e052:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e054:	07d0      	lsls	r0, r2, #31
 800e056:	d404      	bmi.n	800e062 <_fflush_r+0x3a>
 800e058:	0599      	lsls	r1, r3, #22
 800e05a:	d402      	bmi.n	800e062 <_fflush_r+0x3a>
 800e05c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e05e:	f000 f915 	bl	800e28c <__retarget_lock_acquire_recursive>
 800e062:	4628      	mov	r0, r5
 800e064:	4621      	mov	r1, r4
 800e066:	f7ff ff5d 	bl	800df24 <__sflush_r>
 800e06a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e06c:	4605      	mov	r5, r0
 800e06e:	07da      	lsls	r2, r3, #31
 800e070:	d4e0      	bmi.n	800e034 <_fflush_r+0xc>
 800e072:	89a3      	ldrh	r3, [r4, #12]
 800e074:	059b      	lsls	r3, r3, #22
 800e076:	d4dd      	bmi.n	800e034 <_fflush_r+0xc>
 800e078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e07a:	f000 f908 	bl	800e28e <__retarget_lock_release_recursive>
 800e07e:	e7d9      	b.n	800e034 <_fflush_r+0xc>
 800e080:	4b05      	ldr	r3, [pc, #20]	; (800e098 <_fflush_r+0x70>)
 800e082:	429c      	cmp	r4, r3
 800e084:	d101      	bne.n	800e08a <_fflush_r+0x62>
 800e086:	68ac      	ldr	r4, [r5, #8]
 800e088:	e7df      	b.n	800e04a <_fflush_r+0x22>
 800e08a:	4b04      	ldr	r3, [pc, #16]	; (800e09c <_fflush_r+0x74>)
 800e08c:	429c      	cmp	r4, r3
 800e08e:	bf08      	it	eq
 800e090:	68ec      	ldreq	r4, [r5, #12]
 800e092:	e7da      	b.n	800e04a <_fflush_r+0x22>
 800e094:	0800ea6c 	.word	0x0800ea6c
 800e098:	0800ea8c 	.word	0x0800ea8c
 800e09c:	0800ea4c 	.word	0x0800ea4c

0800e0a0 <std>:
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	b510      	push	{r4, lr}
 800e0a4:	4604      	mov	r4, r0
 800e0a6:	e9c0 3300 	strd	r3, r3, [r0]
 800e0aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e0ae:	6083      	str	r3, [r0, #8]
 800e0b0:	8181      	strh	r1, [r0, #12]
 800e0b2:	6643      	str	r3, [r0, #100]	; 0x64
 800e0b4:	81c2      	strh	r2, [r0, #14]
 800e0b6:	6183      	str	r3, [r0, #24]
 800e0b8:	4619      	mov	r1, r3
 800e0ba:	2208      	movs	r2, #8
 800e0bc:	305c      	adds	r0, #92	; 0x5c
 800e0be:	f7fb fe0f 	bl	8009ce0 <memset>
 800e0c2:	4b05      	ldr	r3, [pc, #20]	; (800e0d8 <std+0x38>)
 800e0c4:	6224      	str	r4, [r4, #32]
 800e0c6:	6263      	str	r3, [r4, #36]	; 0x24
 800e0c8:	4b04      	ldr	r3, [pc, #16]	; (800e0dc <std+0x3c>)
 800e0ca:	62a3      	str	r3, [r4, #40]	; 0x28
 800e0cc:	4b04      	ldr	r3, [pc, #16]	; (800e0e0 <std+0x40>)
 800e0ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e0d0:	4b04      	ldr	r3, [pc, #16]	; (800e0e4 <std+0x44>)
 800e0d2:	6323      	str	r3, [r4, #48]	; 0x30
 800e0d4:	bd10      	pop	{r4, pc}
 800e0d6:	bf00      	nop
 800e0d8:	0800e3f5 	.word	0x0800e3f5
 800e0dc:	0800e417 	.word	0x0800e417
 800e0e0:	0800e44f 	.word	0x0800e44f
 800e0e4:	0800e473 	.word	0x0800e473

0800e0e8 <_cleanup_r>:
 800e0e8:	4901      	ldr	r1, [pc, #4]	; (800e0f0 <_cleanup_r+0x8>)
 800e0ea:	f000 b8af 	b.w	800e24c <_fwalk_reent>
 800e0ee:	bf00      	nop
 800e0f0:	0800e029 	.word	0x0800e029

0800e0f4 <__sfmoreglue>:
 800e0f4:	2268      	movs	r2, #104	; 0x68
 800e0f6:	b570      	push	{r4, r5, r6, lr}
 800e0f8:	1e4d      	subs	r5, r1, #1
 800e0fa:	4355      	muls	r5, r2
 800e0fc:	460e      	mov	r6, r1
 800e0fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e102:	f7ff fa63 	bl	800d5cc <_malloc_r>
 800e106:	4604      	mov	r4, r0
 800e108:	b140      	cbz	r0, 800e11c <__sfmoreglue+0x28>
 800e10a:	2100      	movs	r1, #0
 800e10c:	e9c0 1600 	strd	r1, r6, [r0]
 800e110:	300c      	adds	r0, #12
 800e112:	60a0      	str	r0, [r4, #8]
 800e114:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e118:	f7fb fde2 	bl	8009ce0 <memset>
 800e11c:	4620      	mov	r0, r4
 800e11e:	bd70      	pop	{r4, r5, r6, pc}

0800e120 <__sfp_lock_acquire>:
 800e120:	4801      	ldr	r0, [pc, #4]	; (800e128 <__sfp_lock_acquire+0x8>)
 800e122:	f000 b8b3 	b.w	800e28c <__retarget_lock_acquire_recursive>
 800e126:	bf00      	nop
 800e128:	200015d5 	.word	0x200015d5

0800e12c <__sfp_lock_release>:
 800e12c:	4801      	ldr	r0, [pc, #4]	; (800e134 <__sfp_lock_release+0x8>)
 800e12e:	f000 b8ae 	b.w	800e28e <__retarget_lock_release_recursive>
 800e132:	bf00      	nop
 800e134:	200015d5 	.word	0x200015d5

0800e138 <__sinit_lock_acquire>:
 800e138:	4801      	ldr	r0, [pc, #4]	; (800e140 <__sinit_lock_acquire+0x8>)
 800e13a:	f000 b8a7 	b.w	800e28c <__retarget_lock_acquire_recursive>
 800e13e:	bf00      	nop
 800e140:	200015d6 	.word	0x200015d6

0800e144 <__sinit_lock_release>:
 800e144:	4801      	ldr	r0, [pc, #4]	; (800e14c <__sinit_lock_release+0x8>)
 800e146:	f000 b8a2 	b.w	800e28e <__retarget_lock_release_recursive>
 800e14a:	bf00      	nop
 800e14c:	200015d6 	.word	0x200015d6

0800e150 <__sinit>:
 800e150:	b510      	push	{r4, lr}
 800e152:	4604      	mov	r4, r0
 800e154:	f7ff fff0 	bl	800e138 <__sinit_lock_acquire>
 800e158:	69a3      	ldr	r3, [r4, #24]
 800e15a:	b11b      	cbz	r3, 800e164 <__sinit+0x14>
 800e15c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e160:	f7ff bff0 	b.w	800e144 <__sinit_lock_release>
 800e164:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e168:	6523      	str	r3, [r4, #80]	; 0x50
 800e16a:	4b13      	ldr	r3, [pc, #76]	; (800e1b8 <__sinit+0x68>)
 800e16c:	4a13      	ldr	r2, [pc, #76]	; (800e1bc <__sinit+0x6c>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	62a2      	str	r2, [r4, #40]	; 0x28
 800e172:	42a3      	cmp	r3, r4
 800e174:	bf08      	it	eq
 800e176:	2301      	moveq	r3, #1
 800e178:	4620      	mov	r0, r4
 800e17a:	bf08      	it	eq
 800e17c:	61a3      	streq	r3, [r4, #24]
 800e17e:	f000 f81f 	bl	800e1c0 <__sfp>
 800e182:	6060      	str	r0, [r4, #4]
 800e184:	4620      	mov	r0, r4
 800e186:	f000 f81b 	bl	800e1c0 <__sfp>
 800e18a:	60a0      	str	r0, [r4, #8]
 800e18c:	4620      	mov	r0, r4
 800e18e:	f000 f817 	bl	800e1c0 <__sfp>
 800e192:	2200      	movs	r2, #0
 800e194:	2104      	movs	r1, #4
 800e196:	60e0      	str	r0, [r4, #12]
 800e198:	6860      	ldr	r0, [r4, #4]
 800e19a:	f7ff ff81 	bl	800e0a0 <std>
 800e19e:	2201      	movs	r2, #1
 800e1a0:	2109      	movs	r1, #9
 800e1a2:	68a0      	ldr	r0, [r4, #8]
 800e1a4:	f7ff ff7c 	bl	800e0a0 <std>
 800e1a8:	2202      	movs	r2, #2
 800e1aa:	2112      	movs	r1, #18
 800e1ac:	68e0      	ldr	r0, [r4, #12]
 800e1ae:	f7ff ff77 	bl	800e0a0 <std>
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	61a3      	str	r3, [r4, #24]
 800e1b6:	e7d1      	b.n	800e15c <__sinit+0xc>
 800e1b8:	0800e604 	.word	0x0800e604
 800e1bc:	0800e0e9 	.word	0x0800e0e9

0800e1c0 <__sfp>:
 800e1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1c2:	4607      	mov	r7, r0
 800e1c4:	f7ff ffac 	bl	800e120 <__sfp_lock_acquire>
 800e1c8:	4b1e      	ldr	r3, [pc, #120]	; (800e244 <__sfp+0x84>)
 800e1ca:	681e      	ldr	r6, [r3, #0]
 800e1cc:	69b3      	ldr	r3, [r6, #24]
 800e1ce:	b913      	cbnz	r3, 800e1d6 <__sfp+0x16>
 800e1d0:	4630      	mov	r0, r6
 800e1d2:	f7ff ffbd 	bl	800e150 <__sinit>
 800e1d6:	3648      	adds	r6, #72	; 0x48
 800e1d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e1dc:	3b01      	subs	r3, #1
 800e1de:	d503      	bpl.n	800e1e8 <__sfp+0x28>
 800e1e0:	6833      	ldr	r3, [r6, #0]
 800e1e2:	b30b      	cbz	r3, 800e228 <__sfp+0x68>
 800e1e4:	6836      	ldr	r6, [r6, #0]
 800e1e6:	e7f7      	b.n	800e1d8 <__sfp+0x18>
 800e1e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e1ec:	b9d5      	cbnz	r5, 800e224 <__sfp+0x64>
 800e1ee:	4b16      	ldr	r3, [pc, #88]	; (800e248 <__sfp+0x88>)
 800e1f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e1f4:	60e3      	str	r3, [r4, #12]
 800e1f6:	6665      	str	r5, [r4, #100]	; 0x64
 800e1f8:	f000 f847 	bl	800e28a <__retarget_lock_init_recursive>
 800e1fc:	f7ff ff96 	bl	800e12c <__sfp_lock_release>
 800e200:	2208      	movs	r2, #8
 800e202:	4629      	mov	r1, r5
 800e204:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e208:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e20c:	6025      	str	r5, [r4, #0]
 800e20e:	61a5      	str	r5, [r4, #24]
 800e210:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e214:	f7fb fd64 	bl	8009ce0 <memset>
 800e218:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e21c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e220:	4620      	mov	r0, r4
 800e222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e224:	3468      	adds	r4, #104	; 0x68
 800e226:	e7d9      	b.n	800e1dc <__sfp+0x1c>
 800e228:	2104      	movs	r1, #4
 800e22a:	4638      	mov	r0, r7
 800e22c:	f7ff ff62 	bl	800e0f4 <__sfmoreglue>
 800e230:	4604      	mov	r4, r0
 800e232:	6030      	str	r0, [r6, #0]
 800e234:	2800      	cmp	r0, #0
 800e236:	d1d5      	bne.n	800e1e4 <__sfp+0x24>
 800e238:	f7ff ff78 	bl	800e12c <__sfp_lock_release>
 800e23c:	230c      	movs	r3, #12
 800e23e:	603b      	str	r3, [r7, #0]
 800e240:	e7ee      	b.n	800e220 <__sfp+0x60>
 800e242:	bf00      	nop
 800e244:	0800e604 	.word	0x0800e604
 800e248:	ffff0001 	.word	0xffff0001

0800e24c <_fwalk_reent>:
 800e24c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e250:	4606      	mov	r6, r0
 800e252:	4688      	mov	r8, r1
 800e254:	2700      	movs	r7, #0
 800e256:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e25a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e25e:	f1b9 0901 	subs.w	r9, r9, #1
 800e262:	d505      	bpl.n	800e270 <_fwalk_reent+0x24>
 800e264:	6824      	ldr	r4, [r4, #0]
 800e266:	2c00      	cmp	r4, #0
 800e268:	d1f7      	bne.n	800e25a <_fwalk_reent+0xe>
 800e26a:	4638      	mov	r0, r7
 800e26c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e270:	89ab      	ldrh	r3, [r5, #12]
 800e272:	2b01      	cmp	r3, #1
 800e274:	d907      	bls.n	800e286 <_fwalk_reent+0x3a>
 800e276:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e27a:	3301      	adds	r3, #1
 800e27c:	d003      	beq.n	800e286 <_fwalk_reent+0x3a>
 800e27e:	4629      	mov	r1, r5
 800e280:	4630      	mov	r0, r6
 800e282:	47c0      	blx	r8
 800e284:	4307      	orrs	r7, r0
 800e286:	3568      	adds	r5, #104	; 0x68
 800e288:	e7e9      	b.n	800e25e <_fwalk_reent+0x12>

0800e28a <__retarget_lock_init_recursive>:
 800e28a:	4770      	bx	lr

0800e28c <__retarget_lock_acquire_recursive>:
 800e28c:	4770      	bx	lr

0800e28e <__retarget_lock_release_recursive>:
 800e28e:	4770      	bx	lr

0800e290 <__swhatbuf_r>:
 800e290:	b570      	push	{r4, r5, r6, lr}
 800e292:	460e      	mov	r6, r1
 800e294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e298:	4614      	mov	r4, r2
 800e29a:	2900      	cmp	r1, #0
 800e29c:	461d      	mov	r5, r3
 800e29e:	b096      	sub	sp, #88	; 0x58
 800e2a0:	da08      	bge.n	800e2b4 <__swhatbuf_r+0x24>
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e2a8:	602a      	str	r2, [r5, #0]
 800e2aa:	061a      	lsls	r2, r3, #24
 800e2ac:	d410      	bmi.n	800e2d0 <__swhatbuf_r+0x40>
 800e2ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2b2:	e00e      	b.n	800e2d2 <__swhatbuf_r+0x42>
 800e2b4:	466a      	mov	r2, sp
 800e2b6:	f000 f903 	bl	800e4c0 <_fstat_r>
 800e2ba:	2800      	cmp	r0, #0
 800e2bc:	dbf1      	blt.n	800e2a2 <__swhatbuf_r+0x12>
 800e2be:	9a01      	ldr	r2, [sp, #4]
 800e2c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e2c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e2c8:	425a      	negs	r2, r3
 800e2ca:	415a      	adcs	r2, r3
 800e2cc:	602a      	str	r2, [r5, #0]
 800e2ce:	e7ee      	b.n	800e2ae <__swhatbuf_r+0x1e>
 800e2d0:	2340      	movs	r3, #64	; 0x40
 800e2d2:	2000      	movs	r0, #0
 800e2d4:	6023      	str	r3, [r4, #0]
 800e2d6:	b016      	add	sp, #88	; 0x58
 800e2d8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e2dc <__smakebuf_r>:
 800e2dc:	898b      	ldrh	r3, [r1, #12]
 800e2de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e2e0:	079d      	lsls	r5, r3, #30
 800e2e2:	4606      	mov	r6, r0
 800e2e4:	460c      	mov	r4, r1
 800e2e6:	d507      	bpl.n	800e2f8 <__smakebuf_r+0x1c>
 800e2e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e2ec:	6023      	str	r3, [r4, #0]
 800e2ee:	6123      	str	r3, [r4, #16]
 800e2f0:	2301      	movs	r3, #1
 800e2f2:	6163      	str	r3, [r4, #20]
 800e2f4:	b002      	add	sp, #8
 800e2f6:	bd70      	pop	{r4, r5, r6, pc}
 800e2f8:	466a      	mov	r2, sp
 800e2fa:	ab01      	add	r3, sp, #4
 800e2fc:	f7ff ffc8 	bl	800e290 <__swhatbuf_r>
 800e300:	9900      	ldr	r1, [sp, #0]
 800e302:	4605      	mov	r5, r0
 800e304:	4630      	mov	r0, r6
 800e306:	f7ff f961 	bl	800d5cc <_malloc_r>
 800e30a:	b948      	cbnz	r0, 800e320 <__smakebuf_r+0x44>
 800e30c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e310:	059a      	lsls	r2, r3, #22
 800e312:	d4ef      	bmi.n	800e2f4 <__smakebuf_r+0x18>
 800e314:	f023 0303 	bic.w	r3, r3, #3
 800e318:	f043 0302 	orr.w	r3, r3, #2
 800e31c:	81a3      	strh	r3, [r4, #12]
 800e31e:	e7e3      	b.n	800e2e8 <__smakebuf_r+0xc>
 800e320:	4b0d      	ldr	r3, [pc, #52]	; (800e358 <__smakebuf_r+0x7c>)
 800e322:	62b3      	str	r3, [r6, #40]	; 0x28
 800e324:	89a3      	ldrh	r3, [r4, #12]
 800e326:	6020      	str	r0, [r4, #0]
 800e328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e32c:	81a3      	strh	r3, [r4, #12]
 800e32e:	9b00      	ldr	r3, [sp, #0]
 800e330:	6120      	str	r0, [r4, #16]
 800e332:	6163      	str	r3, [r4, #20]
 800e334:	9b01      	ldr	r3, [sp, #4]
 800e336:	b15b      	cbz	r3, 800e350 <__smakebuf_r+0x74>
 800e338:	4630      	mov	r0, r6
 800e33a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e33e:	f000 f8d1 	bl	800e4e4 <_isatty_r>
 800e342:	b128      	cbz	r0, 800e350 <__smakebuf_r+0x74>
 800e344:	89a3      	ldrh	r3, [r4, #12]
 800e346:	f023 0303 	bic.w	r3, r3, #3
 800e34a:	f043 0301 	orr.w	r3, r3, #1
 800e34e:	81a3      	strh	r3, [r4, #12]
 800e350:	89a0      	ldrh	r0, [r4, #12]
 800e352:	4305      	orrs	r5, r0
 800e354:	81a5      	strh	r5, [r4, #12]
 800e356:	e7cd      	b.n	800e2f4 <__smakebuf_r+0x18>
 800e358:	0800e0e9 	.word	0x0800e0e9

0800e35c <_malloc_usable_size_r>:
 800e35c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e360:	1f18      	subs	r0, r3, #4
 800e362:	2b00      	cmp	r3, #0
 800e364:	bfbc      	itt	lt
 800e366:	580b      	ldrlt	r3, [r1, r0]
 800e368:	18c0      	addlt	r0, r0, r3
 800e36a:	4770      	bx	lr

0800e36c <_raise_r>:
 800e36c:	291f      	cmp	r1, #31
 800e36e:	b538      	push	{r3, r4, r5, lr}
 800e370:	4604      	mov	r4, r0
 800e372:	460d      	mov	r5, r1
 800e374:	d904      	bls.n	800e380 <_raise_r+0x14>
 800e376:	2316      	movs	r3, #22
 800e378:	6003      	str	r3, [r0, #0]
 800e37a:	f04f 30ff 	mov.w	r0, #4294967295
 800e37e:	bd38      	pop	{r3, r4, r5, pc}
 800e380:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e382:	b112      	cbz	r2, 800e38a <_raise_r+0x1e>
 800e384:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e388:	b94b      	cbnz	r3, 800e39e <_raise_r+0x32>
 800e38a:	4620      	mov	r0, r4
 800e38c:	f000 f830 	bl	800e3f0 <_getpid_r>
 800e390:	462a      	mov	r2, r5
 800e392:	4601      	mov	r1, r0
 800e394:	4620      	mov	r0, r4
 800e396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e39a:	f000 b817 	b.w	800e3cc <_kill_r>
 800e39e:	2b01      	cmp	r3, #1
 800e3a0:	d00a      	beq.n	800e3b8 <_raise_r+0x4c>
 800e3a2:	1c59      	adds	r1, r3, #1
 800e3a4:	d103      	bne.n	800e3ae <_raise_r+0x42>
 800e3a6:	2316      	movs	r3, #22
 800e3a8:	6003      	str	r3, [r0, #0]
 800e3aa:	2001      	movs	r0, #1
 800e3ac:	e7e7      	b.n	800e37e <_raise_r+0x12>
 800e3ae:	2400      	movs	r4, #0
 800e3b0:	4628      	mov	r0, r5
 800e3b2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e3b6:	4798      	blx	r3
 800e3b8:	2000      	movs	r0, #0
 800e3ba:	e7e0      	b.n	800e37e <_raise_r+0x12>

0800e3bc <raise>:
 800e3bc:	4b02      	ldr	r3, [pc, #8]	; (800e3c8 <raise+0xc>)
 800e3be:	4601      	mov	r1, r0
 800e3c0:	6818      	ldr	r0, [r3, #0]
 800e3c2:	f7ff bfd3 	b.w	800e36c <_raise_r>
 800e3c6:	bf00      	nop
 800e3c8:	2000017c 	.word	0x2000017c

0800e3cc <_kill_r>:
 800e3cc:	b538      	push	{r3, r4, r5, lr}
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	4d06      	ldr	r5, [pc, #24]	; (800e3ec <_kill_r+0x20>)
 800e3d2:	4604      	mov	r4, r0
 800e3d4:	4608      	mov	r0, r1
 800e3d6:	4611      	mov	r1, r2
 800e3d8:	602b      	str	r3, [r5, #0]
 800e3da:	f7f3 fa38 	bl	800184e <_kill>
 800e3de:	1c43      	adds	r3, r0, #1
 800e3e0:	d102      	bne.n	800e3e8 <_kill_r+0x1c>
 800e3e2:	682b      	ldr	r3, [r5, #0]
 800e3e4:	b103      	cbz	r3, 800e3e8 <_kill_r+0x1c>
 800e3e6:	6023      	str	r3, [r4, #0]
 800e3e8:	bd38      	pop	{r3, r4, r5, pc}
 800e3ea:	bf00      	nop
 800e3ec:	200015d0 	.word	0x200015d0

0800e3f0 <_getpid_r>:
 800e3f0:	f7f3 ba26 	b.w	8001840 <_getpid>

0800e3f4 <__sread>:
 800e3f4:	b510      	push	{r4, lr}
 800e3f6:	460c      	mov	r4, r1
 800e3f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3fc:	f000 f894 	bl	800e528 <_read_r>
 800e400:	2800      	cmp	r0, #0
 800e402:	bfab      	itete	ge
 800e404:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e406:	89a3      	ldrhlt	r3, [r4, #12]
 800e408:	181b      	addge	r3, r3, r0
 800e40a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e40e:	bfac      	ite	ge
 800e410:	6563      	strge	r3, [r4, #84]	; 0x54
 800e412:	81a3      	strhlt	r3, [r4, #12]
 800e414:	bd10      	pop	{r4, pc}

0800e416 <__swrite>:
 800e416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e41a:	461f      	mov	r7, r3
 800e41c:	898b      	ldrh	r3, [r1, #12]
 800e41e:	4605      	mov	r5, r0
 800e420:	05db      	lsls	r3, r3, #23
 800e422:	460c      	mov	r4, r1
 800e424:	4616      	mov	r6, r2
 800e426:	d505      	bpl.n	800e434 <__swrite+0x1e>
 800e428:	2302      	movs	r3, #2
 800e42a:	2200      	movs	r2, #0
 800e42c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e430:	f000 f868 	bl	800e504 <_lseek_r>
 800e434:	89a3      	ldrh	r3, [r4, #12]
 800e436:	4632      	mov	r2, r6
 800e438:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e43c:	81a3      	strh	r3, [r4, #12]
 800e43e:	4628      	mov	r0, r5
 800e440:	463b      	mov	r3, r7
 800e442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e44a:	f000 b817 	b.w	800e47c <_write_r>

0800e44e <__sseek>:
 800e44e:	b510      	push	{r4, lr}
 800e450:	460c      	mov	r4, r1
 800e452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e456:	f000 f855 	bl	800e504 <_lseek_r>
 800e45a:	1c43      	adds	r3, r0, #1
 800e45c:	89a3      	ldrh	r3, [r4, #12]
 800e45e:	bf15      	itete	ne
 800e460:	6560      	strne	r0, [r4, #84]	; 0x54
 800e462:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e466:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e46a:	81a3      	strheq	r3, [r4, #12]
 800e46c:	bf18      	it	ne
 800e46e:	81a3      	strhne	r3, [r4, #12]
 800e470:	bd10      	pop	{r4, pc}

0800e472 <__sclose>:
 800e472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e476:	f000 b813 	b.w	800e4a0 <_close_r>
	...

0800e47c <_write_r>:
 800e47c:	b538      	push	{r3, r4, r5, lr}
 800e47e:	4604      	mov	r4, r0
 800e480:	4608      	mov	r0, r1
 800e482:	4611      	mov	r1, r2
 800e484:	2200      	movs	r2, #0
 800e486:	4d05      	ldr	r5, [pc, #20]	; (800e49c <_write_r+0x20>)
 800e488:	602a      	str	r2, [r5, #0]
 800e48a:	461a      	mov	r2, r3
 800e48c:	f7f3 fa16 	bl	80018bc <_write>
 800e490:	1c43      	adds	r3, r0, #1
 800e492:	d102      	bne.n	800e49a <_write_r+0x1e>
 800e494:	682b      	ldr	r3, [r5, #0]
 800e496:	b103      	cbz	r3, 800e49a <_write_r+0x1e>
 800e498:	6023      	str	r3, [r4, #0]
 800e49a:	bd38      	pop	{r3, r4, r5, pc}
 800e49c:	200015d0 	.word	0x200015d0

0800e4a0 <_close_r>:
 800e4a0:	b538      	push	{r3, r4, r5, lr}
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	4d05      	ldr	r5, [pc, #20]	; (800e4bc <_close_r+0x1c>)
 800e4a6:	4604      	mov	r4, r0
 800e4a8:	4608      	mov	r0, r1
 800e4aa:	602b      	str	r3, [r5, #0]
 800e4ac:	f7f3 fa22 	bl	80018f4 <_close>
 800e4b0:	1c43      	adds	r3, r0, #1
 800e4b2:	d102      	bne.n	800e4ba <_close_r+0x1a>
 800e4b4:	682b      	ldr	r3, [r5, #0]
 800e4b6:	b103      	cbz	r3, 800e4ba <_close_r+0x1a>
 800e4b8:	6023      	str	r3, [r4, #0]
 800e4ba:	bd38      	pop	{r3, r4, r5, pc}
 800e4bc:	200015d0 	.word	0x200015d0

0800e4c0 <_fstat_r>:
 800e4c0:	b538      	push	{r3, r4, r5, lr}
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	4d06      	ldr	r5, [pc, #24]	; (800e4e0 <_fstat_r+0x20>)
 800e4c6:	4604      	mov	r4, r0
 800e4c8:	4608      	mov	r0, r1
 800e4ca:	4611      	mov	r1, r2
 800e4cc:	602b      	str	r3, [r5, #0]
 800e4ce:	f7f3 fa1c 	bl	800190a <_fstat>
 800e4d2:	1c43      	adds	r3, r0, #1
 800e4d4:	d102      	bne.n	800e4dc <_fstat_r+0x1c>
 800e4d6:	682b      	ldr	r3, [r5, #0]
 800e4d8:	b103      	cbz	r3, 800e4dc <_fstat_r+0x1c>
 800e4da:	6023      	str	r3, [r4, #0]
 800e4dc:	bd38      	pop	{r3, r4, r5, pc}
 800e4de:	bf00      	nop
 800e4e0:	200015d0 	.word	0x200015d0

0800e4e4 <_isatty_r>:
 800e4e4:	b538      	push	{r3, r4, r5, lr}
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	4d05      	ldr	r5, [pc, #20]	; (800e500 <_isatty_r+0x1c>)
 800e4ea:	4604      	mov	r4, r0
 800e4ec:	4608      	mov	r0, r1
 800e4ee:	602b      	str	r3, [r5, #0]
 800e4f0:	f7f3 fa1a 	bl	8001928 <_isatty>
 800e4f4:	1c43      	adds	r3, r0, #1
 800e4f6:	d102      	bne.n	800e4fe <_isatty_r+0x1a>
 800e4f8:	682b      	ldr	r3, [r5, #0]
 800e4fa:	b103      	cbz	r3, 800e4fe <_isatty_r+0x1a>
 800e4fc:	6023      	str	r3, [r4, #0]
 800e4fe:	bd38      	pop	{r3, r4, r5, pc}
 800e500:	200015d0 	.word	0x200015d0

0800e504 <_lseek_r>:
 800e504:	b538      	push	{r3, r4, r5, lr}
 800e506:	4604      	mov	r4, r0
 800e508:	4608      	mov	r0, r1
 800e50a:	4611      	mov	r1, r2
 800e50c:	2200      	movs	r2, #0
 800e50e:	4d05      	ldr	r5, [pc, #20]	; (800e524 <_lseek_r+0x20>)
 800e510:	602a      	str	r2, [r5, #0]
 800e512:	461a      	mov	r2, r3
 800e514:	f7f3 fa12 	bl	800193c <_lseek>
 800e518:	1c43      	adds	r3, r0, #1
 800e51a:	d102      	bne.n	800e522 <_lseek_r+0x1e>
 800e51c:	682b      	ldr	r3, [r5, #0]
 800e51e:	b103      	cbz	r3, 800e522 <_lseek_r+0x1e>
 800e520:	6023      	str	r3, [r4, #0]
 800e522:	bd38      	pop	{r3, r4, r5, pc}
 800e524:	200015d0 	.word	0x200015d0

0800e528 <_read_r>:
 800e528:	b538      	push	{r3, r4, r5, lr}
 800e52a:	4604      	mov	r4, r0
 800e52c:	4608      	mov	r0, r1
 800e52e:	4611      	mov	r1, r2
 800e530:	2200      	movs	r2, #0
 800e532:	4d05      	ldr	r5, [pc, #20]	; (800e548 <_read_r+0x20>)
 800e534:	602a      	str	r2, [r5, #0]
 800e536:	461a      	mov	r2, r3
 800e538:	f7f3 f9a3 	bl	8001882 <_read>
 800e53c:	1c43      	adds	r3, r0, #1
 800e53e:	d102      	bne.n	800e546 <_read_r+0x1e>
 800e540:	682b      	ldr	r3, [r5, #0]
 800e542:	b103      	cbz	r3, 800e546 <_read_r+0x1e>
 800e544:	6023      	str	r3, [r4, #0]
 800e546:	bd38      	pop	{r3, r4, r5, pc}
 800e548:	200015d0 	.word	0x200015d0

0800e54c <_init>:
 800e54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e54e:	bf00      	nop
 800e550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e552:	bc08      	pop	{r3}
 800e554:	469e      	mov	lr, r3
 800e556:	4770      	bx	lr

0800e558 <_fini>:
 800e558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e55a:	bf00      	nop
 800e55c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e55e:	bc08      	pop	{r3}
 800e560:	469e      	mov	lr, r3
 800e562:	4770      	bx	lr
