
Kauri.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e424  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  0800e538  0800e538  0001e538  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea84  0800ea84  00020350  2**0
                  CONTENTS
  4 .ARM          00000000  0800ea84  0800ea84  00020350  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ea84  0800ea84  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea84  0800ea84  0001ea84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea88  0800ea88  0001ea88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800ea8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001660  20000350  0800eddc  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019b0  0800eddc  000219b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   000135a5  00000000  00000000  00020379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003155  00000000  00000000  0003391e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  00036a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  00037b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad6e  00000000  00000000  00038a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013aeb  00000000  00000000  000537c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a7a9  00000000  00000000  000672b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1a5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005974  00000000  00000000  000f1aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000350 	.word	0x20000350
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e51c 	.word	0x0800e51c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000354 	.word	0x20000354
 800014c:	0800e51c 	.word	0x0800e51c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	4605      	mov	r5, r0
 8001028:	460c      	mov	r4, r1
 800102a:	2200      	movs	r2, #0
 800102c:	2300      	movs	r3, #0
 800102e:	4628      	mov	r0, r5
 8001030:	4621      	mov	r1, r4
 8001032:	f7ff fcc3 	bl	80009bc <__aeabi_dcmplt>
 8001036:	b928      	cbnz	r0, 8001044 <__aeabi_d2lz+0x20>
 8001038:	4628      	mov	r0, r5
 800103a:	4621      	mov	r1, r4
 800103c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001040:	f000 b80a 	b.w	8001058 <__aeabi_d2ulz>
 8001044:	4628      	mov	r0, r5
 8001046:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800104a:	f000 f805 	bl	8001058 <__aeabi_d2ulz>
 800104e:	4240      	negs	r0, r0
 8001050:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001054:	bd38      	pop	{r3, r4, r5, pc}
 8001056:	bf00      	nop

08001058 <__aeabi_d2ulz>:
 8001058:	b5d0      	push	{r4, r6, r7, lr}
 800105a:	2200      	movs	r2, #0
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <__aeabi_d2ulz+0x34>)
 800105e:	4606      	mov	r6, r0
 8001060:	460f      	mov	r7, r1
 8001062:	f7ff fa39 	bl	80004d8 <__aeabi_dmul>
 8001066:	f7ff fd0f 	bl	8000a88 <__aeabi_d2uiz>
 800106a:	4604      	mov	r4, r0
 800106c:	f7ff f9ba 	bl	80003e4 <__aeabi_ui2d>
 8001070:	2200      	movs	r2, #0
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <__aeabi_d2ulz+0x38>)
 8001074:	f7ff fa30 	bl	80004d8 <__aeabi_dmul>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4630      	mov	r0, r6
 800107e:	4639      	mov	r1, r7
 8001080:	f7ff f872 	bl	8000168 <__aeabi_dsub>
 8001084:	f7ff fd00 	bl	8000a88 <__aeabi_d2uiz>
 8001088:	4621      	mov	r1, r4
 800108a:	bdd0      	pop	{r4, r6, r7, pc}
 800108c:	3df00000 	.word	0x3df00000
 8001090:	41f00000 	.word	0x41f00000

08001094 <lis331dlh_read_reg>:
  *
  */
int32_t __weak lis331dlh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 8001094:	b590      	push	{r4, r7, lr}
 8001096:	b087      	sub	sp, #28
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	461a      	mov	r2, r3
 80010a0:	460b      	mov	r3, r1
 80010a2:	72fb      	strb	r3, [r7, #11]
 80010a4:	4613      	mov	r3, r2
 80010a6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	685c      	ldr	r4, [r3, #4]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	68d8      	ldr	r0, [r3, #12]
 80010b0:	893b      	ldrh	r3, [r7, #8]
 80010b2:	7af9      	ldrb	r1, [r7, #11]
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	47a0      	blx	r4
 80010b8:	6178      	str	r0, [r7, #20]

  return ret;
 80010ba:	697b      	ldr	r3, [r7, #20]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	371c      	adds	r7, #28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd90      	pop	{r4, r7, pc}

080010c4 <lis331dlh_write_reg>:
  *
  */
int32_t __weak lis331dlh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	461a      	mov	r2, r3
 80010d0:	460b      	mov	r3, r1
 80010d2:	72fb      	strb	r3, [r7, #11]
 80010d4:	4613      	mov	r3, r2
 80010d6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681c      	ldr	r4, [r3, #0]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	68d8      	ldr	r0, [r3, #12]
 80010e0:	893b      	ldrh	r3, [r7, #8]
 80010e2:	7af9      	ldrb	r1, [r7, #11]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	47a0      	blx	r4
 80010e8:	6178      	str	r0, [r7, #20]

  return ret;
 80010ea:	697b      	ldr	r3, [r7, #20]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	371c      	adds	r7, #28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd90      	pop	{r4, r7, pc}

080010f4 <lis331dlh_from_fs2_to_mg>:
  * @{
  *
  */

float_t lis331dlh_from_fs2_to_mg(int16_t lsb)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 16.0f);
 80010fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fdea 	bl	8000cdc <__aeabi_i2f>
 8001108:	4603      	mov	r3, r0
 800110a:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff feec 	bl	8000eec <__aeabi_fdiv>
 8001114:	4603      	mov	r3, r0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <lis331dlh_data_rate_set>:
  * @param  val         change the values of dr in reg CTRL_REG1
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_data_rate_set(stmdev_ctx_t *ctx, lis331dlh_dr_t val)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b084      	sub	sp, #16
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
 8001126:	460b      	mov	r3, r1
 8001128:	70fb      	strb	r3, [r7, #3]
  lis331dlh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_CTRL_REG1,
 800112a:	f107 0208 	add.w	r2, r7, #8
 800112e:	2301      	movs	r3, #1
 8001130:	2120      	movs	r1, #32
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ffae 	bl	8001094 <lis331dlh_read_reg>
 8001138:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1, 1);

  if (ret == 0)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d118      	bne.n	8001172 <lis331dlh_data_rate_set+0x54>
  {
    ctrl_reg1.pm = (uint8_t)val & 0x07U;
 8001140:	78fb      	ldrb	r3, [r7, #3]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	b2da      	uxtb	r2, r3
 8001148:	7a3b      	ldrb	r3, [r7, #8]
 800114a:	f362 1347 	bfi	r3, r2, #5, #3
 800114e:	723b      	strb	r3, [r7, #8]
    ctrl_reg1.dr = ((uint8_t)val & 0x30U) >> 4;
 8001150:	78fb      	ldrb	r3, [r7, #3]
 8001152:	091b      	lsrs	r3, r3, #4
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	b2da      	uxtb	r2, r3
 800115a:	7a3b      	ldrb	r3, [r7, #8]
 800115c:	f362 03c4 	bfi	r3, r2, #3, #2
 8001160:	723b      	strb	r3, [r7, #8]
    ret = lis331dlh_write_reg(ctx, LIS331DLH_CTRL_REG1,
 8001162:	f107 0208 	add.w	r2, r7, #8
 8001166:	2301      	movs	r3, #1
 8001168:	2120      	movs	r1, #32
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff ffaa 	bl	80010c4 <lis331dlh_write_reg>
 8001170:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1, 1);
  }

  return ret;
 8001172:	68fb      	ldr	r3, [r7, #12]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <lis331dlh_full_scale_set>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_full_scale_set(stmdev_ctx_t *ctx,
                                 lis331dlh_fs_t val)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	70fb      	strb	r3, [r7, #3]
  lis331dlh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_CTRL_REG4,
 8001188:	f107 0208 	add.w	r2, r7, #8
 800118c:	2301      	movs	r3, #1
 800118e:	2123      	movs	r1, #35	; 0x23
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff ff7f 	bl	8001094 <lis331dlh_read_reg>
 8001196:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4, 1);

  if (ret == 0)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d10f      	bne.n	80011be <lis331dlh_full_scale_set+0x42>
  {
    ctrl_reg4.fs = (uint8_t)val;
 800119e:	78fb      	ldrb	r3, [r7, #3]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	7a3b      	ldrb	r3, [r7, #8]
 80011a8:	f362 1305 	bfi	r3, r2, #4, #2
 80011ac:	723b      	strb	r3, [r7, #8]
    ret = lis331dlh_write_reg(ctx, LIS331DLH_CTRL_REG4,
 80011ae:	f107 0208 	add.w	r2, r7, #8
 80011b2:	2301      	movs	r3, #1
 80011b4:	2123      	movs	r1, #35	; 0x23
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff ff84 	bl	80010c4 <lis331dlh_write_reg>
 80011bc:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 80011be:	68fb      	ldr	r3, [r7, #12]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <lis331dlh_block_data_update_set>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_block_data_update_set(stmdev_ctx_t *ctx,
                                        uint8_t val)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	70fb      	strb	r3, [r7, #3]
  lis331dlh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_CTRL_REG4,
 80011d4:	f107 0208 	add.w	r2, r7, #8
 80011d8:	2301      	movs	r3, #1
 80011da:	2123      	movs	r1, #35	; 0x23
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ff59 	bl	8001094 <lis331dlh_read_reg>
 80011e2:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4, 1);

  if (ret == 0)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d10f      	bne.n	800120a <lis331dlh_block_data_update_set+0x42>
  {
    ctrl_reg4.bdu = val;
 80011ea:	78fb      	ldrb	r3, [r7, #3]
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	7a3b      	ldrb	r3, [r7, #8]
 80011f4:	f362 13c7 	bfi	r3, r2, #7, #1
 80011f8:	723b      	strb	r3, [r7, #8]
    ret = lis331dlh_write_reg(ctx, LIS331DLH_CTRL_REG4,
 80011fa:	f107 0208 	add.w	r2, r7, #8
 80011fe:	2301      	movs	r3, #1
 8001200:	2123      	movs	r1, #35	; 0x23
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff ff5e 	bl	80010c4 <lis331dlh_write_reg>
 8001208:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 800120a:	68fb      	ldr	r3, [r7, #12]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <lis331dlh_status_reg_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_status_reg_get(stmdev_ctx_t *ctx,
                                 lis331dlh_status_reg_t *val)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_STATUS_REG, (uint8_t *) val, 1);
 800121e:	2301      	movs	r3, #1
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	2127      	movs	r1, #39	; 0x27
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff35 	bl	8001094 <lis331dlh_read_reg>
 800122a:	60f8      	str	r0, [r7, #12]

  return ret;
 800122c:	68fb      	ldr	r3, [r7, #12]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <lis331dlh_acceleration_raw_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_OUT_X_L, buff, 6);
 8001240:	f107 020c 	add.w	r2, r7, #12
 8001244:	2306      	movs	r3, #6
 8001246:	2128      	movs	r1, #40	; 0x28
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff ff23 	bl	8001094 <lis331dlh_read_reg>
 800124e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001250:	7b7b      	ldrb	r3, [r7, #13]
 8001252:	b21a      	sxth	r2, r3
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800125e:	b29b      	uxth	r3, r3
 8001260:	021b      	lsls	r3, r3, #8
 8001262:	b29a      	uxth	r2, r3
 8001264:	7b3b      	ldrb	r3, [r7, #12]
 8001266:	b29b      	uxth	r3, r3
 8001268:	4413      	add	r3, r2
 800126a:	b29b      	uxth	r3, r3
 800126c:	b21a      	sxth	r2, r3
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001272:	7bfa      	ldrb	r2, [r7, #15]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	3302      	adds	r3, #2
 8001278:	b212      	sxth	r2, r2
 800127a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	3302      	adds	r3, #2
 8001280:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001284:	b29b      	uxth	r3, r3
 8001286:	021b      	lsls	r3, r3, #8
 8001288:	b29a      	uxth	r2, r3
 800128a:	7bbb      	ldrb	r3, [r7, #14]
 800128c:	b29b      	uxth	r3, r3
 800128e:	4413      	add	r3, r2
 8001290:	b29a      	uxth	r2, r3
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	3302      	adds	r3, #2
 8001296:	b212      	sxth	r2, r2
 8001298:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800129a:	7c7a      	ldrb	r2, [r7, #17]
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	3304      	adds	r3, #4
 80012a0:	b212      	sxth	r2, r2
 80012a2:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	3304      	adds	r3, #4
 80012a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	021b      	lsls	r3, r3, #8
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	7c3b      	ldrb	r3, [r7, #16]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	4413      	add	r3, r2
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	3304      	adds	r3, #4
 80012be:	b212      	sxth	r2, r2
 80012c0:	801a      	strh	r2, [r3, #0]

  return ret;
 80012c2:	697b      	ldr	r3, [r7, #20]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <lis331dlh_device_id_get>:
  * @param  buff        buffer that stores data read
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_WHO_AM_I, buff, 1);
 80012d6:	2301      	movs	r3, #1
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	210f      	movs	r1, #15
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff fed9 	bl	8001094 <lis331dlh_read_reg>
 80012e2:	60f8      	str	r0, [r7, #12]

  return ret;
 80012e4:	68fb      	ldr	r3, [r7, #12]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <lis331dlh_hp_path_set>:
  * @param  val         change the values of hpen in reg CTRL_REG2
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_hp_path_set(stmdev_ctx_t *ctx, lis331dlh_hpen_t val)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b084      	sub	sp, #16
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	460b      	mov	r3, r1
 80012f8:	70fb      	strb	r3, [r7, #3]
  lis331dlh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_CTRL_REG2,
 80012fa:	f107 0208 	add.w	r2, r7, #8
 80012fe:	2301      	movs	r3, #1
 8001300:	2121      	movs	r1, #33	; 0x21
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff fec6 	bl	8001094 <lis331dlh_read_reg>
 8001308:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg2, 1);

  if (ret == 0)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d118      	bne.n	8001342 <lis331dlh_hp_path_set+0x54>
  {
    ctrl_reg2.hpen = (uint8_t)val & 0x03U;
 8001310:	78fb      	ldrb	r3, [r7, #3]
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	b2da      	uxtb	r2, r3
 8001318:	7a3b      	ldrb	r3, [r7, #8]
 800131a:	f362 0383 	bfi	r3, r2, #2, #2
 800131e:	723b      	strb	r3, [r7, #8]
    ctrl_reg2.fds = ((uint8_t)val & 0x04U) >> 2;
 8001320:	78fb      	ldrb	r3, [r7, #3]
 8001322:	089b      	lsrs	r3, r3, #2
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	b2da      	uxtb	r2, r3
 800132a:	7a3b      	ldrb	r3, [r7, #8]
 800132c:	f362 1304 	bfi	r3, r2, #4, #1
 8001330:	723b      	strb	r3, [r7, #8]
    ret = lis331dlh_write_reg(ctx, LIS331DLH_CTRL_REG2,
 8001332:	f107 0208 	add.w	r2, r7, #8
 8001336:	2301      	movs	r3, #1
 8001338:	2121      	movs	r1, #33	; 0x21
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff fec2 	bl	80010c4 <lis331dlh_write_reg>
 8001340:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg2, 1);
  }

  return ret;
 8001342:	68fb      	ldr	r3, [r7, #12]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b0e4      	sub	sp, #400	; 0x190
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001352:	f000 fb49 	bl	80019e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001356:	f000 f821 	bl	800139c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800135a:	f000 f8a9 	bl	80014b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800135e:	f000 f879 	bl	8001454 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001362:	f007 ffdf 	bl	8009324 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */



  char* text[100] = {0};
 8001366:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800136a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800136e:	4618      	mov	r0, r3
 8001370:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001374:	461a      	mov	r2, r3
 8001376:	2100      	movs	r1, #0
 8001378:	f008 fc9a 	bl	8009cb0 <memset>
  sprintf(text, "Init\n\r");
 800137c:	463b      	mov	r3, r7
 800137e:	4906      	ldr	r1, [pc, #24]	; (8001398 <main+0x4c>)
 8001380:	4618      	mov	r0, r3
 8001382:	f009 fb0f 	bl	800a9a4 <siprintf>
  CDC_Transmit_FS(text, sizeof(text));
 8001386:	463b      	mov	r3, r7
 8001388:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800138c:	4618      	mov	r0, r3
 800138e:	f008 f887 	bl	80094a0 <CDC_Transmit_FS>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	lis331dlh_read_data_polling();
 8001392:	f000 f8bb 	bl	800150c <lis331dlh_read_data_polling>
 8001396:	e7fc      	b.n	8001392 <main+0x46>
 8001398:	0800e538 	.word	0x0800e538

0800139c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b094      	sub	sp, #80	; 0x50
 80013a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013a6:	2228      	movs	r2, #40	; 0x28
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f008 fc80 	bl	8009cb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013cc:	2301      	movs	r3, #1
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013d6:	2300      	movs	r3, #0
 80013d8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013da:	2301      	movs	r3, #1
 80013dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013de:	2302      	movs	r3, #2
 80013e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80013e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013f2:	4618      	mov	r0, r3
 80013f4:	f003 fbd8 	bl	8004ba8 <HAL_RCC_OscConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013fe:	f000 f95f 	bl	80016c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001402:	230f      	movs	r3, #15
 8001404:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001406:	2302      	movs	r3, #2
 8001408:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800140e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001412:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001414:	2300      	movs	r3, #0
 8001416:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	2101      	movs	r1, #1
 800141e:	4618      	mov	r0, r3
 8001420:	f003 fe44 	bl	80050ac <HAL_RCC_ClockConfig>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800142a:	f000 f949 	bl	80016c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800142e:	2310      	movs	r3, #16
 8001430:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001432:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001436:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	4618      	mov	r0, r3
 800143c:	f003 ffb0 	bl	80053a0 <HAL_RCCEx_PeriphCLKConfig>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001446:	f000 f93b 	bl	80016c0 <Error_Handler>
  }
}
 800144a:	bf00      	nop
 800144c:	3750      	adds	r7, #80	; 0x50
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <MX_I2C1_Init+0x50>)
 800145a:	4a13      	ldr	r2, [pc, #76]	; (80014a8 <MX_I2C1_Init+0x54>)
 800145c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <MX_I2C1_Init+0x50>)
 8001460:	4a12      	ldr	r2, [pc, #72]	; (80014ac <MX_I2C1_Init+0x58>)
 8001462:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <MX_I2C1_Init+0x50>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_I2C1_Init+0x50>)
 800146c:	2200      	movs	r2, #0
 800146e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_I2C1_Init+0x50>)
 8001472:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001476:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001478:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <MX_I2C1_Init+0x50>)
 800147a:	2200      	movs	r2, #0
 800147c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_I2C1_Init+0x50>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <MX_I2C1_Init+0x50>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_I2C1_Init+0x50>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001490:	4804      	ldr	r0, [pc, #16]	; (80014a4 <MX_I2C1_Init+0x50>)
 8001492:	f000 fdc1 	bl	8002018 <HAL_I2C_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800149c:	f000 f910 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	2000036c 	.word	0x2000036c
 80014a8:	40005400 	.word	0x40005400
 80014ac:	000186a0 	.word	0x000186a0

080014b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b6:	4b14      	ldr	r3, [pc, #80]	; (8001508 <MX_GPIO_Init+0x58>)
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	4a13      	ldr	r2, [pc, #76]	; (8001508 <MX_GPIO_Init+0x58>)
 80014bc:	f043 0320 	orr.w	r3, r3, #32
 80014c0:	6193      	str	r3, [r2, #24]
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <MX_GPIO_Init+0x58>)
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	f003 0320 	and.w	r3, r3, #32
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <MX_GPIO_Init+0x58>)
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	4a0d      	ldr	r2, [pc, #52]	; (8001508 <MX_GPIO_Init+0x58>)
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	6193      	str	r3, [r2, #24]
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <MX_GPIO_Init+0x58>)
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <MX_GPIO_Init+0x58>)
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	4a07      	ldr	r2, [pc, #28]	; (8001508 <MX_GPIO_Init+0x58>)
 80014ec:	f043 0308 	orr.w	r3, r3, #8
 80014f0:	6193      	str	r3, [r2, #24]
 80014f2:	4b05      	ldr	r3, [pc, #20]	; (8001508 <MX_GPIO_Init+0x58>)
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]

}
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr
 8001508:	40021000 	.word	0x40021000

0800150c <lis331dlh_read_data_polling>:

/* USER CODE BEGIN 4 */

void lis331dlh_read_data_polling(void)
{
 800150c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001510:	b08a      	sub	sp, #40	; 0x28
 8001512:	af04      	add	r7, sp, #16
  /* Initialize mems driver interface */
  stmdev_ctx_t dev_ctx;
  dev_ctx.write_reg = platform_write;
 8001514:	4b41      	ldr	r3, [pc, #260]	; (800161c <lis331dlh_read_data_polling+0x110>)
 8001516:	60bb      	str	r3, [r7, #8]
  dev_ctx.read_reg = platform_read;
 8001518:	4b41      	ldr	r3, [pc, #260]	; (8001620 <lis331dlh_read_data_polling+0x114>)
 800151a:	60fb      	str	r3, [r7, #12]
  dev_ctx.handle = &hi2c1;
 800151c:	4b41      	ldr	r3, [pc, #260]	; (8001624 <lis331dlh_read_data_polling+0x118>)
 800151e:	617b      	str	r3, [r7, #20]
  /* Initialize platform specific hardware */
  HAL_Delay(5);
 8001520:	2005      	movs	r0, #5
 8001522:	f000 fac3 	bl	8001aac <HAL_Delay>
  /* Check device ID */
  lis331dlh_device_id_get(&dev_ctx, &whoamI);
 8001526:	f107 0308 	add.w	r3, r7, #8
 800152a:	493f      	ldr	r1, [pc, #252]	; (8001628 <lis331dlh_read_data_polling+0x11c>)
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fecd 	bl	80012cc <lis331dlh_device_id_get>

  if (whoamI != LIS331DLH_ID) {
 8001532:	4b3d      	ldr	r3, [pc, #244]	; (8001628 <lis331dlh_read_data_polling+0x11c>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b32      	cmp	r3, #50	; 0x32
 8001538:	d000      	beq.n	800153c <lis331dlh_read_data_polling+0x30>
    while (1) {
 800153a:	e7fe      	b.n	800153a <lis331dlh_read_data_polling+0x2e>
      /* manage here device not found */
    }
  }

  /* Enable Block Data Update */
  lis331dlh_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 800153c:	f107 0308 	add.w	r3, r7, #8
 8001540:	2101      	movs	r1, #1
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fe40 	bl	80011c8 <lis331dlh_block_data_update_set>
  /* Set full scale */
  lis331dlh_full_scale_set(&dev_ctx, LIS331DLH_2g);
 8001548:	f107 0308 	add.w	r3, r7, #8
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fe14 	bl	800117c <lis331dlh_full_scale_set>
  /* Configure filtering chain */
  /* Accelerometer - High Pass / Slope path */
  lis331dlh_hp_path_set(&dev_ctx, LIS331DLH_HP_DISABLE);
 8001554:	f107 0308 	add.w	r3, r7, #8
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fec7 	bl	80012ee <lis331dlh_hp_path_set>
  //lis331dlh_hp_path_set(&dev_ctx, LIS331DLH_HP_ON_OUT);
  //lis331dlh_hp_reset_get(&dev_ctx);
  /* Set Output Data Rate */
  lis331dlh_data_rate_set(&dev_ctx, LIS331DLH_ODR_5Hz);
 8001560:	f107 0308 	add.w	r3, r7, #8
 8001564:	2105      	movs	r1, #5
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fdd9 	bl	800111e <lis331dlh_data_rate_set>

  /* Read samples in polling mode (no int) */
  while (1) {
    /* Read output only if new value is available */
    lis331dlh_reg_t reg;
    lis331dlh_status_reg_get(&dev_ctx, &reg.status_reg);
 800156c:	1d3a      	adds	r2, r7, #4
 800156e:	f107 0308 	add.w	r3, r7, #8
 8001572:	4611      	mov	r1, r2
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fe4d 	bl	8001214 <lis331dlh_status_reg_get>

    if (reg.status_reg.zyxda) {
 800157a:	793b      	ldrb	r3, [r7, #4]
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f2      	beq.n	800156c <lis331dlh_read_data_polling+0x60>
      /* Read acceleration data */
      memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001586:	2206      	movs	r2, #6
 8001588:	2100      	movs	r1, #0
 800158a:	4828      	ldr	r0, [pc, #160]	; (800162c <lis331dlh_read_data_polling+0x120>)
 800158c:	f008 fb90 	bl	8009cb0 <memset>
      lis331dlh_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8001590:	f107 0308 	add.w	r3, r7, #8
 8001594:	4925      	ldr	r1, [pc, #148]	; (800162c <lis331dlh_read_data_polling+0x120>)
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fe4d 	bl	8001236 <lis331dlh_acceleration_raw_get>
      acceleration_mg[0] =
        lis331dlh_from_fs2_to_mg(data_raw_acceleration[0]);
 800159c:	4b23      	ldr	r3, [pc, #140]	; (800162c <lis331dlh_read_data_polling+0x120>)
 800159e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fda6 	bl	80010f4 <lis331dlh_from_fs2_to_mg>
 80015a8:	4603      	mov	r3, r0
      acceleration_mg[0] =
 80015aa:	4a21      	ldr	r2, [pc, #132]	; (8001630 <lis331dlh_read_data_polling+0x124>)
 80015ac:	6013      	str	r3, [r2, #0]
      acceleration_mg[1] =
        lis331dlh_from_fs2_to_mg(data_raw_acceleration[1]);
 80015ae:	4b1f      	ldr	r3, [pc, #124]	; (800162c <lis331dlh_read_data_polling+0x120>)
 80015b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fd9d 	bl	80010f4 <lis331dlh_from_fs2_to_mg>
 80015ba:	4603      	mov	r3, r0
      acceleration_mg[1] =
 80015bc:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <lis331dlh_read_data_polling+0x124>)
 80015be:	6053      	str	r3, [r2, #4]
      acceleration_mg[2] =
        lis331dlh_from_fs2_to_mg(data_raw_acceleration[2]);
 80015c0:	4b1a      	ldr	r3, [pc, #104]	; (800162c <lis331dlh_read_data_polling+0x120>)
 80015c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fd94 	bl	80010f4 <lis331dlh_from_fs2_to_mg>
 80015cc:	4603      	mov	r3, r0
      acceleration_mg[2] =
 80015ce:	4a18      	ldr	r2, [pc, #96]	; (8001630 <lis331dlh_read_data_polling+0x124>)
 80015d0:	6093      	str	r3, [r2, #8]
      sprintf((char *)tx_buffer,
              "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 80015d2:	4b17      	ldr	r3, [pc, #92]	; (8001630 <lis331dlh_read_data_polling+0x124>)
 80015d4:	681b      	ldr	r3, [r3, #0]
      sprintf((char *)tx_buffer,
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe ff26 	bl	8000428 <__aeabi_f2d>
 80015dc:	4680      	mov	r8, r0
 80015de:	4689      	mov	r9, r1
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <lis331dlh_read_data_polling+0x124>)
 80015e2:	685b      	ldr	r3, [r3, #4]
      sprintf((char *)tx_buffer,
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ff1f 	bl	8000428 <__aeabi_f2d>
 80015ea:	4604      	mov	r4, r0
 80015ec:	460d      	mov	r5, r1
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <lis331dlh_read_data_polling+0x124>)
 80015f0:	689b      	ldr	r3, [r3, #8]
      sprintf((char *)tx_buffer,
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7fe ff18 	bl	8000428 <__aeabi_f2d>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001600:	e9cd 4500 	strd	r4, r5, [sp]
 8001604:	4642      	mov	r2, r8
 8001606:	464b      	mov	r3, r9
 8001608:	490a      	ldr	r1, [pc, #40]	; (8001634 <lis331dlh_read_data_polling+0x128>)
 800160a:	480b      	ldr	r0, [pc, #44]	; (8001638 <lis331dlh_read_data_polling+0x12c>)
 800160c:	f009 f9ca 	bl	800a9a4 <siprintf>
      CDC_Transmit_FS(tx_buffer, sizeof(tx_buffer));
 8001610:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001614:	4808      	ldr	r0, [pc, #32]	; (8001638 <lis331dlh_read_data_polling+0x12c>)
 8001616:	f007 ff43 	bl	80094a0 <CDC_Transmit_FS>
  while (1) {
 800161a:	e7a7      	b.n	800156c <lis331dlh_read_data_polling+0x60>
 800161c:	0800163d 	.word	0x0800163d
 8001620:	0800167f 	.word	0x0800167f
 8001624:	2000036c 	.word	0x2000036c
 8001628:	200003d4 	.word	0x200003d4
 800162c:	200003c0 	.word	0x200003c0
 8001630:	200003c8 	.word	0x200003c8
 8001634:	0800e540 	.word	0x0800e540
 8001638:	200003d8 	.word	0x200003d8

0800163c <platform_write>:
  }
}

static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af04      	add	r7, sp, #16
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	607a      	str	r2, [r7, #4]
 8001646:	461a      	mov	r2, r3
 8001648:	460b      	mov	r3, r1
 800164a:	72fb      	strb	r3, [r7, #11]
 800164c:	4613      	mov	r3, r2
 800164e:	813b      	strh	r3, [r7, #8]
  /* Write multiple command */
  reg |= 0x80;
 8001650:	7afb      	ldrb	r3, [r7, #11]
 8001652:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001656:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Write(handle, LIS331DLH_I2C_ADD_L, reg,
 8001658:	7afb      	ldrb	r3, [r7, #11]
 800165a:	b29a      	uxth	r2, r3
 800165c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001660:	9302      	str	r3, [sp, #8]
 8001662:	893b      	ldrh	r3, [r7, #8]
 8001664:	9301      	str	r3, [sp, #4]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	2301      	movs	r3, #1
 800166c:	2131      	movs	r1, #49	; 0x31
 800166e:	68f8      	ldr	r0, [r7, #12]
 8001670:	f000 fe16 	bl	80022a0 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
  return 0;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b088      	sub	sp, #32
 8001682:	af04      	add	r7, sp, #16
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	607a      	str	r2, [r7, #4]
 8001688:	461a      	mov	r2, r3
 800168a:	460b      	mov	r3, r1
 800168c:	72fb      	strb	r3, [r7, #11]
 800168e:	4613      	mov	r3, r2
 8001690:	813b      	strh	r3, [r7, #8]
  /* Read multiple command */
  reg |= 0x80;
 8001692:	7afb      	ldrb	r3, [r7, #11]
 8001694:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001698:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Read(handle, LIS331DLH_I2C_ADD_L, reg,
 800169a:	7afb      	ldrb	r3, [r7, #11]
 800169c:	b29a      	uxth	r2, r3
 800169e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a2:	9302      	str	r3, [sp, #8]
 80016a4:	893b      	ldrh	r3, [r7, #8]
 80016a6:	9301      	str	r3, [sp, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	2301      	movs	r3, #1
 80016ae:	2131      	movs	r1, #49	; 0x31
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f000 feef 	bl	8002494 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c4:	b672      	cpsid	i
}
 80016c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <Error_Handler+0x8>
	...

080016cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <HAL_MspInit+0x5c>)
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	4a14      	ldr	r2, [pc, #80]	; (8001728 <HAL_MspInit+0x5c>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6193      	str	r3, [r2, #24]
 80016de:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_MspInit+0x5c>)
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <HAL_MspInit+0x5c>)
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <HAL_MspInit+0x5c>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f4:	61d3      	str	r3, [r2, #28]
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <HAL_MspInit+0x5c>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <HAL_MspInit+0x60>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	4a04      	ldr	r2, [pc, #16]	; (800172c <HAL_MspInit+0x60>)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr
 8001728:	40021000 	.word	0x40021000
 800172c:	40010000 	.word	0x40010000

08001730 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 0310 	add.w	r3, r7, #16
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a15      	ldr	r2, [pc, #84]	; (80017a0 <HAL_I2C_MspInit+0x70>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d123      	bne.n	8001798 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001750:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <HAL_I2C_MspInit+0x74>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	4a13      	ldr	r2, [pc, #76]	; (80017a4 <HAL_I2C_MspInit+0x74>)
 8001756:	f043 0308 	orr.w	r3, r3, #8
 800175a:	6193      	str	r3, [r2, #24]
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <HAL_I2C_MspInit+0x74>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f003 0308 	and.w	r3, r3, #8
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001768:	23c0      	movs	r3, #192	; 0xc0
 800176a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800176c:	2312      	movs	r3, #18
 800176e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001770:	2303      	movs	r3, #3
 8001772:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001774:	f107 0310 	add.w	r3, r7, #16
 8001778:	4619      	mov	r1, r3
 800177a:	480b      	ldr	r0, [pc, #44]	; (80017a8 <HAL_I2C_MspInit+0x78>)
 800177c:	f000 fac8 	bl	8001d10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <HAL_I2C_MspInit+0x74>)
 8001782:	69db      	ldr	r3, [r3, #28]
 8001784:	4a07      	ldr	r2, [pc, #28]	; (80017a4 <HAL_I2C_MspInit+0x74>)
 8001786:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800178a:	61d3      	str	r3, [r2, #28]
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <HAL_I2C_MspInit+0x74>)
 800178e:	69db      	ldr	r3, [r3, #28]
 8001790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001798:	bf00      	nop
 800179a:	3720      	adds	r7, #32
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40005400 	.word	0x40005400
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40010c00 	.word	0x40010c00

080017ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <NMI_Handler+0x4>

080017b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b6:	e7fe      	b.n	80017b6 <HardFault_Handler+0x4>

080017b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017bc:	e7fe      	b.n	80017bc <MemManage_Handler+0x4>

080017be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c2:	e7fe      	b.n	80017c2 <BusFault_Handler+0x4>

080017c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <UsageFault_Handler+0x4>

080017ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr

080017d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr

080017e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr

080017ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f2:	f000 f93f 	bl	8001a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001802:	f001 fd87 	bl	8003314 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20001490 	.word	0x20001490

08001810 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return 1;
 8001814:	2301      	movs	r3, #1
}
 8001816:	4618      	mov	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr

0800181e <_kill>:

int _kill(int pid, int sig)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001828:	f008 fa18 	bl	8009c5c <__errno>
 800182c:	4603      	mov	r3, r0
 800182e:	2216      	movs	r2, #22
 8001830:	601a      	str	r2, [r3, #0]
  return -1;
 8001832:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <_exit>:

void _exit (int status)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001846:	f04f 31ff 	mov.w	r1, #4294967295
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff ffe7 	bl	800181e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001850:	e7fe      	b.n	8001850 <_exit+0x12>

08001852 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b086      	sub	sp, #24
 8001856:	af00      	add	r7, sp, #0
 8001858:	60f8      	str	r0, [r7, #12]
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	e00a      	b.n	800187a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001864:	f3af 8000 	nop.w
 8001868:	4601      	mov	r1, r0
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	1c5a      	adds	r2, r3, #1
 800186e:	60ba      	str	r2, [r7, #8]
 8001870:	b2ca      	uxtb	r2, r1
 8001872:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	3301      	adds	r3, #1
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	429a      	cmp	r2, r3
 8001880:	dbf0      	blt.n	8001864 <_read+0x12>
  }

  return len;
 8001882:	687b      	ldr	r3, [r7, #4]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	e009      	b.n	80018b2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	1c5a      	adds	r2, r3, #1
 80018a2:	60ba      	str	r2, [r7, #8]
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	3301      	adds	r3, #1
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	dbf1      	blt.n	800189e <_write+0x12>
  }
  return len;
 80018ba:	687b      	ldr	r3, [r7, #4]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <_close>:

int _close(int file)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ea:	605a      	str	r2, [r3, #4]
  return 0;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <_isatty>:

int _isatty(int file)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001900:	2301      	movs	r3, #1
}
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr

0800190c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800192c:	4a14      	ldr	r2, [pc, #80]	; (8001980 <_sbrk+0x5c>)
 800192e:	4b15      	ldr	r3, [pc, #84]	; (8001984 <_sbrk+0x60>)
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001938:	4b13      	ldr	r3, [pc, #76]	; (8001988 <_sbrk+0x64>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d102      	bne.n	8001946 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <_sbrk+0x64>)
 8001942:	4a12      	ldr	r2, [pc, #72]	; (800198c <_sbrk+0x68>)
 8001944:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <_sbrk+0x64>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	429a      	cmp	r2, r3
 8001952:	d207      	bcs.n	8001964 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001954:	f008 f982 	bl	8009c5c <__errno>
 8001958:	4603      	mov	r3, r0
 800195a:	220c      	movs	r2, #12
 800195c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800195e:	f04f 33ff 	mov.w	r3, #4294967295
 8001962:	e009      	b.n	8001978 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <_sbrk+0x64>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800196a:	4b07      	ldr	r3, [pc, #28]	; (8001988 <_sbrk+0x64>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	4a05      	ldr	r2, [pc, #20]	; (8001988 <_sbrk+0x64>)
 8001974:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001976:	68fb      	ldr	r3, [r7, #12]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20005000 	.word	0x20005000
 8001984:	00000400 	.word	0x00000400
 8001988:	200007c0 	.word	0x200007c0
 800198c:	200019b0 	.word	0x200019b0

08001990 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800199c:	f7ff fff8 	bl	8001990 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a0:	480b      	ldr	r0, [pc, #44]	; (80019d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019a2:	490c      	ldr	r1, [pc, #48]	; (80019d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019a4:	4a0c      	ldr	r2, [pc, #48]	; (80019d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a8:	e002      	b.n	80019b0 <LoopCopyDataInit>

080019aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ae:	3304      	adds	r3, #4

080019b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b4:	d3f9      	bcc.n	80019aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019b6:	4a09      	ldr	r2, [pc, #36]	; (80019dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019b8:	4c09      	ldr	r4, [pc, #36]	; (80019e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019bc:	e001      	b.n	80019c2 <LoopFillZerobss>

080019be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c0:	3204      	adds	r2, #4

080019c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c4:	d3fb      	bcc.n	80019be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019c6:	f008 f94f 	bl	8009c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ca:	f7ff fcbf 	bl	800134c <main>
  bx lr
 80019ce:	4770      	bx	lr
  ldr r0, =_sdata
 80019d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d4:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 80019d8:	0800ea8c 	.word	0x0800ea8c
  ldr r2, =_sbss
 80019dc:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 80019e0:	200019b0 	.word	0x200019b0

080019e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019e4:	e7fe      	b.n	80019e4 <ADC1_2_IRQHandler>
	...

080019e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <HAL_Init+0x28>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a07      	ldr	r2, [pc, #28]	; (8001a10 <HAL_Init+0x28>)
 80019f2:	f043 0310 	orr.w	r3, r3, #16
 80019f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f8:	2003      	movs	r0, #3
 80019fa:	f000 f947 	bl	8001c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019fe:	200f      	movs	r0, #15
 8001a00:	f000 f808 	bl	8001a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a04:	f7ff fe62 	bl	80016cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40022000 	.word	0x40022000

08001a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_InitTick+0x54>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_InitTick+0x58>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	4619      	mov	r1, r3
 8001a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 f95f 	bl	8001cf6 <HAL_SYSTICK_Config>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e00e      	b.n	8001a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b0f      	cmp	r3, #15
 8001a46:	d80a      	bhi.n	8001a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a50:	f000 f927 	bl	8001ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a54:	4a06      	ldr	r2, [pc, #24]	; (8001a70 <HAL_InitTick+0x5c>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e000      	b.n	8001a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	20000008 	.word	0x20000008
 8001a70:	20000004 	.word	0x20000004

08001a74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <HAL_IncTick+0x1c>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <HAL_IncTick+0x20>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4413      	add	r3, r2
 8001a84:	4a03      	ldr	r2, [pc, #12]	; (8001a94 <HAL_IncTick+0x20>)
 8001a86:	6013      	str	r3, [r2, #0]
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr
 8001a90:	20000008 	.word	0x20000008
 8001a94:	200007c4 	.word	0x200007c4

08001a98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a9c:	4b02      	ldr	r3, [pc, #8]	; (8001aa8 <HAL_GetTick+0x10>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr
 8001aa8:	200007c4 	.word	0x200007c4

08001aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab4:	f7ff fff0 	bl	8001a98 <HAL_GetTick>
 8001ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac4:	d005      	beq.n	8001ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <HAL_Delay+0x44>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	461a      	mov	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ad2:	bf00      	nop
 8001ad4:	f7ff ffe0 	bl	8001a98 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d8f7      	bhi.n	8001ad4 <HAL_Delay+0x28>
  {
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000008 	.word	0x20000008

08001af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <__NVIC_SetPriorityGrouping+0x44>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b10:	4013      	ands	r3, r2
 8001b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b26:	4a04      	ldr	r2, [pc, #16]	; (8001b38 <__NVIC_SetPriorityGrouping+0x44>)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	60d3      	str	r3, [r2, #12]
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b40:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <__NVIC_GetPriorityGrouping+0x18>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	0a1b      	lsrs	r3, r3, #8
 8001b46:	f003 0307 	and.w	r3, r3, #7
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	db0b      	blt.n	8001b82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	f003 021f 	and.w	r2, r3, #31
 8001b70:	4906      	ldr	r1, [pc, #24]	; (8001b8c <__NVIC_EnableIRQ+0x34>)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	095b      	lsrs	r3, r3, #5
 8001b78:	2001      	movs	r0, #1
 8001b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr
 8001b8c:	e000e100 	.word	0xe000e100

08001b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	6039      	str	r1, [r7, #0]
 8001b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	db0a      	blt.n	8001bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	490c      	ldr	r1, [pc, #48]	; (8001bdc <__NVIC_SetPriority+0x4c>)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	0112      	lsls	r2, r2, #4
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb8:	e00a      	b.n	8001bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4908      	ldr	r1, [pc, #32]	; (8001be0 <__NVIC_SetPriority+0x50>)
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	3b04      	subs	r3, #4
 8001bc8:	0112      	lsls	r2, r2, #4
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	440b      	add	r3, r1
 8001bce:	761a      	strb	r2, [r3, #24]
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000e100 	.word	0xe000e100
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b089      	sub	sp, #36	; 0x24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f1c3 0307 	rsb	r3, r3, #7
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	bf28      	it	cs
 8001c02:	2304      	movcs	r3, #4
 8001c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	2b06      	cmp	r3, #6
 8001c0c:	d902      	bls.n	8001c14 <NVIC_EncodePriority+0x30>
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3b03      	subs	r3, #3
 8001c12:	e000      	b.n	8001c16 <NVIC_EncodePriority+0x32>
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c18:	f04f 32ff 	mov.w	r2, #4294967295
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43da      	mvns	r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	401a      	ands	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	fa01 f303 	lsl.w	r3, r1, r3
 8001c36:	43d9      	mvns	r1, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	4313      	orrs	r3, r2
         );
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3724      	adds	r7, #36	; 0x24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c58:	d301      	bcc.n	8001c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e00f      	b.n	8001c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <SysTick_Config+0x40>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c66:	210f      	movs	r1, #15
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6c:	f7ff ff90 	bl	8001b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <SysTick_Config+0x40>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c76:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <SysTick_Config+0x40>)
 8001c78:	2207      	movs	r2, #7
 8001c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	e000e010 	.word	0xe000e010

08001c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ff2d 	bl	8001af4 <__NVIC_SetPriorityGrouping>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b086      	sub	sp, #24
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
 8001cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb4:	f7ff ff42 	bl	8001b3c <__NVIC_GetPriorityGrouping>
 8001cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	6978      	ldr	r0, [r7, #20]
 8001cc0:	f7ff ff90 	bl	8001be4 <NVIC_EncodePriority>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cca:	4611      	mov	r1, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff5f 	bl	8001b90 <__NVIC_SetPriority>
}
 8001cd2:	bf00      	nop
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff35 	bl	8001b58 <__NVIC_EnableIRQ>
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff ffa2 	bl	8001c48 <SysTick_Config>
 8001d04:	4603      	mov	r3, r0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b08b      	sub	sp, #44	; 0x2c
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d22:	e169      	b.n	8001ff8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d24:	2201      	movs	r2, #1
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	69fa      	ldr	r2, [r7, #28]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	f040 8158 	bne.w	8001ff2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	4a9a      	ldr	r2, [pc, #616]	; (8001fb0 <HAL_GPIO_Init+0x2a0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d05e      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d4c:	4a98      	ldr	r2, [pc, #608]	; (8001fb0 <HAL_GPIO_Init+0x2a0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d875      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d52:	4a98      	ldr	r2, [pc, #608]	; (8001fb4 <HAL_GPIO_Init+0x2a4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d058      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d58:	4a96      	ldr	r2, [pc, #600]	; (8001fb4 <HAL_GPIO_Init+0x2a4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d86f      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d5e:	4a96      	ldr	r2, [pc, #600]	; (8001fb8 <HAL_GPIO_Init+0x2a8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d052      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d64:	4a94      	ldr	r2, [pc, #592]	; (8001fb8 <HAL_GPIO_Init+0x2a8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d869      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d6a:	4a94      	ldr	r2, [pc, #592]	; (8001fbc <HAL_GPIO_Init+0x2ac>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d04c      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d70:	4a92      	ldr	r2, [pc, #584]	; (8001fbc <HAL_GPIO_Init+0x2ac>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d863      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d76:	4a92      	ldr	r2, [pc, #584]	; (8001fc0 <HAL_GPIO_Init+0x2b0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d046      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d7c:	4a90      	ldr	r2, [pc, #576]	; (8001fc0 <HAL_GPIO_Init+0x2b0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d85d      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d82:	2b12      	cmp	r3, #18
 8001d84:	d82a      	bhi.n	8001ddc <HAL_GPIO_Init+0xcc>
 8001d86:	2b12      	cmp	r3, #18
 8001d88:	d859      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d8a:	a201      	add	r2, pc, #4	; (adr r2, 8001d90 <HAL_GPIO_Init+0x80>)
 8001d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d90:	08001e0b 	.word	0x08001e0b
 8001d94:	08001de5 	.word	0x08001de5
 8001d98:	08001df7 	.word	0x08001df7
 8001d9c:	08001e39 	.word	0x08001e39
 8001da0:	08001e3f 	.word	0x08001e3f
 8001da4:	08001e3f 	.word	0x08001e3f
 8001da8:	08001e3f 	.word	0x08001e3f
 8001dac:	08001e3f 	.word	0x08001e3f
 8001db0:	08001e3f 	.word	0x08001e3f
 8001db4:	08001e3f 	.word	0x08001e3f
 8001db8:	08001e3f 	.word	0x08001e3f
 8001dbc:	08001e3f 	.word	0x08001e3f
 8001dc0:	08001e3f 	.word	0x08001e3f
 8001dc4:	08001e3f 	.word	0x08001e3f
 8001dc8:	08001e3f 	.word	0x08001e3f
 8001dcc:	08001e3f 	.word	0x08001e3f
 8001dd0:	08001e3f 	.word	0x08001e3f
 8001dd4:	08001ded 	.word	0x08001ded
 8001dd8:	08001e01 	.word	0x08001e01
 8001ddc:	4a79      	ldr	r2, [pc, #484]	; (8001fc4 <HAL_GPIO_Init+0x2b4>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d013      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001de2:	e02c      	b.n	8001e3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	623b      	str	r3, [r7, #32]
          break;
 8001dea:	e029      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	3304      	adds	r3, #4
 8001df2:	623b      	str	r3, [r7, #32]
          break;
 8001df4:	e024      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	3308      	adds	r3, #8
 8001dfc:	623b      	str	r3, [r7, #32]
          break;
 8001dfe:	e01f      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	330c      	adds	r3, #12
 8001e06:	623b      	str	r3, [r7, #32]
          break;
 8001e08:	e01a      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d102      	bne.n	8001e18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e12:	2304      	movs	r3, #4
 8001e14:	623b      	str	r3, [r7, #32]
          break;
 8001e16:	e013      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d105      	bne.n	8001e2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e20:	2308      	movs	r3, #8
 8001e22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69fa      	ldr	r2, [r7, #28]
 8001e28:	611a      	str	r2, [r3, #16]
          break;
 8001e2a:	e009      	b.n	8001e40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e2c:	2308      	movs	r3, #8
 8001e2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	615a      	str	r2, [r3, #20]
          break;
 8001e36:	e003      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	623b      	str	r3, [r7, #32]
          break;
 8001e3c:	e000      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          break;
 8001e3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	2bff      	cmp	r3, #255	; 0xff
 8001e44:	d801      	bhi.n	8001e4a <HAL_GPIO_Init+0x13a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	e001      	b.n	8001e4e <HAL_GPIO_Init+0x13e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	2bff      	cmp	r3, #255	; 0xff
 8001e54:	d802      	bhi.n	8001e5c <HAL_GPIO_Init+0x14c>
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	e002      	b.n	8001e62 <HAL_GPIO_Init+0x152>
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	3b08      	subs	r3, #8
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	210f      	movs	r1, #15
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	401a      	ands	r2, r3
 8001e74:	6a39      	ldr	r1, [r7, #32]
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 80b1 	beq.w	8001ff2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e90:	4b4d      	ldr	r3, [pc, #308]	; (8001fc8 <HAL_GPIO_Init+0x2b8>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	4a4c      	ldr	r2, [pc, #304]	; (8001fc8 <HAL_GPIO_Init+0x2b8>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	6193      	str	r3, [r2, #24]
 8001e9c:	4b4a      	ldr	r3, [pc, #296]	; (8001fc8 <HAL_GPIO_Init+0x2b8>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ea8:	4a48      	ldr	r2, [pc, #288]	; (8001fcc <HAL_GPIO_Init+0x2bc>)
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	089b      	lsrs	r3, r3, #2
 8001eae:	3302      	adds	r3, #2
 8001eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	220f      	movs	r2, #15
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a40      	ldr	r2, [pc, #256]	; (8001fd0 <HAL_GPIO_Init+0x2c0>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d013      	beq.n	8001efc <HAL_GPIO_Init+0x1ec>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a3f      	ldr	r2, [pc, #252]	; (8001fd4 <HAL_GPIO_Init+0x2c4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d00d      	beq.n	8001ef8 <HAL_GPIO_Init+0x1e8>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a3e      	ldr	r2, [pc, #248]	; (8001fd8 <HAL_GPIO_Init+0x2c8>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d007      	beq.n	8001ef4 <HAL_GPIO_Init+0x1e4>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a3d      	ldr	r2, [pc, #244]	; (8001fdc <HAL_GPIO_Init+0x2cc>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d101      	bne.n	8001ef0 <HAL_GPIO_Init+0x1e0>
 8001eec:	2303      	movs	r3, #3
 8001eee:	e006      	b.n	8001efe <HAL_GPIO_Init+0x1ee>
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	e004      	b.n	8001efe <HAL_GPIO_Init+0x1ee>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e002      	b.n	8001efe <HAL_GPIO_Init+0x1ee>
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e000      	b.n	8001efe <HAL_GPIO_Init+0x1ee>
 8001efc:	2300      	movs	r3, #0
 8001efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f00:	f002 0203 	and.w	r2, r2, #3
 8001f04:	0092      	lsls	r2, r2, #2
 8001f06:	4093      	lsls	r3, r2
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f0e:	492f      	ldr	r1, [pc, #188]	; (8001fcc <HAL_GPIO_Init+0x2bc>)
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	089b      	lsrs	r3, r3, #2
 8001f14:	3302      	adds	r3, #2
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d006      	beq.n	8001f36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f28:	4b2d      	ldr	r3, [pc, #180]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	492c      	ldr	r1, [pc, #176]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	608b      	str	r3, [r1, #8]
 8001f34:	e006      	b.n	8001f44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f36:	4b2a      	ldr	r3, [pc, #168]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	4928      	ldr	r1, [pc, #160]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d006      	beq.n	8001f5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f50:	4b23      	ldr	r3, [pc, #140]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	4922      	ldr	r1, [pc, #136]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	60cb      	str	r3, [r1, #12]
 8001f5c:	e006      	b.n	8001f6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f5e:	4b20      	ldr	r3, [pc, #128]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	491e      	ldr	r1, [pc, #120]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d006      	beq.n	8001f86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f78:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	4918      	ldr	r1, [pc, #96]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	604b      	str	r3, [r1, #4]
 8001f84:	e006      	b.n	8001f94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f86:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	4914      	ldr	r1, [pc, #80]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d021      	beq.n	8001fe4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	490e      	ldr	r1, [pc, #56]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	600b      	str	r3, [r1, #0]
 8001fac:	e021      	b.n	8001ff2 <HAL_GPIO_Init+0x2e2>
 8001fae:	bf00      	nop
 8001fb0:	10320000 	.word	0x10320000
 8001fb4:	10310000 	.word	0x10310000
 8001fb8:	10220000 	.word	0x10220000
 8001fbc:	10210000 	.word	0x10210000
 8001fc0:	10120000 	.word	0x10120000
 8001fc4:	10110000 	.word	0x10110000
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40010000 	.word	0x40010000
 8001fd0:	40010800 	.word	0x40010800
 8001fd4:	40010c00 	.word	0x40010c00
 8001fd8:	40011000 	.word	0x40011000
 8001fdc:	40011400 	.word	0x40011400
 8001fe0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_GPIO_Init+0x304>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	4909      	ldr	r1, [pc, #36]	; (8002014 <HAL_GPIO_Init+0x304>)
 8001fee:	4013      	ands	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	f47f ae8e 	bne.w	8001d24 <HAL_GPIO_Init+0x14>
  }
}
 8002008:	bf00      	nop
 800200a:	bf00      	nop
 800200c:	372c      	adds	r7, #44	; 0x2c
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr
 8002014:	40010400 	.word	0x40010400

08002018 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e12b      	b.n	8002282 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d106      	bne.n	8002044 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff fb76 	bl	8001730 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2224      	movs	r2, #36	; 0x24
 8002048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0201 	bic.w	r2, r2, #1
 800205a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800206a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800207a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800207c:	f003 f95e 	bl	800533c <HAL_RCC_GetPCLK1Freq>
 8002080:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	4a81      	ldr	r2, [pc, #516]	; (800228c <HAL_I2C_Init+0x274>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d807      	bhi.n	800209c <HAL_I2C_Init+0x84>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4a80      	ldr	r2, [pc, #512]	; (8002290 <HAL_I2C_Init+0x278>)
 8002090:	4293      	cmp	r3, r2
 8002092:	bf94      	ite	ls
 8002094:	2301      	movls	r3, #1
 8002096:	2300      	movhi	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	e006      	b.n	80020aa <HAL_I2C_Init+0x92>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4a7d      	ldr	r2, [pc, #500]	; (8002294 <HAL_I2C_Init+0x27c>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	bf94      	ite	ls
 80020a4:	2301      	movls	r3, #1
 80020a6:	2300      	movhi	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e0e7      	b.n	8002282 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4a78      	ldr	r2, [pc, #480]	; (8002298 <HAL_I2C_Init+0x280>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	0c9b      	lsrs	r3, r3, #18
 80020bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	4a6a      	ldr	r2, [pc, #424]	; (800228c <HAL_I2C_Init+0x274>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d802      	bhi.n	80020ec <HAL_I2C_Init+0xd4>
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	3301      	adds	r3, #1
 80020ea:	e009      	b.n	8002100 <HAL_I2C_Init+0xe8>
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020f2:	fb02 f303 	mul.w	r3, r2, r3
 80020f6:	4a69      	ldr	r2, [pc, #420]	; (800229c <HAL_I2C_Init+0x284>)
 80020f8:	fba2 2303 	umull	r2, r3, r2, r3
 80020fc:	099b      	lsrs	r3, r3, #6
 80020fe:	3301      	adds	r3, #1
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	430b      	orrs	r3, r1
 8002106:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002112:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	495c      	ldr	r1, [pc, #368]	; (800228c <HAL_I2C_Init+0x274>)
 800211c:	428b      	cmp	r3, r1
 800211e:	d819      	bhi.n	8002154 <HAL_I2C_Init+0x13c>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	1e59      	subs	r1, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	fbb1 f3f3 	udiv	r3, r1, r3
 800212e:	1c59      	adds	r1, r3, #1
 8002130:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002134:	400b      	ands	r3, r1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00a      	beq.n	8002150 <HAL_I2C_Init+0x138>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	1e59      	subs	r1, r3, #1
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	fbb1 f3f3 	udiv	r3, r1, r3
 8002148:	3301      	adds	r3, #1
 800214a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800214e:	e051      	b.n	80021f4 <HAL_I2C_Init+0x1dc>
 8002150:	2304      	movs	r3, #4
 8002152:	e04f      	b.n	80021f4 <HAL_I2C_Init+0x1dc>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d111      	bne.n	8002180 <HAL_I2C_Init+0x168>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	1e58      	subs	r0, r3, #1
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6859      	ldr	r1, [r3, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	440b      	add	r3, r1
 800216a:	fbb0 f3f3 	udiv	r3, r0, r3
 800216e:	3301      	adds	r3, #1
 8002170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002174:	2b00      	cmp	r3, #0
 8002176:	bf0c      	ite	eq
 8002178:	2301      	moveq	r3, #1
 800217a:	2300      	movne	r3, #0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	e012      	b.n	80021a6 <HAL_I2C_Init+0x18e>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	1e58      	subs	r0, r3, #1
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6859      	ldr	r1, [r3, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	0099      	lsls	r1, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	fbb0 f3f3 	udiv	r3, r0, r3
 8002196:	3301      	adds	r3, #1
 8002198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800219c:	2b00      	cmp	r3, #0
 800219e:	bf0c      	ite	eq
 80021a0:	2301      	moveq	r3, #1
 80021a2:	2300      	movne	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_I2C_Init+0x196>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e022      	b.n	80021f4 <HAL_I2C_Init+0x1dc>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10e      	bne.n	80021d4 <HAL_I2C_Init+0x1bc>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	1e58      	subs	r0, r3, #1
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6859      	ldr	r1, [r3, #4]
 80021be:	460b      	mov	r3, r1
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	440b      	add	r3, r1
 80021c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80021c8:	3301      	adds	r3, #1
 80021ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021d2:	e00f      	b.n	80021f4 <HAL_I2C_Init+0x1dc>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	1e58      	subs	r0, r3, #1
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6859      	ldr	r1, [r3, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	0099      	lsls	r1, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ea:	3301      	adds	r3, #1
 80021ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	6809      	ldr	r1, [r1, #0]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69da      	ldr	r2, [r3, #28]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002222:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6911      	ldr	r1, [r2, #16]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68d2      	ldr	r2, [r2, #12]
 800222e:	4311      	orrs	r1, r2
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	430b      	orrs	r3, r1
 8002236:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695a      	ldr	r2, [r3, #20]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2220      	movs	r2, #32
 800226e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	000186a0 	.word	0x000186a0
 8002290:	001e847f 	.word	0x001e847f
 8002294:	003d08ff 	.word	0x003d08ff
 8002298:	431bde83 	.word	0x431bde83
 800229c:	10624dd3 	.word	0x10624dd3

080022a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af02      	add	r7, sp, #8
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	4608      	mov	r0, r1
 80022aa:	4611      	mov	r1, r2
 80022ac:	461a      	mov	r2, r3
 80022ae:	4603      	mov	r3, r0
 80022b0:	817b      	strh	r3, [r7, #10]
 80022b2:	460b      	mov	r3, r1
 80022b4:	813b      	strh	r3, [r7, #8]
 80022b6:	4613      	mov	r3, r2
 80022b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022ba:	f7ff fbed 	bl	8001a98 <HAL_GetTick>
 80022be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b20      	cmp	r3, #32
 80022ca:	f040 80d9 	bne.w	8002480 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	2319      	movs	r3, #25
 80022d4:	2201      	movs	r2, #1
 80022d6:	496d      	ldr	r1, [pc, #436]	; (800248c <HAL_I2C_Mem_Write+0x1ec>)
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 fcc1 	bl	8002c60 <I2C_WaitOnFlagUntilTimeout>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80022e4:	2302      	movs	r3, #2
 80022e6:	e0cc      	b.n	8002482 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d101      	bne.n	80022f6 <HAL_I2C_Mem_Write+0x56>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e0c5      	b.n	8002482 <HAL_I2C_Mem_Write+0x1e2>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b01      	cmp	r3, #1
 800230a:	d007      	beq.n	800231c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 0201 	orr.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800232a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2221      	movs	r2, #33	; 0x21
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2240      	movs	r2, #64	; 0x40
 8002338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6a3a      	ldr	r2, [r7, #32]
 8002346:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800234c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4a4d      	ldr	r2, [pc, #308]	; (8002490 <HAL_I2C_Mem_Write+0x1f0>)
 800235c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800235e:	88f8      	ldrh	r0, [r7, #6]
 8002360:	893a      	ldrh	r2, [r7, #8]
 8002362:	8979      	ldrh	r1, [r7, #10]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	4603      	mov	r3, r0
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 faf8 	bl	8002964 <I2C_RequestMemoryWrite>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d052      	beq.n	8002420 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e081      	b.n	8002482 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 fd86 	bl	8002e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00d      	beq.n	80023aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	2b04      	cmp	r3, #4
 8002394:	d107      	bne.n	80023a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e06b      	b.n	8002482 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	781a      	ldrb	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d11b      	bne.n	8002420 <HAL_I2C_Mem_Write+0x180>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d017      	beq.n	8002420 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	781a      	ldrb	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	1c5a      	adds	r2, r3, #1
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240a:	3b01      	subs	r3, #1
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002416:	b29b      	uxth	r3, r3
 8002418:	3b01      	subs	r3, #1
 800241a:	b29a      	uxth	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1aa      	bne.n	800237e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 fd79 	bl	8002f24 <I2C_WaitOnBTFFlagUntilTimeout>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00d      	beq.n	8002454 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	2b04      	cmp	r3, #4
 800243e:	d107      	bne.n	8002450 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800244e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e016      	b.n	8002482 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002462:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2220      	movs	r2, #32
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800247c:	2300      	movs	r3, #0
 800247e:	e000      	b.n	8002482 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002480:	2302      	movs	r3, #2
  }
}
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	00100002 	.word	0x00100002
 8002490:	ffff0000 	.word	0xffff0000

08002494 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08c      	sub	sp, #48	; 0x30
 8002498:	af02      	add	r7, sp, #8
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	4608      	mov	r0, r1
 800249e:	4611      	mov	r1, r2
 80024a0:	461a      	mov	r2, r3
 80024a2:	4603      	mov	r3, r0
 80024a4:	817b      	strh	r3, [r7, #10]
 80024a6:	460b      	mov	r3, r1
 80024a8:	813b      	strh	r3, [r7, #8]
 80024aa:	4613      	mov	r3, r2
 80024ac:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024b2:	f7ff faf1 	bl	8001a98 <HAL_GetTick>
 80024b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b20      	cmp	r3, #32
 80024c2:	f040 8244 	bne.w	800294e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	2319      	movs	r3, #25
 80024cc:	2201      	movs	r2, #1
 80024ce:	4982      	ldr	r1, [pc, #520]	; (80026d8 <HAL_I2C_Mem_Read+0x244>)
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 fbc5 	bl	8002c60 <I2C_WaitOnFlagUntilTimeout>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80024dc:	2302      	movs	r3, #2
 80024de:	e237      	b.n	8002950 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d101      	bne.n	80024ee <HAL_I2C_Mem_Read+0x5a>
 80024ea:	2302      	movs	r3, #2
 80024ec:	e230      	b.n	8002950 <HAL_I2C_Mem_Read+0x4bc>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b01      	cmp	r3, #1
 8002502:	d007      	beq.n	8002514 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0201 	orr.w	r2, r2, #1
 8002512:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002522:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2222      	movs	r2, #34	; 0x22
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2240      	movs	r2, #64	; 0x40
 8002530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800253e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002544:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254a:	b29a      	uxth	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4a62      	ldr	r2, [pc, #392]	; (80026dc <HAL_I2C_Mem_Read+0x248>)
 8002554:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002556:	88f8      	ldrh	r0, [r7, #6]
 8002558:	893a      	ldrh	r2, [r7, #8]
 800255a:	8979      	ldrh	r1, [r7, #10]
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	9301      	str	r3, [sp, #4]
 8002560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	4603      	mov	r3, r0
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 fa92 	bl	8002a90 <I2C_RequestMemoryRead>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e1ec      	b.n	8002950 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257a:	2b00      	cmp	r3, #0
 800257c:	d113      	bne.n	80025a6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	61fb      	str	r3, [r7, #28]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	61fb      	str	r3, [r7, #28]
 8002592:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	e1c0      	b.n	8002928 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d11e      	bne.n	80025ec <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80025be:	b672      	cpsid	i
}
 80025c0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025c2:	2300      	movs	r3, #0
 80025c4:	61bb      	str	r3, [r7, #24]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	61bb      	str	r3, [r7, #24]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80025e8:	b662      	cpsie	i
}
 80025ea:	e035      	b.n	8002658 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d11e      	bne.n	8002632 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002602:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002604:	b672      	cpsid	i
}
 8002606:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800262c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800262e:	b662      	cpsie	i
}
 8002630:	e012      	b.n	8002658 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002640:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002642:	2300      	movs	r3, #0
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002658:	e166      	b.n	8002928 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265e:	2b03      	cmp	r3, #3
 8002660:	f200 811f 	bhi.w	80028a2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002668:	2b01      	cmp	r3, #1
 800266a:	d123      	bne.n	80026b4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800266c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800266e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 fc9f 	bl	8002fb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e167      	b.n	8002950 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	691a      	ldr	r2, [r3, #16]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026b2:	e139      	b.n	8002928 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d152      	bne.n	8002762 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c2:	2200      	movs	r2, #0
 80026c4:	4906      	ldr	r1, [pc, #24]	; (80026e0 <HAL_I2C_Mem_Read+0x24c>)
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 faca 	bl	8002c60 <I2C_WaitOnFlagUntilTimeout>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d008      	beq.n	80026e4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e13c      	b.n	8002950 <HAL_I2C_Mem_Read+0x4bc>
 80026d6:	bf00      	nop
 80026d8:	00100002 	.word	0x00100002
 80026dc:	ffff0000 	.word	0xffff0000
 80026e0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80026e4:	b672      	cpsid	i
}
 80026e6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691a      	ldr	r2, [r3, #16]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002720:	b29b      	uxth	r3, r3
 8002722:	3b01      	subs	r3, #1
 8002724:	b29a      	uxth	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800272a:	b662      	cpsie	i
}
 800272c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	691a      	ldr	r2, [r3, #16]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274a:	3b01      	subs	r3, #1
 800274c:	b29a      	uxth	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002756:	b29b      	uxth	r3, r3
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002760:	e0e2      	b.n	8002928 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002768:	2200      	movs	r2, #0
 800276a:	497b      	ldr	r1, [pc, #492]	; (8002958 <HAL_I2C_Mem_Read+0x4c4>)
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 fa77 	bl	8002c60 <I2C_WaitOnFlagUntilTimeout>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0e9      	b.n	8002950 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800278a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800278c:	b672      	cpsid	i
}
 800278e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691a      	ldr	r2, [r3, #16]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	1c5a      	adds	r2, r3, #1
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ac:	3b01      	subs	r3, #1
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80027c2:	4b66      	ldr	r3, [pc, #408]	; (800295c <HAL_I2C_Mem_Read+0x4c8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	08db      	lsrs	r3, r3, #3
 80027c8:	4a65      	ldr	r2, [pc, #404]	; (8002960 <HAL_I2C_Mem_Read+0x4cc>)
 80027ca:	fba2 2303 	umull	r2, r3, r2, r3
 80027ce:	0a1a      	lsrs	r2, r3, #8
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	00da      	lsls	r2, r3, #3
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	3b01      	subs	r3, #1
 80027e0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d118      	bne.n	800281a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2220      	movs	r2, #32
 80027f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	f043 0220 	orr.w	r2, r3, #32
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800280a:	b662      	cpsie	i
}
 800280c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e09a      	b.n	8002950 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b04      	cmp	r3, #4
 8002826:	d1d9      	bne.n	80027dc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002836:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691a      	ldr	r2, [r3, #16]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002854:	3b01      	subs	r3, #1
 8002856:	b29a      	uxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002860:	b29b      	uxth	r3, r3
 8002862:	3b01      	subs	r3, #1
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800286a:	b662      	cpsie	i
}
 800286c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	691a      	ldr	r2, [r3, #16]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288a:	3b01      	subs	r3, #1
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002896:	b29b      	uxth	r3, r3
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028a0:	e042      	b.n	8002928 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 fb84 	bl	8002fb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e04c      	b.n	8002950 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	691a      	ldr	r2, [r3, #16]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d118      	bne.n	8002928 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002912:	3b01      	subs	r3, #1
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291e:	b29b      	uxth	r3, r3
 8002920:	3b01      	subs	r3, #1
 8002922:	b29a      	uxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292c:	2b00      	cmp	r3, #0
 800292e:	f47f ae94 	bne.w	800265a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2220      	movs	r2, #32
 8002936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800294a:	2300      	movs	r3, #0
 800294c:	e000      	b.n	8002950 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800294e:	2302      	movs	r3, #2
  }
}
 8002950:	4618      	mov	r0, r3
 8002952:	3728      	adds	r7, #40	; 0x28
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	00010004 	.word	0x00010004
 800295c:	20000000 	.word	0x20000000
 8002960:	14f8b589 	.word	0x14f8b589

08002964 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b088      	sub	sp, #32
 8002968:	af02      	add	r7, sp, #8
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	4608      	mov	r0, r1
 800296e:	4611      	mov	r1, r2
 8002970:	461a      	mov	r2, r3
 8002972:	4603      	mov	r3, r0
 8002974:	817b      	strh	r3, [r7, #10]
 8002976:	460b      	mov	r3, r1
 8002978:	813b      	strh	r3, [r7, #8]
 800297a:	4613      	mov	r3, r2
 800297c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800298c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	2200      	movs	r2, #0
 8002996:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 f960 	bl	8002c60 <I2C_WaitOnFlagUntilTimeout>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00d      	beq.n	80029c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029b4:	d103      	bne.n	80029be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e05f      	b.n	8002a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029c2:	897b      	ldrh	r3, [r7, #10]
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	6a3a      	ldr	r2, [r7, #32]
 80029d6:	492d      	ldr	r1, [pc, #180]	; (8002a8c <I2C_RequestMemoryWrite+0x128>)
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 f9bb 	bl	8002d54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e04c      	b.n	8002a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a00:	6a39      	ldr	r1, [r7, #32]
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 fa46 	bl	8002e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00d      	beq.n	8002a2a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d107      	bne.n	8002a26 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e02b      	b.n	8002a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a2a:	88fb      	ldrh	r3, [r7, #6]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d105      	bne.n	8002a3c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a30:	893b      	ldrh	r3, [r7, #8]
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	611a      	str	r2, [r3, #16]
 8002a3a:	e021      	b.n	8002a80 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a3c:	893b      	ldrh	r3, [r7, #8]
 8002a3e:	0a1b      	lsrs	r3, r3, #8
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4c:	6a39      	ldr	r1, [r7, #32]
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 fa20 	bl	8002e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00d      	beq.n	8002a76 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d107      	bne.n	8002a72 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e005      	b.n	8002a82 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a76:	893b      	ldrh	r3, [r7, #8]
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	00010002 	.word	0x00010002

08002a90 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af02      	add	r7, sp, #8
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	4608      	mov	r0, r1
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	817b      	strh	r3, [r7, #10]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	813b      	strh	r3, [r7, #8]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ab8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ac8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 f8c2 	bl	8002c60 <I2C_WaitOnFlagUntilTimeout>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00d      	beq.n	8002afe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002af0:	d103      	bne.n	8002afa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002af8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e0aa      	b.n	8002c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002afe:	897b      	ldrh	r3, [r7, #10]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	461a      	mov	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	6a3a      	ldr	r2, [r7, #32]
 8002b12:	4952      	ldr	r1, [pc, #328]	; (8002c5c <I2C_RequestMemoryRead+0x1cc>)
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 f91d 	bl	8002d54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e097      	b.n	8002c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b3c:	6a39      	ldr	r1, [r7, #32]
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 f9a8 	bl	8002e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00d      	beq.n	8002b66 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d107      	bne.n	8002b62 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e076      	b.n	8002c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b66:	88fb      	ldrh	r3, [r7, #6]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d105      	bne.n	8002b78 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b6c:	893b      	ldrh	r3, [r7, #8]
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	611a      	str	r2, [r3, #16]
 8002b76:	e021      	b.n	8002bbc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b78:	893b      	ldrh	r3, [r7, #8]
 8002b7a:	0a1b      	lsrs	r3, r3, #8
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b88:	6a39      	ldr	r1, [r7, #32]
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f982 	bl	8002e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00d      	beq.n	8002bb2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d107      	bne.n	8002bae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e050      	b.n	8002c54 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bb2:	893b      	ldrh	r3, [r7, #8]
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bbe:	6a39      	ldr	r1, [r7, #32]
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 f967 	bl	8002e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00d      	beq.n	8002be8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	2b04      	cmp	r3, #4
 8002bd2:	d107      	bne.n	8002be4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e035      	b.n	8002c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bf6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 f82b 	bl	8002c60 <I2C_WaitOnFlagUntilTimeout>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00d      	beq.n	8002c2c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c1e:	d103      	bne.n	8002c28 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e013      	b.n	8002c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c2c:	897b      	ldrh	r3, [r7, #10]
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	6a3a      	ldr	r2, [r7, #32]
 8002c40:	4906      	ldr	r1, [pc, #24]	; (8002c5c <I2C_RequestMemoryRead+0x1cc>)
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 f886 	bl	8002d54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	00010002 	.word	0x00010002

08002c60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	603b      	str	r3, [r7, #0]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c70:	e048      	b.n	8002d04 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c78:	d044      	beq.n	8002d04 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c7a:	f7fe ff0d 	bl	8001a98 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d302      	bcc.n	8002c90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d139      	bne.n	8002d04 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	0c1b      	lsrs	r3, r3, #16
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d10d      	bne.n	8002cb6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	43da      	mvns	r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	bf0c      	ite	eq
 8002cac:	2301      	moveq	r3, #1
 8002cae:	2300      	movne	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	e00c      	b.n	8002cd0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	43da      	mvns	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	bf0c      	ite	eq
 8002cc8:	2301      	moveq	r3, #1
 8002cca:	2300      	movne	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	461a      	mov	r2, r3
 8002cd0:	79fb      	ldrb	r3, [r7, #7]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d116      	bne.n	8002d04 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	f043 0220 	orr.w	r2, r3, #32
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e023      	b.n	8002d4c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	0c1b      	lsrs	r3, r3, #16
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d10d      	bne.n	8002d2a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	43da      	mvns	r2, r3
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	bf0c      	ite	eq
 8002d20:	2301      	moveq	r3, #1
 8002d22:	2300      	movne	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	461a      	mov	r2, r3
 8002d28:	e00c      	b.n	8002d44 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	43da      	mvns	r2, r3
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	4013      	ands	r3, r2
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	bf0c      	ite	eq
 8002d3c:	2301      	moveq	r3, #1
 8002d3e:	2300      	movne	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	461a      	mov	r2, r3
 8002d44:	79fb      	ldrb	r3, [r7, #7]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d093      	beq.n	8002c72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
 8002d60:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d62:	e071      	b.n	8002e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d72:	d123      	bne.n	8002dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d82:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da8:	f043 0204 	orr.w	r2, r3, #4
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e067      	b.n	8002e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc2:	d041      	beq.n	8002e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc4:	f7fe fe68 	bl	8001a98 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d302      	bcc.n	8002dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d136      	bne.n	8002e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	0c1b      	lsrs	r3, r3, #16
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d10c      	bne.n	8002dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	43da      	mvns	r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4013      	ands	r3, r2
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	bf14      	ite	ne
 8002df6:	2301      	movne	r3, #1
 8002df8:	2300      	moveq	r3, #0
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	e00b      	b.n	8002e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	43da      	mvns	r2, r3
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	bf14      	ite	ne
 8002e10:	2301      	movne	r3, #1
 8002e12:	2300      	moveq	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d016      	beq.n	8002e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	f043 0220 	orr.w	r2, r3, #32
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e021      	b.n	8002e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	0c1b      	lsrs	r3, r3, #16
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d10c      	bne.n	8002e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	43da      	mvns	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	bf14      	ite	ne
 8002e64:	2301      	movne	r3, #1
 8002e66:	2300      	moveq	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	e00b      	b.n	8002e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	43da      	mvns	r2, r3
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	4013      	ands	r3, r2
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	bf14      	ite	ne
 8002e7e:	2301      	movne	r3, #1
 8002e80:	2300      	moveq	r3, #0
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f47f af6d 	bne.w	8002d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ea0:	e034      	b.n	8002f0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 f8e3 	bl	800306e <I2C_IsAcknowledgeFailed>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e034      	b.n	8002f1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb8:	d028      	beq.n	8002f0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eba:	f7fe fded 	bl	8001a98 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	68ba      	ldr	r2, [r7, #8]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d302      	bcc.n	8002ed0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d11d      	bne.n	8002f0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eda:	2b80      	cmp	r3, #128	; 0x80
 8002edc:	d016      	beq.n	8002f0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	f043 0220 	orr.w	r2, r3, #32
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e007      	b.n	8002f1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f16:	2b80      	cmp	r3, #128	; 0x80
 8002f18:	d1c3      	bne.n	8002ea2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f30:	e034      	b.n	8002f9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f89b 	bl	800306e <I2C_IsAcknowledgeFailed>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e034      	b.n	8002fac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f48:	d028      	beq.n	8002f9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f4a:	f7fe fda5 	bl	8001a98 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d302      	bcc.n	8002f60 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d11d      	bne.n	8002f9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d016      	beq.n	8002f9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2220      	movs	r2, #32
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	f043 0220 	orr.w	r2, r3, #32
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e007      	b.n	8002fac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d1c3      	bne.n	8002f32 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fc0:	e049      	b.n	8003056 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	f003 0310 	and.w	r3, r3, #16
 8002fcc:	2b10      	cmp	r3, #16
 8002fce:	d119      	bne.n	8003004 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f06f 0210 	mvn.w	r2, #16
 8002fd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e030      	b.n	8003066 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003004:	f7fe fd48 	bl	8001a98 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	429a      	cmp	r2, r3
 8003012:	d302      	bcc.n	800301a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d11d      	bne.n	8003056 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003024:	2b40      	cmp	r3, #64	; 0x40
 8003026:	d016      	beq.n	8003056 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2220      	movs	r2, #32
 8003032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	f043 0220 	orr.w	r2, r3, #32
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e007      	b.n	8003066 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003060:	2b40      	cmp	r3, #64	; 0x40
 8003062:	d1ae      	bne.n	8002fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003084:	d11b      	bne.n	80030be <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800308e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2220      	movs	r2, #32
 800309a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f043 0204 	orr.w	r2, r3, #4
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr

080030ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030cc:	b08b      	sub	sp, #44	; 0x2c
 80030ce:	af06      	add	r7, sp, #24
 80030d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e0f1      	b.n	80032c0 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d106      	bne.n	80030f6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f006 fb09 	bl	8009708 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2203      	movs	r2, #3
 80030fa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f002 fa28 	bl	8005558 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	603b      	str	r3, [r7, #0]
 800310e:	687e      	ldr	r6, [r7, #4]
 8003110:	466d      	mov	r5, sp
 8003112:	f106 0410 	add.w	r4, r6, #16
 8003116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003118:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	602b      	str	r3, [r5, #0]
 800311e:	1d33      	adds	r3, r6, #4
 8003120:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003122:	6838      	ldr	r0, [r7, #0]
 8003124:	f002 f9f2 	bl	800550c <USB_CoreInit>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d005      	beq.n	800313a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2202      	movs	r2, #2
 8003132:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e0c2      	b.n	80032c0 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2100      	movs	r1, #0
 8003140:	4618      	mov	r0, r3
 8003142:	f002 fa23 	bl	800558c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003146:	2300      	movs	r3, #0
 8003148:	73fb      	strb	r3, [r7, #15]
 800314a:	e040      	b.n	80031ce <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800314c:	7bfb      	ldrb	r3, [r7, #15]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	1c5a      	adds	r2, r3, #1
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	440b      	add	r3, r1
 800315c:	3301      	adds	r3, #1
 800315e:	2201      	movs	r2, #1
 8003160:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003162:	7bfb      	ldrb	r3, [r7, #15]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	1c5a      	adds	r2, r3, #1
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	440b      	add	r3, r1
 8003172:	7bfa      	ldrb	r2, [r7, #15]
 8003174:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	440b      	add	r3, r1
 8003186:	3303      	adds	r3, #3
 8003188:	2200      	movs	r2, #0
 800318a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	440b      	add	r3, r1
 800319a:	3338      	adds	r3, #56	; 0x38
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031a0:	7bfa      	ldrb	r2, [r7, #15]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	440b      	add	r3, r1
 80031ae:	333c      	adds	r3, #60	; 0x3c
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031b4:	7bfa      	ldrb	r2, [r7, #15]
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	440b      	add	r3, r1
 80031c2:	3340      	adds	r3, #64	; 0x40
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	3301      	adds	r3, #1
 80031cc:	73fb      	strb	r3, [r7, #15]
 80031ce:	7bfa      	ldrb	r2, [r7, #15]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d3b9      	bcc.n	800314c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031d8:	2300      	movs	r3, #0
 80031da:	73fb      	strb	r3, [r7, #15]
 80031dc:	e044      	b.n	8003268 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031de:	7bfa      	ldrb	r2, [r7, #15]
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	440b      	add	r3, r1
 80031ec:	f203 1369 	addw	r3, r3, #361	; 0x169
 80031f0:	2200      	movs	r2, #0
 80031f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031f4:	7bfa      	ldrb	r2, [r7, #15]
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	4613      	mov	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	440b      	add	r3, r1
 8003202:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003206:	7bfa      	ldrb	r2, [r7, #15]
 8003208:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800320a:	7bfa      	ldrb	r2, [r7, #15]
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	440b      	add	r3, r1
 8003218:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800321c:	2200      	movs	r2, #0
 800321e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003220:	7bfa      	ldrb	r2, [r7, #15]
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	440b      	add	r3, r1
 800322e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003236:	7bfa      	ldrb	r2, [r7, #15]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	440b      	add	r3, r1
 8003244:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800324c:	7bfa      	ldrb	r2, [r7, #15]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	440b      	add	r3, r1
 800325a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003262:	7bfb      	ldrb	r3, [r7, #15]
 8003264:	3301      	adds	r3, #1
 8003266:	73fb      	strb	r3, [r7, #15]
 8003268:	7bfa      	ldrb	r2, [r7, #15]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	429a      	cmp	r2, r3
 8003270:	d3b5      	bcc.n	80031de <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	603b      	str	r3, [r7, #0]
 8003278:	687e      	ldr	r6, [r7, #4]
 800327a:	466d      	mov	r5, sp
 800327c:	f106 0410 	add.w	r4, r6, #16
 8003280:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003282:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003284:	6823      	ldr	r3, [r4, #0]
 8003286:	602b      	str	r3, [r5, #0]
 8003288:	1d33      	adds	r3, r6, #4
 800328a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800328c:	6838      	ldr	r0, [r7, #0]
 800328e:	f002 f989 	bl	80055a4 <USB_DevInit>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e00d      	b.n	80032c0 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f004 fc0a 	bl	8007ad2 <USB_DevDisconnect>

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032c8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d101      	bne.n	80032de <HAL_PCD_Start+0x16>
 80032da:	2302      	movs	r3, #2
 80032dc:	e016      	b.n	800330c <HAL_PCD_Start+0x44>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f002 f91e 	bl	800552c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80032f0:	2101      	movs	r1, #1
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f006 fc7b 	bl	8009bee <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f004 fbde 	bl	8007abe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b088      	sub	sp, #32
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f004 fbe0 	bl	8007ae6 <USB_ReadInterrupts>
 8003326:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 fb1b 	bl	800396e <PCD_EP_ISR_Handler>

    return;
 8003338:	e119      	b.n	800356e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003340:	2b00      	cmp	r3, #0
 8003342:	d013      	beq.n	800336c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800334c:	b29a      	uxth	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003356:	b292      	uxth	r2, r2
 8003358:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f006 fa4e 	bl	80097fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003362:	2100      	movs	r1, #0
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 f905 	bl	8003574 <HAL_PCD_SetAddress>

    return;
 800336a:	e100      	b.n	800356e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00c      	beq.n	8003390 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800337e:	b29a      	uxth	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003388:	b292      	uxth	r2, r2
 800338a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800338e:	e0ee      	b.n	800356e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00c      	beq.n	80033b4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033ac:	b292      	uxth	r2, r2
 80033ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80033b2:	e0dc      	b.n	800356e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d027      	beq.n	800340e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0204 	bic.w	r2, r2, #4
 80033d0:	b292      	uxth	r2, r2
 80033d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80033de:	b29a      	uxth	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0208 	bic.w	r2, r2, #8
 80033e8:	b292      	uxth	r2, r2
 80033ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f006 fa3e 	bl	8009870 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003406:	b292      	uxth	r2, r2
 8003408:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800340c:	e0af      	b.n	800356e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 8083 	beq.w	8003520 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800341a:	2300      	movs	r3, #0
 800341c:	77fb      	strb	r3, [r7, #31]
 800341e:	e010      	b.n	8003442 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	461a      	mov	r2, r3
 8003426:	7ffb      	ldrb	r3, [r7, #31]
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	441a      	add	r2, r3
 800342c:	7ffb      	ldrb	r3, [r7, #31]
 800342e:	8812      	ldrh	r2, [r2, #0]
 8003430:	b292      	uxth	r2, r2
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	3320      	adds	r3, #32
 8003436:	443b      	add	r3, r7
 8003438:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800343c:	7ffb      	ldrb	r3, [r7, #31]
 800343e:	3301      	adds	r3, #1
 8003440:	77fb      	strb	r3, [r7, #31]
 8003442:	7ffb      	ldrb	r3, [r7, #31]
 8003444:	2b07      	cmp	r3, #7
 8003446:	d9eb      	bls.n	8003420 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003450:	b29a      	uxth	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0201 	orr.w	r2, r2, #1
 800345a:	b292      	uxth	r2, r2
 800345c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003468:	b29a      	uxth	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0201 	bic.w	r2, r2, #1
 8003472:	b292      	uxth	r2, r2
 8003474:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003478:	bf00      	nop
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003482:	b29b      	uxth	r3, r3
 8003484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0f6      	beq.n	800347a <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003494:	b29a      	uxth	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800349e:	b292      	uxth	r2, r2
 80034a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80034a4:	2300      	movs	r3, #0
 80034a6:	77fb      	strb	r3, [r7, #31]
 80034a8:	e00f      	b.n	80034ca <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80034aa:	7ffb      	ldrb	r3, [r7, #31]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	4611      	mov	r1, r2
 80034b2:	7ffa      	ldrb	r2, [r7, #31]
 80034b4:	0092      	lsls	r2, r2, #2
 80034b6:	440a      	add	r2, r1
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	3320      	adds	r3, #32
 80034bc:	443b      	add	r3, r7
 80034be:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80034c2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80034c4:	7ffb      	ldrb	r3, [r7, #31]
 80034c6:	3301      	adds	r3, #1
 80034c8:	77fb      	strb	r3, [r7, #31]
 80034ca:	7ffb      	ldrb	r3, [r7, #31]
 80034cc:	2b07      	cmp	r3, #7
 80034ce:	d9ec      	bls.n	80034aa <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034d8:	b29a      	uxth	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0208 	orr.w	r2, r2, #8
 80034e2:	b292      	uxth	r2, r2
 80034e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034fa:	b292      	uxth	r2, r2
 80034fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003508:	b29a      	uxth	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0204 	orr.w	r2, r2, #4
 8003512:	b292      	uxth	r2, r2
 8003514:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f006 f98f 	bl	800983c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800351e:	e026      	b.n	800356e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00f      	beq.n	800354a <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003532:	b29a      	uxth	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800353c:	b292      	uxth	r2, r2
 800353e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f006 f94d 	bl	80097e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003548:	e011      	b.n	800356e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00c      	beq.n	800356e <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800355c:	b29a      	uxth	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003566:	b292      	uxth	r2, r2
 8003568:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800356c:	bf00      	nop
  }
}
 800356e:	3720      	adds	r7, #32
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	460b      	mov	r3, r1
 800357e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <HAL_PCD_SetAddress+0x1a>
 800358a:	2302      	movs	r3, #2
 800358c:	e013      	b.n	80035b6 <HAL_PCD_SetAddress+0x42>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	78fa      	ldrb	r2, [r7, #3]
 800359a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	78fa      	ldrb	r2, [r7, #3]
 80035a4:	4611      	mov	r1, r2
 80035a6:	4618      	mov	r0, r3
 80035a8:	f004 fa76 	bl	8007a98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b084      	sub	sp, #16
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	4608      	mov	r0, r1
 80035c8:	4611      	mov	r1, r2
 80035ca:	461a      	mov	r2, r3
 80035cc:	4603      	mov	r3, r0
 80035ce:	70fb      	strb	r3, [r7, #3]
 80035d0:	460b      	mov	r3, r1
 80035d2:	803b      	strh	r3, [r7, #0]
 80035d4:	4613      	mov	r3, r2
 80035d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	da0e      	bge.n	8003602 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035e4:	78fb      	ldrb	r3, [r7, #3]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	4613      	mov	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	4413      	add	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2201      	movs	r2, #1
 80035fe:	705a      	strb	r2, [r3, #1]
 8003600:	e00e      	b.n	8003620 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003602:	78fb      	ldrb	r3, [r7, #3]
 8003604:	f003 0207 	and.w	r2, r3, #7
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	4413      	add	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003620:	78fb      	ldrb	r3, [r7, #3]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	b2da      	uxtb	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800362c:	883a      	ldrh	r2, [r7, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	78ba      	ldrb	r2, [r7, #2]
 8003636:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003638:	78bb      	ldrb	r3, [r7, #2]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d102      	bne.n	8003644 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_PCD_EP_Open+0x94>
 800364e:	2302      	movs	r3, #2
 8003650:	e00e      	b.n	8003670 <HAL_PCD_EP_Open+0xb2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68f9      	ldr	r1, [r7, #12]
 8003660:	4618      	mov	r0, r3
 8003662:	f001 ffbf 	bl	80055e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800366e:	7afb      	ldrb	r3, [r7, #11]
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	460b      	mov	r3, r1
 8003682:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003684:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003688:	2b00      	cmp	r3, #0
 800368a:	da0e      	bge.n	80036aa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800368c:	78fb      	ldrb	r3, [r7, #3]
 800368e:	f003 0307 	and.w	r3, r3, #7
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	4613      	mov	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	4413      	add	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2201      	movs	r2, #1
 80036a6:	705a      	strb	r2, [r3, #1]
 80036a8:	e00e      	b.n	80036c8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036aa:	78fb      	ldrb	r3, [r7, #3]
 80036ac:	f003 0207 	and.w	r2, r3, #7
 80036b0:	4613      	mov	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	4413      	add	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80036c8:	78fb      	ldrb	r3, [r7, #3]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d101      	bne.n	80036e2 <HAL_PCD_EP_Close+0x6a>
 80036de:	2302      	movs	r3, #2
 80036e0:	e00e      	b.n	8003700 <HAL_PCD_EP_Close+0x88>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68f9      	ldr	r1, [r7, #12]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f002 fb37 	bl	8005d64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	607a      	str	r2, [r7, #4]
 8003712:	603b      	str	r3, [r7, #0]
 8003714:	460b      	mov	r3, r1
 8003716:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003718:	7afb      	ldrb	r3, [r7, #11]
 800371a:	f003 0207 	and.w	r2, r3, #7
 800371e:	4613      	mov	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4413      	add	r3, r2
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	4413      	add	r3, r2
 800372e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	2200      	movs	r2, #0
 8003740:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	2200      	movs	r2, #0
 8003746:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003748:	7afb      	ldrb	r3, [r7, #11]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	b2da      	uxtb	r2, r3
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6979      	ldr	r1, [r7, #20]
 800375a:	4618      	mov	r0, r3
 800375c:	f002 fcee 	bl	800613c <USB_EPStartXfer>

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800376a:	b480      	push	{r7}
 800376c:	b083      	sub	sp, #12
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
 8003772:	460b      	mov	r3, r1
 8003774:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003776:	78fb      	ldrb	r3, [r7, #3]
 8003778:	f003 0207 	and.w	r2, r3, #7
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	4613      	mov	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	440b      	add	r3, r1
 8003788:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800378c:	681b      	ldr	r3, [r3, #0]
}
 800378e:	4618      	mov	r0, r3
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	bc80      	pop	{r7}
 8003796:	4770      	bx	lr

08003798 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	607a      	str	r2, [r7, #4]
 80037a2:	603b      	str	r3, [r7, #0]
 80037a4:	460b      	mov	r3, r1
 80037a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037a8:	7afb      	ldrb	r3, [r7, #11]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4413      	add	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2200      	movs	r2, #0
 80037dc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2201      	movs	r2, #1
 80037e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037e4:	7afb      	ldrb	r3, [r7, #11]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6979      	ldr	r1, [r7, #20]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f002 fca0 	bl	800613c <USB_EPStartXfer>

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b084      	sub	sp, #16
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
 800380e:	460b      	mov	r3, r1
 8003810:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003812:	78fb      	ldrb	r3, [r7, #3]
 8003814:	f003 0207 	and.w	r2, r3, #7
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	429a      	cmp	r2, r3
 800381e:	d901      	bls.n	8003824 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e04c      	b.n	80038be <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003824:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003828:	2b00      	cmp	r3, #0
 800382a:	da0e      	bge.n	800384a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800382c:	78fb      	ldrb	r3, [r7, #3]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	4413      	add	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2201      	movs	r2, #1
 8003846:	705a      	strb	r2, [r3, #1]
 8003848:	e00c      	b.n	8003864 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800384a:	78fa      	ldrb	r2, [r7, #3]
 800384c:	4613      	mov	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	4413      	add	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2201      	movs	r2, #1
 8003868:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800386a:	78fb      	ldrb	r3, [r7, #3]
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	b2da      	uxtb	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800387c:	2b01      	cmp	r3, #1
 800387e:	d101      	bne.n	8003884 <HAL_PCD_EP_SetStall+0x7e>
 8003880:	2302      	movs	r3, #2
 8003882:	e01c      	b.n	80038be <HAL_PCD_EP_SetStall+0xb8>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68f9      	ldr	r1, [r7, #12]
 8003892:	4618      	mov	r0, r3
 8003894:	f004 f803 	bl	800789e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	f003 0307 	and.w	r3, r3, #7
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d108      	bne.n	80038b4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80038ac:	4619      	mov	r1, r3
 80038ae:	4610      	mov	r0, r2
 80038b0:	f004 f928 	bl	8007b04 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b084      	sub	sp, #16
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	460b      	mov	r3, r1
 80038d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80038d2:	78fb      	ldrb	r3, [r7, #3]
 80038d4:	f003 020f 	and.w	r2, r3, #15
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d901      	bls.n	80038e4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e040      	b.n	8003966 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	da0e      	bge.n	800390a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038ec:	78fb      	ldrb	r3, [r7, #3]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	4613      	mov	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	4413      	add	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2201      	movs	r2, #1
 8003906:	705a      	strb	r2, [r3, #1]
 8003908:	e00e      	b.n	8003928 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800390a:	78fb      	ldrb	r3, [r7, #3]
 800390c:	f003 0207 	and.w	r2, r3, #7
 8003910:	4613      	mov	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	4413      	add	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800392e:	78fb      	ldrb	r3, [r7, #3]
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	b2da      	uxtb	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003940:	2b01      	cmp	r3, #1
 8003942:	d101      	bne.n	8003948 <HAL_PCD_EP_ClrStall+0x82>
 8003944:	2302      	movs	r3, #2
 8003946:	e00e      	b.n	8003966 <HAL_PCD_EP_ClrStall+0xa0>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68f9      	ldr	r1, [r7, #12]
 8003956:	4618      	mov	r0, r3
 8003958:	f003 fff1 	bl	800793e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b096      	sub	sp, #88	; 0x58
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003976:	e3bf      	b.n	80040f8 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003980:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003984:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003988:	b2db      	uxtb	r3, r3
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8003992:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003996:	2b00      	cmp	r3, #0
 8003998:	f040 8179 	bne.w	8003c8e <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800399c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80039a0:	f003 0310 	and.w	r3, r3, #16
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d152      	bne.n	8003a4e <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	881b      	ldrh	r3, [r3, #0]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80039b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b8:	81fb      	strh	r3, [r7, #14]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	89fb      	ldrh	r3, [r7, #14]
 80039c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3328      	adds	r3, #40	; 0x28
 80039d0:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039da:	b29b      	uxth	r3, r3
 80039dc:	461a      	mov	r2, r3
 80039de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	4413      	add	r3, r2
 80039e6:	3302      	adds	r3, #2
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6812      	ldr	r2, [r2, #0]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80039fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039fc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80039fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a00:	695a      	ldr	r2, [r3, #20]
 8003a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	441a      	add	r2, r3
 8003a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a0a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f005 fecd 	bl	80097ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 836b 	beq.w	80040f8 <PCD_EP_ISR_Handler+0x78a>
 8003a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f040 8366 	bne.w	80040f8 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	b292      	uxth	r2, r2
 8003a40:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003a4c:	e354      	b.n	80040f8 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a54:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003a60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003a64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d034      	beq.n	8003ad6 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	461a      	mov	r2, r3
 8003a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	4413      	add	r3, r2
 8003a80:	3306      	adds	r3, #6
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6812      	ldr	r2, [r2, #0]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a8e:	881b      	ldrh	r3, [r3, #0]
 8003a90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a96:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6818      	ldr	r0, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aa4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aa8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	f004 f87a 	bl	8007ba4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	881b      	ldrh	r3, [r3, #0]
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003abc:	4013      	ands	r3, r2
 8003abe:	823b      	strh	r3, [r7, #16]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	8a3a      	ldrh	r2, [r7, #16]
 8003ac6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003aca:	b292      	uxth	r2, r2
 8003acc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f005 fe40 	bl	8009754 <HAL_PCD_SetupStageCallback>
 8003ad4:	e310      	b.n	80040f8 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003ad6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f280 830c 	bge.w	80040f8 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003aec:	4013      	ands	r3, r2
 8003aee:	83fb      	strh	r3, [r7, #30]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	8bfa      	ldrh	r2, [r7, #30]
 8003af6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003afa:	b292      	uxth	r2, r2
 8003afc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	461a      	mov	r2, r3
 8003b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	4413      	add	r3, r2
 8003b12:	3306      	adds	r3, #6
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6812      	ldr	r2, [r2, #0]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b20:	881b      	ldrh	r3, [r3, #0]
 8003b22:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b28:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003b2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d019      	beq.n	8003b66 <PCD_EP_ISR_Handler+0x1f8>
 8003b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d015      	beq.n	8003b66 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6818      	ldr	r0, [r3, #0]
 8003b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b40:	6959      	ldr	r1, [r3, #20]
 8003b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b44:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b48:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	f004 f82a 	bl	8007ba4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003b50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b52:	695a      	ldr	r2, [r3, #20]
 8003b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	441a      	add	r2, r3
 8003b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b5c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003b5e:	2100      	movs	r1, #0
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f005 fe09 	bl	8009778 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003b70:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f040 82bd 	bne.w	80040f8 <PCD_EP_ISR_Handler+0x78a>
 8003b7e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003b82:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003b86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b8a:	f000 82b5 	beq.w	80040f8 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	61bb      	str	r3, [r7, #24]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	61bb      	str	r3, [r7, #24]
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003bac:	617b      	str	r3, [r7, #20]
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	801a      	strh	r2, [r3, #0]
 8003bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	2b3e      	cmp	r3, #62	; 0x3e
 8003bc4:	d91d      	bls.n	8003c02 <PCD_EP_ISR_Handler+0x294>
 8003bc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	095b      	lsrs	r3, r3, #5
 8003bcc:	647b      	str	r3, [r7, #68]	; 0x44
 8003bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	f003 031f 	and.w	r3, r3, #31
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d102      	bne.n	8003be0 <PCD_EP_ISR_Handler+0x272>
 8003bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	647b      	str	r3, [r7, #68]	; 0x44
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	881b      	ldrh	r3, [r3, #0]
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	029b      	lsls	r3, r3, #10
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	801a      	strh	r2, [r3, #0]
 8003c00:	e026      	b.n	8003c50 <PCD_EP_ISR_Handler+0x2e2>
 8003c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10a      	bne.n	8003c20 <PCD_EP_ISR_Handler+0x2b2>
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	801a      	strh	r2, [r3, #0]
 8003c1e:	e017      	b.n	8003c50 <PCD_EP_ISR_Handler+0x2e2>
 8003c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	085b      	lsrs	r3, r3, #1
 8003c26:	647b      	str	r3, [r7, #68]	; 0x44
 8003c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d002      	beq.n	8003c3a <PCD_EP_ISR_Handler+0x2cc>
 8003c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c36:	3301      	adds	r3, #1
 8003c38:	647b      	str	r3, [r7, #68]	; 0x44
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	029b      	lsls	r3, r3, #10
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c60:	827b      	strh	r3, [r7, #18]
 8003c62:	8a7b      	ldrh	r3, [r7, #18]
 8003c64:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003c68:	827b      	strh	r3, [r7, #18]
 8003c6a:	8a7b      	ldrh	r3, [r7, #18]
 8003c6c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c70:	827b      	strh	r3, [r7, #18]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	8a7b      	ldrh	r3, [r7, #18]
 8003c78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	8013      	strh	r3, [r2, #0]
 8003c8c:	e234      	b.n	80040f8 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003ca2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f280 80fc 	bge.w	8003ea4 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003cda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cde:	b292      	uxth	r2, r2
 8003ce0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003ce2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003cf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cfa:	7b1b      	ldrb	r3, [r3, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d125      	bne.n	8003d4c <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	4413      	add	r3, r2
 8003d14:	3306      	adds	r3, #6
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6812      	ldr	r2, [r2, #0]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d28:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003d2c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 8092 	beq.w	8003e5a <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6818      	ldr	r0, [r3, #0]
 8003d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d3c:	6959      	ldr	r1, [r3, #20]
 8003d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d40:	88da      	ldrh	r2, [r3, #6]
 8003d42:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003d46:	f003 ff2d 	bl	8007ba4 <USB_ReadPMA>
 8003d4a:	e086      	b.n	8003e5a <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d4e:	78db      	ldrb	r3, [r3, #3]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d10a      	bne.n	8003d6a <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003d54:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003d58:	461a      	mov	r2, r3
 8003d5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f9d9 	bl	8004114 <HAL_PCD_EP_DB_Receive>
 8003d62:	4603      	mov	r3, r0
 8003d64:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003d68:	e077      	b.n	8003e5a <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d84:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	441a      	add	r2, r3
 8003d96:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003d9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003da6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	461a      	mov	r2, r3
 8003db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d024      	beq.n	8003e12 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	4413      	add	r3, r2
 8003ddc:	3302      	adds	r3, #2
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6812      	ldr	r2, [r2, #0]
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003df0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003df4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d02e      	beq.n	8003e5a <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6818      	ldr	r0, [r3, #0]
 8003e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e02:	6959      	ldr	r1, [r3, #20]
 8003e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e06:	891a      	ldrh	r2, [r3, #8]
 8003e08:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003e0c:	f003 feca 	bl	8007ba4 <USB_ReadPMA>
 8003e10:	e023      	b.n	8003e5a <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	4413      	add	r3, r2
 8003e26:	3306      	adds	r3, #6
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6812      	ldr	r2, [r2, #0]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e3a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003e3e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d009      	beq.n	8003e5a <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6818      	ldr	r0, [r3, #0]
 8003e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e4c:	6959      	ldr	r1, [r3, #20]
 8003e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e50:	895a      	ldrh	r2, [r3, #10]
 8003e52:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003e56:	f003 fea5 	bl	8007ba4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e5c:	69da      	ldr	r2, [r3, #28]
 8003e5e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003e62:	441a      	add	r2, r3
 8003e64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e66:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e6a:	695a      	ldr	r2, [r3, #20]
 8003e6c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003e70:	441a      	add	r2, r3
 8003e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e74:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d005      	beq.n	8003e8a <PCD_EP_ISR_Handler+0x51c>
 8003e7e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003e82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d206      	bcs.n	8003e98 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	4619      	mov	r1, r3
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f005 fc71 	bl	8009778 <HAL_PCD_DataOutStageCallback>
 8003e96:	e005      	b.n	8003ea4 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f002 f94c 	bl	800613c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003ea4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 8123 	beq.w	80040f8 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8003eb2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	4613      	mov	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	441a      	add	r2, r3
 8003ef2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f04:	78db      	ldrb	r3, [r3, #3]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	f040 80a2 	bne.w	8004050 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8003f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f0e:	2200      	movs	r2, #0
 8003f10:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003f12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f14:	7b1b      	ldrb	r3, [r3, #12]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 8093 	beq.w	8004042 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f1c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d046      	beq.n	8003fb6 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f2a:	785b      	ldrb	r3, [r3, #1]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d126      	bne.n	8003f7e <PCD_EP_ISR_Handler+0x610>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	627b      	str	r3, [r7, #36]	; 0x24
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	461a      	mov	r2, r3
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	4413      	add	r3, r2
 8003f46:	627b      	str	r3, [r7, #36]	; 0x24
 8003f48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	011a      	lsls	r2, r3, #4
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	4413      	add	r3, r2
 8003f52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f56:	623b      	str	r3, [r7, #32]
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	801a      	strh	r2, [r3, #0]
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	881b      	ldrh	r3, [r3, #0]
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	801a      	strh	r2, [r3, #0]
 8003f7c:	e061      	b.n	8004042 <PCD_EP_ISR_Handler+0x6d4>
 8003f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f80:	785b      	ldrb	r3, [r3, #1]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d15d      	bne.n	8004042 <PCD_EP_ISR_Handler+0x6d4>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	461a      	mov	r2, r3
 8003f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9a:	4413      	add	r3, r2
 8003f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	011a      	lsls	r2, r3, #4
 8003fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003fac:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	801a      	strh	r2, [r3, #0]
 8003fb4:	e045      	b.n	8004042 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fbe:	785b      	ldrb	r3, [r3, #1]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d126      	bne.n	8004012 <PCD_EP_ISR_Handler+0x6a4>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	637b      	str	r3, [r7, #52]	; 0x34
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fd8:	4413      	add	r3, r2
 8003fda:	637b      	str	r3, [r7, #52]	; 0x34
 8003fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	011a      	lsls	r2, r3, #4
 8003fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fea:	633b      	str	r3, [r7, #48]	; 0x30
 8003fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffa:	801a      	strh	r2, [r3, #0]
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	b29b      	uxth	r3, r3
 8004002:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004006:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800400a:	b29a      	uxth	r2, r3
 800400c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400e:	801a      	strh	r2, [r3, #0]
 8004010:	e017      	b.n	8004042 <PCD_EP_ISR_Handler+0x6d4>
 8004012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004014:	785b      	ldrb	r3, [r3, #1]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d113      	bne.n	8004042 <PCD_EP_ISR_Handler+0x6d4>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004022:	b29b      	uxth	r3, r3
 8004024:	461a      	mov	r2, r3
 8004026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004028:	4413      	add	r3, r2
 800402a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800402c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	011a      	lsls	r2, r3, #4
 8004032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004034:	4413      	add	r3, r2
 8004036:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800403a:	63bb      	str	r3, [r7, #56]	; 0x38
 800403c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403e:	2200      	movs	r2, #0
 8004040:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	4619      	mov	r1, r3
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f005 fbb0 	bl	80097ae <HAL_PCD_DataInStageCallback>
 800404e:	e053      	b.n	80040f8 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004050:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004058:	2b00      	cmp	r3, #0
 800405a:	d146      	bne.n	80040ea <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004064:	b29b      	uxth	r3, r3
 8004066:	461a      	mov	r2, r3
 8004068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	4413      	add	r3, r2
 8004070:	3302      	adds	r3, #2
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6812      	ldr	r2, [r2, #0]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800407e:	881b      	ldrh	r3, [r3, #0]
 8004080:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004084:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004088:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800408a:	699a      	ldr	r2, [r3, #24]
 800408c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004090:	429a      	cmp	r2, r3
 8004092:	d907      	bls.n	80040a4 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8004094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004096:	699a      	ldr	r2, [r3, #24]
 8004098:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800409c:	1ad2      	subs	r2, r2, r3
 800409e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040a0:	619a      	str	r2, [r3, #24]
 80040a2:	e002      	b.n	80040aa <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 80040a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040a6:	2200      	movs	r2, #0
 80040a8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80040aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d106      	bne.n	80040c0 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80040b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	4619      	mov	r1, r3
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f005 fb78 	bl	80097ae <HAL_PCD_DataInStageCallback>
 80040be:	e01b      	b.n	80040f8 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80040c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040c2:	695a      	ldr	r2, [r3, #20]
 80040c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80040c8:	441a      	add	r2, r3
 80040ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040cc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80040ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040d0:	69da      	ldr	r2, [r3, #28]
 80040d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80040d6:	441a      	add	r2, r3
 80040d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040da:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040e2:	4618      	mov	r0, r3
 80040e4:	f002 f82a 	bl	800613c <USB_EPStartXfer>
 80040e8:	e006      	b.n	80040f8 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80040ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80040ee:	461a      	mov	r2, r3
 80040f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f91b 	bl	800432e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004100:	b29b      	uxth	r3, r3
 8004102:	b21b      	sxth	r3, r3
 8004104:	2b00      	cmp	r3, #0
 8004106:	f6ff ac37 	blt.w	8003978 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3758      	adds	r7, #88	; 0x58
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b088      	sub	sp, #32
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	4613      	mov	r3, r2
 8004120:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004122:	88fb      	ldrh	r3, [r7, #6]
 8004124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d07e      	beq.n	800422a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004134:	b29b      	uxth	r3, r3
 8004136:	461a      	mov	r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	4413      	add	r3, r2
 8004140:	3302      	adds	r3, #2
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	6812      	ldr	r2, [r2, #0]
 8004148:	4413      	add	r3, r2
 800414a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800414e:	881b      	ldrh	r3, [r3, #0]
 8004150:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004154:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	699a      	ldr	r2, [r3, #24]
 800415a:	8b7b      	ldrh	r3, [r7, #26]
 800415c:	429a      	cmp	r2, r3
 800415e:	d306      	bcc.n	800416e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	699a      	ldr	r2, [r3, #24]
 8004164:	8b7b      	ldrh	r3, [r7, #26]
 8004166:	1ad2      	subs	r2, r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	619a      	str	r2, [r3, #24]
 800416c:	e002      	b.n	8004174 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2200      	movs	r2, #0
 8004172:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d123      	bne.n	80041c4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	b29b      	uxth	r3, r3
 800418e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004196:	833b      	strh	r3, [r7, #24]
 8004198:	8b3b      	ldrh	r3, [r7, #24]
 800419a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800419e:	833b      	strh	r3, [r7, #24]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	461a      	mov	r2, r3
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	441a      	add	r2, r3
 80041ae:	8b3b      	ldrh	r3, [r7, #24]
 80041b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80041c4:	88fb      	ldrh	r3, [r7, #6]
 80041c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d01f      	beq.n	800420e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e8:	82fb      	strh	r3, [r7, #22]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	441a      	add	r2, r3
 80041f8:	8afb      	ldrh	r3, [r7, #22]
 80041fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004206:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800420a:	b29b      	uxth	r3, r3
 800420c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800420e:	8b7b      	ldrh	r3, [r7, #26]
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 8087 	beq.w	8004324 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	6959      	ldr	r1, [r3, #20]
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	891a      	ldrh	r2, [r3, #8]
 8004222:	8b7b      	ldrh	r3, [r7, #26]
 8004224:	f003 fcbe 	bl	8007ba4 <USB_ReadPMA>
 8004228:	e07c      	b.n	8004324 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004232:	b29b      	uxth	r3, r3
 8004234:	461a      	mov	r2, r3
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	4413      	add	r3, r2
 800423e:	3306      	adds	r3, #6
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	6812      	ldr	r2, [r2, #0]
 8004246:	4413      	add	r3, r2
 8004248:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004252:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	699a      	ldr	r2, [r3, #24]
 8004258:	8b7b      	ldrh	r3, [r7, #26]
 800425a:	429a      	cmp	r2, r3
 800425c:	d306      	bcc.n	800426c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	699a      	ldr	r2, [r3, #24]
 8004262:	8b7b      	ldrh	r3, [r7, #26]
 8004264:	1ad2      	subs	r2, r2, r3
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	619a      	str	r2, [r3, #24]
 800426a:	e002      	b.n	8004272 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2200      	movs	r2, #0
 8004270:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d123      	bne.n	80042c2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	461a      	mov	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4413      	add	r3, r2
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	b29b      	uxth	r3, r3
 800428c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004294:	83fb      	strh	r3, [r7, #30]
 8004296:	8bfb      	ldrh	r3, [r7, #30]
 8004298:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800429c:	83fb      	strh	r3, [r7, #30]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	461a      	mov	r2, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	441a      	add	r2, r3
 80042ac:	8bfb      	ldrh	r3, [r7, #30]
 80042ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042be:	b29b      	uxth	r3, r3
 80042c0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80042c2:	88fb      	ldrh	r3, [r7, #6]
 80042c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d11f      	bne.n	800430c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	461a      	mov	r2, r3
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	b29b      	uxth	r3, r3
 80042de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e6:	83bb      	strh	r3, [r7, #28]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	461a      	mov	r2, r3
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	441a      	add	r2, r3
 80042f6:	8bbb      	ldrh	r3, [r7, #28]
 80042f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004304:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004308:	b29b      	uxth	r3, r3
 800430a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800430c:	8b7b      	ldrh	r3, [r7, #26]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d008      	beq.n	8004324 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6818      	ldr	r0, [r3, #0]
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	6959      	ldr	r1, [r3, #20]
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	895a      	ldrh	r2, [r3, #10]
 800431e:	8b7b      	ldrh	r3, [r7, #26]
 8004320:	f003 fc40 	bl	8007ba4 <USB_ReadPMA>
    }
  }

  return count;
 8004324:	8b7b      	ldrh	r3, [r7, #26]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3720      	adds	r7, #32
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b0a4      	sub	sp, #144	; 0x90
 8004332:	af00      	add	r7, sp, #0
 8004334:	60f8      	str	r0, [r7, #12]
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	4613      	mov	r3, r2
 800433a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800433c:	88fb      	ldrh	r3, [r7, #6]
 800433e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 81dd 	beq.w	8004702 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004350:	b29b      	uxth	r3, r3
 8004352:	461a      	mov	r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	4413      	add	r3, r2
 800435c:	3302      	adds	r3, #2
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	6812      	ldr	r2, [r2, #0]
 8004364:	4413      	add	r3, r2
 8004366:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004370:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	699a      	ldr	r2, [r3, #24]
 8004378:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800437c:	429a      	cmp	r2, r3
 800437e:	d907      	bls.n	8004390 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	699a      	ldr	r2, [r3, #24]
 8004384:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004388:	1ad2      	subs	r2, r2, r3
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	619a      	str	r2, [r3, #24]
 800438e:	e002      	b.n	8004396 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2200      	movs	r2, #0
 8004394:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	2b00      	cmp	r3, #0
 800439c:	f040 80b9 	bne.w	8004512 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	785b      	ldrb	r3, [r3, #1]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d126      	bne.n	80043f6 <HAL_PCD_EP_DB_Transmit+0xc8>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	461a      	mov	r2, r3
 80043ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043bc:	4413      	add	r3, r2
 80043be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	011a      	lsls	r2, r3, #4
 80043c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c8:	4413      	add	r3, r2
 80043ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80043d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d2:	881b      	ldrh	r3, [r3, #0]
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043da:	b29a      	uxth	r2, r3
 80043dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043de:	801a      	strh	r2, [r3, #0]
 80043e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e2:	881b      	ldrh	r3, [r3, #0]
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f2:	801a      	strh	r2, [r3, #0]
 80043f4:	e01a      	b.n	800442c <HAL_PCD_EP_DB_Transmit+0xfe>
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	785b      	ldrb	r3, [r3, #1]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d116      	bne.n	800442c <HAL_PCD_EP_DB_Transmit+0xfe>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	637b      	str	r3, [r7, #52]	; 0x34
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800440c:	b29b      	uxth	r3, r3
 800440e:	461a      	mov	r2, r3
 8004410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004412:	4413      	add	r3, r2
 8004414:	637b      	str	r3, [r7, #52]	; 0x34
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	011a      	lsls	r2, r3, #4
 800441c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441e:	4413      	add	r3, r2
 8004420:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004424:	633b      	str	r3, [r7, #48]	; 0x30
 8004426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004428:	2200      	movs	r2, #0
 800442a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	627b      	str	r3, [r7, #36]	; 0x24
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	785b      	ldrb	r3, [r3, #1]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d126      	bne.n	8004488 <HAL_PCD_EP_DB_Transmit+0x15a>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	61fb      	str	r3, [r7, #28]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004448:	b29b      	uxth	r3, r3
 800444a:	461a      	mov	r2, r3
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	4413      	add	r3, r2
 8004450:	61fb      	str	r3, [r7, #28]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	011a      	lsls	r2, r3, #4
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	4413      	add	r3, r2
 800445c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004460:	61bb      	str	r3, [r7, #24]
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	b29b      	uxth	r3, r3
 8004468:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800446c:	b29a      	uxth	r2, r3
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	801a      	strh	r2, [r3, #0]
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	881b      	ldrh	r3, [r3, #0]
 8004476:	b29b      	uxth	r3, r3
 8004478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800447c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004480:	b29a      	uxth	r2, r3
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	801a      	strh	r2, [r3, #0]
 8004486:	e017      	b.n	80044b8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	785b      	ldrb	r3, [r3, #1]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d113      	bne.n	80044b8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004498:	b29b      	uxth	r3, r3
 800449a:	461a      	mov	r2, r3
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	4413      	add	r3, r2
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	011a      	lsls	r2, r3, #4
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	4413      	add	r3, r2
 80044ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044b0:	623b      	str	r3, [r7, #32]
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	2200      	movs	r2, #0
 80044b6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	4619      	mov	r1, r3
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f005 f975 	bl	80097ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80044c4:	88fb      	ldrh	r3, [r7, #6]
 80044c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 82fc 	beq.w	8004ac8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	461a      	mov	r2, r3
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	881b      	ldrh	r3, [r3, #0]
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ea:	82fb      	strh	r3, [r7, #22]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	461a      	mov	r2, r3
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	441a      	add	r2, r3
 80044fa:	8afb      	ldrh	r3, [r7, #22]
 80044fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004504:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800450c:	b29b      	uxth	r3, r3
 800450e:	8013      	strh	r3, [r2, #0]
 8004510:	e2da      	b.n	8004ac8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004512:	88fb      	ldrh	r3, [r7, #6]
 8004514:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d021      	beq.n	8004560 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	461a      	mov	r2, r3
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	b29b      	uxth	r3, r3
 800452e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004536:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	461a      	mov	r2, r3
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	441a      	add	r2, r3
 8004548:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800454c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004550:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004554:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800455c:	b29b      	uxth	r3, r3
 800455e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004566:	2b01      	cmp	r3, #1
 8004568:	f040 82ae 	bne.w	8004ac8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	695a      	ldr	r2, [r3, #20]
 8004570:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004574:	441a      	add	r2, r3
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	69da      	ldr	r2, [r3, #28]
 800457e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004582:	441a      	add	r2, r3
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	6a1a      	ldr	r2, [r3, #32]
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	429a      	cmp	r2, r3
 8004592:	d30b      	bcc.n	80045ac <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	6a1a      	ldr	r2, [r3, #32]
 80045a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045a4:	1ad2      	subs	r2, r2, r3
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	621a      	str	r2, [r3, #32]
 80045aa:	e017      	b.n	80045dc <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d108      	bne.n	80045c6 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80045b4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80045b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80045c4:	e00a      	b.n	80045dc <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2200      	movs	r2, #0
 80045da:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	785b      	ldrb	r3, [r3, #1]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d165      	bne.n	80046b0 <HAL_PCD_EP_DB_Transmit+0x382>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	461a      	mov	r2, r3
 80045f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045f8:	4413      	add	r3, r2
 80045fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	011a      	lsls	r2, r3, #4
 8004602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004604:	4413      	add	r3, r2
 8004606:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800460a:	63bb      	str	r3, [r7, #56]	; 0x38
 800460c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460e:	881b      	ldrh	r3, [r3, #0]
 8004610:	b29b      	uxth	r3, r3
 8004612:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004616:	b29a      	uxth	r2, r3
 8004618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461a:	801a      	strh	r2, [r3, #0]
 800461c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004620:	2b3e      	cmp	r3, #62	; 0x3e
 8004622:	d91d      	bls.n	8004660 <HAL_PCD_EP_DB_Transmit+0x332>
 8004624:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004628:	095b      	lsrs	r3, r3, #5
 800462a:	64bb      	str	r3, [r7, #72]	; 0x48
 800462c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004630:	f003 031f 	and.w	r3, r3, #31
 8004634:	2b00      	cmp	r3, #0
 8004636:	d102      	bne.n	800463e <HAL_PCD_EP_DB_Transmit+0x310>
 8004638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800463a:	3b01      	subs	r3, #1
 800463c:	64bb      	str	r3, [r7, #72]	; 0x48
 800463e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	b29a      	uxth	r2, r3
 8004644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004646:	b29b      	uxth	r3, r3
 8004648:	029b      	lsls	r3, r3, #10
 800464a:	b29b      	uxth	r3, r3
 800464c:	4313      	orrs	r3, r2
 800464e:	b29b      	uxth	r3, r3
 8004650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004658:	b29a      	uxth	r2, r3
 800465a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800465c:	801a      	strh	r2, [r3, #0]
 800465e:	e044      	b.n	80046ea <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004660:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10a      	bne.n	800467e <HAL_PCD_EP_DB_Transmit+0x350>
 8004668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466a:	881b      	ldrh	r3, [r3, #0]
 800466c:	b29b      	uxth	r3, r3
 800466e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004676:	b29a      	uxth	r2, r3
 8004678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467a:	801a      	strh	r2, [r3, #0]
 800467c:	e035      	b.n	80046ea <HAL_PCD_EP_DB_Transmit+0x3bc>
 800467e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004682:	085b      	lsrs	r3, r3, #1
 8004684:	64bb      	str	r3, [r7, #72]	; 0x48
 8004686:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <HAL_PCD_EP_DB_Transmit+0x36a>
 8004692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004694:	3301      	adds	r3, #1
 8004696:	64bb      	str	r3, [r7, #72]	; 0x48
 8004698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	b29a      	uxth	r2, r3
 800469e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	029b      	lsls	r3, r3, #10
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	4313      	orrs	r3, r2
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ac:	801a      	strh	r2, [r3, #0]
 80046ae:	e01c      	b.n	80046ea <HAL_PCD_EP_DB_Transmit+0x3bc>
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	785b      	ldrb	r3, [r3, #1]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d118      	bne.n	80046ea <HAL_PCD_EP_DB_Transmit+0x3bc>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	647b      	str	r3, [r7, #68]	; 0x44
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	461a      	mov	r2, r3
 80046ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046cc:	4413      	add	r3, r2
 80046ce:	647b      	str	r3, [r7, #68]	; 0x44
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	011a      	lsls	r2, r3, #4
 80046d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046d8:	4413      	add	r3, r2
 80046da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046de:	643b      	str	r3, [r7, #64]	; 0x40
 80046e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046e8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6818      	ldr	r0, [r3, #0]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	6959      	ldr	r1, [r3, #20]
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	891a      	ldrh	r2, [r3, #8]
 80046f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	f003 fa0d 	bl	8007b1a <USB_WritePMA>
 8004700:	e1e2      	b.n	8004ac8 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800470a:	b29b      	uxth	r3, r3
 800470c:	461a      	mov	r2, r3
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	4413      	add	r3, r2
 8004716:	3306      	adds	r3, #6
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	6812      	ldr	r2, [r2, #0]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800472a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	699a      	ldr	r2, [r3, #24]
 8004732:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004736:	429a      	cmp	r2, r3
 8004738:	d307      	bcc.n	800474a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004742:	1ad2      	subs	r2, r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	619a      	str	r2, [r3, #24]
 8004748:	e002      	b.n	8004750 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2200      	movs	r2, #0
 800474e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	2b00      	cmp	r3, #0
 8004756:	f040 80c0 	bne.w	80048da <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	785b      	ldrb	r3, [r3, #1]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d126      	bne.n	80047b0 <HAL_PCD_EP_DB_Transmit+0x482>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004770:	b29b      	uxth	r3, r3
 8004772:	461a      	mov	r2, r3
 8004774:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004776:	4413      	add	r3, r2
 8004778:	67fb      	str	r3, [r7, #124]	; 0x7c
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	011a      	lsls	r2, r3, #4
 8004780:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004782:	4413      	add	r3, r2
 8004784:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004788:	67bb      	str	r3, [r7, #120]	; 0x78
 800478a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	b29b      	uxth	r3, r3
 8004790:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004794:	b29a      	uxth	r2, r3
 8004796:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004798:	801a      	strh	r2, [r3, #0]
 800479a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047ac:	801a      	strh	r2, [r3, #0]
 80047ae:	e01a      	b.n	80047e6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	785b      	ldrb	r3, [r3, #1]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d116      	bne.n	80047e6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	667b      	str	r3, [r7, #100]	; 0x64
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	461a      	mov	r2, r3
 80047ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047cc:	4413      	add	r3, r2
 80047ce:	667b      	str	r3, [r7, #100]	; 0x64
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	011a      	lsls	r2, r3, #4
 80047d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047d8:	4413      	add	r3, r2
 80047da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047de:	663b      	str	r3, [r7, #96]	; 0x60
 80047e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047e2:	2200      	movs	r2, #0
 80047e4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	677b      	str	r3, [r7, #116]	; 0x74
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	785b      	ldrb	r3, [r3, #1]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d12b      	bne.n	800484c <HAL_PCD_EP_DB_Transmit+0x51e>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004802:	b29b      	uxth	r3, r3
 8004804:	461a      	mov	r2, r3
 8004806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004808:	4413      	add	r3, r2
 800480a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	011a      	lsls	r2, r3, #4
 8004812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004814:	4413      	add	r3, r2
 8004816:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800481a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800481e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	b29b      	uxth	r3, r3
 8004826:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800482a:	b29a      	uxth	r2, r3
 800482c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004830:	801a      	strh	r2, [r3, #0]
 8004832:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004836:	881b      	ldrh	r3, [r3, #0]
 8004838:	b29b      	uxth	r3, r3
 800483a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800483e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004842:	b29a      	uxth	r2, r3
 8004844:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004848:	801a      	strh	r2, [r3, #0]
 800484a:	e017      	b.n	800487c <HAL_PCD_EP_DB_Transmit+0x54e>
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	785b      	ldrb	r3, [r3, #1]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d113      	bne.n	800487c <HAL_PCD_EP_DB_Transmit+0x54e>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800485c:	b29b      	uxth	r3, r3
 800485e:	461a      	mov	r2, r3
 8004860:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004862:	4413      	add	r3, r2
 8004864:	677b      	str	r3, [r7, #116]	; 0x74
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	011a      	lsls	r2, r3, #4
 800486c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800486e:	4413      	add	r3, r2
 8004870:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004874:	673b      	str	r3, [r7, #112]	; 0x70
 8004876:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004878:	2200      	movs	r2, #0
 800487a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	4619      	mov	r1, r3
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f004 ff93 	bl	80097ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004888:	88fb      	ldrh	r3, [r7, #6]
 800488a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800488e:	2b00      	cmp	r3, #0
 8004890:	f040 811a 	bne.w	8004ac8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	461a      	mov	r2, r3
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ae:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	461a      	mov	r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	441a      	add	r2, r3
 80048c0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80048c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	8013      	strh	r3, [r2, #0]
 80048d8:	e0f6      	b.n	8004ac8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80048da:	88fb      	ldrh	r3, [r7, #6]
 80048dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d121      	bne.n	8004928 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	881b      	ldrh	r3, [r3, #0]
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	461a      	mov	r2, r3
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	441a      	add	r2, r3
 8004910:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004914:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004918:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800491c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004924:	b29b      	uxth	r3, r3
 8004926:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800492e:	2b01      	cmp	r3, #1
 8004930:	f040 80ca 	bne.w	8004ac8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	695a      	ldr	r2, [r3, #20]
 8004938:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800493c:	441a      	add	r2, r3
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	69da      	ldr	r2, [r3, #28]
 8004946:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800494a:	441a      	add	r2, r3
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	6a1a      	ldr	r2, [r3, #32]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	429a      	cmp	r2, r3
 800495a:	d30b      	bcc.n	8004974 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	6a1a      	ldr	r2, [r3, #32]
 8004968:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800496c:	1ad2      	subs	r2, r2, r3
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	621a      	str	r2, [r3, #32]
 8004972:	e017      	b.n	80049a4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d108      	bne.n	800498e <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800497c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004980:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800498c:	e00a      	b.n	80049a4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2200      	movs	r2, #0
 800499a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	657b      	str	r3, [r7, #84]	; 0x54
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	785b      	ldrb	r3, [r3, #1]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d165      	bne.n	8004a7e <HAL_PCD_EP_DB_Transmit+0x750>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	461a      	mov	r2, r3
 80049c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049c6:	4413      	add	r3, r2
 80049c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	011a      	lsls	r2, r3, #4
 80049d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049d2:	4413      	add	r3, r2
 80049d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80049da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	b29b      	uxth	r3, r3
 80049e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049e8:	801a      	strh	r2, [r3, #0]
 80049ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049ee:	2b3e      	cmp	r3, #62	; 0x3e
 80049f0:	d91d      	bls.n	8004a2e <HAL_PCD_EP_DB_Transmit+0x700>
 80049f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049f6:	095b      	lsrs	r3, r3, #5
 80049f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80049fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049fe:	f003 031f 	and.w	r3, r3, #31
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d102      	bne.n	8004a0c <HAL_PCD_EP_DB_Transmit+0x6de>
 8004a06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	029b      	lsls	r3, r3, #10
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a2a:	801a      	strh	r2, [r3, #0]
 8004a2c:	e041      	b.n	8004ab2 <HAL_PCD_EP_DB_Transmit+0x784>
 8004a2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10a      	bne.n	8004a4c <HAL_PCD_EP_DB_Transmit+0x71e>
 8004a36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a38:	881b      	ldrh	r3, [r3, #0]
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a48:	801a      	strh	r2, [r3, #0]
 8004a4a:	e032      	b.n	8004ab2 <HAL_PCD_EP_DB_Transmit+0x784>
 8004a4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a50:	085b      	lsrs	r3, r3, #1
 8004a52:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d002      	beq.n	8004a66 <HAL_PCD_EP_DB_Transmit+0x738>
 8004a60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a62:	3301      	adds	r3, #1
 8004a64:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	029b      	lsls	r3, r3, #10
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	4313      	orrs	r3, r2
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a7a:	801a      	strh	r2, [r3, #0]
 8004a7c:	e019      	b.n	8004ab2 <HAL_PCD_EP_DB_Transmit+0x784>
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	785b      	ldrb	r3, [r3, #1]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d115      	bne.n	8004ab2 <HAL_PCD_EP_DB_Transmit+0x784>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	461a      	mov	r2, r3
 8004a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a94:	4413      	add	r3, r2
 8004a96:	657b      	str	r3, [r7, #84]	; 0x54
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	011a      	lsls	r2, r3, #4
 8004a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004aa6:	653b      	str	r3, [r7, #80]	; 0x50
 8004aa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ab0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6818      	ldr	r0, [r3, #0]
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	6959      	ldr	r1, [r3, #20]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	895a      	ldrh	r2, [r3, #10]
 8004abe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	f003 f829 	bl	8007b1a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	461a      	mov	r2, r3
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ade:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ae2:	82bb      	strh	r3, [r7, #20]
 8004ae4:	8abb      	ldrh	r3, [r7, #20]
 8004ae6:	f083 0310 	eor.w	r3, r3, #16
 8004aea:	82bb      	strh	r3, [r7, #20]
 8004aec:	8abb      	ldrh	r3, [r7, #20]
 8004aee:	f083 0320 	eor.w	r3, r3, #32
 8004af2:	82bb      	strh	r3, [r7, #20]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	461a      	mov	r2, r3
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	441a      	add	r2, r3
 8004b02:	8abb      	ldrh	r3, [r7, #20]
 8004b04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3790      	adds	r7, #144	; 0x90
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b087      	sub	sp, #28
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	607b      	str	r3, [r7, #4]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	817b      	strh	r3, [r7, #10]
 8004b30:	4613      	mov	r3, r2
 8004b32:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004b34:	897b      	ldrh	r3, [r7, #10]
 8004b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00b      	beq.n	8004b58 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b40:	897b      	ldrh	r3, [r7, #10]
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	1c5a      	adds	r2, r3, #1
 8004b48:	4613      	mov	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	4413      	add	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	e009      	b.n	8004b6c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004b58:	897a      	ldrh	r2, [r7, #10]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	4413      	add	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004b6c:	893b      	ldrh	r3, [r7, #8]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d107      	bne.n	8004b82 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2200      	movs	r2, #0
 8004b76:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	80da      	strh	r2, [r3, #6]
 8004b80:	e00b      	b.n	8004b9a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2201      	movs	r2, #1
 8004b86:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	0c1b      	lsrs	r3, r3, #16
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	371c      	adds	r7, #28
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bc80      	pop	{r7}
 8004ba4:	4770      	bx	lr
	...

08004ba8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e272      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 8087 	beq.w	8004cd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bc8:	4b92      	ldr	r3, [pc, #584]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f003 030c 	and.w	r3, r3, #12
 8004bd0:	2b04      	cmp	r3, #4
 8004bd2:	d00c      	beq.n	8004bee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004bd4:	4b8f      	ldr	r3, [pc, #572]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f003 030c 	and.w	r3, r3, #12
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d112      	bne.n	8004c06 <HAL_RCC_OscConfig+0x5e>
 8004be0:	4b8c      	ldr	r3, [pc, #560]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bec:	d10b      	bne.n	8004c06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bee:	4b89      	ldr	r3, [pc, #548]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d06c      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x12c>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d168      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e24c      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c0e:	d106      	bne.n	8004c1e <HAL_RCC_OscConfig+0x76>
 8004c10:	4b80      	ldr	r3, [pc, #512]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a7f      	ldr	r2, [pc, #508]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c1a:	6013      	str	r3, [r2, #0]
 8004c1c:	e02e      	b.n	8004c7c <HAL_RCC_OscConfig+0xd4>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10c      	bne.n	8004c40 <HAL_RCC_OscConfig+0x98>
 8004c26:	4b7b      	ldr	r3, [pc, #492]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a7a      	ldr	r2, [pc, #488]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c30:	6013      	str	r3, [r2, #0]
 8004c32:	4b78      	ldr	r3, [pc, #480]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a77      	ldr	r2, [pc, #476]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004c38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c3c:	6013      	str	r3, [r2, #0]
 8004c3e:	e01d      	b.n	8004c7c <HAL_RCC_OscConfig+0xd4>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c48:	d10c      	bne.n	8004c64 <HAL_RCC_OscConfig+0xbc>
 8004c4a:	4b72      	ldr	r3, [pc, #456]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a71      	ldr	r2, [pc, #452]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c54:	6013      	str	r3, [r2, #0]
 8004c56:	4b6f      	ldr	r3, [pc, #444]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a6e      	ldr	r2, [pc, #440]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c60:	6013      	str	r3, [r2, #0]
 8004c62:	e00b      	b.n	8004c7c <HAL_RCC_OscConfig+0xd4>
 8004c64:	4b6b      	ldr	r3, [pc, #428]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a6a      	ldr	r2, [pc, #424]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c6e:	6013      	str	r3, [r2, #0]
 8004c70:	4b68      	ldr	r3, [pc, #416]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a67      	ldr	r2, [pc, #412]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d013      	beq.n	8004cac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c84:	f7fc ff08 	bl	8001a98 <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c8c:	f7fc ff04 	bl	8001a98 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b64      	cmp	r3, #100	; 0x64
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e200      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c9e:	4b5d      	ldr	r3, [pc, #372]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0f0      	beq.n	8004c8c <HAL_RCC_OscConfig+0xe4>
 8004caa:	e014      	b.n	8004cd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cac:	f7fc fef4 	bl	8001a98 <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cb4:	f7fc fef0 	bl	8001a98 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b64      	cmp	r3, #100	; 0x64
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e1ec      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cc6:	4b53      	ldr	r3, [pc, #332]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1f0      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x10c>
 8004cd2:	e000      	b.n	8004cd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d063      	beq.n	8004daa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ce2:	4b4c      	ldr	r3, [pc, #304]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f003 030c 	and.w	r3, r3, #12
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00b      	beq.n	8004d06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004cee:	4b49      	ldr	r3, [pc, #292]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f003 030c 	and.w	r3, r3, #12
 8004cf6:	2b08      	cmp	r3, #8
 8004cf8:	d11c      	bne.n	8004d34 <HAL_RCC_OscConfig+0x18c>
 8004cfa:	4b46      	ldr	r3, [pc, #280]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d116      	bne.n	8004d34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d06:	4b43      	ldr	r3, [pc, #268]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d005      	beq.n	8004d1e <HAL_RCC_OscConfig+0x176>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d001      	beq.n	8004d1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e1c0      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d1e:	4b3d      	ldr	r3, [pc, #244]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	4939      	ldr	r1, [pc, #228]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d32:	e03a      	b.n	8004daa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d020      	beq.n	8004d7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d3c:	4b36      	ldr	r3, [pc, #216]	; (8004e18 <HAL_RCC_OscConfig+0x270>)
 8004d3e:	2201      	movs	r2, #1
 8004d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d42:	f7fc fea9 	bl	8001a98 <HAL_GetTick>
 8004d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d48:	e008      	b.n	8004d5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d4a:	f7fc fea5 	bl	8001a98 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d901      	bls.n	8004d5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e1a1      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d5c:	4b2d      	ldr	r3, [pc, #180]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d0f0      	beq.n	8004d4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d68:	4b2a      	ldr	r3, [pc, #168]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	4927      	ldr	r1, [pc, #156]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	600b      	str	r3, [r1, #0]
 8004d7c:	e015      	b.n	8004daa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d7e:	4b26      	ldr	r3, [pc, #152]	; (8004e18 <HAL_RCC_OscConfig+0x270>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d84:	f7fc fe88 	bl	8001a98 <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d8c:	f7fc fe84 	bl	8001a98 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e180      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d9e:	4b1d      	ldr	r3, [pc, #116]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1f0      	bne.n	8004d8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0308 	and.w	r3, r3, #8
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d03a      	beq.n	8004e2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d019      	beq.n	8004df2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dbe:	4b17      	ldr	r3, [pc, #92]	; (8004e1c <HAL_RCC_OscConfig+0x274>)
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dc4:	f7fc fe68 	bl	8001a98 <HAL_GetTick>
 8004dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dcc:	f7fc fe64 	bl	8001a98 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e160      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dde:	4b0d      	ldr	r3, [pc, #52]	; (8004e14 <HAL_RCC_OscConfig+0x26c>)
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0f0      	beq.n	8004dcc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004dea:	2001      	movs	r0, #1
 8004dec:	f000 faba 	bl	8005364 <RCC_Delay>
 8004df0:	e01c      	b.n	8004e2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004df2:	4b0a      	ldr	r3, [pc, #40]	; (8004e1c <HAL_RCC_OscConfig+0x274>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004df8:	f7fc fe4e 	bl	8001a98 <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dfe:	e00f      	b.n	8004e20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e00:	f7fc fe4a 	bl	8001a98 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d908      	bls.n	8004e20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e146      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>
 8004e12:	bf00      	nop
 8004e14:	40021000 	.word	0x40021000
 8004e18:	42420000 	.word	0x42420000
 8004e1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e20:	4b92      	ldr	r3, [pc, #584]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1e9      	bne.n	8004e00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0304 	and.w	r3, r3, #4
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 80a6 	beq.w	8004f86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e3e:	4b8b      	ldr	r3, [pc, #556]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10d      	bne.n	8004e66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e4a:	4b88      	ldr	r3, [pc, #544]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	4a87      	ldr	r2, [pc, #540]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e54:	61d3      	str	r3, [r2, #28]
 8004e56:	4b85      	ldr	r3, [pc, #532]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e5e:	60bb      	str	r3, [r7, #8]
 8004e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e62:	2301      	movs	r3, #1
 8004e64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e66:	4b82      	ldr	r3, [pc, #520]	; (8005070 <HAL_RCC_OscConfig+0x4c8>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d118      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e72:	4b7f      	ldr	r3, [pc, #508]	; (8005070 <HAL_RCC_OscConfig+0x4c8>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a7e      	ldr	r2, [pc, #504]	; (8005070 <HAL_RCC_OscConfig+0x4c8>)
 8004e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e7e:	f7fc fe0b 	bl	8001a98 <HAL_GetTick>
 8004e82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e84:	e008      	b.n	8004e98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e86:	f7fc fe07 	bl	8001a98 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b64      	cmp	r3, #100	; 0x64
 8004e92:	d901      	bls.n	8004e98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e103      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e98:	4b75      	ldr	r3, [pc, #468]	; (8005070 <HAL_RCC_OscConfig+0x4c8>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d0f0      	beq.n	8004e86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d106      	bne.n	8004eba <HAL_RCC_OscConfig+0x312>
 8004eac:	4b6f      	ldr	r3, [pc, #444]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	4a6e      	ldr	r2, [pc, #440]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004eb2:	f043 0301 	orr.w	r3, r3, #1
 8004eb6:	6213      	str	r3, [r2, #32]
 8004eb8:	e02d      	b.n	8004f16 <HAL_RCC_OscConfig+0x36e>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10c      	bne.n	8004edc <HAL_RCC_OscConfig+0x334>
 8004ec2:	4b6a      	ldr	r3, [pc, #424]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	4a69      	ldr	r2, [pc, #420]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004ec8:	f023 0301 	bic.w	r3, r3, #1
 8004ecc:	6213      	str	r3, [r2, #32]
 8004ece:	4b67      	ldr	r3, [pc, #412]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	4a66      	ldr	r2, [pc, #408]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004ed4:	f023 0304 	bic.w	r3, r3, #4
 8004ed8:	6213      	str	r3, [r2, #32]
 8004eda:	e01c      	b.n	8004f16 <HAL_RCC_OscConfig+0x36e>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	2b05      	cmp	r3, #5
 8004ee2:	d10c      	bne.n	8004efe <HAL_RCC_OscConfig+0x356>
 8004ee4:	4b61      	ldr	r3, [pc, #388]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	4a60      	ldr	r2, [pc, #384]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004eea:	f043 0304 	orr.w	r3, r3, #4
 8004eee:	6213      	str	r3, [r2, #32]
 8004ef0:	4b5e      	ldr	r3, [pc, #376]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	4a5d      	ldr	r2, [pc, #372]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004ef6:	f043 0301 	orr.w	r3, r3, #1
 8004efa:	6213      	str	r3, [r2, #32]
 8004efc:	e00b      	b.n	8004f16 <HAL_RCC_OscConfig+0x36e>
 8004efe:	4b5b      	ldr	r3, [pc, #364]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	4a5a      	ldr	r2, [pc, #360]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004f04:	f023 0301 	bic.w	r3, r3, #1
 8004f08:	6213      	str	r3, [r2, #32]
 8004f0a:	4b58      	ldr	r3, [pc, #352]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	4a57      	ldr	r2, [pc, #348]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004f10:	f023 0304 	bic.w	r3, r3, #4
 8004f14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d015      	beq.n	8004f4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f1e:	f7fc fdbb 	bl	8001a98 <HAL_GetTick>
 8004f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f24:	e00a      	b.n	8004f3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f26:	f7fc fdb7 	bl	8001a98 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d901      	bls.n	8004f3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e0b1      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f3c:	4b4b      	ldr	r3, [pc, #300]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d0ee      	beq.n	8004f26 <HAL_RCC_OscConfig+0x37e>
 8004f48:	e014      	b.n	8004f74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f4a:	f7fc fda5 	bl	8001a98 <HAL_GetTick>
 8004f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f50:	e00a      	b.n	8004f68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f52:	f7fc fda1 	bl	8001a98 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e09b      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f68:	4b40      	ldr	r3, [pc, #256]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1ee      	bne.n	8004f52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f74:	7dfb      	ldrb	r3, [r7, #23]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d105      	bne.n	8004f86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f7a:	4b3c      	ldr	r3, [pc, #240]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	4a3b      	ldr	r2, [pc, #236]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 8087 	beq.w	800509e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f90:	4b36      	ldr	r3, [pc, #216]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f003 030c 	and.w	r3, r3, #12
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d061      	beq.n	8005060 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d146      	bne.n	8005032 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fa4:	4b33      	ldr	r3, [pc, #204]	; (8005074 <HAL_RCC_OscConfig+0x4cc>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004faa:	f7fc fd75 	bl	8001a98 <HAL_GetTick>
 8004fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fb0:	e008      	b.n	8004fc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb2:	f7fc fd71 	bl	8001a98 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d901      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e06d      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fc4:	4b29      	ldr	r3, [pc, #164]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1f0      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd8:	d108      	bne.n	8004fec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004fda:	4b24      	ldr	r3, [pc, #144]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	4921      	ldr	r1, [pc, #132]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fec:	4b1f      	ldr	r3, [pc, #124]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a19      	ldr	r1, [r3, #32]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	430b      	orrs	r3, r1
 8004ffe:	491b      	ldr	r1, [pc, #108]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8005000:	4313      	orrs	r3, r2
 8005002:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005004:	4b1b      	ldr	r3, [pc, #108]	; (8005074 <HAL_RCC_OscConfig+0x4cc>)
 8005006:	2201      	movs	r2, #1
 8005008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800500a:	f7fc fd45 	bl	8001a98 <HAL_GetTick>
 800500e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005010:	e008      	b.n	8005024 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005012:	f7fc fd41 	bl	8001a98 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e03d      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005024:	4b11      	ldr	r3, [pc, #68]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0f0      	beq.n	8005012 <HAL_RCC_OscConfig+0x46a>
 8005030:	e035      	b.n	800509e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005032:	4b10      	ldr	r3, [pc, #64]	; (8005074 <HAL_RCC_OscConfig+0x4cc>)
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005038:	f7fc fd2e 	bl	8001a98 <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005040:	f7fc fd2a 	bl	8001a98 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e026      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005052:	4b06      	ldr	r3, [pc, #24]	; (800506c <HAL_RCC_OscConfig+0x4c4>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1f0      	bne.n	8005040 <HAL_RCC_OscConfig+0x498>
 800505e:	e01e      	b.n	800509e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	69db      	ldr	r3, [r3, #28]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d107      	bne.n	8005078 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e019      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>
 800506c:	40021000 	.word	0x40021000
 8005070:	40007000 	.word	0x40007000
 8005074:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005078:	4b0b      	ldr	r3, [pc, #44]	; (80050a8 <HAL_RCC_OscConfig+0x500>)
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	429a      	cmp	r2, r3
 800508a:	d106      	bne.n	800509a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005096:	429a      	cmp	r2, r3
 8005098:	d001      	beq.n	800509e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e000      	b.n	80050a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3718      	adds	r7, #24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	40021000 	.word	0x40021000

080050ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e0d0      	b.n	8005262 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050c0:	4b6a      	ldr	r3, [pc, #424]	; (800526c <HAL_RCC_ClockConfig+0x1c0>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d910      	bls.n	80050f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ce:	4b67      	ldr	r3, [pc, #412]	; (800526c <HAL_RCC_ClockConfig+0x1c0>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f023 0207 	bic.w	r2, r3, #7
 80050d6:	4965      	ldr	r1, [pc, #404]	; (800526c <HAL_RCC_ClockConfig+0x1c0>)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	4313      	orrs	r3, r2
 80050dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050de:	4b63      	ldr	r3, [pc, #396]	; (800526c <HAL_RCC_ClockConfig+0x1c0>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d001      	beq.n	80050f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e0b8      	b.n	8005262 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d020      	beq.n	800513e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b00      	cmp	r3, #0
 8005106:	d005      	beq.n	8005114 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005108:	4b59      	ldr	r3, [pc, #356]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	4a58      	ldr	r2, [pc, #352]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 800510e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005112:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0308 	and.w	r3, r3, #8
 800511c:	2b00      	cmp	r3, #0
 800511e:	d005      	beq.n	800512c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005120:	4b53      	ldr	r3, [pc, #332]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	4a52      	ldr	r2, [pc, #328]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 8005126:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800512a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800512c:	4b50      	ldr	r3, [pc, #320]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	494d      	ldr	r1, [pc, #308]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 800513a:	4313      	orrs	r3, r2
 800513c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d040      	beq.n	80051cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d107      	bne.n	8005162 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005152:	4b47      	ldr	r3, [pc, #284]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d115      	bne.n	800518a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e07f      	b.n	8005262 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	2b02      	cmp	r3, #2
 8005168:	d107      	bne.n	800517a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800516a:	4b41      	ldr	r3, [pc, #260]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d109      	bne.n	800518a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e073      	b.n	8005262 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800517a:	4b3d      	ldr	r3, [pc, #244]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e06b      	b.n	8005262 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800518a:	4b39      	ldr	r3, [pc, #228]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f023 0203 	bic.w	r2, r3, #3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	4936      	ldr	r1, [pc, #216]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 8005198:	4313      	orrs	r3, r2
 800519a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800519c:	f7fc fc7c 	bl	8001a98 <HAL_GetTick>
 80051a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051a2:	e00a      	b.n	80051ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051a4:	f7fc fc78 	bl	8001a98 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e053      	b.n	8005262 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ba:	4b2d      	ldr	r3, [pc, #180]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f003 020c 	and.w	r2, r3, #12
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d1eb      	bne.n	80051a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051cc:	4b27      	ldr	r3, [pc, #156]	; (800526c <HAL_RCC_ClockConfig+0x1c0>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0307 	and.w	r3, r3, #7
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d210      	bcs.n	80051fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051da:	4b24      	ldr	r3, [pc, #144]	; (800526c <HAL_RCC_ClockConfig+0x1c0>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f023 0207 	bic.w	r2, r3, #7
 80051e2:	4922      	ldr	r1, [pc, #136]	; (800526c <HAL_RCC_ClockConfig+0x1c0>)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ea:	4b20      	ldr	r3, [pc, #128]	; (800526c <HAL_RCC_ClockConfig+0x1c0>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d001      	beq.n	80051fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e032      	b.n	8005262 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b00      	cmp	r3, #0
 8005206:	d008      	beq.n	800521a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005208:	4b19      	ldr	r3, [pc, #100]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	4916      	ldr	r1, [pc, #88]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 8005216:	4313      	orrs	r3, r2
 8005218:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0308 	and.w	r3, r3, #8
 8005222:	2b00      	cmp	r3, #0
 8005224:	d009      	beq.n	800523a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005226:	4b12      	ldr	r3, [pc, #72]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	490e      	ldr	r1, [pc, #56]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 8005236:	4313      	orrs	r3, r2
 8005238:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800523a:	f000 f821 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 800523e:	4602      	mov	r2, r0
 8005240:	4b0b      	ldr	r3, [pc, #44]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	091b      	lsrs	r3, r3, #4
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	490a      	ldr	r1, [pc, #40]	; (8005274 <HAL_RCC_ClockConfig+0x1c8>)
 800524c:	5ccb      	ldrb	r3, [r1, r3]
 800524e:	fa22 f303 	lsr.w	r3, r2, r3
 8005252:	4a09      	ldr	r2, [pc, #36]	; (8005278 <HAL_RCC_ClockConfig+0x1cc>)
 8005254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005256:	4b09      	ldr	r3, [pc, #36]	; (800527c <HAL_RCC_ClockConfig+0x1d0>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4618      	mov	r0, r3
 800525c:	f7fc fbda 	bl	8001a14 <HAL_InitTick>

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	40022000 	.word	0x40022000
 8005270:	40021000 	.word	0x40021000
 8005274:	0800e5b0 	.word	0x0800e5b0
 8005278:	20000000 	.word	0x20000000
 800527c:	20000004 	.word	0x20000004

08005280 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005286:	2300      	movs	r3, #0
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	2300      	movs	r3, #0
 800528c:	60bb      	str	r3, [r7, #8]
 800528e:	2300      	movs	r3, #0
 8005290:	617b      	str	r3, [r7, #20]
 8005292:	2300      	movs	r3, #0
 8005294:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005296:	2300      	movs	r3, #0
 8005298:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800529a:	4b1e      	ldr	r3, [pc, #120]	; (8005314 <HAL_RCC_GetSysClockFreq+0x94>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f003 030c 	and.w	r3, r3, #12
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	d002      	beq.n	80052b0 <HAL_RCC_GetSysClockFreq+0x30>
 80052aa:	2b08      	cmp	r3, #8
 80052ac:	d003      	beq.n	80052b6 <HAL_RCC_GetSysClockFreq+0x36>
 80052ae:	e027      	b.n	8005300 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80052b0:	4b19      	ldr	r3, [pc, #100]	; (8005318 <HAL_RCC_GetSysClockFreq+0x98>)
 80052b2:	613b      	str	r3, [r7, #16]
      break;
 80052b4:	e027      	b.n	8005306 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	0c9b      	lsrs	r3, r3, #18
 80052ba:	f003 030f 	and.w	r3, r3, #15
 80052be:	4a17      	ldr	r2, [pc, #92]	; (800531c <HAL_RCC_GetSysClockFreq+0x9c>)
 80052c0:	5cd3      	ldrb	r3, [r2, r3]
 80052c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d010      	beq.n	80052f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80052ce:	4b11      	ldr	r3, [pc, #68]	; (8005314 <HAL_RCC_GetSysClockFreq+0x94>)
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	0c5b      	lsrs	r3, r3, #17
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	4a11      	ldr	r2, [pc, #68]	; (8005320 <HAL_RCC_GetSysClockFreq+0xa0>)
 80052da:	5cd3      	ldrb	r3, [r2, r3]
 80052dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a0d      	ldr	r2, [pc, #52]	; (8005318 <HAL_RCC_GetSysClockFreq+0x98>)
 80052e2:	fb03 f202 	mul.w	r2, r3, r2
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ec:	617b      	str	r3, [r7, #20]
 80052ee:	e004      	b.n	80052fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a0c      	ldr	r2, [pc, #48]	; (8005324 <HAL_RCC_GetSysClockFreq+0xa4>)
 80052f4:	fb02 f303 	mul.w	r3, r2, r3
 80052f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	613b      	str	r3, [r7, #16]
      break;
 80052fe:	e002      	b.n	8005306 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005300:	4b05      	ldr	r3, [pc, #20]	; (8005318 <HAL_RCC_GetSysClockFreq+0x98>)
 8005302:	613b      	str	r3, [r7, #16]
      break;
 8005304:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005306:	693b      	ldr	r3, [r7, #16]
}
 8005308:	4618      	mov	r0, r3
 800530a:	371c      	adds	r7, #28
 800530c:	46bd      	mov	sp, r7
 800530e:	bc80      	pop	{r7}
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	40021000 	.word	0x40021000
 8005318:	007a1200 	.word	0x007a1200
 800531c:	0800e5c8 	.word	0x0800e5c8
 8005320:	0800e5d8 	.word	0x0800e5d8
 8005324:	003d0900 	.word	0x003d0900

08005328 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800532c:	4b02      	ldr	r3, [pc, #8]	; (8005338 <HAL_RCC_GetHCLKFreq+0x10>)
 800532e:	681b      	ldr	r3, [r3, #0]
}
 8005330:	4618      	mov	r0, r3
 8005332:	46bd      	mov	sp, r7
 8005334:	bc80      	pop	{r7}
 8005336:	4770      	bx	lr
 8005338:	20000000 	.word	0x20000000

0800533c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005340:	f7ff fff2 	bl	8005328 <HAL_RCC_GetHCLKFreq>
 8005344:	4602      	mov	r2, r0
 8005346:	4b05      	ldr	r3, [pc, #20]	; (800535c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	0a1b      	lsrs	r3, r3, #8
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	4903      	ldr	r1, [pc, #12]	; (8005360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005352:	5ccb      	ldrb	r3, [r1, r3]
 8005354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005358:	4618      	mov	r0, r3
 800535a:	bd80      	pop	{r7, pc}
 800535c:	40021000 	.word	0x40021000
 8005360:	0800e5c0 	.word	0x0800e5c0

08005364 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800536c:	4b0a      	ldr	r3, [pc, #40]	; (8005398 <RCC_Delay+0x34>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a0a      	ldr	r2, [pc, #40]	; (800539c <RCC_Delay+0x38>)
 8005372:	fba2 2303 	umull	r2, r3, r2, r3
 8005376:	0a5b      	lsrs	r3, r3, #9
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	fb02 f303 	mul.w	r3, r2, r3
 800537e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005380:	bf00      	nop
  }
  while (Delay --);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	1e5a      	subs	r2, r3, #1
 8005386:	60fa      	str	r2, [r7, #12]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1f9      	bne.n	8005380 <RCC_Delay+0x1c>
}
 800538c:	bf00      	nop
 800538e:	bf00      	nop
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	bc80      	pop	{r7}
 8005396:	4770      	bx	lr
 8005398:	20000000 	.word	0x20000000
 800539c:	10624dd3 	.word	0x10624dd3

080053a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	613b      	str	r3, [r7, #16]
 80053ac:	2300      	movs	r3, #0
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d07d      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80053bc:	2300      	movs	r3, #0
 80053be:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053c0:	4b4f      	ldr	r3, [pc, #316]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053c2:	69db      	ldr	r3, [r3, #28]
 80053c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10d      	bne.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053cc:	4b4c      	ldr	r3, [pc, #304]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053ce:	69db      	ldr	r3, [r3, #28]
 80053d0:	4a4b      	ldr	r2, [pc, #300]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053d6:	61d3      	str	r3, [r2, #28]
 80053d8:	4b49      	ldr	r3, [pc, #292]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053da:	69db      	ldr	r3, [r3, #28]
 80053dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053e0:	60bb      	str	r3, [r7, #8]
 80053e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053e4:	2301      	movs	r3, #1
 80053e6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053e8:	4b46      	ldr	r3, [pc, #280]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d118      	bne.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053f4:	4b43      	ldr	r3, [pc, #268]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a42      	ldr	r2, [pc, #264]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005400:	f7fc fb4a 	bl	8001a98 <HAL_GetTick>
 8005404:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005406:	e008      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005408:	f7fc fb46 	bl	8001a98 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b64      	cmp	r3, #100	; 0x64
 8005414:	d901      	bls.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e06d      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800541a:	4b3a      	ldr	r3, [pc, #232]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005422:	2b00      	cmp	r3, #0
 8005424:	d0f0      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005426:	4b36      	ldr	r3, [pc, #216]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800542e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d02e      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	429a      	cmp	r2, r3
 8005442:	d027      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005444:	4b2e      	ldr	r3, [pc, #184]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800544c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800544e:	4b2e      	ldr	r3, [pc, #184]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005450:	2201      	movs	r2, #1
 8005452:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005454:	4b2c      	ldr	r3, [pc, #176]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005456:	2200      	movs	r2, #0
 8005458:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800545a:	4a29      	ldr	r2, [pc, #164]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d014      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800546a:	f7fc fb15 	bl	8001a98 <HAL_GetTick>
 800546e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005470:	e00a      	b.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005472:	f7fc fb11 	bl	8001a98 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005480:	4293      	cmp	r3, r2
 8005482:	d901      	bls.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e036      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005488:	4b1d      	ldr	r3, [pc, #116]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d0ee      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005494:	4b1a      	ldr	r3, [pc, #104]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005496:	6a1b      	ldr	r3, [r3, #32]
 8005498:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	4917      	ldr	r1, [pc, #92]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80054a6:	7dfb      	ldrb	r3, [r7, #23]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d105      	bne.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054ac:	4b14      	ldr	r3, [pc, #80]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	4a13      	ldr	r2, [pc, #76]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d008      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054c4:	4b0e      	ldr	r3, [pc, #56]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	490b      	ldr	r1, [pc, #44]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0310 	and.w	r3, r3, #16
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d008      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054e2:	4b07      	ldr	r3, [pc, #28]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	4904      	ldr	r1, [pc, #16]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3718      	adds	r7, #24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	40021000 	.word	0x40021000
 8005504:	40007000 	.word	0x40007000
 8005508:	42420440 	.word	0x42420440

0800550c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800550c:	b084      	sub	sp, #16
 800550e:	b480      	push	{r7}
 8005510:	b083      	sub	sp, #12
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
 8005516:	f107 0014 	add.w	r0, r7, #20
 800551a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	bc80      	pop	{r7}
 8005528:	b004      	add	sp, #16
 800552a:	4770      	bx	lr

0800552c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800553c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005540:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	b29a      	uxth	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	bc80      	pop	{r7}
 8005556:	4770      	bx	lr

08005558 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005560:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005564:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800556c:	b29a      	uxth	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	b29b      	uxth	r3, r3
 8005572:	43db      	mvns	r3, r3
 8005574:	b29b      	uxth	r3, r3
 8005576:	4013      	ands	r3, r2
 8005578:	b29a      	uxth	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	bc80      	pop	{r7}
 800558a:	4770      	bx	lr

0800558c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	460b      	mov	r3, r1
 8005596:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	bc80      	pop	{r7}
 80055a2:	4770      	bx	lr

080055a4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80055a4:	b084      	sub	sp, #16
 80055a6:	b480      	push	{r7}
 80055a8:	b083      	sub	sp, #12
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
 80055ae:	f107 0014 	add.w	r0, r7, #20
 80055b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	bc80      	pop	{r7}
 80055e0:	b004      	add	sp, #16
 80055e2:	4770      	bx	lr

080055e4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b09d      	sub	sp, #116	; 0x74
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	b29b      	uxth	r3, r3
 8005602:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	78db      	ldrb	r3, [r3, #3]
 8005612:	2b03      	cmp	r3, #3
 8005614:	d81f      	bhi.n	8005656 <USB_ActivateEndpoint+0x72>
 8005616:	a201      	add	r2, pc, #4	; (adr r2, 800561c <USB_ActivateEndpoint+0x38>)
 8005618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561c:	0800562d 	.word	0x0800562d
 8005620:	08005649 	.word	0x08005649
 8005624:	0800565f 	.word	0x0800565f
 8005628:	0800563b 	.word	0x0800563b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800562c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005630:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005634:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005638:	e012      	b.n	8005660 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800563a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800563e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005642:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005646:	e00b      	b.n	8005660 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005648:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800564c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005650:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005654:	e004      	b.n	8005660 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800565c:	e000      	b.n	8005660 <USB_ActivateEndpoint+0x7c>
      break;
 800565e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	441a      	add	r2, r3
 800566a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800566e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005672:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800567a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800567e:	b29b      	uxth	r3, r3
 8005680:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	b29b      	uxth	r3, r3
 8005690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005698:	b29a      	uxth	r2, r3
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	b29b      	uxth	r3, r3
 80056a0:	4313      	orrs	r3, r2
 80056a2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	441a      	add	r2, r3
 80056b0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80056b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	7b1b      	ldrb	r3, [r3, #12]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f040 8178 	bne.w	80059c2 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	785b      	ldrb	r3, [r3, #1]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f000 8084 	beq.w	80057e4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	61bb      	str	r3, [r7, #24]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	461a      	mov	r2, r3
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	4413      	add	r3, r2
 80056ee:	61bb      	str	r3, [r7, #24]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	011a      	lsls	r2, r3, #4
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056fe:	617b      	str	r3, [r7, #20]
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	88db      	ldrh	r3, [r3, #6]
 8005704:	085b      	lsrs	r3, r3, #1
 8005706:	b29b      	uxth	r3, r3
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	b29a      	uxth	r2, r3
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	827b      	strh	r3, [r7, #18]
 800571e:	8a7b      	ldrh	r3, [r7, #18]
 8005720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005724:	2b00      	cmp	r3, #0
 8005726:	d01b      	beq.n	8005760 <USB_ActivateEndpoint+0x17c>
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	881b      	ldrh	r3, [r3, #0]
 8005734:	b29b      	uxth	r3, r3
 8005736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800573a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573e:	823b      	strh	r3, [r7, #16]
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	441a      	add	r2, r3
 800574a:	8a3b      	ldrh	r3, [r7, #16]
 800574c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005758:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800575c:	b29b      	uxth	r3, r3
 800575e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	78db      	ldrb	r3, [r3, #3]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d020      	beq.n	80057aa <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	b29b      	uxth	r3, r3
 8005776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800577a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800577e:	81bb      	strh	r3, [r7, #12]
 8005780:	89bb      	ldrh	r3, [r7, #12]
 8005782:	f083 0320 	eor.w	r3, r3, #32
 8005786:	81bb      	strh	r3, [r7, #12]
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	441a      	add	r2, r3
 8005792:	89bb      	ldrh	r3, [r7, #12]
 8005794:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005798:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800579c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	8013      	strh	r3, [r2, #0]
 80057a8:	e2d5      	b.n	8005d56 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057c0:	81fb      	strh	r3, [r7, #14]
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	441a      	add	r2, r3
 80057cc:	89fb      	ldrh	r3, [r7, #14]
 80057ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057de:	b29b      	uxth	r3, r3
 80057e0:	8013      	strh	r3, [r2, #0]
 80057e2:	e2b8      	b.n	8005d56 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	633b      	str	r3, [r7, #48]	; 0x30
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	461a      	mov	r2, r3
 80057f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f4:	4413      	add	r3, r2
 80057f6:	633b      	str	r3, [r7, #48]	; 0x30
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	011a      	lsls	r2, r3, #4
 80057fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005800:	4413      	add	r3, r2
 8005802:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005806:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	88db      	ldrh	r3, [r3, #6]
 800580c:	085b      	lsrs	r3, r3, #1
 800580e:	b29b      	uxth	r3, r3
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	b29a      	uxth	r2, r3
 8005814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005816:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	62bb      	str	r3, [r7, #40]	; 0x28
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005822:	b29b      	uxth	r3, r3
 8005824:	461a      	mov	r2, r3
 8005826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005828:	4413      	add	r3, r2
 800582a:	62bb      	str	r3, [r7, #40]	; 0x28
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	011a      	lsls	r2, r3, #4
 8005832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005834:	4413      	add	r3, r2
 8005836:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800583a:	627b      	str	r3, [r7, #36]	; 0x24
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	881b      	ldrh	r3, [r3, #0]
 8005840:	b29b      	uxth	r3, r3
 8005842:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005846:	b29a      	uxth	r2, r3
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	801a      	strh	r2, [r3, #0]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	2b3e      	cmp	r3, #62	; 0x3e
 8005852:	d91d      	bls.n	8005890 <USB_ActivateEndpoint+0x2ac>
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	095b      	lsrs	r3, r3, #5
 800585a:	66bb      	str	r3, [r7, #104]	; 0x68
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	f003 031f 	and.w	r3, r3, #31
 8005864:	2b00      	cmp	r3, #0
 8005866:	d102      	bne.n	800586e <USB_ActivateEndpoint+0x28a>
 8005868:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800586a:	3b01      	subs	r3, #1
 800586c:	66bb      	str	r3, [r7, #104]	; 0x68
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005870:	881b      	ldrh	r3, [r3, #0]
 8005872:	b29a      	uxth	r2, r3
 8005874:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005876:	b29b      	uxth	r3, r3
 8005878:	029b      	lsls	r3, r3, #10
 800587a:	b29b      	uxth	r3, r3
 800587c:	4313      	orrs	r3, r2
 800587e:	b29b      	uxth	r3, r3
 8005880:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005884:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005888:	b29a      	uxth	r2, r3
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	801a      	strh	r2, [r3, #0]
 800588e:	e026      	b.n	80058de <USB_ActivateEndpoint+0x2fa>
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d10a      	bne.n	80058ae <USB_ActivateEndpoint+0x2ca>
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	881b      	ldrh	r3, [r3, #0]
 800589c:	b29b      	uxth	r3, r3
 800589e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	801a      	strh	r2, [r3, #0]
 80058ac:	e017      	b.n	80058de <USB_ActivateEndpoint+0x2fa>
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	085b      	lsrs	r3, r3, #1
 80058b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <USB_ActivateEndpoint+0x2e4>
 80058c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058c4:	3301      	adds	r3, #1
 80058c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	881b      	ldrh	r3, [r3, #0]
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	029b      	lsls	r3, r3, #10
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	4313      	orrs	r3, r2
 80058d8:	b29a      	uxth	r2, r3
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80058ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80058ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d01b      	beq.n	800592e <USB_ActivateEndpoint+0x34a>
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	b29b      	uxth	r3, r3
 8005904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800590c:	843b      	strh	r3, [r7, #32]
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	441a      	add	r2, r3
 8005918:	8c3b      	ldrh	r3, [r7, #32]
 800591a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800591e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005922:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800592a:	b29b      	uxth	r3, r3
 800592c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d124      	bne.n	8005980 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4413      	add	r3, r2
 8005940:	881b      	ldrh	r3, [r3, #0]
 8005942:	b29b      	uxth	r3, r3
 8005944:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594c:	83bb      	strh	r3, [r7, #28]
 800594e:	8bbb      	ldrh	r3, [r7, #28]
 8005950:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005954:	83bb      	strh	r3, [r7, #28]
 8005956:	8bbb      	ldrh	r3, [r7, #28]
 8005958:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800595c:	83bb      	strh	r3, [r7, #28]
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	441a      	add	r2, r3
 8005968:	8bbb      	ldrh	r3, [r7, #28]
 800596a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800596e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800597a:	b29b      	uxth	r3, r3
 800597c:	8013      	strh	r3, [r2, #0]
 800597e:	e1ea      	b.n	8005d56 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	b29b      	uxth	r3, r3
 800598e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005996:	83fb      	strh	r3, [r7, #30]
 8005998:	8bfb      	ldrh	r3, [r7, #30]
 800599a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800599e:	83fb      	strh	r3, [r7, #30]
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	441a      	add	r2, r3
 80059aa:	8bfb      	ldrh	r3, [r7, #30]
 80059ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059bc:	b29b      	uxth	r3, r3
 80059be:	8013      	strh	r3, [r2, #0]
 80059c0:	e1c9      	b.n	8005d56 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	78db      	ldrb	r3, [r3, #3]
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d11e      	bne.n	8005a08 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	881b      	ldrh	r3, [r3, #0]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	441a      	add	r2, r3
 80059ee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80059f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059fa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80059fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	8013      	strh	r3, [r2, #0]
 8005a06:	e01d      	b.n	8005a44 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	881b      	ldrh	r3, [r3, #0]
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	441a      	add	r2, r3
 8005a2c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005a30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	461a      	mov	r2, r3
 8005a52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a54:	4413      	add	r3, r2
 8005a56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	011a      	lsls	r2, r3, #4
 8005a5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a66:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	891b      	ldrh	r3, [r3, #8]
 8005a6c:	085b      	lsrs	r3, r3, #1
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	005b      	lsls	r3, r3, #1
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a76:	801a      	strh	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	657b      	str	r3, [r7, #84]	; 0x54
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	461a      	mov	r2, r3
 8005a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a88:	4413      	add	r3, r2
 8005a8a:	657b      	str	r3, [r7, #84]	; 0x54
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	011a      	lsls	r2, r3, #4
 8005a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005a9a:	653b      	str	r3, [r7, #80]	; 0x50
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	895b      	ldrh	r3, [r3, #10]
 8005aa0:	085b      	lsrs	r3, r3, #1
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	005b      	lsls	r3, r3, #1
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aaa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	785b      	ldrb	r3, [r3, #1]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f040 8093 	bne.w	8005bdc <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005ac6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d01b      	beq.n	8005b0a <USB_ActivateEndpoint+0x526>
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	441a      	add	r2, r3
 8005af4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005af6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005afa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005afe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4413      	add	r3, r2
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005b18:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d01b      	beq.n	8005b5a <USB_ActivateEndpoint+0x576>
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4413      	add	r3, r2
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b38:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	441a      	add	r2, r3
 8005b44:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005b46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4413      	add	r3, r2
 8005b64:	881b      	ldrh	r3, [r3, #0]
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b70:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b72:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b74:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b78:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b7a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b80:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	441a      	add	r2, r3
 8005b8c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	881b      	ldrh	r3, [r3, #0]
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bb8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	441a      	add	r2, r3
 8005bc4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005bc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	8013      	strh	r3, [r2, #0]
 8005bda:	e0bc      	b.n	8005d56 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005bec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005bf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d01d      	beq.n	8005c34 <USB_ActivateEndpoint+0x650>
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	881b      	ldrh	r3, [r3, #0]
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	441a      	add	r2, r3
 8005c1c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005c20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4413      	add	r3, r2
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005c44:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d01d      	beq.n	8005c8c <USB_ActivateEndpoint+0x6a8>
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4413      	add	r3, r2
 8005c5a:	881b      	ldrh	r3, [r3, #0]
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c66:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	441a      	add	r2, r3
 8005c74:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005c78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	78db      	ldrb	r3, [r3, #3]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d024      	beq.n	8005cde <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	881b      	ldrh	r3, [r3, #0]
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005caa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005cae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005cb2:	f083 0320 	eor.w	r3, r3, #32
 8005cb6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	441a      	add	r2, r3
 8005cc4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005cc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ccc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	8013      	strh	r3, [r2, #0]
 8005cdc:	e01d      	b.n	8005d1a <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4413      	add	r3, r2
 8005ce8:	881b      	ldrh	r3, [r3, #0]
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cf4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	441a      	add	r2, r3
 8005d02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005d06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	881b      	ldrh	r3, [r3, #0]
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d30:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	441a      	add	r2, r3
 8005d3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005d42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005d56:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3774      	adds	r7, #116	; 0x74
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bc80      	pop	{r7}
 8005d62:	4770      	bx	lr

08005d64 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b08d      	sub	sp, #52	; 0x34
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	7b1b      	ldrb	r3, [r3, #12]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f040 808e 	bne.w	8005e94 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	785b      	ldrb	r3, [r3, #1]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d044      	beq.n	8005e0a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	81bb      	strh	r3, [r7, #12]
 8005d8e:	89bb      	ldrh	r3, [r7, #12]
 8005d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d01b      	beq.n	8005dd0 <USB_DeactivateEndpoint+0x6c>
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dae:	817b      	strh	r3, [r7, #10]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	441a      	add	r2, r3
 8005dba:	897b      	ldrh	r3, [r7, #10]
 8005dbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005de6:	813b      	strh	r3, [r7, #8]
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	441a      	add	r2, r3
 8005df2:	893b      	ldrh	r3, [r7, #8]
 8005df4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005df8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	8013      	strh	r3, [r2, #0]
 8005e08:	e192      	b.n	8006130 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	827b      	strh	r3, [r7, #18]
 8005e18:	8a7b      	ldrh	r3, [r7, #18]
 8005e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d01b      	beq.n	8005e5a <USB_DeactivateEndpoint+0xf6>
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e38:	823b      	strh	r3, [r7, #16]
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	441a      	add	r2, r3
 8005e44:	8a3b      	ldrh	r3, [r7, #16]
 8005e46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	881b      	ldrh	r3, [r3, #0]
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e70:	81fb      	strh	r3, [r7, #14]
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	441a      	add	r2, r3
 8005e7c:	89fb      	ldrh	r3, [r7, #14]
 8005e7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	8013      	strh	r3, [r2, #0]
 8005e92:	e14d      	b.n	8006130 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	785b      	ldrb	r3, [r3, #1]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f040 80a5 	bne.w	8005fe8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	4413      	add	r3, r2
 8005ea8:	881b      	ldrh	r3, [r3, #0]
 8005eaa:	843b      	strh	r3, [r7, #32]
 8005eac:	8c3b      	ldrh	r3, [r7, #32]
 8005eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d01b      	beq.n	8005eee <USB_DeactivateEndpoint+0x18a>
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	881b      	ldrh	r3, [r3, #0]
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ecc:	83fb      	strh	r3, [r7, #30]
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	441a      	add	r2, r3
 8005ed8:	8bfb      	ldrh	r3, [r7, #30]
 8005eda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ede:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ee2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4413      	add	r3, r2
 8005ef8:	881b      	ldrh	r3, [r3, #0]
 8005efa:	83bb      	strh	r3, [r7, #28]
 8005efc:	8bbb      	ldrh	r3, [r7, #28]
 8005efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d01b      	beq.n	8005f3e <USB_DeactivateEndpoint+0x1da>
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f1c:	837b      	strh	r3, [r7, #26]
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	441a      	add	r2, r3
 8005f28:	8b7b      	ldrh	r3, [r7, #26]
 8005f2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4413      	add	r3, r2
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f54:	833b      	strh	r3, [r7, #24]
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	441a      	add	r2, r3
 8005f60:	8b3b      	ldrh	r3, [r7, #24]
 8005f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f6e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f8c:	82fb      	strh	r3, [r7, #22]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	441a      	add	r2, r3
 8005f98:	8afb      	ldrh	r3, [r7, #22]
 8005f9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4413      	add	r3, r2
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fc4:	82bb      	strh	r3, [r7, #20]
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	441a      	add	r2, r3
 8005fd0:	8abb      	ldrh	r3, [r7, #20]
 8005fd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	8013      	strh	r3, [r2, #0]
 8005fe6:	e0a3      	b.n	8006130 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005ff6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d01b      	beq.n	8006038 <USB_DeactivateEndpoint+0x2d4>
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	881b      	ldrh	r3, [r3, #0]
 800600c:	b29b      	uxth	r3, r3
 800600e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006016:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	441a      	add	r2, r3
 8006022:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006024:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006028:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800602c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006034:	b29b      	uxth	r3, r3
 8006036:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	881b      	ldrh	r3, [r3, #0]
 8006044:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006046:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604c:	2b00      	cmp	r3, #0
 800604e:	d01b      	beq.n	8006088 <USB_DeactivateEndpoint+0x324>
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	b29b      	uxth	r3, r3
 800605e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006066:	853b      	strh	r3, [r7, #40]	; 0x28
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	441a      	add	r2, r3
 8006072:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006074:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006078:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800607c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006080:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006084:	b29b      	uxth	r3, r3
 8006086:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	881b      	ldrh	r3, [r3, #0]
 8006094:	b29b      	uxth	r3, r3
 8006096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800609a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800609e:	84fb      	strh	r3, [r7, #38]	; 0x26
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	441a      	add	r2, r3
 80060aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060bc:	b29b      	uxth	r3, r3
 80060be:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	881b      	ldrh	r3, [r3, #0]
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060d6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	441a      	add	r2, r3
 80060e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	b29b      	uxth	r3, r3
 8006106:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800610a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	441a      	add	r2, r3
 800611a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800611c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006120:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006124:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800612c:	b29b      	uxth	r3, r3
 800612e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3734      	adds	r7, #52	; 0x34
 8006136:	46bd      	mov	sp, r7
 8006138:	bc80      	pop	{r7}
 800613a:	4770      	bx	lr

0800613c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b0c2      	sub	sp, #264	; 0x108
 8006140:	af00      	add	r7, sp, #0
 8006142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006146:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800614a:	6018      	str	r0, [r3, #0]
 800614c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006154:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800615a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	785b      	ldrb	r3, [r3, #1]
 8006162:	2b01      	cmp	r3, #1
 8006164:	f040 86b7 	bne.w	8006ed6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800616c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	699a      	ldr	r2, [r3, #24]
 8006174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	429a      	cmp	r2, r3
 8006182:	d908      	bls.n	8006196 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006194:	e007      	b.n	80061a6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800619a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80061a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	7b1b      	ldrb	r3, [r3, #12]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d13a      	bne.n	800622c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80061b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6959      	ldr	r1, [r3, #20]
 80061c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	88da      	ldrh	r2, [r3, #6]
 80061ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80061d8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80061dc:	6800      	ldr	r0, [r0, #0]
 80061de:	f001 fc9c 	bl	8007b1a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80061e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	613b      	str	r3, [r7, #16]
 80061ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	461a      	mov	r2, r3
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	4413      	add	r3, r2
 8006204:	613b      	str	r3, [r7, #16]
 8006206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800620a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	011a      	lsls	r2, r3, #4
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	4413      	add	r3, r2
 8006218:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800621c:	60fb      	str	r3, [r7, #12]
 800621e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006222:	b29a      	uxth	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	801a      	strh	r2, [r3, #0]
 8006228:	f000 be1f 	b.w	8006e6a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800622c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	78db      	ldrb	r3, [r3, #3]
 8006238:	2b02      	cmp	r3, #2
 800623a:	f040 8462 	bne.w	8006b02 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800623e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006242:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6a1a      	ldr	r2, [r3, #32]
 800624a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800624e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	429a      	cmp	r2, r3
 8006258:	f240 83df 	bls.w	8006a1a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800625c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006260:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800626a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	881b      	ldrh	r3, [r3, #0]
 8006278:	b29b      	uxth	r3, r3
 800627a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800627e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006282:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800628a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	441a      	add	r2, r3
 80062a0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80062a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ac:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80062b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80062b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	6a1a      	ldr	r2, [r3, #32]
 80062c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062c8:	1ad2      	subs	r2, r2, r3
 80062ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80062d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	4413      	add	r3, r2
 80062f0:	881b      	ldrh	r3, [r3, #0]
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 81c7 	beq.w	800668c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006302:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	633b      	str	r3, [r7, #48]	; 0x30
 800630a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800630e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	785b      	ldrb	r3, [r3, #1]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d177      	bne.n	800640a <USB_EPStartXfer+0x2ce>
 800631a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800631e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	62bb      	str	r3, [r7, #40]	; 0x28
 8006326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800632a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006334:	b29b      	uxth	r3, r3
 8006336:	461a      	mov	r2, r3
 8006338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633a:	4413      	add	r3, r2
 800633c:	62bb      	str	r3, [r7, #40]	; 0x28
 800633e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	011a      	lsls	r2, r3, #4
 800634c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634e:	4413      	add	r3, r2
 8006350:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006354:	627b      	str	r3, [r7, #36]	; 0x24
 8006356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	b29b      	uxth	r3, r3
 800635c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006360:	b29a      	uxth	r2, r3
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	801a      	strh	r2, [r3, #0]
 8006366:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800636a:	2b3e      	cmp	r3, #62	; 0x3e
 800636c:	d921      	bls.n	80063b2 <USB_EPStartXfer+0x276>
 800636e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006372:	095b      	lsrs	r3, r3, #5
 8006374:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800637c:	f003 031f 	and.w	r3, r3, #31
 8006380:	2b00      	cmp	r3, #0
 8006382:	d104      	bne.n	800638e <USB_EPStartXfer+0x252>
 8006384:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006388:	3b01      	subs	r3, #1
 800638a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	881b      	ldrh	r3, [r3, #0]
 8006392:	b29a      	uxth	r2, r3
 8006394:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006398:	b29b      	uxth	r3, r3
 800639a:	029b      	lsls	r3, r3, #10
 800639c:	b29b      	uxth	r3, r3
 800639e:	4313      	orrs	r3, r2
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ae:	801a      	strh	r2, [r3, #0]
 80063b0:	e050      	b.n	8006454 <USB_EPStartXfer+0x318>
 80063b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10a      	bne.n	80063d0 <USB_EPStartXfer+0x294>
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	881b      	ldrh	r3, [r3, #0]
 80063be:	b29b      	uxth	r3, r3
 80063c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	801a      	strh	r2, [r3, #0]
 80063ce:	e041      	b.n	8006454 <USB_EPStartXfer+0x318>
 80063d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063d4:	085b      	lsrs	r3, r3, #1
 80063d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80063da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d004      	beq.n	80063f0 <USB_EPStartXfer+0x2b4>
 80063e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80063ea:	3301      	adds	r3, #1
 80063ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	881b      	ldrh	r3, [r3, #0]
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	029b      	lsls	r3, r3, #10
 80063fe:	b29b      	uxth	r3, r3
 8006400:	4313      	orrs	r3, r2
 8006402:	b29a      	uxth	r2, r3
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	801a      	strh	r2, [r3, #0]
 8006408:	e024      	b.n	8006454 <USB_EPStartXfer+0x318>
 800640a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	785b      	ldrb	r3, [r3, #1]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d11c      	bne.n	8006454 <USB_EPStartXfer+0x318>
 800641a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800641e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006428:	b29b      	uxth	r3, r3
 800642a:	461a      	mov	r2, r3
 800642c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642e:	4413      	add	r3, r2
 8006430:	633b      	str	r3, [r7, #48]	; 0x30
 8006432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	011a      	lsls	r2, r3, #4
 8006440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006442:	4413      	add	r3, r2
 8006444:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006448:	62fb      	str	r3, [r7, #44]	; 0x2c
 800644a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800644e:	b29a      	uxth	r2, r3
 8006450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006452:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006458:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	895b      	ldrh	r3, [r3, #10]
 8006460:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006468:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6959      	ldr	r1, [r3, #20]
 8006470:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006474:	b29b      	uxth	r3, r3
 8006476:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800647a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800647e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006482:	6800      	ldr	r0, [r0, #0]
 8006484:	f001 fb49 	bl	8007b1a <USB_WritePMA>
            ep->xfer_buff += len;
 8006488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800648c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	695a      	ldr	r2, [r3, #20]
 8006494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006498:	441a      	add	r2, r3
 800649a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800649e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80064a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6a1a      	ldr	r2, [r3, #32]
 80064b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d90f      	bls.n	80064e2 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80064c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6a1a      	ldr	r2, [r3, #32]
 80064ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064d2:	1ad2      	subs	r2, r2, r3
 80064d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	621a      	str	r2, [r3, #32]
 80064e0:	e00e      	b.n	8006500 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80064e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80064f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2200      	movs	r2, #0
 80064fe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	785b      	ldrb	r3, [r3, #1]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d177      	bne.n	8006600 <USB_EPStartXfer+0x4c4>
 8006510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006514:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	61bb      	str	r3, [r7, #24]
 800651c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006520:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800652a:	b29b      	uxth	r3, r3
 800652c:	461a      	mov	r2, r3
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	4413      	add	r3, r2
 8006532:	61bb      	str	r3, [r7, #24]
 8006534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	011a      	lsls	r2, r3, #4
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	4413      	add	r3, r2
 8006546:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800654a:	617b      	str	r3, [r7, #20]
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	881b      	ldrh	r3, [r3, #0]
 8006550:	b29b      	uxth	r3, r3
 8006552:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006556:	b29a      	uxth	r2, r3
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	801a      	strh	r2, [r3, #0]
 800655c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006560:	2b3e      	cmp	r3, #62	; 0x3e
 8006562:	d921      	bls.n	80065a8 <USB_EPStartXfer+0x46c>
 8006564:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006568:	095b      	lsrs	r3, r3, #5
 800656a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800656e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006572:	f003 031f 	and.w	r3, r3, #31
 8006576:	2b00      	cmp	r3, #0
 8006578:	d104      	bne.n	8006584 <USB_EPStartXfer+0x448>
 800657a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800657e:	3b01      	subs	r3, #1
 8006580:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	b29a      	uxth	r2, r3
 800658a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800658e:	b29b      	uxth	r3, r3
 8006590:	029b      	lsls	r3, r3, #10
 8006592:	b29b      	uxth	r3, r3
 8006594:	4313      	orrs	r3, r2
 8006596:	b29b      	uxth	r3, r3
 8006598:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800659c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	801a      	strh	r2, [r3, #0]
 80065a6:	e056      	b.n	8006656 <USB_EPStartXfer+0x51a>
 80065a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10a      	bne.n	80065c6 <USB_EPStartXfer+0x48a>
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065be:	b29a      	uxth	r2, r3
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	801a      	strh	r2, [r3, #0]
 80065c4:	e047      	b.n	8006656 <USB_EPStartXfer+0x51a>
 80065c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ca:	085b      	lsrs	r3, r3, #1
 80065cc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d004      	beq.n	80065e6 <USB_EPStartXfer+0x4aa>
 80065dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065e0:	3301      	adds	r3, #1
 80065e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	881b      	ldrh	r3, [r3, #0]
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	029b      	lsls	r3, r3, #10
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	4313      	orrs	r3, r2
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	801a      	strh	r2, [r3, #0]
 80065fe:	e02a      	b.n	8006656 <USB_EPStartXfer+0x51a>
 8006600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	785b      	ldrb	r3, [r3, #1]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d122      	bne.n	8006656 <USB_EPStartXfer+0x51a>
 8006610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006614:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	623b      	str	r3, [r7, #32]
 800661c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006620:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800662a:	b29b      	uxth	r3, r3
 800662c:	461a      	mov	r2, r3
 800662e:	6a3b      	ldr	r3, [r7, #32]
 8006630:	4413      	add	r3, r2
 8006632:	623b      	str	r3, [r7, #32]
 8006634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006638:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	011a      	lsls	r2, r3, #4
 8006642:	6a3b      	ldr	r3, [r7, #32]
 8006644:	4413      	add	r3, r2
 8006646:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800664a:	61fb      	str	r3, [r7, #28]
 800664c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006650:	b29a      	uxth	r2, r3
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800665a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	891b      	ldrh	r3, [r3, #8]
 8006662:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800666a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6959      	ldr	r1, [r3, #20]
 8006672:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006676:	b29b      	uxth	r3, r3
 8006678:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800667c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006680:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006684:	6800      	ldr	r0, [r0, #0]
 8006686:	f001 fa48 	bl	8007b1a <USB_WritePMA>
 800668a:	e3ee      	b.n	8006e6a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800668c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006690:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	785b      	ldrb	r3, [r3, #1]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d177      	bne.n	800678c <USB_EPStartXfer+0x650>
 800669c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80066a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	461a      	mov	r2, r3
 80066ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066bc:	4413      	add	r3, r2
 80066be:	64bb      	str	r3, [r7, #72]	; 0x48
 80066c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	011a      	lsls	r2, r3, #4
 80066ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066d0:	4413      	add	r3, r2
 80066d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066d6:	647b      	str	r3, [r7, #68]	; 0x44
 80066d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	b29b      	uxth	r3, r3
 80066de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066e6:	801a      	strh	r2, [r3, #0]
 80066e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ec:	2b3e      	cmp	r3, #62	; 0x3e
 80066ee:	d921      	bls.n	8006734 <USB_EPStartXfer+0x5f8>
 80066f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f4:	095b      	lsrs	r3, r3, #5
 80066f6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80066fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066fe:	f003 031f 	and.w	r3, r3, #31
 8006702:	2b00      	cmp	r3, #0
 8006704:	d104      	bne.n	8006710 <USB_EPStartXfer+0x5d4>
 8006706:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800670a:	3b01      	subs	r3, #1
 800670c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006712:	881b      	ldrh	r3, [r3, #0]
 8006714:	b29a      	uxth	r2, r3
 8006716:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800671a:	b29b      	uxth	r3, r3
 800671c:	029b      	lsls	r3, r3, #10
 800671e:	b29b      	uxth	r3, r3
 8006720:	4313      	orrs	r3, r2
 8006722:	b29b      	uxth	r3, r3
 8006724:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006728:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800672c:	b29a      	uxth	r2, r3
 800672e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006730:	801a      	strh	r2, [r3, #0]
 8006732:	e056      	b.n	80067e2 <USB_EPStartXfer+0x6a6>
 8006734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10a      	bne.n	8006752 <USB_EPStartXfer+0x616>
 800673c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800673e:	881b      	ldrh	r3, [r3, #0]
 8006740:	b29b      	uxth	r3, r3
 8006742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800674a:	b29a      	uxth	r2, r3
 800674c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800674e:	801a      	strh	r2, [r3, #0]
 8006750:	e047      	b.n	80067e2 <USB_EPStartXfer+0x6a6>
 8006752:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006756:	085b      	lsrs	r3, r3, #1
 8006758:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800675c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	2b00      	cmp	r3, #0
 8006766:	d004      	beq.n	8006772 <USB_EPStartXfer+0x636>
 8006768:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800676c:	3301      	adds	r3, #1
 800676e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	b29a      	uxth	r2, r3
 8006778:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800677c:	b29b      	uxth	r3, r3
 800677e:	029b      	lsls	r3, r3, #10
 8006780:	b29b      	uxth	r3, r3
 8006782:	4313      	orrs	r3, r2
 8006784:	b29a      	uxth	r2, r3
 8006786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006788:	801a      	strh	r2, [r3, #0]
 800678a:	e02a      	b.n	80067e2 <USB_EPStartXfer+0x6a6>
 800678c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	785b      	ldrb	r3, [r3, #1]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d122      	bne.n	80067e2 <USB_EPStartXfer+0x6a6>
 800679c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	653b      	str	r3, [r7, #80]	; 0x50
 80067a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	461a      	mov	r2, r3
 80067ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067bc:	4413      	add	r3, r2
 80067be:	653b      	str	r3, [r7, #80]	; 0x50
 80067c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	011a      	lsls	r2, r3, #4
 80067ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067d0:	4413      	add	r3, r2
 80067d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067dc:	b29a      	uxth	r2, r3
 80067de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80067e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	891b      	ldrh	r3, [r3, #8]
 80067ee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6959      	ldr	r1, [r3, #20]
 80067fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006802:	b29b      	uxth	r3, r3
 8006804:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006808:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800680c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006810:	6800      	ldr	r0, [r0, #0]
 8006812:	f001 f982 	bl	8007b1a <USB_WritePMA>
            ep->xfer_buff += len;
 8006816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800681a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	695a      	ldr	r2, [r3, #20]
 8006822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006826:	441a      	add	r2, r3
 8006828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800682c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6a1a      	ldr	r2, [r3, #32]
 8006840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006844:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	429a      	cmp	r2, r3
 800684e:	d90f      	bls.n	8006870 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	6a1a      	ldr	r2, [r3, #32]
 800685c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006860:	1ad2      	subs	r2, r2, r3
 8006862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	621a      	str	r2, [r3, #32]
 800686e:	e00e      	b.n	800688e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6a1b      	ldr	r3, [r3, #32]
 800687c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2200      	movs	r2, #0
 800688c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800688e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006892:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	643b      	str	r3, [r7, #64]	; 0x40
 800689a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800689e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	785b      	ldrb	r3, [r3, #1]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d177      	bne.n	800699a <USB_EPStartXfer+0x85e>
 80068aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80068b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	461a      	mov	r2, r3
 80068c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ca:	4413      	add	r3, r2
 80068cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80068ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	011a      	lsls	r2, r3, #4
 80068dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068de:	4413      	add	r3, r2
 80068e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068e4:	637b      	str	r3, [r7, #52]	; 0x34
 80068e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e8:	881b      	ldrh	r3, [r3, #0]
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f4:	801a      	strh	r2, [r3, #0]
 80068f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068fa:	2b3e      	cmp	r3, #62	; 0x3e
 80068fc:	d921      	bls.n	8006942 <USB_EPStartXfer+0x806>
 80068fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006902:	095b      	lsrs	r3, r3, #5
 8006904:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800690c:	f003 031f 	and.w	r3, r3, #31
 8006910:	2b00      	cmp	r3, #0
 8006912:	d104      	bne.n	800691e <USB_EPStartXfer+0x7e2>
 8006914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006918:	3b01      	subs	r3, #1
 800691a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800691e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006920:	881b      	ldrh	r3, [r3, #0]
 8006922:	b29a      	uxth	r2, r3
 8006924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006928:	b29b      	uxth	r3, r3
 800692a:	029b      	lsls	r3, r3, #10
 800692c:	b29b      	uxth	r3, r3
 800692e:	4313      	orrs	r3, r2
 8006930:	b29b      	uxth	r3, r3
 8006932:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006936:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800693a:	b29a      	uxth	r2, r3
 800693c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800693e:	801a      	strh	r2, [r3, #0]
 8006940:	e050      	b.n	80069e4 <USB_EPStartXfer+0x8a8>
 8006942:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10a      	bne.n	8006960 <USB_EPStartXfer+0x824>
 800694a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800694c:	881b      	ldrh	r3, [r3, #0]
 800694e:	b29b      	uxth	r3, r3
 8006950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006958:	b29a      	uxth	r2, r3
 800695a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800695c:	801a      	strh	r2, [r3, #0]
 800695e:	e041      	b.n	80069e4 <USB_EPStartXfer+0x8a8>
 8006960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006964:	085b      	lsrs	r3, r3, #1
 8006966:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800696a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b00      	cmp	r3, #0
 8006974:	d004      	beq.n	8006980 <USB_EPStartXfer+0x844>
 8006976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800697a:	3301      	adds	r3, #1
 800697c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	b29a      	uxth	r2, r3
 8006986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800698a:	b29b      	uxth	r3, r3
 800698c:	029b      	lsls	r3, r3, #10
 800698e:	b29b      	uxth	r3, r3
 8006990:	4313      	orrs	r3, r2
 8006992:	b29a      	uxth	r2, r3
 8006994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006996:	801a      	strh	r2, [r3, #0]
 8006998:	e024      	b.n	80069e4 <USB_EPStartXfer+0x8a8>
 800699a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800699e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	785b      	ldrb	r3, [r3, #1]
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d11c      	bne.n	80069e4 <USB_EPStartXfer+0x8a8>
 80069aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	461a      	mov	r2, r3
 80069bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069be:	4413      	add	r3, r2
 80069c0:	643b      	str	r3, [r7, #64]	; 0x40
 80069c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	011a      	lsls	r2, r3, #4
 80069d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069d2:	4413      	add	r3, r2
 80069d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069de:	b29a      	uxth	r2, r3
 80069e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80069e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	895b      	ldrh	r3, [r3, #10]
 80069f0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6959      	ldr	r1, [r3, #20]
 8006a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006a0a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006a0e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006a12:	6800      	ldr	r0, [r0, #0]
 8006a14:	f001 f881 	bl	8007b1a <USB_WritePMA>
 8006a18:	e227      	b.n	8006e6a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006a1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4413      	add	r3, r2
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a50:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	441a      	add	r2, r3
 8006a6e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006a72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006aa6:	4413      	add	r3, r2
 8006aa8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	011a      	lsls	r2, r3, #4
 8006ab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006aba:	4413      	add	r3, r2
 8006abc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ac0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006aca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	891b      	ldrh	r3, [r3, #8]
 8006ad8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006adc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	6959      	ldr	r1, [r3, #20]
 8006ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006af2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006af6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006afa:	6800      	ldr	r0, [r0, #0]
 8006afc:	f001 f80d 	bl	8007b1a <USB_WritePMA>
 8006b00:	e1b3      	b.n	8006e6a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6a1a      	ldr	r2, [r3, #32]
 8006b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b12:	1ad2      	subs	r2, r2, r3
 8006b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	881b      	ldrh	r3, [r3, #0]
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f000 80c6 	beq.w	8006cd4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	673b      	str	r3, [r7, #112]	; 0x70
 8006b54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	785b      	ldrb	r3, [r3, #1]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d177      	bne.n	8006c54 <USB_EPStartXfer+0xb18>
 8006b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	461a      	mov	r2, r3
 8006b82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b84:	4413      	add	r3, r2
 8006b86:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	011a      	lsls	r2, r3, #4
 8006b96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b98:	4413      	add	r3, r2
 8006b9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b9e:	667b      	str	r3, [r7, #100]	; 0x64
 8006ba0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ba2:	881b      	ldrh	r3, [r3, #0]
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bae:	801a      	strh	r2, [r3, #0]
 8006bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bb4:	2b3e      	cmp	r3, #62	; 0x3e
 8006bb6:	d921      	bls.n	8006bfc <USB_EPStartXfer+0xac0>
 8006bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bbc:	095b      	lsrs	r3, r3, #5
 8006bbe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bc6:	f003 031f 	and.w	r3, r3, #31
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d104      	bne.n	8006bd8 <USB_EPStartXfer+0xa9c>
 8006bce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006bd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bda:	881b      	ldrh	r3, [r3, #0]
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	029b      	lsls	r3, r3, #10
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	4313      	orrs	r3, r2
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bf8:	801a      	strh	r2, [r3, #0]
 8006bfa:	e050      	b.n	8006c9e <USB_EPStartXfer+0xb62>
 8006bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10a      	bne.n	8006c1a <USB_EPStartXfer+0xade>
 8006c04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c16:	801a      	strh	r2, [r3, #0]
 8006c18:	e041      	b.n	8006c9e <USB_EPStartXfer+0xb62>
 8006c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c1e:	085b      	lsrs	r3, r3, #1
 8006c20:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c28:	f003 0301 	and.w	r3, r3, #1
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d004      	beq.n	8006c3a <USB_EPStartXfer+0xafe>
 8006c30:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c34:	3301      	adds	r3, #1
 8006c36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c3c:	881b      	ldrh	r3, [r3, #0]
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	029b      	lsls	r3, r3, #10
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c50:	801a      	strh	r2, [r3, #0]
 8006c52:	e024      	b.n	8006c9e <USB_EPStartXfer+0xb62>
 8006c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	785b      	ldrb	r3, [r3, #1]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d11c      	bne.n	8006c9e <USB_EPStartXfer+0xb62>
 8006c64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	461a      	mov	r2, r3
 8006c76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c78:	4413      	add	r3, r2
 8006c7a:	673b      	str	r3, [r7, #112]	; 0x70
 8006c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	011a      	lsls	r2, r3, #4
 8006c8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c9c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	895b      	ldrh	r3, [r3, #10]
 8006caa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6959      	ldr	r1, [r3, #20]
 8006cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006cc4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006cc8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006ccc:	6800      	ldr	r0, [r0, #0]
 8006cce:	f000 ff24 	bl	8007b1a <USB_WritePMA>
 8006cd2:	e0ca      	b.n	8006e6a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	785b      	ldrb	r3, [r3, #1]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d177      	bne.n	8006dd4 <USB_EPStartXfer+0xc98>
 8006ce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	461a      	mov	r2, r3
 8006d02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d04:	4413      	add	r3, r2
 8006d06:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	011a      	lsls	r2, r3, #4
 8006d16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d18:	4413      	add	r3, r2
 8006d1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d1e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d2e:	801a      	strh	r2, [r3, #0]
 8006d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d34:	2b3e      	cmp	r3, #62	; 0x3e
 8006d36:	d921      	bls.n	8006d7c <USB_EPStartXfer+0xc40>
 8006d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d3c:	095b      	lsrs	r3, r3, #5
 8006d3e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d46:	f003 031f 	and.w	r3, r3, #31
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d104      	bne.n	8006d58 <USB_EPStartXfer+0xc1c>
 8006d4e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d52:	3b01      	subs	r3, #1
 8006d54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d5a:	881b      	ldrh	r3, [r3, #0]
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	029b      	lsls	r3, r3, #10
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d78:	801a      	strh	r2, [r3, #0]
 8006d7a:	e05c      	b.n	8006e36 <USB_EPStartXfer+0xcfa>
 8006d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10a      	bne.n	8006d9a <USB_EPStartXfer+0xc5e>
 8006d84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d86:	881b      	ldrh	r3, [r3, #0]
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d96:	801a      	strh	r2, [r3, #0]
 8006d98:	e04d      	b.n	8006e36 <USB_EPStartXfer+0xcfa>
 8006d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d9e:	085b      	lsrs	r3, r3, #1
 8006da0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006da8:	f003 0301 	and.w	r3, r3, #1
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d004      	beq.n	8006dba <USB_EPStartXfer+0xc7e>
 8006db0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006db4:	3301      	adds	r3, #1
 8006db6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006dba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dbc:	881b      	ldrh	r3, [r3, #0]
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	029b      	lsls	r3, r3, #10
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dd0:	801a      	strh	r2, [r3, #0]
 8006dd2:	e030      	b.n	8006e36 <USB_EPStartXfer+0xcfa>
 8006dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	785b      	ldrb	r3, [r3, #1]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d128      	bne.n	8006e36 <USB_EPStartXfer+0xcfa>
 8006de4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	461a      	mov	r2, r3
 8006e04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e08:	4413      	add	r3, r2
 8006e0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	011a      	lsls	r2, r3, #4
 8006e1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e20:	4413      	add	r3, r2
 8006e22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e34:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006e36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	891b      	ldrh	r3, [r3, #8]
 8006e42:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6959      	ldr	r1, [r3, #20]
 8006e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006e5c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006e60:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006e64:	6800      	ldr	r0, [r0, #0]
 8006e66:	f000 fe58 	bl	8007b1a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	881b      	ldrh	r3, [r3, #0]
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e90:	817b      	strh	r3, [r7, #10]
 8006e92:	897b      	ldrh	r3, [r7, #10]
 8006e94:	f083 0310 	eor.w	r3, r3, #16
 8006e98:	817b      	strh	r3, [r7, #10]
 8006e9a:	897b      	ldrh	r3, [r7, #10]
 8006e9c:	f083 0320 	eor.w	r3, r3, #32
 8006ea0:	817b      	strh	r3, [r7, #10]
 8006ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	441a      	add	r2, r3
 8006ebc:	897b      	ldrh	r3, [r7, #10]
 8006ebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	8013      	strh	r3, [r2, #0]
 8006ed2:	f000 bcde 	b.w	8007892 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006ed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	7b1b      	ldrb	r3, [r3, #12]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	f040 80bb 	bne.w	800705e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006ee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	699a      	ldr	r2, [r3, #24]
 8006ef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d917      	bls.n	8006f34 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	699a      	ldr	r2, [r3, #24]
 8006f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f24:	1ad2      	subs	r2, r2, r3
 8006f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	619a      	str	r2, [r3, #24]
 8006f32:	e00e      	b.n	8006f52 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006f52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	461a      	mov	r2, r3
 8006f72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f76:	4413      	add	r3, r2
 8006f78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	011a      	lsls	r2, r3, #4
 8006f8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f8e:	4413      	add	r3, r2
 8006f90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006f98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006faa:	801a      	strh	r2, [r3, #0]
 8006fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fb0:	2b3e      	cmp	r3, #62	; 0x3e
 8006fb2:	d924      	bls.n	8006ffe <USB_EPStartXfer+0xec2>
 8006fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fb8:	095b      	lsrs	r3, r3, #5
 8006fba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fc2:	f003 031f 	and.w	r3, r3, #31
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d104      	bne.n	8006fd4 <USB_EPStartXfer+0xe98>
 8006fca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fd8:	881b      	ldrh	r3, [r3, #0]
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	029b      	lsls	r3, r3, #10
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ff8:	801a      	strh	r2, [r3, #0]
 8006ffa:	f000 bc10 	b.w	800781e <USB_EPStartXfer+0x16e2>
 8006ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10c      	bne.n	8007020 <USB_EPStartXfer+0xee4>
 8007006:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800700a:	881b      	ldrh	r3, [r3, #0]
 800700c:	b29b      	uxth	r3, r3
 800700e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007012:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007016:	b29a      	uxth	r2, r3
 8007018:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800701c:	801a      	strh	r2, [r3, #0]
 800701e:	e3fe      	b.n	800781e <USB_EPStartXfer+0x16e2>
 8007020:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007024:	085b      	lsrs	r3, r3, #1
 8007026:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800702a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	2b00      	cmp	r3, #0
 8007034:	d004      	beq.n	8007040 <USB_EPStartXfer+0xf04>
 8007036:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800703a:	3301      	adds	r3, #1
 800703c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007040:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007044:	881b      	ldrh	r3, [r3, #0]
 8007046:	b29a      	uxth	r2, r3
 8007048:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800704c:	b29b      	uxth	r3, r3
 800704e:	029b      	lsls	r3, r3, #10
 8007050:	b29b      	uxth	r3, r3
 8007052:	4313      	orrs	r3, r2
 8007054:	b29a      	uxth	r2, r3
 8007056:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800705a:	801a      	strh	r2, [r3, #0]
 800705c:	e3df      	b.n	800781e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800705e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007062:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	78db      	ldrb	r3, [r3, #3]
 800706a:	2b02      	cmp	r3, #2
 800706c:	f040 8218 	bne.w	80074a0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007074:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	785b      	ldrb	r3, [r3, #1]
 800707c:	2b00      	cmp	r3, #0
 800707e:	f040 809d 	bne.w	80071bc <USB_EPStartXfer+0x1080>
 8007082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007086:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007094:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800709e:	b29b      	uxth	r3, r3
 80070a0:	461a      	mov	r2, r3
 80070a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070a6:	4413      	add	r3, r2
 80070a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80070ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	011a      	lsls	r2, r3, #4
 80070ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070be:	4413      	add	r3, r2
 80070c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80070c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070cc:	881b      	ldrh	r3, [r3, #0]
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070da:	801a      	strh	r2, [r3, #0]
 80070dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	2b3e      	cmp	r3, #62	; 0x3e
 80070ea:	d92b      	bls.n	8007144 <USB_EPStartXfer+0x1008>
 80070ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	095b      	lsrs	r3, r3, #5
 80070fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	f003 031f 	and.w	r3, r3, #31
 800710e:	2b00      	cmp	r3, #0
 8007110:	d104      	bne.n	800711c <USB_EPStartXfer+0xfe0>
 8007112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007116:	3b01      	subs	r3, #1
 8007118:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800711c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007120:	881b      	ldrh	r3, [r3, #0]
 8007122:	b29a      	uxth	r2, r3
 8007124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007128:	b29b      	uxth	r3, r3
 800712a:	029b      	lsls	r3, r3, #10
 800712c:	b29b      	uxth	r3, r3
 800712e:	4313      	orrs	r3, r2
 8007130:	b29b      	uxth	r3, r3
 8007132:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007136:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800713a:	b29a      	uxth	r2, r3
 800713c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007140:	801a      	strh	r2, [r3, #0]
 8007142:	e070      	b.n	8007226 <USB_EPStartXfer+0x10ea>
 8007144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d10c      	bne.n	800716e <USB_EPStartXfer+0x1032>
 8007154:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	b29b      	uxth	r3, r3
 800715c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007164:	b29a      	uxth	r2, r3
 8007166:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800716a:	801a      	strh	r2, [r3, #0]
 800716c:	e05b      	b.n	8007226 <USB_EPStartXfer+0x10ea>
 800716e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	085b      	lsrs	r3, r3, #1
 800717c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007184:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	2b00      	cmp	r3, #0
 8007192:	d004      	beq.n	800719e <USB_EPStartXfer+0x1062>
 8007194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007198:	3301      	adds	r3, #1
 800719a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800719e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071a2:	881b      	ldrh	r3, [r3, #0]
 80071a4:	b29a      	uxth	r2, r3
 80071a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	029b      	lsls	r3, r3, #10
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	4313      	orrs	r3, r2
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071b8:	801a      	strh	r2, [r3, #0]
 80071ba:	e034      	b.n	8007226 <USB_EPStartXfer+0x10ea>
 80071bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	785b      	ldrb	r3, [r3, #1]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d12c      	bne.n	8007226 <USB_EPStartXfer+0x10ea>
 80071cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	461a      	mov	r2, r3
 80071ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071f0:	4413      	add	r3, r2
 80071f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	011a      	lsls	r2, r3, #4
 8007204:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007208:	4413      	add	r3, r2
 800720a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800720e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007216:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	b29a      	uxth	r2, r3
 8007220:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007224:	801a      	strh	r2, [r3, #0]
 8007226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800722a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	785b      	ldrb	r3, [r3, #1]
 8007240:	2b00      	cmp	r3, #0
 8007242:	f040 809d 	bne.w	8007380 <USB_EPStartXfer+0x1244>
 8007246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800724a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007258:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007262:	b29b      	uxth	r3, r3
 8007264:	461a      	mov	r2, r3
 8007266:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800726a:	4413      	add	r3, r2
 800726c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007274:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	011a      	lsls	r2, r3, #4
 800727e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007282:	4413      	add	r3, r2
 8007284:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007288:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800728c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007290:	881b      	ldrh	r3, [r3, #0]
 8007292:	b29b      	uxth	r3, r3
 8007294:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007298:	b29a      	uxth	r2, r3
 800729a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800729e:	801a      	strh	r2, [r3, #0]
 80072a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	2b3e      	cmp	r3, #62	; 0x3e
 80072ae:	d92b      	bls.n	8007308 <USB_EPStartXfer+0x11cc>
 80072b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	095b      	lsrs	r3, r3, #5
 80072be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	f003 031f 	and.w	r3, r3, #31
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d104      	bne.n	80072e0 <USB_EPStartXfer+0x11a4>
 80072d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072da:	3b01      	subs	r3, #1
 80072dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072e4:	881b      	ldrh	r3, [r3, #0]
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	029b      	lsls	r3, r3, #10
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	4313      	orrs	r3, r2
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072fe:	b29a      	uxth	r2, r3
 8007300:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007304:	801a      	strh	r2, [r3, #0]
 8007306:	e069      	b.n	80073dc <USB_EPStartXfer+0x12a0>
 8007308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800730c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10c      	bne.n	8007332 <USB_EPStartXfer+0x11f6>
 8007318:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800731c:	881b      	ldrh	r3, [r3, #0]
 800731e:	b29b      	uxth	r3, r3
 8007320:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007324:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007328:	b29a      	uxth	r2, r3
 800732a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800732e:	801a      	strh	r2, [r3, #0]
 8007330:	e054      	b.n	80073dc <USB_EPStartXfer+0x12a0>
 8007332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	085b      	lsrs	r3, r3, #1
 8007340:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	2b00      	cmp	r3, #0
 8007356:	d004      	beq.n	8007362 <USB_EPStartXfer+0x1226>
 8007358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800735c:	3301      	adds	r3, #1
 800735e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007362:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007366:	881b      	ldrh	r3, [r3, #0]
 8007368:	b29a      	uxth	r2, r3
 800736a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800736e:	b29b      	uxth	r3, r3
 8007370:	029b      	lsls	r3, r3, #10
 8007372:	b29b      	uxth	r3, r3
 8007374:	4313      	orrs	r3, r2
 8007376:	b29a      	uxth	r2, r3
 8007378:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800737c:	801a      	strh	r2, [r3, #0]
 800737e:	e02d      	b.n	80073dc <USB_EPStartXfer+0x12a0>
 8007380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	785b      	ldrb	r3, [r3, #1]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d125      	bne.n	80073dc <USB_EPStartXfer+0x12a0>
 8007390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007394:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800739e:	b29b      	uxth	r3, r3
 80073a0:	461a      	mov	r2, r3
 80073a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80073a6:	4413      	add	r3, r2
 80073a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80073ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	011a      	lsls	r2, r3, #4
 80073ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80073be:	4413      	add	r3, r2
 80073c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80073c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80073da:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80073dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	69db      	ldr	r3, [r3, #28]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f000 8218 	beq.w	800781e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80073ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	881b      	ldrh	r3, [r3, #0]
 800740a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800740e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d005      	beq.n	8007426 <USB_EPStartXfer+0x12ea>
 800741a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800741e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007422:	2b00      	cmp	r3, #0
 8007424:	d10d      	bne.n	8007442 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007426:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800742a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800742e:	2b00      	cmp	r3, #0
 8007430:	f040 81f5 	bne.w	800781e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007434:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800743c:	2b00      	cmp	r3, #0
 800743e:	f040 81ee 	bne.w	800781e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007446:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4413      	add	r3, r2
 800745c:	881b      	ldrh	r3, [r3, #0]
 800745e:	b29b      	uxth	r3, r3
 8007460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007468:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800746c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007470:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800747a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	441a      	add	r2, r3
 8007486:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800748a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800748e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007496:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800749a:	b29b      	uxth	r3, r3
 800749c:	8013      	strh	r3, [r2, #0]
 800749e:	e1be      	b.n	800781e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80074a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	78db      	ldrb	r3, [r3, #3]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	f040 81b4 	bne.w	800781a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80074b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	699a      	ldr	r2, [r3, #24]
 80074be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d917      	bls.n	80074fe <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80074ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80074de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	699a      	ldr	r2, [r3, #24]
 80074ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ee:	1ad2      	subs	r2, r2, r3
 80074f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	619a      	str	r2, [r3, #24]
 80074fc:	e00e      	b.n	800751c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80074fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007502:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800750e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007512:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2200      	movs	r2, #0
 800751a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800751c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007520:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	785b      	ldrb	r3, [r3, #1]
 8007528:	2b00      	cmp	r3, #0
 800752a:	f040 8085 	bne.w	8007638 <USB_EPStartXfer+0x14fc>
 800752e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007532:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800753c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007540:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800754a:	b29b      	uxth	r3, r3
 800754c:	461a      	mov	r2, r3
 800754e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007552:	4413      	add	r3, r2
 8007554:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800755c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	011a      	lsls	r2, r3, #4
 8007566:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800756a:	4413      	add	r3, r2
 800756c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007570:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007574:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007578:	881b      	ldrh	r3, [r3, #0]
 800757a:	b29b      	uxth	r3, r3
 800757c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007580:	b29a      	uxth	r2, r3
 8007582:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007586:	801a      	strh	r2, [r3, #0]
 8007588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800758c:	2b3e      	cmp	r3, #62	; 0x3e
 800758e:	d923      	bls.n	80075d8 <USB_EPStartXfer+0x149c>
 8007590:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007594:	095b      	lsrs	r3, r3, #5
 8007596:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800759a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800759e:	f003 031f 	and.w	r3, r3, #31
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d104      	bne.n	80075b0 <USB_EPStartXfer+0x1474>
 80075a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075aa:	3b01      	subs	r3, #1
 80075ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80075b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075b4:	881b      	ldrh	r3, [r3, #0]
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075bc:	b29b      	uxth	r3, r3
 80075be:	029b      	lsls	r3, r3, #10
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	4313      	orrs	r3, r2
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075d4:	801a      	strh	r2, [r3, #0]
 80075d6:	e060      	b.n	800769a <USB_EPStartXfer+0x155e>
 80075d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10c      	bne.n	80075fa <USB_EPStartXfer+0x14be>
 80075e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075e4:	881b      	ldrh	r3, [r3, #0]
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075f6:	801a      	strh	r2, [r3, #0]
 80075f8:	e04f      	b.n	800769a <USB_EPStartXfer+0x155e>
 80075fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075fe:	085b      	lsrs	r3, r3, #1
 8007600:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007608:	f003 0301 	and.w	r3, r3, #1
 800760c:	2b00      	cmp	r3, #0
 800760e:	d004      	beq.n	800761a <USB_EPStartXfer+0x14de>
 8007610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007614:	3301      	adds	r3, #1
 8007616:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800761a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800761e:	881b      	ldrh	r3, [r3, #0]
 8007620:	b29a      	uxth	r2, r3
 8007622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007626:	b29b      	uxth	r3, r3
 8007628:	029b      	lsls	r3, r3, #10
 800762a:	b29b      	uxth	r3, r3
 800762c:	4313      	orrs	r3, r2
 800762e:	b29a      	uxth	r2, r3
 8007630:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007634:	801a      	strh	r2, [r3, #0]
 8007636:	e030      	b.n	800769a <USB_EPStartXfer+0x155e>
 8007638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800763c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	785b      	ldrb	r3, [r3, #1]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d128      	bne.n	800769a <USB_EPStartXfer+0x155e>
 8007648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800764c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800765a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007664:	b29b      	uxth	r3, r3
 8007666:	461a      	mov	r2, r3
 8007668:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800766c:	4413      	add	r3, r2
 800766e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007676:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	011a      	lsls	r2, r3, #4
 8007680:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007684:	4413      	add	r3, r2
 8007686:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800768a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800768e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007692:	b29a      	uxth	r2, r3
 8007694:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007698:	801a      	strh	r2, [r3, #0]
 800769a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800769e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80076a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	785b      	ldrb	r3, [r3, #1]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f040 8085 	bne.w	80077c4 <USB_EPStartXfer+0x1688>
 80076ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80076c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	461a      	mov	r2, r3
 80076da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80076de:	4413      	add	r3, r2
 80076e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80076e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	011a      	lsls	r2, r3, #4
 80076f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80076f6:	4413      	add	r3, r2
 80076f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80076fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007700:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007704:	881b      	ldrh	r3, [r3, #0]
 8007706:	b29b      	uxth	r3, r3
 8007708:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800770c:	b29a      	uxth	r2, r3
 800770e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007712:	801a      	strh	r2, [r3, #0]
 8007714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007718:	2b3e      	cmp	r3, #62	; 0x3e
 800771a:	d923      	bls.n	8007764 <USB_EPStartXfer+0x1628>
 800771c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007720:	095b      	lsrs	r3, r3, #5
 8007722:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800772a:	f003 031f 	and.w	r3, r3, #31
 800772e:	2b00      	cmp	r3, #0
 8007730:	d104      	bne.n	800773c <USB_EPStartXfer+0x1600>
 8007732:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007736:	3b01      	subs	r3, #1
 8007738:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800773c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007740:	881b      	ldrh	r3, [r3, #0]
 8007742:	b29a      	uxth	r2, r3
 8007744:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007748:	b29b      	uxth	r3, r3
 800774a:	029b      	lsls	r3, r3, #10
 800774c:	b29b      	uxth	r3, r3
 800774e:	4313      	orrs	r3, r2
 8007750:	b29b      	uxth	r3, r3
 8007752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800775a:	b29a      	uxth	r2, r3
 800775c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007760:	801a      	strh	r2, [r3, #0]
 8007762:	e05c      	b.n	800781e <USB_EPStartXfer+0x16e2>
 8007764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10c      	bne.n	8007786 <USB_EPStartXfer+0x164a>
 800776c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007770:	881b      	ldrh	r3, [r3, #0]
 8007772:	b29b      	uxth	r3, r3
 8007774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800777c:	b29a      	uxth	r2, r3
 800777e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007782:	801a      	strh	r2, [r3, #0]
 8007784:	e04b      	b.n	800781e <USB_EPStartXfer+0x16e2>
 8007786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800778a:	085b      	lsrs	r3, r3, #1
 800778c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007794:	f003 0301 	and.w	r3, r3, #1
 8007798:	2b00      	cmp	r3, #0
 800779a:	d004      	beq.n	80077a6 <USB_EPStartXfer+0x166a>
 800779c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077a0:	3301      	adds	r3, #1
 80077a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80077a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80077aa:	881b      	ldrh	r3, [r3, #0]
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	029b      	lsls	r3, r3, #10
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	4313      	orrs	r3, r2
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80077c0:	801a      	strh	r2, [r3, #0]
 80077c2:	e02c      	b.n	800781e <USB_EPStartXfer+0x16e2>
 80077c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	785b      	ldrb	r3, [r3, #1]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d124      	bne.n	800781e <USB_EPStartXfer+0x16e2>
 80077d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	461a      	mov	r2, r3
 80077e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80077ea:	4413      	add	r3, r2
 80077ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80077f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	011a      	lsls	r2, r3, #4
 80077fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007802:	4413      	add	r3, r2
 8007804:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007808:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800780c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007810:	b29a      	uxth	r2, r3
 8007812:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007816:	801a      	strh	r2, [r3, #0]
 8007818:	e001      	b.n	800781e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e03a      	b.n	8007894 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800781e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007822:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800782c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	4413      	add	r3, r2
 8007838:	881b      	ldrh	r3, [r3, #0]
 800783a:	b29b      	uxth	r3, r3
 800783c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007844:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007848:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800784c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007850:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007854:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007858:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800785c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007864:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800786e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	441a      	add	r2, r3
 800787a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800787e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800788a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800788e:	b29b      	uxth	r3, r3
 8007890:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800789e:	b480      	push	{r7}
 80078a0:	b085      	sub	sp, #20
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
 80078a6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	785b      	ldrb	r3, [r3, #1]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d020      	beq.n	80078f2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	4413      	add	r3, r2
 80078ba:	881b      	ldrh	r3, [r3, #0]
 80078bc:	b29b      	uxth	r3, r3
 80078be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078c6:	81bb      	strh	r3, [r7, #12]
 80078c8:	89bb      	ldrh	r3, [r7, #12]
 80078ca:	f083 0310 	eor.w	r3, r3, #16
 80078ce:	81bb      	strh	r3, [r7, #12]
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	441a      	add	r2, r3
 80078da:	89bb      	ldrh	r3, [r7, #12]
 80078dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	8013      	strh	r3, [r2, #0]
 80078f0:	e01f      	b.n	8007932 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4413      	add	r3, r2
 80078fc:	881b      	ldrh	r3, [r3, #0]
 80078fe:	b29b      	uxth	r3, r3
 8007900:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007908:	81fb      	strh	r3, [r7, #14]
 800790a:	89fb      	ldrh	r3, [r7, #14]
 800790c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007910:	81fb      	strh	r3, [r7, #14]
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	441a      	add	r2, r3
 800791c:	89fb      	ldrh	r3, [r7, #14]
 800791e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800792a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800792e:	b29b      	uxth	r3, r3
 8007930:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007932:	2300      	movs	r3, #0
}
 8007934:	4618      	mov	r0, r3
 8007936:	3714      	adds	r7, #20
 8007938:	46bd      	mov	sp, r7
 800793a:	bc80      	pop	{r7}
 800793c:	4770      	bx	lr

0800793e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800793e:	b480      	push	{r7}
 8007940:	b087      	sub	sp, #28
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	7b1b      	ldrb	r3, [r3, #12]
 800794c:	2b00      	cmp	r3, #0
 800794e:	f040 809d 	bne.w	8007a8c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	785b      	ldrb	r3, [r3, #1]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d04c      	beq.n	80079f4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4413      	add	r3, r2
 8007964:	881b      	ldrh	r3, [r3, #0]
 8007966:	823b      	strh	r3, [r7, #16]
 8007968:	8a3b      	ldrh	r3, [r7, #16]
 800796a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800796e:	2b00      	cmp	r3, #0
 8007970:	d01b      	beq.n	80079aa <USB_EPClearStall+0x6c>
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	4413      	add	r3, r2
 800797c:	881b      	ldrh	r3, [r3, #0]
 800797e:	b29b      	uxth	r3, r3
 8007980:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007988:	81fb      	strh	r3, [r7, #14]
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	441a      	add	r2, r3
 8007994:	89fb      	ldrh	r3, [r7, #14]
 8007996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800799a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800799e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	78db      	ldrb	r3, [r3, #3]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d06c      	beq.n	8007a8c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	4413      	add	r3, r2
 80079bc:	881b      	ldrh	r3, [r3, #0]
 80079be:	b29b      	uxth	r3, r3
 80079c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079c8:	81bb      	strh	r3, [r7, #12]
 80079ca:	89bb      	ldrh	r3, [r7, #12]
 80079cc:	f083 0320 	eor.w	r3, r3, #32
 80079d0:	81bb      	strh	r3, [r7, #12]
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	441a      	add	r2, r3
 80079dc:	89bb      	ldrh	r3, [r7, #12]
 80079de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	8013      	strh	r3, [r2, #0]
 80079f2:	e04b      	b.n	8007a8c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	4413      	add	r3, r2
 80079fe:	881b      	ldrh	r3, [r3, #0]
 8007a00:	82fb      	strh	r3, [r7, #22]
 8007a02:	8afb      	ldrh	r3, [r7, #22]
 8007a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d01b      	beq.n	8007a44 <USB_EPClearStall+0x106>
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	4413      	add	r3, r2
 8007a16:	881b      	ldrh	r3, [r3, #0]
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a22:	82bb      	strh	r3, [r7, #20]
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	441a      	add	r2, r3
 8007a2e:	8abb      	ldrh	r3, [r7, #20]
 8007a30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	4413      	add	r3, r2
 8007a4e:	881b      	ldrh	r3, [r3, #0]
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a5a:	827b      	strh	r3, [r7, #18]
 8007a5c:	8a7b      	ldrh	r3, [r7, #18]
 8007a5e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a62:	827b      	strh	r3, [r7, #18]
 8007a64:	8a7b      	ldrh	r3, [r7, #18]
 8007a66:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a6a:	827b      	strh	r3, [r7, #18]
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	441a      	add	r2, r3
 8007a76:	8a7b      	ldrh	r3, [r7, #18]
 8007a78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	371c      	adds	r7, #28
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bc80      	pop	{r7}
 8007a96:	4770      	bx	lr

08007a98 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007aa4:	78fb      	ldrb	r3, [r7, #3]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d103      	bne.n	8007ab2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2280      	movs	r2, #128	; 0x80
 8007aae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bc80      	pop	{r7}
 8007abc:	4770      	bx	lr

08007abe <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b083      	sub	sp, #12
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bc80      	pop	{r7}
 8007ad0:	4770      	bx	lr

08007ad2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b083      	sub	sp, #12
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bc80      	pop	{r7}
 8007ae4:	4770      	bx	lr

08007ae6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b085      	sub	sp, #20
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007af8:	68fb      	ldr	r3, [r7, #12]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3714      	adds	r7, #20
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bc80      	pop	{r7}
 8007b02:	4770      	bx	lr

08007b04 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bc80      	pop	{r7}
 8007b18:	4770      	bx	lr

08007b1a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b08b      	sub	sp, #44	; 0x2c
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	60f8      	str	r0, [r7, #12]
 8007b22:	60b9      	str	r1, [r7, #8]
 8007b24:	4611      	mov	r1, r2
 8007b26:	461a      	mov	r2, r3
 8007b28:	460b      	mov	r3, r1
 8007b2a:	80fb      	strh	r3, [r7, #6]
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007b30:	88bb      	ldrh	r3, [r7, #4]
 8007b32:	3301      	adds	r3, #1
 8007b34:	085b      	lsrs	r3, r3, #1
 8007b36:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007b40:	88fb      	ldrh	r3, [r7, #6]
 8007b42:	005a      	lsls	r2, r3, #1
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	4413      	add	r3, r2
 8007b48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b4c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	627b      	str	r3, [r7, #36]	; 0x24
 8007b52:	e01e      	b.n	8007b92 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	021b      	lsls	r3, r3, #8
 8007b62:	b21a      	sxth	r2, r3
 8007b64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	b21b      	sxth	r3, r3
 8007b6c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007b6e:	6a3b      	ldr	r3, [r7, #32]
 8007b70:	8a7a      	ldrh	r2, [r7, #18]
 8007b72:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007b74:	6a3b      	ldr	r3, [r7, #32]
 8007b76:	3302      	adds	r3, #2
 8007b78:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007b7a:	6a3b      	ldr	r3, [r7, #32]
 8007b7c:	3302      	adds	r3, #2
 8007b7e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	3301      	adds	r3, #1
 8007b84:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	627b      	str	r3, [r7, #36]	; 0x24
 8007b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1dd      	bne.n	8007b54 <USB_WritePMA+0x3a>
  }
}
 8007b98:	bf00      	nop
 8007b9a:	bf00      	nop
 8007b9c:	372c      	adds	r7, #44	; 0x2c
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bc80      	pop	{r7}
 8007ba2:	4770      	bx	lr

08007ba4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b08b      	sub	sp, #44	; 0x2c
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	4611      	mov	r1, r2
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	80fb      	strh	r3, [r7, #6]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007bba:	88bb      	ldrh	r3, [r7, #4]
 8007bbc:	085b      	lsrs	r3, r3, #1
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007bca:	88fb      	ldrh	r3, [r7, #6]
 8007bcc:	005a      	lsls	r2, r3, #1
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bd6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	627b      	str	r3, [r7, #36]	; 0x24
 8007bdc:	e01b      	b.n	8007c16 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007bde:	6a3b      	ldr	r3, [r7, #32]
 8007be0:	881b      	ldrh	r3, [r3, #0]
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007be6:	6a3b      	ldr	r3, [r7, #32]
 8007be8:	3302      	adds	r3, #2
 8007bea:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	b2da      	uxtb	r2, r3
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	0a1b      	lsrs	r3, r3, #8
 8007bfe:	b2da      	uxtb	r2, r3
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	3301      	adds	r3, #1
 8007c08:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007c0a:	6a3b      	ldr	r3, [r7, #32]
 8007c0c:	3302      	adds	r3, #2
 8007c0e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	3b01      	subs	r3, #1
 8007c14:	627b      	str	r3, [r7, #36]	; 0x24
 8007c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d1e0      	bne.n	8007bde <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007c1c:	88bb      	ldrh	r3, [r7, #4]
 8007c1e:	f003 0301 	and.w	r3, r3, #1
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d007      	beq.n	8007c38 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007c28:	6a3b      	ldr	r3, [r7, #32]
 8007c2a:	881b      	ldrh	r3, [r3, #0]
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	b2da      	uxtb	r2, r3
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	701a      	strb	r2, [r3, #0]
  }
}
 8007c38:	bf00      	nop
 8007c3a:	372c      	adds	r7, #44	; 0x2c
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bc80      	pop	{r7}
 8007c40:	4770      	bx	lr

08007c42 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b084      	sub	sp, #16
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	7c1b      	ldrb	r3, [r3, #16]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d115      	bne.n	8007c86 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c5e:	2202      	movs	r2, #2
 8007c60:	2181      	movs	r1, #129	; 0x81
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f001 fe87 	bl	8009976 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c72:	2202      	movs	r2, #2
 8007c74:	2101      	movs	r1, #1
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f001 fe7d 	bl	8009976 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007c84:	e012      	b.n	8007cac <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c86:	2340      	movs	r3, #64	; 0x40
 8007c88:	2202      	movs	r2, #2
 8007c8a:	2181      	movs	r1, #129	; 0x81
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f001 fe72 	bl	8009976 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c98:	2340      	movs	r3, #64	; 0x40
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	2101      	movs	r1, #1
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f001 fe69 	bl	8009976 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007cac:	2308      	movs	r3, #8
 8007cae:	2203      	movs	r2, #3
 8007cb0:	2182      	movs	r1, #130	; 0x82
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f001 fe5f 	bl	8009976 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007cbe:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007cc2:	f001 ff7f 	bl	8009bc4 <USBD_static_malloc>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d102      	bne.n	8007cde <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	73fb      	strb	r3, [r7, #15]
 8007cdc:	e026      	b.n	8007d2c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ce4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	7c1b      	ldrb	r3, [r3, #16]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d109      	bne.n	8007d1c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d12:	2101      	movs	r1, #1
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f001 ff1f 	bl	8009b58 <USBD_LL_PrepareReceive>
 8007d1a:	e007      	b.n	8007d2c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d22:	2340      	movs	r3, #64	; 0x40
 8007d24:	2101      	movs	r1, #1
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f001 ff16 	bl	8009b58 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b084      	sub	sp, #16
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
 8007d3e:	460b      	mov	r3, r1
 8007d40:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007d42:	2300      	movs	r3, #0
 8007d44:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007d46:	2181      	movs	r1, #129	; 0x81
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f001 fe3a 	bl	80099c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007d54:	2101      	movs	r1, #1
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f001 fe33 	bl	80099c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007d64:	2182      	movs	r1, #130	; 0x82
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f001 fe2b 	bl	80099c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00e      	beq.n	8007d9a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f001 ff25 	bl	8009bdc <USBD_static_free>
    pdev->pClassData = NULL;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007db4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007db6:	2300      	movs	r3, #0
 8007db8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d039      	beq.n	8007e42 <USBD_CDC_Setup+0x9e>
 8007dce:	2b20      	cmp	r3, #32
 8007dd0:	d17f      	bne.n	8007ed2 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	88db      	ldrh	r3, [r3, #6]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d029      	beq.n	8007e2e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	b25b      	sxtb	r3, r3
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	da11      	bge.n	8007e08 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007df0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007df2:	683a      	ldr	r2, [r7, #0]
 8007df4:	88d2      	ldrh	r2, [r2, #6]
 8007df6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007df8:	6939      	ldr	r1, [r7, #16]
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	88db      	ldrh	r3, [r3, #6]
 8007dfe:	461a      	mov	r2, r3
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f001 fa0a 	bl	800921a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007e06:	e06b      	b.n	8007ee0 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	785a      	ldrb	r2, [r3, #1]
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	88db      	ldrh	r3, [r3, #6]
 8007e16:	b2da      	uxtb	r2, r3
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007e1e:	6939      	ldr	r1, [r7, #16]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	88db      	ldrh	r3, [r3, #6]
 8007e24:	461a      	mov	r2, r3
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f001 fa25 	bl	8009276 <USBD_CtlPrepareRx>
      break;
 8007e2c:	e058      	b.n	8007ee0 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	683a      	ldr	r2, [r7, #0]
 8007e38:	7850      	ldrb	r0, [r2, #1]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	6839      	ldr	r1, [r7, #0]
 8007e3e:	4798      	blx	r3
      break;
 8007e40:	e04e      	b.n	8007ee0 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	785b      	ldrb	r3, [r3, #1]
 8007e46:	2b0b      	cmp	r3, #11
 8007e48:	d02e      	beq.n	8007ea8 <USBD_CDC_Setup+0x104>
 8007e4a:	2b0b      	cmp	r3, #11
 8007e4c:	dc38      	bgt.n	8007ec0 <USBD_CDC_Setup+0x11c>
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d002      	beq.n	8007e58 <USBD_CDC_Setup+0xb4>
 8007e52:	2b0a      	cmp	r3, #10
 8007e54:	d014      	beq.n	8007e80 <USBD_CDC_Setup+0xdc>
 8007e56:	e033      	b.n	8007ec0 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e5e:	2b03      	cmp	r3, #3
 8007e60:	d107      	bne.n	8007e72 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007e62:	f107 030c 	add.w	r3, r7, #12
 8007e66:	2202      	movs	r2, #2
 8007e68:	4619      	mov	r1, r3
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f001 f9d5 	bl	800921a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e70:	e02e      	b.n	8007ed0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007e72:	6839      	ldr	r1, [r7, #0]
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f001 f966 	bl	8009146 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e7a:	2302      	movs	r3, #2
 8007e7c:	75fb      	strb	r3, [r7, #23]
          break;
 8007e7e:	e027      	b.n	8007ed0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e86:	2b03      	cmp	r3, #3
 8007e88:	d107      	bne.n	8007e9a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007e8a:	f107 030f 	add.w	r3, r7, #15
 8007e8e:	2201      	movs	r2, #1
 8007e90:	4619      	mov	r1, r3
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f001 f9c1 	bl	800921a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e98:	e01a      	b.n	8007ed0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007e9a:	6839      	ldr	r1, [r7, #0]
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f001 f952 	bl	8009146 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ea2:	2302      	movs	r3, #2
 8007ea4:	75fb      	strb	r3, [r7, #23]
          break;
 8007ea6:	e013      	b.n	8007ed0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eae:	2b03      	cmp	r3, #3
 8007eb0:	d00d      	beq.n	8007ece <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007eb2:	6839      	ldr	r1, [r7, #0]
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f001 f946 	bl	8009146 <USBD_CtlError>
            ret = USBD_FAIL;
 8007eba:	2302      	movs	r3, #2
 8007ebc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007ebe:	e006      	b.n	8007ece <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007ec0:	6839      	ldr	r1, [r7, #0]
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f001 f93f 	bl	8009146 <USBD_CtlError>
          ret = USBD_FAIL;
 8007ec8:	2302      	movs	r3, #2
 8007eca:	75fb      	strb	r3, [r7, #23]
          break;
 8007ecc:	e000      	b.n	8007ed0 <USBD_CDC_Setup+0x12c>
          break;
 8007ece:	bf00      	nop
      }
      break;
 8007ed0:	e006      	b.n	8007ee0 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007ed2:	6839      	ldr	r1, [r7, #0]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f001 f936 	bl	8009146 <USBD_CtlError>
      ret = USBD_FAIL;
 8007eda:	2302      	movs	r3, #2
 8007edc:	75fb      	strb	r3, [r7, #23]
      break;
 8007ede:	bf00      	nop
  }

  return ret;
 8007ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3718      	adds	r7, #24
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b084      	sub	sp, #16
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007efc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f04:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d03a      	beq.n	8007f86 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007f10:	78fa      	ldrb	r2, [r7, #3]
 8007f12:	6879      	ldr	r1, [r7, #4]
 8007f14:	4613      	mov	r3, r2
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4413      	add	r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	440b      	add	r3, r1
 8007f1e:	331c      	adds	r3, #28
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d029      	beq.n	8007f7a <USBD_CDC_DataIn+0x90>
 8007f26:	78fa      	ldrb	r2, [r7, #3]
 8007f28:	6879      	ldr	r1, [r7, #4]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4413      	add	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	440b      	add	r3, r1
 8007f34:	331c      	adds	r3, #28
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	78f9      	ldrb	r1, [r7, #3]
 8007f3a:	68b8      	ldr	r0, [r7, #8]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	440b      	add	r3, r1
 8007f42:	00db      	lsls	r3, r3, #3
 8007f44:	4403      	add	r3, r0
 8007f46:	3338      	adds	r3, #56	; 0x38
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f4e:	fb01 f303 	mul.w	r3, r1, r3
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d110      	bne.n	8007f7a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007f58:	78fa      	ldrb	r2, [r7, #3]
 8007f5a:	6879      	ldr	r1, [r7, #4]
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	4413      	add	r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	440b      	add	r3, r1
 8007f66:	331c      	adds	r3, #28
 8007f68:	2200      	movs	r2, #0
 8007f6a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007f6c:	78f9      	ldrb	r1, [r7, #3]
 8007f6e:	2300      	movs	r3, #0
 8007f70:	2200      	movs	r2, #0
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f001 fdcd 	bl	8009b12 <USBD_LL_Transmit>
 8007f78:	e003      	b.n	8007f82 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007f82:	2300      	movs	r3, #0
 8007f84:	e000      	b.n	8007f88 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007f86:	2302      	movs	r3, #2
  }
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	460b      	mov	r3, r1
 8007f9a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fa2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007fa4:	78fb      	ldrb	r3, [r7, #3]
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f001 fdf8 	bl	8009b9e <USBD_LL_GetRxDataSize>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00d      	beq.n	8007fdc <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007fd4:	4611      	mov	r1, r2
 8007fd6:	4798      	blx	r3

    return USBD_OK;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	e000      	b.n	8007fde <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007fdc:	2302      	movs	r3, #2
  }
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b084      	sub	sp, #16
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d015      	beq.n	800802c <USBD_CDC_EP0_RxReady+0x46>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008006:	2bff      	cmp	r3, #255	; 0xff
 8008008:	d010      	beq.n	800802c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	68fa      	ldr	r2, [r7, #12]
 8008014:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008018:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008020:	b292      	uxth	r2, r2
 8008022:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	22ff      	movs	r2, #255	; 0xff
 8008028:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
	...

08008038 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2243      	movs	r2, #67	; 0x43
 8008044:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008046:	4b03      	ldr	r3, [pc, #12]	; (8008054 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008048:	4618      	mov	r0, r3
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	bc80      	pop	{r7}
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	20000094 	.word	0x20000094

08008058 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2243      	movs	r2, #67	; 0x43
 8008064:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008066:	4b03      	ldr	r3, [pc, #12]	; (8008074 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008068:	4618      	mov	r0, r3
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	bc80      	pop	{r7}
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	20000050 	.word	0x20000050

08008078 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2243      	movs	r2, #67	; 0x43
 8008084:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008086:	4b03      	ldr	r3, [pc, #12]	; (8008094 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008088:	4618      	mov	r0, r3
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	bc80      	pop	{r7}
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	200000d8 	.word	0x200000d8

08008098 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	220a      	movs	r2, #10
 80080a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80080a6:	4b03      	ldr	r3, [pc, #12]	; (80080b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bc80      	pop	{r7}
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	2000000c 	.word	0x2000000c

080080b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80080c2:	2302      	movs	r3, #2
 80080c4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d005      	beq.n	80080d8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	683a      	ldr	r2, [r7, #0]
 80080d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80080d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3714      	adds	r7, #20
 80080de:	46bd      	mov	sp, r7
 80080e0:	bc80      	pop	{r7}
 80080e2:	4770      	bx	lr

080080e4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b087      	sub	sp, #28
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	4613      	mov	r3, r2
 80080f0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008102:	88fa      	ldrh	r2, [r7, #6]
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	371c      	adds	r7, #28
 8008110:	46bd      	mov	sp, r7
 8008112:	bc80      	pop	{r7}
 8008114:	4770      	bx	lr

08008116 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008116:	b480      	push	{r7}
 8008118:	b085      	sub	sp, #20
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
 800811e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008126:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	683a      	ldr	r2, [r7, #0]
 800812c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3714      	adds	r7, #20
 8008136:	46bd      	mov	sp, r7
 8008138:	bc80      	pop	{r7}
 800813a:	4770      	bx	lr

0800813c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800814a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008152:	2b00      	cmp	r3, #0
 8008154:	d01c      	beq.n	8008190 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800815c:	2b00      	cmp	r3, #0
 800815e:	d115      	bne.n	800818c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2201      	movs	r2, #1
 8008164:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800817e:	b29b      	uxth	r3, r3
 8008180:	2181      	movs	r1, #129	; 0x81
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f001 fcc5 	bl	8009b12 <USBD_LL_Transmit>

      return USBD_OK;
 8008188:	2300      	movs	r3, #0
 800818a:	e002      	b.n	8008192 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800818c:	2301      	movs	r3, #1
 800818e:	e000      	b.n	8008192 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008190:	2302      	movs	r3, #2
  }
}
 8008192:	4618      	mov	r0, r3
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b084      	sub	sp, #16
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081a8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d017      	beq.n	80081e4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	7c1b      	ldrb	r3, [r3, #16]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d109      	bne.n	80081d0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081c6:	2101      	movs	r1, #1
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f001 fcc5 	bl	8009b58 <USBD_LL_PrepareReceive>
 80081ce:	e007      	b.n	80081e0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081d6:	2340      	movs	r3, #64	; 0x40
 80081d8:	2101      	movs	r1, #1
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f001 fcbc 	bl	8009b58 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	e000      	b.n	80081e6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80081e4:	2302      	movs	r3, #2
  }
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b084      	sub	sp, #16
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	60f8      	str	r0, [r7, #12]
 80081f6:	60b9      	str	r1, [r7, #8]
 80081f8:	4613      	mov	r3, r2
 80081fa:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d101      	bne.n	8008206 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008202:	2302      	movs	r3, #2
 8008204:	e01a      	b.n	800823c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800820c:	2b00      	cmp	r3, #0
 800820e:	d003      	beq.n	8008218 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2200      	movs	r2, #0
 8008214:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d003      	beq.n	8008226 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2201      	movs	r2, #1
 800822a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	79fa      	ldrb	r2, [r7, #7]
 8008232:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	f001 fb29 	bl	800988c <USBD_LL_Init>

  return USBD_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800824e:	2300      	movs	r3, #0
 8008250:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d006      	beq.n	8008266 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	683a      	ldr	r2, [r7, #0]
 800825c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008260:	2300      	movs	r3, #0
 8008262:	73fb      	strb	r3, [r7, #15]
 8008264:	e001      	b.n	800826a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008266:	2302      	movs	r3, #2
 8008268:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800826a:	7bfb      	ldrb	r3, [r7, #15]
}
 800826c:	4618      	mov	r0, r3
 800826e:	3714      	adds	r7, #20
 8008270:	46bd      	mov	sp, r7
 8008272:	bc80      	pop	{r7}
 8008274:	4770      	bx	lr

08008276 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b082      	sub	sp, #8
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f001 fb5e 	bl	8009940 <USBD_LL_Start>

  return USBD_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800828e:	b480      	push	{r7}
 8008290:	b083      	sub	sp, #12
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	bc80      	pop	{r7}
 80082a0:	4770      	bx	lr

080082a2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b084      	sub	sp, #16
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	460b      	mov	r3, r1
 80082ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80082ae:	2302      	movs	r3, #2
 80082b0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00c      	beq.n	80082d6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	78fa      	ldrb	r2, [r7, #3]
 80082c6:	4611      	mov	r1, r2
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	4798      	blx	r3
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d101      	bne.n	80082d6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80082d2:	2300      	movs	r3, #0
 80082d4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80082d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	460b      	mov	r3, r1
 80082ea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	78fa      	ldrb	r2, [r7, #3]
 80082f6:	4611      	mov	r1, r2
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	4798      	blx	r3

  return USBD_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b082      	sub	sp, #8
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
 800830e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008316:	6839      	ldr	r1, [r7, #0]
 8008318:	4618      	mov	r0, r3
 800831a:	f000 fed8 	bl	80090ce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2201      	movs	r2, #1
 8008322:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800832c:	461a      	mov	r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800833a:	f003 031f 	and.w	r3, r3, #31
 800833e:	2b02      	cmp	r3, #2
 8008340:	d016      	beq.n	8008370 <USBD_LL_SetupStage+0x6a>
 8008342:	2b02      	cmp	r3, #2
 8008344:	d81c      	bhi.n	8008380 <USBD_LL_SetupStage+0x7a>
 8008346:	2b00      	cmp	r3, #0
 8008348:	d002      	beq.n	8008350 <USBD_LL_SetupStage+0x4a>
 800834a:	2b01      	cmp	r3, #1
 800834c:	d008      	beq.n	8008360 <USBD_LL_SetupStage+0x5a>
 800834e:	e017      	b.n	8008380 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008356:	4619      	mov	r1, r3
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 f9cb 	bl	80086f4 <USBD_StdDevReq>
      break;
 800835e:	e01a      	b.n	8008396 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008366:	4619      	mov	r1, r3
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 fa2d 	bl	80087c8 <USBD_StdItfReq>
      break;
 800836e:	e012      	b.n	8008396 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008376:	4619      	mov	r1, r3
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 fa6d 	bl	8008858 <USBD_StdEPReq>
      break;
 800837e:	e00a      	b.n	8008396 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008386:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800838a:	b2db      	uxtb	r3, r3
 800838c:	4619      	mov	r1, r3
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f001 fb36 	bl	8009a00 <USBD_LL_StallEP>
      break;
 8008394:	bf00      	nop
  }

  return USBD_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	460b      	mov	r3, r1
 80083aa:	607a      	str	r2, [r7, #4]
 80083ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80083ae:	7afb      	ldrb	r3, [r7, #11]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d14b      	bne.n	800844c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80083ba:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083c2:	2b03      	cmp	r3, #3
 80083c4:	d134      	bne.n	8008430 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	68da      	ldr	r2, [r3, #12]
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d919      	bls.n	8008406 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	68da      	ldr	r2, [r3, #12]
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	1ad2      	subs	r2, r2, r3
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	68da      	ldr	r2, [r3, #12]
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d203      	bcs.n	80083f4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	e002      	b.n	80083fa <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	461a      	mov	r2, r3
 80083fc:	6879      	ldr	r1, [r7, #4]
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f000 ff57 	bl	80092b2 <USBD_CtlContinueRx>
 8008404:	e038      	b.n	8008478 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00a      	beq.n	8008428 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008418:	2b03      	cmp	r3, #3
 800841a:	d105      	bne.n	8008428 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f000 ff54 	bl	80092d6 <USBD_CtlSendStatus>
 800842e:	e023      	b.n	8008478 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008436:	2b05      	cmp	r3, #5
 8008438:	d11e      	bne.n	8008478 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008442:	2100      	movs	r1, #0
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f001 fadb 	bl	8009a00 <USBD_LL_StallEP>
 800844a:	e015      	b.n	8008478 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008452:	699b      	ldr	r3, [r3, #24]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00d      	beq.n	8008474 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800845e:	2b03      	cmp	r3, #3
 8008460:	d108      	bne.n	8008474 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008468:	699b      	ldr	r3, [r3, #24]
 800846a:	7afa      	ldrb	r2, [r7, #11]
 800846c:	4611      	mov	r1, r2
 800846e:	68f8      	ldr	r0, [r7, #12]
 8008470:	4798      	blx	r3
 8008472:	e001      	b.n	8008478 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008474:	2302      	movs	r3, #2
 8008476:	e000      	b.n	800847a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3718      	adds	r7, #24
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b086      	sub	sp, #24
 8008486:	af00      	add	r7, sp, #0
 8008488:	60f8      	str	r0, [r7, #12]
 800848a:	460b      	mov	r3, r1
 800848c:	607a      	str	r2, [r7, #4]
 800848e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008490:	7afb      	ldrb	r3, [r7, #11]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d17f      	bne.n	8008596 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	3314      	adds	r3, #20
 800849a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d15c      	bne.n	8008560 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	68da      	ldr	r2, [r3, #12]
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d915      	bls.n	80084de <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	68da      	ldr	r2, [r3, #12]
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	1ad2      	subs	r2, r2, r3
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	461a      	mov	r2, r3
 80084c8:	6879      	ldr	r1, [r7, #4]
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f000 fec1 	bl	8009252 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084d0:	2300      	movs	r3, #0
 80084d2:	2200      	movs	r2, #0
 80084d4:	2100      	movs	r1, #0
 80084d6:	68f8      	ldr	r0, [r7, #12]
 80084d8:	f001 fb3e 	bl	8009b58 <USBD_LL_PrepareReceive>
 80084dc:	e04e      	b.n	800857c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	697a      	ldr	r2, [r7, #20]
 80084e4:	6912      	ldr	r2, [r2, #16]
 80084e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80084ea:	fb01 f202 	mul.w	r2, r1, r2
 80084ee:	1a9b      	subs	r3, r3, r2
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d11c      	bne.n	800852e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	689a      	ldr	r2, [r3, #8]
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d316      	bcc.n	800852e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	689a      	ldr	r2, [r3, #8]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800850a:	429a      	cmp	r2, r3
 800850c:	d20f      	bcs.n	800852e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800850e:	2200      	movs	r2, #0
 8008510:	2100      	movs	r1, #0
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f000 fe9d 	bl	8009252 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2200      	movs	r2, #0
 800851c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008520:	2300      	movs	r3, #0
 8008522:	2200      	movs	r2, #0
 8008524:	2100      	movs	r1, #0
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f001 fb16 	bl	8009b58 <USBD_LL_PrepareReceive>
 800852c:	e026      	b.n	800857c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00a      	beq.n	8008550 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008540:	2b03      	cmp	r3, #3
 8008542:	d105      	bne.n	8008550 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008550:	2180      	movs	r1, #128	; 0x80
 8008552:	68f8      	ldr	r0, [r7, #12]
 8008554:	f001 fa54 	bl	8009a00 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f000 fecf 	bl	80092fc <USBD_CtlReceiveStatus>
 800855e:	e00d      	b.n	800857c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008566:	2b04      	cmp	r3, #4
 8008568:	d004      	beq.n	8008574 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008570:	2b00      	cmp	r3, #0
 8008572:	d103      	bne.n	800857c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008574:	2180      	movs	r1, #128	; 0x80
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f001 fa42 	bl	8009a00 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008582:	2b01      	cmp	r3, #1
 8008584:	d11d      	bne.n	80085c2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f7ff fe81 	bl	800828e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2200      	movs	r2, #0
 8008590:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008594:	e015      	b.n	80085c2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00d      	beq.n	80085be <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80085a8:	2b03      	cmp	r3, #3
 80085aa:	d108      	bne.n	80085be <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085b2:	695b      	ldr	r3, [r3, #20]
 80085b4:	7afa      	ldrb	r2, [r7, #11]
 80085b6:	4611      	mov	r1, r2
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	4798      	blx	r3
 80085bc:	e001      	b.n	80085c2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80085be:	2302      	movs	r3, #2
 80085c0:	e000      	b.n	80085c4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3718      	adds	r7, #24
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085d4:	2340      	movs	r3, #64	; 0x40
 80085d6:	2200      	movs	r2, #0
 80085d8:	2100      	movs	r1, #0
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f001 f9cb 	bl	8009976 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2240      	movs	r2, #64	; 0x40
 80085ec:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085f0:	2340      	movs	r3, #64	; 0x40
 80085f2:	2200      	movs	r2, #0
 80085f4:	2180      	movs	r1, #128	; 0x80
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f001 f9bd 	bl	8009976 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2240      	movs	r2, #64	; 0x40
 8008606:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800862c:	2b00      	cmp	r3, #0
 800862e:	d009      	beq.n	8008644 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	6852      	ldr	r2, [r2, #4]
 800863c:	b2d2      	uxtb	r2, r2
 800863e:	4611      	mov	r1, r2
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	4798      	blx	r3
  }

  return USBD_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3708      	adds	r7, #8
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800864e:	b480      	push	{r7}
 8008650:	b083      	sub	sp, #12
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
 8008656:	460b      	mov	r3, r1
 8008658:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	78fa      	ldrb	r2, [r7, #3]
 800865e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008660:	2300      	movs	r3, #0
}
 8008662:	4618      	mov	r0, r3
 8008664:	370c      	adds	r7, #12
 8008666:	46bd      	mov	sp, r7
 8008668:	bc80      	pop	{r7}
 800866a:	4770      	bx	lr

0800866c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2204      	movs	r2, #4
 8008684:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	370c      	adds	r7, #12
 800868e:	46bd      	mov	sp, r7
 8008690:	bc80      	pop	{r7}
 8008692:	4770      	bx	lr

08008694 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086a2:	2b04      	cmp	r3, #4
 80086a4:	d105      	bne.n	80086b2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	370c      	adds	r7, #12
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bc80      	pop	{r7}
 80086bc:	4770      	bx	lr

080086be <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b082      	sub	sp, #8
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086cc:	2b03      	cmp	r3, #3
 80086ce:	d10b      	bne.n	80086e8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086d6:	69db      	ldr	r3, [r3, #28]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d005      	beq.n	80086e8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086e2:	69db      	ldr	r3, [r3, #28]
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3708      	adds	r7, #8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
	...

080086f4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086fe:	2300      	movs	r3, #0
 8008700:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800870a:	2b40      	cmp	r3, #64	; 0x40
 800870c:	d005      	beq.n	800871a <USBD_StdDevReq+0x26>
 800870e:	2b40      	cmp	r3, #64	; 0x40
 8008710:	d84f      	bhi.n	80087b2 <USBD_StdDevReq+0xbe>
 8008712:	2b00      	cmp	r3, #0
 8008714:	d009      	beq.n	800872a <USBD_StdDevReq+0x36>
 8008716:	2b20      	cmp	r3, #32
 8008718:	d14b      	bne.n	80087b2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	6839      	ldr	r1, [r7, #0]
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	4798      	blx	r3
      break;
 8008728:	e048      	b.n	80087bc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	785b      	ldrb	r3, [r3, #1]
 800872e:	2b09      	cmp	r3, #9
 8008730:	d839      	bhi.n	80087a6 <USBD_StdDevReq+0xb2>
 8008732:	a201      	add	r2, pc, #4	; (adr r2, 8008738 <USBD_StdDevReq+0x44>)
 8008734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008738:	08008789 	.word	0x08008789
 800873c:	0800879d 	.word	0x0800879d
 8008740:	080087a7 	.word	0x080087a7
 8008744:	08008793 	.word	0x08008793
 8008748:	080087a7 	.word	0x080087a7
 800874c:	0800876b 	.word	0x0800876b
 8008750:	08008761 	.word	0x08008761
 8008754:	080087a7 	.word	0x080087a7
 8008758:	0800877f 	.word	0x0800877f
 800875c:	08008775 	.word	0x08008775
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f9dc 	bl	8008b20 <USBD_GetDescriptor>
          break;
 8008768:	e022      	b.n	80087b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800876a:	6839      	ldr	r1, [r7, #0]
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 fb3f 	bl	8008df0 <USBD_SetAddress>
          break;
 8008772:	e01d      	b.n	80087b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008774:	6839      	ldr	r1, [r7, #0]
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 fb7e 	bl	8008e78 <USBD_SetConfig>
          break;
 800877c:	e018      	b.n	80087b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800877e:	6839      	ldr	r1, [r7, #0]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 fc07 	bl	8008f94 <USBD_GetConfig>
          break;
 8008786:	e013      	b.n	80087b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008788:	6839      	ldr	r1, [r7, #0]
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 fc37 	bl	8008ffe <USBD_GetStatus>
          break;
 8008790:	e00e      	b.n	80087b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008792:	6839      	ldr	r1, [r7, #0]
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 fc65 	bl	8009064 <USBD_SetFeature>
          break;
 800879a:	e009      	b.n	80087b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800879c:	6839      	ldr	r1, [r7, #0]
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 fc74 	bl	800908c <USBD_ClrFeature>
          break;
 80087a4:	e004      	b.n	80087b0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80087a6:	6839      	ldr	r1, [r7, #0]
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 fccc 	bl	8009146 <USBD_CtlError>
          break;
 80087ae:	bf00      	nop
      }
      break;
 80087b0:	e004      	b.n	80087bc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80087b2:	6839      	ldr	r1, [r7, #0]
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 fcc6 	bl	8009146 <USBD_CtlError>
      break;
 80087ba:	bf00      	nop
  }

  return ret;
 80087bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop

080087c8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087de:	2b40      	cmp	r3, #64	; 0x40
 80087e0:	d005      	beq.n	80087ee <USBD_StdItfReq+0x26>
 80087e2:	2b40      	cmp	r3, #64	; 0x40
 80087e4:	d82e      	bhi.n	8008844 <USBD_StdItfReq+0x7c>
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d001      	beq.n	80087ee <USBD_StdItfReq+0x26>
 80087ea:	2b20      	cmp	r3, #32
 80087ec:	d12a      	bne.n	8008844 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087f4:	3b01      	subs	r3, #1
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d81d      	bhi.n	8008836 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	889b      	ldrh	r3, [r3, #4]
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	2b01      	cmp	r3, #1
 8008802:	d813      	bhi.n	800882c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	6839      	ldr	r1, [r7, #0]
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	4798      	blx	r3
 8008812:	4603      	mov	r3, r0
 8008814:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	88db      	ldrh	r3, [r3, #6]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d110      	bne.n	8008840 <USBD_StdItfReq+0x78>
 800881e:	7bfb      	ldrb	r3, [r7, #15]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d10d      	bne.n	8008840 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 fd56 	bl	80092d6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800882a:	e009      	b.n	8008840 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800882c:	6839      	ldr	r1, [r7, #0]
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 fc89 	bl	8009146 <USBD_CtlError>
          break;
 8008834:	e004      	b.n	8008840 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008836:	6839      	ldr	r1, [r7, #0]
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 fc84 	bl	8009146 <USBD_CtlError>
          break;
 800883e:	e000      	b.n	8008842 <USBD_StdItfReq+0x7a>
          break;
 8008840:	bf00      	nop
      }
      break;
 8008842:	e004      	b.n	800884e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008844:	6839      	ldr	r1, [r7, #0]
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fc7d 	bl	8009146 <USBD_CtlError>
      break;
 800884c:	bf00      	nop
  }

  return USBD_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008862:	2300      	movs	r3, #0
 8008864:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	889b      	ldrh	r3, [r3, #4]
 800886a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008874:	2b40      	cmp	r3, #64	; 0x40
 8008876:	d007      	beq.n	8008888 <USBD_StdEPReq+0x30>
 8008878:	2b40      	cmp	r3, #64	; 0x40
 800887a:	f200 8146 	bhi.w	8008b0a <USBD_StdEPReq+0x2b2>
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00a      	beq.n	8008898 <USBD_StdEPReq+0x40>
 8008882:	2b20      	cmp	r3, #32
 8008884:	f040 8141 	bne.w	8008b0a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	6839      	ldr	r1, [r7, #0]
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	4798      	blx	r3
      break;
 8008896:	e13d      	b.n	8008b14 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088a0:	2b20      	cmp	r3, #32
 80088a2:	d10a      	bne.n	80088ba <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	6839      	ldr	r1, [r7, #0]
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	4798      	blx	r3
 80088b2:	4603      	mov	r3, r0
 80088b4:	73fb      	strb	r3, [r7, #15]

        return ret;
 80088b6:	7bfb      	ldrb	r3, [r7, #15]
 80088b8:	e12d      	b.n	8008b16 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	785b      	ldrb	r3, [r3, #1]
 80088be:	2b03      	cmp	r3, #3
 80088c0:	d007      	beq.n	80088d2 <USBD_StdEPReq+0x7a>
 80088c2:	2b03      	cmp	r3, #3
 80088c4:	f300 811b 	bgt.w	8008afe <USBD_StdEPReq+0x2a6>
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d072      	beq.n	80089b2 <USBD_StdEPReq+0x15a>
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d03a      	beq.n	8008946 <USBD_StdEPReq+0xee>
 80088d0:	e115      	b.n	8008afe <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088d8:	2b02      	cmp	r3, #2
 80088da:	d002      	beq.n	80088e2 <USBD_StdEPReq+0x8a>
 80088dc:	2b03      	cmp	r3, #3
 80088de:	d015      	beq.n	800890c <USBD_StdEPReq+0xb4>
 80088e0:	e02b      	b.n	800893a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088e2:	7bbb      	ldrb	r3, [r7, #14]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d00c      	beq.n	8008902 <USBD_StdEPReq+0xaa>
 80088e8:	7bbb      	ldrb	r3, [r7, #14]
 80088ea:	2b80      	cmp	r3, #128	; 0x80
 80088ec:	d009      	beq.n	8008902 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80088ee:	7bbb      	ldrb	r3, [r7, #14]
 80088f0:	4619      	mov	r1, r3
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f001 f884 	bl	8009a00 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80088f8:	2180      	movs	r1, #128	; 0x80
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f001 f880 	bl	8009a00 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008900:	e020      	b.n	8008944 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008902:	6839      	ldr	r1, [r7, #0]
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 fc1e 	bl	8009146 <USBD_CtlError>
              break;
 800890a:	e01b      	b.n	8008944 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	885b      	ldrh	r3, [r3, #2]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10e      	bne.n	8008932 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008914:	7bbb      	ldrb	r3, [r7, #14]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00b      	beq.n	8008932 <USBD_StdEPReq+0xda>
 800891a:	7bbb      	ldrb	r3, [r7, #14]
 800891c:	2b80      	cmp	r3, #128	; 0x80
 800891e:	d008      	beq.n	8008932 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	88db      	ldrh	r3, [r3, #6]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d104      	bne.n	8008932 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008928:	7bbb      	ldrb	r3, [r7, #14]
 800892a:	4619      	mov	r1, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f001 f867 	bl	8009a00 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 fccf 	bl	80092d6 <USBD_CtlSendStatus>

              break;
 8008938:	e004      	b.n	8008944 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800893a:	6839      	ldr	r1, [r7, #0]
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 fc02 	bl	8009146 <USBD_CtlError>
              break;
 8008942:	bf00      	nop
          }
          break;
 8008944:	e0e0      	b.n	8008b08 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800894c:	2b02      	cmp	r3, #2
 800894e:	d002      	beq.n	8008956 <USBD_StdEPReq+0xfe>
 8008950:	2b03      	cmp	r3, #3
 8008952:	d015      	beq.n	8008980 <USBD_StdEPReq+0x128>
 8008954:	e026      	b.n	80089a4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008956:	7bbb      	ldrb	r3, [r7, #14]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00c      	beq.n	8008976 <USBD_StdEPReq+0x11e>
 800895c:	7bbb      	ldrb	r3, [r7, #14]
 800895e:	2b80      	cmp	r3, #128	; 0x80
 8008960:	d009      	beq.n	8008976 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008962:	7bbb      	ldrb	r3, [r7, #14]
 8008964:	4619      	mov	r1, r3
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f001 f84a 	bl	8009a00 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800896c:	2180      	movs	r1, #128	; 0x80
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f001 f846 	bl	8009a00 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008974:	e01c      	b.n	80089b0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008976:	6839      	ldr	r1, [r7, #0]
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 fbe4 	bl	8009146 <USBD_CtlError>
              break;
 800897e:	e017      	b.n	80089b0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	885b      	ldrh	r3, [r3, #2]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d112      	bne.n	80089ae <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008988:	7bbb      	ldrb	r3, [r7, #14]
 800898a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800898e:	2b00      	cmp	r3, #0
 8008990:	d004      	beq.n	800899c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008992:	7bbb      	ldrb	r3, [r7, #14]
 8008994:	4619      	mov	r1, r3
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f001 f851 	bl	8009a3e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 fc9a 	bl	80092d6 <USBD_CtlSendStatus>
              }
              break;
 80089a2:	e004      	b.n	80089ae <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80089a4:	6839      	ldr	r1, [r7, #0]
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fbcd 	bl	8009146 <USBD_CtlError>
              break;
 80089ac:	e000      	b.n	80089b0 <USBD_StdEPReq+0x158>
              break;
 80089ae:	bf00      	nop
          }
          break;
 80089b0:	e0aa      	b.n	8008b08 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	d002      	beq.n	80089c2 <USBD_StdEPReq+0x16a>
 80089bc:	2b03      	cmp	r3, #3
 80089be:	d032      	beq.n	8008a26 <USBD_StdEPReq+0x1ce>
 80089c0:	e097      	b.n	8008af2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089c2:	7bbb      	ldrb	r3, [r7, #14]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d007      	beq.n	80089d8 <USBD_StdEPReq+0x180>
 80089c8:	7bbb      	ldrb	r3, [r7, #14]
 80089ca:	2b80      	cmp	r3, #128	; 0x80
 80089cc:	d004      	beq.n	80089d8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80089ce:	6839      	ldr	r1, [r7, #0]
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 fbb8 	bl	8009146 <USBD_CtlError>
                break;
 80089d6:	e091      	b.n	8008afc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	da0b      	bge.n	80089f8 <USBD_StdEPReq+0x1a0>
 80089e0:	7bbb      	ldrb	r3, [r7, #14]
 80089e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089e6:	4613      	mov	r3, r2
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	4413      	add	r3, r2
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	3310      	adds	r3, #16
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	4413      	add	r3, r2
 80089f4:	3304      	adds	r3, #4
 80089f6:	e00b      	b.n	8008a10 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80089f8:	7bbb      	ldrb	r3, [r7, #14]
 80089fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089fe:	4613      	mov	r3, r2
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	4413      	add	r3, r2
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	3304      	adds	r3, #4
 8008a10:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	2200      	movs	r2, #0
 8008a16:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fbfb 	bl	800921a <USBD_CtlSendData>
              break;
 8008a24:	e06a      	b.n	8008afc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008a26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	da11      	bge.n	8008a52 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a2e:	7bbb      	ldrb	r3, [r7, #14]
 8008a30:	f003 020f 	and.w	r2, r3, #15
 8008a34:	6879      	ldr	r1, [r7, #4]
 8008a36:	4613      	mov	r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4413      	add	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	440b      	add	r3, r1
 8008a40:	3318      	adds	r3, #24
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d117      	bne.n	8008a78 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008a48:	6839      	ldr	r1, [r7, #0]
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 fb7b 	bl	8009146 <USBD_CtlError>
                  break;
 8008a50:	e054      	b.n	8008afc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a52:	7bbb      	ldrb	r3, [r7, #14]
 8008a54:	f003 020f 	and.w	r2, r3, #15
 8008a58:	6879      	ldr	r1, [r7, #4]
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	4413      	add	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	440b      	add	r3, r1
 8008a64:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d104      	bne.n	8008a78 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008a6e:	6839      	ldr	r1, [r7, #0]
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 fb68 	bl	8009146 <USBD_CtlError>
                  break;
 8008a76:	e041      	b.n	8008afc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	da0b      	bge.n	8008a98 <USBD_StdEPReq+0x240>
 8008a80:	7bbb      	ldrb	r3, [r7, #14]
 8008a82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a86:	4613      	mov	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	4413      	add	r3, r2
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	3310      	adds	r3, #16
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	4413      	add	r3, r2
 8008a94:	3304      	adds	r3, #4
 8008a96:	e00b      	b.n	8008ab0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a98:	7bbb      	ldrb	r3, [r7, #14]
 8008a9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4413      	add	r3, r2
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	4413      	add	r3, r2
 8008aae:	3304      	adds	r3, #4
 8008ab0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ab2:	7bbb      	ldrb	r3, [r7, #14]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d002      	beq.n	8008abe <USBD_StdEPReq+0x266>
 8008ab8:	7bbb      	ldrb	r3, [r7, #14]
 8008aba:	2b80      	cmp	r3, #128	; 0x80
 8008abc:	d103      	bne.n	8008ac6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	601a      	str	r2, [r3, #0]
 8008ac4:	e00e      	b.n	8008ae4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008ac6:	7bbb      	ldrb	r3, [r7, #14]
 8008ac8:	4619      	mov	r1, r3
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 ffd6 	bl	8009a7c <USBD_LL_IsStallEP>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d003      	beq.n	8008ade <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	601a      	str	r2, [r3, #0]
 8008adc:	e002      	b.n	8008ae4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	2202      	movs	r2, #2
 8008ae8:	4619      	mov	r1, r3
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 fb95 	bl	800921a <USBD_CtlSendData>
              break;
 8008af0:	e004      	b.n	8008afc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008af2:	6839      	ldr	r1, [r7, #0]
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 fb26 	bl	8009146 <USBD_CtlError>
              break;
 8008afa:	bf00      	nop
          }
          break;
 8008afc:	e004      	b.n	8008b08 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008afe:	6839      	ldr	r1, [r7, #0]
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 fb20 	bl	8009146 <USBD_CtlError>
          break;
 8008b06:	bf00      	nop
      }
      break;
 8008b08:	e004      	b.n	8008b14 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008b0a:	6839      	ldr	r1, [r7, #0]
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 fb1a 	bl	8009146 <USBD_CtlError>
      break;
 8008b12:	bf00      	nop
  }

  return ret;
 8008b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
	...

08008b20 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b32:	2300      	movs	r3, #0
 8008b34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	885b      	ldrh	r3, [r3, #2]
 8008b3a:	0a1b      	lsrs	r3, r3, #8
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	2b06      	cmp	r3, #6
 8008b42:	f200 8128 	bhi.w	8008d96 <USBD_GetDescriptor+0x276>
 8008b46:	a201      	add	r2, pc, #4	; (adr r2, 8008b4c <USBD_GetDescriptor+0x2c>)
 8008b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4c:	08008b69 	.word	0x08008b69
 8008b50:	08008b81 	.word	0x08008b81
 8008b54:	08008bc1 	.word	0x08008bc1
 8008b58:	08008d97 	.word	0x08008d97
 8008b5c:	08008d97 	.word	0x08008d97
 8008b60:	08008d37 	.word	0x08008d37
 8008b64:	08008d63 	.word	0x08008d63
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	7c12      	ldrb	r2, [r2, #16]
 8008b74:	f107 0108 	add.w	r1, r7, #8
 8008b78:	4610      	mov	r0, r2
 8008b7a:	4798      	blx	r3
 8008b7c:	60f8      	str	r0, [r7, #12]
      break;
 8008b7e:	e112      	b.n	8008da6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	7c1b      	ldrb	r3, [r3, #16]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d10d      	bne.n	8008ba4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b90:	f107 0208 	add.w	r2, r7, #8
 8008b94:	4610      	mov	r0, r2
 8008b96:	4798      	blx	r3
 8008b98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	2202      	movs	r2, #2
 8008ba0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008ba2:	e100      	b.n	8008da6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bac:	f107 0208 	add.w	r2, r7, #8
 8008bb0:	4610      	mov	r0, r2
 8008bb2:	4798      	blx	r3
 8008bb4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	2202      	movs	r2, #2
 8008bbc:	701a      	strb	r2, [r3, #0]
      break;
 8008bbe:	e0f2      	b.n	8008da6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	885b      	ldrh	r3, [r3, #2]
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	2b05      	cmp	r3, #5
 8008bc8:	f200 80ac 	bhi.w	8008d24 <USBD_GetDescriptor+0x204>
 8008bcc:	a201      	add	r2, pc, #4	; (adr r2, 8008bd4 <USBD_GetDescriptor+0xb4>)
 8008bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd2:	bf00      	nop
 8008bd4:	08008bed 	.word	0x08008bed
 8008bd8:	08008c21 	.word	0x08008c21
 8008bdc:	08008c55 	.word	0x08008c55
 8008be0:	08008c89 	.word	0x08008c89
 8008be4:	08008cbd 	.word	0x08008cbd
 8008be8:	08008cf1 	.word	0x08008cf1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d00b      	beq.n	8008c10 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	7c12      	ldrb	r2, [r2, #16]
 8008c04:	f107 0108 	add.w	r1, r7, #8
 8008c08:	4610      	mov	r0, r2
 8008c0a:	4798      	blx	r3
 8008c0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c0e:	e091      	b.n	8008d34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c10:	6839      	ldr	r1, [r7, #0]
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 fa97 	bl	8009146 <USBD_CtlError>
            err++;
 8008c18:	7afb      	ldrb	r3, [r7, #11]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c1e:	e089      	b.n	8008d34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d00b      	beq.n	8008c44 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	7c12      	ldrb	r2, [r2, #16]
 8008c38:	f107 0108 	add.w	r1, r7, #8
 8008c3c:	4610      	mov	r0, r2
 8008c3e:	4798      	blx	r3
 8008c40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c42:	e077      	b.n	8008d34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c44:	6839      	ldr	r1, [r7, #0]
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 fa7d 	bl	8009146 <USBD_CtlError>
            err++;
 8008c4c:	7afb      	ldrb	r3, [r7, #11]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	72fb      	strb	r3, [r7, #11]
          break;
 8008c52:	e06f      	b.n	8008d34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d00b      	beq.n	8008c78 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	7c12      	ldrb	r2, [r2, #16]
 8008c6c:	f107 0108 	add.w	r1, r7, #8
 8008c70:	4610      	mov	r0, r2
 8008c72:	4798      	blx	r3
 8008c74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c76:	e05d      	b.n	8008d34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c78:	6839      	ldr	r1, [r7, #0]
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fa63 	bl	8009146 <USBD_CtlError>
            err++;
 8008c80:	7afb      	ldrb	r3, [r7, #11]
 8008c82:	3301      	adds	r3, #1
 8008c84:	72fb      	strb	r3, [r7, #11]
          break;
 8008c86:	e055      	b.n	8008d34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00b      	beq.n	8008cac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	7c12      	ldrb	r2, [r2, #16]
 8008ca0:	f107 0108 	add.w	r1, r7, #8
 8008ca4:	4610      	mov	r0, r2
 8008ca6:	4798      	blx	r3
 8008ca8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008caa:	e043      	b.n	8008d34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cac:	6839      	ldr	r1, [r7, #0]
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fa49 	bl	8009146 <USBD_CtlError>
            err++;
 8008cb4:	7afb      	ldrb	r3, [r7, #11]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	72fb      	strb	r3, [r7, #11]
          break;
 8008cba:	e03b      	b.n	8008d34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cc2:	695b      	ldr	r3, [r3, #20]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00b      	beq.n	8008ce0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cce:	695b      	ldr	r3, [r3, #20]
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	7c12      	ldrb	r2, [r2, #16]
 8008cd4:	f107 0108 	add.w	r1, r7, #8
 8008cd8:	4610      	mov	r0, r2
 8008cda:	4798      	blx	r3
 8008cdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cde:	e029      	b.n	8008d34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ce0:	6839      	ldr	r1, [r7, #0]
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fa2f 	bl	8009146 <USBD_CtlError>
            err++;
 8008ce8:	7afb      	ldrb	r3, [r7, #11]
 8008cea:	3301      	adds	r3, #1
 8008cec:	72fb      	strb	r3, [r7, #11]
          break;
 8008cee:	e021      	b.n	8008d34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cf6:	699b      	ldr	r3, [r3, #24]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00b      	beq.n	8008d14 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d02:	699b      	ldr	r3, [r3, #24]
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	7c12      	ldrb	r2, [r2, #16]
 8008d08:	f107 0108 	add.w	r1, r7, #8
 8008d0c:	4610      	mov	r0, r2
 8008d0e:	4798      	blx	r3
 8008d10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d12:	e00f      	b.n	8008d34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d14:	6839      	ldr	r1, [r7, #0]
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 fa15 	bl	8009146 <USBD_CtlError>
            err++;
 8008d1c:	7afb      	ldrb	r3, [r7, #11]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	72fb      	strb	r3, [r7, #11]
          break;
 8008d22:	e007      	b.n	8008d34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008d24:	6839      	ldr	r1, [r7, #0]
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 fa0d 	bl	8009146 <USBD_CtlError>
          err++;
 8008d2c:	7afb      	ldrb	r3, [r7, #11]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008d32:	e038      	b.n	8008da6 <USBD_GetDescriptor+0x286>
 8008d34:	e037      	b.n	8008da6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	7c1b      	ldrb	r3, [r3, #16]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d109      	bne.n	8008d52 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d46:	f107 0208 	add.w	r2, r7, #8
 8008d4a:	4610      	mov	r0, r2
 8008d4c:	4798      	blx	r3
 8008d4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d50:	e029      	b.n	8008da6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d52:	6839      	ldr	r1, [r7, #0]
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 f9f6 	bl	8009146 <USBD_CtlError>
        err++;
 8008d5a:	7afb      	ldrb	r3, [r7, #11]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	72fb      	strb	r3, [r7, #11]
      break;
 8008d60:	e021      	b.n	8008da6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	7c1b      	ldrb	r3, [r3, #16]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10d      	bne.n	8008d86 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d72:	f107 0208 	add.w	r2, r7, #8
 8008d76:	4610      	mov	r0, r2
 8008d78:	4798      	blx	r3
 8008d7a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	2207      	movs	r2, #7
 8008d82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d84:	e00f      	b.n	8008da6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d86:	6839      	ldr	r1, [r7, #0]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 f9dc 	bl	8009146 <USBD_CtlError>
        err++;
 8008d8e:	7afb      	ldrb	r3, [r7, #11]
 8008d90:	3301      	adds	r3, #1
 8008d92:	72fb      	strb	r3, [r7, #11]
      break;
 8008d94:	e007      	b.n	8008da6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008d96:	6839      	ldr	r1, [r7, #0]
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 f9d4 	bl	8009146 <USBD_CtlError>
      err++;
 8008d9e:	7afb      	ldrb	r3, [r7, #11]
 8008da0:	3301      	adds	r3, #1
 8008da2:	72fb      	strb	r3, [r7, #11]
      break;
 8008da4:	bf00      	nop
  }

  if (err != 0U)
 8008da6:	7afb      	ldrb	r3, [r7, #11]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d11c      	bne.n	8008de6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008dac:	893b      	ldrh	r3, [r7, #8]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d011      	beq.n	8008dd6 <USBD_GetDescriptor+0x2b6>
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	88db      	ldrh	r3, [r3, #6]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00d      	beq.n	8008dd6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	88da      	ldrh	r2, [r3, #6]
 8008dbe:	893b      	ldrh	r3, [r7, #8]
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	bf28      	it	cs
 8008dc4:	4613      	movcs	r3, r2
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008dca:	893b      	ldrh	r3, [r7, #8]
 8008dcc:	461a      	mov	r2, r3
 8008dce:	68f9      	ldr	r1, [r7, #12]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 fa22 	bl	800921a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	88db      	ldrh	r3, [r3, #6]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d104      	bne.n	8008de8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 fa79 	bl	80092d6 <USBD_CtlSendStatus>
 8008de4:	e000      	b.n	8008de8 <USBD_GetDescriptor+0x2c8>
    return;
 8008de6:	bf00      	nop
    }
  }
}
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop

08008df0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	889b      	ldrh	r3, [r3, #4]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d130      	bne.n	8008e64 <USBD_SetAddress+0x74>
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	88db      	ldrh	r3, [r3, #6]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d12c      	bne.n	8008e64 <USBD_SetAddress+0x74>
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	885b      	ldrh	r3, [r3, #2]
 8008e0e:	2b7f      	cmp	r3, #127	; 0x7f
 8008e10:	d828      	bhi.n	8008e64 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	885b      	ldrh	r3, [r3, #2]
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e1c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e24:	2b03      	cmp	r3, #3
 8008e26:	d104      	bne.n	8008e32 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008e28:	6839      	ldr	r1, [r7, #0]
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f98b 	bl	8009146 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e30:	e01d      	b.n	8008e6e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	7bfa      	ldrb	r2, [r7, #15]
 8008e36:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e3a:	7bfb      	ldrb	r3, [r7, #15]
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fe48 	bl	8009ad4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 fa46 	bl	80092d6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e4a:	7bfb      	ldrb	r3, [r7, #15]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d004      	beq.n	8008e5a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2202      	movs	r2, #2
 8008e54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e58:	e009      	b.n	8008e6e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e62:	e004      	b.n	8008e6e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008e64:	6839      	ldr	r1, [r7, #0]
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f96d 	bl	8009146 <USBD_CtlError>
  }
}
 8008e6c:	bf00      	nop
 8008e6e:	bf00      	nop
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
	...

08008e78 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	885b      	ldrh	r3, [r3, #2]
 8008e86:	b2da      	uxtb	r2, r3
 8008e88:	4b41      	ldr	r3, [pc, #260]	; (8008f90 <USBD_SetConfig+0x118>)
 8008e8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008e8c:	4b40      	ldr	r3, [pc, #256]	; (8008f90 <USBD_SetConfig+0x118>)
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d904      	bls.n	8008e9e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008e94:	6839      	ldr	r1, [r7, #0]
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 f955 	bl	8009146 <USBD_CtlError>
 8008e9c:	e075      	b.n	8008f8a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ea4:	2b02      	cmp	r3, #2
 8008ea6:	d002      	beq.n	8008eae <USBD_SetConfig+0x36>
 8008ea8:	2b03      	cmp	r3, #3
 8008eaa:	d023      	beq.n	8008ef4 <USBD_SetConfig+0x7c>
 8008eac:	e062      	b.n	8008f74 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008eae:	4b38      	ldr	r3, [pc, #224]	; (8008f90 <USBD_SetConfig+0x118>)
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d01a      	beq.n	8008eec <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008eb6:	4b36      	ldr	r3, [pc, #216]	; (8008f90 <USBD_SetConfig+0x118>)
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	461a      	mov	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2203      	movs	r2, #3
 8008ec4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008ec8:	4b31      	ldr	r3, [pc, #196]	; (8008f90 <USBD_SetConfig+0x118>)
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	4619      	mov	r1, r3
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f7ff f9e7 	bl	80082a2 <USBD_SetClassConfig>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d104      	bne.n	8008ee4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008eda:	6839      	ldr	r1, [r7, #0]
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 f932 	bl	8009146 <USBD_CtlError>
            return;
 8008ee2:	e052      	b.n	8008f8a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 f9f6 	bl	80092d6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008eea:	e04e      	b.n	8008f8a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 f9f2 	bl	80092d6 <USBD_CtlSendStatus>
        break;
 8008ef2:	e04a      	b.n	8008f8a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008ef4:	4b26      	ldr	r3, [pc, #152]	; (8008f90 <USBD_SetConfig+0x118>)
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d112      	bne.n	8008f22 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2202      	movs	r2, #2
 8008f00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008f04:	4b22      	ldr	r3, [pc, #136]	; (8008f90 <USBD_SetConfig+0x118>)
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	461a      	mov	r2, r3
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008f0e:	4b20      	ldr	r3, [pc, #128]	; (8008f90 <USBD_SetConfig+0x118>)
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	4619      	mov	r1, r3
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f7ff f9e3 	bl	80082e0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 f9db 	bl	80092d6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008f20:	e033      	b.n	8008f8a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008f22:	4b1b      	ldr	r3, [pc, #108]	; (8008f90 <USBD_SetConfig+0x118>)
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	461a      	mov	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d01d      	beq.n	8008f6c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	4619      	mov	r1, r3
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f7ff f9d1 	bl	80082e0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008f3e:	4b14      	ldr	r3, [pc, #80]	; (8008f90 <USBD_SetConfig+0x118>)
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	461a      	mov	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008f48:	4b11      	ldr	r3, [pc, #68]	; (8008f90 <USBD_SetConfig+0x118>)
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f7ff f9a7 	bl	80082a2 <USBD_SetClassConfig>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d104      	bne.n	8008f64 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008f5a:	6839      	ldr	r1, [r7, #0]
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 f8f2 	bl	8009146 <USBD_CtlError>
            return;
 8008f62:	e012      	b.n	8008f8a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 f9b6 	bl	80092d6 <USBD_CtlSendStatus>
        break;
 8008f6a:	e00e      	b.n	8008f8a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 f9b2 	bl	80092d6 <USBD_CtlSendStatus>
        break;
 8008f72:	e00a      	b.n	8008f8a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008f74:	6839      	ldr	r1, [r7, #0]
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 f8e5 	bl	8009146 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008f7c:	4b04      	ldr	r3, [pc, #16]	; (8008f90 <USBD_SetConfig+0x118>)
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	4619      	mov	r1, r3
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f7ff f9ac 	bl	80082e0 <USBD_ClrClassConfig>
        break;
 8008f88:	bf00      	nop
    }
  }
}
 8008f8a:	3708      	adds	r7, #8
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	200007c8 	.word	0x200007c8

08008f94 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	88db      	ldrh	r3, [r3, #6]
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d004      	beq.n	8008fb0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008fa6:	6839      	ldr	r1, [r7, #0]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 f8cc 	bl	8009146 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008fae:	e022      	b.n	8008ff6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	dc02      	bgt.n	8008fc0 <USBD_GetConfig+0x2c>
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	dc03      	bgt.n	8008fc6 <USBD_GetConfig+0x32>
 8008fbe:	e015      	b.n	8008fec <USBD_GetConfig+0x58>
 8008fc0:	2b03      	cmp	r3, #3
 8008fc2:	d00b      	beq.n	8008fdc <USBD_GetConfig+0x48>
 8008fc4:	e012      	b.n	8008fec <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	3308      	adds	r3, #8
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 f920 	bl	800921a <USBD_CtlSendData>
        break;
 8008fda:	e00c      	b.n	8008ff6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	3304      	adds	r3, #4
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f918 	bl	800921a <USBD_CtlSendData>
        break;
 8008fea:	e004      	b.n	8008ff6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008fec:	6839      	ldr	r1, [r7, #0]
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 f8a9 	bl	8009146 <USBD_CtlError>
        break;
 8008ff4:	bf00      	nop
}
 8008ff6:	bf00      	nop
 8008ff8:	3708      	adds	r7, #8
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ffe:	b580      	push	{r7, lr}
 8009000:	b082      	sub	sp, #8
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
 8009006:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800900e:	3b01      	subs	r3, #1
 8009010:	2b02      	cmp	r3, #2
 8009012:	d81e      	bhi.n	8009052 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	88db      	ldrh	r3, [r3, #6]
 8009018:	2b02      	cmp	r3, #2
 800901a:	d004      	beq.n	8009026 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800901c:	6839      	ldr	r1, [r7, #0]
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 f891 	bl	8009146 <USBD_CtlError>
        break;
 8009024:	e01a      	b.n	800905c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2201      	movs	r2, #1
 800902a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009032:	2b00      	cmp	r3, #0
 8009034:	d005      	beq.n	8009042 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	f043 0202 	orr.w	r2, r3, #2
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	330c      	adds	r3, #12
 8009046:	2202      	movs	r2, #2
 8009048:	4619      	mov	r1, r3
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f8e5 	bl	800921a <USBD_CtlSendData>
      break;
 8009050:	e004      	b.n	800905c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f876 	bl	8009146 <USBD_CtlError>
      break;
 800905a:	bf00      	nop
  }
}
 800905c:	bf00      	nop
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	885b      	ldrh	r3, [r3, #2]
 8009072:	2b01      	cmp	r3, #1
 8009074:	d106      	bne.n	8009084 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2201      	movs	r2, #1
 800907a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 f929 	bl	80092d6 <USBD_CtlSendStatus>
  }
}
 8009084:	bf00      	nop
 8009086:	3708      	adds	r7, #8
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800909c:	3b01      	subs	r3, #1
 800909e:	2b02      	cmp	r3, #2
 80090a0:	d80b      	bhi.n	80090ba <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	885b      	ldrh	r3, [r3, #2]
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d10c      	bne.n	80090c4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 f90f 	bl	80092d6 <USBD_CtlSendStatus>
      }
      break;
 80090b8:	e004      	b.n	80090c4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80090ba:	6839      	ldr	r1, [r7, #0]
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 f842 	bl	8009146 <USBD_CtlError>
      break;
 80090c2:	e000      	b.n	80090c6 <USBD_ClrFeature+0x3a>
      break;
 80090c4:	bf00      	nop
  }
}
 80090c6:	bf00      	nop
 80090c8:	3708      	adds	r7, #8
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80090ce:	b480      	push	{r7}
 80090d0:	b083      	sub	sp, #12
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
 80090d6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	781a      	ldrb	r2, [r3, #0]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	785a      	ldrb	r2, [r3, #1]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	3302      	adds	r3, #2
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	3303      	adds	r3, #3
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	021b      	lsls	r3, r3, #8
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	4413      	add	r3, r2
 80090fe:	b29a      	uxth	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	3304      	adds	r3, #4
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	b29a      	uxth	r2, r3
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	3305      	adds	r3, #5
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	b29b      	uxth	r3, r3
 8009114:	021b      	lsls	r3, r3, #8
 8009116:	b29b      	uxth	r3, r3
 8009118:	4413      	add	r3, r2
 800911a:	b29a      	uxth	r2, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	3306      	adds	r3, #6
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	b29a      	uxth	r2, r3
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	3307      	adds	r3, #7
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	b29b      	uxth	r3, r3
 8009130:	021b      	lsls	r3, r3, #8
 8009132:	b29b      	uxth	r3, r3
 8009134:	4413      	add	r3, r2
 8009136:	b29a      	uxth	r2, r3
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	80da      	strh	r2, [r3, #6]

}
 800913c:	bf00      	nop
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	bc80      	pop	{r7}
 8009144:	4770      	bx	lr

08009146 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b082      	sub	sp, #8
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
 800914e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009150:	2180      	movs	r1, #128	; 0x80
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 fc54 	bl	8009a00 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009158:	2100      	movs	r1, #0
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 fc50 	bl	8009a00 <USBD_LL_StallEP>
}
 8009160:	bf00      	nop
 8009162:	3708      	adds	r7, #8
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b086      	sub	sp, #24
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009174:	2300      	movs	r3, #0
 8009176:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d032      	beq.n	80091e4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	f000 f834 	bl	80091ec <USBD_GetLen>
 8009184:	4603      	mov	r3, r0
 8009186:	3301      	adds	r3, #1
 8009188:	b29b      	uxth	r3, r3
 800918a:	005b      	lsls	r3, r3, #1
 800918c:	b29a      	uxth	r2, r3
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009192:	7dfb      	ldrb	r3, [r7, #23]
 8009194:	1c5a      	adds	r2, r3, #1
 8009196:	75fa      	strb	r2, [r7, #23]
 8009198:	461a      	mov	r2, r3
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	4413      	add	r3, r2
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	7812      	ldrb	r2, [r2, #0]
 80091a2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80091a4:	7dfb      	ldrb	r3, [r7, #23]
 80091a6:	1c5a      	adds	r2, r3, #1
 80091a8:	75fa      	strb	r2, [r7, #23]
 80091aa:	461a      	mov	r2, r3
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	4413      	add	r3, r2
 80091b0:	2203      	movs	r2, #3
 80091b2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80091b4:	e012      	b.n	80091dc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	1c5a      	adds	r2, r3, #1
 80091ba:	60fa      	str	r2, [r7, #12]
 80091bc:	7dfa      	ldrb	r2, [r7, #23]
 80091be:	1c51      	adds	r1, r2, #1
 80091c0:	75f9      	strb	r1, [r7, #23]
 80091c2:	4611      	mov	r1, r2
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	440a      	add	r2, r1
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80091cc:	7dfb      	ldrb	r3, [r7, #23]
 80091ce:	1c5a      	adds	r2, r3, #1
 80091d0:	75fa      	strb	r2, [r7, #23]
 80091d2:	461a      	mov	r2, r3
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	4413      	add	r3, r2
 80091d8:	2200      	movs	r2, #0
 80091da:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1e8      	bne.n	80091b6 <USBD_GetString+0x4e>
    }
  }
}
 80091e4:	bf00      	nop
 80091e6:	3718      	adds	r7, #24
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80091f4:	2300      	movs	r3, #0
 80091f6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80091f8:	e005      	b.n	8009206 <USBD_GetLen+0x1a>
  {
    len++;
 80091fa:	7bfb      	ldrb	r3, [r7, #15]
 80091fc:	3301      	adds	r3, #1
 80091fe:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	3301      	adds	r3, #1
 8009204:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d1f5      	bne.n	80091fa <USBD_GetLen+0xe>
  }

  return len;
 800920e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009210:	4618      	mov	r0, r3
 8009212:	3714      	adds	r7, #20
 8009214:	46bd      	mov	sp, r7
 8009216:	bc80      	pop	{r7}
 8009218:	4770      	bx	lr

0800921a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b084      	sub	sp, #16
 800921e:	af00      	add	r7, sp, #0
 8009220:	60f8      	str	r0, [r7, #12]
 8009222:	60b9      	str	r1, [r7, #8]
 8009224:	4613      	mov	r3, r2
 8009226:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2202      	movs	r2, #2
 800922c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009230:	88fa      	ldrh	r2, [r7, #6]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009236:	88fa      	ldrh	r2, [r7, #6]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800923c:	88fb      	ldrh	r3, [r7, #6]
 800923e:	68ba      	ldr	r2, [r7, #8]
 8009240:	2100      	movs	r1, #0
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f000 fc65 	bl	8009b12 <USBD_LL_Transmit>

  return USBD_OK;
 8009248:	2300      	movs	r3, #0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b084      	sub	sp, #16
 8009256:	af00      	add	r7, sp, #0
 8009258:	60f8      	str	r0, [r7, #12]
 800925a:	60b9      	str	r1, [r7, #8]
 800925c:	4613      	mov	r3, r2
 800925e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009260:	88fb      	ldrh	r3, [r7, #6]
 8009262:	68ba      	ldr	r2, [r7, #8]
 8009264:	2100      	movs	r1, #0
 8009266:	68f8      	ldr	r0, [r7, #12]
 8009268:	f000 fc53 	bl	8009b12 <USBD_LL_Transmit>

  return USBD_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b084      	sub	sp, #16
 800927a:	af00      	add	r7, sp, #0
 800927c:	60f8      	str	r0, [r7, #12]
 800927e:	60b9      	str	r1, [r7, #8]
 8009280:	4613      	mov	r3, r2
 8009282:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2203      	movs	r2, #3
 8009288:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800928c:	88fa      	ldrh	r2, [r7, #6]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009294:	88fa      	ldrh	r2, [r7, #6]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800929c:	88fb      	ldrh	r3, [r7, #6]
 800929e:	68ba      	ldr	r2, [r7, #8]
 80092a0:	2100      	movs	r1, #0
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f000 fc58 	bl	8009b58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b084      	sub	sp, #16
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	60f8      	str	r0, [r7, #12]
 80092ba:	60b9      	str	r1, [r7, #8]
 80092bc:	4613      	mov	r3, r2
 80092be:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80092c0:	88fb      	ldrh	r3, [r7, #6]
 80092c2:	68ba      	ldr	r2, [r7, #8]
 80092c4:	2100      	movs	r1, #0
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	f000 fc46 	bl	8009b58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3710      	adds	r7, #16
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b082      	sub	sp, #8
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2204      	movs	r2, #4
 80092e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80092e6:	2300      	movs	r3, #0
 80092e8:	2200      	movs	r2, #0
 80092ea:	2100      	movs	r1, #0
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 fc10 	bl	8009b12 <USBD_LL_Transmit>

  return USBD_OK;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2205      	movs	r2, #5
 8009308:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800930c:	2300      	movs	r3, #0
 800930e:	2200      	movs	r2, #0
 8009310:	2100      	movs	r1, #0
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 fc20 	bl	8009b58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009318:	2300      	movs	r3, #0
}
 800931a:	4618      	mov	r0, r3
 800931c:	3708      	adds	r7, #8
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
	...

08009324 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009328:	2200      	movs	r2, #0
 800932a:	4912      	ldr	r1, [pc, #72]	; (8009374 <MX_USB_DEVICE_Init+0x50>)
 800932c:	4812      	ldr	r0, [pc, #72]	; (8009378 <MX_USB_DEVICE_Init+0x54>)
 800932e:	f7fe ff5e 	bl	80081ee <USBD_Init>
 8009332:	4603      	mov	r3, r0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d001      	beq.n	800933c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009338:	f7f8 f9c2 	bl	80016c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800933c:	490f      	ldr	r1, [pc, #60]	; (800937c <MX_USB_DEVICE_Init+0x58>)
 800933e:	480e      	ldr	r0, [pc, #56]	; (8009378 <MX_USB_DEVICE_Init+0x54>)
 8009340:	f7fe ff80 	bl	8008244 <USBD_RegisterClass>
 8009344:	4603      	mov	r3, r0
 8009346:	2b00      	cmp	r3, #0
 8009348:	d001      	beq.n	800934e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800934a:	f7f8 f9b9 	bl	80016c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800934e:	490c      	ldr	r1, [pc, #48]	; (8009380 <MX_USB_DEVICE_Init+0x5c>)
 8009350:	4809      	ldr	r0, [pc, #36]	; (8009378 <MX_USB_DEVICE_Init+0x54>)
 8009352:	f7fe feb1 	bl	80080b8 <USBD_CDC_RegisterInterface>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d001      	beq.n	8009360 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800935c:	f7f8 f9b0 	bl	80016c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009360:	4805      	ldr	r0, [pc, #20]	; (8009378 <MX_USB_DEVICE_Init+0x54>)
 8009362:	f7fe ff88 	bl	8008276 <USBD_Start>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d001      	beq.n	8009370 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800936c:	f7f8 f9a8 	bl	80016c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009370:	bf00      	nop
 8009372:	bd80      	pop	{r7, pc}
 8009374:	2000012c 	.word	0x2000012c
 8009378:	200007cc 	.word	0x200007cc
 800937c:	20000018 	.word	0x20000018
 8009380:	2000011c 	.word	0x2000011c

08009384 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009388:	2200      	movs	r2, #0
 800938a:	4905      	ldr	r1, [pc, #20]	; (80093a0 <CDC_Init_FS+0x1c>)
 800938c:	4805      	ldr	r0, [pc, #20]	; (80093a4 <CDC_Init_FS+0x20>)
 800938e:	f7fe fea9 	bl	80080e4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009392:	4905      	ldr	r1, [pc, #20]	; (80093a8 <CDC_Init_FS+0x24>)
 8009394:	4803      	ldr	r0, [pc, #12]	; (80093a4 <CDC_Init_FS+0x20>)
 8009396:	f7fe febe 	bl	8008116 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800939a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800939c:	4618      	mov	r0, r3
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	20000e90 	.word	0x20000e90
 80093a4:	200007cc 	.word	0x200007cc
 80093a8:	20000a90 	.word	0x20000a90

080093ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80093ac:	b480      	push	{r7}
 80093ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80093b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bc80      	pop	{r7}
 80093b8:	4770      	bx	lr
	...

080093bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	4603      	mov	r3, r0
 80093c4:	6039      	str	r1, [r7, #0]
 80093c6:	71fb      	strb	r3, [r7, #7]
 80093c8:	4613      	mov	r3, r2
 80093ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80093cc:	79fb      	ldrb	r3, [r7, #7]
 80093ce:	2b23      	cmp	r3, #35	; 0x23
 80093d0:	d84a      	bhi.n	8009468 <CDC_Control_FS+0xac>
 80093d2:	a201      	add	r2, pc, #4	; (adr r2, 80093d8 <CDC_Control_FS+0x1c>)
 80093d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d8:	08009469 	.word	0x08009469
 80093dc:	08009469 	.word	0x08009469
 80093e0:	08009469 	.word	0x08009469
 80093e4:	08009469 	.word	0x08009469
 80093e8:	08009469 	.word	0x08009469
 80093ec:	08009469 	.word	0x08009469
 80093f0:	08009469 	.word	0x08009469
 80093f4:	08009469 	.word	0x08009469
 80093f8:	08009469 	.word	0x08009469
 80093fc:	08009469 	.word	0x08009469
 8009400:	08009469 	.word	0x08009469
 8009404:	08009469 	.word	0x08009469
 8009408:	08009469 	.word	0x08009469
 800940c:	08009469 	.word	0x08009469
 8009410:	08009469 	.word	0x08009469
 8009414:	08009469 	.word	0x08009469
 8009418:	08009469 	.word	0x08009469
 800941c:	08009469 	.word	0x08009469
 8009420:	08009469 	.word	0x08009469
 8009424:	08009469 	.word	0x08009469
 8009428:	08009469 	.word	0x08009469
 800942c:	08009469 	.word	0x08009469
 8009430:	08009469 	.word	0x08009469
 8009434:	08009469 	.word	0x08009469
 8009438:	08009469 	.word	0x08009469
 800943c:	08009469 	.word	0x08009469
 8009440:	08009469 	.word	0x08009469
 8009444:	08009469 	.word	0x08009469
 8009448:	08009469 	.word	0x08009469
 800944c:	08009469 	.word	0x08009469
 8009450:	08009469 	.word	0x08009469
 8009454:	08009469 	.word	0x08009469
 8009458:	08009469 	.word	0x08009469
 800945c:	08009469 	.word	0x08009469
 8009460:	08009469 	.word	0x08009469
 8009464:	08009469 	.word	0x08009469
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009468:	bf00      	nop
  }

  return (USBD_OK);
 800946a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800946c:	4618      	mov	r0, r3
 800946e:	370c      	adds	r7, #12
 8009470:	46bd      	mov	sp, r7
 8009472:	bc80      	pop	{r7}
 8009474:	4770      	bx	lr
 8009476:	bf00      	nop

08009478 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009482:	6879      	ldr	r1, [r7, #4]
 8009484:	4805      	ldr	r0, [pc, #20]	; (800949c <CDC_Receive_FS+0x24>)
 8009486:	f7fe fe46 	bl	8008116 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800948a:	4804      	ldr	r0, [pc, #16]	; (800949c <CDC_Receive_FS+0x24>)
 800948c:	f7fe fe85 	bl	800819a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009490:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009492:	4618      	mov	r0, r3
 8009494:	3708      	adds	r7, #8
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	200007cc 	.word	0x200007cc

080094a0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	460b      	mov	r3, r1
 80094aa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80094ac:	2300      	movs	r3, #0
 80094ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80094b0:	4b0d      	ldr	r3, [pc, #52]	; (80094e8 <CDC_Transmit_FS+0x48>)
 80094b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d001      	beq.n	80094c6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e00b      	b.n	80094de <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80094c6:	887b      	ldrh	r3, [r7, #2]
 80094c8:	461a      	mov	r2, r3
 80094ca:	6879      	ldr	r1, [r7, #4]
 80094cc:	4806      	ldr	r0, [pc, #24]	; (80094e8 <CDC_Transmit_FS+0x48>)
 80094ce:	f7fe fe09 	bl	80080e4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80094d2:	4805      	ldr	r0, [pc, #20]	; (80094e8 <CDC_Transmit_FS+0x48>)
 80094d4:	f7fe fe32 	bl	800813c <USBD_CDC_TransmitPacket>
 80094d8:	4603      	mov	r3, r0
 80094da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80094dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3710      	adds	r7, #16
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	200007cc 	.word	0x200007cc

080094ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	4603      	mov	r3, r0
 80094f4:	6039      	str	r1, [r7, #0]
 80094f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	2212      	movs	r2, #18
 80094fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80094fe:	4b03      	ldr	r3, [pc, #12]	; (800950c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009500:	4618      	mov	r0, r3
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	bc80      	pop	{r7}
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	20000148 	.word	0x20000148

08009510 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	4603      	mov	r3, r0
 8009518:	6039      	str	r1, [r7, #0]
 800951a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	2204      	movs	r2, #4
 8009520:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009522:	4b03      	ldr	r3, [pc, #12]	; (8009530 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009524:	4618      	mov	r0, r3
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	bc80      	pop	{r7}
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop
 8009530:	2000015c 	.word	0x2000015c

08009534 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	4603      	mov	r3, r0
 800953c:	6039      	str	r1, [r7, #0]
 800953e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009540:	79fb      	ldrb	r3, [r7, #7]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d105      	bne.n	8009552 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009546:	683a      	ldr	r2, [r7, #0]
 8009548:	4907      	ldr	r1, [pc, #28]	; (8009568 <USBD_FS_ProductStrDescriptor+0x34>)
 800954a:	4808      	ldr	r0, [pc, #32]	; (800956c <USBD_FS_ProductStrDescriptor+0x38>)
 800954c:	f7ff fe0c 	bl	8009168 <USBD_GetString>
 8009550:	e004      	b.n	800955c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009552:	683a      	ldr	r2, [r7, #0]
 8009554:	4904      	ldr	r1, [pc, #16]	; (8009568 <USBD_FS_ProductStrDescriptor+0x34>)
 8009556:	4805      	ldr	r0, [pc, #20]	; (800956c <USBD_FS_ProductStrDescriptor+0x38>)
 8009558:	f7ff fe06 	bl	8009168 <USBD_GetString>
  }
  return USBD_StrDesc;
 800955c:	4b02      	ldr	r3, [pc, #8]	; (8009568 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800955e:	4618      	mov	r0, r3
 8009560:	3708      	adds	r7, #8
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	20001290 	.word	0x20001290
 800956c:	0800e568 	.word	0x0800e568

08009570 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
 8009576:	4603      	mov	r3, r0
 8009578:	6039      	str	r1, [r7, #0]
 800957a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800957c:	683a      	ldr	r2, [r7, #0]
 800957e:	4904      	ldr	r1, [pc, #16]	; (8009590 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009580:	4804      	ldr	r0, [pc, #16]	; (8009594 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009582:	f7ff fdf1 	bl	8009168 <USBD_GetString>
  return USBD_StrDesc;
 8009586:	4b02      	ldr	r3, [pc, #8]	; (8009590 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009588:	4618      	mov	r0, r3
 800958a:	3708      	adds	r7, #8
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}
 8009590:	20001290 	.word	0x20001290
 8009594:	0800e580 	.word	0x0800e580

08009598 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	4603      	mov	r3, r0
 80095a0:	6039      	str	r1, [r7, #0]
 80095a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	221a      	movs	r2, #26
 80095a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80095aa:	f000 f843 	bl	8009634 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80095ae:	4b02      	ldr	r3, [pc, #8]	; (80095b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3708      	adds	r7, #8
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	20000160 	.word	0x20000160

080095bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	4603      	mov	r3, r0
 80095c4:	6039      	str	r1, [r7, #0]
 80095c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80095c8:	79fb      	ldrb	r3, [r7, #7]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d105      	bne.n	80095da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095ce:	683a      	ldr	r2, [r7, #0]
 80095d0:	4907      	ldr	r1, [pc, #28]	; (80095f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80095d2:	4808      	ldr	r0, [pc, #32]	; (80095f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80095d4:	f7ff fdc8 	bl	8009168 <USBD_GetString>
 80095d8:	e004      	b.n	80095e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095da:	683a      	ldr	r2, [r7, #0]
 80095dc:	4904      	ldr	r1, [pc, #16]	; (80095f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80095de:	4805      	ldr	r0, [pc, #20]	; (80095f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80095e0:	f7ff fdc2 	bl	8009168 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095e4:	4b02      	ldr	r3, [pc, #8]	; (80095f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3708      	adds	r7, #8
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	20001290 	.word	0x20001290
 80095f4:	0800e594 	.word	0x0800e594

080095f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	4603      	mov	r3, r0
 8009600:	6039      	str	r1, [r7, #0]
 8009602:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009604:	79fb      	ldrb	r3, [r7, #7]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d105      	bne.n	8009616 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800960a:	683a      	ldr	r2, [r7, #0]
 800960c:	4907      	ldr	r1, [pc, #28]	; (800962c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800960e:	4808      	ldr	r0, [pc, #32]	; (8009630 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009610:	f7ff fdaa 	bl	8009168 <USBD_GetString>
 8009614:	e004      	b.n	8009620 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009616:	683a      	ldr	r2, [r7, #0]
 8009618:	4904      	ldr	r1, [pc, #16]	; (800962c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800961a:	4805      	ldr	r0, [pc, #20]	; (8009630 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800961c:	f7ff fda4 	bl	8009168 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009620:	4b02      	ldr	r3, [pc, #8]	; (800962c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009622:	4618      	mov	r0, r3
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	20001290 	.word	0x20001290
 8009630:	0800e5a0 	.word	0x0800e5a0

08009634 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800963a:	4b0f      	ldr	r3, [pc, #60]	; (8009678 <Get_SerialNum+0x44>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009640:	4b0e      	ldr	r3, [pc, #56]	; (800967c <Get_SerialNum+0x48>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009646:	4b0e      	ldr	r3, [pc, #56]	; (8009680 <Get_SerialNum+0x4c>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800964c:	68fa      	ldr	r2, [r7, #12]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4413      	add	r3, r2
 8009652:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d009      	beq.n	800966e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800965a:	2208      	movs	r2, #8
 800965c:	4909      	ldr	r1, [pc, #36]	; (8009684 <Get_SerialNum+0x50>)
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f000 f814 	bl	800968c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009664:	2204      	movs	r2, #4
 8009666:	4908      	ldr	r1, [pc, #32]	; (8009688 <Get_SerialNum+0x54>)
 8009668:	68b8      	ldr	r0, [r7, #8]
 800966a:	f000 f80f 	bl	800968c <IntToUnicode>
  }
}
 800966e:	bf00      	nop
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	1ffff7e8 	.word	0x1ffff7e8
 800967c:	1ffff7ec 	.word	0x1ffff7ec
 8009680:	1ffff7f0 	.word	0x1ffff7f0
 8009684:	20000162 	.word	0x20000162
 8009688:	20000172 	.word	0x20000172

0800968c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800968c:	b480      	push	{r7}
 800968e:	b087      	sub	sp, #28
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	4613      	mov	r3, r2
 8009698:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800969a:	2300      	movs	r3, #0
 800969c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800969e:	2300      	movs	r3, #0
 80096a0:	75fb      	strb	r3, [r7, #23]
 80096a2:	e027      	b.n	80096f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	0f1b      	lsrs	r3, r3, #28
 80096a8:	2b09      	cmp	r3, #9
 80096aa:	d80b      	bhi.n	80096c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	0f1b      	lsrs	r3, r3, #28
 80096b0:	b2da      	uxtb	r2, r3
 80096b2:	7dfb      	ldrb	r3, [r7, #23]
 80096b4:	005b      	lsls	r3, r3, #1
 80096b6:	4619      	mov	r1, r3
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	440b      	add	r3, r1
 80096bc:	3230      	adds	r2, #48	; 0x30
 80096be:	b2d2      	uxtb	r2, r2
 80096c0:	701a      	strb	r2, [r3, #0]
 80096c2:	e00a      	b.n	80096da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	0f1b      	lsrs	r3, r3, #28
 80096c8:	b2da      	uxtb	r2, r3
 80096ca:	7dfb      	ldrb	r3, [r7, #23]
 80096cc:	005b      	lsls	r3, r3, #1
 80096ce:	4619      	mov	r1, r3
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	440b      	add	r3, r1
 80096d4:	3237      	adds	r2, #55	; 0x37
 80096d6:	b2d2      	uxtb	r2, r2
 80096d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	011b      	lsls	r3, r3, #4
 80096de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80096e0:	7dfb      	ldrb	r3, [r7, #23]
 80096e2:	005b      	lsls	r3, r3, #1
 80096e4:	3301      	adds	r3, #1
 80096e6:	68ba      	ldr	r2, [r7, #8]
 80096e8:	4413      	add	r3, r2
 80096ea:	2200      	movs	r2, #0
 80096ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80096ee:	7dfb      	ldrb	r3, [r7, #23]
 80096f0:	3301      	adds	r3, #1
 80096f2:	75fb      	strb	r3, [r7, #23]
 80096f4:	7dfa      	ldrb	r2, [r7, #23]
 80096f6:	79fb      	ldrb	r3, [r7, #7]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d3d3      	bcc.n	80096a4 <IntToUnicode+0x18>
  }
}
 80096fc:	bf00      	nop
 80096fe:	bf00      	nop
 8009700:	371c      	adds	r7, #28
 8009702:	46bd      	mov	sp, r7
 8009704:	bc80      	pop	{r7}
 8009706:	4770      	bx	lr

08009708 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a0d      	ldr	r2, [pc, #52]	; (800974c <HAL_PCD_MspInit+0x44>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d113      	bne.n	8009742 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800971a:	4b0d      	ldr	r3, [pc, #52]	; (8009750 <HAL_PCD_MspInit+0x48>)
 800971c:	69db      	ldr	r3, [r3, #28]
 800971e:	4a0c      	ldr	r2, [pc, #48]	; (8009750 <HAL_PCD_MspInit+0x48>)
 8009720:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009724:	61d3      	str	r3, [r2, #28]
 8009726:	4b0a      	ldr	r3, [pc, #40]	; (8009750 <HAL_PCD_MspInit+0x48>)
 8009728:	69db      	ldr	r3, [r3, #28]
 800972a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800972e:	60fb      	str	r3, [r7, #12]
 8009730:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009732:	2200      	movs	r2, #0
 8009734:	2100      	movs	r1, #0
 8009736:	2014      	movs	r0, #20
 8009738:	f7f8 fab3 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800973c:	2014      	movs	r0, #20
 800973e:	f7f8 facc 	bl	8001cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009742:	bf00      	nop
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	40005c00 	.word	0x40005c00
 8009750:	40021000 	.word	0x40021000

08009754 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009768:	4619      	mov	r1, r3
 800976a:	4610      	mov	r0, r2
 800976c:	f7fe fdcb 	bl	8008306 <USBD_LL_SetupStage>
}
 8009770:	bf00      	nop
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	460b      	mov	r3, r1
 8009782:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800978a:	78fa      	ldrb	r2, [r7, #3]
 800978c:	6879      	ldr	r1, [r7, #4]
 800978e:	4613      	mov	r3, r2
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	4413      	add	r3, r2
 8009794:	00db      	lsls	r3, r3, #3
 8009796:	440b      	add	r3, r1
 8009798:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	78fb      	ldrb	r3, [r7, #3]
 80097a0:	4619      	mov	r1, r3
 80097a2:	f7fe fdfd 	bl	80083a0 <USBD_LL_DataOutStage>
}
 80097a6:	bf00      	nop
 80097a8:	3708      	adds	r7, #8
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b082      	sub	sp, #8
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
 80097b6:	460b      	mov	r3, r1
 80097b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80097c0:	78fa      	ldrb	r2, [r7, #3]
 80097c2:	6879      	ldr	r1, [r7, #4]
 80097c4:	4613      	mov	r3, r2
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	4413      	add	r3, r2
 80097ca:	00db      	lsls	r3, r3, #3
 80097cc:	440b      	add	r3, r1
 80097ce:	333c      	adds	r3, #60	; 0x3c
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	78fb      	ldrb	r3, [r7, #3]
 80097d4:	4619      	mov	r1, r3
 80097d6:	f7fe fe54 	bl	8008482 <USBD_LL_DataInStage>
}
 80097da:	bf00      	nop
 80097dc:	3708      	adds	r7, #8
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b082      	sub	sp, #8
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7fe ff64 	bl	80086be <USBD_LL_SOF>
}
 80097f6:	bf00      	nop
 80097f8:	3708      	adds	r7, #8
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b084      	sub	sp, #16
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009806:	2301      	movs	r3, #1
 8009808:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	2b02      	cmp	r3, #2
 8009810:	d001      	beq.n	8009816 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009812:	f7f7 ff55 	bl	80016c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800981c:	7bfa      	ldrb	r2, [r7, #15]
 800981e:	4611      	mov	r1, r2
 8009820:	4618      	mov	r0, r3
 8009822:	f7fe ff14 	bl	800864e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800982c:	4618      	mov	r0, r3
 800982e:	f7fe fecd 	bl	80085cc <USBD_LL_Reset>
}
 8009832:	bf00      	nop
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
	...

0800983c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800984a:	4618      	mov	r0, r3
 800984c:	f7fe ff0e 	bl	800866c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	699b      	ldr	r3, [r3, #24]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d005      	beq.n	8009864 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009858:	4b04      	ldr	r3, [pc, #16]	; (800986c <HAL_PCD_SuspendCallback+0x30>)
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	4a03      	ldr	r2, [pc, #12]	; (800986c <HAL_PCD_SuspendCallback+0x30>)
 800985e:	f043 0306 	orr.w	r3, r3, #6
 8009862:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009864:	bf00      	nop
 8009866:	3708      	adds	r7, #8
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	e000ed00 	.word	0xe000ed00

08009870 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800987e:	4618      	mov	r0, r3
 8009880:	f7fe ff08 	bl	8008694 <USBD_LL_Resume>
}
 8009884:	bf00      	nop
 8009886:	3708      	adds	r7, #8
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009894:	4a28      	ldr	r2, [pc, #160]	; (8009938 <USBD_LL_Init+0xac>)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	4a26      	ldr	r2, [pc, #152]	; (8009938 <USBD_LL_Init+0xac>)
 80098a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80098a4:	4b24      	ldr	r3, [pc, #144]	; (8009938 <USBD_LL_Init+0xac>)
 80098a6:	4a25      	ldr	r2, [pc, #148]	; (800993c <USBD_LL_Init+0xb0>)
 80098a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80098aa:	4b23      	ldr	r3, [pc, #140]	; (8009938 <USBD_LL_Init+0xac>)
 80098ac:	2208      	movs	r2, #8
 80098ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80098b0:	4b21      	ldr	r3, [pc, #132]	; (8009938 <USBD_LL_Init+0xac>)
 80098b2:	2202      	movs	r2, #2
 80098b4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80098b6:	4b20      	ldr	r3, [pc, #128]	; (8009938 <USBD_LL_Init+0xac>)
 80098b8:	2200      	movs	r2, #0
 80098ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80098bc:	4b1e      	ldr	r3, [pc, #120]	; (8009938 <USBD_LL_Init+0xac>)
 80098be:	2200      	movs	r2, #0
 80098c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80098c2:	4b1d      	ldr	r3, [pc, #116]	; (8009938 <USBD_LL_Init+0xac>)
 80098c4:	2200      	movs	r2, #0
 80098c6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80098c8:	481b      	ldr	r0, [pc, #108]	; (8009938 <USBD_LL_Init+0xac>)
 80098ca:	f7f9 fbfe 	bl	80030ca <HAL_PCD_Init>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d001      	beq.n	80098d8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80098d4:	f7f7 fef4 	bl	80016c0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098de:	2318      	movs	r3, #24
 80098e0:	2200      	movs	r2, #0
 80098e2:	2100      	movs	r1, #0
 80098e4:	f7fb f91d 	bl	8004b22 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098ee:	2358      	movs	r3, #88	; 0x58
 80098f0:	2200      	movs	r2, #0
 80098f2:	2180      	movs	r1, #128	; 0x80
 80098f4:	f7fb f915 	bl	8004b22 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098fe:	23c0      	movs	r3, #192	; 0xc0
 8009900:	2200      	movs	r2, #0
 8009902:	2181      	movs	r1, #129	; 0x81
 8009904:	f7fb f90d 	bl	8004b22 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800990e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009912:	2200      	movs	r2, #0
 8009914:	2101      	movs	r1, #1
 8009916:	f7fb f904 	bl	8004b22 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009924:	2200      	movs	r2, #0
 8009926:	2182      	movs	r1, #130	; 0x82
 8009928:	f7fb f8fb 	bl	8004b22 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800992c:	2300      	movs	r3, #0
}
 800992e:	4618      	mov	r0, r3
 8009930:	3708      	adds	r7, #8
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	20001490 	.word	0x20001490
 800993c:	40005c00 	.word	0x40005c00

08009940 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009948:	2300      	movs	r3, #0
 800994a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800994c:	2300      	movs	r3, #0
 800994e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009956:	4618      	mov	r0, r3
 8009958:	f7f9 fcb6 	bl	80032c8 <HAL_PCD_Start>
 800995c:	4603      	mov	r3, r0
 800995e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009960:	7bfb      	ldrb	r3, [r7, #15]
 8009962:	4618      	mov	r0, r3
 8009964:	f000 f94e 	bl	8009c04 <USBD_Get_USB_Status>
 8009968:	4603      	mov	r3, r0
 800996a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800996c:	7bbb      	ldrb	r3, [r7, #14]
}
 800996e:	4618      	mov	r0, r3
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b084      	sub	sp, #16
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
 800997e:	4608      	mov	r0, r1
 8009980:	4611      	mov	r1, r2
 8009982:	461a      	mov	r2, r3
 8009984:	4603      	mov	r3, r0
 8009986:	70fb      	strb	r3, [r7, #3]
 8009988:	460b      	mov	r3, r1
 800998a:	70bb      	strb	r3, [r7, #2]
 800998c:	4613      	mov	r3, r2
 800998e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009990:	2300      	movs	r3, #0
 8009992:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009994:	2300      	movs	r3, #0
 8009996:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800999e:	78bb      	ldrb	r3, [r7, #2]
 80099a0:	883a      	ldrh	r2, [r7, #0]
 80099a2:	78f9      	ldrb	r1, [r7, #3]
 80099a4:	f7f9 fe0b 	bl	80035be <HAL_PCD_EP_Open>
 80099a8:	4603      	mov	r3, r0
 80099aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
 80099ae:	4618      	mov	r0, r3
 80099b0:	f000 f928 	bl	8009c04 <USBD_Get_USB_Status>
 80099b4:	4603      	mov	r3, r0
 80099b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b084      	sub	sp, #16
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
 80099ca:	460b      	mov	r3, r1
 80099cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099ce:	2300      	movs	r3, #0
 80099d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099d2:	2300      	movs	r3, #0
 80099d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099dc:	78fa      	ldrb	r2, [r7, #3]
 80099de:	4611      	mov	r1, r2
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7f9 fe49 	bl	8003678 <HAL_PCD_EP_Close>
 80099e6:	4603      	mov	r3, r0
 80099e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099ea:	7bfb      	ldrb	r3, [r7, #15]
 80099ec:	4618      	mov	r0, r3
 80099ee:	f000 f909 	bl	8009c04 <USBD_Get_USB_Status>
 80099f2:	4603      	mov	r3, r0
 80099f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3710      	adds	r7, #16
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	460b      	mov	r3, r1
 8009a0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a10:	2300      	movs	r3, #0
 8009a12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a1a:	78fa      	ldrb	r2, [r7, #3]
 8009a1c:	4611      	mov	r1, r2
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7f9 fef1 	bl	8003806 <HAL_PCD_EP_SetStall>
 8009a24:	4603      	mov	r3, r0
 8009a26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f000 f8ea 	bl	8009c04 <USBD_Get_USB_Status>
 8009a30:	4603      	mov	r3, r0
 8009a32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a34:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b084      	sub	sp, #16
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
 8009a46:	460b      	mov	r3, r1
 8009a48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a58:	78fa      	ldrb	r2, [r7, #3]
 8009a5a:	4611      	mov	r1, r2
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f7f9 ff32 	bl	80038c6 <HAL_PCD_EP_ClrStall>
 8009a62:	4603      	mov	r3, r0
 8009a64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a66:	7bfb      	ldrb	r3, [r7, #15]
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f000 f8cb 	bl	8009c04 <USBD_Get_USB_Status>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a72:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3710      	adds	r7, #16
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b085      	sub	sp, #20
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	460b      	mov	r3, r1
 8009a86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a8e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009a90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	da0c      	bge.n	8009ab2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009a98:	78fb      	ldrb	r3, [r7, #3]
 8009a9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a9e:	68f9      	ldr	r1, [r7, #12]
 8009aa0:	1c5a      	adds	r2, r3, #1
 8009aa2:	4613      	mov	r3, r2
 8009aa4:	009b      	lsls	r3, r3, #2
 8009aa6:	4413      	add	r3, r2
 8009aa8:	00db      	lsls	r3, r3, #3
 8009aaa:	440b      	add	r3, r1
 8009aac:	3302      	adds	r3, #2
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	e00b      	b.n	8009aca <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009ab2:	78fb      	ldrb	r3, [r7, #3]
 8009ab4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ab8:	68f9      	ldr	r1, [r7, #12]
 8009aba:	4613      	mov	r3, r2
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	4413      	add	r3, r2
 8009ac0:	00db      	lsls	r3, r3, #3
 8009ac2:	440b      	add	r3, r1
 8009ac4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009ac8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3714      	adds	r7, #20
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bc80      	pop	{r7}
 8009ad2:	4770      	bx	lr

08009ad4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	460b      	mov	r3, r1
 8009ade:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009aee:	78fa      	ldrb	r2, [r7, #3]
 8009af0:	4611      	mov	r1, r2
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7f9 fd3e 	bl	8003574 <HAL_PCD_SetAddress>
 8009af8:	4603      	mov	r3, r0
 8009afa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009afc:	7bfb      	ldrb	r3, [r7, #15]
 8009afe:	4618      	mov	r0, r3
 8009b00:	f000 f880 	bl	8009c04 <USBD_Get_USB_Status>
 8009b04:	4603      	mov	r3, r0
 8009b06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b08:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b086      	sub	sp, #24
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	60f8      	str	r0, [r7, #12]
 8009b1a:	607a      	str	r2, [r7, #4]
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	460b      	mov	r3, r1
 8009b20:	72fb      	strb	r3, [r7, #11]
 8009b22:	4613      	mov	r3, r2
 8009b24:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b26:	2300      	movs	r3, #0
 8009b28:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b34:	893b      	ldrh	r3, [r7, #8]
 8009b36:	7af9      	ldrb	r1, [r7, #11]
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	f7f9 fe2d 	bl	8003798 <HAL_PCD_EP_Transmit>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b42:	7dfb      	ldrb	r3, [r7, #23]
 8009b44:	4618      	mov	r0, r3
 8009b46:	f000 f85d 	bl	8009c04 <USBD_Get_USB_Status>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b4e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3718      	adds	r7, #24
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b086      	sub	sp, #24
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	607a      	str	r2, [r7, #4]
 8009b62:	461a      	mov	r2, r3
 8009b64:	460b      	mov	r3, r1
 8009b66:	72fb      	strb	r3, [r7, #11]
 8009b68:	4613      	mov	r3, r2
 8009b6a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b70:	2300      	movs	r3, #0
 8009b72:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b7a:	893b      	ldrh	r3, [r7, #8]
 8009b7c:	7af9      	ldrb	r1, [r7, #11]
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	f7f9 fdc2 	bl	8003708 <HAL_PCD_EP_Receive>
 8009b84:	4603      	mov	r3, r0
 8009b86:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b88:	7dfb      	ldrb	r3, [r7, #23]
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f000 f83a 	bl	8009c04 <USBD_Get_USB_Status>
 8009b90:	4603      	mov	r3, r0
 8009b92:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b94:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3718      	adds	r7, #24
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}

08009b9e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b082      	sub	sp, #8
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009bb0:	78fa      	ldrb	r2, [r7, #3]
 8009bb2:	4611      	mov	r1, r2
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f7f9 fdd8 	bl	800376a <HAL_PCD_EP_GetRxCount>
 8009bba:	4603      	mov	r3, r0
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009bcc:	4b02      	ldr	r3, [pc, #8]	; (8009bd8 <USBD_static_malloc+0x14>)
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	370c      	adds	r7, #12
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bc80      	pop	{r7}
 8009bd6:	4770      	bx	lr
 8009bd8:	20001780 	.word	0x20001780

08009bdc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]

}
 8009be4:	bf00      	nop
 8009be6:	370c      	adds	r7, #12
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bc80      	pop	{r7}
 8009bec:	4770      	bx	lr

08009bee <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bee:	b480      	push	{r7}
 8009bf0:	b083      	sub	sp, #12
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009bfa:	bf00      	nop
 8009bfc:	370c      	adds	r7, #12
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bc80      	pop	{r7}
 8009c02:	4770      	bx	lr

08009c04 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b085      	sub	sp, #20
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c12:	79fb      	ldrb	r3, [r7, #7]
 8009c14:	2b03      	cmp	r3, #3
 8009c16:	d817      	bhi.n	8009c48 <USBD_Get_USB_Status+0x44>
 8009c18:	a201      	add	r2, pc, #4	; (adr r2, 8009c20 <USBD_Get_USB_Status+0x1c>)
 8009c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c1e:	bf00      	nop
 8009c20:	08009c31 	.word	0x08009c31
 8009c24:	08009c37 	.word	0x08009c37
 8009c28:	08009c3d 	.word	0x08009c3d
 8009c2c:	08009c43 	.word	0x08009c43
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009c30:	2300      	movs	r3, #0
 8009c32:	73fb      	strb	r3, [r7, #15]
    break;
 8009c34:	e00b      	b.n	8009c4e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c36:	2302      	movs	r3, #2
 8009c38:	73fb      	strb	r3, [r7, #15]
    break;
 8009c3a:	e008      	b.n	8009c4e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	73fb      	strb	r3, [r7, #15]
    break;
 8009c40:	e005      	b.n	8009c4e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c42:	2302      	movs	r3, #2
 8009c44:	73fb      	strb	r3, [r7, #15]
    break;
 8009c46:	e002      	b.n	8009c4e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009c48:	2302      	movs	r3, #2
 8009c4a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c4c:	bf00      	nop
  }
  return usb_status;
 8009c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3714      	adds	r7, #20
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bc80      	pop	{r7}
 8009c58:	4770      	bx	lr
 8009c5a:	bf00      	nop

08009c5c <__errno>:
 8009c5c:	4b01      	ldr	r3, [pc, #4]	; (8009c64 <__errno+0x8>)
 8009c5e:	6818      	ldr	r0, [r3, #0]
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	2000017c 	.word	0x2000017c

08009c68 <__libc_init_array>:
 8009c68:	b570      	push	{r4, r5, r6, lr}
 8009c6a:	2600      	movs	r6, #0
 8009c6c:	4d0c      	ldr	r5, [pc, #48]	; (8009ca0 <__libc_init_array+0x38>)
 8009c6e:	4c0d      	ldr	r4, [pc, #52]	; (8009ca4 <__libc_init_array+0x3c>)
 8009c70:	1b64      	subs	r4, r4, r5
 8009c72:	10a4      	asrs	r4, r4, #2
 8009c74:	42a6      	cmp	r6, r4
 8009c76:	d109      	bne.n	8009c8c <__libc_init_array+0x24>
 8009c78:	f004 fc50 	bl	800e51c <_init>
 8009c7c:	2600      	movs	r6, #0
 8009c7e:	4d0a      	ldr	r5, [pc, #40]	; (8009ca8 <__libc_init_array+0x40>)
 8009c80:	4c0a      	ldr	r4, [pc, #40]	; (8009cac <__libc_init_array+0x44>)
 8009c82:	1b64      	subs	r4, r4, r5
 8009c84:	10a4      	asrs	r4, r4, #2
 8009c86:	42a6      	cmp	r6, r4
 8009c88:	d105      	bne.n	8009c96 <__libc_init_array+0x2e>
 8009c8a:	bd70      	pop	{r4, r5, r6, pc}
 8009c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c90:	4798      	blx	r3
 8009c92:	3601      	adds	r6, #1
 8009c94:	e7ee      	b.n	8009c74 <__libc_init_array+0xc>
 8009c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c9a:	4798      	blx	r3
 8009c9c:	3601      	adds	r6, #1
 8009c9e:	e7f2      	b.n	8009c86 <__libc_init_array+0x1e>
 8009ca0:	0800ea84 	.word	0x0800ea84
 8009ca4:	0800ea84 	.word	0x0800ea84
 8009ca8:	0800ea84 	.word	0x0800ea84
 8009cac:	0800ea88 	.word	0x0800ea88

08009cb0 <memset>:
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	4402      	add	r2, r0
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d100      	bne.n	8009cba <memset+0xa>
 8009cb8:	4770      	bx	lr
 8009cba:	f803 1b01 	strb.w	r1, [r3], #1
 8009cbe:	e7f9      	b.n	8009cb4 <memset+0x4>

08009cc0 <__cvt>:
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cc6:	461f      	mov	r7, r3
 8009cc8:	bfbb      	ittet	lt
 8009cca:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009cce:	461f      	movlt	r7, r3
 8009cd0:	2300      	movge	r3, #0
 8009cd2:	232d      	movlt	r3, #45	; 0x2d
 8009cd4:	b088      	sub	sp, #32
 8009cd6:	4614      	mov	r4, r2
 8009cd8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009cda:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009cdc:	7013      	strb	r3, [r2, #0]
 8009cde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ce0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009ce4:	f023 0820 	bic.w	r8, r3, #32
 8009ce8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009cec:	d005      	beq.n	8009cfa <__cvt+0x3a>
 8009cee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009cf2:	d100      	bne.n	8009cf6 <__cvt+0x36>
 8009cf4:	3501      	adds	r5, #1
 8009cf6:	2302      	movs	r3, #2
 8009cf8:	e000      	b.n	8009cfc <__cvt+0x3c>
 8009cfa:	2303      	movs	r3, #3
 8009cfc:	aa07      	add	r2, sp, #28
 8009cfe:	9204      	str	r2, [sp, #16]
 8009d00:	aa06      	add	r2, sp, #24
 8009d02:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009d06:	e9cd 3500 	strd	r3, r5, [sp]
 8009d0a:	4622      	mov	r2, r4
 8009d0c:	463b      	mov	r3, r7
 8009d0e:	f001 fd83 	bl	800b818 <_dtoa_r>
 8009d12:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009d16:	4606      	mov	r6, r0
 8009d18:	d102      	bne.n	8009d20 <__cvt+0x60>
 8009d1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d1c:	07db      	lsls	r3, r3, #31
 8009d1e:	d522      	bpl.n	8009d66 <__cvt+0xa6>
 8009d20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009d24:	eb06 0905 	add.w	r9, r6, r5
 8009d28:	d110      	bne.n	8009d4c <__cvt+0x8c>
 8009d2a:	7833      	ldrb	r3, [r6, #0]
 8009d2c:	2b30      	cmp	r3, #48	; 0x30
 8009d2e:	d10a      	bne.n	8009d46 <__cvt+0x86>
 8009d30:	2200      	movs	r2, #0
 8009d32:	2300      	movs	r3, #0
 8009d34:	4620      	mov	r0, r4
 8009d36:	4639      	mov	r1, r7
 8009d38:	f7f6 fe36 	bl	80009a8 <__aeabi_dcmpeq>
 8009d3c:	b918      	cbnz	r0, 8009d46 <__cvt+0x86>
 8009d3e:	f1c5 0501 	rsb	r5, r5, #1
 8009d42:	f8ca 5000 	str.w	r5, [sl]
 8009d46:	f8da 3000 	ldr.w	r3, [sl]
 8009d4a:	4499      	add	r9, r3
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	2300      	movs	r3, #0
 8009d50:	4620      	mov	r0, r4
 8009d52:	4639      	mov	r1, r7
 8009d54:	f7f6 fe28 	bl	80009a8 <__aeabi_dcmpeq>
 8009d58:	b108      	cbz	r0, 8009d5e <__cvt+0x9e>
 8009d5a:	f8cd 901c 	str.w	r9, [sp, #28]
 8009d5e:	2230      	movs	r2, #48	; 0x30
 8009d60:	9b07      	ldr	r3, [sp, #28]
 8009d62:	454b      	cmp	r3, r9
 8009d64:	d307      	bcc.n	8009d76 <__cvt+0xb6>
 8009d66:	4630      	mov	r0, r6
 8009d68:	9b07      	ldr	r3, [sp, #28]
 8009d6a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009d6c:	1b9b      	subs	r3, r3, r6
 8009d6e:	6013      	str	r3, [r2, #0]
 8009d70:	b008      	add	sp, #32
 8009d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d76:	1c59      	adds	r1, r3, #1
 8009d78:	9107      	str	r1, [sp, #28]
 8009d7a:	701a      	strb	r2, [r3, #0]
 8009d7c:	e7f0      	b.n	8009d60 <__cvt+0xa0>

08009d7e <__exponent>:
 8009d7e:	4603      	mov	r3, r0
 8009d80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d82:	2900      	cmp	r1, #0
 8009d84:	f803 2b02 	strb.w	r2, [r3], #2
 8009d88:	bfb6      	itet	lt
 8009d8a:	222d      	movlt	r2, #45	; 0x2d
 8009d8c:	222b      	movge	r2, #43	; 0x2b
 8009d8e:	4249      	neglt	r1, r1
 8009d90:	2909      	cmp	r1, #9
 8009d92:	7042      	strb	r2, [r0, #1]
 8009d94:	dd2b      	ble.n	8009dee <__exponent+0x70>
 8009d96:	f10d 0407 	add.w	r4, sp, #7
 8009d9a:	46a4      	mov	ip, r4
 8009d9c:	270a      	movs	r7, #10
 8009d9e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009da2:	460a      	mov	r2, r1
 8009da4:	46a6      	mov	lr, r4
 8009da6:	fb07 1516 	mls	r5, r7, r6, r1
 8009daa:	2a63      	cmp	r2, #99	; 0x63
 8009dac:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009db0:	4631      	mov	r1, r6
 8009db2:	f104 34ff 	add.w	r4, r4, #4294967295
 8009db6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009dba:	dcf0      	bgt.n	8009d9e <__exponent+0x20>
 8009dbc:	3130      	adds	r1, #48	; 0x30
 8009dbe:	f1ae 0502 	sub.w	r5, lr, #2
 8009dc2:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009dc6:	4629      	mov	r1, r5
 8009dc8:	1c44      	adds	r4, r0, #1
 8009dca:	4561      	cmp	r1, ip
 8009dcc:	d30a      	bcc.n	8009de4 <__exponent+0x66>
 8009dce:	f10d 0209 	add.w	r2, sp, #9
 8009dd2:	eba2 020e 	sub.w	r2, r2, lr
 8009dd6:	4565      	cmp	r5, ip
 8009dd8:	bf88      	it	hi
 8009dda:	2200      	movhi	r2, #0
 8009ddc:	4413      	add	r3, r2
 8009dde:	1a18      	subs	r0, r3, r0
 8009de0:	b003      	add	sp, #12
 8009de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009de4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009de8:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009dec:	e7ed      	b.n	8009dca <__exponent+0x4c>
 8009dee:	2330      	movs	r3, #48	; 0x30
 8009df0:	3130      	adds	r1, #48	; 0x30
 8009df2:	7083      	strb	r3, [r0, #2]
 8009df4:	70c1      	strb	r1, [r0, #3]
 8009df6:	1d03      	adds	r3, r0, #4
 8009df8:	e7f1      	b.n	8009dde <__exponent+0x60>
	...

08009dfc <_printf_float>:
 8009dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e00:	b091      	sub	sp, #68	; 0x44
 8009e02:	460c      	mov	r4, r1
 8009e04:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009e08:	4616      	mov	r6, r2
 8009e0a:	461f      	mov	r7, r3
 8009e0c:	4605      	mov	r5, r0
 8009e0e:	f002 fe57 	bl	800cac0 <_localeconv_r>
 8009e12:	6803      	ldr	r3, [r0, #0]
 8009e14:	4618      	mov	r0, r3
 8009e16:	9309      	str	r3, [sp, #36]	; 0x24
 8009e18:	f7f6 f99a 	bl	8000150 <strlen>
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	930e      	str	r3, [sp, #56]	; 0x38
 8009e20:	f8d8 3000 	ldr.w	r3, [r8]
 8009e24:	900a      	str	r0, [sp, #40]	; 0x28
 8009e26:	3307      	adds	r3, #7
 8009e28:	f023 0307 	bic.w	r3, r3, #7
 8009e2c:	f103 0208 	add.w	r2, r3, #8
 8009e30:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009e34:	f8d4 b000 	ldr.w	fp, [r4]
 8009e38:	f8c8 2000 	str.w	r2, [r8]
 8009e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e40:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009e44:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009e48:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009e4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e52:	4640      	mov	r0, r8
 8009e54:	4b9c      	ldr	r3, [pc, #624]	; (800a0c8 <_printf_float+0x2cc>)
 8009e56:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e58:	f7f6 fdd8 	bl	8000a0c <__aeabi_dcmpun>
 8009e5c:	bb70      	cbnz	r0, 8009ebc <_printf_float+0xc0>
 8009e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e62:	4640      	mov	r0, r8
 8009e64:	4b98      	ldr	r3, [pc, #608]	; (800a0c8 <_printf_float+0x2cc>)
 8009e66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e68:	f7f6 fdb2 	bl	80009d0 <__aeabi_dcmple>
 8009e6c:	bb30      	cbnz	r0, 8009ebc <_printf_float+0xc0>
 8009e6e:	2200      	movs	r2, #0
 8009e70:	2300      	movs	r3, #0
 8009e72:	4640      	mov	r0, r8
 8009e74:	4651      	mov	r1, sl
 8009e76:	f7f6 fda1 	bl	80009bc <__aeabi_dcmplt>
 8009e7a:	b110      	cbz	r0, 8009e82 <_printf_float+0x86>
 8009e7c:	232d      	movs	r3, #45	; 0x2d
 8009e7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e82:	4b92      	ldr	r3, [pc, #584]	; (800a0cc <_printf_float+0x2d0>)
 8009e84:	4892      	ldr	r0, [pc, #584]	; (800a0d0 <_printf_float+0x2d4>)
 8009e86:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009e8a:	bf94      	ite	ls
 8009e8c:	4698      	movls	r8, r3
 8009e8e:	4680      	movhi	r8, r0
 8009e90:	2303      	movs	r3, #3
 8009e92:	f04f 0a00 	mov.w	sl, #0
 8009e96:	6123      	str	r3, [r4, #16]
 8009e98:	f02b 0304 	bic.w	r3, fp, #4
 8009e9c:	6023      	str	r3, [r4, #0]
 8009e9e:	4633      	mov	r3, r6
 8009ea0:	4621      	mov	r1, r4
 8009ea2:	4628      	mov	r0, r5
 8009ea4:	9700      	str	r7, [sp, #0]
 8009ea6:	aa0f      	add	r2, sp, #60	; 0x3c
 8009ea8:	f000 f9d4 	bl	800a254 <_printf_common>
 8009eac:	3001      	adds	r0, #1
 8009eae:	f040 8090 	bne.w	8009fd2 <_printf_float+0x1d6>
 8009eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8009eb6:	b011      	add	sp, #68	; 0x44
 8009eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ebc:	4642      	mov	r2, r8
 8009ebe:	4653      	mov	r3, sl
 8009ec0:	4640      	mov	r0, r8
 8009ec2:	4651      	mov	r1, sl
 8009ec4:	f7f6 fda2 	bl	8000a0c <__aeabi_dcmpun>
 8009ec8:	b148      	cbz	r0, 8009ede <_printf_float+0xe2>
 8009eca:	f1ba 0f00 	cmp.w	sl, #0
 8009ece:	bfb8      	it	lt
 8009ed0:	232d      	movlt	r3, #45	; 0x2d
 8009ed2:	4880      	ldr	r0, [pc, #512]	; (800a0d4 <_printf_float+0x2d8>)
 8009ed4:	bfb8      	it	lt
 8009ed6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009eda:	4b7f      	ldr	r3, [pc, #508]	; (800a0d8 <_printf_float+0x2dc>)
 8009edc:	e7d3      	b.n	8009e86 <_printf_float+0x8a>
 8009ede:	6863      	ldr	r3, [r4, #4]
 8009ee0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009ee4:	1c5a      	adds	r2, r3, #1
 8009ee6:	d142      	bne.n	8009f6e <_printf_float+0x172>
 8009ee8:	2306      	movs	r3, #6
 8009eea:	6063      	str	r3, [r4, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	9206      	str	r2, [sp, #24]
 8009ef0:	aa0e      	add	r2, sp, #56	; 0x38
 8009ef2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009ef6:	aa0d      	add	r2, sp, #52	; 0x34
 8009ef8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009efc:	9203      	str	r2, [sp, #12]
 8009efe:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009f02:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009f06:	6023      	str	r3, [r4, #0]
 8009f08:	6863      	ldr	r3, [r4, #4]
 8009f0a:	4642      	mov	r2, r8
 8009f0c:	9300      	str	r3, [sp, #0]
 8009f0e:	4628      	mov	r0, r5
 8009f10:	4653      	mov	r3, sl
 8009f12:	910b      	str	r1, [sp, #44]	; 0x2c
 8009f14:	f7ff fed4 	bl	8009cc0 <__cvt>
 8009f18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f1a:	4680      	mov	r8, r0
 8009f1c:	2947      	cmp	r1, #71	; 0x47
 8009f1e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009f20:	d108      	bne.n	8009f34 <_printf_float+0x138>
 8009f22:	1cc8      	adds	r0, r1, #3
 8009f24:	db02      	blt.n	8009f2c <_printf_float+0x130>
 8009f26:	6863      	ldr	r3, [r4, #4]
 8009f28:	4299      	cmp	r1, r3
 8009f2a:	dd40      	ble.n	8009fae <_printf_float+0x1b2>
 8009f2c:	f1a9 0902 	sub.w	r9, r9, #2
 8009f30:	fa5f f989 	uxtb.w	r9, r9
 8009f34:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009f38:	d81f      	bhi.n	8009f7a <_printf_float+0x17e>
 8009f3a:	464a      	mov	r2, r9
 8009f3c:	3901      	subs	r1, #1
 8009f3e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009f42:	910d      	str	r1, [sp, #52]	; 0x34
 8009f44:	f7ff ff1b 	bl	8009d7e <__exponent>
 8009f48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f4a:	4682      	mov	sl, r0
 8009f4c:	1813      	adds	r3, r2, r0
 8009f4e:	2a01      	cmp	r2, #1
 8009f50:	6123      	str	r3, [r4, #16]
 8009f52:	dc02      	bgt.n	8009f5a <_printf_float+0x15e>
 8009f54:	6822      	ldr	r2, [r4, #0]
 8009f56:	07d2      	lsls	r2, r2, #31
 8009f58:	d501      	bpl.n	8009f5e <_printf_float+0x162>
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	6123      	str	r3, [r4, #16]
 8009f5e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d09b      	beq.n	8009e9e <_printf_float+0xa2>
 8009f66:	232d      	movs	r3, #45	; 0x2d
 8009f68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f6c:	e797      	b.n	8009e9e <_printf_float+0xa2>
 8009f6e:	2947      	cmp	r1, #71	; 0x47
 8009f70:	d1bc      	bne.n	8009eec <_printf_float+0xf0>
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d1ba      	bne.n	8009eec <_printf_float+0xf0>
 8009f76:	2301      	movs	r3, #1
 8009f78:	e7b7      	b.n	8009eea <_printf_float+0xee>
 8009f7a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009f7e:	d118      	bne.n	8009fb2 <_printf_float+0x1b6>
 8009f80:	2900      	cmp	r1, #0
 8009f82:	6863      	ldr	r3, [r4, #4]
 8009f84:	dd0b      	ble.n	8009f9e <_printf_float+0x1a2>
 8009f86:	6121      	str	r1, [r4, #16]
 8009f88:	b913      	cbnz	r3, 8009f90 <_printf_float+0x194>
 8009f8a:	6822      	ldr	r2, [r4, #0]
 8009f8c:	07d0      	lsls	r0, r2, #31
 8009f8e:	d502      	bpl.n	8009f96 <_printf_float+0x19a>
 8009f90:	3301      	adds	r3, #1
 8009f92:	440b      	add	r3, r1
 8009f94:	6123      	str	r3, [r4, #16]
 8009f96:	f04f 0a00 	mov.w	sl, #0
 8009f9a:	65a1      	str	r1, [r4, #88]	; 0x58
 8009f9c:	e7df      	b.n	8009f5e <_printf_float+0x162>
 8009f9e:	b913      	cbnz	r3, 8009fa6 <_printf_float+0x1aa>
 8009fa0:	6822      	ldr	r2, [r4, #0]
 8009fa2:	07d2      	lsls	r2, r2, #31
 8009fa4:	d501      	bpl.n	8009faa <_printf_float+0x1ae>
 8009fa6:	3302      	adds	r3, #2
 8009fa8:	e7f4      	b.n	8009f94 <_printf_float+0x198>
 8009faa:	2301      	movs	r3, #1
 8009fac:	e7f2      	b.n	8009f94 <_printf_float+0x198>
 8009fae:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009fb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fb4:	4299      	cmp	r1, r3
 8009fb6:	db05      	blt.n	8009fc4 <_printf_float+0x1c8>
 8009fb8:	6823      	ldr	r3, [r4, #0]
 8009fba:	6121      	str	r1, [r4, #16]
 8009fbc:	07d8      	lsls	r0, r3, #31
 8009fbe:	d5ea      	bpl.n	8009f96 <_printf_float+0x19a>
 8009fc0:	1c4b      	adds	r3, r1, #1
 8009fc2:	e7e7      	b.n	8009f94 <_printf_float+0x198>
 8009fc4:	2900      	cmp	r1, #0
 8009fc6:	bfcc      	ite	gt
 8009fc8:	2201      	movgt	r2, #1
 8009fca:	f1c1 0202 	rsble	r2, r1, #2
 8009fce:	4413      	add	r3, r2
 8009fd0:	e7e0      	b.n	8009f94 <_printf_float+0x198>
 8009fd2:	6823      	ldr	r3, [r4, #0]
 8009fd4:	055a      	lsls	r2, r3, #21
 8009fd6:	d407      	bmi.n	8009fe8 <_printf_float+0x1ec>
 8009fd8:	6923      	ldr	r3, [r4, #16]
 8009fda:	4642      	mov	r2, r8
 8009fdc:	4631      	mov	r1, r6
 8009fde:	4628      	mov	r0, r5
 8009fe0:	47b8      	blx	r7
 8009fe2:	3001      	adds	r0, #1
 8009fe4:	d12b      	bne.n	800a03e <_printf_float+0x242>
 8009fe6:	e764      	b.n	8009eb2 <_printf_float+0xb6>
 8009fe8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009fec:	f240 80dd 	bls.w	800a1aa <_printf_float+0x3ae>
 8009ff0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	f7f6 fcd6 	bl	80009a8 <__aeabi_dcmpeq>
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	d033      	beq.n	800a068 <_printf_float+0x26c>
 800a000:	2301      	movs	r3, #1
 800a002:	4631      	mov	r1, r6
 800a004:	4628      	mov	r0, r5
 800a006:	4a35      	ldr	r2, [pc, #212]	; (800a0dc <_printf_float+0x2e0>)
 800a008:	47b8      	blx	r7
 800a00a:	3001      	adds	r0, #1
 800a00c:	f43f af51 	beq.w	8009eb2 <_printf_float+0xb6>
 800a010:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a014:	429a      	cmp	r2, r3
 800a016:	db02      	blt.n	800a01e <_printf_float+0x222>
 800a018:	6823      	ldr	r3, [r4, #0]
 800a01a:	07d8      	lsls	r0, r3, #31
 800a01c:	d50f      	bpl.n	800a03e <_printf_float+0x242>
 800a01e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a022:	4631      	mov	r1, r6
 800a024:	4628      	mov	r0, r5
 800a026:	47b8      	blx	r7
 800a028:	3001      	adds	r0, #1
 800a02a:	f43f af42 	beq.w	8009eb2 <_printf_float+0xb6>
 800a02e:	f04f 0800 	mov.w	r8, #0
 800a032:	f104 091a 	add.w	r9, r4, #26
 800a036:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a038:	3b01      	subs	r3, #1
 800a03a:	4543      	cmp	r3, r8
 800a03c:	dc09      	bgt.n	800a052 <_printf_float+0x256>
 800a03e:	6823      	ldr	r3, [r4, #0]
 800a040:	079b      	lsls	r3, r3, #30
 800a042:	f100 8102 	bmi.w	800a24a <_printf_float+0x44e>
 800a046:	68e0      	ldr	r0, [r4, #12]
 800a048:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a04a:	4298      	cmp	r0, r3
 800a04c:	bfb8      	it	lt
 800a04e:	4618      	movlt	r0, r3
 800a050:	e731      	b.n	8009eb6 <_printf_float+0xba>
 800a052:	2301      	movs	r3, #1
 800a054:	464a      	mov	r2, r9
 800a056:	4631      	mov	r1, r6
 800a058:	4628      	mov	r0, r5
 800a05a:	47b8      	blx	r7
 800a05c:	3001      	adds	r0, #1
 800a05e:	f43f af28 	beq.w	8009eb2 <_printf_float+0xb6>
 800a062:	f108 0801 	add.w	r8, r8, #1
 800a066:	e7e6      	b.n	800a036 <_printf_float+0x23a>
 800a068:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	dc38      	bgt.n	800a0e0 <_printf_float+0x2e4>
 800a06e:	2301      	movs	r3, #1
 800a070:	4631      	mov	r1, r6
 800a072:	4628      	mov	r0, r5
 800a074:	4a19      	ldr	r2, [pc, #100]	; (800a0dc <_printf_float+0x2e0>)
 800a076:	47b8      	blx	r7
 800a078:	3001      	adds	r0, #1
 800a07a:	f43f af1a 	beq.w	8009eb2 <_printf_float+0xb6>
 800a07e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a082:	4313      	orrs	r3, r2
 800a084:	d102      	bne.n	800a08c <_printf_float+0x290>
 800a086:	6823      	ldr	r3, [r4, #0]
 800a088:	07d9      	lsls	r1, r3, #31
 800a08a:	d5d8      	bpl.n	800a03e <_printf_float+0x242>
 800a08c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a090:	4631      	mov	r1, r6
 800a092:	4628      	mov	r0, r5
 800a094:	47b8      	blx	r7
 800a096:	3001      	adds	r0, #1
 800a098:	f43f af0b 	beq.w	8009eb2 <_printf_float+0xb6>
 800a09c:	f04f 0900 	mov.w	r9, #0
 800a0a0:	f104 0a1a 	add.w	sl, r4, #26
 800a0a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0a6:	425b      	negs	r3, r3
 800a0a8:	454b      	cmp	r3, r9
 800a0aa:	dc01      	bgt.n	800a0b0 <_printf_float+0x2b4>
 800a0ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0ae:	e794      	b.n	8009fda <_printf_float+0x1de>
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	4652      	mov	r2, sl
 800a0b4:	4631      	mov	r1, r6
 800a0b6:	4628      	mov	r0, r5
 800a0b8:	47b8      	blx	r7
 800a0ba:	3001      	adds	r0, #1
 800a0bc:	f43f aef9 	beq.w	8009eb2 <_printf_float+0xb6>
 800a0c0:	f109 0901 	add.w	r9, r9, #1
 800a0c4:	e7ee      	b.n	800a0a4 <_printf_float+0x2a8>
 800a0c6:	bf00      	nop
 800a0c8:	7fefffff 	.word	0x7fefffff
 800a0cc:	0800e5e0 	.word	0x0800e5e0
 800a0d0:	0800e5e4 	.word	0x0800e5e4
 800a0d4:	0800e5ec 	.word	0x0800e5ec
 800a0d8:	0800e5e8 	.word	0x0800e5e8
 800a0dc:	0800e5f0 	.word	0x0800e5f0
 800a0e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	bfa8      	it	ge
 800a0e8:	461a      	movge	r2, r3
 800a0ea:	2a00      	cmp	r2, #0
 800a0ec:	4691      	mov	r9, r2
 800a0ee:	dc37      	bgt.n	800a160 <_printf_float+0x364>
 800a0f0:	f04f 0b00 	mov.w	fp, #0
 800a0f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0f8:	f104 021a 	add.w	r2, r4, #26
 800a0fc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a100:	ebaa 0309 	sub.w	r3, sl, r9
 800a104:	455b      	cmp	r3, fp
 800a106:	dc33      	bgt.n	800a170 <_printf_float+0x374>
 800a108:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a10c:	429a      	cmp	r2, r3
 800a10e:	db3b      	blt.n	800a188 <_printf_float+0x38c>
 800a110:	6823      	ldr	r3, [r4, #0]
 800a112:	07da      	lsls	r2, r3, #31
 800a114:	d438      	bmi.n	800a188 <_printf_float+0x38c>
 800a116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a118:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a11a:	eba3 020a 	sub.w	r2, r3, sl
 800a11e:	eba3 0901 	sub.w	r9, r3, r1
 800a122:	4591      	cmp	r9, r2
 800a124:	bfa8      	it	ge
 800a126:	4691      	movge	r9, r2
 800a128:	f1b9 0f00 	cmp.w	r9, #0
 800a12c:	dc34      	bgt.n	800a198 <_printf_float+0x39c>
 800a12e:	f04f 0800 	mov.w	r8, #0
 800a132:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a136:	f104 0a1a 	add.w	sl, r4, #26
 800a13a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a13e:	1a9b      	subs	r3, r3, r2
 800a140:	eba3 0309 	sub.w	r3, r3, r9
 800a144:	4543      	cmp	r3, r8
 800a146:	f77f af7a 	ble.w	800a03e <_printf_float+0x242>
 800a14a:	2301      	movs	r3, #1
 800a14c:	4652      	mov	r2, sl
 800a14e:	4631      	mov	r1, r6
 800a150:	4628      	mov	r0, r5
 800a152:	47b8      	blx	r7
 800a154:	3001      	adds	r0, #1
 800a156:	f43f aeac 	beq.w	8009eb2 <_printf_float+0xb6>
 800a15a:	f108 0801 	add.w	r8, r8, #1
 800a15e:	e7ec      	b.n	800a13a <_printf_float+0x33e>
 800a160:	4613      	mov	r3, r2
 800a162:	4631      	mov	r1, r6
 800a164:	4642      	mov	r2, r8
 800a166:	4628      	mov	r0, r5
 800a168:	47b8      	blx	r7
 800a16a:	3001      	adds	r0, #1
 800a16c:	d1c0      	bne.n	800a0f0 <_printf_float+0x2f4>
 800a16e:	e6a0      	b.n	8009eb2 <_printf_float+0xb6>
 800a170:	2301      	movs	r3, #1
 800a172:	4631      	mov	r1, r6
 800a174:	4628      	mov	r0, r5
 800a176:	920b      	str	r2, [sp, #44]	; 0x2c
 800a178:	47b8      	blx	r7
 800a17a:	3001      	adds	r0, #1
 800a17c:	f43f ae99 	beq.w	8009eb2 <_printf_float+0xb6>
 800a180:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a182:	f10b 0b01 	add.w	fp, fp, #1
 800a186:	e7b9      	b.n	800a0fc <_printf_float+0x300>
 800a188:	4631      	mov	r1, r6
 800a18a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a18e:	4628      	mov	r0, r5
 800a190:	47b8      	blx	r7
 800a192:	3001      	adds	r0, #1
 800a194:	d1bf      	bne.n	800a116 <_printf_float+0x31a>
 800a196:	e68c      	b.n	8009eb2 <_printf_float+0xb6>
 800a198:	464b      	mov	r3, r9
 800a19a:	4631      	mov	r1, r6
 800a19c:	4628      	mov	r0, r5
 800a19e:	eb08 020a 	add.w	r2, r8, sl
 800a1a2:	47b8      	blx	r7
 800a1a4:	3001      	adds	r0, #1
 800a1a6:	d1c2      	bne.n	800a12e <_printf_float+0x332>
 800a1a8:	e683      	b.n	8009eb2 <_printf_float+0xb6>
 800a1aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a1ac:	2a01      	cmp	r2, #1
 800a1ae:	dc01      	bgt.n	800a1b4 <_printf_float+0x3b8>
 800a1b0:	07db      	lsls	r3, r3, #31
 800a1b2:	d537      	bpl.n	800a224 <_printf_float+0x428>
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	4642      	mov	r2, r8
 800a1b8:	4631      	mov	r1, r6
 800a1ba:	4628      	mov	r0, r5
 800a1bc:	47b8      	blx	r7
 800a1be:	3001      	adds	r0, #1
 800a1c0:	f43f ae77 	beq.w	8009eb2 <_printf_float+0xb6>
 800a1c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1c8:	4631      	mov	r1, r6
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	47b8      	blx	r7
 800a1ce:	3001      	adds	r0, #1
 800a1d0:	f43f ae6f 	beq.w	8009eb2 <_printf_float+0xb6>
 800a1d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a1d8:	2200      	movs	r2, #0
 800a1da:	2300      	movs	r3, #0
 800a1dc:	f7f6 fbe4 	bl	80009a8 <__aeabi_dcmpeq>
 800a1e0:	b9d8      	cbnz	r0, 800a21a <_printf_float+0x41e>
 800a1e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1e4:	f108 0201 	add.w	r2, r8, #1
 800a1e8:	3b01      	subs	r3, #1
 800a1ea:	4631      	mov	r1, r6
 800a1ec:	4628      	mov	r0, r5
 800a1ee:	47b8      	blx	r7
 800a1f0:	3001      	adds	r0, #1
 800a1f2:	d10e      	bne.n	800a212 <_printf_float+0x416>
 800a1f4:	e65d      	b.n	8009eb2 <_printf_float+0xb6>
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	464a      	mov	r2, r9
 800a1fa:	4631      	mov	r1, r6
 800a1fc:	4628      	mov	r0, r5
 800a1fe:	47b8      	blx	r7
 800a200:	3001      	adds	r0, #1
 800a202:	f43f ae56 	beq.w	8009eb2 <_printf_float+0xb6>
 800a206:	f108 0801 	add.w	r8, r8, #1
 800a20a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a20c:	3b01      	subs	r3, #1
 800a20e:	4543      	cmp	r3, r8
 800a210:	dcf1      	bgt.n	800a1f6 <_printf_float+0x3fa>
 800a212:	4653      	mov	r3, sl
 800a214:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a218:	e6e0      	b.n	8009fdc <_printf_float+0x1e0>
 800a21a:	f04f 0800 	mov.w	r8, #0
 800a21e:	f104 091a 	add.w	r9, r4, #26
 800a222:	e7f2      	b.n	800a20a <_printf_float+0x40e>
 800a224:	2301      	movs	r3, #1
 800a226:	4642      	mov	r2, r8
 800a228:	e7df      	b.n	800a1ea <_printf_float+0x3ee>
 800a22a:	2301      	movs	r3, #1
 800a22c:	464a      	mov	r2, r9
 800a22e:	4631      	mov	r1, r6
 800a230:	4628      	mov	r0, r5
 800a232:	47b8      	blx	r7
 800a234:	3001      	adds	r0, #1
 800a236:	f43f ae3c 	beq.w	8009eb2 <_printf_float+0xb6>
 800a23a:	f108 0801 	add.w	r8, r8, #1
 800a23e:	68e3      	ldr	r3, [r4, #12]
 800a240:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a242:	1a5b      	subs	r3, r3, r1
 800a244:	4543      	cmp	r3, r8
 800a246:	dcf0      	bgt.n	800a22a <_printf_float+0x42e>
 800a248:	e6fd      	b.n	800a046 <_printf_float+0x24a>
 800a24a:	f04f 0800 	mov.w	r8, #0
 800a24e:	f104 0919 	add.w	r9, r4, #25
 800a252:	e7f4      	b.n	800a23e <_printf_float+0x442>

0800a254 <_printf_common>:
 800a254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a258:	4616      	mov	r6, r2
 800a25a:	4699      	mov	r9, r3
 800a25c:	688a      	ldr	r2, [r1, #8]
 800a25e:	690b      	ldr	r3, [r1, #16]
 800a260:	4607      	mov	r7, r0
 800a262:	4293      	cmp	r3, r2
 800a264:	bfb8      	it	lt
 800a266:	4613      	movlt	r3, r2
 800a268:	6033      	str	r3, [r6, #0]
 800a26a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a26e:	460c      	mov	r4, r1
 800a270:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a274:	b10a      	cbz	r2, 800a27a <_printf_common+0x26>
 800a276:	3301      	adds	r3, #1
 800a278:	6033      	str	r3, [r6, #0]
 800a27a:	6823      	ldr	r3, [r4, #0]
 800a27c:	0699      	lsls	r1, r3, #26
 800a27e:	bf42      	ittt	mi
 800a280:	6833      	ldrmi	r3, [r6, #0]
 800a282:	3302      	addmi	r3, #2
 800a284:	6033      	strmi	r3, [r6, #0]
 800a286:	6825      	ldr	r5, [r4, #0]
 800a288:	f015 0506 	ands.w	r5, r5, #6
 800a28c:	d106      	bne.n	800a29c <_printf_common+0x48>
 800a28e:	f104 0a19 	add.w	sl, r4, #25
 800a292:	68e3      	ldr	r3, [r4, #12]
 800a294:	6832      	ldr	r2, [r6, #0]
 800a296:	1a9b      	subs	r3, r3, r2
 800a298:	42ab      	cmp	r3, r5
 800a29a:	dc28      	bgt.n	800a2ee <_printf_common+0x9a>
 800a29c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a2a0:	1e13      	subs	r3, r2, #0
 800a2a2:	6822      	ldr	r2, [r4, #0]
 800a2a4:	bf18      	it	ne
 800a2a6:	2301      	movne	r3, #1
 800a2a8:	0692      	lsls	r2, r2, #26
 800a2aa:	d42d      	bmi.n	800a308 <_printf_common+0xb4>
 800a2ac:	4649      	mov	r1, r9
 800a2ae:	4638      	mov	r0, r7
 800a2b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2b4:	47c0      	blx	r8
 800a2b6:	3001      	adds	r0, #1
 800a2b8:	d020      	beq.n	800a2fc <_printf_common+0xa8>
 800a2ba:	6823      	ldr	r3, [r4, #0]
 800a2bc:	68e5      	ldr	r5, [r4, #12]
 800a2be:	f003 0306 	and.w	r3, r3, #6
 800a2c2:	2b04      	cmp	r3, #4
 800a2c4:	bf18      	it	ne
 800a2c6:	2500      	movne	r5, #0
 800a2c8:	6832      	ldr	r2, [r6, #0]
 800a2ca:	f04f 0600 	mov.w	r6, #0
 800a2ce:	68a3      	ldr	r3, [r4, #8]
 800a2d0:	bf08      	it	eq
 800a2d2:	1aad      	subeq	r5, r5, r2
 800a2d4:	6922      	ldr	r2, [r4, #16]
 800a2d6:	bf08      	it	eq
 800a2d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	bfc4      	itt	gt
 800a2e0:	1a9b      	subgt	r3, r3, r2
 800a2e2:	18ed      	addgt	r5, r5, r3
 800a2e4:	341a      	adds	r4, #26
 800a2e6:	42b5      	cmp	r5, r6
 800a2e8:	d11a      	bne.n	800a320 <_printf_common+0xcc>
 800a2ea:	2000      	movs	r0, #0
 800a2ec:	e008      	b.n	800a300 <_printf_common+0xac>
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	4652      	mov	r2, sl
 800a2f2:	4649      	mov	r1, r9
 800a2f4:	4638      	mov	r0, r7
 800a2f6:	47c0      	blx	r8
 800a2f8:	3001      	adds	r0, #1
 800a2fa:	d103      	bne.n	800a304 <_printf_common+0xb0>
 800a2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a304:	3501      	adds	r5, #1
 800a306:	e7c4      	b.n	800a292 <_printf_common+0x3e>
 800a308:	2030      	movs	r0, #48	; 0x30
 800a30a:	18e1      	adds	r1, r4, r3
 800a30c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a310:	1c5a      	adds	r2, r3, #1
 800a312:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a316:	4422      	add	r2, r4
 800a318:	3302      	adds	r3, #2
 800a31a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a31e:	e7c5      	b.n	800a2ac <_printf_common+0x58>
 800a320:	2301      	movs	r3, #1
 800a322:	4622      	mov	r2, r4
 800a324:	4649      	mov	r1, r9
 800a326:	4638      	mov	r0, r7
 800a328:	47c0      	blx	r8
 800a32a:	3001      	adds	r0, #1
 800a32c:	d0e6      	beq.n	800a2fc <_printf_common+0xa8>
 800a32e:	3601      	adds	r6, #1
 800a330:	e7d9      	b.n	800a2e6 <_printf_common+0x92>
	...

0800a334 <_printf_i>:
 800a334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a338:	7e0f      	ldrb	r7, [r1, #24]
 800a33a:	4691      	mov	r9, r2
 800a33c:	2f78      	cmp	r7, #120	; 0x78
 800a33e:	4680      	mov	r8, r0
 800a340:	460c      	mov	r4, r1
 800a342:	469a      	mov	sl, r3
 800a344:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a346:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a34a:	d807      	bhi.n	800a35c <_printf_i+0x28>
 800a34c:	2f62      	cmp	r7, #98	; 0x62
 800a34e:	d80a      	bhi.n	800a366 <_printf_i+0x32>
 800a350:	2f00      	cmp	r7, #0
 800a352:	f000 80d9 	beq.w	800a508 <_printf_i+0x1d4>
 800a356:	2f58      	cmp	r7, #88	; 0x58
 800a358:	f000 80a4 	beq.w	800a4a4 <_printf_i+0x170>
 800a35c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a360:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a364:	e03a      	b.n	800a3dc <_printf_i+0xa8>
 800a366:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a36a:	2b15      	cmp	r3, #21
 800a36c:	d8f6      	bhi.n	800a35c <_printf_i+0x28>
 800a36e:	a101      	add	r1, pc, #4	; (adr r1, 800a374 <_printf_i+0x40>)
 800a370:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a374:	0800a3cd 	.word	0x0800a3cd
 800a378:	0800a3e1 	.word	0x0800a3e1
 800a37c:	0800a35d 	.word	0x0800a35d
 800a380:	0800a35d 	.word	0x0800a35d
 800a384:	0800a35d 	.word	0x0800a35d
 800a388:	0800a35d 	.word	0x0800a35d
 800a38c:	0800a3e1 	.word	0x0800a3e1
 800a390:	0800a35d 	.word	0x0800a35d
 800a394:	0800a35d 	.word	0x0800a35d
 800a398:	0800a35d 	.word	0x0800a35d
 800a39c:	0800a35d 	.word	0x0800a35d
 800a3a0:	0800a4ef 	.word	0x0800a4ef
 800a3a4:	0800a411 	.word	0x0800a411
 800a3a8:	0800a4d1 	.word	0x0800a4d1
 800a3ac:	0800a35d 	.word	0x0800a35d
 800a3b0:	0800a35d 	.word	0x0800a35d
 800a3b4:	0800a511 	.word	0x0800a511
 800a3b8:	0800a35d 	.word	0x0800a35d
 800a3bc:	0800a411 	.word	0x0800a411
 800a3c0:	0800a35d 	.word	0x0800a35d
 800a3c4:	0800a35d 	.word	0x0800a35d
 800a3c8:	0800a4d9 	.word	0x0800a4d9
 800a3cc:	682b      	ldr	r3, [r5, #0]
 800a3ce:	1d1a      	adds	r2, r3, #4
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	602a      	str	r2, [r5, #0]
 800a3d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3dc:	2301      	movs	r3, #1
 800a3de:	e0a4      	b.n	800a52a <_printf_i+0x1f6>
 800a3e0:	6820      	ldr	r0, [r4, #0]
 800a3e2:	6829      	ldr	r1, [r5, #0]
 800a3e4:	0606      	lsls	r6, r0, #24
 800a3e6:	f101 0304 	add.w	r3, r1, #4
 800a3ea:	d50a      	bpl.n	800a402 <_printf_i+0xce>
 800a3ec:	680e      	ldr	r6, [r1, #0]
 800a3ee:	602b      	str	r3, [r5, #0]
 800a3f0:	2e00      	cmp	r6, #0
 800a3f2:	da03      	bge.n	800a3fc <_printf_i+0xc8>
 800a3f4:	232d      	movs	r3, #45	; 0x2d
 800a3f6:	4276      	negs	r6, r6
 800a3f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3fc:	230a      	movs	r3, #10
 800a3fe:	485e      	ldr	r0, [pc, #376]	; (800a578 <_printf_i+0x244>)
 800a400:	e019      	b.n	800a436 <_printf_i+0x102>
 800a402:	680e      	ldr	r6, [r1, #0]
 800a404:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a408:	602b      	str	r3, [r5, #0]
 800a40a:	bf18      	it	ne
 800a40c:	b236      	sxthne	r6, r6
 800a40e:	e7ef      	b.n	800a3f0 <_printf_i+0xbc>
 800a410:	682b      	ldr	r3, [r5, #0]
 800a412:	6820      	ldr	r0, [r4, #0]
 800a414:	1d19      	adds	r1, r3, #4
 800a416:	6029      	str	r1, [r5, #0]
 800a418:	0601      	lsls	r1, r0, #24
 800a41a:	d501      	bpl.n	800a420 <_printf_i+0xec>
 800a41c:	681e      	ldr	r6, [r3, #0]
 800a41e:	e002      	b.n	800a426 <_printf_i+0xf2>
 800a420:	0646      	lsls	r6, r0, #25
 800a422:	d5fb      	bpl.n	800a41c <_printf_i+0xe8>
 800a424:	881e      	ldrh	r6, [r3, #0]
 800a426:	2f6f      	cmp	r7, #111	; 0x6f
 800a428:	bf0c      	ite	eq
 800a42a:	2308      	moveq	r3, #8
 800a42c:	230a      	movne	r3, #10
 800a42e:	4852      	ldr	r0, [pc, #328]	; (800a578 <_printf_i+0x244>)
 800a430:	2100      	movs	r1, #0
 800a432:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a436:	6865      	ldr	r5, [r4, #4]
 800a438:	2d00      	cmp	r5, #0
 800a43a:	bfa8      	it	ge
 800a43c:	6821      	ldrge	r1, [r4, #0]
 800a43e:	60a5      	str	r5, [r4, #8]
 800a440:	bfa4      	itt	ge
 800a442:	f021 0104 	bicge.w	r1, r1, #4
 800a446:	6021      	strge	r1, [r4, #0]
 800a448:	b90e      	cbnz	r6, 800a44e <_printf_i+0x11a>
 800a44a:	2d00      	cmp	r5, #0
 800a44c:	d04d      	beq.n	800a4ea <_printf_i+0x1b6>
 800a44e:	4615      	mov	r5, r2
 800a450:	fbb6 f1f3 	udiv	r1, r6, r3
 800a454:	fb03 6711 	mls	r7, r3, r1, r6
 800a458:	5dc7      	ldrb	r7, [r0, r7]
 800a45a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a45e:	4637      	mov	r7, r6
 800a460:	42bb      	cmp	r3, r7
 800a462:	460e      	mov	r6, r1
 800a464:	d9f4      	bls.n	800a450 <_printf_i+0x11c>
 800a466:	2b08      	cmp	r3, #8
 800a468:	d10b      	bne.n	800a482 <_printf_i+0x14e>
 800a46a:	6823      	ldr	r3, [r4, #0]
 800a46c:	07de      	lsls	r6, r3, #31
 800a46e:	d508      	bpl.n	800a482 <_printf_i+0x14e>
 800a470:	6923      	ldr	r3, [r4, #16]
 800a472:	6861      	ldr	r1, [r4, #4]
 800a474:	4299      	cmp	r1, r3
 800a476:	bfde      	ittt	le
 800a478:	2330      	movle	r3, #48	; 0x30
 800a47a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a47e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a482:	1b52      	subs	r2, r2, r5
 800a484:	6122      	str	r2, [r4, #16]
 800a486:	464b      	mov	r3, r9
 800a488:	4621      	mov	r1, r4
 800a48a:	4640      	mov	r0, r8
 800a48c:	f8cd a000 	str.w	sl, [sp]
 800a490:	aa03      	add	r2, sp, #12
 800a492:	f7ff fedf 	bl	800a254 <_printf_common>
 800a496:	3001      	adds	r0, #1
 800a498:	d14c      	bne.n	800a534 <_printf_i+0x200>
 800a49a:	f04f 30ff 	mov.w	r0, #4294967295
 800a49e:	b004      	add	sp, #16
 800a4a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4a4:	4834      	ldr	r0, [pc, #208]	; (800a578 <_printf_i+0x244>)
 800a4a6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a4aa:	6829      	ldr	r1, [r5, #0]
 800a4ac:	6823      	ldr	r3, [r4, #0]
 800a4ae:	f851 6b04 	ldr.w	r6, [r1], #4
 800a4b2:	6029      	str	r1, [r5, #0]
 800a4b4:	061d      	lsls	r5, r3, #24
 800a4b6:	d514      	bpl.n	800a4e2 <_printf_i+0x1ae>
 800a4b8:	07df      	lsls	r7, r3, #31
 800a4ba:	bf44      	itt	mi
 800a4bc:	f043 0320 	orrmi.w	r3, r3, #32
 800a4c0:	6023      	strmi	r3, [r4, #0]
 800a4c2:	b91e      	cbnz	r6, 800a4cc <_printf_i+0x198>
 800a4c4:	6823      	ldr	r3, [r4, #0]
 800a4c6:	f023 0320 	bic.w	r3, r3, #32
 800a4ca:	6023      	str	r3, [r4, #0]
 800a4cc:	2310      	movs	r3, #16
 800a4ce:	e7af      	b.n	800a430 <_printf_i+0xfc>
 800a4d0:	6823      	ldr	r3, [r4, #0]
 800a4d2:	f043 0320 	orr.w	r3, r3, #32
 800a4d6:	6023      	str	r3, [r4, #0]
 800a4d8:	2378      	movs	r3, #120	; 0x78
 800a4da:	4828      	ldr	r0, [pc, #160]	; (800a57c <_printf_i+0x248>)
 800a4dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a4e0:	e7e3      	b.n	800a4aa <_printf_i+0x176>
 800a4e2:	0659      	lsls	r1, r3, #25
 800a4e4:	bf48      	it	mi
 800a4e6:	b2b6      	uxthmi	r6, r6
 800a4e8:	e7e6      	b.n	800a4b8 <_printf_i+0x184>
 800a4ea:	4615      	mov	r5, r2
 800a4ec:	e7bb      	b.n	800a466 <_printf_i+0x132>
 800a4ee:	682b      	ldr	r3, [r5, #0]
 800a4f0:	6826      	ldr	r6, [r4, #0]
 800a4f2:	1d18      	adds	r0, r3, #4
 800a4f4:	6961      	ldr	r1, [r4, #20]
 800a4f6:	6028      	str	r0, [r5, #0]
 800a4f8:	0635      	lsls	r5, r6, #24
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	d501      	bpl.n	800a502 <_printf_i+0x1ce>
 800a4fe:	6019      	str	r1, [r3, #0]
 800a500:	e002      	b.n	800a508 <_printf_i+0x1d4>
 800a502:	0670      	lsls	r0, r6, #25
 800a504:	d5fb      	bpl.n	800a4fe <_printf_i+0x1ca>
 800a506:	8019      	strh	r1, [r3, #0]
 800a508:	2300      	movs	r3, #0
 800a50a:	4615      	mov	r5, r2
 800a50c:	6123      	str	r3, [r4, #16]
 800a50e:	e7ba      	b.n	800a486 <_printf_i+0x152>
 800a510:	682b      	ldr	r3, [r5, #0]
 800a512:	2100      	movs	r1, #0
 800a514:	1d1a      	adds	r2, r3, #4
 800a516:	602a      	str	r2, [r5, #0]
 800a518:	681d      	ldr	r5, [r3, #0]
 800a51a:	6862      	ldr	r2, [r4, #4]
 800a51c:	4628      	mov	r0, r5
 800a51e:	f002 faed 	bl	800cafc <memchr>
 800a522:	b108      	cbz	r0, 800a528 <_printf_i+0x1f4>
 800a524:	1b40      	subs	r0, r0, r5
 800a526:	6060      	str	r0, [r4, #4]
 800a528:	6863      	ldr	r3, [r4, #4]
 800a52a:	6123      	str	r3, [r4, #16]
 800a52c:	2300      	movs	r3, #0
 800a52e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a532:	e7a8      	b.n	800a486 <_printf_i+0x152>
 800a534:	462a      	mov	r2, r5
 800a536:	4649      	mov	r1, r9
 800a538:	4640      	mov	r0, r8
 800a53a:	6923      	ldr	r3, [r4, #16]
 800a53c:	47d0      	blx	sl
 800a53e:	3001      	adds	r0, #1
 800a540:	d0ab      	beq.n	800a49a <_printf_i+0x166>
 800a542:	6823      	ldr	r3, [r4, #0]
 800a544:	079b      	lsls	r3, r3, #30
 800a546:	d413      	bmi.n	800a570 <_printf_i+0x23c>
 800a548:	68e0      	ldr	r0, [r4, #12]
 800a54a:	9b03      	ldr	r3, [sp, #12]
 800a54c:	4298      	cmp	r0, r3
 800a54e:	bfb8      	it	lt
 800a550:	4618      	movlt	r0, r3
 800a552:	e7a4      	b.n	800a49e <_printf_i+0x16a>
 800a554:	2301      	movs	r3, #1
 800a556:	4632      	mov	r2, r6
 800a558:	4649      	mov	r1, r9
 800a55a:	4640      	mov	r0, r8
 800a55c:	47d0      	blx	sl
 800a55e:	3001      	adds	r0, #1
 800a560:	d09b      	beq.n	800a49a <_printf_i+0x166>
 800a562:	3501      	adds	r5, #1
 800a564:	68e3      	ldr	r3, [r4, #12]
 800a566:	9903      	ldr	r1, [sp, #12]
 800a568:	1a5b      	subs	r3, r3, r1
 800a56a:	42ab      	cmp	r3, r5
 800a56c:	dcf2      	bgt.n	800a554 <_printf_i+0x220>
 800a56e:	e7eb      	b.n	800a548 <_printf_i+0x214>
 800a570:	2500      	movs	r5, #0
 800a572:	f104 0619 	add.w	r6, r4, #25
 800a576:	e7f5      	b.n	800a564 <_printf_i+0x230>
 800a578:	0800e5f2 	.word	0x0800e5f2
 800a57c:	0800e603 	.word	0x0800e603

0800a580 <_scanf_float>:
 800a580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a584:	b087      	sub	sp, #28
 800a586:	9303      	str	r3, [sp, #12]
 800a588:	688b      	ldr	r3, [r1, #8]
 800a58a:	4617      	mov	r7, r2
 800a58c:	1e5a      	subs	r2, r3, #1
 800a58e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a592:	bf85      	ittet	hi
 800a594:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a598:	195b      	addhi	r3, r3, r5
 800a59a:	2300      	movls	r3, #0
 800a59c:	9302      	strhi	r3, [sp, #8]
 800a59e:	bf88      	it	hi
 800a5a0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a5a4:	468b      	mov	fp, r1
 800a5a6:	f04f 0500 	mov.w	r5, #0
 800a5aa:	bf8c      	ite	hi
 800a5ac:	608b      	strhi	r3, [r1, #8]
 800a5ae:	9302      	strls	r3, [sp, #8]
 800a5b0:	680b      	ldr	r3, [r1, #0]
 800a5b2:	4680      	mov	r8, r0
 800a5b4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a5b8:	f84b 3b1c 	str.w	r3, [fp], #28
 800a5bc:	460c      	mov	r4, r1
 800a5be:	465e      	mov	r6, fp
 800a5c0:	46aa      	mov	sl, r5
 800a5c2:	46a9      	mov	r9, r5
 800a5c4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a5c8:	9501      	str	r5, [sp, #4]
 800a5ca:	68a2      	ldr	r2, [r4, #8]
 800a5cc:	b152      	cbz	r2, 800a5e4 <_scanf_float+0x64>
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	2b4e      	cmp	r3, #78	; 0x4e
 800a5d4:	d864      	bhi.n	800a6a0 <_scanf_float+0x120>
 800a5d6:	2b40      	cmp	r3, #64	; 0x40
 800a5d8:	d83c      	bhi.n	800a654 <_scanf_float+0xd4>
 800a5da:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a5de:	b2c8      	uxtb	r0, r1
 800a5e0:	280e      	cmp	r0, #14
 800a5e2:	d93a      	bls.n	800a65a <_scanf_float+0xda>
 800a5e4:	f1b9 0f00 	cmp.w	r9, #0
 800a5e8:	d003      	beq.n	800a5f2 <_scanf_float+0x72>
 800a5ea:	6823      	ldr	r3, [r4, #0]
 800a5ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5f0:	6023      	str	r3, [r4, #0]
 800a5f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a5f6:	f1ba 0f01 	cmp.w	sl, #1
 800a5fa:	f200 8113 	bhi.w	800a824 <_scanf_float+0x2a4>
 800a5fe:	455e      	cmp	r6, fp
 800a600:	f200 8105 	bhi.w	800a80e <_scanf_float+0x28e>
 800a604:	2501      	movs	r5, #1
 800a606:	4628      	mov	r0, r5
 800a608:	b007      	add	sp, #28
 800a60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a60e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a612:	2a0d      	cmp	r2, #13
 800a614:	d8e6      	bhi.n	800a5e4 <_scanf_float+0x64>
 800a616:	a101      	add	r1, pc, #4	; (adr r1, 800a61c <_scanf_float+0x9c>)
 800a618:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a61c:	0800a75b 	.word	0x0800a75b
 800a620:	0800a5e5 	.word	0x0800a5e5
 800a624:	0800a5e5 	.word	0x0800a5e5
 800a628:	0800a5e5 	.word	0x0800a5e5
 800a62c:	0800a7bb 	.word	0x0800a7bb
 800a630:	0800a793 	.word	0x0800a793
 800a634:	0800a5e5 	.word	0x0800a5e5
 800a638:	0800a5e5 	.word	0x0800a5e5
 800a63c:	0800a769 	.word	0x0800a769
 800a640:	0800a5e5 	.word	0x0800a5e5
 800a644:	0800a5e5 	.word	0x0800a5e5
 800a648:	0800a5e5 	.word	0x0800a5e5
 800a64c:	0800a5e5 	.word	0x0800a5e5
 800a650:	0800a721 	.word	0x0800a721
 800a654:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a658:	e7db      	b.n	800a612 <_scanf_float+0x92>
 800a65a:	290e      	cmp	r1, #14
 800a65c:	d8c2      	bhi.n	800a5e4 <_scanf_float+0x64>
 800a65e:	a001      	add	r0, pc, #4	; (adr r0, 800a664 <_scanf_float+0xe4>)
 800a660:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a664:	0800a713 	.word	0x0800a713
 800a668:	0800a5e5 	.word	0x0800a5e5
 800a66c:	0800a713 	.word	0x0800a713
 800a670:	0800a7a7 	.word	0x0800a7a7
 800a674:	0800a5e5 	.word	0x0800a5e5
 800a678:	0800a6c1 	.word	0x0800a6c1
 800a67c:	0800a6fd 	.word	0x0800a6fd
 800a680:	0800a6fd 	.word	0x0800a6fd
 800a684:	0800a6fd 	.word	0x0800a6fd
 800a688:	0800a6fd 	.word	0x0800a6fd
 800a68c:	0800a6fd 	.word	0x0800a6fd
 800a690:	0800a6fd 	.word	0x0800a6fd
 800a694:	0800a6fd 	.word	0x0800a6fd
 800a698:	0800a6fd 	.word	0x0800a6fd
 800a69c:	0800a6fd 	.word	0x0800a6fd
 800a6a0:	2b6e      	cmp	r3, #110	; 0x6e
 800a6a2:	d809      	bhi.n	800a6b8 <_scanf_float+0x138>
 800a6a4:	2b60      	cmp	r3, #96	; 0x60
 800a6a6:	d8b2      	bhi.n	800a60e <_scanf_float+0x8e>
 800a6a8:	2b54      	cmp	r3, #84	; 0x54
 800a6aa:	d077      	beq.n	800a79c <_scanf_float+0x21c>
 800a6ac:	2b59      	cmp	r3, #89	; 0x59
 800a6ae:	d199      	bne.n	800a5e4 <_scanf_float+0x64>
 800a6b0:	2d07      	cmp	r5, #7
 800a6b2:	d197      	bne.n	800a5e4 <_scanf_float+0x64>
 800a6b4:	2508      	movs	r5, #8
 800a6b6:	e029      	b.n	800a70c <_scanf_float+0x18c>
 800a6b8:	2b74      	cmp	r3, #116	; 0x74
 800a6ba:	d06f      	beq.n	800a79c <_scanf_float+0x21c>
 800a6bc:	2b79      	cmp	r3, #121	; 0x79
 800a6be:	e7f6      	b.n	800a6ae <_scanf_float+0x12e>
 800a6c0:	6821      	ldr	r1, [r4, #0]
 800a6c2:	05c8      	lsls	r0, r1, #23
 800a6c4:	d51a      	bpl.n	800a6fc <_scanf_float+0x17c>
 800a6c6:	9b02      	ldr	r3, [sp, #8]
 800a6c8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a6cc:	6021      	str	r1, [r4, #0]
 800a6ce:	f109 0901 	add.w	r9, r9, #1
 800a6d2:	b11b      	cbz	r3, 800a6dc <_scanf_float+0x15c>
 800a6d4:	3b01      	subs	r3, #1
 800a6d6:	3201      	adds	r2, #1
 800a6d8:	9302      	str	r3, [sp, #8]
 800a6da:	60a2      	str	r2, [r4, #8]
 800a6dc:	68a3      	ldr	r3, [r4, #8]
 800a6de:	3b01      	subs	r3, #1
 800a6e0:	60a3      	str	r3, [r4, #8]
 800a6e2:	6923      	ldr	r3, [r4, #16]
 800a6e4:	3301      	adds	r3, #1
 800a6e6:	6123      	str	r3, [r4, #16]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	3b01      	subs	r3, #1
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	607b      	str	r3, [r7, #4]
 800a6f0:	f340 8084 	ble.w	800a7fc <_scanf_float+0x27c>
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	603b      	str	r3, [r7, #0]
 800a6fa:	e766      	b.n	800a5ca <_scanf_float+0x4a>
 800a6fc:	eb1a 0f05 	cmn.w	sl, r5
 800a700:	f47f af70 	bne.w	800a5e4 <_scanf_float+0x64>
 800a704:	6822      	ldr	r2, [r4, #0]
 800a706:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a70a:	6022      	str	r2, [r4, #0]
 800a70c:	f806 3b01 	strb.w	r3, [r6], #1
 800a710:	e7e4      	b.n	800a6dc <_scanf_float+0x15c>
 800a712:	6822      	ldr	r2, [r4, #0]
 800a714:	0610      	lsls	r0, r2, #24
 800a716:	f57f af65 	bpl.w	800a5e4 <_scanf_float+0x64>
 800a71a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a71e:	e7f4      	b.n	800a70a <_scanf_float+0x18a>
 800a720:	f1ba 0f00 	cmp.w	sl, #0
 800a724:	d10e      	bne.n	800a744 <_scanf_float+0x1c4>
 800a726:	f1b9 0f00 	cmp.w	r9, #0
 800a72a:	d10e      	bne.n	800a74a <_scanf_float+0x1ca>
 800a72c:	6822      	ldr	r2, [r4, #0]
 800a72e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a732:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a736:	d108      	bne.n	800a74a <_scanf_float+0x1ca>
 800a738:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a73c:	f04f 0a01 	mov.w	sl, #1
 800a740:	6022      	str	r2, [r4, #0]
 800a742:	e7e3      	b.n	800a70c <_scanf_float+0x18c>
 800a744:	f1ba 0f02 	cmp.w	sl, #2
 800a748:	d055      	beq.n	800a7f6 <_scanf_float+0x276>
 800a74a:	2d01      	cmp	r5, #1
 800a74c:	d002      	beq.n	800a754 <_scanf_float+0x1d4>
 800a74e:	2d04      	cmp	r5, #4
 800a750:	f47f af48 	bne.w	800a5e4 <_scanf_float+0x64>
 800a754:	3501      	adds	r5, #1
 800a756:	b2ed      	uxtb	r5, r5
 800a758:	e7d8      	b.n	800a70c <_scanf_float+0x18c>
 800a75a:	f1ba 0f01 	cmp.w	sl, #1
 800a75e:	f47f af41 	bne.w	800a5e4 <_scanf_float+0x64>
 800a762:	f04f 0a02 	mov.w	sl, #2
 800a766:	e7d1      	b.n	800a70c <_scanf_float+0x18c>
 800a768:	b97d      	cbnz	r5, 800a78a <_scanf_float+0x20a>
 800a76a:	f1b9 0f00 	cmp.w	r9, #0
 800a76e:	f47f af3c 	bne.w	800a5ea <_scanf_float+0x6a>
 800a772:	6822      	ldr	r2, [r4, #0]
 800a774:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a778:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a77c:	f47f af39 	bne.w	800a5f2 <_scanf_float+0x72>
 800a780:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a784:	2501      	movs	r5, #1
 800a786:	6022      	str	r2, [r4, #0]
 800a788:	e7c0      	b.n	800a70c <_scanf_float+0x18c>
 800a78a:	2d03      	cmp	r5, #3
 800a78c:	d0e2      	beq.n	800a754 <_scanf_float+0x1d4>
 800a78e:	2d05      	cmp	r5, #5
 800a790:	e7de      	b.n	800a750 <_scanf_float+0x1d0>
 800a792:	2d02      	cmp	r5, #2
 800a794:	f47f af26 	bne.w	800a5e4 <_scanf_float+0x64>
 800a798:	2503      	movs	r5, #3
 800a79a:	e7b7      	b.n	800a70c <_scanf_float+0x18c>
 800a79c:	2d06      	cmp	r5, #6
 800a79e:	f47f af21 	bne.w	800a5e4 <_scanf_float+0x64>
 800a7a2:	2507      	movs	r5, #7
 800a7a4:	e7b2      	b.n	800a70c <_scanf_float+0x18c>
 800a7a6:	6822      	ldr	r2, [r4, #0]
 800a7a8:	0591      	lsls	r1, r2, #22
 800a7aa:	f57f af1b 	bpl.w	800a5e4 <_scanf_float+0x64>
 800a7ae:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a7b2:	6022      	str	r2, [r4, #0]
 800a7b4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a7b8:	e7a8      	b.n	800a70c <_scanf_float+0x18c>
 800a7ba:	6822      	ldr	r2, [r4, #0]
 800a7bc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a7c0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a7c4:	d006      	beq.n	800a7d4 <_scanf_float+0x254>
 800a7c6:	0550      	lsls	r0, r2, #21
 800a7c8:	f57f af0c 	bpl.w	800a5e4 <_scanf_float+0x64>
 800a7cc:	f1b9 0f00 	cmp.w	r9, #0
 800a7d0:	f43f af0f 	beq.w	800a5f2 <_scanf_float+0x72>
 800a7d4:	0591      	lsls	r1, r2, #22
 800a7d6:	bf58      	it	pl
 800a7d8:	9901      	ldrpl	r1, [sp, #4]
 800a7da:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a7de:	bf58      	it	pl
 800a7e0:	eba9 0101 	subpl.w	r1, r9, r1
 800a7e4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a7e8:	f04f 0900 	mov.w	r9, #0
 800a7ec:	bf58      	it	pl
 800a7ee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a7f2:	6022      	str	r2, [r4, #0]
 800a7f4:	e78a      	b.n	800a70c <_scanf_float+0x18c>
 800a7f6:	f04f 0a03 	mov.w	sl, #3
 800a7fa:	e787      	b.n	800a70c <_scanf_float+0x18c>
 800a7fc:	4639      	mov	r1, r7
 800a7fe:	4640      	mov	r0, r8
 800a800:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a804:	4798      	blx	r3
 800a806:	2800      	cmp	r0, #0
 800a808:	f43f aedf 	beq.w	800a5ca <_scanf_float+0x4a>
 800a80c:	e6ea      	b.n	800a5e4 <_scanf_float+0x64>
 800a80e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a812:	463a      	mov	r2, r7
 800a814:	4640      	mov	r0, r8
 800a816:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a81a:	4798      	blx	r3
 800a81c:	6923      	ldr	r3, [r4, #16]
 800a81e:	3b01      	subs	r3, #1
 800a820:	6123      	str	r3, [r4, #16]
 800a822:	e6ec      	b.n	800a5fe <_scanf_float+0x7e>
 800a824:	1e6b      	subs	r3, r5, #1
 800a826:	2b06      	cmp	r3, #6
 800a828:	d825      	bhi.n	800a876 <_scanf_float+0x2f6>
 800a82a:	2d02      	cmp	r5, #2
 800a82c:	d836      	bhi.n	800a89c <_scanf_float+0x31c>
 800a82e:	455e      	cmp	r6, fp
 800a830:	f67f aee8 	bls.w	800a604 <_scanf_float+0x84>
 800a834:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a838:	463a      	mov	r2, r7
 800a83a:	4640      	mov	r0, r8
 800a83c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a840:	4798      	blx	r3
 800a842:	6923      	ldr	r3, [r4, #16]
 800a844:	3b01      	subs	r3, #1
 800a846:	6123      	str	r3, [r4, #16]
 800a848:	e7f1      	b.n	800a82e <_scanf_float+0x2ae>
 800a84a:	9802      	ldr	r0, [sp, #8]
 800a84c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a850:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a854:	463a      	mov	r2, r7
 800a856:	9002      	str	r0, [sp, #8]
 800a858:	4640      	mov	r0, r8
 800a85a:	4798      	blx	r3
 800a85c:	6923      	ldr	r3, [r4, #16]
 800a85e:	3b01      	subs	r3, #1
 800a860:	6123      	str	r3, [r4, #16]
 800a862:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a866:	fa5f fa8a 	uxtb.w	sl, sl
 800a86a:	f1ba 0f02 	cmp.w	sl, #2
 800a86e:	d1ec      	bne.n	800a84a <_scanf_float+0x2ca>
 800a870:	3d03      	subs	r5, #3
 800a872:	b2ed      	uxtb	r5, r5
 800a874:	1b76      	subs	r6, r6, r5
 800a876:	6823      	ldr	r3, [r4, #0]
 800a878:	05da      	lsls	r2, r3, #23
 800a87a:	d52f      	bpl.n	800a8dc <_scanf_float+0x35c>
 800a87c:	055b      	lsls	r3, r3, #21
 800a87e:	d510      	bpl.n	800a8a2 <_scanf_float+0x322>
 800a880:	455e      	cmp	r6, fp
 800a882:	f67f aebf 	bls.w	800a604 <_scanf_float+0x84>
 800a886:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a88a:	463a      	mov	r2, r7
 800a88c:	4640      	mov	r0, r8
 800a88e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a892:	4798      	blx	r3
 800a894:	6923      	ldr	r3, [r4, #16]
 800a896:	3b01      	subs	r3, #1
 800a898:	6123      	str	r3, [r4, #16]
 800a89a:	e7f1      	b.n	800a880 <_scanf_float+0x300>
 800a89c:	46aa      	mov	sl, r5
 800a89e:	9602      	str	r6, [sp, #8]
 800a8a0:	e7df      	b.n	800a862 <_scanf_float+0x2e2>
 800a8a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a8a6:	6923      	ldr	r3, [r4, #16]
 800a8a8:	2965      	cmp	r1, #101	; 0x65
 800a8aa:	f103 33ff 	add.w	r3, r3, #4294967295
 800a8ae:	f106 35ff 	add.w	r5, r6, #4294967295
 800a8b2:	6123      	str	r3, [r4, #16]
 800a8b4:	d00c      	beq.n	800a8d0 <_scanf_float+0x350>
 800a8b6:	2945      	cmp	r1, #69	; 0x45
 800a8b8:	d00a      	beq.n	800a8d0 <_scanf_float+0x350>
 800a8ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a8be:	463a      	mov	r2, r7
 800a8c0:	4640      	mov	r0, r8
 800a8c2:	4798      	blx	r3
 800a8c4:	6923      	ldr	r3, [r4, #16]
 800a8c6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	1eb5      	subs	r5, r6, #2
 800a8ce:	6123      	str	r3, [r4, #16]
 800a8d0:	463a      	mov	r2, r7
 800a8d2:	4640      	mov	r0, r8
 800a8d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a8d8:	4798      	blx	r3
 800a8da:	462e      	mov	r6, r5
 800a8dc:	6825      	ldr	r5, [r4, #0]
 800a8de:	f015 0510 	ands.w	r5, r5, #16
 800a8e2:	d155      	bne.n	800a990 <_scanf_float+0x410>
 800a8e4:	7035      	strb	r5, [r6, #0]
 800a8e6:	6823      	ldr	r3, [r4, #0]
 800a8e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a8ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8f0:	d11b      	bne.n	800a92a <_scanf_float+0x3aa>
 800a8f2:	9b01      	ldr	r3, [sp, #4]
 800a8f4:	454b      	cmp	r3, r9
 800a8f6:	eba3 0209 	sub.w	r2, r3, r9
 800a8fa:	d123      	bne.n	800a944 <_scanf_float+0x3c4>
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	4659      	mov	r1, fp
 800a900:	4640      	mov	r0, r8
 800a902:	f000 fe79 	bl	800b5f8 <_strtod_r>
 800a906:	6822      	ldr	r2, [r4, #0]
 800a908:	9b03      	ldr	r3, [sp, #12]
 800a90a:	f012 0f02 	tst.w	r2, #2
 800a90e:	4606      	mov	r6, r0
 800a910:	460f      	mov	r7, r1
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	d021      	beq.n	800a95a <_scanf_float+0x3da>
 800a916:	1d1a      	adds	r2, r3, #4
 800a918:	9903      	ldr	r1, [sp, #12]
 800a91a:	600a      	str	r2, [r1, #0]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	e9c3 6700 	strd	r6, r7, [r3]
 800a922:	68e3      	ldr	r3, [r4, #12]
 800a924:	3301      	adds	r3, #1
 800a926:	60e3      	str	r3, [r4, #12]
 800a928:	e66d      	b.n	800a606 <_scanf_float+0x86>
 800a92a:	9b04      	ldr	r3, [sp, #16]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d0e5      	beq.n	800a8fc <_scanf_float+0x37c>
 800a930:	9905      	ldr	r1, [sp, #20]
 800a932:	230a      	movs	r3, #10
 800a934:	462a      	mov	r2, r5
 800a936:	4640      	mov	r0, r8
 800a938:	3101      	adds	r1, #1
 800a93a:	f000 fedf 	bl	800b6fc <_strtol_r>
 800a93e:	9b04      	ldr	r3, [sp, #16]
 800a940:	9e05      	ldr	r6, [sp, #20]
 800a942:	1ac2      	subs	r2, r0, r3
 800a944:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a948:	429e      	cmp	r6, r3
 800a94a:	bf28      	it	cs
 800a94c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a950:	4630      	mov	r0, r6
 800a952:	4910      	ldr	r1, [pc, #64]	; (800a994 <_scanf_float+0x414>)
 800a954:	f000 f826 	bl	800a9a4 <siprintf>
 800a958:	e7d0      	b.n	800a8fc <_scanf_float+0x37c>
 800a95a:	f012 0f04 	tst.w	r2, #4
 800a95e:	f103 0204 	add.w	r2, r3, #4
 800a962:	d1d9      	bne.n	800a918 <_scanf_float+0x398>
 800a964:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800a968:	f8cc 2000 	str.w	r2, [ip]
 800a96c:	f8d3 8000 	ldr.w	r8, [r3]
 800a970:	4602      	mov	r2, r0
 800a972:	460b      	mov	r3, r1
 800a974:	f7f6 f84a 	bl	8000a0c <__aeabi_dcmpun>
 800a978:	b128      	cbz	r0, 800a986 <_scanf_float+0x406>
 800a97a:	4807      	ldr	r0, [pc, #28]	; (800a998 <_scanf_float+0x418>)
 800a97c:	f000 f80e 	bl	800a99c <nanf>
 800a980:	f8c8 0000 	str.w	r0, [r8]
 800a984:	e7cd      	b.n	800a922 <_scanf_float+0x3a2>
 800a986:	4630      	mov	r0, r6
 800a988:	4639      	mov	r1, r7
 800a98a:	f7f6 f89d 	bl	8000ac8 <__aeabi_d2f>
 800a98e:	e7f7      	b.n	800a980 <_scanf_float+0x400>
 800a990:	2500      	movs	r5, #0
 800a992:	e638      	b.n	800a606 <_scanf_float+0x86>
 800a994:	0800e614 	.word	0x0800e614
 800a998:	0800ea20 	.word	0x0800ea20

0800a99c <nanf>:
 800a99c:	4800      	ldr	r0, [pc, #0]	; (800a9a0 <nanf+0x4>)
 800a99e:	4770      	bx	lr
 800a9a0:	7fc00000 	.word	0x7fc00000

0800a9a4 <siprintf>:
 800a9a4:	b40e      	push	{r1, r2, r3}
 800a9a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a9aa:	b500      	push	{lr}
 800a9ac:	b09c      	sub	sp, #112	; 0x70
 800a9ae:	ab1d      	add	r3, sp, #116	; 0x74
 800a9b0:	9002      	str	r0, [sp, #8]
 800a9b2:	9006      	str	r0, [sp, #24]
 800a9b4:	9107      	str	r1, [sp, #28]
 800a9b6:	9104      	str	r1, [sp, #16]
 800a9b8:	4808      	ldr	r0, [pc, #32]	; (800a9dc <siprintf+0x38>)
 800a9ba:	4909      	ldr	r1, [pc, #36]	; (800a9e0 <siprintf+0x3c>)
 800a9bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9c0:	9105      	str	r1, [sp, #20]
 800a9c2:	6800      	ldr	r0, [r0, #0]
 800a9c4:	a902      	add	r1, sp, #8
 800a9c6:	9301      	str	r3, [sp, #4]
 800a9c8:	f002 feb8 	bl	800d73c <_svfiprintf_r>
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	9b02      	ldr	r3, [sp, #8]
 800a9d0:	701a      	strb	r2, [r3, #0]
 800a9d2:	b01c      	add	sp, #112	; 0x70
 800a9d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9d8:	b003      	add	sp, #12
 800a9da:	4770      	bx	lr
 800a9dc:	2000017c 	.word	0x2000017c
 800a9e0:	ffff0208 	.word	0xffff0208

0800a9e4 <sulp>:
 800a9e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9e8:	460f      	mov	r7, r1
 800a9ea:	4690      	mov	r8, r2
 800a9ec:	f002 fc12 	bl	800d214 <__ulp>
 800a9f0:	4604      	mov	r4, r0
 800a9f2:	460d      	mov	r5, r1
 800a9f4:	f1b8 0f00 	cmp.w	r8, #0
 800a9f8:	d011      	beq.n	800aa1e <sulp+0x3a>
 800a9fa:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a9fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	dd0b      	ble.n	800aa1e <sulp+0x3a>
 800aa06:	2400      	movs	r4, #0
 800aa08:	051b      	lsls	r3, r3, #20
 800aa0a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800aa0e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800aa12:	4622      	mov	r2, r4
 800aa14:	462b      	mov	r3, r5
 800aa16:	f7f5 fd5f 	bl	80004d8 <__aeabi_dmul>
 800aa1a:	4604      	mov	r4, r0
 800aa1c:	460d      	mov	r5, r1
 800aa1e:	4620      	mov	r0, r4
 800aa20:	4629      	mov	r1, r5
 800aa22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800aa28 <_strtod_l>:
 800aa28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa2c:	469b      	mov	fp, r3
 800aa2e:	2300      	movs	r3, #0
 800aa30:	b09f      	sub	sp, #124	; 0x7c
 800aa32:	931a      	str	r3, [sp, #104]	; 0x68
 800aa34:	4b9e      	ldr	r3, [pc, #632]	; (800acb0 <_strtod_l+0x288>)
 800aa36:	4682      	mov	sl, r0
 800aa38:	681f      	ldr	r7, [r3, #0]
 800aa3a:	460e      	mov	r6, r1
 800aa3c:	4638      	mov	r0, r7
 800aa3e:	9215      	str	r2, [sp, #84]	; 0x54
 800aa40:	f7f5 fb86 	bl	8000150 <strlen>
 800aa44:	f04f 0800 	mov.w	r8, #0
 800aa48:	4604      	mov	r4, r0
 800aa4a:	f04f 0900 	mov.w	r9, #0
 800aa4e:	9619      	str	r6, [sp, #100]	; 0x64
 800aa50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aa52:	781a      	ldrb	r2, [r3, #0]
 800aa54:	2a2b      	cmp	r2, #43	; 0x2b
 800aa56:	d04c      	beq.n	800aaf2 <_strtod_l+0xca>
 800aa58:	d83a      	bhi.n	800aad0 <_strtod_l+0xa8>
 800aa5a:	2a0d      	cmp	r2, #13
 800aa5c:	d833      	bhi.n	800aac6 <_strtod_l+0x9e>
 800aa5e:	2a08      	cmp	r2, #8
 800aa60:	d833      	bhi.n	800aaca <_strtod_l+0xa2>
 800aa62:	2a00      	cmp	r2, #0
 800aa64:	d03d      	beq.n	800aae2 <_strtod_l+0xba>
 800aa66:	2300      	movs	r3, #0
 800aa68:	930a      	str	r3, [sp, #40]	; 0x28
 800aa6a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800aa6c:	782b      	ldrb	r3, [r5, #0]
 800aa6e:	2b30      	cmp	r3, #48	; 0x30
 800aa70:	f040 80aa 	bne.w	800abc8 <_strtod_l+0x1a0>
 800aa74:	786b      	ldrb	r3, [r5, #1]
 800aa76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aa7a:	2b58      	cmp	r3, #88	; 0x58
 800aa7c:	d166      	bne.n	800ab4c <_strtod_l+0x124>
 800aa7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa80:	4650      	mov	r0, sl
 800aa82:	9301      	str	r3, [sp, #4]
 800aa84:	ab1a      	add	r3, sp, #104	; 0x68
 800aa86:	9300      	str	r3, [sp, #0]
 800aa88:	4a8a      	ldr	r2, [pc, #552]	; (800acb4 <_strtod_l+0x28c>)
 800aa8a:	f8cd b008 	str.w	fp, [sp, #8]
 800aa8e:	ab1b      	add	r3, sp, #108	; 0x6c
 800aa90:	a919      	add	r1, sp, #100	; 0x64
 800aa92:	f001 fd17 	bl	800c4c4 <__gethex>
 800aa96:	f010 0607 	ands.w	r6, r0, #7
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	d005      	beq.n	800aaaa <_strtod_l+0x82>
 800aa9e:	2e06      	cmp	r6, #6
 800aaa0:	d129      	bne.n	800aaf6 <_strtod_l+0xce>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	3501      	adds	r5, #1
 800aaa6:	9519      	str	r5, [sp, #100]	; 0x64
 800aaa8:	930a      	str	r3, [sp, #40]	; 0x28
 800aaaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	f040 858a 	bne.w	800b5c6 <_strtod_l+0xb9e>
 800aab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aab4:	b1d3      	cbz	r3, 800aaec <_strtod_l+0xc4>
 800aab6:	4642      	mov	r2, r8
 800aab8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800aabc:	4610      	mov	r0, r2
 800aabe:	4619      	mov	r1, r3
 800aac0:	b01f      	add	sp, #124	; 0x7c
 800aac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aac6:	2a20      	cmp	r2, #32
 800aac8:	d1cd      	bne.n	800aa66 <_strtod_l+0x3e>
 800aaca:	3301      	adds	r3, #1
 800aacc:	9319      	str	r3, [sp, #100]	; 0x64
 800aace:	e7bf      	b.n	800aa50 <_strtod_l+0x28>
 800aad0:	2a2d      	cmp	r2, #45	; 0x2d
 800aad2:	d1c8      	bne.n	800aa66 <_strtod_l+0x3e>
 800aad4:	2201      	movs	r2, #1
 800aad6:	920a      	str	r2, [sp, #40]	; 0x28
 800aad8:	1c5a      	adds	r2, r3, #1
 800aada:	9219      	str	r2, [sp, #100]	; 0x64
 800aadc:	785b      	ldrb	r3, [r3, #1]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d1c3      	bne.n	800aa6a <_strtod_l+0x42>
 800aae2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aae4:	9619      	str	r6, [sp, #100]	; 0x64
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	f040 856b 	bne.w	800b5c2 <_strtod_l+0xb9a>
 800aaec:	4642      	mov	r2, r8
 800aaee:	464b      	mov	r3, r9
 800aaf0:	e7e4      	b.n	800aabc <_strtod_l+0x94>
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	e7ef      	b.n	800aad6 <_strtod_l+0xae>
 800aaf6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aaf8:	b13a      	cbz	r2, 800ab0a <_strtod_l+0xe2>
 800aafa:	2135      	movs	r1, #53	; 0x35
 800aafc:	a81c      	add	r0, sp, #112	; 0x70
 800aafe:	f002 fc8d 	bl	800d41c <__copybits>
 800ab02:	4650      	mov	r0, sl
 800ab04:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ab06:	f002 f855 	bl	800cbb4 <_Bfree>
 800ab0a:	3e01      	subs	r6, #1
 800ab0c:	2e04      	cmp	r6, #4
 800ab0e:	d806      	bhi.n	800ab1e <_strtod_l+0xf6>
 800ab10:	e8df f006 	tbb	[pc, r6]
 800ab14:	1714030a 	.word	0x1714030a
 800ab18:	0a          	.byte	0x0a
 800ab19:	00          	.byte	0x00
 800ab1a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800ab1e:	0721      	lsls	r1, r4, #28
 800ab20:	d5c3      	bpl.n	800aaaa <_strtod_l+0x82>
 800ab22:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800ab26:	e7c0      	b.n	800aaaa <_strtod_l+0x82>
 800ab28:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ab2a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800ab2e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ab32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ab36:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ab3a:	e7f0      	b.n	800ab1e <_strtod_l+0xf6>
 800ab3c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800acb8 <_strtod_l+0x290>
 800ab40:	e7ed      	b.n	800ab1e <_strtod_l+0xf6>
 800ab42:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ab46:	f04f 38ff 	mov.w	r8, #4294967295
 800ab4a:	e7e8      	b.n	800ab1e <_strtod_l+0xf6>
 800ab4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab4e:	1c5a      	adds	r2, r3, #1
 800ab50:	9219      	str	r2, [sp, #100]	; 0x64
 800ab52:	785b      	ldrb	r3, [r3, #1]
 800ab54:	2b30      	cmp	r3, #48	; 0x30
 800ab56:	d0f9      	beq.n	800ab4c <_strtod_l+0x124>
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d0a6      	beq.n	800aaaa <_strtod_l+0x82>
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	9307      	str	r3, [sp, #28]
 800ab60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab62:	220a      	movs	r2, #10
 800ab64:	9308      	str	r3, [sp, #32]
 800ab66:	2300      	movs	r3, #0
 800ab68:	469b      	mov	fp, r3
 800ab6a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800ab6e:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ab70:	7805      	ldrb	r5, [r0, #0]
 800ab72:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800ab76:	b2d9      	uxtb	r1, r3
 800ab78:	2909      	cmp	r1, #9
 800ab7a:	d927      	bls.n	800abcc <_strtod_l+0x1a4>
 800ab7c:	4622      	mov	r2, r4
 800ab7e:	4639      	mov	r1, r7
 800ab80:	f002 fef2 	bl	800d968 <strncmp>
 800ab84:	2800      	cmp	r0, #0
 800ab86:	d033      	beq.n	800abf0 <_strtod_l+0x1c8>
 800ab88:	2000      	movs	r0, #0
 800ab8a:	462a      	mov	r2, r5
 800ab8c:	465c      	mov	r4, fp
 800ab8e:	4603      	mov	r3, r0
 800ab90:	9004      	str	r0, [sp, #16]
 800ab92:	2a65      	cmp	r2, #101	; 0x65
 800ab94:	d001      	beq.n	800ab9a <_strtod_l+0x172>
 800ab96:	2a45      	cmp	r2, #69	; 0x45
 800ab98:	d114      	bne.n	800abc4 <_strtod_l+0x19c>
 800ab9a:	b91c      	cbnz	r4, 800aba4 <_strtod_l+0x17c>
 800ab9c:	9a07      	ldr	r2, [sp, #28]
 800ab9e:	4302      	orrs	r2, r0
 800aba0:	d09f      	beq.n	800aae2 <_strtod_l+0xba>
 800aba2:	2400      	movs	r4, #0
 800aba4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800aba6:	1c72      	adds	r2, r6, #1
 800aba8:	9219      	str	r2, [sp, #100]	; 0x64
 800abaa:	7872      	ldrb	r2, [r6, #1]
 800abac:	2a2b      	cmp	r2, #43	; 0x2b
 800abae:	d079      	beq.n	800aca4 <_strtod_l+0x27c>
 800abb0:	2a2d      	cmp	r2, #45	; 0x2d
 800abb2:	f000 8083 	beq.w	800acbc <_strtod_l+0x294>
 800abb6:	2700      	movs	r7, #0
 800abb8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800abbc:	2909      	cmp	r1, #9
 800abbe:	f240 8083 	bls.w	800acc8 <_strtod_l+0x2a0>
 800abc2:	9619      	str	r6, [sp, #100]	; 0x64
 800abc4:	2500      	movs	r5, #0
 800abc6:	e09f      	b.n	800ad08 <_strtod_l+0x2e0>
 800abc8:	2300      	movs	r3, #0
 800abca:	e7c8      	b.n	800ab5e <_strtod_l+0x136>
 800abcc:	f1bb 0f08 	cmp.w	fp, #8
 800abd0:	bfd5      	itete	le
 800abd2:	9906      	ldrle	r1, [sp, #24]
 800abd4:	9905      	ldrgt	r1, [sp, #20]
 800abd6:	fb02 3301 	mlale	r3, r2, r1, r3
 800abda:	fb02 3301 	mlagt	r3, r2, r1, r3
 800abde:	f100 0001 	add.w	r0, r0, #1
 800abe2:	bfd4      	ite	le
 800abe4:	9306      	strle	r3, [sp, #24]
 800abe6:	9305      	strgt	r3, [sp, #20]
 800abe8:	f10b 0b01 	add.w	fp, fp, #1
 800abec:	9019      	str	r0, [sp, #100]	; 0x64
 800abee:	e7be      	b.n	800ab6e <_strtod_l+0x146>
 800abf0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800abf2:	191a      	adds	r2, r3, r4
 800abf4:	9219      	str	r2, [sp, #100]	; 0x64
 800abf6:	5d1a      	ldrb	r2, [r3, r4]
 800abf8:	f1bb 0f00 	cmp.w	fp, #0
 800abfc:	d036      	beq.n	800ac6c <_strtod_l+0x244>
 800abfe:	465c      	mov	r4, fp
 800ac00:	9004      	str	r0, [sp, #16]
 800ac02:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ac06:	2b09      	cmp	r3, #9
 800ac08:	d912      	bls.n	800ac30 <_strtod_l+0x208>
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	e7c1      	b.n	800ab92 <_strtod_l+0x16a>
 800ac0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ac10:	3001      	adds	r0, #1
 800ac12:	1c5a      	adds	r2, r3, #1
 800ac14:	9219      	str	r2, [sp, #100]	; 0x64
 800ac16:	785a      	ldrb	r2, [r3, #1]
 800ac18:	2a30      	cmp	r2, #48	; 0x30
 800ac1a:	d0f8      	beq.n	800ac0e <_strtod_l+0x1e6>
 800ac1c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ac20:	2b08      	cmp	r3, #8
 800ac22:	f200 84d5 	bhi.w	800b5d0 <_strtod_l+0xba8>
 800ac26:	9004      	str	r0, [sp, #16]
 800ac28:	2000      	movs	r0, #0
 800ac2a:	4604      	mov	r4, r0
 800ac2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ac2e:	9308      	str	r3, [sp, #32]
 800ac30:	3a30      	subs	r2, #48	; 0x30
 800ac32:	f100 0301 	add.w	r3, r0, #1
 800ac36:	d013      	beq.n	800ac60 <_strtod_l+0x238>
 800ac38:	9904      	ldr	r1, [sp, #16]
 800ac3a:	1905      	adds	r5, r0, r4
 800ac3c:	4419      	add	r1, r3
 800ac3e:	9104      	str	r1, [sp, #16]
 800ac40:	4623      	mov	r3, r4
 800ac42:	210a      	movs	r1, #10
 800ac44:	42ab      	cmp	r3, r5
 800ac46:	d113      	bne.n	800ac70 <_strtod_l+0x248>
 800ac48:	1823      	adds	r3, r4, r0
 800ac4a:	2b08      	cmp	r3, #8
 800ac4c:	f104 0401 	add.w	r4, r4, #1
 800ac50:	4404      	add	r4, r0
 800ac52:	dc1b      	bgt.n	800ac8c <_strtod_l+0x264>
 800ac54:	230a      	movs	r3, #10
 800ac56:	9906      	ldr	r1, [sp, #24]
 800ac58:	fb03 2301 	mla	r3, r3, r1, r2
 800ac5c:	9306      	str	r3, [sp, #24]
 800ac5e:	2300      	movs	r3, #0
 800ac60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ac62:	4618      	mov	r0, r3
 800ac64:	1c51      	adds	r1, r2, #1
 800ac66:	9119      	str	r1, [sp, #100]	; 0x64
 800ac68:	7852      	ldrb	r2, [r2, #1]
 800ac6a:	e7ca      	b.n	800ac02 <_strtod_l+0x1da>
 800ac6c:	4658      	mov	r0, fp
 800ac6e:	e7d3      	b.n	800ac18 <_strtod_l+0x1f0>
 800ac70:	2b08      	cmp	r3, #8
 800ac72:	dc04      	bgt.n	800ac7e <_strtod_l+0x256>
 800ac74:	9f06      	ldr	r7, [sp, #24]
 800ac76:	434f      	muls	r7, r1
 800ac78:	9706      	str	r7, [sp, #24]
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	e7e2      	b.n	800ac44 <_strtod_l+0x21c>
 800ac7e:	1c5f      	adds	r7, r3, #1
 800ac80:	2f10      	cmp	r7, #16
 800ac82:	bfde      	ittt	le
 800ac84:	9f05      	ldrle	r7, [sp, #20]
 800ac86:	434f      	mulle	r7, r1
 800ac88:	9705      	strle	r7, [sp, #20]
 800ac8a:	e7f6      	b.n	800ac7a <_strtod_l+0x252>
 800ac8c:	2c10      	cmp	r4, #16
 800ac8e:	bfdf      	itttt	le
 800ac90:	230a      	movle	r3, #10
 800ac92:	9905      	ldrle	r1, [sp, #20]
 800ac94:	fb03 2301 	mlale	r3, r3, r1, r2
 800ac98:	9305      	strle	r3, [sp, #20]
 800ac9a:	e7e0      	b.n	800ac5e <_strtod_l+0x236>
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	9304      	str	r3, [sp, #16]
 800aca0:	2301      	movs	r3, #1
 800aca2:	e77b      	b.n	800ab9c <_strtod_l+0x174>
 800aca4:	2700      	movs	r7, #0
 800aca6:	1cb2      	adds	r2, r6, #2
 800aca8:	9219      	str	r2, [sp, #100]	; 0x64
 800acaa:	78b2      	ldrb	r2, [r6, #2]
 800acac:	e784      	b.n	800abb8 <_strtod_l+0x190>
 800acae:	bf00      	nop
 800acb0:	0800e868 	.word	0x0800e868
 800acb4:	0800e61c 	.word	0x0800e61c
 800acb8:	7ff00000 	.word	0x7ff00000
 800acbc:	2701      	movs	r7, #1
 800acbe:	e7f2      	b.n	800aca6 <_strtod_l+0x27e>
 800acc0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800acc2:	1c51      	adds	r1, r2, #1
 800acc4:	9119      	str	r1, [sp, #100]	; 0x64
 800acc6:	7852      	ldrb	r2, [r2, #1]
 800acc8:	2a30      	cmp	r2, #48	; 0x30
 800acca:	d0f9      	beq.n	800acc0 <_strtod_l+0x298>
 800accc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800acd0:	2908      	cmp	r1, #8
 800acd2:	f63f af77 	bhi.w	800abc4 <_strtod_l+0x19c>
 800acd6:	f04f 0e0a 	mov.w	lr, #10
 800acda:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800acde:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ace0:	9209      	str	r2, [sp, #36]	; 0x24
 800ace2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ace4:	1c51      	adds	r1, r2, #1
 800ace6:	9119      	str	r1, [sp, #100]	; 0x64
 800ace8:	7852      	ldrb	r2, [r2, #1]
 800acea:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800acee:	2d09      	cmp	r5, #9
 800acf0:	d935      	bls.n	800ad5e <_strtod_l+0x336>
 800acf2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800acf4:	1b49      	subs	r1, r1, r5
 800acf6:	2908      	cmp	r1, #8
 800acf8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800acfc:	dc02      	bgt.n	800ad04 <_strtod_l+0x2dc>
 800acfe:	4565      	cmp	r5, ip
 800ad00:	bfa8      	it	ge
 800ad02:	4665      	movge	r5, ip
 800ad04:	b107      	cbz	r7, 800ad08 <_strtod_l+0x2e0>
 800ad06:	426d      	negs	r5, r5
 800ad08:	2c00      	cmp	r4, #0
 800ad0a:	d14c      	bne.n	800ada6 <_strtod_l+0x37e>
 800ad0c:	9907      	ldr	r1, [sp, #28]
 800ad0e:	4301      	orrs	r1, r0
 800ad10:	f47f aecb 	bne.w	800aaaa <_strtod_l+0x82>
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	f47f aee4 	bne.w	800aae2 <_strtod_l+0xba>
 800ad1a:	2a69      	cmp	r2, #105	; 0x69
 800ad1c:	d026      	beq.n	800ad6c <_strtod_l+0x344>
 800ad1e:	dc23      	bgt.n	800ad68 <_strtod_l+0x340>
 800ad20:	2a49      	cmp	r2, #73	; 0x49
 800ad22:	d023      	beq.n	800ad6c <_strtod_l+0x344>
 800ad24:	2a4e      	cmp	r2, #78	; 0x4e
 800ad26:	f47f aedc 	bne.w	800aae2 <_strtod_l+0xba>
 800ad2a:	499d      	ldr	r1, [pc, #628]	; (800afa0 <_strtod_l+0x578>)
 800ad2c:	a819      	add	r0, sp, #100	; 0x64
 800ad2e:	f001 fe17 	bl	800c960 <__match>
 800ad32:	2800      	cmp	r0, #0
 800ad34:	f43f aed5 	beq.w	800aae2 <_strtod_l+0xba>
 800ad38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	2b28      	cmp	r3, #40	; 0x28
 800ad3e:	d12c      	bne.n	800ad9a <_strtod_l+0x372>
 800ad40:	4998      	ldr	r1, [pc, #608]	; (800afa4 <_strtod_l+0x57c>)
 800ad42:	aa1c      	add	r2, sp, #112	; 0x70
 800ad44:	a819      	add	r0, sp, #100	; 0x64
 800ad46:	f001 fe1f 	bl	800c988 <__hexnan>
 800ad4a:	2805      	cmp	r0, #5
 800ad4c:	d125      	bne.n	800ad9a <_strtod_l+0x372>
 800ad4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ad50:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800ad54:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ad58:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ad5c:	e6a5      	b.n	800aaaa <_strtod_l+0x82>
 800ad5e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800ad62:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800ad66:	e7bc      	b.n	800ace2 <_strtod_l+0x2ba>
 800ad68:	2a6e      	cmp	r2, #110	; 0x6e
 800ad6a:	e7dc      	b.n	800ad26 <_strtod_l+0x2fe>
 800ad6c:	498e      	ldr	r1, [pc, #568]	; (800afa8 <_strtod_l+0x580>)
 800ad6e:	a819      	add	r0, sp, #100	; 0x64
 800ad70:	f001 fdf6 	bl	800c960 <__match>
 800ad74:	2800      	cmp	r0, #0
 800ad76:	f43f aeb4 	beq.w	800aae2 <_strtod_l+0xba>
 800ad7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad7c:	498b      	ldr	r1, [pc, #556]	; (800afac <_strtod_l+0x584>)
 800ad7e:	3b01      	subs	r3, #1
 800ad80:	a819      	add	r0, sp, #100	; 0x64
 800ad82:	9319      	str	r3, [sp, #100]	; 0x64
 800ad84:	f001 fdec 	bl	800c960 <__match>
 800ad88:	b910      	cbnz	r0, 800ad90 <_strtod_l+0x368>
 800ad8a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	9319      	str	r3, [sp, #100]	; 0x64
 800ad90:	f04f 0800 	mov.w	r8, #0
 800ad94:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800afb0 <_strtod_l+0x588>
 800ad98:	e687      	b.n	800aaaa <_strtod_l+0x82>
 800ad9a:	4886      	ldr	r0, [pc, #536]	; (800afb4 <_strtod_l+0x58c>)
 800ad9c:	f002 fdce 	bl	800d93c <nan>
 800ada0:	4680      	mov	r8, r0
 800ada2:	4689      	mov	r9, r1
 800ada4:	e681      	b.n	800aaaa <_strtod_l+0x82>
 800ada6:	9b04      	ldr	r3, [sp, #16]
 800ada8:	f1bb 0f00 	cmp.w	fp, #0
 800adac:	bf08      	it	eq
 800adae:	46a3      	moveq	fp, r4
 800adb0:	1aeb      	subs	r3, r5, r3
 800adb2:	2c10      	cmp	r4, #16
 800adb4:	9806      	ldr	r0, [sp, #24]
 800adb6:	4626      	mov	r6, r4
 800adb8:	9307      	str	r3, [sp, #28]
 800adba:	bfa8      	it	ge
 800adbc:	2610      	movge	r6, #16
 800adbe:	f7f5 fb11 	bl	80003e4 <__aeabi_ui2d>
 800adc2:	2c09      	cmp	r4, #9
 800adc4:	4680      	mov	r8, r0
 800adc6:	4689      	mov	r9, r1
 800adc8:	dd13      	ble.n	800adf2 <_strtod_l+0x3ca>
 800adca:	4b7b      	ldr	r3, [pc, #492]	; (800afb8 <_strtod_l+0x590>)
 800adcc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800add0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800add4:	f7f5 fb80 	bl	80004d8 <__aeabi_dmul>
 800add8:	4680      	mov	r8, r0
 800adda:	9805      	ldr	r0, [sp, #20]
 800addc:	4689      	mov	r9, r1
 800adde:	f7f5 fb01 	bl	80003e4 <__aeabi_ui2d>
 800ade2:	4602      	mov	r2, r0
 800ade4:	460b      	mov	r3, r1
 800ade6:	4640      	mov	r0, r8
 800ade8:	4649      	mov	r1, r9
 800adea:	f7f5 f9bf 	bl	800016c <__adddf3>
 800adee:	4680      	mov	r8, r0
 800adf0:	4689      	mov	r9, r1
 800adf2:	2c0f      	cmp	r4, #15
 800adf4:	dc36      	bgt.n	800ae64 <_strtod_l+0x43c>
 800adf6:	9b07      	ldr	r3, [sp, #28]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	f43f ae56 	beq.w	800aaaa <_strtod_l+0x82>
 800adfe:	dd22      	ble.n	800ae46 <_strtod_l+0x41e>
 800ae00:	2b16      	cmp	r3, #22
 800ae02:	dc09      	bgt.n	800ae18 <_strtod_l+0x3f0>
 800ae04:	496c      	ldr	r1, [pc, #432]	; (800afb8 <_strtod_l+0x590>)
 800ae06:	4642      	mov	r2, r8
 800ae08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae0c:	464b      	mov	r3, r9
 800ae0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae12:	f7f5 fb61 	bl	80004d8 <__aeabi_dmul>
 800ae16:	e7c3      	b.n	800ada0 <_strtod_l+0x378>
 800ae18:	9a07      	ldr	r2, [sp, #28]
 800ae1a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	db20      	blt.n	800ae64 <_strtod_l+0x43c>
 800ae22:	4d65      	ldr	r5, [pc, #404]	; (800afb8 <_strtod_l+0x590>)
 800ae24:	f1c4 040f 	rsb	r4, r4, #15
 800ae28:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800ae2c:	4642      	mov	r2, r8
 800ae2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae32:	464b      	mov	r3, r9
 800ae34:	f7f5 fb50 	bl	80004d8 <__aeabi_dmul>
 800ae38:	9b07      	ldr	r3, [sp, #28]
 800ae3a:	1b1c      	subs	r4, r3, r4
 800ae3c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800ae40:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae44:	e7e5      	b.n	800ae12 <_strtod_l+0x3ea>
 800ae46:	9b07      	ldr	r3, [sp, #28]
 800ae48:	3316      	adds	r3, #22
 800ae4a:	db0b      	blt.n	800ae64 <_strtod_l+0x43c>
 800ae4c:	9b04      	ldr	r3, [sp, #16]
 800ae4e:	4640      	mov	r0, r8
 800ae50:	1b5d      	subs	r5, r3, r5
 800ae52:	4b59      	ldr	r3, [pc, #356]	; (800afb8 <_strtod_l+0x590>)
 800ae54:	4649      	mov	r1, r9
 800ae56:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ae5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae5e:	f7f5 fc65 	bl	800072c <__aeabi_ddiv>
 800ae62:	e79d      	b.n	800ada0 <_strtod_l+0x378>
 800ae64:	9b07      	ldr	r3, [sp, #28]
 800ae66:	1ba6      	subs	r6, r4, r6
 800ae68:	441e      	add	r6, r3
 800ae6a:	2e00      	cmp	r6, #0
 800ae6c:	dd74      	ble.n	800af58 <_strtod_l+0x530>
 800ae6e:	f016 030f 	ands.w	r3, r6, #15
 800ae72:	d00a      	beq.n	800ae8a <_strtod_l+0x462>
 800ae74:	4950      	ldr	r1, [pc, #320]	; (800afb8 <_strtod_l+0x590>)
 800ae76:	4642      	mov	r2, r8
 800ae78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae80:	464b      	mov	r3, r9
 800ae82:	f7f5 fb29 	bl	80004d8 <__aeabi_dmul>
 800ae86:	4680      	mov	r8, r0
 800ae88:	4689      	mov	r9, r1
 800ae8a:	f036 060f 	bics.w	r6, r6, #15
 800ae8e:	d052      	beq.n	800af36 <_strtod_l+0x50e>
 800ae90:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800ae94:	dd27      	ble.n	800aee6 <_strtod_l+0x4be>
 800ae96:	f04f 0b00 	mov.w	fp, #0
 800ae9a:	f8cd b010 	str.w	fp, [sp, #16]
 800ae9e:	f8cd b020 	str.w	fp, [sp, #32]
 800aea2:	f8cd b018 	str.w	fp, [sp, #24]
 800aea6:	2322      	movs	r3, #34	; 0x22
 800aea8:	f04f 0800 	mov.w	r8, #0
 800aeac:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800afb0 <_strtod_l+0x588>
 800aeb0:	f8ca 3000 	str.w	r3, [sl]
 800aeb4:	9b08      	ldr	r3, [sp, #32]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	f43f adf7 	beq.w	800aaaa <_strtod_l+0x82>
 800aebc:	4650      	mov	r0, sl
 800aebe:	991a      	ldr	r1, [sp, #104]	; 0x68
 800aec0:	f001 fe78 	bl	800cbb4 <_Bfree>
 800aec4:	4650      	mov	r0, sl
 800aec6:	9906      	ldr	r1, [sp, #24]
 800aec8:	f001 fe74 	bl	800cbb4 <_Bfree>
 800aecc:	4650      	mov	r0, sl
 800aece:	9904      	ldr	r1, [sp, #16]
 800aed0:	f001 fe70 	bl	800cbb4 <_Bfree>
 800aed4:	4650      	mov	r0, sl
 800aed6:	9908      	ldr	r1, [sp, #32]
 800aed8:	f001 fe6c 	bl	800cbb4 <_Bfree>
 800aedc:	4659      	mov	r1, fp
 800aede:	4650      	mov	r0, sl
 800aee0:	f001 fe68 	bl	800cbb4 <_Bfree>
 800aee4:	e5e1      	b.n	800aaaa <_strtod_l+0x82>
 800aee6:	4b35      	ldr	r3, [pc, #212]	; (800afbc <_strtod_l+0x594>)
 800aee8:	4640      	mov	r0, r8
 800aeea:	9305      	str	r3, [sp, #20]
 800aeec:	2300      	movs	r3, #0
 800aeee:	4649      	mov	r1, r9
 800aef0:	461f      	mov	r7, r3
 800aef2:	1136      	asrs	r6, r6, #4
 800aef4:	2e01      	cmp	r6, #1
 800aef6:	dc21      	bgt.n	800af3c <_strtod_l+0x514>
 800aef8:	b10b      	cbz	r3, 800aefe <_strtod_l+0x4d6>
 800aefa:	4680      	mov	r8, r0
 800aefc:	4689      	mov	r9, r1
 800aefe:	4b2f      	ldr	r3, [pc, #188]	; (800afbc <_strtod_l+0x594>)
 800af00:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800af04:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800af08:	4642      	mov	r2, r8
 800af0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af0e:	464b      	mov	r3, r9
 800af10:	f7f5 fae2 	bl	80004d8 <__aeabi_dmul>
 800af14:	4b26      	ldr	r3, [pc, #152]	; (800afb0 <_strtod_l+0x588>)
 800af16:	460a      	mov	r2, r1
 800af18:	400b      	ands	r3, r1
 800af1a:	4929      	ldr	r1, [pc, #164]	; (800afc0 <_strtod_l+0x598>)
 800af1c:	4680      	mov	r8, r0
 800af1e:	428b      	cmp	r3, r1
 800af20:	d8b9      	bhi.n	800ae96 <_strtod_l+0x46e>
 800af22:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800af26:	428b      	cmp	r3, r1
 800af28:	bf86      	itte	hi
 800af2a:	f04f 38ff 	movhi.w	r8, #4294967295
 800af2e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800afc4 <_strtod_l+0x59c>
 800af32:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800af36:	2300      	movs	r3, #0
 800af38:	9305      	str	r3, [sp, #20]
 800af3a:	e07f      	b.n	800b03c <_strtod_l+0x614>
 800af3c:	07f2      	lsls	r2, r6, #31
 800af3e:	d505      	bpl.n	800af4c <_strtod_l+0x524>
 800af40:	9b05      	ldr	r3, [sp, #20]
 800af42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af46:	f7f5 fac7 	bl	80004d8 <__aeabi_dmul>
 800af4a:	2301      	movs	r3, #1
 800af4c:	9a05      	ldr	r2, [sp, #20]
 800af4e:	3701      	adds	r7, #1
 800af50:	3208      	adds	r2, #8
 800af52:	1076      	asrs	r6, r6, #1
 800af54:	9205      	str	r2, [sp, #20]
 800af56:	e7cd      	b.n	800aef4 <_strtod_l+0x4cc>
 800af58:	d0ed      	beq.n	800af36 <_strtod_l+0x50e>
 800af5a:	4276      	negs	r6, r6
 800af5c:	f016 020f 	ands.w	r2, r6, #15
 800af60:	d00a      	beq.n	800af78 <_strtod_l+0x550>
 800af62:	4b15      	ldr	r3, [pc, #84]	; (800afb8 <_strtod_l+0x590>)
 800af64:	4640      	mov	r0, r8
 800af66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af6a:	4649      	mov	r1, r9
 800af6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af70:	f7f5 fbdc 	bl	800072c <__aeabi_ddiv>
 800af74:	4680      	mov	r8, r0
 800af76:	4689      	mov	r9, r1
 800af78:	1136      	asrs	r6, r6, #4
 800af7a:	d0dc      	beq.n	800af36 <_strtod_l+0x50e>
 800af7c:	2e1f      	cmp	r6, #31
 800af7e:	dd23      	ble.n	800afc8 <_strtod_l+0x5a0>
 800af80:	f04f 0b00 	mov.w	fp, #0
 800af84:	f8cd b010 	str.w	fp, [sp, #16]
 800af88:	f8cd b020 	str.w	fp, [sp, #32]
 800af8c:	f8cd b018 	str.w	fp, [sp, #24]
 800af90:	2322      	movs	r3, #34	; 0x22
 800af92:	f04f 0800 	mov.w	r8, #0
 800af96:	f04f 0900 	mov.w	r9, #0
 800af9a:	f8ca 3000 	str.w	r3, [sl]
 800af9e:	e789      	b.n	800aeb4 <_strtod_l+0x48c>
 800afa0:	0800e5ed 	.word	0x0800e5ed
 800afa4:	0800e630 	.word	0x0800e630
 800afa8:	0800e5e5 	.word	0x0800e5e5
 800afac:	0800e774 	.word	0x0800e774
 800afb0:	7ff00000 	.word	0x7ff00000
 800afb4:	0800ea20 	.word	0x0800ea20
 800afb8:	0800e900 	.word	0x0800e900
 800afbc:	0800e8d8 	.word	0x0800e8d8
 800afc0:	7ca00000 	.word	0x7ca00000
 800afc4:	7fefffff 	.word	0x7fefffff
 800afc8:	f016 0310 	ands.w	r3, r6, #16
 800afcc:	bf18      	it	ne
 800afce:	236a      	movne	r3, #106	; 0x6a
 800afd0:	4640      	mov	r0, r8
 800afd2:	9305      	str	r3, [sp, #20]
 800afd4:	4649      	mov	r1, r9
 800afd6:	2300      	movs	r3, #0
 800afd8:	4fb0      	ldr	r7, [pc, #704]	; (800b29c <_strtod_l+0x874>)
 800afda:	07f2      	lsls	r2, r6, #31
 800afdc:	d504      	bpl.n	800afe8 <_strtod_l+0x5c0>
 800afde:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afe2:	f7f5 fa79 	bl	80004d8 <__aeabi_dmul>
 800afe6:	2301      	movs	r3, #1
 800afe8:	1076      	asrs	r6, r6, #1
 800afea:	f107 0708 	add.w	r7, r7, #8
 800afee:	d1f4      	bne.n	800afda <_strtod_l+0x5b2>
 800aff0:	b10b      	cbz	r3, 800aff6 <_strtod_l+0x5ce>
 800aff2:	4680      	mov	r8, r0
 800aff4:	4689      	mov	r9, r1
 800aff6:	9b05      	ldr	r3, [sp, #20]
 800aff8:	b1c3      	cbz	r3, 800b02c <_strtod_l+0x604>
 800affa:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800affe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b002:	2b00      	cmp	r3, #0
 800b004:	4649      	mov	r1, r9
 800b006:	dd11      	ble.n	800b02c <_strtod_l+0x604>
 800b008:	2b1f      	cmp	r3, #31
 800b00a:	f340 8127 	ble.w	800b25c <_strtod_l+0x834>
 800b00e:	2b34      	cmp	r3, #52	; 0x34
 800b010:	bfd8      	it	le
 800b012:	f04f 33ff 	movle.w	r3, #4294967295
 800b016:	f04f 0800 	mov.w	r8, #0
 800b01a:	bfcf      	iteee	gt
 800b01c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b020:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b024:	fa03 f202 	lslle.w	r2, r3, r2
 800b028:	ea02 0901 	andle.w	r9, r2, r1
 800b02c:	2200      	movs	r2, #0
 800b02e:	2300      	movs	r3, #0
 800b030:	4640      	mov	r0, r8
 800b032:	4649      	mov	r1, r9
 800b034:	f7f5 fcb8 	bl	80009a8 <__aeabi_dcmpeq>
 800b038:	2800      	cmp	r0, #0
 800b03a:	d1a1      	bne.n	800af80 <_strtod_l+0x558>
 800b03c:	9b06      	ldr	r3, [sp, #24]
 800b03e:	465a      	mov	r2, fp
 800b040:	9300      	str	r3, [sp, #0]
 800b042:	4650      	mov	r0, sl
 800b044:	4623      	mov	r3, r4
 800b046:	9908      	ldr	r1, [sp, #32]
 800b048:	f001 fe1c 	bl	800cc84 <__s2b>
 800b04c:	9008      	str	r0, [sp, #32]
 800b04e:	2800      	cmp	r0, #0
 800b050:	f43f af21 	beq.w	800ae96 <_strtod_l+0x46e>
 800b054:	9b04      	ldr	r3, [sp, #16]
 800b056:	f04f 0b00 	mov.w	fp, #0
 800b05a:	1b5d      	subs	r5, r3, r5
 800b05c:	9b07      	ldr	r3, [sp, #28]
 800b05e:	f8cd b010 	str.w	fp, [sp, #16]
 800b062:	2b00      	cmp	r3, #0
 800b064:	bfb4      	ite	lt
 800b066:	462b      	movlt	r3, r5
 800b068:	2300      	movge	r3, #0
 800b06a:	930e      	str	r3, [sp, #56]	; 0x38
 800b06c:	9b07      	ldr	r3, [sp, #28]
 800b06e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b072:	9314      	str	r3, [sp, #80]	; 0x50
 800b074:	9b08      	ldr	r3, [sp, #32]
 800b076:	4650      	mov	r0, sl
 800b078:	6859      	ldr	r1, [r3, #4]
 800b07a:	f001 fd5b 	bl	800cb34 <_Balloc>
 800b07e:	9006      	str	r0, [sp, #24]
 800b080:	2800      	cmp	r0, #0
 800b082:	f43f af10 	beq.w	800aea6 <_strtod_l+0x47e>
 800b086:	9b08      	ldr	r3, [sp, #32]
 800b088:	300c      	adds	r0, #12
 800b08a:	691a      	ldr	r2, [r3, #16]
 800b08c:	f103 010c 	add.w	r1, r3, #12
 800b090:	3202      	adds	r2, #2
 800b092:	0092      	lsls	r2, r2, #2
 800b094:	f001 fd40 	bl	800cb18 <memcpy>
 800b098:	ab1c      	add	r3, sp, #112	; 0x70
 800b09a:	9301      	str	r3, [sp, #4]
 800b09c:	ab1b      	add	r3, sp, #108	; 0x6c
 800b09e:	9300      	str	r3, [sp, #0]
 800b0a0:	4642      	mov	r2, r8
 800b0a2:	464b      	mov	r3, r9
 800b0a4:	4650      	mov	r0, sl
 800b0a6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800b0aa:	f002 f92d 	bl	800d308 <__d2b>
 800b0ae:	901a      	str	r0, [sp, #104]	; 0x68
 800b0b0:	2800      	cmp	r0, #0
 800b0b2:	f43f aef8 	beq.w	800aea6 <_strtod_l+0x47e>
 800b0b6:	2101      	movs	r1, #1
 800b0b8:	4650      	mov	r0, sl
 800b0ba:	f001 fe7b 	bl	800cdb4 <__i2b>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	9004      	str	r0, [sp, #16]
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	f43f aeef 	beq.w	800aea6 <_strtod_l+0x47e>
 800b0c8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b0ca:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b0cc:	2d00      	cmp	r5, #0
 800b0ce:	bfab      	itete	ge
 800b0d0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800b0d2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800b0d4:	18ee      	addge	r6, r5, r3
 800b0d6:	1b5c      	sublt	r4, r3, r5
 800b0d8:	9b05      	ldr	r3, [sp, #20]
 800b0da:	bfa8      	it	ge
 800b0dc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800b0de:	eba5 0503 	sub.w	r5, r5, r3
 800b0e2:	4415      	add	r5, r2
 800b0e4:	4b6e      	ldr	r3, [pc, #440]	; (800b2a0 <_strtod_l+0x878>)
 800b0e6:	f105 35ff 	add.w	r5, r5, #4294967295
 800b0ea:	bfb8      	it	lt
 800b0ec:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800b0ee:	429d      	cmp	r5, r3
 800b0f0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b0f4:	f280 80c4 	bge.w	800b280 <_strtod_l+0x858>
 800b0f8:	1b5b      	subs	r3, r3, r5
 800b0fa:	2b1f      	cmp	r3, #31
 800b0fc:	f04f 0701 	mov.w	r7, #1
 800b100:	eba2 0203 	sub.w	r2, r2, r3
 800b104:	f300 80b1 	bgt.w	800b26a <_strtod_l+0x842>
 800b108:	2500      	movs	r5, #0
 800b10a:	fa07 f303 	lsl.w	r3, r7, r3
 800b10e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b110:	18b7      	adds	r7, r6, r2
 800b112:	9b05      	ldr	r3, [sp, #20]
 800b114:	42be      	cmp	r6, r7
 800b116:	4414      	add	r4, r2
 800b118:	441c      	add	r4, r3
 800b11a:	4633      	mov	r3, r6
 800b11c:	bfa8      	it	ge
 800b11e:	463b      	movge	r3, r7
 800b120:	42a3      	cmp	r3, r4
 800b122:	bfa8      	it	ge
 800b124:	4623      	movge	r3, r4
 800b126:	2b00      	cmp	r3, #0
 800b128:	bfc2      	ittt	gt
 800b12a:	1aff      	subgt	r7, r7, r3
 800b12c:	1ae4      	subgt	r4, r4, r3
 800b12e:	1af6      	subgt	r6, r6, r3
 800b130:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b132:	2b00      	cmp	r3, #0
 800b134:	dd17      	ble.n	800b166 <_strtod_l+0x73e>
 800b136:	461a      	mov	r2, r3
 800b138:	4650      	mov	r0, sl
 800b13a:	9904      	ldr	r1, [sp, #16]
 800b13c:	f001 fef8 	bl	800cf30 <__pow5mult>
 800b140:	9004      	str	r0, [sp, #16]
 800b142:	2800      	cmp	r0, #0
 800b144:	f43f aeaf 	beq.w	800aea6 <_strtod_l+0x47e>
 800b148:	4601      	mov	r1, r0
 800b14a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b14c:	4650      	mov	r0, sl
 800b14e:	f001 fe47 	bl	800cde0 <__multiply>
 800b152:	9009      	str	r0, [sp, #36]	; 0x24
 800b154:	2800      	cmp	r0, #0
 800b156:	f43f aea6 	beq.w	800aea6 <_strtod_l+0x47e>
 800b15a:	4650      	mov	r0, sl
 800b15c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b15e:	f001 fd29 	bl	800cbb4 <_Bfree>
 800b162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b164:	931a      	str	r3, [sp, #104]	; 0x68
 800b166:	2f00      	cmp	r7, #0
 800b168:	f300 808e 	bgt.w	800b288 <_strtod_l+0x860>
 800b16c:	9b07      	ldr	r3, [sp, #28]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	dd08      	ble.n	800b184 <_strtod_l+0x75c>
 800b172:	4650      	mov	r0, sl
 800b174:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b176:	9906      	ldr	r1, [sp, #24]
 800b178:	f001 feda 	bl	800cf30 <__pow5mult>
 800b17c:	9006      	str	r0, [sp, #24]
 800b17e:	2800      	cmp	r0, #0
 800b180:	f43f ae91 	beq.w	800aea6 <_strtod_l+0x47e>
 800b184:	2c00      	cmp	r4, #0
 800b186:	dd08      	ble.n	800b19a <_strtod_l+0x772>
 800b188:	4622      	mov	r2, r4
 800b18a:	4650      	mov	r0, sl
 800b18c:	9906      	ldr	r1, [sp, #24]
 800b18e:	f001 ff29 	bl	800cfe4 <__lshift>
 800b192:	9006      	str	r0, [sp, #24]
 800b194:	2800      	cmp	r0, #0
 800b196:	f43f ae86 	beq.w	800aea6 <_strtod_l+0x47e>
 800b19a:	2e00      	cmp	r6, #0
 800b19c:	dd08      	ble.n	800b1b0 <_strtod_l+0x788>
 800b19e:	4632      	mov	r2, r6
 800b1a0:	4650      	mov	r0, sl
 800b1a2:	9904      	ldr	r1, [sp, #16]
 800b1a4:	f001 ff1e 	bl	800cfe4 <__lshift>
 800b1a8:	9004      	str	r0, [sp, #16]
 800b1aa:	2800      	cmp	r0, #0
 800b1ac:	f43f ae7b 	beq.w	800aea6 <_strtod_l+0x47e>
 800b1b0:	4650      	mov	r0, sl
 800b1b2:	9a06      	ldr	r2, [sp, #24]
 800b1b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b1b6:	f001 ffa1 	bl	800d0fc <__mdiff>
 800b1ba:	4683      	mov	fp, r0
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	f43f ae72 	beq.w	800aea6 <_strtod_l+0x47e>
 800b1c2:	2400      	movs	r4, #0
 800b1c4:	68c3      	ldr	r3, [r0, #12]
 800b1c6:	9904      	ldr	r1, [sp, #16]
 800b1c8:	60c4      	str	r4, [r0, #12]
 800b1ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1cc:	f001 ff7a 	bl	800d0c4 <__mcmp>
 800b1d0:	42a0      	cmp	r0, r4
 800b1d2:	da6b      	bge.n	800b2ac <_strtod_l+0x884>
 800b1d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1d6:	ea53 0308 	orrs.w	r3, r3, r8
 800b1da:	f040 8091 	bne.w	800b300 <_strtod_l+0x8d8>
 800b1de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	f040 808c 	bne.w	800b300 <_strtod_l+0x8d8>
 800b1e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b1ec:	0d1b      	lsrs	r3, r3, #20
 800b1ee:	051b      	lsls	r3, r3, #20
 800b1f0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b1f4:	f240 8084 	bls.w	800b300 <_strtod_l+0x8d8>
 800b1f8:	f8db 3014 	ldr.w	r3, [fp, #20]
 800b1fc:	b91b      	cbnz	r3, 800b206 <_strtod_l+0x7de>
 800b1fe:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b202:	2b01      	cmp	r3, #1
 800b204:	dd7c      	ble.n	800b300 <_strtod_l+0x8d8>
 800b206:	4659      	mov	r1, fp
 800b208:	2201      	movs	r2, #1
 800b20a:	4650      	mov	r0, sl
 800b20c:	f001 feea 	bl	800cfe4 <__lshift>
 800b210:	9904      	ldr	r1, [sp, #16]
 800b212:	4683      	mov	fp, r0
 800b214:	f001 ff56 	bl	800d0c4 <__mcmp>
 800b218:	2800      	cmp	r0, #0
 800b21a:	dd71      	ble.n	800b300 <_strtod_l+0x8d8>
 800b21c:	9905      	ldr	r1, [sp, #20]
 800b21e:	464b      	mov	r3, r9
 800b220:	4a20      	ldr	r2, [pc, #128]	; (800b2a4 <_strtod_l+0x87c>)
 800b222:	2900      	cmp	r1, #0
 800b224:	f000 808c 	beq.w	800b340 <_strtod_l+0x918>
 800b228:	ea02 0109 	and.w	r1, r2, r9
 800b22c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b230:	f300 8086 	bgt.w	800b340 <_strtod_l+0x918>
 800b234:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b238:	f77f aeaa 	ble.w	800af90 <_strtod_l+0x568>
 800b23c:	4640      	mov	r0, r8
 800b23e:	4649      	mov	r1, r9
 800b240:	4b19      	ldr	r3, [pc, #100]	; (800b2a8 <_strtod_l+0x880>)
 800b242:	2200      	movs	r2, #0
 800b244:	f7f5 f948 	bl	80004d8 <__aeabi_dmul>
 800b248:	460b      	mov	r3, r1
 800b24a:	4303      	orrs	r3, r0
 800b24c:	bf08      	it	eq
 800b24e:	2322      	moveq	r3, #34	; 0x22
 800b250:	4680      	mov	r8, r0
 800b252:	4689      	mov	r9, r1
 800b254:	bf08      	it	eq
 800b256:	f8ca 3000 	streq.w	r3, [sl]
 800b25a:	e62f      	b.n	800aebc <_strtod_l+0x494>
 800b25c:	f04f 32ff 	mov.w	r2, #4294967295
 800b260:	fa02 f303 	lsl.w	r3, r2, r3
 800b264:	ea03 0808 	and.w	r8, r3, r8
 800b268:	e6e0      	b.n	800b02c <_strtod_l+0x604>
 800b26a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800b26e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800b272:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800b276:	35e2      	adds	r5, #226	; 0xe2
 800b278:	fa07 f505 	lsl.w	r5, r7, r5
 800b27c:	970f      	str	r7, [sp, #60]	; 0x3c
 800b27e:	e747      	b.n	800b110 <_strtod_l+0x6e8>
 800b280:	2301      	movs	r3, #1
 800b282:	2500      	movs	r5, #0
 800b284:	930f      	str	r3, [sp, #60]	; 0x3c
 800b286:	e743      	b.n	800b110 <_strtod_l+0x6e8>
 800b288:	463a      	mov	r2, r7
 800b28a:	4650      	mov	r0, sl
 800b28c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b28e:	f001 fea9 	bl	800cfe4 <__lshift>
 800b292:	901a      	str	r0, [sp, #104]	; 0x68
 800b294:	2800      	cmp	r0, #0
 800b296:	f47f af69 	bne.w	800b16c <_strtod_l+0x744>
 800b29a:	e604      	b.n	800aea6 <_strtod_l+0x47e>
 800b29c:	0800e648 	.word	0x0800e648
 800b2a0:	fffffc02 	.word	0xfffffc02
 800b2a4:	7ff00000 	.word	0x7ff00000
 800b2a8:	39500000 	.word	0x39500000
 800b2ac:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b2b0:	d165      	bne.n	800b37e <_strtod_l+0x956>
 800b2b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b2b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2b8:	b35a      	cbz	r2, 800b312 <_strtod_l+0x8ea>
 800b2ba:	4a99      	ldr	r2, [pc, #612]	; (800b520 <_strtod_l+0xaf8>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d12b      	bne.n	800b318 <_strtod_l+0x8f0>
 800b2c0:	9b05      	ldr	r3, [sp, #20]
 800b2c2:	4641      	mov	r1, r8
 800b2c4:	b303      	cbz	r3, 800b308 <_strtod_l+0x8e0>
 800b2c6:	464a      	mov	r2, r9
 800b2c8:	4b96      	ldr	r3, [pc, #600]	; (800b524 <_strtod_l+0xafc>)
 800b2ca:	4013      	ands	r3, r2
 800b2cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b2d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b2d4:	d81b      	bhi.n	800b30e <_strtod_l+0x8e6>
 800b2d6:	0d1b      	lsrs	r3, r3, #20
 800b2d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b2dc:	fa02 f303 	lsl.w	r3, r2, r3
 800b2e0:	4299      	cmp	r1, r3
 800b2e2:	d119      	bne.n	800b318 <_strtod_l+0x8f0>
 800b2e4:	4b90      	ldr	r3, [pc, #576]	; (800b528 <_strtod_l+0xb00>)
 800b2e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d102      	bne.n	800b2f2 <_strtod_l+0x8ca>
 800b2ec:	3101      	adds	r1, #1
 800b2ee:	f43f adda 	beq.w	800aea6 <_strtod_l+0x47e>
 800b2f2:	f04f 0800 	mov.w	r8, #0
 800b2f6:	4b8b      	ldr	r3, [pc, #556]	; (800b524 <_strtod_l+0xafc>)
 800b2f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2fa:	401a      	ands	r2, r3
 800b2fc:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800b300:	9b05      	ldr	r3, [sp, #20]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d19a      	bne.n	800b23c <_strtod_l+0x814>
 800b306:	e5d9      	b.n	800aebc <_strtod_l+0x494>
 800b308:	f04f 33ff 	mov.w	r3, #4294967295
 800b30c:	e7e8      	b.n	800b2e0 <_strtod_l+0x8b8>
 800b30e:	4613      	mov	r3, r2
 800b310:	e7e6      	b.n	800b2e0 <_strtod_l+0x8b8>
 800b312:	ea53 0308 	orrs.w	r3, r3, r8
 800b316:	d081      	beq.n	800b21c <_strtod_l+0x7f4>
 800b318:	b1e5      	cbz	r5, 800b354 <_strtod_l+0x92c>
 800b31a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b31c:	421d      	tst	r5, r3
 800b31e:	d0ef      	beq.n	800b300 <_strtod_l+0x8d8>
 800b320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b322:	4640      	mov	r0, r8
 800b324:	4649      	mov	r1, r9
 800b326:	9a05      	ldr	r2, [sp, #20]
 800b328:	b1c3      	cbz	r3, 800b35c <_strtod_l+0x934>
 800b32a:	f7ff fb5b 	bl	800a9e4 <sulp>
 800b32e:	4602      	mov	r2, r0
 800b330:	460b      	mov	r3, r1
 800b332:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b336:	f7f4 ff19 	bl	800016c <__adddf3>
 800b33a:	4680      	mov	r8, r0
 800b33c:	4689      	mov	r9, r1
 800b33e:	e7df      	b.n	800b300 <_strtod_l+0x8d8>
 800b340:	4013      	ands	r3, r2
 800b342:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b346:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b34a:	f04f 38ff 	mov.w	r8, #4294967295
 800b34e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b352:	e7d5      	b.n	800b300 <_strtod_l+0x8d8>
 800b354:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b356:	ea13 0f08 	tst.w	r3, r8
 800b35a:	e7e0      	b.n	800b31e <_strtod_l+0x8f6>
 800b35c:	f7ff fb42 	bl	800a9e4 <sulp>
 800b360:	4602      	mov	r2, r0
 800b362:	460b      	mov	r3, r1
 800b364:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b368:	f7f4 fefe 	bl	8000168 <__aeabi_dsub>
 800b36c:	2200      	movs	r2, #0
 800b36e:	2300      	movs	r3, #0
 800b370:	4680      	mov	r8, r0
 800b372:	4689      	mov	r9, r1
 800b374:	f7f5 fb18 	bl	80009a8 <__aeabi_dcmpeq>
 800b378:	2800      	cmp	r0, #0
 800b37a:	d0c1      	beq.n	800b300 <_strtod_l+0x8d8>
 800b37c:	e608      	b.n	800af90 <_strtod_l+0x568>
 800b37e:	4658      	mov	r0, fp
 800b380:	9904      	ldr	r1, [sp, #16]
 800b382:	f002 f81d 	bl	800d3c0 <__ratio>
 800b386:	2200      	movs	r2, #0
 800b388:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b38c:	4606      	mov	r6, r0
 800b38e:	460f      	mov	r7, r1
 800b390:	f7f5 fb1e 	bl	80009d0 <__aeabi_dcmple>
 800b394:	2800      	cmp	r0, #0
 800b396:	d070      	beq.n	800b47a <_strtod_l+0xa52>
 800b398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d042      	beq.n	800b424 <_strtod_l+0x9fc>
 800b39e:	2600      	movs	r6, #0
 800b3a0:	4f62      	ldr	r7, [pc, #392]	; (800b52c <_strtod_l+0xb04>)
 800b3a2:	4d62      	ldr	r5, [pc, #392]	; (800b52c <_strtod_l+0xb04>)
 800b3a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b3aa:	0d1b      	lsrs	r3, r3, #20
 800b3ac:	051b      	lsls	r3, r3, #20
 800b3ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b3b2:	4b5f      	ldr	r3, [pc, #380]	; (800b530 <_strtod_l+0xb08>)
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	f040 80c3 	bne.w	800b540 <_strtod_l+0xb18>
 800b3ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3bc:	4640      	mov	r0, r8
 800b3be:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800b3c2:	4649      	mov	r1, r9
 800b3c4:	f001 ff26 	bl	800d214 <__ulp>
 800b3c8:	4602      	mov	r2, r0
 800b3ca:	460b      	mov	r3, r1
 800b3cc:	4630      	mov	r0, r6
 800b3ce:	4639      	mov	r1, r7
 800b3d0:	f7f5 f882 	bl	80004d8 <__aeabi_dmul>
 800b3d4:	4642      	mov	r2, r8
 800b3d6:	464b      	mov	r3, r9
 800b3d8:	f7f4 fec8 	bl	800016c <__adddf3>
 800b3dc:	460b      	mov	r3, r1
 800b3de:	4951      	ldr	r1, [pc, #324]	; (800b524 <_strtod_l+0xafc>)
 800b3e0:	4a54      	ldr	r2, [pc, #336]	; (800b534 <_strtod_l+0xb0c>)
 800b3e2:	4019      	ands	r1, r3
 800b3e4:	4291      	cmp	r1, r2
 800b3e6:	4680      	mov	r8, r0
 800b3e8:	d95d      	bls.n	800b4a6 <_strtod_l+0xa7e>
 800b3ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b3ec:	4b4e      	ldr	r3, [pc, #312]	; (800b528 <_strtod_l+0xb00>)
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d103      	bne.n	800b3fa <_strtod_l+0x9d2>
 800b3f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	f43f ad56 	beq.w	800aea6 <_strtod_l+0x47e>
 800b3fa:	f04f 38ff 	mov.w	r8, #4294967295
 800b3fe:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800b528 <_strtod_l+0xb00>
 800b402:	4650      	mov	r0, sl
 800b404:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b406:	f001 fbd5 	bl	800cbb4 <_Bfree>
 800b40a:	4650      	mov	r0, sl
 800b40c:	9906      	ldr	r1, [sp, #24]
 800b40e:	f001 fbd1 	bl	800cbb4 <_Bfree>
 800b412:	4650      	mov	r0, sl
 800b414:	9904      	ldr	r1, [sp, #16]
 800b416:	f001 fbcd 	bl	800cbb4 <_Bfree>
 800b41a:	4659      	mov	r1, fp
 800b41c:	4650      	mov	r0, sl
 800b41e:	f001 fbc9 	bl	800cbb4 <_Bfree>
 800b422:	e627      	b.n	800b074 <_strtod_l+0x64c>
 800b424:	f1b8 0f00 	cmp.w	r8, #0
 800b428:	d119      	bne.n	800b45e <_strtod_l+0xa36>
 800b42a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b42c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b430:	b9e3      	cbnz	r3, 800b46c <_strtod_l+0xa44>
 800b432:	2200      	movs	r2, #0
 800b434:	4630      	mov	r0, r6
 800b436:	4639      	mov	r1, r7
 800b438:	4b3c      	ldr	r3, [pc, #240]	; (800b52c <_strtod_l+0xb04>)
 800b43a:	f7f5 fabf 	bl	80009bc <__aeabi_dcmplt>
 800b43e:	b9c8      	cbnz	r0, 800b474 <_strtod_l+0xa4c>
 800b440:	2200      	movs	r2, #0
 800b442:	4630      	mov	r0, r6
 800b444:	4639      	mov	r1, r7
 800b446:	4b3c      	ldr	r3, [pc, #240]	; (800b538 <_strtod_l+0xb10>)
 800b448:	f7f5 f846 	bl	80004d8 <__aeabi_dmul>
 800b44c:	4604      	mov	r4, r0
 800b44e:	460d      	mov	r5, r1
 800b450:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b454:	9416      	str	r4, [sp, #88]	; 0x58
 800b456:	9317      	str	r3, [sp, #92]	; 0x5c
 800b458:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800b45c:	e7a2      	b.n	800b3a4 <_strtod_l+0x97c>
 800b45e:	f1b8 0f01 	cmp.w	r8, #1
 800b462:	d103      	bne.n	800b46c <_strtod_l+0xa44>
 800b464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b466:	2b00      	cmp	r3, #0
 800b468:	f43f ad92 	beq.w	800af90 <_strtod_l+0x568>
 800b46c:	2600      	movs	r6, #0
 800b46e:	2400      	movs	r4, #0
 800b470:	4f32      	ldr	r7, [pc, #200]	; (800b53c <_strtod_l+0xb14>)
 800b472:	e796      	b.n	800b3a2 <_strtod_l+0x97a>
 800b474:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b476:	4d30      	ldr	r5, [pc, #192]	; (800b538 <_strtod_l+0xb10>)
 800b478:	e7ea      	b.n	800b450 <_strtod_l+0xa28>
 800b47a:	4b2f      	ldr	r3, [pc, #188]	; (800b538 <_strtod_l+0xb10>)
 800b47c:	2200      	movs	r2, #0
 800b47e:	4630      	mov	r0, r6
 800b480:	4639      	mov	r1, r7
 800b482:	f7f5 f829 	bl	80004d8 <__aeabi_dmul>
 800b486:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b488:	4604      	mov	r4, r0
 800b48a:	460d      	mov	r5, r1
 800b48c:	b933      	cbnz	r3, 800b49c <_strtod_l+0xa74>
 800b48e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b492:	9010      	str	r0, [sp, #64]	; 0x40
 800b494:	9311      	str	r3, [sp, #68]	; 0x44
 800b496:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b49a:	e783      	b.n	800b3a4 <_strtod_l+0x97c>
 800b49c:	4602      	mov	r2, r0
 800b49e:	460b      	mov	r3, r1
 800b4a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b4a4:	e7f7      	b.n	800b496 <_strtod_l+0xa6e>
 800b4a6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b4aa:	9b05      	ldr	r3, [sp, #20]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d1a8      	bne.n	800b402 <_strtod_l+0x9da>
 800b4b0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b4b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b4b6:	0d1b      	lsrs	r3, r3, #20
 800b4b8:	051b      	lsls	r3, r3, #20
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d1a1      	bne.n	800b402 <_strtod_l+0x9da>
 800b4be:	4620      	mov	r0, r4
 800b4c0:	4629      	mov	r1, r5
 800b4c2:	f7f5 fdaf 	bl	8001024 <__aeabi_d2lz>
 800b4c6:	f7f4 ffd9 	bl	800047c <__aeabi_l2d>
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	4620      	mov	r0, r4
 800b4d0:	4629      	mov	r1, r5
 800b4d2:	f7f4 fe49 	bl	8000168 <__aeabi_dsub>
 800b4d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b4d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b4dc:	ea43 0308 	orr.w	r3, r3, r8
 800b4e0:	4313      	orrs	r3, r2
 800b4e2:	4604      	mov	r4, r0
 800b4e4:	460d      	mov	r5, r1
 800b4e6:	d066      	beq.n	800b5b6 <_strtod_l+0xb8e>
 800b4e8:	a309      	add	r3, pc, #36	; (adr r3, 800b510 <_strtod_l+0xae8>)
 800b4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ee:	f7f5 fa65 	bl	80009bc <__aeabi_dcmplt>
 800b4f2:	2800      	cmp	r0, #0
 800b4f4:	f47f ace2 	bne.w	800aebc <_strtod_l+0x494>
 800b4f8:	a307      	add	r3, pc, #28	; (adr r3, 800b518 <_strtod_l+0xaf0>)
 800b4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fe:	4620      	mov	r0, r4
 800b500:	4629      	mov	r1, r5
 800b502:	f7f5 fa79 	bl	80009f8 <__aeabi_dcmpgt>
 800b506:	2800      	cmp	r0, #0
 800b508:	f43f af7b 	beq.w	800b402 <_strtod_l+0x9da>
 800b50c:	e4d6      	b.n	800aebc <_strtod_l+0x494>
 800b50e:	bf00      	nop
 800b510:	94a03595 	.word	0x94a03595
 800b514:	3fdfffff 	.word	0x3fdfffff
 800b518:	35afe535 	.word	0x35afe535
 800b51c:	3fe00000 	.word	0x3fe00000
 800b520:	000fffff 	.word	0x000fffff
 800b524:	7ff00000 	.word	0x7ff00000
 800b528:	7fefffff 	.word	0x7fefffff
 800b52c:	3ff00000 	.word	0x3ff00000
 800b530:	7fe00000 	.word	0x7fe00000
 800b534:	7c9fffff 	.word	0x7c9fffff
 800b538:	3fe00000 	.word	0x3fe00000
 800b53c:	bff00000 	.word	0xbff00000
 800b540:	9b05      	ldr	r3, [sp, #20]
 800b542:	b313      	cbz	r3, 800b58a <_strtod_l+0xb62>
 800b544:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b546:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b54a:	d81e      	bhi.n	800b58a <_strtod_l+0xb62>
 800b54c:	a326      	add	r3, pc, #152	; (adr r3, 800b5e8 <_strtod_l+0xbc0>)
 800b54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b552:	4620      	mov	r0, r4
 800b554:	4629      	mov	r1, r5
 800b556:	f7f5 fa3b 	bl	80009d0 <__aeabi_dcmple>
 800b55a:	b190      	cbz	r0, 800b582 <_strtod_l+0xb5a>
 800b55c:	4629      	mov	r1, r5
 800b55e:	4620      	mov	r0, r4
 800b560:	f7f5 fa92 	bl	8000a88 <__aeabi_d2uiz>
 800b564:	2801      	cmp	r0, #1
 800b566:	bf38      	it	cc
 800b568:	2001      	movcc	r0, #1
 800b56a:	f7f4 ff3b 	bl	80003e4 <__aeabi_ui2d>
 800b56e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b570:	4604      	mov	r4, r0
 800b572:	460d      	mov	r5, r1
 800b574:	b9d3      	cbnz	r3, 800b5ac <_strtod_l+0xb84>
 800b576:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b57a:	9012      	str	r0, [sp, #72]	; 0x48
 800b57c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b57e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800b582:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b584:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800b588:	1a9f      	subs	r7, r3, r2
 800b58a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b58e:	f001 fe41 	bl	800d214 <__ulp>
 800b592:	4602      	mov	r2, r0
 800b594:	460b      	mov	r3, r1
 800b596:	4630      	mov	r0, r6
 800b598:	4639      	mov	r1, r7
 800b59a:	f7f4 ff9d 	bl	80004d8 <__aeabi_dmul>
 800b59e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b5a2:	f7f4 fde3 	bl	800016c <__adddf3>
 800b5a6:	4680      	mov	r8, r0
 800b5a8:	4689      	mov	r9, r1
 800b5aa:	e77e      	b.n	800b4aa <_strtod_l+0xa82>
 800b5ac:	4602      	mov	r2, r0
 800b5ae:	460b      	mov	r3, r1
 800b5b0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800b5b4:	e7e3      	b.n	800b57e <_strtod_l+0xb56>
 800b5b6:	a30e      	add	r3, pc, #56	; (adr r3, 800b5f0 <_strtod_l+0xbc8>)
 800b5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5bc:	f7f5 f9fe 	bl	80009bc <__aeabi_dcmplt>
 800b5c0:	e7a1      	b.n	800b506 <_strtod_l+0xade>
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	930a      	str	r3, [sp, #40]	; 0x28
 800b5c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b5c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b5ca:	6013      	str	r3, [r2, #0]
 800b5cc:	f7ff ba71 	b.w	800aab2 <_strtod_l+0x8a>
 800b5d0:	2a65      	cmp	r2, #101	; 0x65
 800b5d2:	f43f ab63 	beq.w	800ac9c <_strtod_l+0x274>
 800b5d6:	2a45      	cmp	r2, #69	; 0x45
 800b5d8:	f43f ab60 	beq.w	800ac9c <_strtod_l+0x274>
 800b5dc:	2301      	movs	r3, #1
 800b5de:	f7ff bb95 	b.w	800ad0c <_strtod_l+0x2e4>
 800b5e2:	bf00      	nop
 800b5e4:	f3af 8000 	nop.w
 800b5e8:	ffc00000 	.word	0xffc00000
 800b5ec:	41dfffff 	.word	0x41dfffff
 800b5f0:	94a03595 	.word	0x94a03595
 800b5f4:	3fcfffff 	.word	0x3fcfffff

0800b5f8 <_strtod_r>:
 800b5f8:	4b01      	ldr	r3, [pc, #4]	; (800b600 <_strtod_r+0x8>)
 800b5fa:	f7ff ba15 	b.w	800aa28 <_strtod_l>
 800b5fe:	bf00      	nop
 800b600:	200001e4 	.word	0x200001e4

0800b604 <_strtol_l.constprop.0>:
 800b604:	2b01      	cmp	r3, #1
 800b606:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b60a:	4680      	mov	r8, r0
 800b60c:	d001      	beq.n	800b612 <_strtol_l.constprop.0+0xe>
 800b60e:	2b24      	cmp	r3, #36	; 0x24
 800b610:	d906      	bls.n	800b620 <_strtol_l.constprop.0+0x1c>
 800b612:	f7fe fb23 	bl	8009c5c <__errno>
 800b616:	2316      	movs	r3, #22
 800b618:	6003      	str	r3, [r0, #0]
 800b61a:	2000      	movs	r0, #0
 800b61c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b620:	460d      	mov	r5, r1
 800b622:	4f35      	ldr	r7, [pc, #212]	; (800b6f8 <_strtol_l.constprop.0+0xf4>)
 800b624:	4628      	mov	r0, r5
 800b626:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b62a:	5de6      	ldrb	r6, [r4, r7]
 800b62c:	f016 0608 	ands.w	r6, r6, #8
 800b630:	d1f8      	bne.n	800b624 <_strtol_l.constprop.0+0x20>
 800b632:	2c2d      	cmp	r4, #45	; 0x2d
 800b634:	d12f      	bne.n	800b696 <_strtol_l.constprop.0+0x92>
 800b636:	2601      	movs	r6, #1
 800b638:	782c      	ldrb	r4, [r5, #0]
 800b63a:	1c85      	adds	r5, r0, #2
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d057      	beq.n	800b6f0 <_strtol_l.constprop.0+0xec>
 800b640:	2b10      	cmp	r3, #16
 800b642:	d109      	bne.n	800b658 <_strtol_l.constprop.0+0x54>
 800b644:	2c30      	cmp	r4, #48	; 0x30
 800b646:	d107      	bne.n	800b658 <_strtol_l.constprop.0+0x54>
 800b648:	7828      	ldrb	r0, [r5, #0]
 800b64a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b64e:	2858      	cmp	r0, #88	; 0x58
 800b650:	d149      	bne.n	800b6e6 <_strtol_l.constprop.0+0xe2>
 800b652:	2310      	movs	r3, #16
 800b654:	786c      	ldrb	r4, [r5, #1]
 800b656:	3502      	adds	r5, #2
 800b658:	2700      	movs	r7, #0
 800b65a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800b65e:	f10e 3eff 	add.w	lr, lr, #4294967295
 800b662:	fbbe f9f3 	udiv	r9, lr, r3
 800b666:	4638      	mov	r0, r7
 800b668:	fb03 ea19 	mls	sl, r3, r9, lr
 800b66c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b670:	f1bc 0f09 	cmp.w	ip, #9
 800b674:	d814      	bhi.n	800b6a0 <_strtol_l.constprop.0+0x9c>
 800b676:	4664      	mov	r4, ip
 800b678:	42a3      	cmp	r3, r4
 800b67a:	dd22      	ble.n	800b6c2 <_strtol_l.constprop.0+0xbe>
 800b67c:	2f00      	cmp	r7, #0
 800b67e:	db1d      	blt.n	800b6bc <_strtol_l.constprop.0+0xb8>
 800b680:	4581      	cmp	r9, r0
 800b682:	d31b      	bcc.n	800b6bc <_strtol_l.constprop.0+0xb8>
 800b684:	d101      	bne.n	800b68a <_strtol_l.constprop.0+0x86>
 800b686:	45a2      	cmp	sl, r4
 800b688:	db18      	blt.n	800b6bc <_strtol_l.constprop.0+0xb8>
 800b68a:	2701      	movs	r7, #1
 800b68c:	fb00 4003 	mla	r0, r0, r3, r4
 800b690:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b694:	e7ea      	b.n	800b66c <_strtol_l.constprop.0+0x68>
 800b696:	2c2b      	cmp	r4, #43	; 0x2b
 800b698:	bf04      	itt	eq
 800b69a:	782c      	ldrbeq	r4, [r5, #0]
 800b69c:	1c85      	addeq	r5, r0, #2
 800b69e:	e7cd      	b.n	800b63c <_strtol_l.constprop.0+0x38>
 800b6a0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b6a4:	f1bc 0f19 	cmp.w	ip, #25
 800b6a8:	d801      	bhi.n	800b6ae <_strtol_l.constprop.0+0xaa>
 800b6aa:	3c37      	subs	r4, #55	; 0x37
 800b6ac:	e7e4      	b.n	800b678 <_strtol_l.constprop.0+0x74>
 800b6ae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b6b2:	f1bc 0f19 	cmp.w	ip, #25
 800b6b6:	d804      	bhi.n	800b6c2 <_strtol_l.constprop.0+0xbe>
 800b6b8:	3c57      	subs	r4, #87	; 0x57
 800b6ba:	e7dd      	b.n	800b678 <_strtol_l.constprop.0+0x74>
 800b6bc:	f04f 37ff 	mov.w	r7, #4294967295
 800b6c0:	e7e6      	b.n	800b690 <_strtol_l.constprop.0+0x8c>
 800b6c2:	2f00      	cmp	r7, #0
 800b6c4:	da07      	bge.n	800b6d6 <_strtol_l.constprop.0+0xd2>
 800b6c6:	2322      	movs	r3, #34	; 0x22
 800b6c8:	4670      	mov	r0, lr
 800b6ca:	f8c8 3000 	str.w	r3, [r8]
 800b6ce:	2a00      	cmp	r2, #0
 800b6d0:	d0a4      	beq.n	800b61c <_strtol_l.constprop.0+0x18>
 800b6d2:	1e69      	subs	r1, r5, #1
 800b6d4:	e005      	b.n	800b6e2 <_strtol_l.constprop.0+0xde>
 800b6d6:	b106      	cbz	r6, 800b6da <_strtol_l.constprop.0+0xd6>
 800b6d8:	4240      	negs	r0, r0
 800b6da:	2a00      	cmp	r2, #0
 800b6dc:	d09e      	beq.n	800b61c <_strtol_l.constprop.0+0x18>
 800b6de:	2f00      	cmp	r7, #0
 800b6e0:	d1f7      	bne.n	800b6d2 <_strtol_l.constprop.0+0xce>
 800b6e2:	6011      	str	r1, [r2, #0]
 800b6e4:	e79a      	b.n	800b61c <_strtol_l.constprop.0+0x18>
 800b6e6:	2430      	movs	r4, #48	; 0x30
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d1b5      	bne.n	800b658 <_strtol_l.constprop.0+0x54>
 800b6ec:	2308      	movs	r3, #8
 800b6ee:	e7b3      	b.n	800b658 <_strtol_l.constprop.0+0x54>
 800b6f0:	2c30      	cmp	r4, #48	; 0x30
 800b6f2:	d0a9      	beq.n	800b648 <_strtol_l.constprop.0+0x44>
 800b6f4:	230a      	movs	r3, #10
 800b6f6:	e7af      	b.n	800b658 <_strtol_l.constprop.0+0x54>
 800b6f8:	0800e671 	.word	0x0800e671

0800b6fc <_strtol_r>:
 800b6fc:	f7ff bf82 	b.w	800b604 <_strtol_l.constprop.0>

0800b700 <quorem>:
 800b700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b704:	6903      	ldr	r3, [r0, #16]
 800b706:	690c      	ldr	r4, [r1, #16]
 800b708:	4607      	mov	r7, r0
 800b70a:	42a3      	cmp	r3, r4
 800b70c:	f2c0 8082 	blt.w	800b814 <quorem+0x114>
 800b710:	3c01      	subs	r4, #1
 800b712:	f100 0514 	add.w	r5, r0, #20
 800b716:	f101 0814 	add.w	r8, r1, #20
 800b71a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b71e:	9301      	str	r3, [sp, #4]
 800b720:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b724:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b728:	3301      	adds	r3, #1
 800b72a:	429a      	cmp	r2, r3
 800b72c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b730:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b734:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b738:	d331      	bcc.n	800b79e <quorem+0x9e>
 800b73a:	f04f 0e00 	mov.w	lr, #0
 800b73e:	4640      	mov	r0, r8
 800b740:	46ac      	mov	ip, r5
 800b742:	46f2      	mov	sl, lr
 800b744:	f850 2b04 	ldr.w	r2, [r0], #4
 800b748:	b293      	uxth	r3, r2
 800b74a:	fb06 e303 	mla	r3, r6, r3, lr
 800b74e:	0c12      	lsrs	r2, r2, #16
 800b750:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b754:	b29b      	uxth	r3, r3
 800b756:	fb06 e202 	mla	r2, r6, r2, lr
 800b75a:	ebaa 0303 	sub.w	r3, sl, r3
 800b75e:	f8dc a000 	ldr.w	sl, [ip]
 800b762:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b766:	fa1f fa8a 	uxth.w	sl, sl
 800b76a:	4453      	add	r3, sl
 800b76c:	f8dc a000 	ldr.w	sl, [ip]
 800b770:	b292      	uxth	r2, r2
 800b772:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b776:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b77a:	b29b      	uxth	r3, r3
 800b77c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b780:	4581      	cmp	r9, r0
 800b782:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b786:	f84c 3b04 	str.w	r3, [ip], #4
 800b78a:	d2db      	bcs.n	800b744 <quorem+0x44>
 800b78c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b790:	b92b      	cbnz	r3, 800b79e <quorem+0x9e>
 800b792:	9b01      	ldr	r3, [sp, #4]
 800b794:	3b04      	subs	r3, #4
 800b796:	429d      	cmp	r5, r3
 800b798:	461a      	mov	r2, r3
 800b79a:	d32f      	bcc.n	800b7fc <quorem+0xfc>
 800b79c:	613c      	str	r4, [r7, #16]
 800b79e:	4638      	mov	r0, r7
 800b7a0:	f001 fc90 	bl	800d0c4 <__mcmp>
 800b7a4:	2800      	cmp	r0, #0
 800b7a6:	db25      	blt.n	800b7f4 <quorem+0xf4>
 800b7a8:	4628      	mov	r0, r5
 800b7aa:	f04f 0c00 	mov.w	ip, #0
 800b7ae:	3601      	adds	r6, #1
 800b7b0:	f858 1b04 	ldr.w	r1, [r8], #4
 800b7b4:	f8d0 e000 	ldr.w	lr, [r0]
 800b7b8:	b28b      	uxth	r3, r1
 800b7ba:	ebac 0303 	sub.w	r3, ip, r3
 800b7be:	fa1f f28e 	uxth.w	r2, lr
 800b7c2:	4413      	add	r3, r2
 800b7c4:	0c0a      	lsrs	r2, r1, #16
 800b7c6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b7ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7d4:	45c1      	cmp	r9, r8
 800b7d6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b7da:	f840 3b04 	str.w	r3, [r0], #4
 800b7de:	d2e7      	bcs.n	800b7b0 <quorem+0xb0>
 800b7e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7e8:	b922      	cbnz	r2, 800b7f4 <quorem+0xf4>
 800b7ea:	3b04      	subs	r3, #4
 800b7ec:	429d      	cmp	r5, r3
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	d30a      	bcc.n	800b808 <quorem+0x108>
 800b7f2:	613c      	str	r4, [r7, #16]
 800b7f4:	4630      	mov	r0, r6
 800b7f6:	b003      	add	sp, #12
 800b7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7fc:	6812      	ldr	r2, [r2, #0]
 800b7fe:	3b04      	subs	r3, #4
 800b800:	2a00      	cmp	r2, #0
 800b802:	d1cb      	bne.n	800b79c <quorem+0x9c>
 800b804:	3c01      	subs	r4, #1
 800b806:	e7c6      	b.n	800b796 <quorem+0x96>
 800b808:	6812      	ldr	r2, [r2, #0]
 800b80a:	3b04      	subs	r3, #4
 800b80c:	2a00      	cmp	r2, #0
 800b80e:	d1f0      	bne.n	800b7f2 <quorem+0xf2>
 800b810:	3c01      	subs	r4, #1
 800b812:	e7eb      	b.n	800b7ec <quorem+0xec>
 800b814:	2000      	movs	r0, #0
 800b816:	e7ee      	b.n	800b7f6 <quorem+0xf6>

0800b818 <_dtoa_r>:
 800b818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b81c:	4616      	mov	r6, r2
 800b81e:	461f      	mov	r7, r3
 800b820:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b822:	b099      	sub	sp, #100	; 0x64
 800b824:	4605      	mov	r5, r0
 800b826:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b82a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b82e:	b974      	cbnz	r4, 800b84e <_dtoa_r+0x36>
 800b830:	2010      	movs	r0, #16
 800b832:	f001 f949 	bl	800cac8 <malloc>
 800b836:	4602      	mov	r2, r0
 800b838:	6268      	str	r0, [r5, #36]	; 0x24
 800b83a:	b920      	cbnz	r0, 800b846 <_dtoa_r+0x2e>
 800b83c:	21ea      	movs	r1, #234	; 0xea
 800b83e:	4ba8      	ldr	r3, [pc, #672]	; (800bae0 <_dtoa_r+0x2c8>)
 800b840:	48a8      	ldr	r0, [pc, #672]	; (800bae4 <_dtoa_r+0x2cc>)
 800b842:	f002 f8b3 	bl	800d9ac <__assert_func>
 800b846:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b84a:	6004      	str	r4, [r0, #0]
 800b84c:	60c4      	str	r4, [r0, #12]
 800b84e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b850:	6819      	ldr	r1, [r3, #0]
 800b852:	b151      	cbz	r1, 800b86a <_dtoa_r+0x52>
 800b854:	685a      	ldr	r2, [r3, #4]
 800b856:	2301      	movs	r3, #1
 800b858:	4093      	lsls	r3, r2
 800b85a:	604a      	str	r2, [r1, #4]
 800b85c:	608b      	str	r3, [r1, #8]
 800b85e:	4628      	mov	r0, r5
 800b860:	f001 f9a8 	bl	800cbb4 <_Bfree>
 800b864:	2200      	movs	r2, #0
 800b866:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b868:	601a      	str	r2, [r3, #0]
 800b86a:	1e3b      	subs	r3, r7, #0
 800b86c:	bfaf      	iteee	ge
 800b86e:	2300      	movge	r3, #0
 800b870:	2201      	movlt	r2, #1
 800b872:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b876:	9305      	strlt	r3, [sp, #20]
 800b878:	bfa8      	it	ge
 800b87a:	f8c8 3000 	strge.w	r3, [r8]
 800b87e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b882:	4b99      	ldr	r3, [pc, #612]	; (800bae8 <_dtoa_r+0x2d0>)
 800b884:	bfb8      	it	lt
 800b886:	f8c8 2000 	strlt.w	r2, [r8]
 800b88a:	ea33 0309 	bics.w	r3, r3, r9
 800b88e:	d119      	bne.n	800b8c4 <_dtoa_r+0xac>
 800b890:	f242 730f 	movw	r3, #9999	; 0x270f
 800b894:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b896:	6013      	str	r3, [r2, #0]
 800b898:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b89c:	4333      	orrs	r3, r6
 800b89e:	f000 857f 	beq.w	800c3a0 <_dtoa_r+0xb88>
 800b8a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b8a4:	b953      	cbnz	r3, 800b8bc <_dtoa_r+0xa4>
 800b8a6:	4b91      	ldr	r3, [pc, #580]	; (800baec <_dtoa_r+0x2d4>)
 800b8a8:	e022      	b.n	800b8f0 <_dtoa_r+0xd8>
 800b8aa:	4b91      	ldr	r3, [pc, #580]	; (800baf0 <_dtoa_r+0x2d8>)
 800b8ac:	9303      	str	r3, [sp, #12]
 800b8ae:	3308      	adds	r3, #8
 800b8b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b8b2:	6013      	str	r3, [r2, #0]
 800b8b4:	9803      	ldr	r0, [sp, #12]
 800b8b6:	b019      	add	sp, #100	; 0x64
 800b8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8bc:	4b8b      	ldr	r3, [pc, #556]	; (800baec <_dtoa_r+0x2d4>)
 800b8be:	9303      	str	r3, [sp, #12]
 800b8c0:	3303      	adds	r3, #3
 800b8c2:	e7f5      	b.n	800b8b0 <_dtoa_r+0x98>
 800b8c4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b8c8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b8cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	f7f5 f868 	bl	80009a8 <__aeabi_dcmpeq>
 800b8d8:	4680      	mov	r8, r0
 800b8da:	b158      	cbz	r0, 800b8f4 <_dtoa_r+0xdc>
 800b8dc:	2301      	movs	r3, #1
 800b8de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b8e0:	6013      	str	r3, [r2, #0]
 800b8e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	f000 8558 	beq.w	800c39a <_dtoa_r+0xb82>
 800b8ea:	4882      	ldr	r0, [pc, #520]	; (800baf4 <_dtoa_r+0x2dc>)
 800b8ec:	6018      	str	r0, [r3, #0]
 800b8ee:	1e43      	subs	r3, r0, #1
 800b8f0:	9303      	str	r3, [sp, #12]
 800b8f2:	e7df      	b.n	800b8b4 <_dtoa_r+0x9c>
 800b8f4:	ab16      	add	r3, sp, #88	; 0x58
 800b8f6:	9301      	str	r3, [sp, #4]
 800b8f8:	ab17      	add	r3, sp, #92	; 0x5c
 800b8fa:	9300      	str	r3, [sp, #0]
 800b8fc:	4628      	mov	r0, r5
 800b8fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b902:	f001 fd01 	bl	800d308 <__d2b>
 800b906:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b90a:	4683      	mov	fp, r0
 800b90c:	2c00      	cmp	r4, #0
 800b90e:	d07f      	beq.n	800ba10 <_dtoa_r+0x1f8>
 800b910:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b914:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b916:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b91a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b91e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b922:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b926:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b92a:	2200      	movs	r2, #0
 800b92c:	4b72      	ldr	r3, [pc, #456]	; (800baf8 <_dtoa_r+0x2e0>)
 800b92e:	f7f4 fc1b 	bl	8000168 <__aeabi_dsub>
 800b932:	a365      	add	r3, pc, #404	; (adr r3, 800bac8 <_dtoa_r+0x2b0>)
 800b934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b938:	f7f4 fdce 	bl	80004d8 <__aeabi_dmul>
 800b93c:	a364      	add	r3, pc, #400	; (adr r3, 800bad0 <_dtoa_r+0x2b8>)
 800b93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b942:	f7f4 fc13 	bl	800016c <__adddf3>
 800b946:	4606      	mov	r6, r0
 800b948:	4620      	mov	r0, r4
 800b94a:	460f      	mov	r7, r1
 800b94c:	f7f4 fd5a 	bl	8000404 <__aeabi_i2d>
 800b950:	a361      	add	r3, pc, #388	; (adr r3, 800bad8 <_dtoa_r+0x2c0>)
 800b952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b956:	f7f4 fdbf 	bl	80004d8 <__aeabi_dmul>
 800b95a:	4602      	mov	r2, r0
 800b95c:	460b      	mov	r3, r1
 800b95e:	4630      	mov	r0, r6
 800b960:	4639      	mov	r1, r7
 800b962:	f7f4 fc03 	bl	800016c <__adddf3>
 800b966:	4606      	mov	r6, r0
 800b968:	460f      	mov	r7, r1
 800b96a:	f7f5 f865 	bl	8000a38 <__aeabi_d2iz>
 800b96e:	2200      	movs	r2, #0
 800b970:	4682      	mov	sl, r0
 800b972:	2300      	movs	r3, #0
 800b974:	4630      	mov	r0, r6
 800b976:	4639      	mov	r1, r7
 800b978:	f7f5 f820 	bl	80009bc <__aeabi_dcmplt>
 800b97c:	b148      	cbz	r0, 800b992 <_dtoa_r+0x17a>
 800b97e:	4650      	mov	r0, sl
 800b980:	f7f4 fd40 	bl	8000404 <__aeabi_i2d>
 800b984:	4632      	mov	r2, r6
 800b986:	463b      	mov	r3, r7
 800b988:	f7f5 f80e 	bl	80009a8 <__aeabi_dcmpeq>
 800b98c:	b908      	cbnz	r0, 800b992 <_dtoa_r+0x17a>
 800b98e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b992:	f1ba 0f16 	cmp.w	sl, #22
 800b996:	d858      	bhi.n	800ba4a <_dtoa_r+0x232>
 800b998:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b99c:	4b57      	ldr	r3, [pc, #348]	; (800bafc <_dtoa_r+0x2e4>)
 800b99e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a6:	f7f5 f809 	bl	80009bc <__aeabi_dcmplt>
 800b9aa:	2800      	cmp	r0, #0
 800b9ac:	d04f      	beq.n	800ba4e <_dtoa_r+0x236>
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b9b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b9b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b9b8:	1b1c      	subs	r4, r3, r4
 800b9ba:	1e63      	subs	r3, r4, #1
 800b9bc:	9309      	str	r3, [sp, #36]	; 0x24
 800b9be:	bf49      	itett	mi
 800b9c0:	f1c4 0301 	rsbmi	r3, r4, #1
 800b9c4:	2300      	movpl	r3, #0
 800b9c6:	9306      	strmi	r3, [sp, #24]
 800b9c8:	2300      	movmi	r3, #0
 800b9ca:	bf54      	ite	pl
 800b9cc:	9306      	strpl	r3, [sp, #24]
 800b9ce:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b9d0:	f1ba 0f00 	cmp.w	sl, #0
 800b9d4:	db3d      	blt.n	800ba52 <_dtoa_r+0x23a>
 800b9d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9d8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b9dc:	4453      	add	r3, sl
 800b9de:	9309      	str	r3, [sp, #36]	; 0x24
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	930a      	str	r3, [sp, #40]	; 0x28
 800b9e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b9e6:	2b09      	cmp	r3, #9
 800b9e8:	f200 808c 	bhi.w	800bb04 <_dtoa_r+0x2ec>
 800b9ec:	2b05      	cmp	r3, #5
 800b9ee:	bfc4      	itt	gt
 800b9f0:	3b04      	subgt	r3, #4
 800b9f2:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b9f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b9f6:	bfc8      	it	gt
 800b9f8:	2400      	movgt	r4, #0
 800b9fa:	f1a3 0302 	sub.w	r3, r3, #2
 800b9fe:	bfd8      	it	le
 800ba00:	2401      	movle	r4, #1
 800ba02:	2b03      	cmp	r3, #3
 800ba04:	f200 808a 	bhi.w	800bb1c <_dtoa_r+0x304>
 800ba08:	e8df f003 	tbb	[pc, r3]
 800ba0c:	5b4d4f2d 	.word	0x5b4d4f2d
 800ba10:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800ba14:	441c      	add	r4, r3
 800ba16:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800ba1a:	2b20      	cmp	r3, #32
 800ba1c:	bfc3      	ittte	gt
 800ba1e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ba22:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800ba26:	fa09 f303 	lslgt.w	r3, r9, r3
 800ba2a:	f1c3 0320 	rsble	r3, r3, #32
 800ba2e:	bfc6      	itte	gt
 800ba30:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ba34:	4318      	orrgt	r0, r3
 800ba36:	fa06 f003 	lslle.w	r0, r6, r3
 800ba3a:	f7f4 fcd3 	bl	80003e4 <__aeabi_ui2d>
 800ba3e:	2301      	movs	r3, #1
 800ba40:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ba44:	3c01      	subs	r4, #1
 800ba46:	9313      	str	r3, [sp, #76]	; 0x4c
 800ba48:	e76f      	b.n	800b92a <_dtoa_r+0x112>
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	e7b2      	b.n	800b9b4 <_dtoa_r+0x19c>
 800ba4e:	900f      	str	r0, [sp, #60]	; 0x3c
 800ba50:	e7b1      	b.n	800b9b6 <_dtoa_r+0x19e>
 800ba52:	9b06      	ldr	r3, [sp, #24]
 800ba54:	eba3 030a 	sub.w	r3, r3, sl
 800ba58:	9306      	str	r3, [sp, #24]
 800ba5a:	f1ca 0300 	rsb	r3, sl, #0
 800ba5e:	930a      	str	r3, [sp, #40]	; 0x28
 800ba60:	2300      	movs	r3, #0
 800ba62:	930e      	str	r3, [sp, #56]	; 0x38
 800ba64:	e7be      	b.n	800b9e4 <_dtoa_r+0x1cc>
 800ba66:	2300      	movs	r3, #0
 800ba68:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	dc58      	bgt.n	800bb22 <_dtoa_r+0x30a>
 800ba70:	f04f 0901 	mov.w	r9, #1
 800ba74:	464b      	mov	r3, r9
 800ba76:	f8cd 9020 	str.w	r9, [sp, #32]
 800ba7a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800ba7e:	2200      	movs	r2, #0
 800ba80:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ba82:	6042      	str	r2, [r0, #4]
 800ba84:	2204      	movs	r2, #4
 800ba86:	f102 0614 	add.w	r6, r2, #20
 800ba8a:	429e      	cmp	r6, r3
 800ba8c:	6841      	ldr	r1, [r0, #4]
 800ba8e:	d94e      	bls.n	800bb2e <_dtoa_r+0x316>
 800ba90:	4628      	mov	r0, r5
 800ba92:	f001 f84f 	bl	800cb34 <_Balloc>
 800ba96:	9003      	str	r0, [sp, #12]
 800ba98:	2800      	cmp	r0, #0
 800ba9a:	d14c      	bne.n	800bb36 <_dtoa_r+0x31e>
 800ba9c:	4602      	mov	r2, r0
 800ba9e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800baa2:	4b17      	ldr	r3, [pc, #92]	; (800bb00 <_dtoa_r+0x2e8>)
 800baa4:	e6cc      	b.n	800b840 <_dtoa_r+0x28>
 800baa6:	2301      	movs	r3, #1
 800baa8:	e7de      	b.n	800ba68 <_dtoa_r+0x250>
 800baaa:	2300      	movs	r3, #0
 800baac:	930b      	str	r3, [sp, #44]	; 0x2c
 800baae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bab0:	eb0a 0903 	add.w	r9, sl, r3
 800bab4:	f109 0301 	add.w	r3, r9, #1
 800bab8:	2b01      	cmp	r3, #1
 800baba:	9308      	str	r3, [sp, #32]
 800babc:	bfb8      	it	lt
 800babe:	2301      	movlt	r3, #1
 800bac0:	e7dd      	b.n	800ba7e <_dtoa_r+0x266>
 800bac2:	2301      	movs	r3, #1
 800bac4:	e7f2      	b.n	800baac <_dtoa_r+0x294>
 800bac6:	bf00      	nop
 800bac8:	636f4361 	.word	0x636f4361
 800bacc:	3fd287a7 	.word	0x3fd287a7
 800bad0:	8b60c8b3 	.word	0x8b60c8b3
 800bad4:	3fc68a28 	.word	0x3fc68a28
 800bad8:	509f79fb 	.word	0x509f79fb
 800badc:	3fd34413 	.word	0x3fd34413
 800bae0:	0800e77e 	.word	0x0800e77e
 800bae4:	0800e795 	.word	0x0800e795
 800bae8:	7ff00000 	.word	0x7ff00000
 800baec:	0800e77a 	.word	0x0800e77a
 800baf0:	0800e771 	.word	0x0800e771
 800baf4:	0800e5f1 	.word	0x0800e5f1
 800baf8:	3ff80000 	.word	0x3ff80000
 800bafc:	0800e900 	.word	0x0800e900
 800bb00:	0800e7f0 	.word	0x0800e7f0
 800bb04:	2401      	movs	r4, #1
 800bb06:	2300      	movs	r3, #0
 800bb08:	940b      	str	r4, [sp, #44]	; 0x2c
 800bb0a:	9322      	str	r3, [sp, #136]	; 0x88
 800bb0c:	f04f 39ff 	mov.w	r9, #4294967295
 800bb10:	2200      	movs	r2, #0
 800bb12:	2312      	movs	r3, #18
 800bb14:	f8cd 9020 	str.w	r9, [sp, #32]
 800bb18:	9223      	str	r2, [sp, #140]	; 0x8c
 800bb1a:	e7b0      	b.n	800ba7e <_dtoa_r+0x266>
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb20:	e7f4      	b.n	800bb0c <_dtoa_r+0x2f4>
 800bb22:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800bb26:	464b      	mov	r3, r9
 800bb28:	f8cd 9020 	str.w	r9, [sp, #32]
 800bb2c:	e7a7      	b.n	800ba7e <_dtoa_r+0x266>
 800bb2e:	3101      	adds	r1, #1
 800bb30:	6041      	str	r1, [r0, #4]
 800bb32:	0052      	lsls	r2, r2, #1
 800bb34:	e7a7      	b.n	800ba86 <_dtoa_r+0x26e>
 800bb36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bb38:	9a03      	ldr	r2, [sp, #12]
 800bb3a:	601a      	str	r2, [r3, #0]
 800bb3c:	9b08      	ldr	r3, [sp, #32]
 800bb3e:	2b0e      	cmp	r3, #14
 800bb40:	f200 80a8 	bhi.w	800bc94 <_dtoa_r+0x47c>
 800bb44:	2c00      	cmp	r4, #0
 800bb46:	f000 80a5 	beq.w	800bc94 <_dtoa_r+0x47c>
 800bb4a:	f1ba 0f00 	cmp.w	sl, #0
 800bb4e:	dd34      	ble.n	800bbba <_dtoa_r+0x3a2>
 800bb50:	4a9a      	ldr	r2, [pc, #616]	; (800bdbc <_dtoa_r+0x5a4>)
 800bb52:	f00a 030f 	and.w	r3, sl, #15
 800bb56:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bb5a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800bb5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bb62:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bb66:	ea4f 142a 	mov.w	r4, sl, asr #4
 800bb6a:	d016      	beq.n	800bb9a <_dtoa_r+0x382>
 800bb6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bb70:	4b93      	ldr	r3, [pc, #588]	; (800bdc0 <_dtoa_r+0x5a8>)
 800bb72:	2703      	movs	r7, #3
 800bb74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb78:	f7f4 fdd8 	bl	800072c <__aeabi_ddiv>
 800bb7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb80:	f004 040f 	and.w	r4, r4, #15
 800bb84:	4e8e      	ldr	r6, [pc, #568]	; (800bdc0 <_dtoa_r+0x5a8>)
 800bb86:	b954      	cbnz	r4, 800bb9e <_dtoa_r+0x386>
 800bb88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bb8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb90:	f7f4 fdcc 	bl	800072c <__aeabi_ddiv>
 800bb94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb98:	e029      	b.n	800bbee <_dtoa_r+0x3d6>
 800bb9a:	2702      	movs	r7, #2
 800bb9c:	e7f2      	b.n	800bb84 <_dtoa_r+0x36c>
 800bb9e:	07e1      	lsls	r1, r4, #31
 800bba0:	d508      	bpl.n	800bbb4 <_dtoa_r+0x39c>
 800bba2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bba6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bbaa:	f7f4 fc95 	bl	80004d8 <__aeabi_dmul>
 800bbae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bbb2:	3701      	adds	r7, #1
 800bbb4:	1064      	asrs	r4, r4, #1
 800bbb6:	3608      	adds	r6, #8
 800bbb8:	e7e5      	b.n	800bb86 <_dtoa_r+0x36e>
 800bbba:	f000 80a5 	beq.w	800bd08 <_dtoa_r+0x4f0>
 800bbbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bbc2:	f1ca 0400 	rsb	r4, sl, #0
 800bbc6:	4b7d      	ldr	r3, [pc, #500]	; (800bdbc <_dtoa_r+0x5a4>)
 800bbc8:	f004 020f 	and.w	r2, r4, #15
 800bbcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd4:	f7f4 fc80 	bl	80004d8 <__aeabi_dmul>
 800bbd8:	2702      	movs	r7, #2
 800bbda:	2300      	movs	r3, #0
 800bbdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bbe0:	4e77      	ldr	r6, [pc, #476]	; (800bdc0 <_dtoa_r+0x5a8>)
 800bbe2:	1124      	asrs	r4, r4, #4
 800bbe4:	2c00      	cmp	r4, #0
 800bbe6:	f040 8084 	bne.w	800bcf2 <_dtoa_r+0x4da>
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d1d2      	bne.n	800bb94 <_dtoa_r+0x37c>
 800bbee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	f000 808b 	beq.w	800bd0c <_dtoa_r+0x4f4>
 800bbf6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bbfa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bbfe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bc02:	2200      	movs	r2, #0
 800bc04:	4b6f      	ldr	r3, [pc, #444]	; (800bdc4 <_dtoa_r+0x5ac>)
 800bc06:	f7f4 fed9 	bl	80009bc <__aeabi_dcmplt>
 800bc0a:	2800      	cmp	r0, #0
 800bc0c:	d07e      	beq.n	800bd0c <_dtoa_r+0x4f4>
 800bc0e:	9b08      	ldr	r3, [sp, #32]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d07b      	beq.n	800bd0c <_dtoa_r+0x4f4>
 800bc14:	f1b9 0f00 	cmp.w	r9, #0
 800bc18:	dd38      	ble.n	800bc8c <_dtoa_r+0x474>
 800bc1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bc1e:	2200      	movs	r2, #0
 800bc20:	4b69      	ldr	r3, [pc, #420]	; (800bdc8 <_dtoa_r+0x5b0>)
 800bc22:	f7f4 fc59 	bl	80004d8 <__aeabi_dmul>
 800bc26:	464c      	mov	r4, r9
 800bc28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc2c:	f10a 38ff 	add.w	r8, sl, #4294967295
 800bc30:	3701      	adds	r7, #1
 800bc32:	4638      	mov	r0, r7
 800bc34:	f7f4 fbe6 	bl	8000404 <__aeabi_i2d>
 800bc38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc3c:	f7f4 fc4c 	bl	80004d8 <__aeabi_dmul>
 800bc40:	2200      	movs	r2, #0
 800bc42:	4b62      	ldr	r3, [pc, #392]	; (800bdcc <_dtoa_r+0x5b4>)
 800bc44:	f7f4 fa92 	bl	800016c <__adddf3>
 800bc48:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bc4c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bc50:	9611      	str	r6, [sp, #68]	; 0x44
 800bc52:	2c00      	cmp	r4, #0
 800bc54:	d15d      	bne.n	800bd12 <_dtoa_r+0x4fa>
 800bc56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	4b5c      	ldr	r3, [pc, #368]	; (800bdd0 <_dtoa_r+0x5b8>)
 800bc5e:	f7f4 fa83 	bl	8000168 <__aeabi_dsub>
 800bc62:	4602      	mov	r2, r0
 800bc64:	460b      	mov	r3, r1
 800bc66:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bc6a:	4633      	mov	r3, r6
 800bc6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bc6e:	f7f4 fec3 	bl	80009f8 <__aeabi_dcmpgt>
 800bc72:	2800      	cmp	r0, #0
 800bc74:	f040 829c 	bne.w	800c1b0 <_dtoa_r+0x998>
 800bc78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bc7e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bc82:	f7f4 fe9b 	bl	80009bc <__aeabi_dcmplt>
 800bc86:	2800      	cmp	r0, #0
 800bc88:	f040 8290 	bne.w	800c1ac <_dtoa_r+0x994>
 800bc8c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800bc90:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bc94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	f2c0 8152 	blt.w	800bf40 <_dtoa_r+0x728>
 800bc9c:	f1ba 0f0e 	cmp.w	sl, #14
 800bca0:	f300 814e 	bgt.w	800bf40 <_dtoa_r+0x728>
 800bca4:	4b45      	ldr	r3, [pc, #276]	; (800bdbc <_dtoa_r+0x5a4>)
 800bca6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bcaa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bcae:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800bcb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	f280 80db 	bge.w	800be70 <_dtoa_r+0x658>
 800bcba:	9b08      	ldr	r3, [sp, #32]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	f300 80d7 	bgt.w	800be70 <_dtoa_r+0x658>
 800bcc2:	f040 8272 	bne.w	800c1aa <_dtoa_r+0x992>
 800bcc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bcca:	2200      	movs	r2, #0
 800bccc:	4b40      	ldr	r3, [pc, #256]	; (800bdd0 <_dtoa_r+0x5b8>)
 800bcce:	f7f4 fc03 	bl	80004d8 <__aeabi_dmul>
 800bcd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcd6:	f7f4 fe85 	bl	80009e4 <__aeabi_dcmpge>
 800bcda:	9c08      	ldr	r4, [sp, #32]
 800bcdc:	4626      	mov	r6, r4
 800bcde:	2800      	cmp	r0, #0
 800bce0:	f040 8248 	bne.w	800c174 <_dtoa_r+0x95c>
 800bce4:	2331      	movs	r3, #49	; 0x31
 800bce6:	9f03      	ldr	r7, [sp, #12]
 800bce8:	f10a 0a01 	add.w	sl, sl, #1
 800bcec:	f807 3b01 	strb.w	r3, [r7], #1
 800bcf0:	e244      	b.n	800c17c <_dtoa_r+0x964>
 800bcf2:	07e2      	lsls	r2, r4, #31
 800bcf4:	d505      	bpl.n	800bd02 <_dtoa_r+0x4ea>
 800bcf6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bcfa:	f7f4 fbed 	bl	80004d8 <__aeabi_dmul>
 800bcfe:	2301      	movs	r3, #1
 800bd00:	3701      	adds	r7, #1
 800bd02:	1064      	asrs	r4, r4, #1
 800bd04:	3608      	adds	r6, #8
 800bd06:	e76d      	b.n	800bbe4 <_dtoa_r+0x3cc>
 800bd08:	2702      	movs	r7, #2
 800bd0a:	e770      	b.n	800bbee <_dtoa_r+0x3d6>
 800bd0c:	46d0      	mov	r8, sl
 800bd0e:	9c08      	ldr	r4, [sp, #32]
 800bd10:	e78f      	b.n	800bc32 <_dtoa_r+0x41a>
 800bd12:	9903      	ldr	r1, [sp, #12]
 800bd14:	4b29      	ldr	r3, [pc, #164]	; (800bdbc <_dtoa_r+0x5a4>)
 800bd16:	4421      	add	r1, r4
 800bd18:	9112      	str	r1, [sp, #72]	; 0x48
 800bd1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bd1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bd20:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800bd24:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bd28:	2900      	cmp	r1, #0
 800bd2a:	d055      	beq.n	800bdd8 <_dtoa_r+0x5c0>
 800bd2c:	2000      	movs	r0, #0
 800bd2e:	4929      	ldr	r1, [pc, #164]	; (800bdd4 <_dtoa_r+0x5bc>)
 800bd30:	f7f4 fcfc 	bl	800072c <__aeabi_ddiv>
 800bd34:	463b      	mov	r3, r7
 800bd36:	4632      	mov	r2, r6
 800bd38:	f7f4 fa16 	bl	8000168 <__aeabi_dsub>
 800bd3c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bd40:	9f03      	ldr	r7, [sp, #12]
 800bd42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd46:	f7f4 fe77 	bl	8000a38 <__aeabi_d2iz>
 800bd4a:	4604      	mov	r4, r0
 800bd4c:	f7f4 fb5a 	bl	8000404 <__aeabi_i2d>
 800bd50:	4602      	mov	r2, r0
 800bd52:	460b      	mov	r3, r1
 800bd54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd58:	f7f4 fa06 	bl	8000168 <__aeabi_dsub>
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	460b      	mov	r3, r1
 800bd60:	3430      	adds	r4, #48	; 0x30
 800bd62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bd66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bd6a:	f807 4b01 	strb.w	r4, [r7], #1
 800bd6e:	f7f4 fe25 	bl	80009bc <__aeabi_dcmplt>
 800bd72:	2800      	cmp	r0, #0
 800bd74:	d174      	bne.n	800be60 <_dtoa_r+0x648>
 800bd76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd7a:	2000      	movs	r0, #0
 800bd7c:	4911      	ldr	r1, [pc, #68]	; (800bdc4 <_dtoa_r+0x5ac>)
 800bd7e:	f7f4 f9f3 	bl	8000168 <__aeabi_dsub>
 800bd82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bd86:	f7f4 fe19 	bl	80009bc <__aeabi_dcmplt>
 800bd8a:	2800      	cmp	r0, #0
 800bd8c:	f040 80b7 	bne.w	800befe <_dtoa_r+0x6e6>
 800bd90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bd92:	429f      	cmp	r7, r3
 800bd94:	f43f af7a 	beq.w	800bc8c <_dtoa_r+0x474>
 800bd98:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	4b0a      	ldr	r3, [pc, #40]	; (800bdc8 <_dtoa_r+0x5b0>)
 800bda0:	f7f4 fb9a 	bl	80004d8 <__aeabi_dmul>
 800bda4:	2200      	movs	r2, #0
 800bda6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bdaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bdae:	4b06      	ldr	r3, [pc, #24]	; (800bdc8 <_dtoa_r+0x5b0>)
 800bdb0:	f7f4 fb92 	bl	80004d8 <__aeabi_dmul>
 800bdb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bdb8:	e7c3      	b.n	800bd42 <_dtoa_r+0x52a>
 800bdba:	bf00      	nop
 800bdbc:	0800e900 	.word	0x0800e900
 800bdc0:	0800e8d8 	.word	0x0800e8d8
 800bdc4:	3ff00000 	.word	0x3ff00000
 800bdc8:	40240000 	.word	0x40240000
 800bdcc:	401c0000 	.word	0x401c0000
 800bdd0:	40140000 	.word	0x40140000
 800bdd4:	3fe00000 	.word	0x3fe00000
 800bdd8:	4630      	mov	r0, r6
 800bdda:	4639      	mov	r1, r7
 800bddc:	f7f4 fb7c 	bl	80004d8 <__aeabi_dmul>
 800bde0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bde2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bde6:	9c03      	ldr	r4, [sp, #12]
 800bde8:	9314      	str	r3, [sp, #80]	; 0x50
 800bdea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bdee:	f7f4 fe23 	bl	8000a38 <__aeabi_d2iz>
 800bdf2:	9015      	str	r0, [sp, #84]	; 0x54
 800bdf4:	f7f4 fb06 	bl	8000404 <__aeabi_i2d>
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	460b      	mov	r3, r1
 800bdfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be00:	f7f4 f9b2 	bl	8000168 <__aeabi_dsub>
 800be04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be06:	4606      	mov	r6, r0
 800be08:	3330      	adds	r3, #48	; 0x30
 800be0a:	f804 3b01 	strb.w	r3, [r4], #1
 800be0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800be10:	460f      	mov	r7, r1
 800be12:	429c      	cmp	r4, r3
 800be14:	f04f 0200 	mov.w	r2, #0
 800be18:	d124      	bne.n	800be64 <_dtoa_r+0x64c>
 800be1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800be1e:	4bb0      	ldr	r3, [pc, #704]	; (800c0e0 <_dtoa_r+0x8c8>)
 800be20:	f7f4 f9a4 	bl	800016c <__adddf3>
 800be24:	4602      	mov	r2, r0
 800be26:	460b      	mov	r3, r1
 800be28:	4630      	mov	r0, r6
 800be2a:	4639      	mov	r1, r7
 800be2c:	f7f4 fde4 	bl	80009f8 <__aeabi_dcmpgt>
 800be30:	2800      	cmp	r0, #0
 800be32:	d163      	bne.n	800befc <_dtoa_r+0x6e4>
 800be34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800be38:	2000      	movs	r0, #0
 800be3a:	49a9      	ldr	r1, [pc, #676]	; (800c0e0 <_dtoa_r+0x8c8>)
 800be3c:	f7f4 f994 	bl	8000168 <__aeabi_dsub>
 800be40:	4602      	mov	r2, r0
 800be42:	460b      	mov	r3, r1
 800be44:	4630      	mov	r0, r6
 800be46:	4639      	mov	r1, r7
 800be48:	f7f4 fdb8 	bl	80009bc <__aeabi_dcmplt>
 800be4c:	2800      	cmp	r0, #0
 800be4e:	f43f af1d 	beq.w	800bc8c <_dtoa_r+0x474>
 800be52:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800be54:	1e7b      	subs	r3, r7, #1
 800be56:	9314      	str	r3, [sp, #80]	; 0x50
 800be58:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800be5c:	2b30      	cmp	r3, #48	; 0x30
 800be5e:	d0f8      	beq.n	800be52 <_dtoa_r+0x63a>
 800be60:	46c2      	mov	sl, r8
 800be62:	e03b      	b.n	800bedc <_dtoa_r+0x6c4>
 800be64:	4b9f      	ldr	r3, [pc, #636]	; (800c0e4 <_dtoa_r+0x8cc>)
 800be66:	f7f4 fb37 	bl	80004d8 <__aeabi_dmul>
 800be6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be6e:	e7bc      	b.n	800bdea <_dtoa_r+0x5d2>
 800be70:	9f03      	ldr	r7, [sp, #12]
 800be72:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800be76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be7a:	4640      	mov	r0, r8
 800be7c:	4649      	mov	r1, r9
 800be7e:	f7f4 fc55 	bl	800072c <__aeabi_ddiv>
 800be82:	f7f4 fdd9 	bl	8000a38 <__aeabi_d2iz>
 800be86:	4604      	mov	r4, r0
 800be88:	f7f4 fabc 	bl	8000404 <__aeabi_i2d>
 800be8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be90:	f7f4 fb22 	bl	80004d8 <__aeabi_dmul>
 800be94:	4602      	mov	r2, r0
 800be96:	460b      	mov	r3, r1
 800be98:	4640      	mov	r0, r8
 800be9a:	4649      	mov	r1, r9
 800be9c:	f7f4 f964 	bl	8000168 <__aeabi_dsub>
 800bea0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800bea4:	f807 6b01 	strb.w	r6, [r7], #1
 800bea8:	9e03      	ldr	r6, [sp, #12]
 800beaa:	f8dd c020 	ldr.w	ip, [sp, #32]
 800beae:	1bbe      	subs	r6, r7, r6
 800beb0:	45b4      	cmp	ip, r6
 800beb2:	4602      	mov	r2, r0
 800beb4:	460b      	mov	r3, r1
 800beb6:	d136      	bne.n	800bf26 <_dtoa_r+0x70e>
 800beb8:	f7f4 f958 	bl	800016c <__adddf3>
 800bebc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bec0:	4680      	mov	r8, r0
 800bec2:	4689      	mov	r9, r1
 800bec4:	f7f4 fd98 	bl	80009f8 <__aeabi_dcmpgt>
 800bec8:	bb58      	cbnz	r0, 800bf22 <_dtoa_r+0x70a>
 800beca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bece:	4640      	mov	r0, r8
 800bed0:	4649      	mov	r1, r9
 800bed2:	f7f4 fd69 	bl	80009a8 <__aeabi_dcmpeq>
 800bed6:	b108      	cbz	r0, 800bedc <_dtoa_r+0x6c4>
 800bed8:	07e1      	lsls	r1, r4, #31
 800beda:	d422      	bmi.n	800bf22 <_dtoa_r+0x70a>
 800bedc:	4628      	mov	r0, r5
 800bede:	4659      	mov	r1, fp
 800bee0:	f000 fe68 	bl	800cbb4 <_Bfree>
 800bee4:	2300      	movs	r3, #0
 800bee6:	703b      	strb	r3, [r7, #0]
 800bee8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800beea:	f10a 0001 	add.w	r0, sl, #1
 800beee:	6018      	str	r0, [r3, #0]
 800bef0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	f43f acde 	beq.w	800b8b4 <_dtoa_r+0x9c>
 800bef8:	601f      	str	r7, [r3, #0]
 800befa:	e4db      	b.n	800b8b4 <_dtoa_r+0x9c>
 800befc:	4627      	mov	r7, r4
 800befe:	463b      	mov	r3, r7
 800bf00:	461f      	mov	r7, r3
 800bf02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf06:	2a39      	cmp	r2, #57	; 0x39
 800bf08:	d107      	bne.n	800bf1a <_dtoa_r+0x702>
 800bf0a:	9a03      	ldr	r2, [sp, #12]
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d1f7      	bne.n	800bf00 <_dtoa_r+0x6e8>
 800bf10:	2230      	movs	r2, #48	; 0x30
 800bf12:	9903      	ldr	r1, [sp, #12]
 800bf14:	f108 0801 	add.w	r8, r8, #1
 800bf18:	700a      	strb	r2, [r1, #0]
 800bf1a:	781a      	ldrb	r2, [r3, #0]
 800bf1c:	3201      	adds	r2, #1
 800bf1e:	701a      	strb	r2, [r3, #0]
 800bf20:	e79e      	b.n	800be60 <_dtoa_r+0x648>
 800bf22:	46d0      	mov	r8, sl
 800bf24:	e7eb      	b.n	800befe <_dtoa_r+0x6e6>
 800bf26:	2200      	movs	r2, #0
 800bf28:	4b6e      	ldr	r3, [pc, #440]	; (800c0e4 <_dtoa_r+0x8cc>)
 800bf2a:	f7f4 fad5 	bl	80004d8 <__aeabi_dmul>
 800bf2e:	2200      	movs	r2, #0
 800bf30:	2300      	movs	r3, #0
 800bf32:	4680      	mov	r8, r0
 800bf34:	4689      	mov	r9, r1
 800bf36:	f7f4 fd37 	bl	80009a8 <__aeabi_dcmpeq>
 800bf3a:	2800      	cmp	r0, #0
 800bf3c:	d09b      	beq.n	800be76 <_dtoa_r+0x65e>
 800bf3e:	e7cd      	b.n	800bedc <_dtoa_r+0x6c4>
 800bf40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bf42:	2a00      	cmp	r2, #0
 800bf44:	f000 80d0 	beq.w	800c0e8 <_dtoa_r+0x8d0>
 800bf48:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bf4a:	2a01      	cmp	r2, #1
 800bf4c:	f300 80ae 	bgt.w	800c0ac <_dtoa_r+0x894>
 800bf50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bf52:	2a00      	cmp	r2, #0
 800bf54:	f000 80a6 	beq.w	800c0a4 <_dtoa_r+0x88c>
 800bf58:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bf5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bf5e:	9f06      	ldr	r7, [sp, #24]
 800bf60:	9a06      	ldr	r2, [sp, #24]
 800bf62:	2101      	movs	r1, #1
 800bf64:	441a      	add	r2, r3
 800bf66:	9206      	str	r2, [sp, #24]
 800bf68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf6a:	4628      	mov	r0, r5
 800bf6c:	441a      	add	r2, r3
 800bf6e:	9209      	str	r2, [sp, #36]	; 0x24
 800bf70:	f000 ff20 	bl	800cdb4 <__i2b>
 800bf74:	4606      	mov	r6, r0
 800bf76:	2f00      	cmp	r7, #0
 800bf78:	dd0c      	ble.n	800bf94 <_dtoa_r+0x77c>
 800bf7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	dd09      	ble.n	800bf94 <_dtoa_r+0x77c>
 800bf80:	42bb      	cmp	r3, r7
 800bf82:	bfa8      	it	ge
 800bf84:	463b      	movge	r3, r7
 800bf86:	9a06      	ldr	r2, [sp, #24]
 800bf88:	1aff      	subs	r7, r7, r3
 800bf8a:	1ad2      	subs	r2, r2, r3
 800bf8c:	9206      	str	r2, [sp, #24]
 800bf8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf90:	1ad3      	subs	r3, r2, r3
 800bf92:	9309      	str	r3, [sp, #36]	; 0x24
 800bf94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf96:	b1f3      	cbz	r3, 800bfd6 <_dtoa_r+0x7be>
 800bf98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	f000 80a8 	beq.w	800c0f0 <_dtoa_r+0x8d8>
 800bfa0:	2c00      	cmp	r4, #0
 800bfa2:	dd10      	ble.n	800bfc6 <_dtoa_r+0x7ae>
 800bfa4:	4631      	mov	r1, r6
 800bfa6:	4622      	mov	r2, r4
 800bfa8:	4628      	mov	r0, r5
 800bfaa:	f000 ffc1 	bl	800cf30 <__pow5mult>
 800bfae:	465a      	mov	r2, fp
 800bfb0:	4601      	mov	r1, r0
 800bfb2:	4606      	mov	r6, r0
 800bfb4:	4628      	mov	r0, r5
 800bfb6:	f000 ff13 	bl	800cde0 <__multiply>
 800bfba:	4680      	mov	r8, r0
 800bfbc:	4659      	mov	r1, fp
 800bfbe:	4628      	mov	r0, r5
 800bfc0:	f000 fdf8 	bl	800cbb4 <_Bfree>
 800bfc4:	46c3      	mov	fp, r8
 800bfc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfc8:	1b1a      	subs	r2, r3, r4
 800bfca:	d004      	beq.n	800bfd6 <_dtoa_r+0x7be>
 800bfcc:	4659      	mov	r1, fp
 800bfce:	4628      	mov	r0, r5
 800bfd0:	f000 ffae 	bl	800cf30 <__pow5mult>
 800bfd4:	4683      	mov	fp, r0
 800bfd6:	2101      	movs	r1, #1
 800bfd8:	4628      	mov	r0, r5
 800bfda:	f000 feeb 	bl	800cdb4 <__i2b>
 800bfde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bfe0:	4604      	mov	r4, r0
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	f340 8086 	ble.w	800c0f4 <_dtoa_r+0x8dc>
 800bfe8:	461a      	mov	r2, r3
 800bfea:	4601      	mov	r1, r0
 800bfec:	4628      	mov	r0, r5
 800bfee:	f000 ff9f 	bl	800cf30 <__pow5mult>
 800bff2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bff4:	4604      	mov	r4, r0
 800bff6:	2b01      	cmp	r3, #1
 800bff8:	dd7f      	ble.n	800c0fa <_dtoa_r+0x8e2>
 800bffa:	f04f 0800 	mov.w	r8, #0
 800bffe:	6923      	ldr	r3, [r4, #16]
 800c000:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c004:	6918      	ldr	r0, [r3, #16]
 800c006:	f000 fe87 	bl	800cd18 <__hi0bits>
 800c00a:	f1c0 0020 	rsb	r0, r0, #32
 800c00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c010:	4418      	add	r0, r3
 800c012:	f010 001f 	ands.w	r0, r0, #31
 800c016:	f000 8092 	beq.w	800c13e <_dtoa_r+0x926>
 800c01a:	f1c0 0320 	rsb	r3, r0, #32
 800c01e:	2b04      	cmp	r3, #4
 800c020:	f340 808a 	ble.w	800c138 <_dtoa_r+0x920>
 800c024:	f1c0 001c 	rsb	r0, r0, #28
 800c028:	9b06      	ldr	r3, [sp, #24]
 800c02a:	4407      	add	r7, r0
 800c02c:	4403      	add	r3, r0
 800c02e:	9306      	str	r3, [sp, #24]
 800c030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c032:	4403      	add	r3, r0
 800c034:	9309      	str	r3, [sp, #36]	; 0x24
 800c036:	9b06      	ldr	r3, [sp, #24]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	dd05      	ble.n	800c048 <_dtoa_r+0x830>
 800c03c:	4659      	mov	r1, fp
 800c03e:	461a      	mov	r2, r3
 800c040:	4628      	mov	r0, r5
 800c042:	f000 ffcf 	bl	800cfe4 <__lshift>
 800c046:	4683      	mov	fp, r0
 800c048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	dd05      	ble.n	800c05a <_dtoa_r+0x842>
 800c04e:	4621      	mov	r1, r4
 800c050:	461a      	mov	r2, r3
 800c052:	4628      	mov	r0, r5
 800c054:	f000 ffc6 	bl	800cfe4 <__lshift>
 800c058:	4604      	mov	r4, r0
 800c05a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d070      	beq.n	800c142 <_dtoa_r+0x92a>
 800c060:	4621      	mov	r1, r4
 800c062:	4658      	mov	r0, fp
 800c064:	f001 f82e 	bl	800d0c4 <__mcmp>
 800c068:	2800      	cmp	r0, #0
 800c06a:	da6a      	bge.n	800c142 <_dtoa_r+0x92a>
 800c06c:	2300      	movs	r3, #0
 800c06e:	4659      	mov	r1, fp
 800c070:	220a      	movs	r2, #10
 800c072:	4628      	mov	r0, r5
 800c074:	f000 fdc0 	bl	800cbf8 <__multadd>
 800c078:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c07a:	4683      	mov	fp, r0
 800c07c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c080:	2b00      	cmp	r3, #0
 800c082:	f000 8194 	beq.w	800c3ae <_dtoa_r+0xb96>
 800c086:	4631      	mov	r1, r6
 800c088:	2300      	movs	r3, #0
 800c08a:	220a      	movs	r2, #10
 800c08c:	4628      	mov	r0, r5
 800c08e:	f000 fdb3 	bl	800cbf8 <__multadd>
 800c092:	f1b9 0f00 	cmp.w	r9, #0
 800c096:	4606      	mov	r6, r0
 800c098:	f300 8093 	bgt.w	800c1c2 <_dtoa_r+0x9aa>
 800c09c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c09e:	2b02      	cmp	r3, #2
 800c0a0:	dc57      	bgt.n	800c152 <_dtoa_r+0x93a>
 800c0a2:	e08e      	b.n	800c1c2 <_dtoa_r+0x9aa>
 800c0a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c0a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c0aa:	e757      	b.n	800bf5c <_dtoa_r+0x744>
 800c0ac:	9b08      	ldr	r3, [sp, #32]
 800c0ae:	1e5c      	subs	r4, r3, #1
 800c0b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0b2:	42a3      	cmp	r3, r4
 800c0b4:	bfb7      	itett	lt
 800c0b6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c0b8:	1b1c      	subge	r4, r3, r4
 800c0ba:	1ae2      	sublt	r2, r4, r3
 800c0bc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c0be:	bfbe      	ittt	lt
 800c0c0:	940a      	strlt	r4, [sp, #40]	; 0x28
 800c0c2:	189b      	addlt	r3, r3, r2
 800c0c4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c0c6:	9b08      	ldr	r3, [sp, #32]
 800c0c8:	bfb8      	it	lt
 800c0ca:	2400      	movlt	r4, #0
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	bfbb      	ittet	lt
 800c0d0:	9b06      	ldrlt	r3, [sp, #24]
 800c0d2:	9a08      	ldrlt	r2, [sp, #32]
 800c0d4:	9f06      	ldrge	r7, [sp, #24]
 800c0d6:	1a9f      	sublt	r7, r3, r2
 800c0d8:	bfac      	ite	ge
 800c0da:	9b08      	ldrge	r3, [sp, #32]
 800c0dc:	2300      	movlt	r3, #0
 800c0de:	e73f      	b.n	800bf60 <_dtoa_r+0x748>
 800c0e0:	3fe00000 	.word	0x3fe00000
 800c0e4:	40240000 	.word	0x40240000
 800c0e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c0ea:	9f06      	ldr	r7, [sp, #24]
 800c0ec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c0ee:	e742      	b.n	800bf76 <_dtoa_r+0x75e>
 800c0f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0f2:	e76b      	b.n	800bfcc <_dtoa_r+0x7b4>
 800c0f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c0f6:	2b01      	cmp	r3, #1
 800c0f8:	dc19      	bgt.n	800c12e <_dtoa_r+0x916>
 800c0fa:	9b04      	ldr	r3, [sp, #16]
 800c0fc:	b9bb      	cbnz	r3, 800c12e <_dtoa_r+0x916>
 800c0fe:	9b05      	ldr	r3, [sp, #20]
 800c100:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c104:	b99b      	cbnz	r3, 800c12e <_dtoa_r+0x916>
 800c106:	9b05      	ldr	r3, [sp, #20]
 800c108:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c10c:	0d1b      	lsrs	r3, r3, #20
 800c10e:	051b      	lsls	r3, r3, #20
 800c110:	b183      	cbz	r3, 800c134 <_dtoa_r+0x91c>
 800c112:	f04f 0801 	mov.w	r8, #1
 800c116:	9b06      	ldr	r3, [sp, #24]
 800c118:	3301      	adds	r3, #1
 800c11a:	9306      	str	r3, [sp, #24]
 800c11c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c11e:	3301      	adds	r3, #1
 800c120:	9309      	str	r3, [sp, #36]	; 0x24
 800c122:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c124:	2b00      	cmp	r3, #0
 800c126:	f47f af6a 	bne.w	800bffe <_dtoa_r+0x7e6>
 800c12a:	2001      	movs	r0, #1
 800c12c:	e76f      	b.n	800c00e <_dtoa_r+0x7f6>
 800c12e:	f04f 0800 	mov.w	r8, #0
 800c132:	e7f6      	b.n	800c122 <_dtoa_r+0x90a>
 800c134:	4698      	mov	r8, r3
 800c136:	e7f4      	b.n	800c122 <_dtoa_r+0x90a>
 800c138:	f43f af7d 	beq.w	800c036 <_dtoa_r+0x81e>
 800c13c:	4618      	mov	r0, r3
 800c13e:	301c      	adds	r0, #28
 800c140:	e772      	b.n	800c028 <_dtoa_r+0x810>
 800c142:	9b08      	ldr	r3, [sp, #32]
 800c144:	2b00      	cmp	r3, #0
 800c146:	dc36      	bgt.n	800c1b6 <_dtoa_r+0x99e>
 800c148:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c14a:	2b02      	cmp	r3, #2
 800c14c:	dd33      	ble.n	800c1b6 <_dtoa_r+0x99e>
 800c14e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c152:	f1b9 0f00 	cmp.w	r9, #0
 800c156:	d10d      	bne.n	800c174 <_dtoa_r+0x95c>
 800c158:	4621      	mov	r1, r4
 800c15a:	464b      	mov	r3, r9
 800c15c:	2205      	movs	r2, #5
 800c15e:	4628      	mov	r0, r5
 800c160:	f000 fd4a 	bl	800cbf8 <__multadd>
 800c164:	4601      	mov	r1, r0
 800c166:	4604      	mov	r4, r0
 800c168:	4658      	mov	r0, fp
 800c16a:	f000 ffab 	bl	800d0c4 <__mcmp>
 800c16e:	2800      	cmp	r0, #0
 800c170:	f73f adb8 	bgt.w	800bce4 <_dtoa_r+0x4cc>
 800c174:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c176:	9f03      	ldr	r7, [sp, #12]
 800c178:	ea6f 0a03 	mvn.w	sl, r3
 800c17c:	f04f 0800 	mov.w	r8, #0
 800c180:	4621      	mov	r1, r4
 800c182:	4628      	mov	r0, r5
 800c184:	f000 fd16 	bl	800cbb4 <_Bfree>
 800c188:	2e00      	cmp	r6, #0
 800c18a:	f43f aea7 	beq.w	800bedc <_dtoa_r+0x6c4>
 800c18e:	f1b8 0f00 	cmp.w	r8, #0
 800c192:	d005      	beq.n	800c1a0 <_dtoa_r+0x988>
 800c194:	45b0      	cmp	r8, r6
 800c196:	d003      	beq.n	800c1a0 <_dtoa_r+0x988>
 800c198:	4641      	mov	r1, r8
 800c19a:	4628      	mov	r0, r5
 800c19c:	f000 fd0a 	bl	800cbb4 <_Bfree>
 800c1a0:	4631      	mov	r1, r6
 800c1a2:	4628      	mov	r0, r5
 800c1a4:	f000 fd06 	bl	800cbb4 <_Bfree>
 800c1a8:	e698      	b.n	800bedc <_dtoa_r+0x6c4>
 800c1aa:	2400      	movs	r4, #0
 800c1ac:	4626      	mov	r6, r4
 800c1ae:	e7e1      	b.n	800c174 <_dtoa_r+0x95c>
 800c1b0:	46c2      	mov	sl, r8
 800c1b2:	4626      	mov	r6, r4
 800c1b4:	e596      	b.n	800bce4 <_dtoa_r+0x4cc>
 800c1b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	f000 80fd 	beq.w	800c3bc <_dtoa_r+0xba4>
 800c1c2:	2f00      	cmp	r7, #0
 800c1c4:	dd05      	ble.n	800c1d2 <_dtoa_r+0x9ba>
 800c1c6:	4631      	mov	r1, r6
 800c1c8:	463a      	mov	r2, r7
 800c1ca:	4628      	mov	r0, r5
 800c1cc:	f000 ff0a 	bl	800cfe4 <__lshift>
 800c1d0:	4606      	mov	r6, r0
 800c1d2:	f1b8 0f00 	cmp.w	r8, #0
 800c1d6:	d05c      	beq.n	800c292 <_dtoa_r+0xa7a>
 800c1d8:	4628      	mov	r0, r5
 800c1da:	6871      	ldr	r1, [r6, #4]
 800c1dc:	f000 fcaa 	bl	800cb34 <_Balloc>
 800c1e0:	4607      	mov	r7, r0
 800c1e2:	b928      	cbnz	r0, 800c1f0 <_dtoa_r+0x9d8>
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c1ea:	4b7f      	ldr	r3, [pc, #508]	; (800c3e8 <_dtoa_r+0xbd0>)
 800c1ec:	f7ff bb28 	b.w	800b840 <_dtoa_r+0x28>
 800c1f0:	6932      	ldr	r2, [r6, #16]
 800c1f2:	f106 010c 	add.w	r1, r6, #12
 800c1f6:	3202      	adds	r2, #2
 800c1f8:	0092      	lsls	r2, r2, #2
 800c1fa:	300c      	adds	r0, #12
 800c1fc:	f000 fc8c 	bl	800cb18 <memcpy>
 800c200:	2201      	movs	r2, #1
 800c202:	4639      	mov	r1, r7
 800c204:	4628      	mov	r0, r5
 800c206:	f000 feed 	bl	800cfe4 <__lshift>
 800c20a:	46b0      	mov	r8, r6
 800c20c:	4606      	mov	r6, r0
 800c20e:	9b03      	ldr	r3, [sp, #12]
 800c210:	3301      	adds	r3, #1
 800c212:	9308      	str	r3, [sp, #32]
 800c214:	9b03      	ldr	r3, [sp, #12]
 800c216:	444b      	add	r3, r9
 800c218:	930a      	str	r3, [sp, #40]	; 0x28
 800c21a:	9b04      	ldr	r3, [sp, #16]
 800c21c:	f003 0301 	and.w	r3, r3, #1
 800c220:	9309      	str	r3, [sp, #36]	; 0x24
 800c222:	9b08      	ldr	r3, [sp, #32]
 800c224:	4621      	mov	r1, r4
 800c226:	3b01      	subs	r3, #1
 800c228:	4658      	mov	r0, fp
 800c22a:	9304      	str	r3, [sp, #16]
 800c22c:	f7ff fa68 	bl	800b700 <quorem>
 800c230:	4603      	mov	r3, r0
 800c232:	4641      	mov	r1, r8
 800c234:	3330      	adds	r3, #48	; 0x30
 800c236:	9006      	str	r0, [sp, #24]
 800c238:	4658      	mov	r0, fp
 800c23a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c23c:	f000 ff42 	bl	800d0c4 <__mcmp>
 800c240:	4632      	mov	r2, r6
 800c242:	4681      	mov	r9, r0
 800c244:	4621      	mov	r1, r4
 800c246:	4628      	mov	r0, r5
 800c248:	f000 ff58 	bl	800d0fc <__mdiff>
 800c24c:	68c2      	ldr	r2, [r0, #12]
 800c24e:	4607      	mov	r7, r0
 800c250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c252:	bb02      	cbnz	r2, 800c296 <_dtoa_r+0xa7e>
 800c254:	4601      	mov	r1, r0
 800c256:	4658      	mov	r0, fp
 800c258:	f000 ff34 	bl	800d0c4 <__mcmp>
 800c25c:	4602      	mov	r2, r0
 800c25e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c260:	4639      	mov	r1, r7
 800c262:	4628      	mov	r0, r5
 800c264:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800c268:	f000 fca4 	bl	800cbb4 <_Bfree>
 800c26c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c26e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c270:	9f08      	ldr	r7, [sp, #32]
 800c272:	ea43 0102 	orr.w	r1, r3, r2
 800c276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c278:	430b      	orrs	r3, r1
 800c27a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c27c:	d10d      	bne.n	800c29a <_dtoa_r+0xa82>
 800c27e:	2b39      	cmp	r3, #57	; 0x39
 800c280:	d029      	beq.n	800c2d6 <_dtoa_r+0xabe>
 800c282:	f1b9 0f00 	cmp.w	r9, #0
 800c286:	dd01      	ble.n	800c28c <_dtoa_r+0xa74>
 800c288:	9b06      	ldr	r3, [sp, #24]
 800c28a:	3331      	adds	r3, #49	; 0x31
 800c28c:	9a04      	ldr	r2, [sp, #16]
 800c28e:	7013      	strb	r3, [r2, #0]
 800c290:	e776      	b.n	800c180 <_dtoa_r+0x968>
 800c292:	4630      	mov	r0, r6
 800c294:	e7b9      	b.n	800c20a <_dtoa_r+0x9f2>
 800c296:	2201      	movs	r2, #1
 800c298:	e7e2      	b.n	800c260 <_dtoa_r+0xa48>
 800c29a:	f1b9 0f00 	cmp.w	r9, #0
 800c29e:	db06      	blt.n	800c2ae <_dtoa_r+0xa96>
 800c2a0:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c2a2:	ea41 0909 	orr.w	r9, r1, r9
 800c2a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c2a8:	ea59 0101 	orrs.w	r1, r9, r1
 800c2ac:	d120      	bne.n	800c2f0 <_dtoa_r+0xad8>
 800c2ae:	2a00      	cmp	r2, #0
 800c2b0:	ddec      	ble.n	800c28c <_dtoa_r+0xa74>
 800c2b2:	4659      	mov	r1, fp
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	4628      	mov	r0, r5
 800c2b8:	9308      	str	r3, [sp, #32]
 800c2ba:	f000 fe93 	bl	800cfe4 <__lshift>
 800c2be:	4621      	mov	r1, r4
 800c2c0:	4683      	mov	fp, r0
 800c2c2:	f000 feff 	bl	800d0c4 <__mcmp>
 800c2c6:	2800      	cmp	r0, #0
 800c2c8:	9b08      	ldr	r3, [sp, #32]
 800c2ca:	dc02      	bgt.n	800c2d2 <_dtoa_r+0xaba>
 800c2cc:	d1de      	bne.n	800c28c <_dtoa_r+0xa74>
 800c2ce:	07da      	lsls	r2, r3, #31
 800c2d0:	d5dc      	bpl.n	800c28c <_dtoa_r+0xa74>
 800c2d2:	2b39      	cmp	r3, #57	; 0x39
 800c2d4:	d1d8      	bne.n	800c288 <_dtoa_r+0xa70>
 800c2d6:	2339      	movs	r3, #57	; 0x39
 800c2d8:	9a04      	ldr	r2, [sp, #16]
 800c2da:	7013      	strb	r3, [r2, #0]
 800c2dc:	463b      	mov	r3, r7
 800c2de:	461f      	mov	r7, r3
 800c2e0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c2e4:	3b01      	subs	r3, #1
 800c2e6:	2a39      	cmp	r2, #57	; 0x39
 800c2e8:	d050      	beq.n	800c38c <_dtoa_r+0xb74>
 800c2ea:	3201      	adds	r2, #1
 800c2ec:	701a      	strb	r2, [r3, #0]
 800c2ee:	e747      	b.n	800c180 <_dtoa_r+0x968>
 800c2f0:	2a00      	cmp	r2, #0
 800c2f2:	dd03      	ble.n	800c2fc <_dtoa_r+0xae4>
 800c2f4:	2b39      	cmp	r3, #57	; 0x39
 800c2f6:	d0ee      	beq.n	800c2d6 <_dtoa_r+0xabe>
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	e7c7      	b.n	800c28c <_dtoa_r+0xa74>
 800c2fc:	9a08      	ldr	r2, [sp, #32]
 800c2fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c300:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c304:	428a      	cmp	r2, r1
 800c306:	d02a      	beq.n	800c35e <_dtoa_r+0xb46>
 800c308:	4659      	mov	r1, fp
 800c30a:	2300      	movs	r3, #0
 800c30c:	220a      	movs	r2, #10
 800c30e:	4628      	mov	r0, r5
 800c310:	f000 fc72 	bl	800cbf8 <__multadd>
 800c314:	45b0      	cmp	r8, r6
 800c316:	4683      	mov	fp, r0
 800c318:	f04f 0300 	mov.w	r3, #0
 800c31c:	f04f 020a 	mov.w	r2, #10
 800c320:	4641      	mov	r1, r8
 800c322:	4628      	mov	r0, r5
 800c324:	d107      	bne.n	800c336 <_dtoa_r+0xb1e>
 800c326:	f000 fc67 	bl	800cbf8 <__multadd>
 800c32a:	4680      	mov	r8, r0
 800c32c:	4606      	mov	r6, r0
 800c32e:	9b08      	ldr	r3, [sp, #32]
 800c330:	3301      	adds	r3, #1
 800c332:	9308      	str	r3, [sp, #32]
 800c334:	e775      	b.n	800c222 <_dtoa_r+0xa0a>
 800c336:	f000 fc5f 	bl	800cbf8 <__multadd>
 800c33a:	4631      	mov	r1, r6
 800c33c:	4680      	mov	r8, r0
 800c33e:	2300      	movs	r3, #0
 800c340:	220a      	movs	r2, #10
 800c342:	4628      	mov	r0, r5
 800c344:	f000 fc58 	bl	800cbf8 <__multadd>
 800c348:	4606      	mov	r6, r0
 800c34a:	e7f0      	b.n	800c32e <_dtoa_r+0xb16>
 800c34c:	f1b9 0f00 	cmp.w	r9, #0
 800c350:	bfcc      	ite	gt
 800c352:	464f      	movgt	r7, r9
 800c354:	2701      	movle	r7, #1
 800c356:	f04f 0800 	mov.w	r8, #0
 800c35a:	9a03      	ldr	r2, [sp, #12]
 800c35c:	4417      	add	r7, r2
 800c35e:	4659      	mov	r1, fp
 800c360:	2201      	movs	r2, #1
 800c362:	4628      	mov	r0, r5
 800c364:	9308      	str	r3, [sp, #32]
 800c366:	f000 fe3d 	bl	800cfe4 <__lshift>
 800c36a:	4621      	mov	r1, r4
 800c36c:	4683      	mov	fp, r0
 800c36e:	f000 fea9 	bl	800d0c4 <__mcmp>
 800c372:	2800      	cmp	r0, #0
 800c374:	dcb2      	bgt.n	800c2dc <_dtoa_r+0xac4>
 800c376:	d102      	bne.n	800c37e <_dtoa_r+0xb66>
 800c378:	9b08      	ldr	r3, [sp, #32]
 800c37a:	07db      	lsls	r3, r3, #31
 800c37c:	d4ae      	bmi.n	800c2dc <_dtoa_r+0xac4>
 800c37e:	463b      	mov	r3, r7
 800c380:	461f      	mov	r7, r3
 800c382:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c386:	2a30      	cmp	r2, #48	; 0x30
 800c388:	d0fa      	beq.n	800c380 <_dtoa_r+0xb68>
 800c38a:	e6f9      	b.n	800c180 <_dtoa_r+0x968>
 800c38c:	9a03      	ldr	r2, [sp, #12]
 800c38e:	429a      	cmp	r2, r3
 800c390:	d1a5      	bne.n	800c2de <_dtoa_r+0xac6>
 800c392:	2331      	movs	r3, #49	; 0x31
 800c394:	f10a 0a01 	add.w	sl, sl, #1
 800c398:	e779      	b.n	800c28e <_dtoa_r+0xa76>
 800c39a:	4b14      	ldr	r3, [pc, #80]	; (800c3ec <_dtoa_r+0xbd4>)
 800c39c:	f7ff baa8 	b.w	800b8f0 <_dtoa_r+0xd8>
 800c3a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	f47f aa81 	bne.w	800b8aa <_dtoa_r+0x92>
 800c3a8:	4b11      	ldr	r3, [pc, #68]	; (800c3f0 <_dtoa_r+0xbd8>)
 800c3aa:	f7ff baa1 	b.w	800b8f0 <_dtoa_r+0xd8>
 800c3ae:	f1b9 0f00 	cmp.w	r9, #0
 800c3b2:	dc03      	bgt.n	800c3bc <_dtoa_r+0xba4>
 800c3b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c3b6:	2b02      	cmp	r3, #2
 800c3b8:	f73f aecb 	bgt.w	800c152 <_dtoa_r+0x93a>
 800c3bc:	9f03      	ldr	r7, [sp, #12]
 800c3be:	4621      	mov	r1, r4
 800c3c0:	4658      	mov	r0, fp
 800c3c2:	f7ff f99d 	bl	800b700 <quorem>
 800c3c6:	9a03      	ldr	r2, [sp, #12]
 800c3c8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c3cc:	f807 3b01 	strb.w	r3, [r7], #1
 800c3d0:	1aba      	subs	r2, r7, r2
 800c3d2:	4591      	cmp	r9, r2
 800c3d4:	ddba      	ble.n	800c34c <_dtoa_r+0xb34>
 800c3d6:	4659      	mov	r1, fp
 800c3d8:	2300      	movs	r3, #0
 800c3da:	220a      	movs	r2, #10
 800c3dc:	4628      	mov	r0, r5
 800c3de:	f000 fc0b 	bl	800cbf8 <__multadd>
 800c3e2:	4683      	mov	fp, r0
 800c3e4:	e7eb      	b.n	800c3be <_dtoa_r+0xba6>
 800c3e6:	bf00      	nop
 800c3e8:	0800e7f0 	.word	0x0800e7f0
 800c3ec:	0800e5f0 	.word	0x0800e5f0
 800c3f0:	0800e771 	.word	0x0800e771

0800c3f4 <rshift>:
 800c3f4:	6903      	ldr	r3, [r0, #16]
 800c3f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c3fa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c3fe:	f100 0414 	add.w	r4, r0, #20
 800c402:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c406:	dd46      	ble.n	800c496 <rshift+0xa2>
 800c408:	f011 011f 	ands.w	r1, r1, #31
 800c40c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c410:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c414:	d10c      	bne.n	800c430 <rshift+0x3c>
 800c416:	4629      	mov	r1, r5
 800c418:	f100 0710 	add.w	r7, r0, #16
 800c41c:	42b1      	cmp	r1, r6
 800c41e:	d335      	bcc.n	800c48c <rshift+0x98>
 800c420:	1a9b      	subs	r3, r3, r2
 800c422:	009b      	lsls	r3, r3, #2
 800c424:	1eea      	subs	r2, r5, #3
 800c426:	4296      	cmp	r6, r2
 800c428:	bf38      	it	cc
 800c42a:	2300      	movcc	r3, #0
 800c42c:	4423      	add	r3, r4
 800c42e:	e015      	b.n	800c45c <rshift+0x68>
 800c430:	46a1      	mov	r9, r4
 800c432:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c436:	f1c1 0820 	rsb	r8, r1, #32
 800c43a:	40cf      	lsrs	r7, r1
 800c43c:	f105 0e04 	add.w	lr, r5, #4
 800c440:	4576      	cmp	r6, lr
 800c442:	46f4      	mov	ip, lr
 800c444:	d816      	bhi.n	800c474 <rshift+0x80>
 800c446:	1a9a      	subs	r2, r3, r2
 800c448:	0092      	lsls	r2, r2, #2
 800c44a:	3a04      	subs	r2, #4
 800c44c:	3501      	adds	r5, #1
 800c44e:	42ae      	cmp	r6, r5
 800c450:	bf38      	it	cc
 800c452:	2200      	movcc	r2, #0
 800c454:	18a3      	adds	r3, r4, r2
 800c456:	50a7      	str	r7, [r4, r2]
 800c458:	b107      	cbz	r7, 800c45c <rshift+0x68>
 800c45a:	3304      	adds	r3, #4
 800c45c:	42a3      	cmp	r3, r4
 800c45e:	eba3 0204 	sub.w	r2, r3, r4
 800c462:	bf08      	it	eq
 800c464:	2300      	moveq	r3, #0
 800c466:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c46a:	6102      	str	r2, [r0, #16]
 800c46c:	bf08      	it	eq
 800c46e:	6143      	streq	r3, [r0, #20]
 800c470:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c474:	f8dc c000 	ldr.w	ip, [ip]
 800c478:	fa0c fc08 	lsl.w	ip, ip, r8
 800c47c:	ea4c 0707 	orr.w	r7, ip, r7
 800c480:	f849 7b04 	str.w	r7, [r9], #4
 800c484:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c488:	40cf      	lsrs	r7, r1
 800c48a:	e7d9      	b.n	800c440 <rshift+0x4c>
 800c48c:	f851 cb04 	ldr.w	ip, [r1], #4
 800c490:	f847 cf04 	str.w	ip, [r7, #4]!
 800c494:	e7c2      	b.n	800c41c <rshift+0x28>
 800c496:	4623      	mov	r3, r4
 800c498:	e7e0      	b.n	800c45c <rshift+0x68>

0800c49a <__hexdig_fun>:
 800c49a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c49e:	2b09      	cmp	r3, #9
 800c4a0:	d802      	bhi.n	800c4a8 <__hexdig_fun+0xe>
 800c4a2:	3820      	subs	r0, #32
 800c4a4:	b2c0      	uxtb	r0, r0
 800c4a6:	4770      	bx	lr
 800c4a8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c4ac:	2b05      	cmp	r3, #5
 800c4ae:	d801      	bhi.n	800c4b4 <__hexdig_fun+0x1a>
 800c4b0:	3847      	subs	r0, #71	; 0x47
 800c4b2:	e7f7      	b.n	800c4a4 <__hexdig_fun+0xa>
 800c4b4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c4b8:	2b05      	cmp	r3, #5
 800c4ba:	d801      	bhi.n	800c4c0 <__hexdig_fun+0x26>
 800c4bc:	3827      	subs	r0, #39	; 0x27
 800c4be:	e7f1      	b.n	800c4a4 <__hexdig_fun+0xa>
 800c4c0:	2000      	movs	r0, #0
 800c4c2:	4770      	bx	lr

0800c4c4 <__gethex>:
 800c4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4c8:	b08b      	sub	sp, #44	; 0x2c
 800c4ca:	9305      	str	r3, [sp, #20]
 800c4cc:	4bb2      	ldr	r3, [pc, #712]	; (800c798 <__gethex+0x2d4>)
 800c4ce:	9002      	str	r0, [sp, #8]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	468b      	mov	fp, r1
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	4690      	mov	r8, r2
 800c4d8:	9303      	str	r3, [sp, #12]
 800c4da:	f7f3 fe39 	bl	8000150 <strlen>
 800c4de:	4682      	mov	sl, r0
 800c4e0:	9b03      	ldr	r3, [sp, #12]
 800c4e2:	f8db 2000 	ldr.w	r2, [fp]
 800c4e6:	4403      	add	r3, r0
 800c4e8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c4ec:	9306      	str	r3, [sp, #24]
 800c4ee:	1c93      	adds	r3, r2, #2
 800c4f0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c4f4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c4f8:	32fe      	adds	r2, #254	; 0xfe
 800c4fa:	18d1      	adds	r1, r2, r3
 800c4fc:	461f      	mov	r7, r3
 800c4fe:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c502:	9101      	str	r1, [sp, #4]
 800c504:	2830      	cmp	r0, #48	; 0x30
 800c506:	d0f8      	beq.n	800c4fa <__gethex+0x36>
 800c508:	f7ff ffc7 	bl	800c49a <__hexdig_fun>
 800c50c:	4604      	mov	r4, r0
 800c50e:	2800      	cmp	r0, #0
 800c510:	d13a      	bne.n	800c588 <__gethex+0xc4>
 800c512:	4652      	mov	r2, sl
 800c514:	4638      	mov	r0, r7
 800c516:	9903      	ldr	r1, [sp, #12]
 800c518:	f001 fa26 	bl	800d968 <strncmp>
 800c51c:	4605      	mov	r5, r0
 800c51e:	2800      	cmp	r0, #0
 800c520:	d166      	bne.n	800c5f0 <__gethex+0x12c>
 800c522:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c526:	eb07 060a 	add.w	r6, r7, sl
 800c52a:	f7ff ffb6 	bl	800c49a <__hexdig_fun>
 800c52e:	2800      	cmp	r0, #0
 800c530:	d060      	beq.n	800c5f4 <__gethex+0x130>
 800c532:	4633      	mov	r3, r6
 800c534:	7818      	ldrb	r0, [r3, #0]
 800c536:	461f      	mov	r7, r3
 800c538:	2830      	cmp	r0, #48	; 0x30
 800c53a:	f103 0301 	add.w	r3, r3, #1
 800c53e:	d0f9      	beq.n	800c534 <__gethex+0x70>
 800c540:	f7ff ffab 	bl	800c49a <__hexdig_fun>
 800c544:	2301      	movs	r3, #1
 800c546:	fab0 f480 	clz	r4, r0
 800c54a:	4635      	mov	r5, r6
 800c54c:	0964      	lsrs	r4, r4, #5
 800c54e:	9301      	str	r3, [sp, #4]
 800c550:	463a      	mov	r2, r7
 800c552:	4616      	mov	r6, r2
 800c554:	7830      	ldrb	r0, [r6, #0]
 800c556:	3201      	adds	r2, #1
 800c558:	f7ff ff9f 	bl	800c49a <__hexdig_fun>
 800c55c:	2800      	cmp	r0, #0
 800c55e:	d1f8      	bne.n	800c552 <__gethex+0x8e>
 800c560:	4652      	mov	r2, sl
 800c562:	4630      	mov	r0, r6
 800c564:	9903      	ldr	r1, [sp, #12]
 800c566:	f001 f9ff 	bl	800d968 <strncmp>
 800c56a:	b980      	cbnz	r0, 800c58e <__gethex+0xca>
 800c56c:	b94d      	cbnz	r5, 800c582 <__gethex+0xbe>
 800c56e:	eb06 050a 	add.w	r5, r6, sl
 800c572:	462a      	mov	r2, r5
 800c574:	4616      	mov	r6, r2
 800c576:	7830      	ldrb	r0, [r6, #0]
 800c578:	3201      	adds	r2, #1
 800c57a:	f7ff ff8e 	bl	800c49a <__hexdig_fun>
 800c57e:	2800      	cmp	r0, #0
 800c580:	d1f8      	bne.n	800c574 <__gethex+0xb0>
 800c582:	1bad      	subs	r5, r5, r6
 800c584:	00ad      	lsls	r5, r5, #2
 800c586:	e004      	b.n	800c592 <__gethex+0xce>
 800c588:	2400      	movs	r4, #0
 800c58a:	4625      	mov	r5, r4
 800c58c:	e7e0      	b.n	800c550 <__gethex+0x8c>
 800c58e:	2d00      	cmp	r5, #0
 800c590:	d1f7      	bne.n	800c582 <__gethex+0xbe>
 800c592:	7833      	ldrb	r3, [r6, #0]
 800c594:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c598:	2b50      	cmp	r3, #80	; 0x50
 800c59a:	d139      	bne.n	800c610 <__gethex+0x14c>
 800c59c:	7873      	ldrb	r3, [r6, #1]
 800c59e:	2b2b      	cmp	r3, #43	; 0x2b
 800c5a0:	d02a      	beq.n	800c5f8 <__gethex+0x134>
 800c5a2:	2b2d      	cmp	r3, #45	; 0x2d
 800c5a4:	d02c      	beq.n	800c600 <__gethex+0x13c>
 800c5a6:	f04f 0900 	mov.w	r9, #0
 800c5aa:	1c71      	adds	r1, r6, #1
 800c5ac:	7808      	ldrb	r0, [r1, #0]
 800c5ae:	f7ff ff74 	bl	800c49a <__hexdig_fun>
 800c5b2:	1e43      	subs	r3, r0, #1
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	2b18      	cmp	r3, #24
 800c5b8:	d82a      	bhi.n	800c610 <__gethex+0x14c>
 800c5ba:	f1a0 0210 	sub.w	r2, r0, #16
 800c5be:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c5c2:	f7ff ff6a 	bl	800c49a <__hexdig_fun>
 800c5c6:	1e43      	subs	r3, r0, #1
 800c5c8:	b2db      	uxtb	r3, r3
 800c5ca:	2b18      	cmp	r3, #24
 800c5cc:	d91b      	bls.n	800c606 <__gethex+0x142>
 800c5ce:	f1b9 0f00 	cmp.w	r9, #0
 800c5d2:	d000      	beq.n	800c5d6 <__gethex+0x112>
 800c5d4:	4252      	negs	r2, r2
 800c5d6:	4415      	add	r5, r2
 800c5d8:	f8cb 1000 	str.w	r1, [fp]
 800c5dc:	b1d4      	cbz	r4, 800c614 <__gethex+0x150>
 800c5de:	9b01      	ldr	r3, [sp, #4]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	bf14      	ite	ne
 800c5e4:	2700      	movne	r7, #0
 800c5e6:	2706      	moveq	r7, #6
 800c5e8:	4638      	mov	r0, r7
 800c5ea:	b00b      	add	sp, #44	; 0x2c
 800c5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5f0:	463e      	mov	r6, r7
 800c5f2:	4625      	mov	r5, r4
 800c5f4:	2401      	movs	r4, #1
 800c5f6:	e7cc      	b.n	800c592 <__gethex+0xce>
 800c5f8:	f04f 0900 	mov.w	r9, #0
 800c5fc:	1cb1      	adds	r1, r6, #2
 800c5fe:	e7d5      	b.n	800c5ac <__gethex+0xe8>
 800c600:	f04f 0901 	mov.w	r9, #1
 800c604:	e7fa      	b.n	800c5fc <__gethex+0x138>
 800c606:	230a      	movs	r3, #10
 800c608:	fb03 0202 	mla	r2, r3, r2, r0
 800c60c:	3a10      	subs	r2, #16
 800c60e:	e7d6      	b.n	800c5be <__gethex+0xfa>
 800c610:	4631      	mov	r1, r6
 800c612:	e7e1      	b.n	800c5d8 <__gethex+0x114>
 800c614:	4621      	mov	r1, r4
 800c616:	1bf3      	subs	r3, r6, r7
 800c618:	3b01      	subs	r3, #1
 800c61a:	2b07      	cmp	r3, #7
 800c61c:	dc0a      	bgt.n	800c634 <__gethex+0x170>
 800c61e:	9802      	ldr	r0, [sp, #8]
 800c620:	f000 fa88 	bl	800cb34 <_Balloc>
 800c624:	4604      	mov	r4, r0
 800c626:	b940      	cbnz	r0, 800c63a <__gethex+0x176>
 800c628:	4602      	mov	r2, r0
 800c62a:	21de      	movs	r1, #222	; 0xde
 800c62c:	4b5b      	ldr	r3, [pc, #364]	; (800c79c <__gethex+0x2d8>)
 800c62e:	485c      	ldr	r0, [pc, #368]	; (800c7a0 <__gethex+0x2dc>)
 800c630:	f001 f9bc 	bl	800d9ac <__assert_func>
 800c634:	3101      	adds	r1, #1
 800c636:	105b      	asrs	r3, r3, #1
 800c638:	e7ef      	b.n	800c61a <__gethex+0x156>
 800c63a:	f04f 0b00 	mov.w	fp, #0
 800c63e:	f100 0914 	add.w	r9, r0, #20
 800c642:	f1ca 0301 	rsb	r3, sl, #1
 800c646:	f8cd 9010 	str.w	r9, [sp, #16]
 800c64a:	f8cd b004 	str.w	fp, [sp, #4]
 800c64e:	9308      	str	r3, [sp, #32]
 800c650:	42b7      	cmp	r7, r6
 800c652:	d33f      	bcc.n	800c6d4 <__gethex+0x210>
 800c654:	9f04      	ldr	r7, [sp, #16]
 800c656:	9b01      	ldr	r3, [sp, #4]
 800c658:	f847 3b04 	str.w	r3, [r7], #4
 800c65c:	eba7 0709 	sub.w	r7, r7, r9
 800c660:	10bf      	asrs	r7, r7, #2
 800c662:	6127      	str	r7, [r4, #16]
 800c664:	4618      	mov	r0, r3
 800c666:	f000 fb57 	bl	800cd18 <__hi0bits>
 800c66a:	017f      	lsls	r7, r7, #5
 800c66c:	f8d8 6000 	ldr.w	r6, [r8]
 800c670:	1a3f      	subs	r7, r7, r0
 800c672:	42b7      	cmp	r7, r6
 800c674:	dd62      	ble.n	800c73c <__gethex+0x278>
 800c676:	1bbf      	subs	r7, r7, r6
 800c678:	4639      	mov	r1, r7
 800c67a:	4620      	mov	r0, r4
 800c67c:	f000 fef1 	bl	800d462 <__any_on>
 800c680:	4682      	mov	sl, r0
 800c682:	b1a8      	cbz	r0, 800c6b0 <__gethex+0x1ec>
 800c684:	f04f 0a01 	mov.w	sl, #1
 800c688:	1e7b      	subs	r3, r7, #1
 800c68a:	1159      	asrs	r1, r3, #5
 800c68c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c690:	f003 021f 	and.w	r2, r3, #31
 800c694:	fa0a f202 	lsl.w	r2, sl, r2
 800c698:	420a      	tst	r2, r1
 800c69a:	d009      	beq.n	800c6b0 <__gethex+0x1ec>
 800c69c:	4553      	cmp	r3, sl
 800c69e:	dd05      	ble.n	800c6ac <__gethex+0x1e8>
 800c6a0:	4620      	mov	r0, r4
 800c6a2:	1eb9      	subs	r1, r7, #2
 800c6a4:	f000 fedd 	bl	800d462 <__any_on>
 800c6a8:	2800      	cmp	r0, #0
 800c6aa:	d144      	bne.n	800c736 <__gethex+0x272>
 800c6ac:	f04f 0a02 	mov.w	sl, #2
 800c6b0:	4639      	mov	r1, r7
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	f7ff fe9e 	bl	800c3f4 <rshift>
 800c6b8:	443d      	add	r5, r7
 800c6ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c6be:	42ab      	cmp	r3, r5
 800c6c0:	da4a      	bge.n	800c758 <__gethex+0x294>
 800c6c2:	4621      	mov	r1, r4
 800c6c4:	9802      	ldr	r0, [sp, #8]
 800c6c6:	f000 fa75 	bl	800cbb4 <_Bfree>
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c6ce:	27a3      	movs	r7, #163	; 0xa3
 800c6d0:	6013      	str	r3, [r2, #0]
 800c6d2:	e789      	b.n	800c5e8 <__gethex+0x124>
 800c6d4:	1e73      	subs	r3, r6, #1
 800c6d6:	9a06      	ldr	r2, [sp, #24]
 800c6d8:	9307      	str	r3, [sp, #28]
 800c6da:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d019      	beq.n	800c716 <__gethex+0x252>
 800c6e2:	f1bb 0f20 	cmp.w	fp, #32
 800c6e6:	d107      	bne.n	800c6f8 <__gethex+0x234>
 800c6e8:	9b04      	ldr	r3, [sp, #16]
 800c6ea:	9a01      	ldr	r2, [sp, #4]
 800c6ec:	f843 2b04 	str.w	r2, [r3], #4
 800c6f0:	9304      	str	r3, [sp, #16]
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	469b      	mov	fp, r3
 800c6f6:	9301      	str	r3, [sp, #4]
 800c6f8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c6fc:	f7ff fecd 	bl	800c49a <__hexdig_fun>
 800c700:	9b01      	ldr	r3, [sp, #4]
 800c702:	f000 000f 	and.w	r0, r0, #15
 800c706:	fa00 f00b 	lsl.w	r0, r0, fp
 800c70a:	4303      	orrs	r3, r0
 800c70c:	9301      	str	r3, [sp, #4]
 800c70e:	f10b 0b04 	add.w	fp, fp, #4
 800c712:	9b07      	ldr	r3, [sp, #28]
 800c714:	e00d      	b.n	800c732 <__gethex+0x26e>
 800c716:	9a08      	ldr	r2, [sp, #32]
 800c718:	1e73      	subs	r3, r6, #1
 800c71a:	4413      	add	r3, r2
 800c71c:	42bb      	cmp	r3, r7
 800c71e:	d3e0      	bcc.n	800c6e2 <__gethex+0x21e>
 800c720:	4618      	mov	r0, r3
 800c722:	4652      	mov	r2, sl
 800c724:	9903      	ldr	r1, [sp, #12]
 800c726:	9309      	str	r3, [sp, #36]	; 0x24
 800c728:	f001 f91e 	bl	800d968 <strncmp>
 800c72c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c72e:	2800      	cmp	r0, #0
 800c730:	d1d7      	bne.n	800c6e2 <__gethex+0x21e>
 800c732:	461e      	mov	r6, r3
 800c734:	e78c      	b.n	800c650 <__gethex+0x18c>
 800c736:	f04f 0a03 	mov.w	sl, #3
 800c73a:	e7b9      	b.n	800c6b0 <__gethex+0x1ec>
 800c73c:	da09      	bge.n	800c752 <__gethex+0x28e>
 800c73e:	1bf7      	subs	r7, r6, r7
 800c740:	4621      	mov	r1, r4
 800c742:	463a      	mov	r2, r7
 800c744:	9802      	ldr	r0, [sp, #8]
 800c746:	f000 fc4d 	bl	800cfe4 <__lshift>
 800c74a:	4604      	mov	r4, r0
 800c74c:	1bed      	subs	r5, r5, r7
 800c74e:	f100 0914 	add.w	r9, r0, #20
 800c752:	f04f 0a00 	mov.w	sl, #0
 800c756:	e7b0      	b.n	800c6ba <__gethex+0x1f6>
 800c758:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c75c:	42a8      	cmp	r0, r5
 800c75e:	dd72      	ble.n	800c846 <__gethex+0x382>
 800c760:	1b45      	subs	r5, r0, r5
 800c762:	42ae      	cmp	r6, r5
 800c764:	dc35      	bgt.n	800c7d2 <__gethex+0x30e>
 800c766:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c76a:	2b02      	cmp	r3, #2
 800c76c:	d029      	beq.n	800c7c2 <__gethex+0x2fe>
 800c76e:	2b03      	cmp	r3, #3
 800c770:	d02b      	beq.n	800c7ca <__gethex+0x306>
 800c772:	2b01      	cmp	r3, #1
 800c774:	d11c      	bne.n	800c7b0 <__gethex+0x2ec>
 800c776:	42ae      	cmp	r6, r5
 800c778:	d11a      	bne.n	800c7b0 <__gethex+0x2ec>
 800c77a:	2e01      	cmp	r6, #1
 800c77c:	d112      	bne.n	800c7a4 <__gethex+0x2e0>
 800c77e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c782:	9a05      	ldr	r2, [sp, #20]
 800c784:	2762      	movs	r7, #98	; 0x62
 800c786:	6013      	str	r3, [r2, #0]
 800c788:	2301      	movs	r3, #1
 800c78a:	6123      	str	r3, [r4, #16]
 800c78c:	f8c9 3000 	str.w	r3, [r9]
 800c790:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c792:	601c      	str	r4, [r3, #0]
 800c794:	e728      	b.n	800c5e8 <__gethex+0x124>
 800c796:	bf00      	nop
 800c798:	0800e868 	.word	0x0800e868
 800c79c:	0800e7f0 	.word	0x0800e7f0
 800c7a0:	0800e801 	.word	0x0800e801
 800c7a4:	4620      	mov	r0, r4
 800c7a6:	1e71      	subs	r1, r6, #1
 800c7a8:	f000 fe5b 	bl	800d462 <__any_on>
 800c7ac:	2800      	cmp	r0, #0
 800c7ae:	d1e6      	bne.n	800c77e <__gethex+0x2ba>
 800c7b0:	4621      	mov	r1, r4
 800c7b2:	9802      	ldr	r0, [sp, #8]
 800c7b4:	f000 f9fe 	bl	800cbb4 <_Bfree>
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c7bc:	2750      	movs	r7, #80	; 0x50
 800c7be:	6013      	str	r3, [r2, #0]
 800c7c0:	e712      	b.n	800c5e8 <__gethex+0x124>
 800c7c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d1f3      	bne.n	800c7b0 <__gethex+0x2ec>
 800c7c8:	e7d9      	b.n	800c77e <__gethex+0x2ba>
 800c7ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d1d6      	bne.n	800c77e <__gethex+0x2ba>
 800c7d0:	e7ee      	b.n	800c7b0 <__gethex+0x2ec>
 800c7d2:	1e6f      	subs	r7, r5, #1
 800c7d4:	f1ba 0f00 	cmp.w	sl, #0
 800c7d8:	d132      	bne.n	800c840 <__gethex+0x37c>
 800c7da:	b127      	cbz	r7, 800c7e6 <__gethex+0x322>
 800c7dc:	4639      	mov	r1, r7
 800c7de:	4620      	mov	r0, r4
 800c7e0:	f000 fe3f 	bl	800d462 <__any_on>
 800c7e4:	4682      	mov	sl, r0
 800c7e6:	2101      	movs	r1, #1
 800c7e8:	117b      	asrs	r3, r7, #5
 800c7ea:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c7ee:	f007 071f 	and.w	r7, r7, #31
 800c7f2:	fa01 f707 	lsl.w	r7, r1, r7
 800c7f6:	421f      	tst	r7, r3
 800c7f8:	f04f 0702 	mov.w	r7, #2
 800c7fc:	4629      	mov	r1, r5
 800c7fe:	4620      	mov	r0, r4
 800c800:	bf18      	it	ne
 800c802:	f04a 0a02 	orrne.w	sl, sl, #2
 800c806:	1b76      	subs	r6, r6, r5
 800c808:	f7ff fdf4 	bl	800c3f4 <rshift>
 800c80c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c810:	f1ba 0f00 	cmp.w	sl, #0
 800c814:	d048      	beq.n	800c8a8 <__gethex+0x3e4>
 800c816:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c81a:	2b02      	cmp	r3, #2
 800c81c:	d015      	beq.n	800c84a <__gethex+0x386>
 800c81e:	2b03      	cmp	r3, #3
 800c820:	d017      	beq.n	800c852 <__gethex+0x38e>
 800c822:	2b01      	cmp	r3, #1
 800c824:	d109      	bne.n	800c83a <__gethex+0x376>
 800c826:	f01a 0f02 	tst.w	sl, #2
 800c82a:	d006      	beq.n	800c83a <__gethex+0x376>
 800c82c:	f8d9 0000 	ldr.w	r0, [r9]
 800c830:	ea4a 0a00 	orr.w	sl, sl, r0
 800c834:	f01a 0f01 	tst.w	sl, #1
 800c838:	d10e      	bne.n	800c858 <__gethex+0x394>
 800c83a:	f047 0710 	orr.w	r7, r7, #16
 800c83e:	e033      	b.n	800c8a8 <__gethex+0x3e4>
 800c840:	f04f 0a01 	mov.w	sl, #1
 800c844:	e7cf      	b.n	800c7e6 <__gethex+0x322>
 800c846:	2701      	movs	r7, #1
 800c848:	e7e2      	b.n	800c810 <__gethex+0x34c>
 800c84a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c84c:	f1c3 0301 	rsb	r3, r3, #1
 800c850:	9315      	str	r3, [sp, #84]	; 0x54
 800c852:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c854:	2b00      	cmp	r3, #0
 800c856:	d0f0      	beq.n	800c83a <__gethex+0x376>
 800c858:	f04f 0c00 	mov.w	ip, #0
 800c85c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c860:	f104 0314 	add.w	r3, r4, #20
 800c864:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c868:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c86c:	4618      	mov	r0, r3
 800c86e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c872:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c876:	d01c      	beq.n	800c8b2 <__gethex+0x3ee>
 800c878:	3201      	adds	r2, #1
 800c87a:	6002      	str	r2, [r0, #0]
 800c87c:	2f02      	cmp	r7, #2
 800c87e:	f104 0314 	add.w	r3, r4, #20
 800c882:	d13d      	bne.n	800c900 <__gethex+0x43c>
 800c884:	f8d8 2000 	ldr.w	r2, [r8]
 800c888:	3a01      	subs	r2, #1
 800c88a:	42b2      	cmp	r2, r6
 800c88c:	d10a      	bne.n	800c8a4 <__gethex+0x3e0>
 800c88e:	2201      	movs	r2, #1
 800c890:	1171      	asrs	r1, r6, #5
 800c892:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c896:	f006 061f 	and.w	r6, r6, #31
 800c89a:	fa02 f606 	lsl.w	r6, r2, r6
 800c89e:	421e      	tst	r6, r3
 800c8a0:	bf18      	it	ne
 800c8a2:	4617      	movne	r7, r2
 800c8a4:	f047 0720 	orr.w	r7, r7, #32
 800c8a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c8aa:	601c      	str	r4, [r3, #0]
 800c8ac:	9b05      	ldr	r3, [sp, #20]
 800c8ae:	601d      	str	r5, [r3, #0]
 800c8b0:	e69a      	b.n	800c5e8 <__gethex+0x124>
 800c8b2:	4299      	cmp	r1, r3
 800c8b4:	f843 cc04 	str.w	ip, [r3, #-4]
 800c8b8:	d8d8      	bhi.n	800c86c <__gethex+0x3a8>
 800c8ba:	68a3      	ldr	r3, [r4, #8]
 800c8bc:	459b      	cmp	fp, r3
 800c8be:	db17      	blt.n	800c8f0 <__gethex+0x42c>
 800c8c0:	6861      	ldr	r1, [r4, #4]
 800c8c2:	9802      	ldr	r0, [sp, #8]
 800c8c4:	3101      	adds	r1, #1
 800c8c6:	f000 f935 	bl	800cb34 <_Balloc>
 800c8ca:	4681      	mov	r9, r0
 800c8cc:	b918      	cbnz	r0, 800c8d6 <__gethex+0x412>
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	2184      	movs	r1, #132	; 0x84
 800c8d2:	4b19      	ldr	r3, [pc, #100]	; (800c938 <__gethex+0x474>)
 800c8d4:	e6ab      	b.n	800c62e <__gethex+0x16a>
 800c8d6:	6922      	ldr	r2, [r4, #16]
 800c8d8:	f104 010c 	add.w	r1, r4, #12
 800c8dc:	3202      	adds	r2, #2
 800c8de:	0092      	lsls	r2, r2, #2
 800c8e0:	300c      	adds	r0, #12
 800c8e2:	f000 f919 	bl	800cb18 <memcpy>
 800c8e6:	4621      	mov	r1, r4
 800c8e8:	9802      	ldr	r0, [sp, #8]
 800c8ea:	f000 f963 	bl	800cbb4 <_Bfree>
 800c8ee:	464c      	mov	r4, r9
 800c8f0:	6923      	ldr	r3, [r4, #16]
 800c8f2:	1c5a      	adds	r2, r3, #1
 800c8f4:	6122      	str	r2, [r4, #16]
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c8fc:	615a      	str	r2, [r3, #20]
 800c8fe:	e7bd      	b.n	800c87c <__gethex+0x3b8>
 800c900:	6922      	ldr	r2, [r4, #16]
 800c902:	455a      	cmp	r2, fp
 800c904:	dd0b      	ble.n	800c91e <__gethex+0x45a>
 800c906:	2101      	movs	r1, #1
 800c908:	4620      	mov	r0, r4
 800c90a:	f7ff fd73 	bl	800c3f4 <rshift>
 800c90e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c912:	3501      	adds	r5, #1
 800c914:	42ab      	cmp	r3, r5
 800c916:	f6ff aed4 	blt.w	800c6c2 <__gethex+0x1fe>
 800c91a:	2701      	movs	r7, #1
 800c91c:	e7c2      	b.n	800c8a4 <__gethex+0x3e0>
 800c91e:	f016 061f 	ands.w	r6, r6, #31
 800c922:	d0fa      	beq.n	800c91a <__gethex+0x456>
 800c924:	4453      	add	r3, sl
 800c926:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c92a:	f000 f9f5 	bl	800cd18 <__hi0bits>
 800c92e:	f1c6 0620 	rsb	r6, r6, #32
 800c932:	42b0      	cmp	r0, r6
 800c934:	dbe7      	blt.n	800c906 <__gethex+0x442>
 800c936:	e7f0      	b.n	800c91a <__gethex+0x456>
 800c938:	0800e7f0 	.word	0x0800e7f0

0800c93c <L_shift>:
 800c93c:	f1c2 0208 	rsb	r2, r2, #8
 800c940:	0092      	lsls	r2, r2, #2
 800c942:	b570      	push	{r4, r5, r6, lr}
 800c944:	f1c2 0620 	rsb	r6, r2, #32
 800c948:	6843      	ldr	r3, [r0, #4]
 800c94a:	6804      	ldr	r4, [r0, #0]
 800c94c:	fa03 f506 	lsl.w	r5, r3, r6
 800c950:	432c      	orrs	r4, r5
 800c952:	40d3      	lsrs	r3, r2
 800c954:	6004      	str	r4, [r0, #0]
 800c956:	f840 3f04 	str.w	r3, [r0, #4]!
 800c95a:	4288      	cmp	r0, r1
 800c95c:	d3f4      	bcc.n	800c948 <L_shift+0xc>
 800c95e:	bd70      	pop	{r4, r5, r6, pc}

0800c960 <__match>:
 800c960:	b530      	push	{r4, r5, lr}
 800c962:	6803      	ldr	r3, [r0, #0]
 800c964:	3301      	adds	r3, #1
 800c966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c96a:	b914      	cbnz	r4, 800c972 <__match+0x12>
 800c96c:	6003      	str	r3, [r0, #0]
 800c96e:	2001      	movs	r0, #1
 800c970:	bd30      	pop	{r4, r5, pc}
 800c972:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c976:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c97a:	2d19      	cmp	r5, #25
 800c97c:	bf98      	it	ls
 800c97e:	3220      	addls	r2, #32
 800c980:	42a2      	cmp	r2, r4
 800c982:	d0f0      	beq.n	800c966 <__match+0x6>
 800c984:	2000      	movs	r0, #0
 800c986:	e7f3      	b.n	800c970 <__match+0x10>

0800c988 <__hexnan>:
 800c988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c98c:	2500      	movs	r5, #0
 800c98e:	680b      	ldr	r3, [r1, #0]
 800c990:	4682      	mov	sl, r0
 800c992:	115e      	asrs	r6, r3, #5
 800c994:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c998:	f013 031f 	ands.w	r3, r3, #31
 800c99c:	bf18      	it	ne
 800c99e:	3604      	addne	r6, #4
 800c9a0:	1f37      	subs	r7, r6, #4
 800c9a2:	46b9      	mov	r9, r7
 800c9a4:	463c      	mov	r4, r7
 800c9a6:	46ab      	mov	fp, r5
 800c9a8:	b087      	sub	sp, #28
 800c9aa:	4690      	mov	r8, r2
 800c9ac:	6802      	ldr	r2, [r0, #0]
 800c9ae:	9301      	str	r3, [sp, #4]
 800c9b0:	f846 5c04 	str.w	r5, [r6, #-4]
 800c9b4:	9502      	str	r5, [sp, #8]
 800c9b6:	7851      	ldrb	r1, [r2, #1]
 800c9b8:	1c53      	adds	r3, r2, #1
 800c9ba:	9303      	str	r3, [sp, #12]
 800c9bc:	b341      	cbz	r1, 800ca10 <__hexnan+0x88>
 800c9be:	4608      	mov	r0, r1
 800c9c0:	9205      	str	r2, [sp, #20]
 800c9c2:	9104      	str	r1, [sp, #16]
 800c9c4:	f7ff fd69 	bl	800c49a <__hexdig_fun>
 800c9c8:	2800      	cmp	r0, #0
 800c9ca:	d14f      	bne.n	800ca6c <__hexnan+0xe4>
 800c9cc:	9904      	ldr	r1, [sp, #16]
 800c9ce:	9a05      	ldr	r2, [sp, #20]
 800c9d0:	2920      	cmp	r1, #32
 800c9d2:	d818      	bhi.n	800ca06 <__hexnan+0x7e>
 800c9d4:	9b02      	ldr	r3, [sp, #8]
 800c9d6:	459b      	cmp	fp, r3
 800c9d8:	dd13      	ble.n	800ca02 <__hexnan+0x7a>
 800c9da:	454c      	cmp	r4, r9
 800c9dc:	d206      	bcs.n	800c9ec <__hexnan+0x64>
 800c9de:	2d07      	cmp	r5, #7
 800c9e0:	dc04      	bgt.n	800c9ec <__hexnan+0x64>
 800c9e2:	462a      	mov	r2, r5
 800c9e4:	4649      	mov	r1, r9
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	f7ff ffa8 	bl	800c93c <L_shift>
 800c9ec:	4544      	cmp	r4, r8
 800c9ee:	d950      	bls.n	800ca92 <__hexnan+0x10a>
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	f1a4 0904 	sub.w	r9, r4, #4
 800c9f6:	f844 3c04 	str.w	r3, [r4, #-4]
 800c9fa:	461d      	mov	r5, r3
 800c9fc:	464c      	mov	r4, r9
 800c9fe:	f8cd b008 	str.w	fp, [sp, #8]
 800ca02:	9a03      	ldr	r2, [sp, #12]
 800ca04:	e7d7      	b.n	800c9b6 <__hexnan+0x2e>
 800ca06:	2929      	cmp	r1, #41	; 0x29
 800ca08:	d156      	bne.n	800cab8 <__hexnan+0x130>
 800ca0a:	3202      	adds	r2, #2
 800ca0c:	f8ca 2000 	str.w	r2, [sl]
 800ca10:	f1bb 0f00 	cmp.w	fp, #0
 800ca14:	d050      	beq.n	800cab8 <__hexnan+0x130>
 800ca16:	454c      	cmp	r4, r9
 800ca18:	d206      	bcs.n	800ca28 <__hexnan+0xa0>
 800ca1a:	2d07      	cmp	r5, #7
 800ca1c:	dc04      	bgt.n	800ca28 <__hexnan+0xa0>
 800ca1e:	462a      	mov	r2, r5
 800ca20:	4649      	mov	r1, r9
 800ca22:	4620      	mov	r0, r4
 800ca24:	f7ff ff8a 	bl	800c93c <L_shift>
 800ca28:	4544      	cmp	r4, r8
 800ca2a:	d934      	bls.n	800ca96 <__hexnan+0x10e>
 800ca2c:	4623      	mov	r3, r4
 800ca2e:	f1a8 0204 	sub.w	r2, r8, #4
 800ca32:	f853 1b04 	ldr.w	r1, [r3], #4
 800ca36:	429f      	cmp	r7, r3
 800ca38:	f842 1f04 	str.w	r1, [r2, #4]!
 800ca3c:	d2f9      	bcs.n	800ca32 <__hexnan+0xaa>
 800ca3e:	1b3b      	subs	r3, r7, r4
 800ca40:	f023 0303 	bic.w	r3, r3, #3
 800ca44:	3304      	adds	r3, #4
 800ca46:	3401      	adds	r4, #1
 800ca48:	3e03      	subs	r6, #3
 800ca4a:	42b4      	cmp	r4, r6
 800ca4c:	bf88      	it	hi
 800ca4e:	2304      	movhi	r3, #4
 800ca50:	2200      	movs	r2, #0
 800ca52:	4443      	add	r3, r8
 800ca54:	f843 2b04 	str.w	r2, [r3], #4
 800ca58:	429f      	cmp	r7, r3
 800ca5a:	d2fb      	bcs.n	800ca54 <__hexnan+0xcc>
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	b91b      	cbnz	r3, 800ca68 <__hexnan+0xe0>
 800ca60:	4547      	cmp	r7, r8
 800ca62:	d127      	bne.n	800cab4 <__hexnan+0x12c>
 800ca64:	2301      	movs	r3, #1
 800ca66:	603b      	str	r3, [r7, #0]
 800ca68:	2005      	movs	r0, #5
 800ca6a:	e026      	b.n	800caba <__hexnan+0x132>
 800ca6c:	3501      	adds	r5, #1
 800ca6e:	2d08      	cmp	r5, #8
 800ca70:	f10b 0b01 	add.w	fp, fp, #1
 800ca74:	dd06      	ble.n	800ca84 <__hexnan+0xfc>
 800ca76:	4544      	cmp	r4, r8
 800ca78:	d9c3      	bls.n	800ca02 <__hexnan+0x7a>
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	2501      	movs	r5, #1
 800ca7e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca82:	3c04      	subs	r4, #4
 800ca84:	6822      	ldr	r2, [r4, #0]
 800ca86:	f000 000f 	and.w	r0, r0, #15
 800ca8a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ca8e:	6022      	str	r2, [r4, #0]
 800ca90:	e7b7      	b.n	800ca02 <__hexnan+0x7a>
 800ca92:	2508      	movs	r5, #8
 800ca94:	e7b5      	b.n	800ca02 <__hexnan+0x7a>
 800ca96:	9b01      	ldr	r3, [sp, #4]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d0df      	beq.n	800ca5c <__hexnan+0xd4>
 800ca9c:	f04f 32ff 	mov.w	r2, #4294967295
 800caa0:	f1c3 0320 	rsb	r3, r3, #32
 800caa4:	fa22 f303 	lsr.w	r3, r2, r3
 800caa8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800caac:	401a      	ands	r2, r3
 800caae:	f846 2c04 	str.w	r2, [r6, #-4]
 800cab2:	e7d3      	b.n	800ca5c <__hexnan+0xd4>
 800cab4:	3f04      	subs	r7, #4
 800cab6:	e7d1      	b.n	800ca5c <__hexnan+0xd4>
 800cab8:	2004      	movs	r0, #4
 800caba:	b007      	add	sp, #28
 800cabc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cac0 <_localeconv_r>:
 800cac0:	4800      	ldr	r0, [pc, #0]	; (800cac4 <_localeconv_r+0x4>)
 800cac2:	4770      	bx	lr
 800cac4:	200002d4 	.word	0x200002d4

0800cac8 <malloc>:
 800cac8:	4b02      	ldr	r3, [pc, #8]	; (800cad4 <malloc+0xc>)
 800caca:	4601      	mov	r1, r0
 800cacc:	6818      	ldr	r0, [r3, #0]
 800cace:	f000 bd65 	b.w	800d59c <_malloc_r>
 800cad2:	bf00      	nop
 800cad4:	2000017c 	.word	0x2000017c

0800cad8 <__ascii_mbtowc>:
 800cad8:	b082      	sub	sp, #8
 800cada:	b901      	cbnz	r1, 800cade <__ascii_mbtowc+0x6>
 800cadc:	a901      	add	r1, sp, #4
 800cade:	b142      	cbz	r2, 800caf2 <__ascii_mbtowc+0x1a>
 800cae0:	b14b      	cbz	r3, 800caf6 <__ascii_mbtowc+0x1e>
 800cae2:	7813      	ldrb	r3, [r2, #0]
 800cae4:	600b      	str	r3, [r1, #0]
 800cae6:	7812      	ldrb	r2, [r2, #0]
 800cae8:	1e10      	subs	r0, r2, #0
 800caea:	bf18      	it	ne
 800caec:	2001      	movne	r0, #1
 800caee:	b002      	add	sp, #8
 800caf0:	4770      	bx	lr
 800caf2:	4610      	mov	r0, r2
 800caf4:	e7fb      	b.n	800caee <__ascii_mbtowc+0x16>
 800caf6:	f06f 0001 	mvn.w	r0, #1
 800cafa:	e7f8      	b.n	800caee <__ascii_mbtowc+0x16>

0800cafc <memchr>:
 800cafc:	4603      	mov	r3, r0
 800cafe:	b510      	push	{r4, lr}
 800cb00:	b2c9      	uxtb	r1, r1
 800cb02:	4402      	add	r2, r0
 800cb04:	4293      	cmp	r3, r2
 800cb06:	4618      	mov	r0, r3
 800cb08:	d101      	bne.n	800cb0e <memchr+0x12>
 800cb0a:	2000      	movs	r0, #0
 800cb0c:	e003      	b.n	800cb16 <memchr+0x1a>
 800cb0e:	7804      	ldrb	r4, [r0, #0]
 800cb10:	3301      	adds	r3, #1
 800cb12:	428c      	cmp	r4, r1
 800cb14:	d1f6      	bne.n	800cb04 <memchr+0x8>
 800cb16:	bd10      	pop	{r4, pc}

0800cb18 <memcpy>:
 800cb18:	440a      	add	r2, r1
 800cb1a:	4291      	cmp	r1, r2
 800cb1c:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb20:	d100      	bne.n	800cb24 <memcpy+0xc>
 800cb22:	4770      	bx	lr
 800cb24:	b510      	push	{r4, lr}
 800cb26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb2a:	4291      	cmp	r1, r2
 800cb2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb30:	d1f9      	bne.n	800cb26 <memcpy+0xe>
 800cb32:	bd10      	pop	{r4, pc}

0800cb34 <_Balloc>:
 800cb34:	b570      	push	{r4, r5, r6, lr}
 800cb36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cb38:	4604      	mov	r4, r0
 800cb3a:	460d      	mov	r5, r1
 800cb3c:	b976      	cbnz	r6, 800cb5c <_Balloc+0x28>
 800cb3e:	2010      	movs	r0, #16
 800cb40:	f7ff ffc2 	bl	800cac8 <malloc>
 800cb44:	4602      	mov	r2, r0
 800cb46:	6260      	str	r0, [r4, #36]	; 0x24
 800cb48:	b920      	cbnz	r0, 800cb54 <_Balloc+0x20>
 800cb4a:	2166      	movs	r1, #102	; 0x66
 800cb4c:	4b17      	ldr	r3, [pc, #92]	; (800cbac <_Balloc+0x78>)
 800cb4e:	4818      	ldr	r0, [pc, #96]	; (800cbb0 <_Balloc+0x7c>)
 800cb50:	f000 ff2c 	bl	800d9ac <__assert_func>
 800cb54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb58:	6006      	str	r6, [r0, #0]
 800cb5a:	60c6      	str	r6, [r0, #12]
 800cb5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cb5e:	68f3      	ldr	r3, [r6, #12]
 800cb60:	b183      	cbz	r3, 800cb84 <_Balloc+0x50>
 800cb62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb64:	68db      	ldr	r3, [r3, #12]
 800cb66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb6a:	b9b8      	cbnz	r0, 800cb9c <_Balloc+0x68>
 800cb6c:	2101      	movs	r1, #1
 800cb6e:	fa01 f605 	lsl.w	r6, r1, r5
 800cb72:	1d72      	adds	r2, r6, #5
 800cb74:	4620      	mov	r0, r4
 800cb76:	0092      	lsls	r2, r2, #2
 800cb78:	f000 fc94 	bl	800d4a4 <_calloc_r>
 800cb7c:	b160      	cbz	r0, 800cb98 <_Balloc+0x64>
 800cb7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb82:	e00e      	b.n	800cba2 <_Balloc+0x6e>
 800cb84:	2221      	movs	r2, #33	; 0x21
 800cb86:	2104      	movs	r1, #4
 800cb88:	4620      	mov	r0, r4
 800cb8a:	f000 fc8b 	bl	800d4a4 <_calloc_r>
 800cb8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb90:	60f0      	str	r0, [r6, #12]
 800cb92:	68db      	ldr	r3, [r3, #12]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d1e4      	bne.n	800cb62 <_Balloc+0x2e>
 800cb98:	2000      	movs	r0, #0
 800cb9a:	bd70      	pop	{r4, r5, r6, pc}
 800cb9c:	6802      	ldr	r2, [r0, #0]
 800cb9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cba2:	2300      	movs	r3, #0
 800cba4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cba8:	e7f7      	b.n	800cb9a <_Balloc+0x66>
 800cbaa:	bf00      	nop
 800cbac:	0800e77e 	.word	0x0800e77e
 800cbb0:	0800e87c 	.word	0x0800e87c

0800cbb4 <_Bfree>:
 800cbb4:	b570      	push	{r4, r5, r6, lr}
 800cbb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cbb8:	4605      	mov	r5, r0
 800cbba:	460c      	mov	r4, r1
 800cbbc:	b976      	cbnz	r6, 800cbdc <_Bfree+0x28>
 800cbbe:	2010      	movs	r0, #16
 800cbc0:	f7ff ff82 	bl	800cac8 <malloc>
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	6268      	str	r0, [r5, #36]	; 0x24
 800cbc8:	b920      	cbnz	r0, 800cbd4 <_Bfree+0x20>
 800cbca:	218a      	movs	r1, #138	; 0x8a
 800cbcc:	4b08      	ldr	r3, [pc, #32]	; (800cbf0 <_Bfree+0x3c>)
 800cbce:	4809      	ldr	r0, [pc, #36]	; (800cbf4 <_Bfree+0x40>)
 800cbd0:	f000 feec 	bl	800d9ac <__assert_func>
 800cbd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cbd8:	6006      	str	r6, [r0, #0]
 800cbda:	60c6      	str	r6, [r0, #12]
 800cbdc:	b13c      	cbz	r4, 800cbee <_Bfree+0x3a>
 800cbde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cbe0:	6862      	ldr	r2, [r4, #4]
 800cbe2:	68db      	ldr	r3, [r3, #12]
 800cbe4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cbe8:	6021      	str	r1, [r4, #0]
 800cbea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cbee:	bd70      	pop	{r4, r5, r6, pc}
 800cbf0:	0800e77e 	.word	0x0800e77e
 800cbf4:	0800e87c 	.word	0x0800e87c

0800cbf8 <__multadd>:
 800cbf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbfc:	4607      	mov	r7, r0
 800cbfe:	460c      	mov	r4, r1
 800cc00:	461e      	mov	r6, r3
 800cc02:	2000      	movs	r0, #0
 800cc04:	690d      	ldr	r5, [r1, #16]
 800cc06:	f101 0c14 	add.w	ip, r1, #20
 800cc0a:	f8dc 3000 	ldr.w	r3, [ip]
 800cc0e:	3001      	adds	r0, #1
 800cc10:	b299      	uxth	r1, r3
 800cc12:	fb02 6101 	mla	r1, r2, r1, r6
 800cc16:	0c1e      	lsrs	r6, r3, #16
 800cc18:	0c0b      	lsrs	r3, r1, #16
 800cc1a:	fb02 3306 	mla	r3, r2, r6, r3
 800cc1e:	b289      	uxth	r1, r1
 800cc20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cc24:	4285      	cmp	r5, r0
 800cc26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cc2a:	f84c 1b04 	str.w	r1, [ip], #4
 800cc2e:	dcec      	bgt.n	800cc0a <__multadd+0x12>
 800cc30:	b30e      	cbz	r6, 800cc76 <__multadd+0x7e>
 800cc32:	68a3      	ldr	r3, [r4, #8]
 800cc34:	42ab      	cmp	r3, r5
 800cc36:	dc19      	bgt.n	800cc6c <__multadd+0x74>
 800cc38:	6861      	ldr	r1, [r4, #4]
 800cc3a:	4638      	mov	r0, r7
 800cc3c:	3101      	adds	r1, #1
 800cc3e:	f7ff ff79 	bl	800cb34 <_Balloc>
 800cc42:	4680      	mov	r8, r0
 800cc44:	b928      	cbnz	r0, 800cc52 <__multadd+0x5a>
 800cc46:	4602      	mov	r2, r0
 800cc48:	21b5      	movs	r1, #181	; 0xb5
 800cc4a:	4b0c      	ldr	r3, [pc, #48]	; (800cc7c <__multadd+0x84>)
 800cc4c:	480c      	ldr	r0, [pc, #48]	; (800cc80 <__multadd+0x88>)
 800cc4e:	f000 fead 	bl	800d9ac <__assert_func>
 800cc52:	6922      	ldr	r2, [r4, #16]
 800cc54:	f104 010c 	add.w	r1, r4, #12
 800cc58:	3202      	adds	r2, #2
 800cc5a:	0092      	lsls	r2, r2, #2
 800cc5c:	300c      	adds	r0, #12
 800cc5e:	f7ff ff5b 	bl	800cb18 <memcpy>
 800cc62:	4621      	mov	r1, r4
 800cc64:	4638      	mov	r0, r7
 800cc66:	f7ff ffa5 	bl	800cbb4 <_Bfree>
 800cc6a:	4644      	mov	r4, r8
 800cc6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc70:	3501      	adds	r5, #1
 800cc72:	615e      	str	r6, [r3, #20]
 800cc74:	6125      	str	r5, [r4, #16]
 800cc76:	4620      	mov	r0, r4
 800cc78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc7c:	0800e7f0 	.word	0x0800e7f0
 800cc80:	0800e87c 	.word	0x0800e87c

0800cc84 <__s2b>:
 800cc84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc88:	4615      	mov	r5, r2
 800cc8a:	2209      	movs	r2, #9
 800cc8c:	461f      	mov	r7, r3
 800cc8e:	3308      	adds	r3, #8
 800cc90:	460c      	mov	r4, r1
 800cc92:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc96:	4606      	mov	r6, r0
 800cc98:	2201      	movs	r2, #1
 800cc9a:	2100      	movs	r1, #0
 800cc9c:	429a      	cmp	r2, r3
 800cc9e:	db09      	blt.n	800ccb4 <__s2b+0x30>
 800cca0:	4630      	mov	r0, r6
 800cca2:	f7ff ff47 	bl	800cb34 <_Balloc>
 800cca6:	b940      	cbnz	r0, 800ccba <__s2b+0x36>
 800cca8:	4602      	mov	r2, r0
 800ccaa:	21ce      	movs	r1, #206	; 0xce
 800ccac:	4b18      	ldr	r3, [pc, #96]	; (800cd10 <__s2b+0x8c>)
 800ccae:	4819      	ldr	r0, [pc, #100]	; (800cd14 <__s2b+0x90>)
 800ccb0:	f000 fe7c 	bl	800d9ac <__assert_func>
 800ccb4:	0052      	lsls	r2, r2, #1
 800ccb6:	3101      	adds	r1, #1
 800ccb8:	e7f0      	b.n	800cc9c <__s2b+0x18>
 800ccba:	9b08      	ldr	r3, [sp, #32]
 800ccbc:	2d09      	cmp	r5, #9
 800ccbe:	6143      	str	r3, [r0, #20]
 800ccc0:	f04f 0301 	mov.w	r3, #1
 800ccc4:	6103      	str	r3, [r0, #16]
 800ccc6:	dd16      	ble.n	800ccf6 <__s2b+0x72>
 800ccc8:	f104 0909 	add.w	r9, r4, #9
 800cccc:	46c8      	mov	r8, r9
 800ccce:	442c      	add	r4, r5
 800ccd0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ccd4:	4601      	mov	r1, r0
 800ccd6:	220a      	movs	r2, #10
 800ccd8:	4630      	mov	r0, r6
 800ccda:	3b30      	subs	r3, #48	; 0x30
 800ccdc:	f7ff ff8c 	bl	800cbf8 <__multadd>
 800cce0:	45a0      	cmp	r8, r4
 800cce2:	d1f5      	bne.n	800ccd0 <__s2b+0x4c>
 800cce4:	f1a5 0408 	sub.w	r4, r5, #8
 800cce8:	444c      	add	r4, r9
 800ccea:	1b2d      	subs	r5, r5, r4
 800ccec:	1963      	adds	r3, r4, r5
 800ccee:	42bb      	cmp	r3, r7
 800ccf0:	db04      	blt.n	800ccfc <__s2b+0x78>
 800ccf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccf6:	2509      	movs	r5, #9
 800ccf8:	340a      	adds	r4, #10
 800ccfa:	e7f6      	b.n	800ccea <__s2b+0x66>
 800ccfc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cd00:	4601      	mov	r1, r0
 800cd02:	220a      	movs	r2, #10
 800cd04:	4630      	mov	r0, r6
 800cd06:	3b30      	subs	r3, #48	; 0x30
 800cd08:	f7ff ff76 	bl	800cbf8 <__multadd>
 800cd0c:	e7ee      	b.n	800ccec <__s2b+0x68>
 800cd0e:	bf00      	nop
 800cd10:	0800e7f0 	.word	0x0800e7f0
 800cd14:	0800e87c 	.word	0x0800e87c

0800cd18 <__hi0bits>:
 800cd18:	0c02      	lsrs	r2, r0, #16
 800cd1a:	0412      	lsls	r2, r2, #16
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	b9ca      	cbnz	r2, 800cd54 <__hi0bits+0x3c>
 800cd20:	0403      	lsls	r3, r0, #16
 800cd22:	2010      	movs	r0, #16
 800cd24:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800cd28:	bf04      	itt	eq
 800cd2a:	021b      	lsleq	r3, r3, #8
 800cd2c:	3008      	addeq	r0, #8
 800cd2e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cd32:	bf04      	itt	eq
 800cd34:	011b      	lsleq	r3, r3, #4
 800cd36:	3004      	addeq	r0, #4
 800cd38:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cd3c:	bf04      	itt	eq
 800cd3e:	009b      	lsleq	r3, r3, #2
 800cd40:	3002      	addeq	r0, #2
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	db05      	blt.n	800cd52 <__hi0bits+0x3a>
 800cd46:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800cd4a:	f100 0001 	add.w	r0, r0, #1
 800cd4e:	bf08      	it	eq
 800cd50:	2020      	moveq	r0, #32
 800cd52:	4770      	bx	lr
 800cd54:	2000      	movs	r0, #0
 800cd56:	e7e5      	b.n	800cd24 <__hi0bits+0xc>

0800cd58 <__lo0bits>:
 800cd58:	6803      	ldr	r3, [r0, #0]
 800cd5a:	4602      	mov	r2, r0
 800cd5c:	f013 0007 	ands.w	r0, r3, #7
 800cd60:	d00b      	beq.n	800cd7a <__lo0bits+0x22>
 800cd62:	07d9      	lsls	r1, r3, #31
 800cd64:	d421      	bmi.n	800cdaa <__lo0bits+0x52>
 800cd66:	0798      	lsls	r0, r3, #30
 800cd68:	bf49      	itett	mi
 800cd6a:	085b      	lsrmi	r3, r3, #1
 800cd6c:	089b      	lsrpl	r3, r3, #2
 800cd6e:	2001      	movmi	r0, #1
 800cd70:	6013      	strmi	r3, [r2, #0]
 800cd72:	bf5c      	itt	pl
 800cd74:	2002      	movpl	r0, #2
 800cd76:	6013      	strpl	r3, [r2, #0]
 800cd78:	4770      	bx	lr
 800cd7a:	b299      	uxth	r1, r3
 800cd7c:	b909      	cbnz	r1, 800cd82 <__lo0bits+0x2a>
 800cd7e:	2010      	movs	r0, #16
 800cd80:	0c1b      	lsrs	r3, r3, #16
 800cd82:	b2d9      	uxtb	r1, r3
 800cd84:	b909      	cbnz	r1, 800cd8a <__lo0bits+0x32>
 800cd86:	3008      	adds	r0, #8
 800cd88:	0a1b      	lsrs	r3, r3, #8
 800cd8a:	0719      	lsls	r1, r3, #28
 800cd8c:	bf04      	itt	eq
 800cd8e:	091b      	lsreq	r3, r3, #4
 800cd90:	3004      	addeq	r0, #4
 800cd92:	0799      	lsls	r1, r3, #30
 800cd94:	bf04      	itt	eq
 800cd96:	089b      	lsreq	r3, r3, #2
 800cd98:	3002      	addeq	r0, #2
 800cd9a:	07d9      	lsls	r1, r3, #31
 800cd9c:	d403      	bmi.n	800cda6 <__lo0bits+0x4e>
 800cd9e:	085b      	lsrs	r3, r3, #1
 800cda0:	f100 0001 	add.w	r0, r0, #1
 800cda4:	d003      	beq.n	800cdae <__lo0bits+0x56>
 800cda6:	6013      	str	r3, [r2, #0]
 800cda8:	4770      	bx	lr
 800cdaa:	2000      	movs	r0, #0
 800cdac:	4770      	bx	lr
 800cdae:	2020      	movs	r0, #32
 800cdb0:	4770      	bx	lr
	...

0800cdb4 <__i2b>:
 800cdb4:	b510      	push	{r4, lr}
 800cdb6:	460c      	mov	r4, r1
 800cdb8:	2101      	movs	r1, #1
 800cdba:	f7ff febb 	bl	800cb34 <_Balloc>
 800cdbe:	4602      	mov	r2, r0
 800cdc0:	b928      	cbnz	r0, 800cdce <__i2b+0x1a>
 800cdc2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cdc6:	4b04      	ldr	r3, [pc, #16]	; (800cdd8 <__i2b+0x24>)
 800cdc8:	4804      	ldr	r0, [pc, #16]	; (800cddc <__i2b+0x28>)
 800cdca:	f000 fdef 	bl	800d9ac <__assert_func>
 800cdce:	2301      	movs	r3, #1
 800cdd0:	6144      	str	r4, [r0, #20]
 800cdd2:	6103      	str	r3, [r0, #16]
 800cdd4:	bd10      	pop	{r4, pc}
 800cdd6:	bf00      	nop
 800cdd8:	0800e7f0 	.word	0x0800e7f0
 800cddc:	0800e87c 	.word	0x0800e87c

0800cde0 <__multiply>:
 800cde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde4:	4691      	mov	r9, r2
 800cde6:	690a      	ldr	r2, [r1, #16]
 800cde8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cdec:	460c      	mov	r4, r1
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	bfbe      	ittt	lt
 800cdf2:	460b      	movlt	r3, r1
 800cdf4:	464c      	movlt	r4, r9
 800cdf6:	4699      	movlt	r9, r3
 800cdf8:	6927      	ldr	r7, [r4, #16]
 800cdfa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cdfe:	68a3      	ldr	r3, [r4, #8]
 800ce00:	6861      	ldr	r1, [r4, #4]
 800ce02:	eb07 060a 	add.w	r6, r7, sl
 800ce06:	42b3      	cmp	r3, r6
 800ce08:	b085      	sub	sp, #20
 800ce0a:	bfb8      	it	lt
 800ce0c:	3101      	addlt	r1, #1
 800ce0e:	f7ff fe91 	bl	800cb34 <_Balloc>
 800ce12:	b930      	cbnz	r0, 800ce22 <__multiply+0x42>
 800ce14:	4602      	mov	r2, r0
 800ce16:	f240 115d 	movw	r1, #349	; 0x15d
 800ce1a:	4b43      	ldr	r3, [pc, #268]	; (800cf28 <__multiply+0x148>)
 800ce1c:	4843      	ldr	r0, [pc, #268]	; (800cf2c <__multiply+0x14c>)
 800ce1e:	f000 fdc5 	bl	800d9ac <__assert_func>
 800ce22:	f100 0514 	add.w	r5, r0, #20
 800ce26:	462b      	mov	r3, r5
 800ce28:	2200      	movs	r2, #0
 800ce2a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ce2e:	4543      	cmp	r3, r8
 800ce30:	d321      	bcc.n	800ce76 <__multiply+0x96>
 800ce32:	f104 0314 	add.w	r3, r4, #20
 800ce36:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ce3a:	f109 0314 	add.w	r3, r9, #20
 800ce3e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ce42:	9202      	str	r2, [sp, #8]
 800ce44:	1b3a      	subs	r2, r7, r4
 800ce46:	3a15      	subs	r2, #21
 800ce48:	f022 0203 	bic.w	r2, r2, #3
 800ce4c:	3204      	adds	r2, #4
 800ce4e:	f104 0115 	add.w	r1, r4, #21
 800ce52:	428f      	cmp	r7, r1
 800ce54:	bf38      	it	cc
 800ce56:	2204      	movcc	r2, #4
 800ce58:	9201      	str	r2, [sp, #4]
 800ce5a:	9a02      	ldr	r2, [sp, #8]
 800ce5c:	9303      	str	r3, [sp, #12]
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	d80c      	bhi.n	800ce7c <__multiply+0x9c>
 800ce62:	2e00      	cmp	r6, #0
 800ce64:	dd03      	ble.n	800ce6e <__multiply+0x8e>
 800ce66:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d059      	beq.n	800cf22 <__multiply+0x142>
 800ce6e:	6106      	str	r6, [r0, #16]
 800ce70:	b005      	add	sp, #20
 800ce72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce76:	f843 2b04 	str.w	r2, [r3], #4
 800ce7a:	e7d8      	b.n	800ce2e <__multiply+0x4e>
 800ce7c:	f8b3 a000 	ldrh.w	sl, [r3]
 800ce80:	f1ba 0f00 	cmp.w	sl, #0
 800ce84:	d023      	beq.n	800cece <__multiply+0xee>
 800ce86:	46a9      	mov	r9, r5
 800ce88:	f04f 0c00 	mov.w	ip, #0
 800ce8c:	f104 0e14 	add.w	lr, r4, #20
 800ce90:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ce94:	f8d9 1000 	ldr.w	r1, [r9]
 800ce98:	fa1f fb82 	uxth.w	fp, r2
 800ce9c:	b289      	uxth	r1, r1
 800ce9e:	fb0a 110b 	mla	r1, sl, fp, r1
 800cea2:	4461      	add	r1, ip
 800cea4:	f8d9 c000 	ldr.w	ip, [r9]
 800cea8:	0c12      	lsrs	r2, r2, #16
 800ceaa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ceae:	fb0a c202 	mla	r2, sl, r2, ip
 800ceb2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ceb6:	b289      	uxth	r1, r1
 800ceb8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cebc:	4577      	cmp	r7, lr
 800cebe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cec2:	f849 1b04 	str.w	r1, [r9], #4
 800cec6:	d8e3      	bhi.n	800ce90 <__multiply+0xb0>
 800cec8:	9a01      	ldr	r2, [sp, #4]
 800ceca:	f845 c002 	str.w	ip, [r5, r2]
 800cece:	9a03      	ldr	r2, [sp, #12]
 800ced0:	3304      	adds	r3, #4
 800ced2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ced6:	f1b9 0f00 	cmp.w	r9, #0
 800ceda:	d020      	beq.n	800cf1e <__multiply+0x13e>
 800cedc:	46ae      	mov	lr, r5
 800cede:	f04f 0a00 	mov.w	sl, #0
 800cee2:	6829      	ldr	r1, [r5, #0]
 800cee4:	f104 0c14 	add.w	ip, r4, #20
 800cee8:	f8bc b000 	ldrh.w	fp, [ip]
 800ceec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cef0:	b289      	uxth	r1, r1
 800cef2:	fb09 220b 	mla	r2, r9, fp, r2
 800cef6:	4492      	add	sl, r2
 800cef8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cefc:	f84e 1b04 	str.w	r1, [lr], #4
 800cf00:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cf04:	f8be 1000 	ldrh.w	r1, [lr]
 800cf08:	0c12      	lsrs	r2, r2, #16
 800cf0a:	fb09 1102 	mla	r1, r9, r2, r1
 800cf0e:	4567      	cmp	r7, ip
 800cf10:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cf14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cf18:	d8e6      	bhi.n	800cee8 <__multiply+0x108>
 800cf1a:	9a01      	ldr	r2, [sp, #4]
 800cf1c:	50a9      	str	r1, [r5, r2]
 800cf1e:	3504      	adds	r5, #4
 800cf20:	e79b      	b.n	800ce5a <__multiply+0x7a>
 800cf22:	3e01      	subs	r6, #1
 800cf24:	e79d      	b.n	800ce62 <__multiply+0x82>
 800cf26:	bf00      	nop
 800cf28:	0800e7f0 	.word	0x0800e7f0
 800cf2c:	0800e87c 	.word	0x0800e87c

0800cf30 <__pow5mult>:
 800cf30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf34:	4615      	mov	r5, r2
 800cf36:	f012 0203 	ands.w	r2, r2, #3
 800cf3a:	4606      	mov	r6, r0
 800cf3c:	460f      	mov	r7, r1
 800cf3e:	d007      	beq.n	800cf50 <__pow5mult+0x20>
 800cf40:	4c25      	ldr	r4, [pc, #148]	; (800cfd8 <__pow5mult+0xa8>)
 800cf42:	3a01      	subs	r2, #1
 800cf44:	2300      	movs	r3, #0
 800cf46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf4a:	f7ff fe55 	bl	800cbf8 <__multadd>
 800cf4e:	4607      	mov	r7, r0
 800cf50:	10ad      	asrs	r5, r5, #2
 800cf52:	d03d      	beq.n	800cfd0 <__pow5mult+0xa0>
 800cf54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cf56:	b97c      	cbnz	r4, 800cf78 <__pow5mult+0x48>
 800cf58:	2010      	movs	r0, #16
 800cf5a:	f7ff fdb5 	bl	800cac8 <malloc>
 800cf5e:	4602      	mov	r2, r0
 800cf60:	6270      	str	r0, [r6, #36]	; 0x24
 800cf62:	b928      	cbnz	r0, 800cf70 <__pow5mult+0x40>
 800cf64:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cf68:	4b1c      	ldr	r3, [pc, #112]	; (800cfdc <__pow5mult+0xac>)
 800cf6a:	481d      	ldr	r0, [pc, #116]	; (800cfe0 <__pow5mult+0xb0>)
 800cf6c:	f000 fd1e 	bl	800d9ac <__assert_func>
 800cf70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf74:	6004      	str	r4, [r0, #0]
 800cf76:	60c4      	str	r4, [r0, #12]
 800cf78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cf7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf80:	b94c      	cbnz	r4, 800cf96 <__pow5mult+0x66>
 800cf82:	f240 2171 	movw	r1, #625	; 0x271
 800cf86:	4630      	mov	r0, r6
 800cf88:	f7ff ff14 	bl	800cdb4 <__i2b>
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	4604      	mov	r4, r0
 800cf90:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf94:	6003      	str	r3, [r0, #0]
 800cf96:	f04f 0900 	mov.w	r9, #0
 800cf9a:	07eb      	lsls	r3, r5, #31
 800cf9c:	d50a      	bpl.n	800cfb4 <__pow5mult+0x84>
 800cf9e:	4639      	mov	r1, r7
 800cfa0:	4622      	mov	r2, r4
 800cfa2:	4630      	mov	r0, r6
 800cfa4:	f7ff ff1c 	bl	800cde0 <__multiply>
 800cfa8:	4680      	mov	r8, r0
 800cfaa:	4639      	mov	r1, r7
 800cfac:	4630      	mov	r0, r6
 800cfae:	f7ff fe01 	bl	800cbb4 <_Bfree>
 800cfb2:	4647      	mov	r7, r8
 800cfb4:	106d      	asrs	r5, r5, #1
 800cfb6:	d00b      	beq.n	800cfd0 <__pow5mult+0xa0>
 800cfb8:	6820      	ldr	r0, [r4, #0]
 800cfba:	b938      	cbnz	r0, 800cfcc <__pow5mult+0x9c>
 800cfbc:	4622      	mov	r2, r4
 800cfbe:	4621      	mov	r1, r4
 800cfc0:	4630      	mov	r0, r6
 800cfc2:	f7ff ff0d 	bl	800cde0 <__multiply>
 800cfc6:	6020      	str	r0, [r4, #0]
 800cfc8:	f8c0 9000 	str.w	r9, [r0]
 800cfcc:	4604      	mov	r4, r0
 800cfce:	e7e4      	b.n	800cf9a <__pow5mult+0x6a>
 800cfd0:	4638      	mov	r0, r7
 800cfd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfd6:	bf00      	nop
 800cfd8:	0800e9c8 	.word	0x0800e9c8
 800cfdc:	0800e77e 	.word	0x0800e77e
 800cfe0:	0800e87c 	.word	0x0800e87c

0800cfe4 <__lshift>:
 800cfe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfe8:	460c      	mov	r4, r1
 800cfea:	4607      	mov	r7, r0
 800cfec:	4691      	mov	r9, r2
 800cfee:	6923      	ldr	r3, [r4, #16]
 800cff0:	6849      	ldr	r1, [r1, #4]
 800cff2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cff6:	68a3      	ldr	r3, [r4, #8]
 800cff8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cffc:	f108 0601 	add.w	r6, r8, #1
 800d000:	42b3      	cmp	r3, r6
 800d002:	db0b      	blt.n	800d01c <__lshift+0x38>
 800d004:	4638      	mov	r0, r7
 800d006:	f7ff fd95 	bl	800cb34 <_Balloc>
 800d00a:	4605      	mov	r5, r0
 800d00c:	b948      	cbnz	r0, 800d022 <__lshift+0x3e>
 800d00e:	4602      	mov	r2, r0
 800d010:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d014:	4b29      	ldr	r3, [pc, #164]	; (800d0bc <__lshift+0xd8>)
 800d016:	482a      	ldr	r0, [pc, #168]	; (800d0c0 <__lshift+0xdc>)
 800d018:	f000 fcc8 	bl	800d9ac <__assert_func>
 800d01c:	3101      	adds	r1, #1
 800d01e:	005b      	lsls	r3, r3, #1
 800d020:	e7ee      	b.n	800d000 <__lshift+0x1c>
 800d022:	2300      	movs	r3, #0
 800d024:	f100 0114 	add.w	r1, r0, #20
 800d028:	f100 0210 	add.w	r2, r0, #16
 800d02c:	4618      	mov	r0, r3
 800d02e:	4553      	cmp	r3, sl
 800d030:	db37      	blt.n	800d0a2 <__lshift+0xbe>
 800d032:	6920      	ldr	r0, [r4, #16]
 800d034:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d038:	f104 0314 	add.w	r3, r4, #20
 800d03c:	f019 091f 	ands.w	r9, r9, #31
 800d040:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d044:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d048:	d02f      	beq.n	800d0aa <__lshift+0xc6>
 800d04a:	468a      	mov	sl, r1
 800d04c:	f04f 0c00 	mov.w	ip, #0
 800d050:	f1c9 0e20 	rsb	lr, r9, #32
 800d054:	681a      	ldr	r2, [r3, #0]
 800d056:	fa02 f209 	lsl.w	r2, r2, r9
 800d05a:	ea42 020c 	orr.w	r2, r2, ip
 800d05e:	f84a 2b04 	str.w	r2, [sl], #4
 800d062:	f853 2b04 	ldr.w	r2, [r3], #4
 800d066:	4298      	cmp	r0, r3
 800d068:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d06c:	d8f2      	bhi.n	800d054 <__lshift+0x70>
 800d06e:	1b03      	subs	r3, r0, r4
 800d070:	3b15      	subs	r3, #21
 800d072:	f023 0303 	bic.w	r3, r3, #3
 800d076:	3304      	adds	r3, #4
 800d078:	f104 0215 	add.w	r2, r4, #21
 800d07c:	4290      	cmp	r0, r2
 800d07e:	bf38      	it	cc
 800d080:	2304      	movcc	r3, #4
 800d082:	f841 c003 	str.w	ip, [r1, r3]
 800d086:	f1bc 0f00 	cmp.w	ip, #0
 800d08a:	d001      	beq.n	800d090 <__lshift+0xac>
 800d08c:	f108 0602 	add.w	r6, r8, #2
 800d090:	3e01      	subs	r6, #1
 800d092:	4638      	mov	r0, r7
 800d094:	4621      	mov	r1, r4
 800d096:	612e      	str	r6, [r5, #16]
 800d098:	f7ff fd8c 	bl	800cbb4 <_Bfree>
 800d09c:	4628      	mov	r0, r5
 800d09e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	e7c1      	b.n	800d02e <__lshift+0x4a>
 800d0aa:	3904      	subs	r1, #4
 800d0ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0b0:	4298      	cmp	r0, r3
 800d0b2:	f841 2f04 	str.w	r2, [r1, #4]!
 800d0b6:	d8f9      	bhi.n	800d0ac <__lshift+0xc8>
 800d0b8:	e7ea      	b.n	800d090 <__lshift+0xac>
 800d0ba:	bf00      	nop
 800d0bc:	0800e7f0 	.word	0x0800e7f0
 800d0c0:	0800e87c 	.word	0x0800e87c

0800d0c4 <__mcmp>:
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	690a      	ldr	r2, [r1, #16]
 800d0c8:	6900      	ldr	r0, [r0, #16]
 800d0ca:	b530      	push	{r4, r5, lr}
 800d0cc:	1a80      	subs	r0, r0, r2
 800d0ce:	d10d      	bne.n	800d0ec <__mcmp+0x28>
 800d0d0:	3314      	adds	r3, #20
 800d0d2:	3114      	adds	r1, #20
 800d0d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d0d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d0dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d0e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d0e4:	4295      	cmp	r5, r2
 800d0e6:	d002      	beq.n	800d0ee <__mcmp+0x2a>
 800d0e8:	d304      	bcc.n	800d0f4 <__mcmp+0x30>
 800d0ea:	2001      	movs	r0, #1
 800d0ec:	bd30      	pop	{r4, r5, pc}
 800d0ee:	42a3      	cmp	r3, r4
 800d0f0:	d3f4      	bcc.n	800d0dc <__mcmp+0x18>
 800d0f2:	e7fb      	b.n	800d0ec <__mcmp+0x28>
 800d0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d0f8:	e7f8      	b.n	800d0ec <__mcmp+0x28>
	...

0800d0fc <__mdiff>:
 800d0fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d100:	460d      	mov	r5, r1
 800d102:	4607      	mov	r7, r0
 800d104:	4611      	mov	r1, r2
 800d106:	4628      	mov	r0, r5
 800d108:	4614      	mov	r4, r2
 800d10a:	f7ff ffdb 	bl	800d0c4 <__mcmp>
 800d10e:	1e06      	subs	r6, r0, #0
 800d110:	d111      	bne.n	800d136 <__mdiff+0x3a>
 800d112:	4631      	mov	r1, r6
 800d114:	4638      	mov	r0, r7
 800d116:	f7ff fd0d 	bl	800cb34 <_Balloc>
 800d11a:	4602      	mov	r2, r0
 800d11c:	b928      	cbnz	r0, 800d12a <__mdiff+0x2e>
 800d11e:	f240 2132 	movw	r1, #562	; 0x232
 800d122:	4b3a      	ldr	r3, [pc, #232]	; (800d20c <__mdiff+0x110>)
 800d124:	483a      	ldr	r0, [pc, #232]	; (800d210 <__mdiff+0x114>)
 800d126:	f000 fc41 	bl	800d9ac <__assert_func>
 800d12a:	2301      	movs	r3, #1
 800d12c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d130:	4610      	mov	r0, r2
 800d132:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d136:	bfa4      	itt	ge
 800d138:	4623      	movge	r3, r4
 800d13a:	462c      	movge	r4, r5
 800d13c:	4638      	mov	r0, r7
 800d13e:	6861      	ldr	r1, [r4, #4]
 800d140:	bfa6      	itte	ge
 800d142:	461d      	movge	r5, r3
 800d144:	2600      	movge	r6, #0
 800d146:	2601      	movlt	r6, #1
 800d148:	f7ff fcf4 	bl	800cb34 <_Balloc>
 800d14c:	4602      	mov	r2, r0
 800d14e:	b918      	cbnz	r0, 800d158 <__mdiff+0x5c>
 800d150:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d154:	4b2d      	ldr	r3, [pc, #180]	; (800d20c <__mdiff+0x110>)
 800d156:	e7e5      	b.n	800d124 <__mdiff+0x28>
 800d158:	f102 0814 	add.w	r8, r2, #20
 800d15c:	46c2      	mov	sl, r8
 800d15e:	f04f 0c00 	mov.w	ip, #0
 800d162:	6927      	ldr	r7, [r4, #16]
 800d164:	60c6      	str	r6, [r0, #12]
 800d166:	692e      	ldr	r6, [r5, #16]
 800d168:	f104 0014 	add.w	r0, r4, #20
 800d16c:	f105 0914 	add.w	r9, r5, #20
 800d170:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800d174:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d178:	3410      	adds	r4, #16
 800d17a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800d17e:	f859 3b04 	ldr.w	r3, [r9], #4
 800d182:	fa1f f18b 	uxth.w	r1, fp
 800d186:	448c      	add	ip, r1
 800d188:	b299      	uxth	r1, r3
 800d18a:	0c1b      	lsrs	r3, r3, #16
 800d18c:	ebac 0101 	sub.w	r1, ip, r1
 800d190:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d194:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d198:	b289      	uxth	r1, r1
 800d19a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d19e:	454e      	cmp	r6, r9
 800d1a0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d1a4:	f84a 3b04 	str.w	r3, [sl], #4
 800d1a8:	d8e7      	bhi.n	800d17a <__mdiff+0x7e>
 800d1aa:	1b73      	subs	r3, r6, r5
 800d1ac:	3b15      	subs	r3, #21
 800d1ae:	f023 0303 	bic.w	r3, r3, #3
 800d1b2:	3515      	adds	r5, #21
 800d1b4:	3304      	adds	r3, #4
 800d1b6:	42ae      	cmp	r6, r5
 800d1b8:	bf38      	it	cc
 800d1ba:	2304      	movcc	r3, #4
 800d1bc:	4418      	add	r0, r3
 800d1be:	4443      	add	r3, r8
 800d1c0:	461e      	mov	r6, r3
 800d1c2:	4605      	mov	r5, r0
 800d1c4:	4575      	cmp	r5, lr
 800d1c6:	d30e      	bcc.n	800d1e6 <__mdiff+0xea>
 800d1c8:	f10e 0103 	add.w	r1, lr, #3
 800d1cc:	1a09      	subs	r1, r1, r0
 800d1ce:	f021 0103 	bic.w	r1, r1, #3
 800d1d2:	3803      	subs	r0, #3
 800d1d4:	4586      	cmp	lr, r0
 800d1d6:	bf38      	it	cc
 800d1d8:	2100      	movcc	r1, #0
 800d1da:	4419      	add	r1, r3
 800d1dc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d1e0:	b18b      	cbz	r3, 800d206 <__mdiff+0x10a>
 800d1e2:	6117      	str	r7, [r2, #16]
 800d1e4:	e7a4      	b.n	800d130 <__mdiff+0x34>
 800d1e6:	f855 8b04 	ldr.w	r8, [r5], #4
 800d1ea:	fa1f f188 	uxth.w	r1, r8
 800d1ee:	4461      	add	r1, ip
 800d1f0:	140c      	asrs	r4, r1, #16
 800d1f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d1f6:	b289      	uxth	r1, r1
 800d1f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d1fc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800d200:	f846 1b04 	str.w	r1, [r6], #4
 800d204:	e7de      	b.n	800d1c4 <__mdiff+0xc8>
 800d206:	3f01      	subs	r7, #1
 800d208:	e7e8      	b.n	800d1dc <__mdiff+0xe0>
 800d20a:	bf00      	nop
 800d20c:	0800e7f0 	.word	0x0800e7f0
 800d210:	0800e87c 	.word	0x0800e87c

0800d214 <__ulp>:
 800d214:	4b11      	ldr	r3, [pc, #68]	; (800d25c <__ulp+0x48>)
 800d216:	400b      	ands	r3, r1
 800d218:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	dd02      	ble.n	800d226 <__ulp+0x12>
 800d220:	2000      	movs	r0, #0
 800d222:	4619      	mov	r1, r3
 800d224:	4770      	bx	lr
 800d226:	425b      	negs	r3, r3
 800d228:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d22c:	f04f 0000 	mov.w	r0, #0
 800d230:	f04f 0100 	mov.w	r1, #0
 800d234:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d238:	da04      	bge.n	800d244 <__ulp+0x30>
 800d23a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d23e:	fa43 f102 	asr.w	r1, r3, r2
 800d242:	4770      	bx	lr
 800d244:	f1a2 0314 	sub.w	r3, r2, #20
 800d248:	2b1e      	cmp	r3, #30
 800d24a:	bfd6      	itet	le
 800d24c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d250:	2301      	movgt	r3, #1
 800d252:	fa22 f303 	lsrle.w	r3, r2, r3
 800d256:	4618      	mov	r0, r3
 800d258:	4770      	bx	lr
 800d25a:	bf00      	nop
 800d25c:	7ff00000 	.word	0x7ff00000

0800d260 <__b2d>:
 800d260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d264:	6907      	ldr	r7, [r0, #16]
 800d266:	f100 0914 	add.w	r9, r0, #20
 800d26a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800d26e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800d272:	f1a7 0804 	sub.w	r8, r7, #4
 800d276:	4630      	mov	r0, r6
 800d278:	f7ff fd4e 	bl	800cd18 <__hi0bits>
 800d27c:	f1c0 0320 	rsb	r3, r0, #32
 800d280:	280a      	cmp	r0, #10
 800d282:	600b      	str	r3, [r1, #0]
 800d284:	491f      	ldr	r1, [pc, #124]	; (800d304 <__b2d+0xa4>)
 800d286:	dc17      	bgt.n	800d2b8 <__b2d+0x58>
 800d288:	45c1      	cmp	r9, r8
 800d28a:	bf28      	it	cs
 800d28c:	2200      	movcs	r2, #0
 800d28e:	f1c0 0c0b 	rsb	ip, r0, #11
 800d292:	fa26 f30c 	lsr.w	r3, r6, ip
 800d296:	bf38      	it	cc
 800d298:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d29c:	ea43 0501 	orr.w	r5, r3, r1
 800d2a0:	f100 0315 	add.w	r3, r0, #21
 800d2a4:	fa06 f303 	lsl.w	r3, r6, r3
 800d2a8:	fa22 f20c 	lsr.w	r2, r2, ip
 800d2ac:	ea43 0402 	orr.w	r4, r3, r2
 800d2b0:	4620      	mov	r0, r4
 800d2b2:	4629      	mov	r1, r5
 800d2b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2b8:	45c1      	cmp	r9, r8
 800d2ba:	bf2e      	itee	cs
 800d2bc:	2200      	movcs	r2, #0
 800d2be:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d2c2:	f1a7 0808 	subcc.w	r8, r7, #8
 800d2c6:	f1b0 030b 	subs.w	r3, r0, #11
 800d2ca:	d016      	beq.n	800d2fa <__b2d+0x9a>
 800d2cc:	f1c3 0720 	rsb	r7, r3, #32
 800d2d0:	fa22 f107 	lsr.w	r1, r2, r7
 800d2d4:	45c8      	cmp	r8, r9
 800d2d6:	fa06 f603 	lsl.w	r6, r6, r3
 800d2da:	ea46 0601 	orr.w	r6, r6, r1
 800d2de:	bf94      	ite	ls
 800d2e0:	2100      	movls	r1, #0
 800d2e2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800d2e6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800d2ea:	fa02 f003 	lsl.w	r0, r2, r3
 800d2ee:	40f9      	lsrs	r1, r7
 800d2f0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d2f4:	ea40 0401 	orr.w	r4, r0, r1
 800d2f8:	e7da      	b.n	800d2b0 <__b2d+0x50>
 800d2fa:	4614      	mov	r4, r2
 800d2fc:	ea46 0501 	orr.w	r5, r6, r1
 800d300:	e7d6      	b.n	800d2b0 <__b2d+0x50>
 800d302:	bf00      	nop
 800d304:	3ff00000 	.word	0x3ff00000

0800d308 <__d2b>:
 800d308:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d30c:	2101      	movs	r1, #1
 800d30e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800d312:	4690      	mov	r8, r2
 800d314:	461d      	mov	r5, r3
 800d316:	f7ff fc0d 	bl	800cb34 <_Balloc>
 800d31a:	4604      	mov	r4, r0
 800d31c:	b930      	cbnz	r0, 800d32c <__d2b+0x24>
 800d31e:	4602      	mov	r2, r0
 800d320:	f240 310a 	movw	r1, #778	; 0x30a
 800d324:	4b24      	ldr	r3, [pc, #144]	; (800d3b8 <__d2b+0xb0>)
 800d326:	4825      	ldr	r0, [pc, #148]	; (800d3bc <__d2b+0xb4>)
 800d328:	f000 fb40 	bl	800d9ac <__assert_func>
 800d32c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d330:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800d334:	bb2d      	cbnz	r5, 800d382 <__d2b+0x7a>
 800d336:	9301      	str	r3, [sp, #4]
 800d338:	f1b8 0300 	subs.w	r3, r8, #0
 800d33c:	d026      	beq.n	800d38c <__d2b+0x84>
 800d33e:	4668      	mov	r0, sp
 800d340:	9300      	str	r3, [sp, #0]
 800d342:	f7ff fd09 	bl	800cd58 <__lo0bits>
 800d346:	9900      	ldr	r1, [sp, #0]
 800d348:	b1f0      	cbz	r0, 800d388 <__d2b+0x80>
 800d34a:	9a01      	ldr	r2, [sp, #4]
 800d34c:	f1c0 0320 	rsb	r3, r0, #32
 800d350:	fa02 f303 	lsl.w	r3, r2, r3
 800d354:	430b      	orrs	r3, r1
 800d356:	40c2      	lsrs	r2, r0
 800d358:	6163      	str	r3, [r4, #20]
 800d35a:	9201      	str	r2, [sp, #4]
 800d35c:	9b01      	ldr	r3, [sp, #4]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	bf14      	ite	ne
 800d362:	2102      	movne	r1, #2
 800d364:	2101      	moveq	r1, #1
 800d366:	61a3      	str	r3, [r4, #24]
 800d368:	6121      	str	r1, [r4, #16]
 800d36a:	b1c5      	cbz	r5, 800d39e <__d2b+0x96>
 800d36c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d370:	4405      	add	r5, r0
 800d372:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d376:	603d      	str	r5, [r7, #0]
 800d378:	6030      	str	r0, [r6, #0]
 800d37a:	4620      	mov	r0, r4
 800d37c:	b002      	add	sp, #8
 800d37e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d382:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d386:	e7d6      	b.n	800d336 <__d2b+0x2e>
 800d388:	6161      	str	r1, [r4, #20]
 800d38a:	e7e7      	b.n	800d35c <__d2b+0x54>
 800d38c:	a801      	add	r0, sp, #4
 800d38e:	f7ff fce3 	bl	800cd58 <__lo0bits>
 800d392:	2101      	movs	r1, #1
 800d394:	9b01      	ldr	r3, [sp, #4]
 800d396:	6121      	str	r1, [r4, #16]
 800d398:	6163      	str	r3, [r4, #20]
 800d39a:	3020      	adds	r0, #32
 800d39c:	e7e5      	b.n	800d36a <__d2b+0x62>
 800d39e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800d3a2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d3a6:	6038      	str	r0, [r7, #0]
 800d3a8:	6918      	ldr	r0, [r3, #16]
 800d3aa:	f7ff fcb5 	bl	800cd18 <__hi0bits>
 800d3ae:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800d3b2:	6031      	str	r1, [r6, #0]
 800d3b4:	e7e1      	b.n	800d37a <__d2b+0x72>
 800d3b6:	bf00      	nop
 800d3b8:	0800e7f0 	.word	0x0800e7f0
 800d3bc:	0800e87c 	.word	0x0800e87c

0800d3c0 <__ratio>:
 800d3c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3c4:	4688      	mov	r8, r1
 800d3c6:	4669      	mov	r1, sp
 800d3c8:	4681      	mov	r9, r0
 800d3ca:	f7ff ff49 	bl	800d260 <__b2d>
 800d3ce:	460f      	mov	r7, r1
 800d3d0:	4604      	mov	r4, r0
 800d3d2:	460d      	mov	r5, r1
 800d3d4:	4640      	mov	r0, r8
 800d3d6:	a901      	add	r1, sp, #4
 800d3d8:	f7ff ff42 	bl	800d260 <__b2d>
 800d3dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d3e0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d3e4:	468b      	mov	fp, r1
 800d3e6:	eba3 0c02 	sub.w	ip, r3, r2
 800d3ea:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d3ee:	1a9b      	subs	r3, r3, r2
 800d3f0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	bfd5      	itete	le
 800d3f8:	460a      	movle	r2, r1
 800d3fa:	462a      	movgt	r2, r5
 800d3fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d400:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d404:	bfd8      	it	le
 800d406:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d40a:	465b      	mov	r3, fp
 800d40c:	4602      	mov	r2, r0
 800d40e:	4639      	mov	r1, r7
 800d410:	4620      	mov	r0, r4
 800d412:	f7f3 f98b 	bl	800072c <__aeabi_ddiv>
 800d416:	b003      	add	sp, #12
 800d418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d41c <__copybits>:
 800d41c:	3901      	subs	r1, #1
 800d41e:	b570      	push	{r4, r5, r6, lr}
 800d420:	1149      	asrs	r1, r1, #5
 800d422:	6914      	ldr	r4, [r2, #16]
 800d424:	3101      	adds	r1, #1
 800d426:	f102 0314 	add.w	r3, r2, #20
 800d42a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d42e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d432:	1f05      	subs	r5, r0, #4
 800d434:	42a3      	cmp	r3, r4
 800d436:	d30c      	bcc.n	800d452 <__copybits+0x36>
 800d438:	1aa3      	subs	r3, r4, r2
 800d43a:	3b11      	subs	r3, #17
 800d43c:	f023 0303 	bic.w	r3, r3, #3
 800d440:	3211      	adds	r2, #17
 800d442:	42a2      	cmp	r2, r4
 800d444:	bf88      	it	hi
 800d446:	2300      	movhi	r3, #0
 800d448:	4418      	add	r0, r3
 800d44a:	2300      	movs	r3, #0
 800d44c:	4288      	cmp	r0, r1
 800d44e:	d305      	bcc.n	800d45c <__copybits+0x40>
 800d450:	bd70      	pop	{r4, r5, r6, pc}
 800d452:	f853 6b04 	ldr.w	r6, [r3], #4
 800d456:	f845 6f04 	str.w	r6, [r5, #4]!
 800d45a:	e7eb      	b.n	800d434 <__copybits+0x18>
 800d45c:	f840 3b04 	str.w	r3, [r0], #4
 800d460:	e7f4      	b.n	800d44c <__copybits+0x30>

0800d462 <__any_on>:
 800d462:	f100 0214 	add.w	r2, r0, #20
 800d466:	6900      	ldr	r0, [r0, #16]
 800d468:	114b      	asrs	r3, r1, #5
 800d46a:	4298      	cmp	r0, r3
 800d46c:	b510      	push	{r4, lr}
 800d46e:	db11      	blt.n	800d494 <__any_on+0x32>
 800d470:	dd0a      	ble.n	800d488 <__any_on+0x26>
 800d472:	f011 011f 	ands.w	r1, r1, #31
 800d476:	d007      	beq.n	800d488 <__any_on+0x26>
 800d478:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d47c:	fa24 f001 	lsr.w	r0, r4, r1
 800d480:	fa00 f101 	lsl.w	r1, r0, r1
 800d484:	428c      	cmp	r4, r1
 800d486:	d10b      	bne.n	800d4a0 <__any_on+0x3e>
 800d488:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d803      	bhi.n	800d498 <__any_on+0x36>
 800d490:	2000      	movs	r0, #0
 800d492:	bd10      	pop	{r4, pc}
 800d494:	4603      	mov	r3, r0
 800d496:	e7f7      	b.n	800d488 <__any_on+0x26>
 800d498:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d49c:	2900      	cmp	r1, #0
 800d49e:	d0f5      	beq.n	800d48c <__any_on+0x2a>
 800d4a0:	2001      	movs	r0, #1
 800d4a2:	e7f6      	b.n	800d492 <__any_on+0x30>

0800d4a4 <_calloc_r>:
 800d4a4:	b570      	push	{r4, r5, r6, lr}
 800d4a6:	fba1 5402 	umull	r5, r4, r1, r2
 800d4aa:	b934      	cbnz	r4, 800d4ba <_calloc_r+0x16>
 800d4ac:	4629      	mov	r1, r5
 800d4ae:	f000 f875 	bl	800d59c <_malloc_r>
 800d4b2:	4606      	mov	r6, r0
 800d4b4:	b928      	cbnz	r0, 800d4c2 <_calloc_r+0x1e>
 800d4b6:	4630      	mov	r0, r6
 800d4b8:	bd70      	pop	{r4, r5, r6, pc}
 800d4ba:	220c      	movs	r2, #12
 800d4bc:	2600      	movs	r6, #0
 800d4be:	6002      	str	r2, [r0, #0]
 800d4c0:	e7f9      	b.n	800d4b6 <_calloc_r+0x12>
 800d4c2:	462a      	mov	r2, r5
 800d4c4:	4621      	mov	r1, r4
 800d4c6:	f7fc fbf3 	bl	8009cb0 <memset>
 800d4ca:	e7f4      	b.n	800d4b6 <_calloc_r+0x12>

0800d4cc <_free_r>:
 800d4cc:	b538      	push	{r3, r4, r5, lr}
 800d4ce:	4605      	mov	r5, r0
 800d4d0:	2900      	cmp	r1, #0
 800d4d2:	d040      	beq.n	800d556 <_free_r+0x8a>
 800d4d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4d8:	1f0c      	subs	r4, r1, #4
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	bfb8      	it	lt
 800d4de:	18e4      	addlt	r4, r4, r3
 800d4e0:	f000 faae 	bl	800da40 <__malloc_lock>
 800d4e4:	4a1c      	ldr	r2, [pc, #112]	; (800d558 <_free_r+0x8c>)
 800d4e6:	6813      	ldr	r3, [r2, #0]
 800d4e8:	b933      	cbnz	r3, 800d4f8 <_free_r+0x2c>
 800d4ea:	6063      	str	r3, [r4, #4]
 800d4ec:	6014      	str	r4, [r2, #0]
 800d4ee:	4628      	mov	r0, r5
 800d4f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4f4:	f000 baaa 	b.w	800da4c <__malloc_unlock>
 800d4f8:	42a3      	cmp	r3, r4
 800d4fa:	d908      	bls.n	800d50e <_free_r+0x42>
 800d4fc:	6820      	ldr	r0, [r4, #0]
 800d4fe:	1821      	adds	r1, r4, r0
 800d500:	428b      	cmp	r3, r1
 800d502:	bf01      	itttt	eq
 800d504:	6819      	ldreq	r1, [r3, #0]
 800d506:	685b      	ldreq	r3, [r3, #4]
 800d508:	1809      	addeq	r1, r1, r0
 800d50a:	6021      	streq	r1, [r4, #0]
 800d50c:	e7ed      	b.n	800d4ea <_free_r+0x1e>
 800d50e:	461a      	mov	r2, r3
 800d510:	685b      	ldr	r3, [r3, #4]
 800d512:	b10b      	cbz	r3, 800d518 <_free_r+0x4c>
 800d514:	42a3      	cmp	r3, r4
 800d516:	d9fa      	bls.n	800d50e <_free_r+0x42>
 800d518:	6811      	ldr	r1, [r2, #0]
 800d51a:	1850      	adds	r0, r2, r1
 800d51c:	42a0      	cmp	r0, r4
 800d51e:	d10b      	bne.n	800d538 <_free_r+0x6c>
 800d520:	6820      	ldr	r0, [r4, #0]
 800d522:	4401      	add	r1, r0
 800d524:	1850      	adds	r0, r2, r1
 800d526:	4283      	cmp	r3, r0
 800d528:	6011      	str	r1, [r2, #0]
 800d52a:	d1e0      	bne.n	800d4ee <_free_r+0x22>
 800d52c:	6818      	ldr	r0, [r3, #0]
 800d52e:	685b      	ldr	r3, [r3, #4]
 800d530:	4401      	add	r1, r0
 800d532:	6011      	str	r1, [r2, #0]
 800d534:	6053      	str	r3, [r2, #4]
 800d536:	e7da      	b.n	800d4ee <_free_r+0x22>
 800d538:	d902      	bls.n	800d540 <_free_r+0x74>
 800d53a:	230c      	movs	r3, #12
 800d53c:	602b      	str	r3, [r5, #0]
 800d53e:	e7d6      	b.n	800d4ee <_free_r+0x22>
 800d540:	6820      	ldr	r0, [r4, #0]
 800d542:	1821      	adds	r1, r4, r0
 800d544:	428b      	cmp	r3, r1
 800d546:	bf01      	itttt	eq
 800d548:	6819      	ldreq	r1, [r3, #0]
 800d54a:	685b      	ldreq	r3, [r3, #4]
 800d54c:	1809      	addeq	r1, r1, r0
 800d54e:	6021      	streq	r1, [r4, #0]
 800d550:	6063      	str	r3, [r4, #4]
 800d552:	6054      	str	r4, [r2, #4]
 800d554:	e7cb      	b.n	800d4ee <_free_r+0x22>
 800d556:	bd38      	pop	{r3, r4, r5, pc}
 800d558:	200019a0 	.word	0x200019a0

0800d55c <sbrk_aligned>:
 800d55c:	b570      	push	{r4, r5, r6, lr}
 800d55e:	4e0e      	ldr	r6, [pc, #56]	; (800d598 <sbrk_aligned+0x3c>)
 800d560:	460c      	mov	r4, r1
 800d562:	6831      	ldr	r1, [r6, #0]
 800d564:	4605      	mov	r5, r0
 800d566:	b911      	cbnz	r1, 800d56e <sbrk_aligned+0x12>
 800d568:	f000 f9ee 	bl	800d948 <_sbrk_r>
 800d56c:	6030      	str	r0, [r6, #0]
 800d56e:	4621      	mov	r1, r4
 800d570:	4628      	mov	r0, r5
 800d572:	f000 f9e9 	bl	800d948 <_sbrk_r>
 800d576:	1c43      	adds	r3, r0, #1
 800d578:	d00a      	beq.n	800d590 <sbrk_aligned+0x34>
 800d57a:	1cc4      	adds	r4, r0, #3
 800d57c:	f024 0403 	bic.w	r4, r4, #3
 800d580:	42a0      	cmp	r0, r4
 800d582:	d007      	beq.n	800d594 <sbrk_aligned+0x38>
 800d584:	1a21      	subs	r1, r4, r0
 800d586:	4628      	mov	r0, r5
 800d588:	f000 f9de 	bl	800d948 <_sbrk_r>
 800d58c:	3001      	adds	r0, #1
 800d58e:	d101      	bne.n	800d594 <sbrk_aligned+0x38>
 800d590:	f04f 34ff 	mov.w	r4, #4294967295
 800d594:	4620      	mov	r0, r4
 800d596:	bd70      	pop	{r4, r5, r6, pc}
 800d598:	200019a4 	.word	0x200019a4

0800d59c <_malloc_r>:
 800d59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5a0:	1ccd      	adds	r5, r1, #3
 800d5a2:	f025 0503 	bic.w	r5, r5, #3
 800d5a6:	3508      	adds	r5, #8
 800d5a8:	2d0c      	cmp	r5, #12
 800d5aa:	bf38      	it	cc
 800d5ac:	250c      	movcc	r5, #12
 800d5ae:	2d00      	cmp	r5, #0
 800d5b0:	4607      	mov	r7, r0
 800d5b2:	db01      	blt.n	800d5b8 <_malloc_r+0x1c>
 800d5b4:	42a9      	cmp	r1, r5
 800d5b6:	d905      	bls.n	800d5c4 <_malloc_r+0x28>
 800d5b8:	230c      	movs	r3, #12
 800d5ba:	2600      	movs	r6, #0
 800d5bc:	603b      	str	r3, [r7, #0]
 800d5be:	4630      	mov	r0, r6
 800d5c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5c4:	4e2e      	ldr	r6, [pc, #184]	; (800d680 <_malloc_r+0xe4>)
 800d5c6:	f000 fa3b 	bl	800da40 <__malloc_lock>
 800d5ca:	6833      	ldr	r3, [r6, #0]
 800d5cc:	461c      	mov	r4, r3
 800d5ce:	bb34      	cbnz	r4, 800d61e <_malloc_r+0x82>
 800d5d0:	4629      	mov	r1, r5
 800d5d2:	4638      	mov	r0, r7
 800d5d4:	f7ff ffc2 	bl	800d55c <sbrk_aligned>
 800d5d8:	1c43      	adds	r3, r0, #1
 800d5da:	4604      	mov	r4, r0
 800d5dc:	d14d      	bne.n	800d67a <_malloc_r+0xde>
 800d5de:	6834      	ldr	r4, [r6, #0]
 800d5e0:	4626      	mov	r6, r4
 800d5e2:	2e00      	cmp	r6, #0
 800d5e4:	d140      	bne.n	800d668 <_malloc_r+0xcc>
 800d5e6:	6823      	ldr	r3, [r4, #0]
 800d5e8:	4631      	mov	r1, r6
 800d5ea:	4638      	mov	r0, r7
 800d5ec:	eb04 0803 	add.w	r8, r4, r3
 800d5f0:	f000 f9aa 	bl	800d948 <_sbrk_r>
 800d5f4:	4580      	cmp	r8, r0
 800d5f6:	d13a      	bne.n	800d66e <_malloc_r+0xd2>
 800d5f8:	6821      	ldr	r1, [r4, #0]
 800d5fa:	3503      	adds	r5, #3
 800d5fc:	1a6d      	subs	r5, r5, r1
 800d5fe:	f025 0503 	bic.w	r5, r5, #3
 800d602:	3508      	adds	r5, #8
 800d604:	2d0c      	cmp	r5, #12
 800d606:	bf38      	it	cc
 800d608:	250c      	movcc	r5, #12
 800d60a:	4638      	mov	r0, r7
 800d60c:	4629      	mov	r1, r5
 800d60e:	f7ff ffa5 	bl	800d55c <sbrk_aligned>
 800d612:	3001      	adds	r0, #1
 800d614:	d02b      	beq.n	800d66e <_malloc_r+0xd2>
 800d616:	6823      	ldr	r3, [r4, #0]
 800d618:	442b      	add	r3, r5
 800d61a:	6023      	str	r3, [r4, #0]
 800d61c:	e00e      	b.n	800d63c <_malloc_r+0xa0>
 800d61e:	6822      	ldr	r2, [r4, #0]
 800d620:	1b52      	subs	r2, r2, r5
 800d622:	d41e      	bmi.n	800d662 <_malloc_r+0xc6>
 800d624:	2a0b      	cmp	r2, #11
 800d626:	d916      	bls.n	800d656 <_malloc_r+0xba>
 800d628:	1961      	adds	r1, r4, r5
 800d62a:	42a3      	cmp	r3, r4
 800d62c:	6025      	str	r5, [r4, #0]
 800d62e:	bf18      	it	ne
 800d630:	6059      	strne	r1, [r3, #4]
 800d632:	6863      	ldr	r3, [r4, #4]
 800d634:	bf08      	it	eq
 800d636:	6031      	streq	r1, [r6, #0]
 800d638:	5162      	str	r2, [r4, r5]
 800d63a:	604b      	str	r3, [r1, #4]
 800d63c:	4638      	mov	r0, r7
 800d63e:	f104 060b 	add.w	r6, r4, #11
 800d642:	f000 fa03 	bl	800da4c <__malloc_unlock>
 800d646:	f026 0607 	bic.w	r6, r6, #7
 800d64a:	1d23      	adds	r3, r4, #4
 800d64c:	1af2      	subs	r2, r6, r3
 800d64e:	d0b6      	beq.n	800d5be <_malloc_r+0x22>
 800d650:	1b9b      	subs	r3, r3, r6
 800d652:	50a3      	str	r3, [r4, r2]
 800d654:	e7b3      	b.n	800d5be <_malloc_r+0x22>
 800d656:	6862      	ldr	r2, [r4, #4]
 800d658:	42a3      	cmp	r3, r4
 800d65a:	bf0c      	ite	eq
 800d65c:	6032      	streq	r2, [r6, #0]
 800d65e:	605a      	strne	r2, [r3, #4]
 800d660:	e7ec      	b.n	800d63c <_malloc_r+0xa0>
 800d662:	4623      	mov	r3, r4
 800d664:	6864      	ldr	r4, [r4, #4]
 800d666:	e7b2      	b.n	800d5ce <_malloc_r+0x32>
 800d668:	4634      	mov	r4, r6
 800d66a:	6876      	ldr	r6, [r6, #4]
 800d66c:	e7b9      	b.n	800d5e2 <_malloc_r+0x46>
 800d66e:	230c      	movs	r3, #12
 800d670:	4638      	mov	r0, r7
 800d672:	603b      	str	r3, [r7, #0]
 800d674:	f000 f9ea 	bl	800da4c <__malloc_unlock>
 800d678:	e7a1      	b.n	800d5be <_malloc_r+0x22>
 800d67a:	6025      	str	r5, [r4, #0]
 800d67c:	e7de      	b.n	800d63c <_malloc_r+0xa0>
 800d67e:	bf00      	nop
 800d680:	200019a0 	.word	0x200019a0

0800d684 <__ssputs_r>:
 800d684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d688:	688e      	ldr	r6, [r1, #8]
 800d68a:	4682      	mov	sl, r0
 800d68c:	429e      	cmp	r6, r3
 800d68e:	460c      	mov	r4, r1
 800d690:	4690      	mov	r8, r2
 800d692:	461f      	mov	r7, r3
 800d694:	d838      	bhi.n	800d708 <__ssputs_r+0x84>
 800d696:	898a      	ldrh	r2, [r1, #12]
 800d698:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d69c:	d032      	beq.n	800d704 <__ssputs_r+0x80>
 800d69e:	6825      	ldr	r5, [r4, #0]
 800d6a0:	6909      	ldr	r1, [r1, #16]
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	eba5 0901 	sub.w	r9, r5, r1
 800d6a8:	6965      	ldr	r5, [r4, #20]
 800d6aa:	444b      	add	r3, r9
 800d6ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d6b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d6b4:	106d      	asrs	r5, r5, #1
 800d6b6:	429d      	cmp	r5, r3
 800d6b8:	bf38      	it	cc
 800d6ba:	461d      	movcc	r5, r3
 800d6bc:	0553      	lsls	r3, r2, #21
 800d6be:	d531      	bpl.n	800d724 <__ssputs_r+0xa0>
 800d6c0:	4629      	mov	r1, r5
 800d6c2:	f7ff ff6b 	bl	800d59c <_malloc_r>
 800d6c6:	4606      	mov	r6, r0
 800d6c8:	b950      	cbnz	r0, 800d6e0 <__ssputs_r+0x5c>
 800d6ca:	230c      	movs	r3, #12
 800d6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d6d0:	f8ca 3000 	str.w	r3, [sl]
 800d6d4:	89a3      	ldrh	r3, [r4, #12]
 800d6d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6da:	81a3      	strh	r3, [r4, #12]
 800d6dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6e0:	464a      	mov	r2, r9
 800d6e2:	6921      	ldr	r1, [r4, #16]
 800d6e4:	f7ff fa18 	bl	800cb18 <memcpy>
 800d6e8:	89a3      	ldrh	r3, [r4, #12]
 800d6ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d6ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6f2:	81a3      	strh	r3, [r4, #12]
 800d6f4:	6126      	str	r6, [r4, #16]
 800d6f6:	444e      	add	r6, r9
 800d6f8:	6026      	str	r6, [r4, #0]
 800d6fa:	463e      	mov	r6, r7
 800d6fc:	6165      	str	r5, [r4, #20]
 800d6fe:	eba5 0509 	sub.w	r5, r5, r9
 800d702:	60a5      	str	r5, [r4, #8]
 800d704:	42be      	cmp	r6, r7
 800d706:	d900      	bls.n	800d70a <__ssputs_r+0x86>
 800d708:	463e      	mov	r6, r7
 800d70a:	4632      	mov	r2, r6
 800d70c:	4641      	mov	r1, r8
 800d70e:	6820      	ldr	r0, [r4, #0]
 800d710:	f000 f97c 	bl	800da0c <memmove>
 800d714:	68a3      	ldr	r3, [r4, #8]
 800d716:	2000      	movs	r0, #0
 800d718:	1b9b      	subs	r3, r3, r6
 800d71a:	60a3      	str	r3, [r4, #8]
 800d71c:	6823      	ldr	r3, [r4, #0]
 800d71e:	4433      	add	r3, r6
 800d720:	6023      	str	r3, [r4, #0]
 800d722:	e7db      	b.n	800d6dc <__ssputs_r+0x58>
 800d724:	462a      	mov	r2, r5
 800d726:	f000 f997 	bl	800da58 <_realloc_r>
 800d72a:	4606      	mov	r6, r0
 800d72c:	2800      	cmp	r0, #0
 800d72e:	d1e1      	bne.n	800d6f4 <__ssputs_r+0x70>
 800d730:	4650      	mov	r0, sl
 800d732:	6921      	ldr	r1, [r4, #16]
 800d734:	f7ff feca 	bl	800d4cc <_free_r>
 800d738:	e7c7      	b.n	800d6ca <__ssputs_r+0x46>
	...

0800d73c <_svfiprintf_r>:
 800d73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d740:	4698      	mov	r8, r3
 800d742:	898b      	ldrh	r3, [r1, #12]
 800d744:	4607      	mov	r7, r0
 800d746:	061b      	lsls	r3, r3, #24
 800d748:	460d      	mov	r5, r1
 800d74a:	4614      	mov	r4, r2
 800d74c:	b09d      	sub	sp, #116	; 0x74
 800d74e:	d50e      	bpl.n	800d76e <_svfiprintf_r+0x32>
 800d750:	690b      	ldr	r3, [r1, #16]
 800d752:	b963      	cbnz	r3, 800d76e <_svfiprintf_r+0x32>
 800d754:	2140      	movs	r1, #64	; 0x40
 800d756:	f7ff ff21 	bl	800d59c <_malloc_r>
 800d75a:	6028      	str	r0, [r5, #0]
 800d75c:	6128      	str	r0, [r5, #16]
 800d75e:	b920      	cbnz	r0, 800d76a <_svfiprintf_r+0x2e>
 800d760:	230c      	movs	r3, #12
 800d762:	603b      	str	r3, [r7, #0]
 800d764:	f04f 30ff 	mov.w	r0, #4294967295
 800d768:	e0d1      	b.n	800d90e <_svfiprintf_r+0x1d2>
 800d76a:	2340      	movs	r3, #64	; 0x40
 800d76c:	616b      	str	r3, [r5, #20]
 800d76e:	2300      	movs	r3, #0
 800d770:	9309      	str	r3, [sp, #36]	; 0x24
 800d772:	2320      	movs	r3, #32
 800d774:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d778:	2330      	movs	r3, #48	; 0x30
 800d77a:	f04f 0901 	mov.w	r9, #1
 800d77e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d782:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d928 <_svfiprintf_r+0x1ec>
 800d786:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d78a:	4623      	mov	r3, r4
 800d78c:	469a      	mov	sl, r3
 800d78e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d792:	b10a      	cbz	r2, 800d798 <_svfiprintf_r+0x5c>
 800d794:	2a25      	cmp	r2, #37	; 0x25
 800d796:	d1f9      	bne.n	800d78c <_svfiprintf_r+0x50>
 800d798:	ebba 0b04 	subs.w	fp, sl, r4
 800d79c:	d00b      	beq.n	800d7b6 <_svfiprintf_r+0x7a>
 800d79e:	465b      	mov	r3, fp
 800d7a0:	4622      	mov	r2, r4
 800d7a2:	4629      	mov	r1, r5
 800d7a4:	4638      	mov	r0, r7
 800d7a6:	f7ff ff6d 	bl	800d684 <__ssputs_r>
 800d7aa:	3001      	adds	r0, #1
 800d7ac:	f000 80aa 	beq.w	800d904 <_svfiprintf_r+0x1c8>
 800d7b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7b2:	445a      	add	r2, fp
 800d7b4:	9209      	str	r2, [sp, #36]	; 0x24
 800d7b6:	f89a 3000 	ldrb.w	r3, [sl]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	f000 80a2 	beq.w	800d904 <_svfiprintf_r+0x1c8>
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	f04f 32ff 	mov.w	r2, #4294967295
 800d7c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7ca:	f10a 0a01 	add.w	sl, sl, #1
 800d7ce:	9304      	str	r3, [sp, #16]
 800d7d0:	9307      	str	r3, [sp, #28]
 800d7d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d7d6:	931a      	str	r3, [sp, #104]	; 0x68
 800d7d8:	4654      	mov	r4, sl
 800d7da:	2205      	movs	r2, #5
 800d7dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7e0:	4851      	ldr	r0, [pc, #324]	; (800d928 <_svfiprintf_r+0x1ec>)
 800d7e2:	f7ff f98b 	bl	800cafc <memchr>
 800d7e6:	9a04      	ldr	r2, [sp, #16]
 800d7e8:	b9d8      	cbnz	r0, 800d822 <_svfiprintf_r+0xe6>
 800d7ea:	06d0      	lsls	r0, r2, #27
 800d7ec:	bf44      	itt	mi
 800d7ee:	2320      	movmi	r3, #32
 800d7f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7f4:	0711      	lsls	r1, r2, #28
 800d7f6:	bf44      	itt	mi
 800d7f8:	232b      	movmi	r3, #43	; 0x2b
 800d7fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7fe:	f89a 3000 	ldrb.w	r3, [sl]
 800d802:	2b2a      	cmp	r3, #42	; 0x2a
 800d804:	d015      	beq.n	800d832 <_svfiprintf_r+0xf6>
 800d806:	4654      	mov	r4, sl
 800d808:	2000      	movs	r0, #0
 800d80a:	f04f 0c0a 	mov.w	ip, #10
 800d80e:	9a07      	ldr	r2, [sp, #28]
 800d810:	4621      	mov	r1, r4
 800d812:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d816:	3b30      	subs	r3, #48	; 0x30
 800d818:	2b09      	cmp	r3, #9
 800d81a:	d94e      	bls.n	800d8ba <_svfiprintf_r+0x17e>
 800d81c:	b1b0      	cbz	r0, 800d84c <_svfiprintf_r+0x110>
 800d81e:	9207      	str	r2, [sp, #28]
 800d820:	e014      	b.n	800d84c <_svfiprintf_r+0x110>
 800d822:	eba0 0308 	sub.w	r3, r0, r8
 800d826:	fa09 f303 	lsl.w	r3, r9, r3
 800d82a:	4313      	orrs	r3, r2
 800d82c:	46a2      	mov	sl, r4
 800d82e:	9304      	str	r3, [sp, #16]
 800d830:	e7d2      	b.n	800d7d8 <_svfiprintf_r+0x9c>
 800d832:	9b03      	ldr	r3, [sp, #12]
 800d834:	1d19      	adds	r1, r3, #4
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	9103      	str	r1, [sp, #12]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	bfbb      	ittet	lt
 800d83e:	425b      	neglt	r3, r3
 800d840:	f042 0202 	orrlt.w	r2, r2, #2
 800d844:	9307      	strge	r3, [sp, #28]
 800d846:	9307      	strlt	r3, [sp, #28]
 800d848:	bfb8      	it	lt
 800d84a:	9204      	strlt	r2, [sp, #16]
 800d84c:	7823      	ldrb	r3, [r4, #0]
 800d84e:	2b2e      	cmp	r3, #46	; 0x2e
 800d850:	d10c      	bne.n	800d86c <_svfiprintf_r+0x130>
 800d852:	7863      	ldrb	r3, [r4, #1]
 800d854:	2b2a      	cmp	r3, #42	; 0x2a
 800d856:	d135      	bne.n	800d8c4 <_svfiprintf_r+0x188>
 800d858:	9b03      	ldr	r3, [sp, #12]
 800d85a:	3402      	adds	r4, #2
 800d85c:	1d1a      	adds	r2, r3, #4
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	9203      	str	r2, [sp, #12]
 800d862:	2b00      	cmp	r3, #0
 800d864:	bfb8      	it	lt
 800d866:	f04f 33ff 	movlt.w	r3, #4294967295
 800d86a:	9305      	str	r3, [sp, #20]
 800d86c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d92c <_svfiprintf_r+0x1f0>
 800d870:	2203      	movs	r2, #3
 800d872:	4650      	mov	r0, sl
 800d874:	7821      	ldrb	r1, [r4, #0]
 800d876:	f7ff f941 	bl	800cafc <memchr>
 800d87a:	b140      	cbz	r0, 800d88e <_svfiprintf_r+0x152>
 800d87c:	2340      	movs	r3, #64	; 0x40
 800d87e:	eba0 000a 	sub.w	r0, r0, sl
 800d882:	fa03 f000 	lsl.w	r0, r3, r0
 800d886:	9b04      	ldr	r3, [sp, #16]
 800d888:	3401      	adds	r4, #1
 800d88a:	4303      	orrs	r3, r0
 800d88c:	9304      	str	r3, [sp, #16]
 800d88e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d892:	2206      	movs	r2, #6
 800d894:	4826      	ldr	r0, [pc, #152]	; (800d930 <_svfiprintf_r+0x1f4>)
 800d896:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d89a:	f7ff f92f 	bl	800cafc <memchr>
 800d89e:	2800      	cmp	r0, #0
 800d8a0:	d038      	beq.n	800d914 <_svfiprintf_r+0x1d8>
 800d8a2:	4b24      	ldr	r3, [pc, #144]	; (800d934 <_svfiprintf_r+0x1f8>)
 800d8a4:	bb1b      	cbnz	r3, 800d8ee <_svfiprintf_r+0x1b2>
 800d8a6:	9b03      	ldr	r3, [sp, #12]
 800d8a8:	3307      	adds	r3, #7
 800d8aa:	f023 0307 	bic.w	r3, r3, #7
 800d8ae:	3308      	adds	r3, #8
 800d8b0:	9303      	str	r3, [sp, #12]
 800d8b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8b4:	4433      	add	r3, r6
 800d8b6:	9309      	str	r3, [sp, #36]	; 0x24
 800d8b8:	e767      	b.n	800d78a <_svfiprintf_r+0x4e>
 800d8ba:	460c      	mov	r4, r1
 800d8bc:	2001      	movs	r0, #1
 800d8be:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8c2:	e7a5      	b.n	800d810 <_svfiprintf_r+0xd4>
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	f04f 0c0a 	mov.w	ip, #10
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	3401      	adds	r4, #1
 800d8ce:	9305      	str	r3, [sp, #20]
 800d8d0:	4620      	mov	r0, r4
 800d8d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8d6:	3a30      	subs	r2, #48	; 0x30
 800d8d8:	2a09      	cmp	r2, #9
 800d8da:	d903      	bls.n	800d8e4 <_svfiprintf_r+0x1a8>
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d0c5      	beq.n	800d86c <_svfiprintf_r+0x130>
 800d8e0:	9105      	str	r1, [sp, #20]
 800d8e2:	e7c3      	b.n	800d86c <_svfiprintf_r+0x130>
 800d8e4:	4604      	mov	r4, r0
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8ec:	e7f0      	b.n	800d8d0 <_svfiprintf_r+0x194>
 800d8ee:	ab03      	add	r3, sp, #12
 800d8f0:	9300      	str	r3, [sp, #0]
 800d8f2:	462a      	mov	r2, r5
 800d8f4:	4638      	mov	r0, r7
 800d8f6:	4b10      	ldr	r3, [pc, #64]	; (800d938 <_svfiprintf_r+0x1fc>)
 800d8f8:	a904      	add	r1, sp, #16
 800d8fa:	f7fc fa7f 	bl	8009dfc <_printf_float>
 800d8fe:	1c42      	adds	r2, r0, #1
 800d900:	4606      	mov	r6, r0
 800d902:	d1d6      	bne.n	800d8b2 <_svfiprintf_r+0x176>
 800d904:	89ab      	ldrh	r3, [r5, #12]
 800d906:	065b      	lsls	r3, r3, #25
 800d908:	f53f af2c 	bmi.w	800d764 <_svfiprintf_r+0x28>
 800d90c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d90e:	b01d      	add	sp, #116	; 0x74
 800d910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d914:	ab03      	add	r3, sp, #12
 800d916:	9300      	str	r3, [sp, #0]
 800d918:	462a      	mov	r2, r5
 800d91a:	4638      	mov	r0, r7
 800d91c:	4b06      	ldr	r3, [pc, #24]	; (800d938 <_svfiprintf_r+0x1fc>)
 800d91e:	a904      	add	r1, sp, #16
 800d920:	f7fc fd08 	bl	800a334 <_printf_i>
 800d924:	e7eb      	b.n	800d8fe <_svfiprintf_r+0x1c2>
 800d926:	bf00      	nop
 800d928:	0800e9d4 	.word	0x0800e9d4
 800d92c:	0800e9da 	.word	0x0800e9da
 800d930:	0800e9de 	.word	0x0800e9de
 800d934:	08009dfd 	.word	0x08009dfd
 800d938:	0800d685 	.word	0x0800d685

0800d93c <nan>:
 800d93c:	2000      	movs	r0, #0
 800d93e:	4901      	ldr	r1, [pc, #4]	; (800d944 <nan+0x8>)
 800d940:	4770      	bx	lr
 800d942:	bf00      	nop
 800d944:	7ff80000 	.word	0x7ff80000

0800d948 <_sbrk_r>:
 800d948:	b538      	push	{r3, r4, r5, lr}
 800d94a:	2300      	movs	r3, #0
 800d94c:	4d05      	ldr	r5, [pc, #20]	; (800d964 <_sbrk_r+0x1c>)
 800d94e:	4604      	mov	r4, r0
 800d950:	4608      	mov	r0, r1
 800d952:	602b      	str	r3, [r5, #0]
 800d954:	f7f3 ffe6 	bl	8001924 <_sbrk>
 800d958:	1c43      	adds	r3, r0, #1
 800d95a:	d102      	bne.n	800d962 <_sbrk_r+0x1a>
 800d95c:	682b      	ldr	r3, [r5, #0]
 800d95e:	b103      	cbz	r3, 800d962 <_sbrk_r+0x1a>
 800d960:	6023      	str	r3, [r4, #0]
 800d962:	bd38      	pop	{r3, r4, r5, pc}
 800d964:	200019a8 	.word	0x200019a8

0800d968 <strncmp>:
 800d968:	4603      	mov	r3, r0
 800d96a:	b510      	push	{r4, lr}
 800d96c:	b172      	cbz	r2, 800d98c <strncmp+0x24>
 800d96e:	3901      	subs	r1, #1
 800d970:	1884      	adds	r4, r0, r2
 800d972:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d976:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d97a:	4290      	cmp	r0, r2
 800d97c:	d101      	bne.n	800d982 <strncmp+0x1a>
 800d97e:	42a3      	cmp	r3, r4
 800d980:	d101      	bne.n	800d986 <strncmp+0x1e>
 800d982:	1a80      	subs	r0, r0, r2
 800d984:	bd10      	pop	{r4, pc}
 800d986:	2800      	cmp	r0, #0
 800d988:	d1f3      	bne.n	800d972 <strncmp+0xa>
 800d98a:	e7fa      	b.n	800d982 <strncmp+0x1a>
 800d98c:	4610      	mov	r0, r2
 800d98e:	e7f9      	b.n	800d984 <strncmp+0x1c>

0800d990 <__ascii_wctomb>:
 800d990:	4603      	mov	r3, r0
 800d992:	4608      	mov	r0, r1
 800d994:	b141      	cbz	r1, 800d9a8 <__ascii_wctomb+0x18>
 800d996:	2aff      	cmp	r2, #255	; 0xff
 800d998:	d904      	bls.n	800d9a4 <__ascii_wctomb+0x14>
 800d99a:	228a      	movs	r2, #138	; 0x8a
 800d99c:	f04f 30ff 	mov.w	r0, #4294967295
 800d9a0:	601a      	str	r2, [r3, #0]
 800d9a2:	4770      	bx	lr
 800d9a4:	2001      	movs	r0, #1
 800d9a6:	700a      	strb	r2, [r1, #0]
 800d9a8:	4770      	bx	lr
	...

0800d9ac <__assert_func>:
 800d9ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d9ae:	4614      	mov	r4, r2
 800d9b0:	461a      	mov	r2, r3
 800d9b2:	4b09      	ldr	r3, [pc, #36]	; (800d9d8 <__assert_func+0x2c>)
 800d9b4:	4605      	mov	r5, r0
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	68d8      	ldr	r0, [r3, #12]
 800d9ba:	b14c      	cbz	r4, 800d9d0 <__assert_func+0x24>
 800d9bc:	4b07      	ldr	r3, [pc, #28]	; (800d9dc <__assert_func+0x30>)
 800d9be:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d9c2:	9100      	str	r1, [sp, #0]
 800d9c4:	462b      	mov	r3, r5
 800d9c6:	4906      	ldr	r1, [pc, #24]	; (800d9e0 <__assert_func+0x34>)
 800d9c8:	f000 f80e 	bl	800d9e8 <fiprintf>
 800d9cc:	f000 fa8a 	bl	800dee4 <abort>
 800d9d0:	4b04      	ldr	r3, [pc, #16]	; (800d9e4 <__assert_func+0x38>)
 800d9d2:	461c      	mov	r4, r3
 800d9d4:	e7f3      	b.n	800d9be <__assert_func+0x12>
 800d9d6:	bf00      	nop
 800d9d8:	2000017c 	.word	0x2000017c
 800d9dc:	0800e9e5 	.word	0x0800e9e5
 800d9e0:	0800e9f2 	.word	0x0800e9f2
 800d9e4:	0800ea20 	.word	0x0800ea20

0800d9e8 <fiprintf>:
 800d9e8:	b40e      	push	{r1, r2, r3}
 800d9ea:	b503      	push	{r0, r1, lr}
 800d9ec:	4601      	mov	r1, r0
 800d9ee:	ab03      	add	r3, sp, #12
 800d9f0:	4805      	ldr	r0, [pc, #20]	; (800da08 <fiprintf+0x20>)
 800d9f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9f6:	6800      	ldr	r0, [r0, #0]
 800d9f8:	9301      	str	r3, [sp, #4]
 800d9fa:	f000 f883 	bl	800db04 <_vfiprintf_r>
 800d9fe:	b002      	add	sp, #8
 800da00:	f85d eb04 	ldr.w	lr, [sp], #4
 800da04:	b003      	add	sp, #12
 800da06:	4770      	bx	lr
 800da08:	2000017c 	.word	0x2000017c

0800da0c <memmove>:
 800da0c:	4288      	cmp	r0, r1
 800da0e:	b510      	push	{r4, lr}
 800da10:	eb01 0402 	add.w	r4, r1, r2
 800da14:	d902      	bls.n	800da1c <memmove+0x10>
 800da16:	4284      	cmp	r4, r0
 800da18:	4623      	mov	r3, r4
 800da1a:	d807      	bhi.n	800da2c <memmove+0x20>
 800da1c:	1e43      	subs	r3, r0, #1
 800da1e:	42a1      	cmp	r1, r4
 800da20:	d008      	beq.n	800da34 <memmove+0x28>
 800da22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da26:	f803 2f01 	strb.w	r2, [r3, #1]!
 800da2a:	e7f8      	b.n	800da1e <memmove+0x12>
 800da2c:	4601      	mov	r1, r0
 800da2e:	4402      	add	r2, r0
 800da30:	428a      	cmp	r2, r1
 800da32:	d100      	bne.n	800da36 <memmove+0x2a>
 800da34:	bd10      	pop	{r4, pc}
 800da36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800da3e:	e7f7      	b.n	800da30 <memmove+0x24>

0800da40 <__malloc_lock>:
 800da40:	4801      	ldr	r0, [pc, #4]	; (800da48 <__malloc_lock+0x8>)
 800da42:	f000 bc0b 	b.w	800e25c <__retarget_lock_acquire_recursive>
 800da46:	bf00      	nop
 800da48:	200019ac 	.word	0x200019ac

0800da4c <__malloc_unlock>:
 800da4c:	4801      	ldr	r0, [pc, #4]	; (800da54 <__malloc_unlock+0x8>)
 800da4e:	f000 bc06 	b.w	800e25e <__retarget_lock_release_recursive>
 800da52:	bf00      	nop
 800da54:	200019ac 	.word	0x200019ac

0800da58 <_realloc_r>:
 800da58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da5c:	4680      	mov	r8, r0
 800da5e:	4614      	mov	r4, r2
 800da60:	460e      	mov	r6, r1
 800da62:	b921      	cbnz	r1, 800da6e <_realloc_r+0x16>
 800da64:	4611      	mov	r1, r2
 800da66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da6a:	f7ff bd97 	b.w	800d59c <_malloc_r>
 800da6e:	b92a      	cbnz	r2, 800da7c <_realloc_r+0x24>
 800da70:	f7ff fd2c 	bl	800d4cc <_free_r>
 800da74:	4625      	mov	r5, r4
 800da76:	4628      	mov	r0, r5
 800da78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da7c:	f000 fc56 	bl	800e32c <_malloc_usable_size_r>
 800da80:	4284      	cmp	r4, r0
 800da82:	4607      	mov	r7, r0
 800da84:	d802      	bhi.n	800da8c <_realloc_r+0x34>
 800da86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800da8a:	d812      	bhi.n	800dab2 <_realloc_r+0x5a>
 800da8c:	4621      	mov	r1, r4
 800da8e:	4640      	mov	r0, r8
 800da90:	f7ff fd84 	bl	800d59c <_malloc_r>
 800da94:	4605      	mov	r5, r0
 800da96:	2800      	cmp	r0, #0
 800da98:	d0ed      	beq.n	800da76 <_realloc_r+0x1e>
 800da9a:	42bc      	cmp	r4, r7
 800da9c:	4622      	mov	r2, r4
 800da9e:	4631      	mov	r1, r6
 800daa0:	bf28      	it	cs
 800daa2:	463a      	movcs	r2, r7
 800daa4:	f7ff f838 	bl	800cb18 <memcpy>
 800daa8:	4631      	mov	r1, r6
 800daaa:	4640      	mov	r0, r8
 800daac:	f7ff fd0e 	bl	800d4cc <_free_r>
 800dab0:	e7e1      	b.n	800da76 <_realloc_r+0x1e>
 800dab2:	4635      	mov	r5, r6
 800dab4:	e7df      	b.n	800da76 <_realloc_r+0x1e>

0800dab6 <__sfputc_r>:
 800dab6:	6893      	ldr	r3, [r2, #8]
 800dab8:	b410      	push	{r4}
 800daba:	3b01      	subs	r3, #1
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	6093      	str	r3, [r2, #8]
 800dac0:	da07      	bge.n	800dad2 <__sfputc_r+0x1c>
 800dac2:	6994      	ldr	r4, [r2, #24]
 800dac4:	42a3      	cmp	r3, r4
 800dac6:	db01      	blt.n	800dacc <__sfputc_r+0x16>
 800dac8:	290a      	cmp	r1, #10
 800daca:	d102      	bne.n	800dad2 <__sfputc_r+0x1c>
 800dacc:	bc10      	pop	{r4}
 800dace:	f000 b949 	b.w	800dd64 <__swbuf_r>
 800dad2:	6813      	ldr	r3, [r2, #0]
 800dad4:	1c58      	adds	r0, r3, #1
 800dad6:	6010      	str	r0, [r2, #0]
 800dad8:	7019      	strb	r1, [r3, #0]
 800dada:	4608      	mov	r0, r1
 800dadc:	bc10      	pop	{r4}
 800dade:	4770      	bx	lr

0800dae0 <__sfputs_r>:
 800dae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dae2:	4606      	mov	r6, r0
 800dae4:	460f      	mov	r7, r1
 800dae6:	4614      	mov	r4, r2
 800dae8:	18d5      	adds	r5, r2, r3
 800daea:	42ac      	cmp	r4, r5
 800daec:	d101      	bne.n	800daf2 <__sfputs_r+0x12>
 800daee:	2000      	movs	r0, #0
 800daf0:	e007      	b.n	800db02 <__sfputs_r+0x22>
 800daf2:	463a      	mov	r2, r7
 800daf4:	4630      	mov	r0, r6
 800daf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dafa:	f7ff ffdc 	bl	800dab6 <__sfputc_r>
 800dafe:	1c43      	adds	r3, r0, #1
 800db00:	d1f3      	bne.n	800daea <__sfputs_r+0xa>
 800db02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800db04 <_vfiprintf_r>:
 800db04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db08:	460d      	mov	r5, r1
 800db0a:	4614      	mov	r4, r2
 800db0c:	4698      	mov	r8, r3
 800db0e:	4606      	mov	r6, r0
 800db10:	b09d      	sub	sp, #116	; 0x74
 800db12:	b118      	cbz	r0, 800db1c <_vfiprintf_r+0x18>
 800db14:	6983      	ldr	r3, [r0, #24]
 800db16:	b90b      	cbnz	r3, 800db1c <_vfiprintf_r+0x18>
 800db18:	f000 fb02 	bl	800e120 <__sinit>
 800db1c:	4b89      	ldr	r3, [pc, #548]	; (800dd44 <_vfiprintf_r+0x240>)
 800db1e:	429d      	cmp	r5, r3
 800db20:	d11b      	bne.n	800db5a <_vfiprintf_r+0x56>
 800db22:	6875      	ldr	r5, [r6, #4]
 800db24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db26:	07d9      	lsls	r1, r3, #31
 800db28:	d405      	bmi.n	800db36 <_vfiprintf_r+0x32>
 800db2a:	89ab      	ldrh	r3, [r5, #12]
 800db2c:	059a      	lsls	r2, r3, #22
 800db2e:	d402      	bmi.n	800db36 <_vfiprintf_r+0x32>
 800db30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db32:	f000 fb93 	bl	800e25c <__retarget_lock_acquire_recursive>
 800db36:	89ab      	ldrh	r3, [r5, #12]
 800db38:	071b      	lsls	r3, r3, #28
 800db3a:	d501      	bpl.n	800db40 <_vfiprintf_r+0x3c>
 800db3c:	692b      	ldr	r3, [r5, #16]
 800db3e:	b9eb      	cbnz	r3, 800db7c <_vfiprintf_r+0x78>
 800db40:	4629      	mov	r1, r5
 800db42:	4630      	mov	r0, r6
 800db44:	f000 f960 	bl	800de08 <__swsetup_r>
 800db48:	b1c0      	cbz	r0, 800db7c <_vfiprintf_r+0x78>
 800db4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db4c:	07dc      	lsls	r4, r3, #31
 800db4e:	d50e      	bpl.n	800db6e <_vfiprintf_r+0x6a>
 800db50:	f04f 30ff 	mov.w	r0, #4294967295
 800db54:	b01d      	add	sp, #116	; 0x74
 800db56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db5a:	4b7b      	ldr	r3, [pc, #492]	; (800dd48 <_vfiprintf_r+0x244>)
 800db5c:	429d      	cmp	r5, r3
 800db5e:	d101      	bne.n	800db64 <_vfiprintf_r+0x60>
 800db60:	68b5      	ldr	r5, [r6, #8]
 800db62:	e7df      	b.n	800db24 <_vfiprintf_r+0x20>
 800db64:	4b79      	ldr	r3, [pc, #484]	; (800dd4c <_vfiprintf_r+0x248>)
 800db66:	429d      	cmp	r5, r3
 800db68:	bf08      	it	eq
 800db6a:	68f5      	ldreq	r5, [r6, #12]
 800db6c:	e7da      	b.n	800db24 <_vfiprintf_r+0x20>
 800db6e:	89ab      	ldrh	r3, [r5, #12]
 800db70:	0598      	lsls	r0, r3, #22
 800db72:	d4ed      	bmi.n	800db50 <_vfiprintf_r+0x4c>
 800db74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db76:	f000 fb72 	bl	800e25e <__retarget_lock_release_recursive>
 800db7a:	e7e9      	b.n	800db50 <_vfiprintf_r+0x4c>
 800db7c:	2300      	movs	r3, #0
 800db7e:	9309      	str	r3, [sp, #36]	; 0x24
 800db80:	2320      	movs	r3, #32
 800db82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db86:	2330      	movs	r3, #48	; 0x30
 800db88:	f04f 0901 	mov.w	r9, #1
 800db8c:	f8cd 800c 	str.w	r8, [sp, #12]
 800db90:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800dd50 <_vfiprintf_r+0x24c>
 800db94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db98:	4623      	mov	r3, r4
 800db9a:	469a      	mov	sl, r3
 800db9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dba0:	b10a      	cbz	r2, 800dba6 <_vfiprintf_r+0xa2>
 800dba2:	2a25      	cmp	r2, #37	; 0x25
 800dba4:	d1f9      	bne.n	800db9a <_vfiprintf_r+0x96>
 800dba6:	ebba 0b04 	subs.w	fp, sl, r4
 800dbaa:	d00b      	beq.n	800dbc4 <_vfiprintf_r+0xc0>
 800dbac:	465b      	mov	r3, fp
 800dbae:	4622      	mov	r2, r4
 800dbb0:	4629      	mov	r1, r5
 800dbb2:	4630      	mov	r0, r6
 800dbb4:	f7ff ff94 	bl	800dae0 <__sfputs_r>
 800dbb8:	3001      	adds	r0, #1
 800dbba:	f000 80aa 	beq.w	800dd12 <_vfiprintf_r+0x20e>
 800dbbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbc0:	445a      	add	r2, fp
 800dbc2:	9209      	str	r2, [sp, #36]	; 0x24
 800dbc4:	f89a 3000 	ldrb.w	r3, [sl]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	f000 80a2 	beq.w	800dd12 <_vfiprintf_r+0x20e>
 800dbce:	2300      	movs	r3, #0
 800dbd0:	f04f 32ff 	mov.w	r2, #4294967295
 800dbd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbd8:	f10a 0a01 	add.w	sl, sl, #1
 800dbdc:	9304      	str	r3, [sp, #16]
 800dbde:	9307      	str	r3, [sp, #28]
 800dbe0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dbe4:	931a      	str	r3, [sp, #104]	; 0x68
 800dbe6:	4654      	mov	r4, sl
 800dbe8:	2205      	movs	r2, #5
 800dbea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbee:	4858      	ldr	r0, [pc, #352]	; (800dd50 <_vfiprintf_r+0x24c>)
 800dbf0:	f7fe ff84 	bl	800cafc <memchr>
 800dbf4:	9a04      	ldr	r2, [sp, #16]
 800dbf6:	b9d8      	cbnz	r0, 800dc30 <_vfiprintf_r+0x12c>
 800dbf8:	06d1      	lsls	r1, r2, #27
 800dbfa:	bf44      	itt	mi
 800dbfc:	2320      	movmi	r3, #32
 800dbfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc02:	0713      	lsls	r3, r2, #28
 800dc04:	bf44      	itt	mi
 800dc06:	232b      	movmi	r3, #43	; 0x2b
 800dc08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc0c:	f89a 3000 	ldrb.w	r3, [sl]
 800dc10:	2b2a      	cmp	r3, #42	; 0x2a
 800dc12:	d015      	beq.n	800dc40 <_vfiprintf_r+0x13c>
 800dc14:	4654      	mov	r4, sl
 800dc16:	2000      	movs	r0, #0
 800dc18:	f04f 0c0a 	mov.w	ip, #10
 800dc1c:	9a07      	ldr	r2, [sp, #28]
 800dc1e:	4621      	mov	r1, r4
 800dc20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc24:	3b30      	subs	r3, #48	; 0x30
 800dc26:	2b09      	cmp	r3, #9
 800dc28:	d94e      	bls.n	800dcc8 <_vfiprintf_r+0x1c4>
 800dc2a:	b1b0      	cbz	r0, 800dc5a <_vfiprintf_r+0x156>
 800dc2c:	9207      	str	r2, [sp, #28]
 800dc2e:	e014      	b.n	800dc5a <_vfiprintf_r+0x156>
 800dc30:	eba0 0308 	sub.w	r3, r0, r8
 800dc34:	fa09 f303 	lsl.w	r3, r9, r3
 800dc38:	4313      	orrs	r3, r2
 800dc3a:	46a2      	mov	sl, r4
 800dc3c:	9304      	str	r3, [sp, #16]
 800dc3e:	e7d2      	b.n	800dbe6 <_vfiprintf_r+0xe2>
 800dc40:	9b03      	ldr	r3, [sp, #12]
 800dc42:	1d19      	adds	r1, r3, #4
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	9103      	str	r1, [sp, #12]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	bfbb      	ittet	lt
 800dc4c:	425b      	neglt	r3, r3
 800dc4e:	f042 0202 	orrlt.w	r2, r2, #2
 800dc52:	9307      	strge	r3, [sp, #28]
 800dc54:	9307      	strlt	r3, [sp, #28]
 800dc56:	bfb8      	it	lt
 800dc58:	9204      	strlt	r2, [sp, #16]
 800dc5a:	7823      	ldrb	r3, [r4, #0]
 800dc5c:	2b2e      	cmp	r3, #46	; 0x2e
 800dc5e:	d10c      	bne.n	800dc7a <_vfiprintf_r+0x176>
 800dc60:	7863      	ldrb	r3, [r4, #1]
 800dc62:	2b2a      	cmp	r3, #42	; 0x2a
 800dc64:	d135      	bne.n	800dcd2 <_vfiprintf_r+0x1ce>
 800dc66:	9b03      	ldr	r3, [sp, #12]
 800dc68:	3402      	adds	r4, #2
 800dc6a:	1d1a      	adds	r2, r3, #4
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	9203      	str	r2, [sp, #12]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	bfb8      	it	lt
 800dc74:	f04f 33ff 	movlt.w	r3, #4294967295
 800dc78:	9305      	str	r3, [sp, #20]
 800dc7a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800dd54 <_vfiprintf_r+0x250>
 800dc7e:	2203      	movs	r2, #3
 800dc80:	4650      	mov	r0, sl
 800dc82:	7821      	ldrb	r1, [r4, #0]
 800dc84:	f7fe ff3a 	bl	800cafc <memchr>
 800dc88:	b140      	cbz	r0, 800dc9c <_vfiprintf_r+0x198>
 800dc8a:	2340      	movs	r3, #64	; 0x40
 800dc8c:	eba0 000a 	sub.w	r0, r0, sl
 800dc90:	fa03 f000 	lsl.w	r0, r3, r0
 800dc94:	9b04      	ldr	r3, [sp, #16]
 800dc96:	3401      	adds	r4, #1
 800dc98:	4303      	orrs	r3, r0
 800dc9a:	9304      	str	r3, [sp, #16]
 800dc9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dca0:	2206      	movs	r2, #6
 800dca2:	482d      	ldr	r0, [pc, #180]	; (800dd58 <_vfiprintf_r+0x254>)
 800dca4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dca8:	f7fe ff28 	bl	800cafc <memchr>
 800dcac:	2800      	cmp	r0, #0
 800dcae:	d03f      	beq.n	800dd30 <_vfiprintf_r+0x22c>
 800dcb0:	4b2a      	ldr	r3, [pc, #168]	; (800dd5c <_vfiprintf_r+0x258>)
 800dcb2:	bb1b      	cbnz	r3, 800dcfc <_vfiprintf_r+0x1f8>
 800dcb4:	9b03      	ldr	r3, [sp, #12]
 800dcb6:	3307      	adds	r3, #7
 800dcb8:	f023 0307 	bic.w	r3, r3, #7
 800dcbc:	3308      	adds	r3, #8
 800dcbe:	9303      	str	r3, [sp, #12]
 800dcc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcc2:	443b      	add	r3, r7
 800dcc4:	9309      	str	r3, [sp, #36]	; 0x24
 800dcc6:	e767      	b.n	800db98 <_vfiprintf_r+0x94>
 800dcc8:	460c      	mov	r4, r1
 800dcca:	2001      	movs	r0, #1
 800dccc:	fb0c 3202 	mla	r2, ip, r2, r3
 800dcd0:	e7a5      	b.n	800dc1e <_vfiprintf_r+0x11a>
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	f04f 0c0a 	mov.w	ip, #10
 800dcd8:	4619      	mov	r1, r3
 800dcda:	3401      	adds	r4, #1
 800dcdc:	9305      	str	r3, [sp, #20]
 800dcde:	4620      	mov	r0, r4
 800dce0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dce4:	3a30      	subs	r2, #48	; 0x30
 800dce6:	2a09      	cmp	r2, #9
 800dce8:	d903      	bls.n	800dcf2 <_vfiprintf_r+0x1ee>
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d0c5      	beq.n	800dc7a <_vfiprintf_r+0x176>
 800dcee:	9105      	str	r1, [sp, #20]
 800dcf0:	e7c3      	b.n	800dc7a <_vfiprintf_r+0x176>
 800dcf2:	4604      	mov	r4, r0
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	fb0c 2101 	mla	r1, ip, r1, r2
 800dcfa:	e7f0      	b.n	800dcde <_vfiprintf_r+0x1da>
 800dcfc:	ab03      	add	r3, sp, #12
 800dcfe:	9300      	str	r3, [sp, #0]
 800dd00:	462a      	mov	r2, r5
 800dd02:	4630      	mov	r0, r6
 800dd04:	4b16      	ldr	r3, [pc, #88]	; (800dd60 <_vfiprintf_r+0x25c>)
 800dd06:	a904      	add	r1, sp, #16
 800dd08:	f7fc f878 	bl	8009dfc <_printf_float>
 800dd0c:	4607      	mov	r7, r0
 800dd0e:	1c78      	adds	r0, r7, #1
 800dd10:	d1d6      	bne.n	800dcc0 <_vfiprintf_r+0x1bc>
 800dd12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd14:	07d9      	lsls	r1, r3, #31
 800dd16:	d405      	bmi.n	800dd24 <_vfiprintf_r+0x220>
 800dd18:	89ab      	ldrh	r3, [r5, #12]
 800dd1a:	059a      	lsls	r2, r3, #22
 800dd1c:	d402      	bmi.n	800dd24 <_vfiprintf_r+0x220>
 800dd1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd20:	f000 fa9d 	bl	800e25e <__retarget_lock_release_recursive>
 800dd24:	89ab      	ldrh	r3, [r5, #12]
 800dd26:	065b      	lsls	r3, r3, #25
 800dd28:	f53f af12 	bmi.w	800db50 <_vfiprintf_r+0x4c>
 800dd2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd2e:	e711      	b.n	800db54 <_vfiprintf_r+0x50>
 800dd30:	ab03      	add	r3, sp, #12
 800dd32:	9300      	str	r3, [sp, #0]
 800dd34:	462a      	mov	r2, r5
 800dd36:	4630      	mov	r0, r6
 800dd38:	4b09      	ldr	r3, [pc, #36]	; (800dd60 <_vfiprintf_r+0x25c>)
 800dd3a:	a904      	add	r1, sp, #16
 800dd3c:	f7fc fafa 	bl	800a334 <_printf_i>
 800dd40:	e7e4      	b.n	800dd0c <_vfiprintf_r+0x208>
 800dd42:	bf00      	nop
 800dd44:	0800ea44 	.word	0x0800ea44
 800dd48:	0800ea64 	.word	0x0800ea64
 800dd4c:	0800ea24 	.word	0x0800ea24
 800dd50:	0800e9d4 	.word	0x0800e9d4
 800dd54:	0800e9da 	.word	0x0800e9da
 800dd58:	0800e9de 	.word	0x0800e9de
 800dd5c:	08009dfd 	.word	0x08009dfd
 800dd60:	0800dae1 	.word	0x0800dae1

0800dd64 <__swbuf_r>:
 800dd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd66:	460e      	mov	r6, r1
 800dd68:	4614      	mov	r4, r2
 800dd6a:	4605      	mov	r5, r0
 800dd6c:	b118      	cbz	r0, 800dd76 <__swbuf_r+0x12>
 800dd6e:	6983      	ldr	r3, [r0, #24]
 800dd70:	b90b      	cbnz	r3, 800dd76 <__swbuf_r+0x12>
 800dd72:	f000 f9d5 	bl	800e120 <__sinit>
 800dd76:	4b21      	ldr	r3, [pc, #132]	; (800ddfc <__swbuf_r+0x98>)
 800dd78:	429c      	cmp	r4, r3
 800dd7a:	d12b      	bne.n	800ddd4 <__swbuf_r+0x70>
 800dd7c:	686c      	ldr	r4, [r5, #4]
 800dd7e:	69a3      	ldr	r3, [r4, #24]
 800dd80:	60a3      	str	r3, [r4, #8]
 800dd82:	89a3      	ldrh	r3, [r4, #12]
 800dd84:	071a      	lsls	r2, r3, #28
 800dd86:	d52f      	bpl.n	800dde8 <__swbuf_r+0x84>
 800dd88:	6923      	ldr	r3, [r4, #16]
 800dd8a:	b36b      	cbz	r3, 800dde8 <__swbuf_r+0x84>
 800dd8c:	6923      	ldr	r3, [r4, #16]
 800dd8e:	6820      	ldr	r0, [r4, #0]
 800dd90:	b2f6      	uxtb	r6, r6
 800dd92:	1ac0      	subs	r0, r0, r3
 800dd94:	6963      	ldr	r3, [r4, #20]
 800dd96:	4637      	mov	r7, r6
 800dd98:	4283      	cmp	r3, r0
 800dd9a:	dc04      	bgt.n	800dda6 <__swbuf_r+0x42>
 800dd9c:	4621      	mov	r1, r4
 800dd9e:	4628      	mov	r0, r5
 800dda0:	f000 f92a 	bl	800dff8 <_fflush_r>
 800dda4:	bb30      	cbnz	r0, 800ddf4 <__swbuf_r+0x90>
 800dda6:	68a3      	ldr	r3, [r4, #8]
 800dda8:	3001      	adds	r0, #1
 800ddaa:	3b01      	subs	r3, #1
 800ddac:	60a3      	str	r3, [r4, #8]
 800ddae:	6823      	ldr	r3, [r4, #0]
 800ddb0:	1c5a      	adds	r2, r3, #1
 800ddb2:	6022      	str	r2, [r4, #0]
 800ddb4:	701e      	strb	r6, [r3, #0]
 800ddb6:	6963      	ldr	r3, [r4, #20]
 800ddb8:	4283      	cmp	r3, r0
 800ddba:	d004      	beq.n	800ddc6 <__swbuf_r+0x62>
 800ddbc:	89a3      	ldrh	r3, [r4, #12]
 800ddbe:	07db      	lsls	r3, r3, #31
 800ddc0:	d506      	bpl.n	800ddd0 <__swbuf_r+0x6c>
 800ddc2:	2e0a      	cmp	r6, #10
 800ddc4:	d104      	bne.n	800ddd0 <__swbuf_r+0x6c>
 800ddc6:	4621      	mov	r1, r4
 800ddc8:	4628      	mov	r0, r5
 800ddca:	f000 f915 	bl	800dff8 <_fflush_r>
 800ddce:	b988      	cbnz	r0, 800ddf4 <__swbuf_r+0x90>
 800ddd0:	4638      	mov	r0, r7
 800ddd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddd4:	4b0a      	ldr	r3, [pc, #40]	; (800de00 <__swbuf_r+0x9c>)
 800ddd6:	429c      	cmp	r4, r3
 800ddd8:	d101      	bne.n	800ddde <__swbuf_r+0x7a>
 800ddda:	68ac      	ldr	r4, [r5, #8]
 800dddc:	e7cf      	b.n	800dd7e <__swbuf_r+0x1a>
 800ddde:	4b09      	ldr	r3, [pc, #36]	; (800de04 <__swbuf_r+0xa0>)
 800dde0:	429c      	cmp	r4, r3
 800dde2:	bf08      	it	eq
 800dde4:	68ec      	ldreq	r4, [r5, #12]
 800dde6:	e7ca      	b.n	800dd7e <__swbuf_r+0x1a>
 800dde8:	4621      	mov	r1, r4
 800ddea:	4628      	mov	r0, r5
 800ddec:	f000 f80c 	bl	800de08 <__swsetup_r>
 800ddf0:	2800      	cmp	r0, #0
 800ddf2:	d0cb      	beq.n	800dd8c <__swbuf_r+0x28>
 800ddf4:	f04f 37ff 	mov.w	r7, #4294967295
 800ddf8:	e7ea      	b.n	800ddd0 <__swbuf_r+0x6c>
 800ddfa:	bf00      	nop
 800ddfc:	0800ea44 	.word	0x0800ea44
 800de00:	0800ea64 	.word	0x0800ea64
 800de04:	0800ea24 	.word	0x0800ea24

0800de08 <__swsetup_r>:
 800de08:	4b32      	ldr	r3, [pc, #200]	; (800ded4 <__swsetup_r+0xcc>)
 800de0a:	b570      	push	{r4, r5, r6, lr}
 800de0c:	681d      	ldr	r5, [r3, #0]
 800de0e:	4606      	mov	r6, r0
 800de10:	460c      	mov	r4, r1
 800de12:	b125      	cbz	r5, 800de1e <__swsetup_r+0x16>
 800de14:	69ab      	ldr	r3, [r5, #24]
 800de16:	b913      	cbnz	r3, 800de1e <__swsetup_r+0x16>
 800de18:	4628      	mov	r0, r5
 800de1a:	f000 f981 	bl	800e120 <__sinit>
 800de1e:	4b2e      	ldr	r3, [pc, #184]	; (800ded8 <__swsetup_r+0xd0>)
 800de20:	429c      	cmp	r4, r3
 800de22:	d10f      	bne.n	800de44 <__swsetup_r+0x3c>
 800de24:	686c      	ldr	r4, [r5, #4]
 800de26:	89a3      	ldrh	r3, [r4, #12]
 800de28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de2c:	0719      	lsls	r1, r3, #28
 800de2e:	d42c      	bmi.n	800de8a <__swsetup_r+0x82>
 800de30:	06dd      	lsls	r5, r3, #27
 800de32:	d411      	bmi.n	800de58 <__swsetup_r+0x50>
 800de34:	2309      	movs	r3, #9
 800de36:	6033      	str	r3, [r6, #0]
 800de38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800de3c:	f04f 30ff 	mov.w	r0, #4294967295
 800de40:	81a3      	strh	r3, [r4, #12]
 800de42:	e03e      	b.n	800dec2 <__swsetup_r+0xba>
 800de44:	4b25      	ldr	r3, [pc, #148]	; (800dedc <__swsetup_r+0xd4>)
 800de46:	429c      	cmp	r4, r3
 800de48:	d101      	bne.n	800de4e <__swsetup_r+0x46>
 800de4a:	68ac      	ldr	r4, [r5, #8]
 800de4c:	e7eb      	b.n	800de26 <__swsetup_r+0x1e>
 800de4e:	4b24      	ldr	r3, [pc, #144]	; (800dee0 <__swsetup_r+0xd8>)
 800de50:	429c      	cmp	r4, r3
 800de52:	bf08      	it	eq
 800de54:	68ec      	ldreq	r4, [r5, #12]
 800de56:	e7e6      	b.n	800de26 <__swsetup_r+0x1e>
 800de58:	0758      	lsls	r0, r3, #29
 800de5a:	d512      	bpl.n	800de82 <__swsetup_r+0x7a>
 800de5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de5e:	b141      	cbz	r1, 800de72 <__swsetup_r+0x6a>
 800de60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de64:	4299      	cmp	r1, r3
 800de66:	d002      	beq.n	800de6e <__swsetup_r+0x66>
 800de68:	4630      	mov	r0, r6
 800de6a:	f7ff fb2f 	bl	800d4cc <_free_r>
 800de6e:	2300      	movs	r3, #0
 800de70:	6363      	str	r3, [r4, #52]	; 0x34
 800de72:	89a3      	ldrh	r3, [r4, #12]
 800de74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800de78:	81a3      	strh	r3, [r4, #12]
 800de7a:	2300      	movs	r3, #0
 800de7c:	6063      	str	r3, [r4, #4]
 800de7e:	6923      	ldr	r3, [r4, #16]
 800de80:	6023      	str	r3, [r4, #0]
 800de82:	89a3      	ldrh	r3, [r4, #12]
 800de84:	f043 0308 	orr.w	r3, r3, #8
 800de88:	81a3      	strh	r3, [r4, #12]
 800de8a:	6923      	ldr	r3, [r4, #16]
 800de8c:	b94b      	cbnz	r3, 800dea2 <__swsetup_r+0x9a>
 800de8e:	89a3      	ldrh	r3, [r4, #12]
 800de90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800de94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de98:	d003      	beq.n	800dea2 <__swsetup_r+0x9a>
 800de9a:	4621      	mov	r1, r4
 800de9c:	4630      	mov	r0, r6
 800de9e:	f000 fa05 	bl	800e2ac <__smakebuf_r>
 800dea2:	89a0      	ldrh	r0, [r4, #12]
 800dea4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dea8:	f010 0301 	ands.w	r3, r0, #1
 800deac:	d00a      	beq.n	800dec4 <__swsetup_r+0xbc>
 800deae:	2300      	movs	r3, #0
 800deb0:	60a3      	str	r3, [r4, #8]
 800deb2:	6963      	ldr	r3, [r4, #20]
 800deb4:	425b      	negs	r3, r3
 800deb6:	61a3      	str	r3, [r4, #24]
 800deb8:	6923      	ldr	r3, [r4, #16]
 800deba:	b943      	cbnz	r3, 800dece <__swsetup_r+0xc6>
 800debc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dec0:	d1ba      	bne.n	800de38 <__swsetup_r+0x30>
 800dec2:	bd70      	pop	{r4, r5, r6, pc}
 800dec4:	0781      	lsls	r1, r0, #30
 800dec6:	bf58      	it	pl
 800dec8:	6963      	ldrpl	r3, [r4, #20]
 800deca:	60a3      	str	r3, [r4, #8]
 800decc:	e7f4      	b.n	800deb8 <__swsetup_r+0xb0>
 800dece:	2000      	movs	r0, #0
 800ded0:	e7f7      	b.n	800dec2 <__swsetup_r+0xba>
 800ded2:	bf00      	nop
 800ded4:	2000017c 	.word	0x2000017c
 800ded8:	0800ea44 	.word	0x0800ea44
 800dedc:	0800ea64 	.word	0x0800ea64
 800dee0:	0800ea24 	.word	0x0800ea24

0800dee4 <abort>:
 800dee4:	2006      	movs	r0, #6
 800dee6:	b508      	push	{r3, lr}
 800dee8:	f000 fa50 	bl	800e38c <raise>
 800deec:	2001      	movs	r0, #1
 800deee:	f7f3 fca6 	bl	800183e <_exit>
	...

0800def4 <__sflush_r>:
 800def4:	898a      	ldrh	r2, [r1, #12]
 800def6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800def8:	4605      	mov	r5, r0
 800defa:	0710      	lsls	r0, r2, #28
 800defc:	460c      	mov	r4, r1
 800defe:	d457      	bmi.n	800dfb0 <__sflush_r+0xbc>
 800df00:	684b      	ldr	r3, [r1, #4]
 800df02:	2b00      	cmp	r3, #0
 800df04:	dc04      	bgt.n	800df10 <__sflush_r+0x1c>
 800df06:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800df08:	2b00      	cmp	r3, #0
 800df0a:	dc01      	bgt.n	800df10 <__sflush_r+0x1c>
 800df0c:	2000      	movs	r0, #0
 800df0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df12:	2e00      	cmp	r6, #0
 800df14:	d0fa      	beq.n	800df0c <__sflush_r+0x18>
 800df16:	2300      	movs	r3, #0
 800df18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800df1c:	682f      	ldr	r7, [r5, #0]
 800df1e:	602b      	str	r3, [r5, #0]
 800df20:	d032      	beq.n	800df88 <__sflush_r+0x94>
 800df22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800df24:	89a3      	ldrh	r3, [r4, #12]
 800df26:	075a      	lsls	r2, r3, #29
 800df28:	d505      	bpl.n	800df36 <__sflush_r+0x42>
 800df2a:	6863      	ldr	r3, [r4, #4]
 800df2c:	1ac0      	subs	r0, r0, r3
 800df2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800df30:	b10b      	cbz	r3, 800df36 <__sflush_r+0x42>
 800df32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800df34:	1ac0      	subs	r0, r0, r3
 800df36:	2300      	movs	r3, #0
 800df38:	4602      	mov	r2, r0
 800df3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df3c:	4628      	mov	r0, r5
 800df3e:	6a21      	ldr	r1, [r4, #32]
 800df40:	47b0      	blx	r6
 800df42:	1c43      	adds	r3, r0, #1
 800df44:	89a3      	ldrh	r3, [r4, #12]
 800df46:	d106      	bne.n	800df56 <__sflush_r+0x62>
 800df48:	6829      	ldr	r1, [r5, #0]
 800df4a:	291d      	cmp	r1, #29
 800df4c:	d82c      	bhi.n	800dfa8 <__sflush_r+0xb4>
 800df4e:	4a29      	ldr	r2, [pc, #164]	; (800dff4 <__sflush_r+0x100>)
 800df50:	40ca      	lsrs	r2, r1
 800df52:	07d6      	lsls	r6, r2, #31
 800df54:	d528      	bpl.n	800dfa8 <__sflush_r+0xb4>
 800df56:	2200      	movs	r2, #0
 800df58:	6062      	str	r2, [r4, #4]
 800df5a:	6922      	ldr	r2, [r4, #16]
 800df5c:	04d9      	lsls	r1, r3, #19
 800df5e:	6022      	str	r2, [r4, #0]
 800df60:	d504      	bpl.n	800df6c <__sflush_r+0x78>
 800df62:	1c42      	adds	r2, r0, #1
 800df64:	d101      	bne.n	800df6a <__sflush_r+0x76>
 800df66:	682b      	ldr	r3, [r5, #0]
 800df68:	b903      	cbnz	r3, 800df6c <__sflush_r+0x78>
 800df6a:	6560      	str	r0, [r4, #84]	; 0x54
 800df6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df6e:	602f      	str	r7, [r5, #0]
 800df70:	2900      	cmp	r1, #0
 800df72:	d0cb      	beq.n	800df0c <__sflush_r+0x18>
 800df74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df78:	4299      	cmp	r1, r3
 800df7a:	d002      	beq.n	800df82 <__sflush_r+0x8e>
 800df7c:	4628      	mov	r0, r5
 800df7e:	f7ff faa5 	bl	800d4cc <_free_r>
 800df82:	2000      	movs	r0, #0
 800df84:	6360      	str	r0, [r4, #52]	; 0x34
 800df86:	e7c2      	b.n	800df0e <__sflush_r+0x1a>
 800df88:	6a21      	ldr	r1, [r4, #32]
 800df8a:	2301      	movs	r3, #1
 800df8c:	4628      	mov	r0, r5
 800df8e:	47b0      	blx	r6
 800df90:	1c41      	adds	r1, r0, #1
 800df92:	d1c7      	bne.n	800df24 <__sflush_r+0x30>
 800df94:	682b      	ldr	r3, [r5, #0]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d0c4      	beq.n	800df24 <__sflush_r+0x30>
 800df9a:	2b1d      	cmp	r3, #29
 800df9c:	d001      	beq.n	800dfa2 <__sflush_r+0xae>
 800df9e:	2b16      	cmp	r3, #22
 800dfa0:	d101      	bne.n	800dfa6 <__sflush_r+0xb2>
 800dfa2:	602f      	str	r7, [r5, #0]
 800dfa4:	e7b2      	b.n	800df0c <__sflush_r+0x18>
 800dfa6:	89a3      	ldrh	r3, [r4, #12]
 800dfa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfac:	81a3      	strh	r3, [r4, #12]
 800dfae:	e7ae      	b.n	800df0e <__sflush_r+0x1a>
 800dfb0:	690f      	ldr	r7, [r1, #16]
 800dfb2:	2f00      	cmp	r7, #0
 800dfb4:	d0aa      	beq.n	800df0c <__sflush_r+0x18>
 800dfb6:	0793      	lsls	r3, r2, #30
 800dfb8:	bf18      	it	ne
 800dfba:	2300      	movne	r3, #0
 800dfbc:	680e      	ldr	r6, [r1, #0]
 800dfbe:	bf08      	it	eq
 800dfc0:	694b      	ldreq	r3, [r1, #20]
 800dfc2:	1bf6      	subs	r6, r6, r7
 800dfc4:	600f      	str	r7, [r1, #0]
 800dfc6:	608b      	str	r3, [r1, #8]
 800dfc8:	2e00      	cmp	r6, #0
 800dfca:	dd9f      	ble.n	800df0c <__sflush_r+0x18>
 800dfcc:	4633      	mov	r3, r6
 800dfce:	463a      	mov	r2, r7
 800dfd0:	4628      	mov	r0, r5
 800dfd2:	6a21      	ldr	r1, [r4, #32]
 800dfd4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800dfd8:	47e0      	blx	ip
 800dfda:	2800      	cmp	r0, #0
 800dfdc:	dc06      	bgt.n	800dfec <__sflush_r+0xf8>
 800dfde:	89a3      	ldrh	r3, [r4, #12]
 800dfe0:	f04f 30ff 	mov.w	r0, #4294967295
 800dfe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfe8:	81a3      	strh	r3, [r4, #12]
 800dfea:	e790      	b.n	800df0e <__sflush_r+0x1a>
 800dfec:	4407      	add	r7, r0
 800dfee:	1a36      	subs	r6, r6, r0
 800dff0:	e7ea      	b.n	800dfc8 <__sflush_r+0xd4>
 800dff2:	bf00      	nop
 800dff4:	20400001 	.word	0x20400001

0800dff8 <_fflush_r>:
 800dff8:	b538      	push	{r3, r4, r5, lr}
 800dffa:	690b      	ldr	r3, [r1, #16]
 800dffc:	4605      	mov	r5, r0
 800dffe:	460c      	mov	r4, r1
 800e000:	b913      	cbnz	r3, 800e008 <_fflush_r+0x10>
 800e002:	2500      	movs	r5, #0
 800e004:	4628      	mov	r0, r5
 800e006:	bd38      	pop	{r3, r4, r5, pc}
 800e008:	b118      	cbz	r0, 800e012 <_fflush_r+0x1a>
 800e00a:	6983      	ldr	r3, [r0, #24]
 800e00c:	b90b      	cbnz	r3, 800e012 <_fflush_r+0x1a>
 800e00e:	f000 f887 	bl	800e120 <__sinit>
 800e012:	4b14      	ldr	r3, [pc, #80]	; (800e064 <_fflush_r+0x6c>)
 800e014:	429c      	cmp	r4, r3
 800e016:	d11b      	bne.n	800e050 <_fflush_r+0x58>
 800e018:	686c      	ldr	r4, [r5, #4]
 800e01a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d0ef      	beq.n	800e002 <_fflush_r+0xa>
 800e022:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e024:	07d0      	lsls	r0, r2, #31
 800e026:	d404      	bmi.n	800e032 <_fflush_r+0x3a>
 800e028:	0599      	lsls	r1, r3, #22
 800e02a:	d402      	bmi.n	800e032 <_fflush_r+0x3a>
 800e02c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e02e:	f000 f915 	bl	800e25c <__retarget_lock_acquire_recursive>
 800e032:	4628      	mov	r0, r5
 800e034:	4621      	mov	r1, r4
 800e036:	f7ff ff5d 	bl	800def4 <__sflush_r>
 800e03a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e03c:	4605      	mov	r5, r0
 800e03e:	07da      	lsls	r2, r3, #31
 800e040:	d4e0      	bmi.n	800e004 <_fflush_r+0xc>
 800e042:	89a3      	ldrh	r3, [r4, #12]
 800e044:	059b      	lsls	r3, r3, #22
 800e046:	d4dd      	bmi.n	800e004 <_fflush_r+0xc>
 800e048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e04a:	f000 f908 	bl	800e25e <__retarget_lock_release_recursive>
 800e04e:	e7d9      	b.n	800e004 <_fflush_r+0xc>
 800e050:	4b05      	ldr	r3, [pc, #20]	; (800e068 <_fflush_r+0x70>)
 800e052:	429c      	cmp	r4, r3
 800e054:	d101      	bne.n	800e05a <_fflush_r+0x62>
 800e056:	68ac      	ldr	r4, [r5, #8]
 800e058:	e7df      	b.n	800e01a <_fflush_r+0x22>
 800e05a:	4b04      	ldr	r3, [pc, #16]	; (800e06c <_fflush_r+0x74>)
 800e05c:	429c      	cmp	r4, r3
 800e05e:	bf08      	it	eq
 800e060:	68ec      	ldreq	r4, [r5, #12]
 800e062:	e7da      	b.n	800e01a <_fflush_r+0x22>
 800e064:	0800ea44 	.word	0x0800ea44
 800e068:	0800ea64 	.word	0x0800ea64
 800e06c:	0800ea24 	.word	0x0800ea24

0800e070 <std>:
 800e070:	2300      	movs	r3, #0
 800e072:	b510      	push	{r4, lr}
 800e074:	4604      	mov	r4, r0
 800e076:	e9c0 3300 	strd	r3, r3, [r0]
 800e07a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e07e:	6083      	str	r3, [r0, #8]
 800e080:	8181      	strh	r1, [r0, #12]
 800e082:	6643      	str	r3, [r0, #100]	; 0x64
 800e084:	81c2      	strh	r2, [r0, #14]
 800e086:	6183      	str	r3, [r0, #24]
 800e088:	4619      	mov	r1, r3
 800e08a:	2208      	movs	r2, #8
 800e08c:	305c      	adds	r0, #92	; 0x5c
 800e08e:	f7fb fe0f 	bl	8009cb0 <memset>
 800e092:	4b05      	ldr	r3, [pc, #20]	; (800e0a8 <std+0x38>)
 800e094:	6224      	str	r4, [r4, #32]
 800e096:	6263      	str	r3, [r4, #36]	; 0x24
 800e098:	4b04      	ldr	r3, [pc, #16]	; (800e0ac <std+0x3c>)
 800e09a:	62a3      	str	r3, [r4, #40]	; 0x28
 800e09c:	4b04      	ldr	r3, [pc, #16]	; (800e0b0 <std+0x40>)
 800e09e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e0a0:	4b04      	ldr	r3, [pc, #16]	; (800e0b4 <std+0x44>)
 800e0a2:	6323      	str	r3, [r4, #48]	; 0x30
 800e0a4:	bd10      	pop	{r4, pc}
 800e0a6:	bf00      	nop
 800e0a8:	0800e3c5 	.word	0x0800e3c5
 800e0ac:	0800e3e7 	.word	0x0800e3e7
 800e0b0:	0800e41f 	.word	0x0800e41f
 800e0b4:	0800e443 	.word	0x0800e443

0800e0b8 <_cleanup_r>:
 800e0b8:	4901      	ldr	r1, [pc, #4]	; (800e0c0 <_cleanup_r+0x8>)
 800e0ba:	f000 b8af 	b.w	800e21c <_fwalk_reent>
 800e0be:	bf00      	nop
 800e0c0:	0800dff9 	.word	0x0800dff9

0800e0c4 <__sfmoreglue>:
 800e0c4:	2268      	movs	r2, #104	; 0x68
 800e0c6:	b570      	push	{r4, r5, r6, lr}
 800e0c8:	1e4d      	subs	r5, r1, #1
 800e0ca:	4355      	muls	r5, r2
 800e0cc:	460e      	mov	r6, r1
 800e0ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e0d2:	f7ff fa63 	bl	800d59c <_malloc_r>
 800e0d6:	4604      	mov	r4, r0
 800e0d8:	b140      	cbz	r0, 800e0ec <__sfmoreglue+0x28>
 800e0da:	2100      	movs	r1, #0
 800e0dc:	e9c0 1600 	strd	r1, r6, [r0]
 800e0e0:	300c      	adds	r0, #12
 800e0e2:	60a0      	str	r0, [r4, #8]
 800e0e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e0e8:	f7fb fde2 	bl	8009cb0 <memset>
 800e0ec:	4620      	mov	r0, r4
 800e0ee:	bd70      	pop	{r4, r5, r6, pc}

0800e0f0 <__sfp_lock_acquire>:
 800e0f0:	4801      	ldr	r0, [pc, #4]	; (800e0f8 <__sfp_lock_acquire+0x8>)
 800e0f2:	f000 b8b3 	b.w	800e25c <__retarget_lock_acquire_recursive>
 800e0f6:	bf00      	nop
 800e0f8:	200019ad 	.word	0x200019ad

0800e0fc <__sfp_lock_release>:
 800e0fc:	4801      	ldr	r0, [pc, #4]	; (800e104 <__sfp_lock_release+0x8>)
 800e0fe:	f000 b8ae 	b.w	800e25e <__retarget_lock_release_recursive>
 800e102:	bf00      	nop
 800e104:	200019ad 	.word	0x200019ad

0800e108 <__sinit_lock_acquire>:
 800e108:	4801      	ldr	r0, [pc, #4]	; (800e110 <__sinit_lock_acquire+0x8>)
 800e10a:	f000 b8a7 	b.w	800e25c <__retarget_lock_acquire_recursive>
 800e10e:	bf00      	nop
 800e110:	200019ae 	.word	0x200019ae

0800e114 <__sinit_lock_release>:
 800e114:	4801      	ldr	r0, [pc, #4]	; (800e11c <__sinit_lock_release+0x8>)
 800e116:	f000 b8a2 	b.w	800e25e <__retarget_lock_release_recursive>
 800e11a:	bf00      	nop
 800e11c:	200019ae 	.word	0x200019ae

0800e120 <__sinit>:
 800e120:	b510      	push	{r4, lr}
 800e122:	4604      	mov	r4, r0
 800e124:	f7ff fff0 	bl	800e108 <__sinit_lock_acquire>
 800e128:	69a3      	ldr	r3, [r4, #24]
 800e12a:	b11b      	cbz	r3, 800e134 <__sinit+0x14>
 800e12c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e130:	f7ff bff0 	b.w	800e114 <__sinit_lock_release>
 800e134:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e138:	6523      	str	r3, [r4, #80]	; 0x50
 800e13a:	4b13      	ldr	r3, [pc, #76]	; (800e188 <__sinit+0x68>)
 800e13c:	4a13      	ldr	r2, [pc, #76]	; (800e18c <__sinit+0x6c>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	62a2      	str	r2, [r4, #40]	; 0x28
 800e142:	42a3      	cmp	r3, r4
 800e144:	bf08      	it	eq
 800e146:	2301      	moveq	r3, #1
 800e148:	4620      	mov	r0, r4
 800e14a:	bf08      	it	eq
 800e14c:	61a3      	streq	r3, [r4, #24]
 800e14e:	f000 f81f 	bl	800e190 <__sfp>
 800e152:	6060      	str	r0, [r4, #4]
 800e154:	4620      	mov	r0, r4
 800e156:	f000 f81b 	bl	800e190 <__sfp>
 800e15a:	60a0      	str	r0, [r4, #8]
 800e15c:	4620      	mov	r0, r4
 800e15e:	f000 f817 	bl	800e190 <__sfp>
 800e162:	2200      	movs	r2, #0
 800e164:	2104      	movs	r1, #4
 800e166:	60e0      	str	r0, [r4, #12]
 800e168:	6860      	ldr	r0, [r4, #4]
 800e16a:	f7ff ff81 	bl	800e070 <std>
 800e16e:	2201      	movs	r2, #1
 800e170:	2109      	movs	r1, #9
 800e172:	68a0      	ldr	r0, [r4, #8]
 800e174:	f7ff ff7c 	bl	800e070 <std>
 800e178:	2202      	movs	r2, #2
 800e17a:	2112      	movs	r1, #18
 800e17c:	68e0      	ldr	r0, [r4, #12]
 800e17e:	f7ff ff77 	bl	800e070 <std>
 800e182:	2301      	movs	r3, #1
 800e184:	61a3      	str	r3, [r4, #24]
 800e186:	e7d1      	b.n	800e12c <__sinit+0xc>
 800e188:	0800e5dc 	.word	0x0800e5dc
 800e18c:	0800e0b9 	.word	0x0800e0b9

0800e190 <__sfp>:
 800e190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e192:	4607      	mov	r7, r0
 800e194:	f7ff ffac 	bl	800e0f0 <__sfp_lock_acquire>
 800e198:	4b1e      	ldr	r3, [pc, #120]	; (800e214 <__sfp+0x84>)
 800e19a:	681e      	ldr	r6, [r3, #0]
 800e19c:	69b3      	ldr	r3, [r6, #24]
 800e19e:	b913      	cbnz	r3, 800e1a6 <__sfp+0x16>
 800e1a0:	4630      	mov	r0, r6
 800e1a2:	f7ff ffbd 	bl	800e120 <__sinit>
 800e1a6:	3648      	adds	r6, #72	; 0x48
 800e1a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e1ac:	3b01      	subs	r3, #1
 800e1ae:	d503      	bpl.n	800e1b8 <__sfp+0x28>
 800e1b0:	6833      	ldr	r3, [r6, #0]
 800e1b2:	b30b      	cbz	r3, 800e1f8 <__sfp+0x68>
 800e1b4:	6836      	ldr	r6, [r6, #0]
 800e1b6:	e7f7      	b.n	800e1a8 <__sfp+0x18>
 800e1b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e1bc:	b9d5      	cbnz	r5, 800e1f4 <__sfp+0x64>
 800e1be:	4b16      	ldr	r3, [pc, #88]	; (800e218 <__sfp+0x88>)
 800e1c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e1c4:	60e3      	str	r3, [r4, #12]
 800e1c6:	6665      	str	r5, [r4, #100]	; 0x64
 800e1c8:	f000 f847 	bl	800e25a <__retarget_lock_init_recursive>
 800e1cc:	f7ff ff96 	bl	800e0fc <__sfp_lock_release>
 800e1d0:	2208      	movs	r2, #8
 800e1d2:	4629      	mov	r1, r5
 800e1d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e1d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e1dc:	6025      	str	r5, [r4, #0]
 800e1de:	61a5      	str	r5, [r4, #24]
 800e1e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e1e4:	f7fb fd64 	bl	8009cb0 <memset>
 800e1e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e1ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e1f0:	4620      	mov	r0, r4
 800e1f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1f4:	3468      	adds	r4, #104	; 0x68
 800e1f6:	e7d9      	b.n	800e1ac <__sfp+0x1c>
 800e1f8:	2104      	movs	r1, #4
 800e1fa:	4638      	mov	r0, r7
 800e1fc:	f7ff ff62 	bl	800e0c4 <__sfmoreglue>
 800e200:	4604      	mov	r4, r0
 800e202:	6030      	str	r0, [r6, #0]
 800e204:	2800      	cmp	r0, #0
 800e206:	d1d5      	bne.n	800e1b4 <__sfp+0x24>
 800e208:	f7ff ff78 	bl	800e0fc <__sfp_lock_release>
 800e20c:	230c      	movs	r3, #12
 800e20e:	603b      	str	r3, [r7, #0]
 800e210:	e7ee      	b.n	800e1f0 <__sfp+0x60>
 800e212:	bf00      	nop
 800e214:	0800e5dc 	.word	0x0800e5dc
 800e218:	ffff0001 	.word	0xffff0001

0800e21c <_fwalk_reent>:
 800e21c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e220:	4606      	mov	r6, r0
 800e222:	4688      	mov	r8, r1
 800e224:	2700      	movs	r7, #0
 800e226:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e22a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e22e:	f1b9 0901 	subs.w	r9, r9, #1
 800e232:	d505      	bpl.n	800e240 <_fwalk_reent+0x24>
 800e234:	6824      	ldr	r4, [r4, #0]
 800e236:	2c00      	cmp	r4, #0
 800e238:	d1f7      	bne.n	800e22a <_fwalk_reent+0xe>
 800e23a:	4638      	mov	r0, r7
 800e23c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e240:	89ab      	ldrh	r3, [r5, #12]
 800e242:	2b01      	cmp	r3, #1
 800e244:	d907      	bls.n	800e256 <_fwalk_reent+0x3a>
 800e246:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e24a:	3301      	adds	r3, #1
 800e24c:	d003      	beq.n	800e256 <_fwalk_reent+0x3a>
 800e24e:	4629      	mov	r1, r5
 800e250:	4630      	mov	r0, r6
 800e252:	47c0      	blx	r8
 800e254:	4307      	orrs	r7, r0
 800e256:	3568      	adds	r5, #104	; 0x68
 800e258:	e7e9      	b.n	800e22e <_fwalk_reent+0x12>

0800e25a <__retarget_lock_init_recursive>:
 800e25a:	4770      	bx	lr

0800e25c <__retarget_lock_acquire_recursive>:
 800e25c:	4770      	bx	lr

0800e25e <__retarget_lock_release_recursive>:
 800e25e:	4770      	bx	lr

0800e260 <__swhatbuf_r>:
 800e260:	b570      	push	{r4, r5, r6, lr}
 800e262:	460e      	mov	r6, r1
 800e264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e268:	4614      	mov	r4, r2
 800e26a:	2900      	cmp	r1, #0
 800e26c:	461d      	mov	r5, r3
 800e26e:	b096      	sub	sp, #88	; 0x58
 800e270:	da08      	bge.n	800e284 <__swhatbuf_r+0x24>
 800e272:	2200      	movs	r2, #0
 800e274:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e278:	602a      	str	r2, [r5, #0]
 800e27a:	061a      	lsls	r2, r3, #24
 800e27c:	d410      	bmi.n	800e2a0 <__swhatbuf_r+0x40>
 800e27e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e282:	e00e      	b.n	800e2a2 <__swhatbuf_r+0x42>
 800e284:	466a      	mov	r2, sp
 800e286:	f000 f903 	bl	800e490 <_fstat_r>
 800e28a:	2800      	cmp	r0, #0
 800e28c:	dbf1      	blt.n	800e272 <__swhatbuf_r+0x12>
 800e28e:	9a01      	ldr	r2, [sp, #4]
 800e290:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e294:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e298:	425a      	negs	r2, r3
 800e29a:	415a      	adcs	r2, r3
 800e29c:	602a      	str	r2, [r5, #0]
 800e29e:	e7ee      	b.n	800e27e <__swhatbuf_r+0x1e>
 800e2a0:	2340      	movs	r3, #64	; 0x40
 800e2a2:	2000      	movs	r0, #0
 800e2a4:	6023      	str	r3, [r4, #0]
 800e2a6:	b016      	add	sp, #88	; 0x58
 800e2a8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e2ac <__smakebuf_r>:
 800e2ac:	898b      	ldrh	r3, [r1, #12]
 800e2ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e2b0:	079d      	lsls	r5, r3, #30
 800e2b2:	4606      	mov	r6, r0
 800e2b4:	460c      	mov	r4, r1
 800e2b6:	d507      	bpl.n	800e2c8 <__smakebuf_r+0x1c>
 800e2b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e2bc:	6023      	str	r3, [r4, #0]
 800e2be:	6123      	str	r3, [r4, #16]
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	6163      	str	r3, [r4, #20]
 800e2c4:	b002      	add	sp, #8
 800e2c6:	bd70      	pop	{r4, r5, r6, pc}
 800e2c8:	466a      	mov	r2, sp
 800e2ca:	ab01      	add	r3, sp, #4
 800e2cc:	f7ff ffc8 	bl	800e260 <__swhatbuf_r>
 800e2d0:	9900      	ldr	r1, [sp, #0]
 800e2d2:	4605      	mov	r5, r0
 800e2d4:	4630      	mov	r0, r6
 800e2d6:	f7ff f961 	bl	800d59c <_malloc_r>
 800e2da:	b948      	cbnz	r0, 800e2f0 <__smakebuf_r+0x44>
 800e2dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2e0:	059a      	lsls	r2, r3, #22
 800e2e2:	d4ef      	bmi.n	800e2c4 <__smakebuf_r+0x18>
 800e2e4:	f023 0303 	bic.w	r3, r3, #3
 800e2e8:	f043 0302 	orr.w	r3, r3, #2
 800e2ec:	81a3      	strh	r3, [r4, #12]
 800e2ee:	e7e3      	b.n	800e2b8 <__smakebuf_r+0xc>
 800e2f0:	4b0d      	ldr	r3, [pc, #52]	; (800e328 <__smakebuf_r+0x7c>)
 800e2f2:	62b3      	str	r3, [r6, #40]	; 0x28
 800e2f4:	89a3      	ldrh	r3, [r4, #12]
 800e2f6:	6020      	str	r0, [r4, #0]
 800e2f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2fc:	81a3      	strh	r3, [r4, #12]
 800e2fe:	9b00      	ldr	r3, [sp, #0]
 800e300:	6120      	str	r0, [r4, #16]
 800e302:	6163      	str	r3, [r4, #20]
 800e304:	9b01      	ldr	r3, [sp, #4]
 800e306:	b15b      	cbz	r3, 800e320 <__smakebuf_r+0x74>
 800e308:	4630      	mov	r0, r6
 800e30a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e30e:	f000 f8d1 	bl	800e4b4 <_isatty_r>
 800e312:	b128      	cbz	r0, 800e320 <__smakebuf_r+0x74>
 800e314:	89a3      	ldrh	r3, [r4, #12]
 800e316:	f023 0303 	bic.w	r3, r3, #3
 800e31a:	f043 0301 	orr.w	r3, r3, #1
 800e31e:	81a3      	strh	r3, [r4, #12]
 800e320:	89a0      	ldrh	r0, [r4, #12]
 800e322:	4305      	orrs	r5, r0
 800e324:	81a5      	strh	r5, [r4, #12]
 800e326:	e7cd      	b.n	800e2c4 <__smakebuf_r+0x18>
 800e328:	0800e0b9 	.word	0x0800e0b9

0800e32c <_malloc_usable_size_r>:
 800e32c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e330:	1f18      	subs	r0, r3, #4
 800e332:	2b00      	cmp	r3, #0
 800e334:	bfbc      	itt	lt
 800e336:	580b      	ldrlt	r3, [r1, r0]
 800e338:	18c0      	addlt	r0, r0, r3
 800e33a:	4770      	bx	lr

0800e33c <_raise_r>:
 800e33c:	291f      	cmp	r1, #31
 800e33e:	b538      	push	{r3, r4, r5, lr}
 800e340:	4604      	mov	r4, r0
 800e342:	460d      	mov	r5, r1
 800e344:	d904      	bls.n	800e350 <_raise_r+0x14>
 800e346:	2316      	movs	r3, #22
 800e348:	6003      	str	r3, [r0, #0]
 800e34a:	f04f 30ff 	mov.w	r0, #4294967295
 800e34e:	bd38      	pop	{r3, r4, r5, pc}
 800e350:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e352:	b112      	cbz	r2, 800e35a <_raise_r+0x1e>
 800e354:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e358:	b94b      	cbnz	r3, 800e36e <_raise_r+0x32>
 800e35a:	4620      	mov	r0, r4
 800e35c:	f000 f830 	bl	800e3c0 <_getpid_r>
 800e360:	462a      	mov	r2, r5
 800e362:	4601      	mov	r1, r0
 800e364:	4620      	mov	r0, r4
 800e366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e36a:	f000 b817 	b.w	800e39c <_kill_r>
 800e36e:	2b01      	cmp	r3, #1
 800e370:	d00a      	beq.n	800e388 <_raise_r+0x4c>
 800e372:	1c59      	adds	r1, r3, #1
 800e374:	d103      	bne.n	800e37e <_raise_r+0x42>
 800e376:	2316      	movs	r3, #22
 800e378:	6003      	str	r3, [r0, #0]
 800e37a:	2001      	movs	r0, #1
 800e37c:	e7e7      	b.n	800e34e <_raise_r+0x12>
 800e37e:	2400      	movs	r4, #0
 800e380:	4628      	mov	r0, r5
 800e382:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e386:	4798      	blx	r3
 800e388:	2000      	movs	r0, #0
 800e38a:	e7e0      	b.n	800e34e <_raise_r+0x12>

0800e38c <raise>:
 800e38c:	4b02      	ldr	r3, [pc, #8]	; (800e398 <raise+0xc>)
 800e38e:	4601      	mov	r1, r0
 800e390:	6818      	ldr	r0, [r3, #0]
 800e392:	f7ff bfd3 	b.w	800e33c <_raise_r>
 800e396:	bf00      	nop
 800e398:	2000017c 	.word	0x2000017c

0800e39c <_kill_r>:
 800e39c:	b538      	push	{r3, r4, r5, lr}
 800e39e:	2300      	movs	r3, #0
 800e3a0:	4d06      	ldr	r5, [pc, #24]	; (800e3bc <_kill_r+0x20>)
 800e3a2:	4604      	mov	r4, r0
 800e3a4:	4608      	mov	r0, r1
 800e3a6:	4611      	mov	r1, r2
 800e3a8:	602b      	str	r3, [r5, #0]
 800e3aa:	f7f3 fa38 	bl	800181e <_kill>
 800e3ae:	1c43      	adds	r3, r0, #1
 800e3b0:	d102      	bne.n	800e3b8 <_kill_r+0x1c>
 800e3b2:	682b      	ldr	r3, [r5, #0]
 800e3b4:	b103      	cbz	r3, 800e3b8 <_kill_r+0x1c>
 800e3b6:	6023      	str	r3, [r4, #0]
 800e3b8:	bd38      	pop	{r3, r4, r5, pc}
 800e3ba:	bf00      	nop
 800e3bc:	200019a8 	.word	0x200019a8

0800e3c0 <_getpid_r>:
 800e3c0:	f7f3 ba26 	b.w	8001810 <_getpid>

0800e3c4 <__sread>:
 800e3c4:	b510      	push	{r4, lr}
 800e3c6:	460c      	mov	r4, r1
 800e3c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3cc:	f000 f894 	bl	800e4f8 <_read_r>
 800e3d0:	2800      	cmp	r0, #0
 800e3d2:	bfab      	itete	ge
 800e3d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e3d6:	89a3      	ldrhlt	r3, [r4, #12]
 800e3d8:	181b      	addge	r3, r3, r0
 800e3da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e3de:	bfac      	ite	ge
 800e3e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800e3e2:	81a3      	strhlt	r3, [r4, #12]
 800e3e4:	bd10      	pop	{r4, pc}

0800e3e6 <__swrite>:
 800e3e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3ea:	461f      	mov	r7, r3
 800e3ec:	898b      	ldrh	r3, [r1, #12]
 800e3ee:	4605      	mov	r5, r0
 800e3f0:	05db      	lsls	r3, r3, #23
 800e3f2:	460c      	mov	r4, r1
 800e3f4:	4616      	mov	r6, r2
 800e3f6:	d505      	bpl.n	800e404 <__swrite+0x1e>
 800e3f8:	2302      	movs	r3, #2
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e400:	f000 f868 	bl	800e4d4 <_lseek_r>
 800e404:	89a3      	ldrh	r3, [r4, #12]
 800e406:	4632      	mov	r2, r6
 800e408:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e40c:	81a3      	strh	r3, [r4, #12]
 800e40e:	4628      	mov	r0, r5
 800e410:	463b      	mov	r3, r7
 800e412:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e41a:	f000 b817 	b.w	800e44c <_write_r>

0800e41e <__sseek>:
 800e41e:	b510      	push	{r4, lr}
 800e420:	460c      	mov	r4, r1
 800e422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e426:	f000 f855 	bl	800e4d4 <_lseek_r>
 800e42a:	1c43      	adds	r3, r0, #1
 800e42c:	89a3      	ldrh	r3, [r4, #12]
 800e42e:	bf15      	itete	ne
 800e430:	6560      	strne	r0, [r4, #84]	; 0x54
 800e432:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e436:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e43a:	81a3      	strheq	r3, [r4, #12]
 800e43c:	bf18      	it	ne
 800e43e:	81a3      	strhne	r3, [r4, #12]
 800e440:	bd10      	pop	{r4, pc}

0800e442 <__sclose>:
 800e442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e446:	f000 b813 	b.w	800e470 <_close_r>
	...

0800e44c <_write_r>:
 800e44c:	b538      	push	{r3, r4, r5, lr}
 800e44e:	4604      	mov	r4, r0
 800e450:	4608      	mov	r0, r1
 800e452:	4611      	mov	r1, r2
 800e454:	2200      	movs	r2, #0
 800e456:	4d05      	ldr	r5, [pc, #20]	; (800e46c <_write_r+0x20>)
 800e458:	602a      	str	r2, [r5, #0]
 800e45a:	461a      	mov	r2, r3
 800e45c:	f7f3 fa16 	bl	800188c <_write>
 800e460:	1c43      	adds	r3, r0, #1
 800e462:	d102      	bne.n	800e46a <_write_r+0x1e>
 800e464:	682b      	ldr	r3, [r5, #0]
 800e466:	b103      	cbz	r3, 800e46a <_write_r+0x1e>
 800e468:	6023      	str	r3, [r4, #0]
 800e46a:	bd38      	pop	{r3, r4, r5, pc}
 800e46c:	200019a8 	.word	0x200019a8

0800e470 <_close_r>:
 800e470:	b538      	push	{r3, r4, r5, lr}
 800e472:	2300      	movs	r3, #0
 800e474:	4d05      	ldr	r5, [pc, #20]	; (800e48c <_close_r+0x1c>)
 800e476:	4604      	mov	r4, r0
 800e478:	4608      	mov	r0, r1
 800e47a:	602b      	str	r3, [r5, #0]
 800e47c:	f7f3 fa22 	bl	80018c4 <_close>
 800e480:	1c43      	adds	r3, r0, #1
 800e482:	d102      	bne.n	800e48a <_close_r+0x1a>
 800e484:	682b      	ldr	r3, [r5, #0]
 800e486:	b103      	cbz	r3, 800e48a <_close_r+0x1a>
 800e488:	6023      	str	r3, [r4, #0]
 800e48a:	bd38      	pop	{r3, r4, r5, pc}
 800e48c:	200019a8 	.word	0x200019a8

0800e490 <_fstat_r>:
 800e490:	b538      	push	{r3, r4, r5, lr}
 800e492:	2300      	movs	r3, #0
 800e494:	4d06      	ldr	r5, [pc, #24]	; (800e4b0 <_fstat_r+0x20>)
 800e496:	4604      	mov	r4, r0
 800e498:	4608      	mov	r0, r1
 800e49a:	4611      	mov	r1, r2
 800e49c:	602b      	str	r3, [r5, #0]
 800e49e:	f7f3 fa1c 	bl	80018da <_fstat>
 800e4a2:	1c43      	adds	r3, r0, #1
 800e4a4:	d102      	bne.n	800e4ac <_fstat_r+0x1c>
 800e4a6:	682b      	ldr	r3, [r5, #0]
 800e4a8:	b103      	cbz	r3, 800e4ac <_fstat_r+0x1c>
 800e4aa:	6023      	str	r3, [r4, #0]
 800e4ac:	bd38      	pop	{r3, r4, r5, pc}
 800e4ae:	bf00      	nop
 800e4b0:	200019a8 	.word	0x200019a8

0800e4b4 <_isatty_r>:
 800e4b4:	b538      	push	{r3, r4, r5, lr}
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	4d05      	ldr	r5, [pc, #20]	; (800e4d0 <_isatty_r+0x1c>)
 800e4ba:	4604      	mov	r4, r0
 800e4bc:	4608      	mov	r0, r1
 800e4be:	602b      	str	r3, [r5, #0]
 800e4c0:	f7f3 fa1a 	bl	80018f8 <_isatty>
 800e4c4:	1c43      	adds	r3, r0, #1
 800e4c6:	d102      	bne.n	800e4ce <_isatty_r+0x1a>
 800e4c8:	682b      	ldr	r3, [r5, #0]
 800e4ca:	b103      	cbz	r3, 800e4ce <_isatty_r+0x1a>
 800e4cc:	6023      	str	r3, [r4, #0]
 800e4ce:	bd38      	pop	{r3, r4, r5, pc}
 800e4d0:	200019a8 	.word	0x200019a8

0800e4d4 <_lseek_r>:
 800e4d4:	b538      	push	{r3, r4, r5, lr}
 800e4d6:	4604      	mov	r4, r0
 800e4d8:	4608      	mov	r0, r1
 800e4da:	4611      	mov	r1, r2
 800e4dc:	2200      	movs	r2, #0
 800e4de:	4d05      	ldr	r5, [pc, #20]	; (800e4f4 <_lseek_r+0x20>)
 800e4e0:	602a      	str	r2, [r5, #0]
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	f7f3 fa12 	bl	800190c <_lseek>
 800e4e8:	1c43      	adds	r3, r0, #1
 800e4ea:	d102      	bne.n	800e4f2 <_lseek_r+0x1e>
 800e4ec:	682b      	ldr	r3, [r5, #0]
 800e4ee:	b103      	cbz	r3, 800e4f2 <_lseek_r+0x1e>
 800e4f0:	6023      	str	r3, [r4, #0]
 800e4f2:	bd38      	pop	{r3, r4, r5, pc}
 800e4f4:	200019a8 	.word	0x200019a8

0800e4f8 <_read_r>:
 800e4f8:	b538      	push	{r3, r4, r5, lr}
 800e4fa:	4604      	mov	r4, r0
 800e4fc:	4608      	mov	r0, r1
 800e4fe:	4611      	mov	r1, r2
 800e500:	2200      	movs	r2, #0
 800e502:	4d05      	ldr	r5, [pc, #20]	; (800e518 <_read_r+0x20>)
 800e504:	602a      	str	r2, [r5, #0]
 800e506:	461a      	mov	r2, r3
 800e508:	f7f3 f9a3 	bl	8001852 <_read>
 800e50c:	1c43      	adds	r3, r0, #1
 800e50e:	d102      	bne.n	800e516 <_read_r+0x1e>
 800e510:	682b      	ldr	r3, [r5, #0]
 800e512:	b103      	cbz	r3, 800e516 <_read_r+0x1e>
 800e514:	6023      	str	r3, [r4, #0]
 800e516:	bd38      	pop	{r3, r4, r5, pc}
 800e518:	200019a8 	.word	0x200019a8

0800e51c <_init>:
 800e51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e51e:	bf00      	nop
 800e520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e522:	bc08      	pop	{r3}
 800e524:	469e      	mov	lr, r3
 800e526:	4770      	bx	lr

0800e528 <_fini>:
 800e528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e52a:	bf00      	nop
 800e52c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e52e:	bc08      	pop	{r3}
 800e530:	469e      	mov	lr, r3
 800e532:	4770      	bx	lr
