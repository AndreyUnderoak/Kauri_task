
Kauri.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e53c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  0800e650  0800e650  0001e650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb8c  0800eb8c  00020350  2**0
                  CONTENTS
  4 .ARM          00000000  0800eb8c  0800eb8c  00020350  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800eb8c  0800eb8c  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb8c  0800eb8c  0001eb8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eb90  0800eb90  0001eb90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800eb94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012cc  20000350  0800eee4  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000161c  0800eee4  0002161c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001709f  00000000  00000000  00020379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d83  00000000  00000000  00037418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  0003b1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001248  00000000  00000000  0003c5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c24a  00000000  00000000  0003d810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001887c  00000000  00000000  00059a5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d20d  00000000  00000000  000722d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ff4e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066f8  00000000  00000000  000ff534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000350 	.word	0x20000350
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e634 	.word	0x0800e634

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000354 	.word	0x20000354
 800014c:	0800e634 	.word	0x0800e634

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	4605      	mov	r5, r0
 8001028:	460c      	mov	r4, r1
 800102a:	2200      	movs	r2, #0
 800102c:	2300      	movs	r3, #0
 800102e:	4628      	mov	r0, r5
 8001030:	4621      	mov	r1, r4
 8001032:	f7ff fcc3 	bl	80009bc <__aeabi_dcmplt>
 8001036:	b928      	cbnz	r0, 8001044 <__aeabi_d2lz+0x20>
 8001038:	4628      	mov	r0, r5
 800103a:	4621      	mov	r1, r4
 800103c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001040:	f000 b80a 	b.w	8001058 <__aeabi_d2ulz>
 8001044:	4628      	mov	r0, r5
 8001046:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800104a:	f000 f805 	bl	8001058 <__aeabi_d2ulz>
 800104e:	4240      	negs	r0, r0
 8001050:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001054:	bd38      	pop	{r3, r4, r5, pc}
 8001056:	bf00      	nop

08001058 <__aeabi_d2ulz>:
 8001058:	b5d0      	push	{r4, r6, r7, lr}
 800105a:	2200      	movs	r2, #0
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <__aeabi_d2ulz+0x34>)
 800105e:	4606      	mov	r6, r0
 8001060:	460f      	mov	r7, r1
 8001062:	f7ff fa39 	bl	80004d8 <__aeabi_dmul>
 8001066:	f7ff fd0f 	bl	8000a88 <__aeabi_d2uiz>
 800106a:	4604      	mov	r4, r0
 800106c:	f7ff f9ba 	bl	80003e4 <__aeabi_ui2d>
 8001070:	2200      	movs	r2, #0
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <__aeabi_d2ulz+0x38>)
 8001074:	f7ff fa30 	bl	80004d8 <__aeabi_dmul>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4630      	mov	r0, r6
 800107e:	4639      	mov	r1, r7
 8001080:	f7ff f872 	bl	8000168 <__aeabi_dsub>
 8001084:	f7ff fd00 	bl	8000a88 <__aeabi_d2uiz>
 8001088:	4621      	mov	r1, r4
 800108a:	bdd0      	pop	{r4, r6, r7, pc}
 800108c:	3df00000 	.word	0x3df00000
 8001090:	41f00000 	.word	0x41f00000

08001094 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Intialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 800109a:	2300      	movs	r3, #0
 800109c:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 800109e:	2300      	movs	r3, #0
 80010a0:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 80010a2:	2300      	movs	r3, #0
 80010a4:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 80010a6:	2300      	movs	r3, #0
 80010a8:	71fb      	strb	r3, [r7, #7]
  
  RXM1reg.RXM1SIDH = 0x00;
 80010aa:	2300      	movs	r3, #0
 80010ac:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 80010ae:	2300      	movs	r3, #0
 80010b0:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 80010b2:	2300      	movs	r3, #0
 80010b4:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 80010b6:	2300      	movs	r3, #0
 80010b8:	70fb      	strb	r3, [r7, #3]
  
  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;      
 80010ba:	2300      	movs	r3, #0
 80010bc:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 80010be:	2300      	movs	r3, #0
 80010c0:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 80010c2:	2300      	movs	r3, #0
 80010c4:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 80010c6:	2300      	movs	r3, #0
 80010c8:	77fb      	strb	r3, [r7, #31]
  
  RXF1reg.RXF1SIDH = 0x00;
 80010ca:	2300      	movs	r3, #0
 80010cc:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 80010ce:	2308      	movs	r3, #8
 80010d0:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 80010d2:	2300      	movs	r3, #0
 80010d4:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 80010d6:	2300      	movs	r3, #0
 80010d8:	76fb      	strb	r3, [r7, #27]
  
  RXF2reg.RXF2SIDH = 0x00;
 80010da:	2300      	movs	r3, #0
 80010dc:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 80010de:	2300      	movs	r3, #0
 80010e0:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 80010e2:	2300      	movs	r3, #0
 80010e4:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 80010e6:	2300      	movs	r3, #0
 80010e8:	75fb      	strb	r3, [r7, #23]
  
  RXF3reg.RXF3SIDH = 0x00;
 80010ea:	2300      	movs	r3, #0
 80010ec:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 80010ee:	2300      	movs	r3, #0
 80010f0:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 80010f2:	2300      	movs	r3, #0
 80010f4:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 80010f6:	2300      	movs	r3, #0
 80010f8:	74fb      	strb	r3, [r7, #19]
  
  RXF4reg.RXF4SIDH = 0x00;
 80010fa:	2300      	movs	r3, #0
 80010fc:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 80010fe:	2300      	movs	r3, #0
 8001100:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8001102:	2300      	movs	r3, #0
 8001104:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 8001106:	2300      	movs	r3, #0
 8001108:	73fb      	strb	r3, [r7, #15]
  
  RXF5reg.RXF5SIDH = 0x00;
 800110a:	2300      	movs	r3, #0
 800110c:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 800110e:	2308      	movs	r3, #8
 8001110:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8001112:	2300      	movs	r3, #0
 8001114:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 8001116:	2300      	movs	r3, #0
 8001118:	72fb      	strb	r3, [r7, #11]
  
  /* Intialize MCP2515, check SPI */
  if(!MCP2515_Initialize())
 800111a:	f000 f941 	bl	80013a0 <MCP2515_Initialize>
 800111e:	4603      	mov	r3, r0
 8001120:	f083 0301 	eor.w	r3, r3, #1
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <CANSPI_Initialize+0x9a>
  {
    return false;
 800112a:	2300      	movs	r3, #0
 800112c:	e05e      	b.n	80011ec <CANSPI_Initialize+0x158>
  }
    
  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
 800112e:	f000 f959 	bl	80013e4 <MCP2515_SetConfigMode>
 8001132:	4603      	mov	r3, r0
 8001134:	f083 0301 	eor.w	r3, r3, #1
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <CANSPI_Initialize+0xae>
  {
    return false;
 800113e:	2300      	movs	r3, #0
 8001140:	e054      	b.n	80011ec <CANSPI_Initialize+0x158>
  }
  
  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	461a      	mov	r2, r3
 8001146:	2123      	movs	r1, #35	; 0x23
 8001148:	2020      	movs	r0, #32
 800114a:	f000 f9ef 	bl	800152c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 800114e:	463b      	mov	r3, r7
 8001150:	461a      	mov	r2, r3
 8001152:	2127      	movs	r1, #39	; 0x27
 8001154:	2024      	movs	r0, #36	; 0x24
 8001156:	f000 f9e9 	bl	800152c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	461a      	mov	r2, r3
 8001160:	2103      	movs	r1, #3
 8001162:	2000      	movs	r0, #0
 8001164:	f000 f9e2 	bl	800152c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8001168:	f107 0318 	add.w	r3, r7, #24
 800116c:	461a      	mov	r2, r3
 800116e:	2107      	movs	r1, #7
 8001170:	2004      	movs	r0, #4
 8001172:	f000 f9db 	bl	800152c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	461a      	mov	r2, r3
 800117c:	210b      	movs	r1, #11
 800117e:	2008      	movs	r0, #8
 8001180:	f000 f9d4 	bl	800152c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	461a      	mov	r2, r3
 800118a:	2113      	movs	r1, #19
 800118c:	2010      	movs	r0, #16
 800118e:	f000 f9cd 	bl	800152c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8001192:	f107 030c 	add.w	r3, r7, #12
 8001196:	461a      	mov	r2, r3
 8001198:	2117      	movs	r1, #23
 800119a:	2014      	movs	r0, #20
 800119c:	f000 f9c6 	bl	800152c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 80011a0:	f107 0308 	add.w	r3, r7, #8
 80011a4:	461a      	mov	r2, r3
 80011a6:	211b      	movs	r1, #27
 80011a8:	2018      	movs	r0, #24
 80011aa:	f000 f9bf 	bl	800152c <MCP2515_WriteByteSequence>
  
  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 80011ae:	2104      	movs	r1, #4
 80011b0:	2060      	movs	r0, #96	; 0x60
 80011b2:	f000 f997 	bl	80014e4 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 80011b6:	2101      	movs	r1, #1
 80011b8:	2070      	movs	r0, #112	; 0x70
 80011ba:	f000 f993 	bl	80014e4 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 80011be:	2100      	movs	r1, #0
 80011c0:	202a      	movs	r0, #42	; 0x2a
 80011c2:	f000 f98f 	bl	80014e4 <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */  
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 80011c6:	21e5      	movs	r1, #229	; 0xe5
 80011c8:	2029      	movs	r0, #41	; 0x29
 80011ca:	f000 f98b 	bl	80014e4 <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 80011ce:	2183      	movs	r1, #131	; 0x83
 80011d0:	2028      	movs	r0, #40	; 0x28
 80011d2:	f000 f987 	bl	80014e4 <MCP2515_WriteByte>
  
  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 80011d6:	f000 f923 	bl	8001420 <MCP2515_SetNormalMode>
 80011da:	4603      	mov	r3, r0
 80011dc:	f083 0301 	eor.w	r3, r3, #1
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <CANSPI_Initialize+0x156>
    return false;
 80011e6:	2300      	movs	r3, #0
 80011e8:	e000      	b.n	80011ec <CANSPI_Initialize+0x158>
  
  return true;
 80011ea:	2301      	movs	r3, #1
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3720      	adds	r7, #32
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <CANSPI_Receive>:
  return (returnValue);
}

/* Receive CAN message */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg) 
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 8001200:	f000 f9be 	bl	8001580 <MCP2515_GetRxStatus>
 8001204:	4603      	mov	r3, r0
 8001206:	733b      	strb	r3, [r7, #12]
  
  /* Check receive buffer */
  if (rxStatus.rxBuffer != 0)
 8001208:	7b3b      	ldrb	r3, [r7, #12]
 800120a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	d066      	beq.n	80012e2 <CANSPI_Receive+0xee>
  {
    /* finding buffer which has a message */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8001214:	7b3b      	ldrb	r3, [r7, #12]
 8001216:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b40      	cmp	r3, #64	; 0x40
 800121e:	bf0c      	ite	eq
 8001220:	2301      	moveq	r3, #1
 8001222:	2300      	movne	r3, #0
 8001224:	b2da      	uxtb	r2, r3
 8001226:	7b3b      	ldrb	r3, [r7, #12]
 8001228:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2bc0      	cmp	r3, #192	; 0xc0
 8001230:	bf0c      	ite	eq
 8001232:	2301      	moveq	r3, #1
 8001234:	2300      	movne	r3, #0
 8001236:	b2db      	uxtb	r3, r3
 8001238:	4313      	orrs	r3, r2
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	d007      	beq.n	8001250 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	220d      	movs	r2, #13
 8001246:	4619      	mov	r1, r3
 8001248:	2090      	movs	r0, #144	; 0x90
 800124a:	f000 f929 	bl	80014a0 <MCP2515_ReadRxSequence>
 800124e:	e00c      	b.n	800126a <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8001250:	7b3b      	ldrb	r3, [r7, #12]
 8001252:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2b80      	cmp	r3, #128	; 0x80
 800125a:	d106      	bne.n	800126a <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	220d      	movs	r2, #13
 8001262:	4619      	mov	r1, r3
 8001264:	2094      	movs	r0, #148	; 0x94
 8001266:	f000 f91b 	bl	80014a0 <MCP2515_ReadRxSequence>
    }
    
    /* if the message is extended CAN type */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 800126a:	7b3b      	ldrb	r3, [r7, #12]
 800126c:	f003 0318 	and.w	r3, r3, #24
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b10      	cmp	r3, #16
 8001274:	d10c      	bne.n	8001290 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2202      	movs	r2, #2
 800127a:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 800127c:	7cb8      	ldrb	r0, [r7, #18]
 800127e:	7cf9      	ldrb	r1, [r7, #19]
 8001280:	7c3a      	ldrb	r2, [r7, #16]
 8001282:	7c7b      	ldrb	r3, [r7, #17]
 8001284:	f000 f832 	bl	80012ec <convertReg2ExtendedCANid>
 8001288:	4602      	mov	r2, r0
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	e00b      	b.n	80012a8 <CANSPI_Receive+0xb4>
    } 
    else 
    {
      /* Standard type */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8001296:	7c3b      	ldrb	r3, [r7, #16]
 8001298:	7c7a      	ldrb	r2, [r7, #17]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f000 f863 	bl	8001368 <convertReg2StandardCANid>
 80012a2:	4602      	mov	r2, r0
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	605a      	str	r2, [r3, #4]
    }
    
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 80012a8:	7d3a      	ldrb	r2, [r7, #20]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 80012ae:	7d7a      	ldrb	r2, [r7, #21]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 80012b4:	7dba      	ldrb	r2, [r7, #22]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 80012ba:	7dfa      	ldrb	r2, [r7, #23]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 80012c0:	7e3a      	ldrb	r2, [r7, #24]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 80012c6:	7e7a      	ldrb	r2, [r7, #25]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 80012cc:	7eba      	ldrb	r2, [r7, #26]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 80012d2:	7efa      	ldrb	r2, [r7, #27]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 80012d8:	7f3a      	ldrb	r2, [r7, #28]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	741a      	strb	r2, [r3, #16]
    
    returnValue = 1;
 80012de:	2301      	movs	r3, #1
 80012e0:	77fb      	strb	r3, [r7, #31]
  }
  
  return (returnValue);
 80012e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3720      	adds	r7, #32
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* convert register value to extended CAN ID */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 80012ec:	b490      	push	{r4, r7}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4604      	mov	r4, r0
 80012f4:	4608      	mov	r0, r1
 80012f6:	4611      	mov	r1, r2
 80012f8:	461a      	mov	r2, r3
 80012fa:	4623      	mov	r3, r4
 80012fc:	71fb      	strb	r3, [r7, #7]
 80012fe:	4603      	mov	r3, r0
 8001300:	71bb      	strb	r3, [r7, #6]
 8001302:	460b      	mov	r3, r1
 8001304:	717b      	strb	r3, [r7, #5]
 8001306:	4613      	mov	r3, r2
 8001308:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;
  
  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 8001312:	793b      	ldrb	r3, [r7, #4]
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 800131a:	793b      	ldrb	r3, [r7, #4]
 800131c:	095b      	lsrs	r3, r3, #5
 800131e:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 8001320:	797b      	ldrb	r3, [r7, #5]
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 8001326:	7bbb      	ldrb	r3, [r7, #14]
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4413      	add	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4413      	add	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	021b      	lsls	r3, r3, #8
 8001340:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4413      	add	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8001350:	79bb      	ldrb	r3, [r7, #6]
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4413      	add	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;    
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	617b      	str	r3, [r7, #20]
  return (returnValue);
 800135c:	697b      	ldr	r3, [r7, #20]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bc90      	pop	{r4, r7}
 8001366:	4770      	bx	lr

08001368 <convertReg2StandardCANid>:

/* convert register value to standard CAN ID */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	460a      	mov	r2, r1
 8001372:	71fb      	strb	r3, [r7, #7]
 8001374:	4613      	mov	r3, r2
 8001376:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;
  
  ConvertedID = (tempRXBn_SIDH << 3);
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8001382:	79bb      	ldrb	r3, [r7, #6]
 8001384:	095b      	lsrs	r3, r3, #5
 8001386:	b2db      	uxtb	r3, r3
 8001388:	461a      	mov	r2, r3
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	4413      	add	r3, r2
 800138e:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	60fb      	str	r3, [r7, #12]
  
  return (returnValue);
 8001394:	68fb      	ldr	r3, [r7, #12]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();    
 80013a6:	2201      	movs	r2, #1
 80013a8:	2101      	movs	r1, #1
 80013aa:	480c      	ldr	r0, [pc, #48]	; (80013dc <MCP2515_Initialize+0x3c>)
 80013ac:	f001 f822 	bl	80023f4 <HAL_GPIO_WritePin>
  
  uint8_t loop = 10;
 80013b0:	230a      	movs	r3, #10
 80013b2:	71fb      	strb	r3, [r7, #7]
  
  do {
    /* check SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 80013b4:	480a      	ldr	r0, [pc, #40]	; (80013e0 <MCP2515_Initialize+0x40>)
 80013b6:	f004 f828 	bl	800540a <HAL_SPI_GetState>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d101      	bne.n	80013c4 <MCP2515_Initialize+0x24>
      return true;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e006      	b.n	80013d2 <MCP2515_Initialize+0x32>
    
    loop--;
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1f1      	bne.n	80013b4 <MCP2515_Initialize+0x14>
      
  return false;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40010c00 	.word	0x40010c00
 80013e0:	200003d4 	.word	0x200003d4

080013e4 <MCP2515_SetConfigMode>:

/* change mode as configuration mode */
bool MCP2515_SetConfigMode(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 80013ea:	2180      	movs	r1, #128	; 0x80
 80013ec:	200f      	movs	r0, #15
 80013ee:	f000 f879 	bl	80014e4 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 80013f2:	230a      	movs	r3, #10
 80013f4:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 80013f6:	200e      	movs	r0, #14
 80013f8:	f000 f830 	bl	800145c <MCP2515_ReadByte>
 80013fc:	4603      	mov	r3, r0
 80013fe:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8001402:	2b80      	cmp	r3, #128	; 0x80
 8001404:	d101      	bne.n	800140a <MCP2515_SetConfigMode+0x26>
      return true;
 8001406:	2301      	movs	r3, #1
 8001408:	e006      	b.n	8001418 <MCP2515_SetConfigMode+0x34>
    
    loop--;
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	3b01      	subs	r3, #1
 800140e:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1ef      	bne.n	80013f6 <MCP2515_SetConfigMode+0x12>
  
  return false;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <MCP2515_SetNormalMode>:

/* change mode as normal mode */
bool MCP2515_SetNormalMode(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8001426:	2100      	movs	r1, #0
 8001428:	200f      	movs	r0, #15
 800142a:	f000 f85b 	bl	80014e4 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 800142e:	230a      	movs	r3, #10
 8001430:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8001432:	200e      	movs	r0, #14
 8001434:	f000 f812 	bl	800145c <MCP2515_ReadByte>
 8001438:	4603      	mov	r3, r0
 800143a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <MCP2515_SetNormalMode+0x26>
      return true;
 8001442:	2301      	movs	r3, #1
 8001444:	e006      	b.n	8001454 <MCP2515_SetNormalMode+0x34>
    
    loop--;
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	3b01      	subs	r3, #1
 800144a:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1ef      	bne.n	8001432 <MCP2515_SetNormalMode+0x12>
  
  return false;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 8001466:	2200      	movs	r2, #0
 8001468:	2101      	movs	r1, #1
 800146a:	480c      	ldr	r0, [pc, #48]	; (800149c <MCP2515_ReadByte+0x40>)
 800146c:	f000 ffc2 	bl	80023f4 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_READ);
 8001470:	2003      	movs	r0, #3
 8001472:	f000 f8a1 	bl	80015b8 <SPI_Tx>
  SPI_Tx(address);
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	4618      	mov	r0, r3
 800147a:	f000 f89d 	bl	80015b8 <SPI_Tx>
  retVal = SPI_Rx();
 800147e:	f000 f8c1 	bl	8001604 <SPI_Rx>
 8001482:	4603      	mov	r3, r0
 8001484:	73fb      	strb	r3, [r7, #15]
      
  MCP2515_CS_HIGH();
 8001486:	2201      	movs	r2, #1
 8001488:	2101      	movs	r1, #1
 800148a:	4804      	ldr	r0, [pc, #16]	; (800149c <MCP2515_ReadByte+0x40>)
 800148c:	f000 ffb2 	bl	80023f4 <HAL_GPIO_WritePin>
  
  return retVal;
 8001490:	7bfb      	ldrb	r3, [r7, #15]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40010c00 	.word	0x40010c00

080014a0 <MCP2515_ReadRxSequence>:

/* read buffer */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	6039      	str	r1, [r7, #0]
 80014aa:	71fb      	strb	r3, [r7, #7]
 80014ac:	4613      	mov	r3, r2
 80014ae:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80014b0:	2200      	movs	r2, #0
 80014b2:	2101      	movs	r1, #1
 80014b4:	480a      	ldr	r0, [pc, #40]	; (80014e0 <MCP2515_ReadRxSequence+0x40>)
 80014b6:	f000 ff9d 	bl	80023f4 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);        
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 f87b 	bl	80015b8 <SPI_Tx>
  SPI_RxBuffer(data, length);
 80014c2:	79bb      	ldrb	r3, [r7, #6]
 80014c4:	4619      	mov	r1, r3
 80014c6:	6838      	ldr	r0, [r7, #0]
 80014c8:	f000 f8ac 	bl	8001624 <SPI_RxBuffer>
    
  MCP2515_CS_HIGH();
 80014cc:	2201      	movs	r2, #1
 80014ce:	2101      	movs	r1, #1
 80014d0:	4803      	ldr	r0, [pc, #12]	; (80014e0 <MCP2515_ReadRxSequence+0x40>)
 80014d2:	f000 ff8f 	bl	80023f4 <HAL_GPIO_WritePin>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40010c00 	.word	0x40010c00

080014e4 <MCP2515_WriteByte>:

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{    
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	460a      	mov	r2, r1
 80014ee:	71fb      	strb	r3, [r7, #7]
 80014f0:	4613      	mov	r3, r2
 80014f2:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();  
 80014f4:	2200      	movs	r2, #0
 80014f6:	2101      	movs	r1, #1
 80014f8:	480b      	ldr	r0, [pc, #44]	; (8001528 <MCP2515_WriteByte+0x44>)
 80014fa:	f000 ff7b 	bl	80023f4 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 80014fe:	2002      	movs	r0, #2
 8001500:	f000 f85a 	bl	80015b8 <SPI_Tx>
  SPI_Tx(address);
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	4618      	mov	r0, r3
 8001508:	f000 f856 	bl	80015b8 <SPI_Tx>
  SPI_Tx(data);  
 800150c:	79bb      	ldrb	r3, [r7, #6]
 800150e:	4618      	mov	r0, r3
 8001510:	f000 f852 	bl	80015b8 <SPI_Tx>
    
  MCP2515_CS_HIGH();
 8001514:	2201      	movs	r2, #1
 8001516:	2101      	movs	r1, #1
 8001518:	4803      	ldr	r0, [pc, #12]	; (8001528 <MCP2515_WriteByte+0x44>)
 800151a:	f000 ff6b 	bl	80023f4 <HAL_GPIO_WritePin>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40010c00 	.word	0x40010c00

0800152c <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{    
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	603a      	str	r2, [r7, #0]
 8001536:	71fb      	strb	r3, [r7, #7]
 8001538:	460b      	mov	r3, r1
 800153a:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 800153c:	2200      	movs	r2, #0
 800153e:	2101      	movs	r1, #1
 8001540:	480e      	ldr	r0, [pc, #56]	; (800157c <MCP2515_WriteByteSequence+0x50>)
 8001542:	f000 ff57 	bl	80023f4 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 8001546:	2002      	movs	r0, #2
 8001548:	f000 f836 	bl	80015b8 <SPI_Tx>
  SPI_Tx(startAddress);
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	4618      	mov	r0, r3
 8001550:	f000 f832 	bl	80015b8 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8001554:	79ba      	ldrb	r2, [r7, #6]
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	3301      	adds	r3, #1
 800155e:	b2db      	uxtb	r3, r3
 8001560:	4619      	mov	r1, r3
 8001562:	6838      	ldr	r0, [r7, #0]
 8001564:	f000 f83a 	bl	80015dc <SPI_TxBuffer>
  
  MCP2515_CS_HIGH();
 8001568:	2201      	movs	r2, #1
 800156a:	2101      	movs	r1, #1
 800156c:	4803      	ldr	r0, [pc, #12]	; (800157c <MCP2515_WriteByteSequence+0x50>)
 800156e:	f000 ff41 	bl	80023f4 <HAL_GPIO_WritePin>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40010c00 	.word	0x40010c00

08001580 <MCP2515_GetRxStatus>:
  return retVal;
}

/* read RX STATUS register */
uint8_t MCP2515_GetRxStatus(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 8001586:	2200      	movs	r2, #0
 8001588:	2101      	movs	r1, #1
 800158a:	480a      	ldr	r0, [pc, #40]	; (80015b4 <MCP2515_GetRxStatus+0x34>)
 800158c:	f000 ff32 	bl	80023f4 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_RX_STATUS);
 8001590:	20b0      	movs	r0, #176	; 0xb0
 8001592:	f000 f811 	bl	80015b8 <SPI_Tx>
  retVal = SPI_Rx();
 8001596:	f000 f835 	bl	8001604 <SPI_Rx>
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 800159e:	2201      	movs	r2, #1
 80015a0:	2101      	movs	r1, #1
 80015a2:	4804      	ldr	r0, [pc, #16]	; (80015b4 <MCP2515_GetRxStatus+0x34>)
 80015a4:	f000 ff26 	bl	80023f4 <HAL_GPIO_WritePin>
  
  return retVal;
 80015a8:	79fb      	ldrb	r3, [r7, #7]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40010c00 	.word	0x40010c00

080015b8 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 80015c2:	1df9      	adds	r1, r7, #7
 80015c4:	230a      	movs	r3, #10
 80015c6:	2201      	movs	r2, #1
 80015c8:	4803      	ldr	r0, [pc, #12]	; (80015d8 <SPI_Tx+0x20>)
 80015ca:	f003 fb13 	bl	8004bf4 <HAL_SPI_Transmit>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200003d4 	.word	0x200003d4

080015dc <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 80015e8:	78fb      	ldrb	r3, [r7, #3]
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	230a      	movs	r3, #10
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	4803      	ldr	r0, [pc, #12]	; (8001600 <SPI_TxBuffer+0x24>)
 80015f2:	f003 faff 	bl	8004bf4 <HAL_SPI_Transmit>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200003d4 	.word	0x200003d4

08001604 <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 800160a:	1df9      	adds	r1, r7, #7
 800160c:	230a      	movs	r3, #10
 800160e:	2201      	movs	r2, #1
 8001610:	4803      	ldr	r0, [pc, #12]	; (8001620 <SPI_Rx+0x1c>)
 8001612:	f003 fc32 	bl	8004e7a <HAL_SPI_Receive>
  return retVal;
 8001616:	79fb      	ldrb	r3, [r7, #7]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	200003d4 	.word	0x200003d4

08001624 <SPI_RxBuffer>:

/* SPI Rx wrapper function */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8001630:	78fb      	ldrb	r3, [r7, #3]
 8001632:	b29a      	uxth	r2, r3
 8001634:	230a      	movs	r3, #10
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	4803      	ldr	r0, [pc, #12]	; (8001648 <SPI_RxBuffer+0x24>)
 800163a:	f003 fc1e 	bl	8004e7a <HAL_SPI_Receive>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200003d4 	.word	0x200003d4

0800164c <accel_bytes2float>:
  for(size_t i = 0; i < 3; i++)
	  data[i] = acceleration_mg[i];
  return 0;
}

int accel_bytes2float(uint8_t * data, float * out){
 800164c:	b590      	push	{r4, r7, lr}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
	out[0] = lis331dlh_from_fs2_to_mg((uint16_t)((data[1] * 256) + data[0]));
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	3301      	adds	r3, #1
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	b29b      	uxth	r3, r3
 800165e:	021b      	lsls	r3, r3, #8
 8001660:	b29a      	uxth	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	b29b      	uxth	r3, r3
 8001668:	4413      	add	r3, r2
 800166a:	b29b      	uxth	r3, r3
 800166c:	b21b      	sxth	r3, r3
 800166e:	4618      	mov	r0, r3
 8001670:	f000 f8e8 	bl	8001844 <lis331dlh_from_fs2_to_mg>
 8001674:	4602      	mov	r2, r0
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	601a      	str	r2, [r3, #0]
	out[1] = lis331dlh_from_fs2_to_mg((uint16_t)((data[3] * 256) + data[2]));
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3303      	adds	r3, #3
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	b29b      	uxth	r3, r3
 8001682:	021b      	lsls	r3, r3, #8
 8001684:	b29a      	uxth	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3302      	adds	r3, #2
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	b29b      	uxth	r3, r3
 800168e:	4413      	add	r3, r2
 8001690:	b29b      	uxth	r3, r3
 8001692:	b21a      	sxth	r2, r3
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	1d1c      	adds	r4, r3, #4
 8001698:	4610      	mov	r0, r2
 800169a:	f000 f8d3 	bl	8001844 <lis331dlh_from_fs2_to_mg>
 800169e:	4603      	mov	r3, r0
 80016a0:	6023      	str	r3, [r4, #0]
	out[2] = lis331dlh_from_fs2_to_mg((uint16_t)((data[5] * 256) + data[4]));
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	3305      	adds	r3, #5
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	021b      	lsls	r3, r3, #8
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3304      	adds	r3, #4
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	4413      	add	r3, r2
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	b21a      	sxth	r2, r3
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	f103 0408 	add.w	r4, r3, #8
 80016c2:	4610      	mov	r0, r2
 80016c4:	f000 f8be 	bl	8001844 <lis331dlh_from_fs2_to_mg>
 80016c8:	4603      	mov	r3, r0
 80016ca:	6023      	str	r3, [r4, #0]
	return 0;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd90      	pop	{r4, r7, pc}
	...

080016d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016de:	f107 0310 	add.w	r3, r7, #16
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ec:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <MX_GPIO_Init+0x8c>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4a1c      	ldr	r2, [pc, #112]	; (8001764 <MX_GPIO_Init+0x8c>)
 80016f2:	f043 0320 	orr.w	r3, r3, #32
 80016f6:	6193      	str	r3, [r2, #24]
 80016f8:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <MX_GPIO_Init+0x8c>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f003 0320 	and.w	r3, r3, #32
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001704:	4b17      	ldr	r3, [pc, #92]	; (8001764 <MX_GPIO_Init+0x8c>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	4a16      	ldr	r2, [pc, #88]	; (8001764 <MX_GPIO_Init+0x8c>)
 800170a:	f043 0304 	orr.w	r3, r3, #4
 800170e:	6193      	str	r3, [r2, #24]
 8001710:	4b14      	ldr	r3, [pc, #80]	; (8001764 <MX_GPIO_Init+0x8c>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <MX_GPIO_Init+0x8c>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	4a10      	ldr	r2, [pc, #64]	; (8001764 <MX_GPIO_Init+0x8c>)
 8001722:	f043 0308 	orr.w	r3, r3, #8
 8001726:	6193      	str	r3, [r2, #24]
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <MX_GPIO_Init+0x8c>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	f003 0308 	and.w	r3, r3, #8
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	2101      	movs	r1, #1
 8001738:	480b      	ldr	r0, [pc, #44]	; (8001768 <MX_GPIO_Init+0x90>)
 800173a:	f000 fe5b 	bl	80023f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 800173e:	2301      	movs	r3, #1
 8001740:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001742:	2301      	movs	r3, #1
 8001744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2302      	movs	r3, #2
 800174c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 800174e:	f107 0310 	add.w	r3, r7, #16
 8001752:	4619      	mov	r1, r3
 8001754:	4804      	ldr	r0, [pc, #16]	; (8001768 <MX_GPIO_Init+0x90>)
 8001756:	f000 fcc9 	bl	80020ec <HAL_GPIO_Init>

}
 800175a:	bf00      	nop
 800175c:	3720      	adds	r7, #32
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40021000 	.word	0x40021000
 8001768:	40010c00 	.word	0x40010c00

0800176c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <MX_I2C1_Init+0x50>)
 8001772:	4a13      	ldr	r2, [pc, #76]	; (80017c0 <MX_I2C1_Init+0x54>)
 8001774:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001776:	4b11      	ldr	r3, [pc, #68]	; (80017bc <MX_I2C1_Init+0x50>)
 8001778:	4a12      	ldr	r2, [pc, #72]	; (80017c4 <MX_I2C1_Init+0x58>)
 800177a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800177c:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <MX_I2C1_Init+0x50>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <MX_I2C1_Init+0x50>)
 8001784:	2200      	movs	r2, #0
 8001786:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_I2C1_Init+0x50>)
 800178a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800178e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001790:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <MX_I2C1_Init+0x50>)
 8001792:	2200      	movs	r2, #0
 8001794:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <MX_I2C1_Init+0x50>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800179c:	4b07      	ldr	r3, [pc, #28]	; (80017bc <MX_I2C1_Init+0x50>)
 800179e:	2200      	movs	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <MX_I2C1_Init+0x50>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017a8:	4804      	ldr	r0, [pc, #16]	; (80017bc <MX_I2C1_Init+0x50>)
 80017aa:	f000 fe3b 	bl	8002424 <HAL_I2C_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017b4:	f000 f927 	bl	8001a06 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	2000036c 	.word	0x2000036c
 80017c0:	40005400 	.word	0x40005400
 80017c4:	000186a0 	.word	0x000186a0

080017c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 0310 	add.w	r3, r7, #16
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a15      	ldr	r2, [pc, #84]	; (8001838 <HAL_I2C_MspInit+0x70>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d123      	bne.n	8001830 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e8:	4b14      	ldr	r3, [pc, #80]	; (800183c <HAL_I2C_MspInit+0x74>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a13      	ldr	r2, [pc, #76]	; (800183c <HAL_I2C_MspInit+0x74>)
 80017ee:	f043 0308 	orr.w	r3, r3, #8
 80017f2:	6193      	str	r3, [r2, #24]
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <HAL_I2C_MspInit+0x74>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001800:	23c0      	movs	r3, #192	; 0xc0
 8001802:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001804:	2312      	movs	r3, #18
 8001806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001808:	2303      	movs	r3, #3
 800180a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180c:	f107 0310 	add.w	r3, r7, #16
 8001810:	4619      	mov	r1, r3
 8001812:	480b      	ldr	r0, [pc, #44]	; (8001840 <HAL_I2C_MspInit+0x78>)
 8001814:	f000 fc6a 	bl	80020ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001818:	4b08      	ldr	r3, [pc, #32]	; (800183c <HAL_I2C_MspInit+0x74>)
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	4a07      	ldr	r2, [pc, #28]	; (800183c <HAL_I2C_MspInit+0x74>)
 800181e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001822:	61d3      	str	r3, [r2, #28]
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <HAL_I2C_MspInit+0x74>)
 8001826:	69db      	ldr	r3, [r3, #28]
 8001828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001830:	bf00      	nop
 8001832:	3720      	adds	r7, #32
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40005400 	.word	0x40005400
 800183c:	40021000 	.word	0x40021000
 8001840:	40010c00 	.word	0x40010c00

08001844 <lis331dlh_from_fs2_to_mg>:
  * @{
  *
  */

float_t lis331dlh_from_fs2_to_mg(int16_t lsb)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 16.0f);
 800184e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fa42 	bl	8000cdc <__aeabi_i2f>
 8001858:	4603      	mov	r3, r0
 800185a:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fb44 	bl	8000eec <__aeabi_fdiv>
 8001864:	4603      	mov	r3, r0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001870:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001874:	b0a2      	sub	sp, #136	; 0x88
 8001876:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001878:	f000 faa4 	bl	8001dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800187c:	f000 f868 	bl	8001950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001880:	f7ff ff2a 	bl	80016d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001884:	f7ff ff72 	bl	800176c <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001888:	f007 fdd0 	bl	800942c <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 800188c:	f000 f8c0 	bl	8001a10 <MX_SPI1_Init>




//  //text buffer
  char text[100] = {0};
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	f107 0318 	add.w	r3, r7, #24
 8001898:	2260      	movs	r2, #96	; 0x60
 800189a:	2100      	movs	r1, #0
 800189c:	4618      	mov	r0, r3
 800189e:	f008 fa93 	bl	8009dc8 <memset>
  CANSPI_Initialize();
 80018a2:	f7ff fbf7 	bl	8001094 <CANSPI_Initialize>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(CANSPI_Receive(&rxMessage))
 80018a6:	4828      	ldr	r0, [pc, #160]	; (8001948 <main+0xd8>)
 80018a8:	f7ff fca4 	bl	80011f4 <CANSPI_Receive>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d044      	beq.n	800193c <main+0xcc>
	  {
		uint8_t data[6]        = {0};
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	2300      	movs	r3, #0
 80018b8:	823b      	strh	r3, [r7, #16]
		float   data_float[3]  = {0};
 80018ba:	463b      	mov	r3, r7
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
//		txMessage.frame.idType = rxMessage.frame.idType;
//		txMessage.frame.id = rxMessage.frame.id;
//		txMessage.frame.dlc = rxMessage.frame.dlc;
//		txMessage.frame.data0++;
		data[0] = rxMessage.frame.data0;
 80018c4:	4b20      	ldr	r3, [pc, #128]	; (8001948 <main+0xd8>)
 80018c6:	7a5b      	ldrb	r3, [r3, #9]
 80018c8:	733b      	strb	r3, [r7, #12]
		data[1] = rxMessage.frame.data1;
 80018ca:	4b1f      	ldr	r3, [pc, #124]	; (8001948 <main+0xd8>)
 80018cc:	7a9b      	ldrb	r3, [r3, #10]
 80018ce:	737b      	strb	r3, [r7, #13]
		data[2] = rxMessage.frame.data2;
 80018d0:	4b1d      	ldr	r3, [pc, #116]	; (8001948 <main+0xd8>)
 80018d2:	7adb      	ldrb	r3, [r3, #11]
 80018d4:	73bb      	strb	r3, [r7, #14]
		data[3] = rxMessage.frame.data3;
 80018d6:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <main+0xd8>)
 80018d8:	7b1b      	ldrb	r3, [r3, #12]
 80018da:	73fb      	strb	r3, [r7, #15]
		data[4] = rxMessage.frame.data4;
 80018dc:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <main+0xd8>)
 80018de:	7b5b      	ldrb	r3, [r3, #13]
 80018e0:	743b      	strb	r3, [r7, #16]
		data[5] = rxMessage.frame.data5;
 80018e2:	4b19      	ldr	r3, [pc, #100]	; (8001948 <main+0xd8>)
 80018e4:	7b9b      	ldrb	r3, [r3, #14]
 80018e6:	747b      	strb	r3, [r7, #17]
//		txMessage.frame.data6 = rxMessage.frame.data6;
//		txMessage.frame.data7 = rxMessage.frame.data7;

		accel_bytes2float(data, data_float);
 80018e8:	463a      	mov	r2, r7
 80018ea:	f107 030c 	add.w	r3, r7, #12
 80018ee:	4611      	mov	r1, r2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff feab 	bl	800164c <accel_bytes2float>

		sprintf(text,
				  "x: %4.2f  y: %4.2f  z: %4.2f \r\n",
				  data_float[0], data_float[1], data_float[2]);
 80018f6:	683b      	ldr	r3, [r7, #0]
		sprintf(text,
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fd95 	bl	8000428 <__aeabi_f2d>
 80018fe:	4680      	mov	r8, r0
 8001900:	4689      	mov	r9, r1
				  data_float[0], data_float[1], data_float[2]);
 8001902:	687b      	ldr	r3, [r7, #4]
		sprintf(text,
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fd8f 	bl	8000428 <__aeabi_f2d>
 800190a:	4604      	mov	r4, r0
 800190c:	460d      	mov	r5, r1
				  data_float[0], data_float[1], data_float[2]);
 800190e:	68bb      	ldr	r3, [r7, #8]
		sprintf(text,
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fd89 	bl	8000428 <__aeabi_f2d>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	f107 0014 	add.w	r0, r7, #20
 800191e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001922:	e9cd 4500 	strd	r4, r5, [sp]
 8001926:	4642      	mov	r2, r8
 8001928:	464b      	mov	r3, r9
 800192a:	4908      	ldr	r1, [pc, #32]	; (800194c <main+0xdc>)
 800192c:	f009 f8c6 	bl	800aabc <siprintf>
		  CDC_Transmit_FS(text, sizeof(text));
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2164      	movs	r1, #100	; 0x64
 8001936:	4618      	mov	r0, r3
 8001938:	f007 fe36 	bl	80095a8 <CDC_Transmit_FS>
	  txMessage.frame.data6 = 6;
	  txMessage.frame.data7 = 7;
	  CANSPI_Transmit(&txMessage);
*/

	  HAL_Delay(1000);
 800193c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001940:	f000 faa2 	bl	8001e88 <HAL_Delay>
	  if(CANSPI_Receive(&rxMessage))
 8001944:	e7af      	b.n	80018a6 <main+0x36>
 8001946:	bf00      	nop
 8001948:	200003c0 	.word	0x200003c0
 800194c:	0800e650 	.word	0x0800e650

08001950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b094      	sub	sp, #80	; 0x50
 8001954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001956:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800195a:	2228      	movs	r2, #40	; 0x28
 800195c:	2100      	movs	r1, #0
 800195e:	4618      	mov	r0, r3
 8001960:	f008 fa32 	bl	8009dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001974:	1d3b      	adds	r3, r7, #4
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001980:	2301      	movs	r3, #1
 8001982:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001984:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800198a:	2300      	movs	r3, #0
 800198c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800198e:	2301      	movs	r3, #1
 8001990:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001992:	2302      	movs	r3, #2
 8001994:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001996:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800199a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800199c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019a6:	4618      	mov	r0, r3
 80019a8:	f002 fbee 	bl	8004188 <HAL_RCC_OscConfig>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80019b2:	f000 f828 	bl	8001a06 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019b6:	230f      	movs	r3, #15
 80019b8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ba:	2302      	movs	r3, #2
 80019bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019c6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019c8:	2300      	movs	r3, #0
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	2101      	movs	r1, #1
 80019d2:	4618      	mov	r0, r3
 80019d4:	f002 fe5a 	bl	800468c <HAL_RCC_ClockConfig>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80019de:	f000 f812 	bl	8001a06 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80019e2:	2310      	movs	r3, #16
 80019e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80019e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019ea:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	4618      	mov	r0, r3
 80019f0:	f002 ffc6 	bl	8004980 <HAL_RCCEx_PeriphCLKConfig>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <SystemClock_Config+0xae>
  {
    Error_Handler();
 80019fa:	f000 f804 	bl	8001a06 <Error_Handler>
  }
}
 80019fe:	bf00      	nop
 8001a00:	3750      	adds	r7, #80	; 0x50
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a0a:	b672      	cpsid	i
}
 8001a0c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a0e:	e7fe      	b.n	8001a0e <Error_Handler+0x8>

08001a10 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a14:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <MX_SPI1_Init+0x64>)
 8001a16:	4a18      	ldr	r2, [pc, #96]	; (8001a78 <MX_SPI1_Init+0x68>)
 8001a18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a1a:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <MX_SPI1_Init+0x64>)
 8001a1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a22:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <MX_SPI1_Init+0x64>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <MX_SPI1_Init+0x64>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a2e:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <MX_SPI1_Init+0x64>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <MX_SPI1_Init+0x64>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <MX_SPI1_Init+0x64>)
 8001a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a40:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a42:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <MX_SPI1_Init+0x64>)
 8001a44:	2210      	movs	r2, #16
 8001a46:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a48:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <MX_SPI1_Init+0x64>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <MX_SPI1_Init+0x64>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a54:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <MX_SPI1_Init+0x64>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a5a:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <MX_SPI1_Init+0x64>)
 8001a5c:	220a      	movs	r2, #10
 8001a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a60:	4804      	ldr	r0, [pc, #16]	; (8001a74 <MX_SPI1_Init+0x64>)
 8001a62:	f003 f843 	bl	8004aec <HAL_SPI_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a6c:	f7ff ffcb 	bl	8001a06 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	200003d4 	.word	0x200003d4
 8001a78:	40013000 	.word	0x40013000

08001a7c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 0310 	add.w	r3, r7, #16
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a1b      	ldr	r2, [pc, #108]	; (8001b04 <HAL_SPI_MspInit+0x88>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d12f      	bne.n	8001afc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a9c:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <HAL_SPI_MspInit+0x8c>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	4a19      	ldr	r2, [pc, #100]	; (8001b08 <HAL_SPI_MspInit+0x8c>)
 8001aa2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001aa6:	6193      	str	r3, [r2, #24]
 8001aa8:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <HAL_SPI_MspInit+0x8c>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab4:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <HAL_SPI_MspInit+0x8c>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	4a13      	ldr	r2, [pc, #76]	; (8001b08 <HAL_SPI_MspInit+0x8c>)
 8001aba:	f043 0304 	orr.w	r3, r3, #4
 8001abe:	6193      	str	r3, [r2, #24]
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <HAL_SPI_MspInit+0x8c>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001acc:	23a0      	movs	r3, #160	; 0xa0
 8001ace:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad8:	f107 0310 	add.w	r3, r7, #16
 8001adc:	4619      	mov	r1, r3
 8001ade:	480b      	ldr	r0, [pc, #44]	; (8001b0c <HAL_SPI_MspInit+0x90>)
 8001ae0:	f000 fb04 	bl	80020ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ae4:	2340      	movs	r3, #64	; 0x40
 8001ae6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af0:	f107 0310 	add.w	r3, r7, #16
 8001af4:	4619      	mov	r1, r3
 8001af6:	4805      	ldr	r0, [pc, #20]	; (8001b0c <HAL_SPI_MspInit+0x90>)
 8001af8:	f000 faf8 	bl	80020ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001afc:	bf00      	nop
 8001afe:	3720      	adds	r7, #32
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40013000 	.word	0x40013000
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40010800 	.word	0x40010800

08001b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <HAL_MspInit+0x5c>)
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	4a14      	ldr	r2, [pc, #80]	; (8001b6c <HAL_MspInit+0x5c>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6193      	str	r3, [r2, #24]
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_MspInit+0x5c>)
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <HAL_MspInit+0x5c>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	4a0e      	ldr	r2, [pc, #56]	; (8001b6c <HAL_MspInit+0x5c>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b38:	61d3      	str	r3, [r2, #28]
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <HAL_MspInit+0x5c>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b42:	607b      	str	r3, [r7, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <HAL_MspInit+0x60>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <HAL_MspInit+0x60>)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b62:	bf00      	nop
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40010000 	.word	0x40010000

08001b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <NMI_Handler+0x4>

08001b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <HardFault_Handler+0x4>

08001b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <MemManage_Handler+0x4>

08001b86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <BusFault_Handler+0x4>

08001b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <UsageFault_Handler+0x4>

08001b92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr

08001b9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr

08001baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr

08001bb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bba:	f000 f949 	bl	8001e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001bc8:	4802      	ldr	r0, [pc, #8]	; (8001bd4 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001bca:	f000 fe94 	bl	80028f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200010fc 	.word	0x200010fc

08001bd8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001bdc:	4802      	ldr	r0, [pc, #8]	; (8001be8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001bde:	f000 fe8a 	bl	80028f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */


  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	200010fc 	.word	0x200010fc

08001bec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return 1;
 8001bf0:	2301      	movs	r3, #1
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr

08001bfa <_kill>:

int _kill(int pid, int sig)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c04:	f008 f8b6 	bl	8009d74 <__errno>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2216      	movs	r2, #22
 8001c0c:	601a      	str	r2, [r3, #0]
  return -1;
 8001c0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <_exit>:

void _exit (int status)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c22:	f04f 31ff 	mov.w	r1, #4294967295
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff ffe7 	bl	8001bfa <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c2c:	e7fe      	b.n	8001c2c <_exit+0x12>

08001c2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b086      	sub	sp, #24
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	60f8      	str	r0, [r7, #12]
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	e00a      	b.n	8001c56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c40:	f3af 8000 	nop.w
 8001c44:	4601      	mov	r1, r0
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	1c5a      	adds	r2, r3, #1
 8001c4a:	60ba      	str	r2, [r7, #8]
 8001c4c:	b2ca      	uxtb	r2, r1
 8001c4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	3301      	adds	r3, #1
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	dbf0      	blt.n	8001c40 <_read+0x12>
  }

  return len;
 8001c5e:	687b      	ldr	r3, [r7, #4]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	e009      	b.n	8001c8e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	1c5a      	adds	r2, r3, #1
 8001c7e:	60ba      	str	r2, [r7, #8]
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	dbf1      	blt.n	8001c7a <_write+0x12>
  }
  return len;
 8001c96:	687b      	ldr	r3, [r7, #4]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <_close>:

int _close(int file)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ca8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr

08001cb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cc6:	605a      	str	r2, [r3, #4]
  return 0;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr

08001cd4 <_isatty>:

int _isatty(int file)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cdc:	2301      	movs	r3, #1
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr

08001d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d08:	4a14      	ldr	r2, [pc, #80]	; (8001d5c <_sbrk+0x5c>)
 8001d0a:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <_sbrk+0x60>)
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d14:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <_sbrk+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d102      	bne.n	8001d22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <_sbrk+0x64>)
 8001d1e:	4a12      	ldr	r2, [pc, #72]	; (8001d68 <_sbrk+0x68>)
 8001d20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <_sbrk+0x64>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d207      	bcs.n	8001d40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d30:	f008 f820 	bl	8009d74 <__errno>
 8001d34:	4603      	mov	r3, r0
 8001d36:	220c      	movs	r2, #12
 8001d38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3e:	e009      	b.n	8001d54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d40:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <_sbrk+0x64>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d46:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <_sbrk+0x64>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	4a05      	ldr	r2, [pc, #20]	; (8001d64 <_sbrk+0x64>)
 8001d50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d52:	68fb      	ldr	r3, [r7, #12]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20005000 	.word	0x20005000
 8001d60:	00000400 	.word	0x00000400
 8001d64:	2000042c 	.word	0x2000042c
 8001d68:	20001620 	.word	0x20001620

08001d6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr

08001d78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d78:	f7ff fff8 	bl	8001d6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d7c:	480b      	ldr	r0, [pc, #44]	; (8001dac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d7e:	490c      	ldr	r1, [pc, #48]	; (8001db0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d80:	4a0c      	ldr	r2, [pc, #48]	; (8001db4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d84:	e002      	b.n	8001d8c <LoopCopyDataInit>

08001d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8a:	3304      	adds	r3, #4

08001d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d90:	d3f9      	bcc.n	8001d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d92:	4a09      	ldr	r2, [pc, #36]	; (8001db8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d94:	4c09      	ldr	r4, [pc, #36]	; (8001dbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d98:	e001      	b.n	8001d9e <LoopFillZerobss>

08001d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d9c:	3204      	adds	r2, #4

08001d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da0:	d3fb      	bcc.n	8001d9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001da2:	f007 ffed 	bl	8009d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001da6:	f7ff fd63 	bl	8001870 <main>
  bx lr
 8001daa:	4770      	bx	lr
  ldr r0, =_sdata
 8001dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db0:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8001db4:	0800eb94 	.word	0x0800eb94
  ldr r2, =_sbss
 8001db8:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8001dbc:	2000161c 	.word	0x2000161c

08001dc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dc0:	e7fe      	b.n	8001dc0 <ADC1_2_IRQHandler>
	...

08001dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <HAL_Init+0x28>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a07      	ldr	r2, [pc, #28]	; (8001dec <HAL_Init+0x28>)
 8001dce:	f043 0310 	orr.w	r3, r3, #16
 8001dd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd4:	2003      	movs	r0, #3
 8001dd6:	f000 f947 	bl	8002068 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dda:	200f      	movs	r0, #15
 8001ddc:	f000 f808 	bl	8001df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001de0:	f7ff fe96 	bl	8001b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40022000 	.word	0x40022000

08001df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_InitTick+0x54>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HAL_InitTick+0x58>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	4619      	mov	r1, r3
 8001e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 f95f 	bl	80020d2 <HAL_SYSTICK_Config>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e00e      	b.n	8001e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b0f      	cmp	r3, #15
 8001e22:	d80a      	bhi.n	8001e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e24:	2200      	movs	r2, #0
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	f04f 30ff 	mov.w	r0, #4294967295
 8001e2c:	f000 f927 	bl	800207e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e30:	4a06      	ldr	r2, [pc, #24]	; (8001e4c <HAL_InitTick+0x5c>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	e000      	b.n	8001e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000000 	.word	0x20000000
 8001e48:	20000008 	.word	0x20000008
 8001e4c:	20000004 	.word	0x20000004

08001e50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_IncTick+0x1c>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <HAL_IncTick+0x20>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4413      	add	r3, r2
 8001e60:	4a03      	ldr	r2, [pc, #12]	; (8001e70 <HAL_IncTick+0x20>)
 8001e62:	6013      	str	r3, [r2, #0]
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr
 8001e6c:	20000008 	.word	0x20000008
 8001e70:	20000430 	.word	0x20000430

08001e74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return uwTick;
 8001e78:	4b02      	ldr	r3, [pc, #8]	; (8001e84 <HAL_GetTick+0x10>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr
 8001e84:	20000430 	.word	0x20000430

08001e88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e90:	f7ff fff0 	bl	8001e74 <HAL_GetTick>
 8001e94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea0:	d005      	beq.n	8001eae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <HAL_Delay+0x44>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4413      	add	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eae:	bf00      	nop
 8001eb0:	f7ff ffe0 	bl	8001e74 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d8f7      	bhi.n	8001eb0 <HAL_Delay+0x28>
  {
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000008 	.word	0x20000008

08001ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eec:	4013      	ands	r3, r2
 8001eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f02:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	60d3      	str	r3, [r2, #12]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <__NVIC_GetPriorityGrouping+0x18>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	f003 0307 	and.w	r3, r3, #7
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	db0b      	blt.n	8001f5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	f003 021f 	and.w	r2, r3, #31
 8001f4c:	4906      	ldr	r1, [pc, #24]	; (8001f68 <__NVIC_EnableIRQ+0x34>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	2001      	movs	r0, #1
 8001f56:	fa00 f202 	lsl.w	r2, r0, r2
 8001f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr
 8001f68:	e000e100 	.word	0xe000e100

08001f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	6039      	str	r1, [r7, #0]
 8001f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	db0a      	blt.n	8001f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	490c      	ldr	r1, [pc, #48]	; (8001fb8 <__NVIC_SetPriority+0x4c>)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	0112      	lsls	r2, r2, #4
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	440b      	add	r3, r1
 8001f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f94:	e00a      	b.n	8001fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4908      	ldr	r1, [pc, #32]	; (8001fbc <__NVIC_SetPriority+0x50>)
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	3b04      	subs	r3, #4
 8001fa4:	0112      	lsls	r2, r2, #4
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	440b      	add	r3, r1
 8001faa:	761a      	strb	r2, [r3, #24]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000e100 	.word	0xe000e100
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	; 0x24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f1c3 0307 	rsb	r3, r3, #7
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	bf28      	it	cs
 8001fde:	2304      	movcs	r3, #4
 8001fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	2b06      	cmp	r3, #6
 8001fe8:	d902      	bls.n	8001ff0 <NVIC_EncodePriority+0x30>
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3b03      	subs	r3, #3
 8001fee:	e000      	b.n	8001ff2 <NVIC_EncodePriority+0x32>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43da      	mvns	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	401a      	ands	r2, r3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002008:	f04f 31ff 	mov.w	r1, #4294967295
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	fa01 f303 	lsl.w	r3, r1, r3
 8002012:	43d9      	mvns	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002018:	4313      	orrs	r3, r2
         );
}
 800201a:	4618      	mov	r0, r3
 800201c:	3724      	adds	r7, #36	; 0x24
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr

08002024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3b01      	subs	r3, #1
 8002030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002034:	d301      	bcc.n	800203a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002036:	2301      	movs	r3, #1
 8002038:	e00f      	b.n	800205a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800203a:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <SysTick_Config+0x40>)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3b01      	subs	r3, #1
 8002040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002042:	210f      	movs	r1, #15
 8002044:	f04f 30ff 	mov.w	r0, #4294967295
 8002048:	f7ff ff90 	bl	8001f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800204c:	4b05      	ldr	r3, [pc, #20]	; (8002064 <SysTick_Config+0x40>)
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002052:	4b04      	ldr	r3, [pc, #16]	; (8002064 <SysTick_Config+0x40>)
 8002054:	2207      	movs	r2, #7
 8002056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	e000e010 	.word	0xe000e010

08002068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff ff2d 	bl	8001ed0 <__NVIC_SetPriorityGrouping>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800207e:	b580      	push	{r7, lr}
 8002080:	b086      	sub	sp, #24
 8002082:	af00      	add	r7, sp, #0
 8002084:	4603      	mov	r3, r0
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
 800208a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002090:	f7ff ff42 	bl	8001f18 <__NVIC_GetPriorityGrouping>
 8002094:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	68b9      	ldr	r1, [r7, #8]
 800209a:	6978      	ldr	r0, [r7, #20]
 800209c:	f7ff ff90 	bl	8001fc0 <NVIC_EncodePriority>
 80020a0:	4602      	mov	r2, r0
 80020a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff5f 	bl	8001f6c <__NVIC_SetPriority>
}
 80020ae:	bf00      	nop
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	4603      	mov	r3, r0
 80020be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff35 	bl	8001f34 <__NVIC_EnableIRQ>
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff ffa2 	bl	8002024 <SysTick_Config>
 80020e0:	4603      	mov	r3, r0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b08b      	sub	sp, #44	; 0x2c
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020f6:	2300      	movs	r3, #0
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020fa:	2300      	movs	r3, #0
 80020fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020fe:	e169      	b.n	80023d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002100:	2201      	movs	r2, #1
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	69fa      	ldr	r2, [r7, #28]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	429a      	cmp	r2, r3
 800211a:	f040 8158 	bne.w	80023ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	4a9a      	ldr	r2, [pc, #616]	; (800238c <HAL_GPIO_Init+0x2a0>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d05e      	beq.n	80021e6 <HAL_GPIO_Init+0xfa>
 8002128:	4a98      	ldr	r2, [pc, #608]	; (800238c <HAL_GPIO_Init+0x2a0>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d875      	bhi.n	800221a <HAL_GPIO_Init+0x12e>
 800212e:	4a98      	ldr	r2, [pc, #608]	; (8002390 <HAL_GPIO_Init+0x2a4>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d058      	beq.n	80021e6 <HAL_GPIO_Init+0xfa>
 8002134:	4a96      	ldr	r2, [pc, #600]	; (8002390 <HAL_GPIO_Init+0x2a4>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d86f      	bhi.n	800221a <HAL_GPIO_Init+0x12e>
 800213a:	4a96      	ldr	r2, [pc, #600]	; (8002394 <HAL_GPIO_Init+0x2a8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d052      	beq.n	80021e6 <HAL_GPIO_Init+0xfa>
 8002140:	4a94      	ldr	r2, [pc, #592]	; (8002394 <HAL_GPIO_Init+0x2a8>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d869      	bhi.n	800221a <HAL_GPIO_Init+0x12e>
 8002146:	4a94      	ldr	r2, [pc, #592]	; (8002398 <HAL_GPIO_Init+0x2ac>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d04c      	beq.n	80021e6 <HAL_GPIO_Init+0xfa>
 800214c:	4a92      	ldr	r2, [pc, #584]	; (8002398 <HAL_GPIO_Init+0x2ac>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d863      	bhi.n	800221a <HAL_GPIO_Init+0x12e>
 8002152:	4a92      	ldr	r2, [pc, #584]	; (800239c <HAL_GPIO_Init+0x2b0>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d046      	beq.n	80021e6 <HAL_GPIO_Init+0xfa>
 8002158:	4a90      	ldr	r2, [pc, #576]	; (800239c <HAL_GPIO_Init+0x2b0>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d85d      	bhi.n	800221a <HAL_GPIO_Init+0x12e>
 800215e:	2b12      	cmp	r3, #18
 8002160:	d82a      	bhi.n	80021b8 <HAL_GPIO_Init+0xcc>
 8002162:	2b12      	cmp	r3, #18
 8002164:	d859      	bhi.n	800221a <HAL_GPIO_Init+0x12e>
 8002166:	a201      	add	r2, pc, #4	; (adr r2, 800216c <HAL_GPIO_Init+0x80>)
 8002168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800216c:	080021e7 	.word	0x080021e7
 8002170:	080021c1 	.word	0x080021c1
 8002174:	080021d3 	.word	0x080021d3
 8002178:	08002215 	.word	0x08002215
 800217c:	0800221b 	.word	0x0800221b
 8002180:	0800221b 	.word	0x0800221b
 8002184:	0800221b 	.word	0x0800221b
 8002188:	0800221b 	.word	0x0800221b
 800218c:	0800221b 	.word	0x0800221b
 8002190:	0800221b 	.word	0x0800221b
 8002194:	0800221b 	.word	0x0800221b
 8002198:	0800221b 	.word	0x0800221b
 800219c:	0800221b 	.word	0x0800221b
 80021a0:	0800221b 	.word	0x0800221b
 80021a4:	0800221b 	.word	0x0800221b
 80021a8:	0800221b 	.word	0x0800221b
 80021ac:	0800221b 	.word	0x0800221b
 80021b0:	080021c9 	.word	0x080021c9
 80021b4:	080021dd 	.word	0x080021dd
 80021b8:	4a79      	ldr	r2, [pc, #484]	; (80023a0 <HAL_GPIO_Init+0x2b4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d013      	beq.n	80021e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021be:	e02c      	b.n	800221a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	623b      	str	r3, [r7, #32]
          break;
 80021c6:	e029      	b.n	800221c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	3304      	adds	r3, #4
 80021ce:	623b      	str	r3, [r7, #32]
          break;
 80021d0:	e024      	b.n	800221c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	3308      	adds	r3, #8
 80021d8:	623b      	str	r3, [r7, #32]
          break;
 80021da:	e01f      	b.n	800221c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	330c      	adds	r3, #12
 80021e2:	623b      	str	r3, [r7, #32]
          break;
 80021e4:	e01a      	b.n	800221c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d102      	bne.n	80021f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021ee:	2304      	movs	r3, #4
 80021f0:	623b      	str	r3, [r7, #32]
          break;
 80021f2:	e013      	b.n	800221c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d105      	bne.n	8002208 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021fc:	2308      	movs	r3, #8
 80021fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69fa      	ldr	r2, [r7, #28]
 8002204:	611a      	str	r2, [r3, #16]
          break;
 8002206:	e009      	b.n	800221c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002208:	2308      	movs	r3, #8
 800220a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69fa      	ldr	r2, [r7, #28]
 8002210:	615a      	str	r2, [r3, #20]
          break;
 8002212:	e003      	b.n	800221c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002214:	2300      	movs	r3, #0
 8002216:	623b      	str	r3, [r7, #32]
          break;
 8002218:	e000      	b.n	800221c <HAL_GPIO_Init+0x130>
          break;
 800221a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	2bff      	cmp	r3, #255	; 0xff
 8002220:	d801      	bhi.n	8002226 <HAL_GPIO_Init+0x13a>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	e001      	b.n	800222a <HAL_GPIO_Init+0x13e>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3304      	adds	r3, #4
 800222a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	2bff      	cmp	r3, #255	; 0xff
 8002230:	d802      	bhi.n	8002238 <HAL_GPIO_Init+0x14c>
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	e002      	b.n	800223e <HAL_GPIO_Init+0x152>
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	3b08      	subs	r3, #8
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	210f      	movs	r1, #15
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	fa01 f303 	lsl.w	r3, r1, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	401a      	ands	r2, r3
 8002250:	6a39      	ldr	r1, [r7, #32]
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	fa01 f303 	lsl.w	r3, r1, r3
 8002258:	431a      	orrs	r2, r3
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 80b1 	beq.w	80023ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800226c:	4b4d      	ldr	r3, [pc, #308]	; (80023a4 <HAL_GPIO_Init+0x2b8>)
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	4a4c      	ldr	r2, [pc, #304]	; (80023a4 <HAL_GPIO_Init+0x2b8>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	6193      	str	r3, [r2, #24]
 8002278:	4b4a      	ldr	r3, [pc, #296]	; (80023a4 <HAL_GPIO_Init+0x2b8>)
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002284:	4a48      	ldr	r2, [pc, #288]	; (80023a8 <HAL_GPIO_Init+0x2bc>)
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	089b      	lsrs	r3, r3, #2
 800228a:	3302      	adds	r3, #2
 800228c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002290:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	220f      	movs	r2, #15
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	4013      	ands	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a40      	ldr	r2, [pc, #256]	; (80023ac <HAL_GPIO_Init+0x2c0>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d013      	beq.n	80022d8 <HAL_GPIO_Init+0x1ec>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a3f      	ldr	r2, [pc, #252]	; (80023b0 <HAL_GPIO_Init+0x2c4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d00d      	beq.n	80022d4 <HAL_GPIO_Init+0x1e8>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a3e      	ldr	r2, [pc, #248]	; (80023b4 <HAL_GPIO_Init+0x2c8>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d007      	beq.n	80022d0 <HAL_GPIO_Init+0x1e4>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a3d      	ldr	r2, [pc, #244]	; (80023b8 <HAL_GPIO_Init+0x2cc>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d101      	bne.n	80022cc <HAL_GPIO_Init+0x1e0>
 80022c8:	2303      	movs	r3, #3
 80022ca:	e006      	b.n	80022da <HAL_GPIO_Init+0x1ee>
 80022cc:	2304      	movs	r3, #4
 80022ce:	e004      	b.n	80022da <HAL_GPIO_Init+0x1ee>
 80022d0:	2302      	movs	r3, #2
 80022d2:	e002      	b.n	80022da <HAL_GPIO_Init+0x1ee>
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <HAL_GPIO_Init+0x1ee>
 80022d8:	2300      	movs	r3, #0
 80022da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022dc:	f002 0203 	and.w	r2, r2, #3
 80022e0:	0092      	lsls	r2, r2, #2
 80022e2:	4093      	lsls	r3, r2
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022ea:	492f      	ldr	r1, [pc, #188]	; (80023a8 <HAL_GPIO_Init+0x2bc>)
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	089b      	lsrs	r3, r3, #2
 80022f0:	3302      	adds	r3, #2
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d006      	beq.n	8002312 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002304:	4b2d      	ldr	r3, [pc, #180]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	492c      	ldr	r1, [pc, #176]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	4313      	orrs	r3, r2
 800230e:	608b      	str	r3, [r1, #8]
 8002310:	e006      	b.n	8002320 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002312:	4b2a      	ldr	r3, [pc, #168]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	43db      	mvns	r3, r3
 800231a:	4928      	ldr	r1, [pc, #160]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 800231c:	4013      	ands	r3, r2
 800231e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d006      	beq.n	800233a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800232c:	4b23      	ldr	r3, [pc, #140]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	4922      	ldr	r1, [pc, #136]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	4313      	orrs	r3, r2
 8002336:	60cb      	str	r3, [r1, #12]
 8002338:	e006      	b.n	8002348 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800233a:	4b20      	ldr	r3, [pc, #128]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	43db      	mvns	r3, r3
 8002342:	491e      	ldr	r1, [pc, #120]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 8002344:	4013      	ands	r3, r2
 8002346:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d006      	beq.n	8002362 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	4918      	ldr	r1, [pc, #96]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	4313      	orrs	r3, r2
 800235e:	604b      	str	r3, [r1, #4]
 8002360:	e006      	b.n	8002370 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002362:	4b16      	ldr	r3, [pc, #88]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	43db      	mvns	r3, r3
 800236a:	4914      	ldr	r1, [pc, #80]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 800236c:	4013      	ands	r3, r2
 800236e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d021      	beq.n	80023c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800237c:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	490e      	ldr	r1, [pc, #56]	; (80023bc <HAL_GPIO_Init+0x2d0>)
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	4313      	orrs	r3, r2
 8002386:	600b      	str	r3, [r1, #0]
 8002388:	e021      	b.n	80023ce <HAL_GPIO_Init+0x2e2>
 800238a:	bf00      	nop
 800238c:	10320000 	.word	0x10320000
 8002390:	10310000 	.word	0x10310000
 8002394:	10220000 	.word	0x10220000
 8002398:	10210000 	.word	0x10210000
 800239c:	10120000 	.word	0x10120000
 80023a0:	10110000 	.word	0x10110000
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40010000 	.word	0x40010000
 80023ac:	40010800 	.word	0x40010800
 80023b0:	40010c00 	.word	0x40010c00
 80023b4:	40011000 	.word	0x40011000
 80023b8:	40011400 	.word	0x40011400
 80023bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023c0:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <HAL_GPIO_Init+0x304>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	4909      	ldr	r1, [pc, #36]	; (80023f0 <HAL_GPIO_Init+0x304>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	3301      	adds	r3, #1
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	fa22 f303 	lsr.w	r3, r2, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f47f ae8e 	bne.w	8002100 <HAL_GPIO_Init+0x14>
  }
}
 80023e4:	bf00      	nop
 80023e6:	bf00      	nop
 80023e8:	372c      	adds	r7, #44	; 0x2c
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr
 80023f0:	40010400 	.word	0x40010400

080023f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	807b      	strh	r3, [r7, #2]
 8002400:	4613      	mov	r3, r2
 8002402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002404:	787b      	ldrb	r3, [r7, #1]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800240a:	887a      	ldrh	r2, [r7, #2]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002410:	e003      	b.n	800241a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002412:	887b      	ldrh	r3, [r7, #2]
 8002414:	041a      	lsls	r2, r3, #16
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	611a      	str	r2, [r3, #16]
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr

08002424 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e12b      	b.n	800268e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d106      	bne.n	8002450 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff f9bc 	bl	80017c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2224      	movs	r2, #36	; 0x24
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0201 	bic.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002476:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002486:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002488:	f002 fa48 	bl	800491c <HAL_RCC_GetPCLK1Freq>
 800248c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4a81      	ldr	r2, [pc, #516]	; (8002698 <HAL_I2C_Init+0x274>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d807      	bhi.n	80024a8 <HAL_I2C_Init+0x84>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4a80      	ldr	r2, [pc, #512]	; (800269c <HAL_I2C_Init+0x278>)
 800249c:	4293      	cmp	r3, r2
 800249e:	bf94      	ite	ls
 80024a0:	2301      	movls	r3, #1
 80024a2:	2300      	movhi	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	e006      	b.n	80024b6 <HAL_I2C_Init+0x92>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4a7d      	ldr	r2, [pc, #500]	; (80026a0 <HAL_I2C_Init+0x27c>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	bf94      	ite	ls
 80024b0:	2301      	movls	r3, #1
 80024b2:	2300      	movhi	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e0e7      	b.n	800268e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4a78      	ldr	r2, [pc, #480]	; (80026a4 <HAL_I2C_Init+0x280>)
 80024c2:	fba2 2303 	umull	r2, r3, r2, r3
 80024c6:	0c9b      	lsrs	r3, r3, #18
 80024c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	430a      	orrs	r2, r1
 80024dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	4a6a      	ldr	r2, [pc, #424]	; (8002698 <HAL_I2C_Init+0x274>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d802      	bhi.n	80024f8 <HAL_I2C_Init+0xd4>
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	3301      	adds	r3, #1
 80024f6:	e009      	b.n	800250c <HAL_I2C_Init+0xe8>
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024fe:	fb02 f303 	mul.w	r3, r2, r3
 8002502:	4a69      	ldr	r2, [pc, #420]	; (80026a8 <HAL_I2C_Init+0x284>)
 8002504:	fba2 2303 	umull	r2, r3, r2, r3
 8002508:	099b      	lsrs	r3, r3, #6
 800250a:	3301      	adds	r3, #1
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	430b      	orrs	r3, r1
 8002512:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800251e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	495c      	ldr	r1, [pc, #368]	; (8002698 <HAL_I2C_Init+0x274>)
 8002528:	428b      	cmp	r3, r1
 800252a:	d819      	bhi.n	8002560 <HAL_I2C_Init+0x13c>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1e59      	subs	r1, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	fbb1 f3f3 	udiv	r3, r1, r3
 800253a:	1c59      	adds	r1, r3, #1
 800253c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002540:	400b      	ands	r3, r1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00a      	beq.n	800255c <HAL_I2C_Init+0x138>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	1e59      	subs	r1, r3, #1
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	fbb1 f3f3 	udiv	r3, r1, r3
 8002554:	3301      	adds	r3, #1
 8002556:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800255a:	e051      	b.n	8002600 <HAL_I2C_Init+0x1dc>
 800255c:	2304      	movs	r3, #4
 800255e:	e04f      	b.n	8002600 <HAL_I2C_Init+0x1dc>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d111      	bne.n	800258c <HAL_I2C_Init+0x168>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	1e58      	subs	r0, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6859      	ldr	r1, [r3, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	440b      	add	r3, r1
 8002576:	fbb0 f3f3 	udiv	r3, r0, r3
 800257a:	3301      	adds	r3, #1
 800257c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002580:	2b00      	cmp	r3, #0
 8002582:	bf0c      	ite	eq
 8002584:	2301      	moveq	r3, #1
 8002586:	2300      	movne	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	e012      	b.n	80025b2 <HAL_I2C_Init+0x18e>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	1e58      	subs	r0, r3, #1
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6859      	ldr	r1, [r3, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	0099      	lsls	r1, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	fbb0 f3f3 	udiv	r3, r0, r3
 80025a2:	3301      	adds	r3, #1
 80025a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	bf0c      	ite	eq
 80025ac:	2301      	moveq	r3, #1
 80025ae:	2300      	movne	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_I2C_Init+0x196>
 80025b6:	2301      	movs	r3, #1
 80025b8:	e022      	b.n	8002600 <HAL_I2C_Init+0x1dc>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10e      	bne.n	80025e0 <HAL_I2C_Init+0x1bc>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1e58      	subs	r0, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6859      	ldr	r1, [r3, #4]
 80025ca:	460b      	mov	r3, r1
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	440b      	add	r3, r1
 80025d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80025d4:	3301      	adds	r3, #1
 80025d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025de:	e00f      	b.n	8002600 <HAL_I2C_Init+0x1dc>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	1e58      	subs	r0, r3, #1
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6859      	ldr	r1, [r3, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	0099      	lsls	r1, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025f6:	3301      	adds	r3, #1
 80025f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	6809      	ldr	r1, [r1, #0]
 8002604:	4313      	orrs	r3, r2
 8002606:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69da      	ldr	r2, [r3, #28]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	430a      	orrs	r2, r1
 8002622:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800262e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6911      	ldr	r1, [r2, #16]
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	68d2      	ldr	r2, [r2, #12]
 800263a:	4311      	orrs	r1, r2
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6812      	ldr	r2, [r2, #0]
 8002640:	430b      	orrs	r3, r1
 8002642:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695a      	ldr	r2, [r3, #20]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 0201 	orr.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2220      	movs	r2, #32
 800267a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	000186a0 	.word	0x000186a0
 800269c:	001e847f 	.word	0x001e847f
 80026a0:	003d08ff 	.word	0x003d08ff
 80026a4:	431bde83 	.word	0x431bde83
 80026a8:	10624dd3 	.word	0x10624dd3

080026ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ae:	b08b      	sub	sp, #44	; 0x2c
 80026b0:	af06      	add	r7, sp, #24
 80026b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e0f1      	b.n	80028a2 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d106      	bne.n	80026d8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f007 f89c 	bl	8009810 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2203      	movs	r2, #3
 80026dc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f002 ffbb 	bl	8005660 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	687e      	ldr	r6, [r7, #4]
 80026f2:	466d      	mov	r5, sp
 80026f4:	f106 0410 	add.w	r4, r6, #16
 80026f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026fc:	6823      	ldr	r3, [r4, #0]
 80026fe:	602b      	str	r3, [r5, #0]
 8002700:	1d33      	adds	r3, r6, #4
 8002702:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002704:	6838      	ldr	r0, [r7, #0]
 8002706:	f002 ff85 	bl	8005614 <USB_CoreInit>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0c2      	b.n	80028a2 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2100      	movs	r1, #0
 8002722:	4618      	mov	r0, r3
 8002724:	f002 ffb6 	bl	8005694 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002728:	2300      	movs	r3, #0
 800272a:	73fb      	strb	r3, [r7, #15]
 800272c:	e040      	b.n	80027b0 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800272e:	7bfb      	ldrb	r3, [r7, #15]
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	4613      	mov	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	440b      	add	r3, r1
 800273e:	3301      	adds	r3, #1
 8002740:	2201      	movs	r2, #1
 8002742:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	440b      	add	r3, r1
 8002754:	7bfa      	ldrb	r2, [r7, #15]
 8002756:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002758:	7bfb      	ldrb	r3, [r7, #15]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	440b      	add	r3, r1
 8002768:	3303      	adds	r3, #3
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800276e:	7bfa      	ldrb	r2, [r7, #15]
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	440b      	add	r3, r1
 800277c:	3338      	adds	r3, #56	; 0x38
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002782:	7bfa      	ldrb	r2, [r7, #15]
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	440b      	add	r3, r1
 8002790:	333c      	adds	r3, #60	; 0x3c
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002796:	7bfa      	ldrb	r2, [r7, #15]
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	440b      	add	r3, r1
 80027a4:	3340      	adds	r3, #64	; 0x40
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
 80027ac:	3301      	adds	r3, #1
 80027ae:	73fb      	strb	r3, [r7, #15]
 80027b0:	7bfa      	ldrb	r2, [r7, #15]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d3b9      	bcc.n	800272e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ba:	2300      	movs	r3, #0
 80027bc:	73fb      	strb	r3, [r7, #15]
 80027be:	e044      	b.n	800284a <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027c0:	7bfa      	ldrb	r2, [r7, #15]
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	440b      	add	r3, r1
 80027ce:	f203 1369 	addw	r3, r3, #361	; 0x169
 80027d2:	2200      	movs	r2, #0
 80027d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027d6:	7bfa      	ldrb	r2, [r7, #15]
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	440b      	add	r3, r1
 80027e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027e8:	7bfa      	ldrb	r2, [r7, #15]
 80027ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027ec:	7bfa      	ldrb	r2, [r7, #15]
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	4613      	mov	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	440b      	add	r3, r1
 80027fa:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80027fe:	2200      	movs	r2, #0
 8002800:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002802:	7bfa      	ldrb	r2, [r7, #15]
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	440b      	add	r3, r1
 8002810:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002818:	7bfa      	ldrb	r2, [r7, #15]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	440b      	add	r3, r1
 8002826:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800282e:	7bfa      	ldrb	r2, [r7, #15]
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	440b      	add	r3, r1
 800283c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	3301      	adds	r3, #1
 8002848:	73fb      	strb	r3, [r7, #15]
 800284a:	7bfa      	ldrb	r2, [r7, #15]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	429a      	cmp	r2, r3
 8002852:	d3b5      	bcc.n	80027c0 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	603b      	str	r3, [r7, #0]
 800285a:	687e      	ldr	r6, [r7, #4]
 800285c:	466d      	mov	r5, sp
 800285e:	f106 0410 	add.w	r4, r6, #16
 8002862:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002864:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002866:	6823      	ldr	r3, [r4, #0]
 8002868:	602b      	str	r3, [r5, #0]
 800286a:	1d33      	adds	r3, r6, #4
 800286c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800286e:	6838      	ldr	r0, [r7, #0]
 8002870:	f002 ff1c 	bl	80056ac <USB_DevInit>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d005      	beq.n	8002886 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2202      	movs	r2, #2
 800287e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e00d      	b.n	80028a2 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f005 f99d 	bl	8007bda <USB_DevDisconnect>

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028aa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d101      	bne.n	80028c0 <HAL_PCD_Start+0x16>
 80028bc:	2302      	movs	r3, #2
 80028be:	e016      	b.n	80028ee <HAL_PCD_Start+0x44>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f002 feb1 	bl	8005634 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80028d2:	2101      	movs	r1, #1
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f007 fa16 	bl	8009d06 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f005 f971 	bl	8007bc6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b088      	sub	sp, #32
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f005 f973 	bl	8007bee <USB_ReadInterrupts>
 8002908:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 fb1b 	bl	8002f50 <PCD_EP_ISR_Handler>

    return;
 800291a:	e119      	b.n	8002b50 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002922:	2b00      	cmp	r3, #0
 8002924:	d013      	beq.n	800294e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800292e:	b29a      	uxth	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002938:	b292      	uxth	r2, r2
 800293a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f006 ffe9 	bl	8009916 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002944:	2100      	movs	r1, #0
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f905 	bl	8002b56 <HAL_PCD_SetAddress>

    return;
 800294c:	e100      	b.n	8002b50 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00c      	beq.n	8002972 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002960:	b29a      	uxth	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800296a:	b292      	uxth	r2, r2
 800296c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002970:	e0ee      	b.n	8002b50 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00c      	beq.n	8002996 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002984:	b29a      	uxth	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800298e:	b292      	uxth	r2, r2
 8002990:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002994:	e0dc      	b.n	8002b50 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d027      	beq.n	80029f0 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0204 	bic.w	r2, r2, #4
 80029b2:	b292      	uxth	r2, r2
 80029b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0208 	bic.w	r2, r2, #8
 80029ca:	b292      	uxth	r2, r2
 80029cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f006 ffd9 	bl	8009988 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029de:	b29a      	uxth	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029e8:	b292      	uxth	r2, r2
 80029ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80029ee:	e0af      	b.n	8002b50 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 8083 	beq.w	8002b02 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80029fc:	2300      	movs	r3, #0
 80029fe:	77fb      	strb	r3, [r7, #31]
 8002a00:	e010      	b.n	8002a24 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	7ffb      	ldrb	r3, [r7, #31]
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	441a      	add	r2, r3
 8002a0e:	7ffb      	ldrb	r3, [r7, #31]
 8002a10:	8812      	ldrh	r2, [r2, #0]
 8002a12:	b292      	uxth	r2, r2
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	3320      	adds	r3, #32
 8002a18:	443b      	add	r3, r7
 8002a1a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002a1e:	7ffb      	ldrb	r3, [r7, #31]
 8002a20:	3301      	adds	r3, #1
 8002a22:	77fb      	strb	r3, [r7, #31]
 8002a24:	7ffb      	ldrb	r3, [r7, #31]
 8002a26:	2b07      	cmp	r3, #7
 8002a28:	d9eb      	bls.n	8002a02 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f042 0201 	orr.w	r2, r2, #1
 8002a3c:	b292      	uxth	r2, r2
 8002a3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0201 	bic.w	r2, r2, #1
 8002a54:	b292      	uxth	r2, r2
 8002a56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002a5a:	bf00      	nop
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0f6      	beq.n	8002a5c <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a80:	b292      	uxth	r2, r2
 8002a82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002a86:	2300      	movs	r3, #0
 8002a88:	77fb      	strb	r3, [r7, #31]
 8002a8a:	e00f      	b.n	8002aac <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002a8c:	7ffb      	ldrb	r3, [r7, #31]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6812      	ldr	r2, [r2, #0]
 8002a92:	4611      	mov	r1, r2
 8002a94:	7ffa      	ldrb	r2, [r7, #31]
 8002a96:	0092      	lsls	r2, r2, #2
 8002a98:	440a      	add	r2, r1
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	3320      	adds	r3, #32
 8002a9e:	443b      	add	r3, r7
 8002aa0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002aa4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002aa6:	7ffb      	ldrb	r3, [r7, #31]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	77fb      	strb	r3, [r7, #31]
 8002aac:	7ffb      	ldrb	r3, [r7, #31]
 8002aae:	2b07      	cmp	r3, #7
 8002ab0:	d9ec      	bls.n	8002a8c <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f042 0208 	orr.w	r2, r2, #8
 8002ac4:	b292      	uxth	r2, r2
 8002ac6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002adc:	b292      	uxth	r2, r2
 8002ade:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f042 0204 	orr.w	r2, r2, #4
 8002af4:	b292      	uxth	r2, r2
 8002af6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f006 ff2a 	bl	8009954 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002b00:	e026      	b.n	8002b50 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00f      	beq.n	8002b2c <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b1e:	b292      	uxth	r2, r2
 8002b20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f006 fee8 	bl	80098fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002b2a:	e011      	b.n	8002b50 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00c      	beq.n	8002b50 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b48:	b292      	uxth	r2, r2
 8002b4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002b4e:	bf00      	nop
  }
}
 8002b50:	3720      	adds	r7, #32
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	460b      	mov	r3, r1
 8002b60:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <HAL_PCD_SetAddress+0x1a>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e013      	b.n	8002b98 <HAL_PCD_SetAddress+0x42>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	78fa      	ldrb	r2, [r7, #3]
 8002b7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	78fa      	ldrb	r2, [r7, #3]
 8002b86:	4611      	mov	r1, r2
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f005 f809 	bl	8007ba0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	4608      	mov	r0, r1
 8002baa:	4611      	mov	r1, r2
 8002bac:	461a      	mov	r2, r3
 8002bae:	4603      	mov	r3, r0
 8002bb0:	70fb      	strb	r3, [r7, #3]
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	803b      	strh	r3, [r7, #0]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	da0e      	bge.n	8002be4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bc6:	78fb      	ldrb	r3, [r7, #3]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	4613      	mov	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	4413      	add	r3, r2
 8002bda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2201      	movs	r2, #1
 8002be0:	705a      	strb	r2, [r3, #1]
 8002be2:	e00e      	b.n	8002c02 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002be4:	78fb      	ldrb	r3, [r7, #3]
 8002be6:	f003 0207 	and.w	r2, r3, #7
 8002bea:	4613      	mov	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c02:	78fb      	ldrb	r3, [r7, #3]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c0e:	883a      	ldrh	r2, [r7, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	78ba      	ldrb	r2, [r7, #2]
 8002c18:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c1a:	78bb      	ldrb	r3, [r7, #2]
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d102      	bne.n	8002c26 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_PCD_EP_Open+0x94>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e00e      	b.n	8002c52 <HAL_PCD_EP_Open+0xb2>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68f9      	ldr	r1, [r7, #12]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f002 fd52 	bl	80056ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002c50:	7afb      	ldrb	r3, [r7, #11]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b084      	sub	sp, #16
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	460b      	mov	r3, r1
 8002c64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	da0e      	bge.n	8002c8c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c6e:	78fb      	ldrb	r3, [r7, #3]
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	1c5a      	adds	r2, r3, #1
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	4413      	add	r3, r2
 8002c82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2201      	movs	r2, #1
 8002c88:	705a      	strb	r2, [r3, #1]
 8002c8a:	e00e      	b.n	8002caa <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c8c:	78fb      	ldrb	r3, [r7, #3]
 8002c8e:	f003 0207 	and.w	r2, r3, #7
 8002c92:	4613      	mov	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002caa:	78fb      	ldrb	r3, [r7, #3]
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_PCD_EP_Close+0x6a>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e00e      	b.n	8002ce2 <HAL_PCD_EP_Close+0x88>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68f9      	ldr	r1, [r7, #12]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f003 f8ca 	bl	8005e6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b086      	sub	sp, #24
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	607a      	str	r2, [r7, #4]
 8002cf4:	603b      	str	r3, [r7, #0]
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cfa:	7afb      	ldrb	r3, [r7, #11]
 8002cfc:	f003 0207 	and.w	r2, r3, #7
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4413      	add	r3, r2
 8002d10:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2200      	movs	r2, #0
 8002d22:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	2200      	movs	r2, #0
 8002d28:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d2a:	7afb      	ldrb	r3, [r7, #11]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6979      	ldr	r1, [r7, #20]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f003 fa81 	bl	8006244 <USB_EPStartXfer>

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	f003 0207 	and.w	r2, r3, #7
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	440b      	add	r3, r1
 8002d6a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002d6e:	681b      	ldr	r3, [r3, #0]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr

08002d7a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b086      	sub	sp, #24
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	60f8      	str	r0, [r7, #12]
 8002d82:	607a      	str	r2, [r7, #4]
 8002d84:	603b      	str	r3, [r7, #0]
 8002d86:	460b      	mov	r3, r1
 8002d88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d8a:	7afb      	ldrb	r3, [r7, #11]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	1c5a      	adds	r2, r3, #1
 8002d92:	4613      	mov	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4413      	add	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dc6:	7afb      	ldrb	r3, [r7, #11]
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6979      	ldr	r1, [r7, #20]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f003 fa33 	bl	8006244 <USB_EPStartXfer>

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002df4:	78fb      	ldrb	r3, [r7, #3]
 8002df6:	f003 0207 	and.w	r2, r3, #7
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d901      	bls.n	8002e06 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e04c      	b.n	8002ea0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	da0e      	bge.n	8002e2c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e0e:	78fb      	ldrb	r3, [r7, #3]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	4613      	mov	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	4413      	add	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2201      	movs	r2, #1
 8002e28:	705a      	strb	r2, [r3, #1]
 8002e2a:	e00c      	b.n	8002e46 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e2c:	78fa      	ldrb	r2, [r7, #3]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e4c:	78fb      	ldrb	r3, [r7, #3]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d101      	bne.n	8002e66 <HAL_PCD_EP_SetStall+0x7e>
 8002e62:	2302      	movs	r3, #2
 8002e64:	e01c      	b.n	8002ea0 <HAL_PCD_EP_SetStall+0xb8>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68f9      	ldr	r1, [r7, #12]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f004 fd96 	bl	80079a6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e7a:	78fb      	ldrb	r3, [r7, #3]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d108      	bne.n	8002e96 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4610      	mov	r0, r2
 8002e92:	f004 febb 	bl	8007c0c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002eb4:	78fb      	ldrb	r3, [r7, #3]
 8002eb6:	f003 020f 	and.w	r2, r3, #15
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d901      	bls.n	8002ec6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e040      	b.n	8002f48 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ec6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	da0e      	bge.n	8002eec <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ece:	78fb      	ldrb	r3, [r7, #3]
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	1c5a      	adds	r2, r3, #1
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	705a      	strb	r2, [r3, #1]
 8002eea:	e00e      	b.n	8002f0a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eec:	78fb      	ldrb	r3, [r7, #3]
 8002eee:	f003 0207 	and.w	r2, r3, #7
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	4413      	add	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f10:	78fb      	ldrb	r3, [r7, #3]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_PCD_EP_ClrStall+0x82>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e00e      	b.n	8002f48 <HAL_PCD_EP_ClrStall+0xa0>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68f9      	ldr	r1, [r7, #12]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f004 fd84 	bl	8007a46 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b096      	sub	sp, #88	; 0x58
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002f58:	e3bf      	b.n	80036da <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f62:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002f66:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	f003 030f 	and.w	r3, r3, #15
 8002f70:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8002f74:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f040 8179 	bne.w	8003270 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002f7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f82:	f003 0310 	and.w	r3, r3, #16
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d152      	bne.n	8003030 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f9a:	81fb      	strh	r3, [r7, #14]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	89fb      	ldrh	r3, [r7, #14]
 8002fa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3328      	adds	r3, #40	; 0x28
 8002fb2:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3302      	adds	r3, #2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fde:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fe2:	695a      	ldr	r2, [r3, #20]
 8002fe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	441a      	add	r2, r3
 8002fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fec:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002fee:	2100      	movs	r1, #0
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f006 fc68 	bl	80098c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 836b 	beq.w	80036da <PCD_EP_ISR_Handler+0x78a>
 8003004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	2b00      	cmp	r3, #0
 800300a:	f040 8366 	bne.w	80036da <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003014:	b2db      	uxtb	r3, r3
 8003016:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800301a:	b2da      	uxtb	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	b292      	uxth	r2, r2
 8003022:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800302e:	e354      	b.n	80036da <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003036:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003042:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003046:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800304a:	2b00      	cmp	r3, #0
 800304c:	d034      	beq.n	80030b8 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003056:	b29b      	uxth	r3, r3
 8003058:	461a      	mov	r2, r3
 800305a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	4413      	add	r3, r2
 8003062:	3306      	adds	r3, #6
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6812      	ldr	r2, [r2, #0]
 800306a:	4413      	add	r3, r2
 800306c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003078:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6818      	ldr	r0, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003086:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003088:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800308a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800308c:	b29b      	uxth	r3, r3
 800308e:	f004 fe0d 	bl	8007cac <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	881b      	ldrh	r3, [r3, #0]
 8003098:	b29a      	uxth	r2, r3
 800309a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800309e:	4013      	ands	r3, r2
 80030a0:	823b      	strh	r3, [r7, #16]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	8a3a      	ldrh	r2, [r7, #16]
 80030a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030ac:	b292      	uxth	r2, r2
 80030ae:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f006 fbdb 	bl	800986c <HAL_PCD_SetupStageCallback>
 80030b6:	e310      	b.n	80036da <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80030b8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f280 830c 	bge.w	80036da <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	f640 738f 	movw	r3, #3983	; 0xf8f
 80030ce:	4013      	ands	r3, r2
 80030d0:	83fb      	strh	r3, [r7, #30]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	8bfa      	ldrh	r2, [r7, #30]
 80030d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030dc:	b292      	uxth	r2, r2
 80030de:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	461a      	mov	r2, r3
 80030ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	4413      	add	r3, r2
 80030f4:	3306      	adds	r3, #6
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6812      	ldr	r2, [r2, #0]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003102:	881b      	ldrh	r3, [r3, #0]
 8003104:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800310a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800310c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d019      	beq.n	8003148 <PCD_EP_ISR_Handler+0x1f8>
 8003114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d015      	beq.n	8003148 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6818      	ldr	r0, [r3, #0]
 8003120:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003122:	6959      	ldr	r1, [r3, #20]
 8003124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003126:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800312a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800312c:	b29b      	uxth	r3, r3
 800312e:	f004 fdbd 	bl	8007cac <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003134:	695a      	ldr	r2, [r3, #20]
 8003136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	441a      	add	r2, r3
 800313c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800313e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003140:	2100      	movs	r1, #0
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f006 fba4 	bl	8009890 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003152:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003156:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800315a:	2b00      	cmp	r3, #0
 800315c:	f040 82bd 	bne.w	80036da <PCD_EP_ISR_Handler+0x78a>
 8003160:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003164:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003168:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800316c:	f000 82b5 	beq.w	80036da <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	61bb      	str	r3, [r7, #24]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800317e:	b29b      	uxth	r3, r3
 8003180:	461a      	mov	r2, r3
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	4413      	add	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800318e:	617b      	str	r3, [r7, #20]
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	b29b      	uxth	r3, r3
 8003196:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800319a:	b29a      	uxth	r2, r3
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	801a      	strh	r2, [r3, #0]
 80031a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	2b3e      	cmp	r3, #62	; 0x3e
 80031a6:	d91d      	bls.n	80031e4 <PCD_EP_ISR_Handler+0x294>
 80031a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	095b      	lsrs	r3, r3, #5
 80031ae:	647b      	str	r3, [r7, #68]	; 0x44
 80031b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d102      	bne.n	80031c2 <PCD_EP_ISR_Handler+0x272>
 80031bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031be:	3b01      	subs	r3, #1
 80031c0:	647b      	str	r3, [r7, #68]	; 0x44
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	029b      	lsls	r3, r3, #10
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	4313      	orrs	r3, r2
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031dc:	b29a      	uxth	r2, r3
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	801a      	strh	r2, [r3, #0]
 80031e2:	e026      	b.n	8003232 <PCD_EP_ISR_Handler+0x2e2>
 80031e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10a      	bne.n	8003202 <PCD_EP_ISR_Handler+0x2b2>
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	801a      	strh	r2, [r3, #0]
 8003200:	e017      	b.n	8003232 <PCD_EP_ISR_Handler+0x2e2>
 8003202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	085b      	lsrs	r3, r3, #1
 8003208:	647b      	str	r3, [r7, #68]	; 0x44
 800320a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <PCD_EP_ISR_Handler+0x2cc>
 8003216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003218:	3301      	adds	r3, #1
 800321a:	647b      	str	r3, [r7, #68]	; 0x44
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	881b      	ldrh	r3, [r3, #0]
 8003220:	b29a      	uxth	r2, r3
 8003222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003224:	b29b      	uxth	r3, r3
 8003226:	029b      	lsls	r3, r3, #10
 8003228:	b29b      	uxth	r3, r3
 800322a:	4313      	orrs	r3, r2
 800322c:	b29a      	uxth	r2, r3
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	b29b      	uxth	r3, r3
 800323a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800323e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003242:	827b      	strh	r3, [r7, #18]
 8003244:	8a7b      	ldrh	r3, [r7, #18]
 8003246:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800324a:	827b      	strh	r3, [r7, #18]
 800324c:	8a7b      	ldrh	r3, [r7, #18]
 800324e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003252:	827b      	strh	r3, [r7, #18]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	8a7b      	ldrh	r3, [r7, #18]
 800325a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800325e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800326a:	b29b      	uxth	r3, r3
 800326c:	8013      	strh	r3, [r2, #0]
 800326e:	e234      	b.n	80036da <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	461a      	mov	r2, r3
 8003276:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003284:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003288:	2b00      	cmp	r3, #0
 800328a:	f280 80fc 	bge.w	8003486 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	b29a      	uxth	r2, r3
 80032a0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80032a4:	4013      	ands	r3, r2
 80032a6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80032bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032c0:	b292      	uxth	r2, r2
 80032c2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80032c4:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80032c8:	4613      	mov	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	4413      	add	r3, r2
 80032d8:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80032da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032dc:	7b1b      	ldrb	r3, [r3, #12]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d125      	bne.n	800332e <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	461a      	mov	r2, r3
 80032ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	4413      	add	r3, r2
 80032f6:	3306      	adds	r3, #6
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6812      	ldr	r2, [r2, #0]
 80032fe:	4413      	add	r3, r2
 8003300:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003304:	881b      	ldrh	r3, [r3, #0]
 8003306:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800330a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800330e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 8092 	beq.w	800343c <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6818      	ldr	r0, [r3, #0]
 800331c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800331e:	6959      	ldr	r1, [r3, #20]
 8003320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003322:	88da      	ldrh	r2, [r3, #6]
 8003324:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003328:	f004 fcc0 	bl	8007cac <USB_ReadPMA>
 800332c:	e086      	b.n	800343c <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800332e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003330:	78db      	ldrb	r3, [r3, #3]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d10a      	bne.n	800334c <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003336:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800333a:	461a      	mov	r2, r3
 800333c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f9d9 	bl	80036f6 <HAL_PCD_EP_DB_Receive>
 8003344:	4603      	mov	r3, r0
 8003346:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800334a:	e077      	b.n	800343c <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	461a      	mov	r2, r3
 8003352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	b29b      	uxth	r3, r3
 800335e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003366:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	461a      	mov	r2, r3
 8003370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	441a      	add	r2, r3
 8003378:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800337c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003388:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800338c:	b29b      	uxth	r3, r3
 800338e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d024      	beq.n	80033f4 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	461a      	mov	r2, r3
 80033b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	4413      	add	r3, r2
 80033be:	3302      	adds	r3, #2
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6812      	ldr	r2, [r2, #0]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033d2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80033d6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d02e      	beq.n	800343c <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6818      	ldr	r0, [r3, #0]
 80033e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033e4:	6959      	ldr	r1, [r3, #20]
 80033e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033e8:	891a      	ldrh	r2, [r3, #8]
 80033ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80033ee:	f004 fc5d 	bl	8007cac <USB_ReadPMA>
 80033f2:	e023      	b.n	800343c <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	461a      	mov	r2, r3
 8003400:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4413      	add	r3, r2
 8003408:	3306      	adds	r3, #6
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6812      	ldr	r2, [r2, #0]
 8003410:	4413      	add	r3, r2
 8003412:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003416:	881b      	ldrh	r3, [r3, #0]
 8003418:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800341c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003420:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003424:	2b00      	cmp	r3, #0
 8003426:	d009      	beq.n	800343c <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800342e:	6959      	ldr	r1, [r3, #20]
 8003430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003432:	895a      	ldrh	r2, [r3, #10]
 8003434:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003438:	f004 fc38 	bl	8007cac <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800343c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800343e:	69da      	ldr	r2, [r3, #28]
 8003440:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003444:	441a      	add	r2, r3
 8003446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003448:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800344a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800344c:	695a      	ldr	r2, [r3, #20]
 800344e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003452:	441a      	add	r2, r3
 8003454:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003456:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003458:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d005      	beq.n	800346c <PCD_EP_ISR_Handler+0x51c>
 8003460:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	429a      	cmp	r2, r3
 800346a:	d206      	bcs.n	800347a <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800346c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	4619      	mov	r1, r3
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f006 fa0c 	bl	8009890 <HAL_PCD_DataOutStageCallback>
 8003478:	e005      	b.n	8003486 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003480:	4618      	mov	r0, r3
 8003482:	f002 fedf 	bl	8006244 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003486:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800348a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 8123 	beq.w	80036da <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8003494:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	4613      	mov	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	4413      	add	r3, r2
 80034a6:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	461a      	mov	r2, r3
 80034ae:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80034be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	461a      	mov	r2, r3
 80034cc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	441a      	add	r2, r3
 80034d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80034d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80034e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034e6:	78db      	ldrb	r3, [r3, #3]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	f040 80a2 	bne.w	8003632 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80034ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034f0:	2200      	movs	r2, #0
 80034f2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80034f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034f6:	7b1b      	ldrb	r3, [r3, #12]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 8093 	beq.w	8003624 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80034fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003506:	2b00      	cmp	r3, #0
 8003508:	d046      	beq.n	8003598 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800350a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800350c:	785b      	ldrb	r3, [r3, #1]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d126      	bne.n	8003560 <PCD_EP_ISR_Handler+0x610>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	627b      	str	r3, [r7, #36]	; 0x24
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003520:	b29b      	uxth	r3, r3
 8003522:	461a      	mov	r2, r3
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	4413      	add	r3, r2
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
 800352a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	011a      	lsls	r2, r3, #4
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	4413      	add	r3, r2
 8003534:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003538:	623b      	str	r3, [r7, #32]
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	b29b      	uxth	r3, r3
 8003540:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003544:	b29a      	uxth	r2, r3
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	801a      	strh	r2, [r3, #0]
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	b29b      	uxth	r3, r3
 8003550:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003554:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003558:	b29a      	uxth	r2, r3
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	801a      	strh	r2, [r3, #0]
 800355e:	e061      	b.n	8003624 <PCD_EP_ISR_Handler+0x6d4>
 8003560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003562:	785b      	ldrb	r3, [r3, #1]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d15d      	bne.n	8003624 <PCD_EP_ISR_Handler+0x6d4>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003576:	b29b      	uxth	r3, r3
 8003578:	461a      	mov	r2, r3
 800357a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357c:	4413      	add	r3, r2
 800357e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	011a      	lsls	r2, r3, #4
 8003586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003588:	4413      	add	r3, r2
 800358a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800358e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003592:	2200      	movs	r2, #0
 8003594:	801a      	strh	r2, [r3, #0]
 8003596:	e045      	b.n	8003624 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800359e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a0:	785b      	ldrb	r3, [r3, #1]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d126      	bne.n	80035f4 <PCD_EP_ISR_Handler+0x6a4>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	637b      	str	r3, [r7, #52]	; 0x34
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	461a      	mov	r2, r3
 80035b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ba:	4413      	add	r3, r2
 80035bc:	637b      	str	r3, [r7, #52]	; 0x34
 80035be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	011a      	lsls	r2, r3, #4
 80035c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c6:	4413      	add	r3, r2
 80035c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80035cc:	633b      	str	r3, [r7, #48]	; 0x30
 80035ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035d8:	b29a      	uxth	r2, r3
 80035da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035dc:	801a      	strh	r2, [r3, #0]
 80035de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f0:	801a      	strh	r2, [r3, #0]
 80035f2:	e017      	b.n	8003624 <PCD_EP_ISR_Handler+0x6d4>
 80035f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035f6:	785b      	ldrb	r3, [r3, #1]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d113      	bne.n	8003624 <PCD_EP_ISR_Handler+0x6d4>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003604:	b29b      	uxth	r3, r3
 8003606:	461a      	mov	r2, r3
 8003608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800360a:	4413      	add	r3, r2
 800360c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800360e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	011a      	lsls	r2, r3, #4
 8003614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003616:	4413      	add	r3, r2
 8003618:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800361c:	63bb      	str	r3, [r7, #56]	; 0x38
 800361e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003620:	2200      	movs	r2, #0
 8003622:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	4619      	mov	r1, r3
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f006 f94b 	bl	80098c6 <HAL_PCD_DataInStageCallback>
 8003630:	e053      	b.n	80036da <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003632:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363a:	2b00      	cmp	r3, #0
 800363c:	d146      	bne.n	80036cc <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003646:	b29b      	uxth	r3, r3
 8003648:	461a      	mov	r2, r3
 800364a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4413      	add	r3, r2
 8003652:	3302      	adds	r3, #2
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6812      	ldr	r2, [r2, #0]
 800365a:	4413      	add	r3, r2
 800365c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003666:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800366a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800366c:	699a      	ldr	r2, [r3, #24]
 800366e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003672:	429a      	cmp	r2, r3
 8003674:	d907      	bls.n	8003686 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8003676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003678:	699a      	ldr	r2, [r3, #24]
 800367a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800367e:	1ad2      	subs	r2, r2, r3
 8003680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003682:	619a      	str	r2, [r3, #24]
 8003684:	e002      	b.n	800368c <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8003686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003688:	2200      	movs	r2, #0
 800368a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800368c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d106      	bne.n	80036a2 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	4619      	mov	r1, r3
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f006 f913 	bl	80098c6 <HAL_PCD_DataInStageCallback>
 80036a0:	e01b      	b.n	80036da <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80036a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036a4:	695a      	ldr	r2, [r3, #20]
 80036a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80036aa:	441a      	add	r2, r3
 80036ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ae:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80036b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036b2:	69da      	ldr	r2, [r3, #28]
 80036b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80036b8:	441a      	add	r2, r3
 80036ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036bc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036c4:	4618      	mov	r0, r3
 80036c6:	f002 fdbd 	bl	8006244 <USB_EPStartXfer>
 80036ca:	e006      	b.n	80036da <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80036cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80036d0:	461a      	mov	r2, r3
 80036d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f91b 	bl	8003910 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	b21b      	sxth	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f6ff ac37 	blt.w	8002f5a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3758      	adds	r7, #88	; 0x58
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b088      	sub	sp, #32
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	4613      	mov	r3, r2
 8003702:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003704:	88fb      	ldrh	r3, [r7, #6]
 8003706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d07e      	beq.n	800380c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003716:	b29b      	uxth	r3, r3
 8003718:	461a      	mov	r2, r3
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	4413      	add	r3, r2
 8003722:	3302      	adds	r3, #2
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	6812      	ldr	r2, [r2, #0]
 800372a:	4413      	add	r3, r2
 800372c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003736:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	699a      	ldr	r2, [r3, #24]
 800373c:	8b7b      	ldrh	r3, [r7, #26]
 800373e:	429a      	cmp	r2, r3
 8003740:	d306      	bcc.n	8003750 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	699a      	ldr	r2, [r3, #24]
 8003746:	8b7b      	ldrh	r3, [r7, #26]
 8003748:	1ad2      	subs	r2, r2, r3
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	619a      	str	r2, [r3, #24]
 800374e:	e002      	b.n	8003756 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2200      	movs	r2, #0
 8003754:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d123      	bne.n	80037a6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	461a      	mov	r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	b29b      	uxth	r3, r3
 8003770:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003778:	833b      	strh	r3, [r7, #24]
 800377a:	8b3b      	ldrh	r3, [r7, #24]
 800377c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003780:	833b      	strh	r3, [r7, #24]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	441a      	add	r2, r3
 8003790:	8b3b      	ldrh	r3, [r7, #24]
 8003792:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003796:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800379a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800379e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80037a6:	88fb      	ldrh	r3, [r7, #6]
 80037a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d01f      	beq.n	80037f0 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	461a      	mov	r2, r3
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ca:	82fb      	strh	r3, [r7, #22]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	461a      	mov	r2, r3
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	441a      	add	r2, r3
 80037da:	8afb      	ldrh	r3, [r7, #22]
 80037dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80037f0:	8b7b      	ldrh	r3, [r7, #26]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 8087 	beq.w	8003906 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6818      	ldr	r0, [r3, #0]
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	6959      	ldr	r1, [r3, #20]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	891a      	ldrh	r2, [r3, #8]
 8003804:	8b7b      	ldrh	r3, [r7, #26]
 8003806:	f004 fa51 	bl	8007cac <USB_ReadPMA>
 800380a:	e07c      	b.n	8003906 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003814:	b29b      	uxth	r3, r3
 8003816:	461a      	mov	r2, r3
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	4413      	add	r3, r2
 8003820:	3306      	adds	r3, #6
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	4413      	add	r3, r2
 800382a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800382e:	881b      	ldrh	r3, [r3, #0]
 8003830:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003834:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	699a      	ldr	r2, [r3, #24]
 800383a:	8b7b      	ldrh	r3, [r7, #26]
 800383c:	429a      	cmp	r2, r3
 800383e:	d306      	bcc.n	800384e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	699a      	ldr	r2, [r3, #24]
 8003844:	8b7b      	ldrh	r3, [r7, #26]
 8003846:	1ad2      	subs	r2, r2, r3
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	619a      	str	r2, [r3, #24]
 800384c:	e002      	b.n	8003854 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2200      	movs	r2, #0
 8003852:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d123      	bne.n	80038a4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	461a      	mov	r2, r3
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	b29b      	uxth	r3, r3
 800386e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003876:	83fb      	strh	r3, [r7, #30]
 8003878:	8bfb      	ldrh	r3, [r7, #30]
 800387a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800387e:	83fb      	strh	r3, [r7, #30]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	461a      	mov	r2, r3
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	441a      	add	r2, r3
 800388e:	8bfb      	ldrh	r3, [r7, #30]
 8003890:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003894:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003898:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800389c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80038a4:	88fb      	ldrh	r3, [r7, #6]
 80038a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d11f      	bne.n	80038ee <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	b29b      	uxth	r3, r3
 80038c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c8:	83bb      	strh	r3, [r7, #28]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	461a      	mov	r2, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	441a      	add	r2, r3
 80038d8:	8bbb      	ldrh	r3, [r7, #28]
 80038da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80038ee:	8b7b      	ldrh	r3, [r7, #26]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d008      	beq.n	8003906 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6818      	ldr	r0, [r3, #0]
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	6959      	ldr	r1, [r3, #20]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	895a      	ldrh	r2, [r3, #10]
 8003900:	8b7b      	ldrh	r3, [r7, #26]
 8003902:	f004 f9d3 	bl	8007cac <USB_ReadPMA>
    }
  }

  return count;
 8003906:	8b7b      	ldrh	r3, [r7, #26]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3720      	adds	r7, #32
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b0a4      	sub	sp, #144	; 0x90
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	4613      	mov	r3, r2
 800391c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800391e:	88fb      	ldrh	r3, [r7, #6]
 8003920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 81dd 	beq.w	8003ce4 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003932:	b29b      	uxth	r3, r3
 8003934:	461a      	mov	r2, r3
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	4413      	add	r3, r2
 800393e:	3302      	adds	r3, #2
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	6812      	ldr	r2, [r2, #0]
 8003946:	4413      	add	r3, r2
 8003948:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800394c:	881b      	ldrh	r3, [r3, #0]
 800394e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003952:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	699a      	ldr	r2, [r3, #24]
 800395a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800395e:	429a      	cmp	r2, r3
 8003960:	d907      	bls.n	8003972 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	699a      	ldr	r2, [r3, #24]
 8003966:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800396a:	1ad2      	subs	r2, r2, r3
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	619a      	str	r2, [r3, #24]
 8003970:	e002      	b.n	8003978 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2200      	movs	r2, #0
 8003976:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	2b00      	cmp	r3, #0
 800397e:	f040 80b9 	bne.w	8003af4 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	785b      	ldrb	r3, [r3, #1]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d126      	bne.n	80039d8 <HAL_PCD_EP_DB_Transmit+0xc8>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003998:	b29b      	uxth	r3, r3
 800399a:	461a      	mov	r2, r3
 800399c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399e:	4413      	add	r3, r2
 80039a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	011a      	lsls	r2, r3, #4
 80039a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039aa:	4413      	add	r3, r2
 80039ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80039b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039bc:	b29a      	uxth	r2, r3
 80039be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c0:	801a      	strh	r2, [r3, #0]
 80039c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d4:	801a      	strh	r2, [r3, #0]
 80039d6:	e01a      	b.n	8003a0e <HAL_PCD_EP_DB_Transmit+0xfe>
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	785b      	ldrb	r3, [r3, #1]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d116      	bne.n	8003a0e <HAL_PCD_EP_DB_Transmit+0xfe>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	637b      	str	r3, [r7, #52]	; 0x34
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	461a      	mov	r2, r3
 80039f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f4:	4413      	add	r3, r2
 80039f6:	637b      	str	r3, [r7, #52]	; 0x34
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	011a      	lsls	r2, r3, #4
 80039fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a00:	4413      	add	r3, r2
 8003a02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a06:	633b      	str	r3, [r7, #48]	; 0x30
 8003a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	627b      	str	r3, [r7, #36]	; 0x24
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	785b      	ldrb	r3, [r3, #1]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d126      	bne.n	8003a6a <HAL_PCD_EP_DB_Transmit+0x15a>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	61fb      	str	r3, [r7, #28]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	4413      	add	r3, r2
 8003a32:	61fb      	str	r3, [r7, #28]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	011a      	lsls	r2, r3, #4
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a42:	61bb      	str	r3, [r7, #24]
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	881b      	ldrh	r3, [r3, #0]
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	801a      	strh	r2, [r3, #0]
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	801a      	strh	r2, [r3, #0]
 8003a68:	e017      	b.n	8003a9a <HAL_PCD_EP_DB_Transmit+0x18a>
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	785b      	ldrb	r3, [r3, #1]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d113      	bne.n	8003a9a <HAL_PCD_EP_DB_Transmit+0x18a>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	4413      	add	r3, r2
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	011a      	lsls	r2, r3, #4
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a92:	623b      	str	r3, [r7, #32]
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	2200      	movs	r2, #0
 8003a98:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f005 ff10 	bl	80098c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003aa6:	88fb      	ldrh	r3, [r7, #6]
 8003aa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 82fc 	beq.w	80040aa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003acc:	82fb      	strh	r3, [r7, #22]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	441a      	add	r2, r3
 8003adc:	8afb      	ldrh	r3, [r7, #22]
 8003ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ae6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	8013      	strh	r3, [r2, #0]
 8003af2:	e2da      	b.n	80040aa <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003af4:	88fb      	ldrh	r3, [r7, #6]
 8003af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d021      	beq.n	8003b42 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	881b      	ldrh	r3, [r3, #0]
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b18:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	461a      	mov	r2, r3
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	441a      	add	r2, r3
 8003b2a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	f040 82ae 	bne.w	80040aa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	695a      	ldr	r2, [r3, #20]
 8003b52:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003b56:	441a      	add	r2, r3
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	69da      	ldr	r2, [r3, #28]
 8003b60:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003b64:	441a      	add	r2, r3
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	6a1a      	ldr	r2, [r3, #32]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d30b      	bcc.n	8003b8e <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	6a1a      	ldr	r2, [r3, #32]
 8003b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b86:	1ad2      	subs	r2, r2, r3
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	621a      	str	r2, [r3, #32]
 8003b8c:	e017      	b.n	8003bbe <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d108      	bne.n	8003ba8 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003b96:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003b9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003ba6:	e00a      	b.n	8003bbe <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	785b      	ldrb	r3, [r3, #1]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d165      	bne.n	8003c92 <HAL_PCD_EP_DB_Transmit+0x382>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bda:	4413      	add	r3, r2
 8003bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	011a      	lsls	r2, r3, #4
 8003be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003be6:	4413      	add	r3, r2
 8003be8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bec:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfc:	801a      	strh	r2, [r3, #0]
 8003bfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c02:	2b3e      	cmp	r3, #62	; 0x3e
 8003c04:	d91d      	bls.n	8003c42 <HAL_PCD_EP_DB_Transmit+0x332>
 8003c06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c0a:	095b      	lsrs	r3, r3, #5
 8003c0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c12:	f003 031f 	and.w	r3, r3, #31
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d102      	bne.n	8003c20 <HAL_PCD_EP_DB_Transmit+0x310>
 8003c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	029b      	lsls	r3, r3, #10
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c3e:	801a      	strh	r2, [r3, #0]
 8003c40:	e044      	b.n	8003ccc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10a      	bne.n	8003c60 <HAL_PCD_EP_DB_Transmit+0x350>
 8003c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4c:	881b      	ldrh	r3, [r3, #0]
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5c:	801a      	strh	r2, [r3, #0]
 8003c5e:	e035      	b.n	8003ccc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003c60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c64:	085b      	lsrs	r3, r3, #1
 8003c66:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d002      	beq.n	8003c7a <HAL_PCD_EP_DB_Transmit+0x36a>
 8003c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c76:	3301      	adds	r3, #1
 8003c78:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	029b      	lsls	r3, r3, #10
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8e:	801a      	strh	r2, [r3, #0]
 8003c90:	e01c      	b.n	8003ccc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	785b      	ldrb	r3, [r3, #1]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d118      	bne.n	8003ccc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	647b      	str	r3, [r7, #68]	; 0x44
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	461a      	mov	r2, r3
 8003cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cae:	4413      	add	r3, r2
 8003cb0:	647b      	str	r3, [r7, #68]	; 0x44
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	011a      	lsls	r2, r3, #4
 8003cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cba:	4413      	add	r3, r2
 8003cbc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003cc0:	643b      	str	r3, [r7, #64]	; 0x40
 8003cc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cca:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6818      	ldr	r0, [r3, #0]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	6959      	ldr	r1, [r3, #20]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	891a      	ldrh	r2, [r3, #8]
 8003cd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	f003 ffa0 	bl	8007c22 <USB_WritePMA>
 8003ce2:	e1e2      	b.n	80040aa <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	461a      	mov	r2, r3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	4413      	add	r3, r2
 8003cf8:	3306      	adds	r3, #6
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	6812      	ldr	r2, [r2, #0]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d0c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	699a      	ldr	r2, [r3, #24]
 8003d14:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d307      	bcc.n	8003d2c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	699a      	ldr	r2, [r3, #24]
 8003d20:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003d24:	1ad2      	subs	r2, r2, r3
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	619a      	str	r2, [r3, #24]
 8003d2a:	e002      	b.n	8003d32 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f040 80c0 	bne.w	8003ebc <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	785b      	ldrb	r3, [r3, #1]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d126      	bne.n	8003d92 <HAL_PCD_EP_DB_Transmit+0x482>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	461a      	mov	r2, r3
 8003d56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d58:	4413      	add	r3, r2
 8003d5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	011a      	lsls	r2, r3, #4
 8003d62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d64:	4413      	add	r3, r2
 8003d66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d7a:	801a      	strh	r2, [r3, #0]
 8003d7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d8e:	801a      	strh	r2, [r3, #0]
 8003d90:	e01a      	b.n	8003dc8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	785b      	ldrb	r3, [r3, #1]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d116      	bne.n	8003dc8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	667b      	str	r3, [r7, #100]	; 0x64
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	461a      	mov	r2, r3
 8003dac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dae:	4413      	add	r3, r2
 8003db0:	667b      	str	r3, [r7, #100]	; 0x64
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	011a      	lsls	r2, r3, #4
 8003db8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dba:	4413      	add	r3, r2
 8003dbc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003dc0:	663b      	str	r3, [r7, #96]	; 0x60
 8003dc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	677b      	str	r3, [r7, #116]	; 0x74
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	785b      	ldrb	r3, [r3, #1]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d12b      	bne.n	8003e2e <HAL_PCD_EP_DB_Transmit+0x51e>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	461a      	mov	r2, r3
 8003de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dea:	4413      	add	r3, r2
 8003dec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	011a      	lsls	r2, r3, #4
 8003df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df6:	4413      	add	r3, r2
 8003df8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003dfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e04:	881b      	ldrh	r3, [r3, #0]
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e12:	801a      	strh	r2, [r3, #0]
 8003e14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e2a:	801a      	strh	r2, [r3, #0]
 8003e2c:	e017      	b.n	8003e5e <HAL_PCD_EP_DB_Transmit+0x54e>
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	785b      	ldrb	r3, [r3, #1]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d113      	bne.n	8003e5e <HAL_PCD_EP_DB_Transmit+0x54e>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	461a      	mov	r2, r3
 8003e42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e44:	4413      	add	r3, r2
 8003e46:	677b      	str	r3, [r7, #116]	; 0x74
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	011a      	lsls	r2, r3, #4
 8003e4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e50:	4413      	add	r3, r2
 8003e52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e56:	673b      	str	r3, [r7, #112]	; 0x70
 8003e58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	4619      	mov	r1, r3
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f005 fd2e 	bl	80098c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003e6a:	88fb      	ldrh	r3, [r7, #6]
 8003e6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f040 811a 	bne.w	80040aa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e90:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	441a      	add	r2, r3
 8003ea2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003ea6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	8013      	strh	r3, [r2, #0]
 8003eba:	e0f6      	b.n	80040aa <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003ebc:	88fb      	ldrh	r3, [r7, #6]
 8003ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d121      	bne.n	8003f0a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	441a      	add	r2, r3
 8003ef2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003efa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003efe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	f040 80ca 	bne.w	80040aa <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	695a      	ldr	r2, [r3, #20]
 8003f1a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003f1e:	441a      	add	r2, r3
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	69da      	ldr	r2, [r3, #28]
 8003f28:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003f2c:	441a      	add	r2, r3
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	6a1a      	ldr	r2, [r3, #32]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d30b      	bcc.n	8003f56 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	6a1a      	ldr	r2, [r3, #32]
 8003f4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f4e:	1ad2      	subs	r2, r2, r3
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	621a      	str	r2, [r3, #32]
 8003f54:	e017      	b.n	8003f86 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d108      	bne.n	8003f70 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003f5e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003f62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003f6e:	e00a      	b.n	8003f86 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	657b      	str	r3, [r7, #84]	; 0x54
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	785b      	ldrb	r3, [r3, #1]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d165      	bne.n	8004060 <HAL_PCD_EP_DB_Transmit+0x750>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fa8:	4413      	add	r3, r2
 8003faa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	011a      	lsls	r2, r3, #4
 8003fb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fba:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fca:	801a      	strh	r2, [r3, #0]
 8003fcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fd0:	2b3e      	cmp	r3, #62	; 0x3e
 8003fd2:	d91d      	bls.n	8004010 <HAL_PCD_EP_DB_Transmit+0x700>
 8003fd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fd8:	095b      	lsrs	r3, r3, #5
 8003fda:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fe0:	f003 031f 	and.w	r3, r3, #31
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d102      	bne.n	8003fee <HAL_PCD_EP_DB_Transmit+0x6de>
 8003fe8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fea:	3b01      	subs	r3, #1
 8003fec:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ff0:	881b      	ldrh	r3, [r3, #0]
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	029b      	lsls	r3, r3, #10
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004008:	b29a      	uxth	r2, r3
 800400a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800400c:	801a      	strh	r2, [r3, #0]
 800400e:	e041      	b.n	8004094 <HAL_PCD_EP_DB_Transmit+0x784>
 8004010:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10a      	bne.n	800402e <HAL_PCD_EP_DB_Transmit+0x71e>
 8004018:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800401a:	881b      	ldrh	r3, [r3, #0]
 800401c:	b29b      	uxth	r3, r3
 800401e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004022:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004026:	b29a      	uxth	r2, r3
 8004028:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800402a:	801a      	strh	r2, [r3, #0]
 800402c:	e032      	b.n	8004094 <HAL_PCD_EP_DB_Transmit+0x784>
 800402e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004032:	085b      	lsrs	r3, r3, #1
 8004034:	66bb      	str	r3, [r7, #104]	; 0x68
 8004036:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <HAL_PCD_EP_DB_Transmit+0x738>
 8004042:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004044:	3301      	adds	r3, #1
 8004046:	66bb      	str	r3, [r7, #104]	; 0x68
 8004048:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	b29a      	uxth	r2, r3
 800404e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004050:	b29b      	uxth	r3, r3
 8004052:	029b      	lsls	r3, r3, #10
 8004054:	b29b      	uxth	r3, r3
 8004056:	4313      	orrs	r3, r2
 8004058:	b29a      	uxth	r2, r3
 800405a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800405c:	801a      	strh	r2, [r3, #0]
 800405e:	e019      	b.n	8004094 <HAL_PCD_EP_DB_Transmit+0x784>
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	785b      	ldrb	r3, [r3, #1]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d115      	bne.n	8004094 <HAL_PCD_EP_DB_Transmit+0x784>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004070:	b29b      	uxth	r3, r3
 8004072:	461a      	mov	r2, r3
 8004074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004076:	4413      	add	r3, r2
 8004078:	657b      	str	r3, [r7, #84]	; 0x54
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	011a      	lsls	r2, r3, #4
 8004080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004082:	4413      	add	r3, r2
 8004084:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004088:	653b      	str	r3, [r7, #80]	; 0x50
 800408a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800408e:	b29a      	uxth	r2, r3
 8004090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004092:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6818      	ldr	r0, [r3, #0]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	6959      	ldr	r1, [r3, #20]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	895a      	ldrh	r2, [r3, #10]
 80040a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	f003 fdbc 	bl	8007c22 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	461a      	mov	r2, r3
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040c4:	82bb      	strh	r3, [r7, #20]
 80040c6:	8abb      	ldrh	r3, [r7, #20]
 80040c8:	f083 0310 	eor.w	r3, r3, #16
 80040cc:	82bb      	strh	r3, [r7, #20]
 80040ce:	8abb      	ldrh	r3, [r7, #20]
 80040d0:	f083 0320 	eor.w	r3, r3, #32
 80040d4:	82bb      	strh	r3, [r7, #20]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	461a      	mov	r2, r3
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	441a      	add	r2, r3
 80040e4:	8abb      	ldrh	r3, [r7, #20]
 80040e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3790      	adds	r7, #144	; 0x90
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	607b      	str	r3, [r7, #4]
 800410e:	460b      	mov	r3, r1
 8004110:	817b      	strh	r3, [r7, #10]
 8004112:	4613      	mov	r3, r2
 8004114:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004116:	897b      	ldrh	r3, [r7, #10]
 8004118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00b      	beq.n	800413a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004122:	897b      	ldrh	r3, [r7, #10]
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	4613      	mov	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4413      	add	r3, r2
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	e009      	b.n	800414e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800413a:	897a      	ldrh	r2, [r7, #10]
 800413c:	4613      	mov	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	4413      	add	r3, r2
 800414c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800414e:	893b      	ldrh	r3, [r7, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d107      	bne.n	8004164 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	2200      	movs	r2, #0
 8004158:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	b29a      	uxth	r2, r3
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	80da      	strh	r2, [r3, #6]
 8004162:	e00b      	b.n	800417c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2201      	movs	r2, #1
 8004168:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	b29a      	uxth	r2, r3
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	0c1b      	lsrs	r3, r3, #16
 8004176:	b29a      	uxth	r2, r3
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	371c      	adds	r7, #28
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr

08004188 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e272      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 8087 	beq.w	80042b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041a8:	4b92      	ldr	r3, [pc, #584]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f003 030c 	and.w	r3, r3, #12
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d00c      	beq.n	80041ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041b4:	4b8f      	ldr	r3, [pc, #572]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f003 030c 	and.w	r3, r3, #12
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d112      	bne.n	80041e6 <HAL_RCC_OscConfig+0x5e>
 80041c0:	4b8c      	ldr	r3, [pc, #560]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041cc:	d10b      	bne.n	80041e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ce:	4b89      	ldr	r3, [pc, #548]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d06c      	beq.n	80042b4 <HAL_RCC_OscConfig+0x12c>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d168      	bne.n	80042b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e24c      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ee:	d106      	bne.n	80041fe <HAL_RCC_OscConfig+0x76>
 80041f0:	4b80      	ldr	r3, [pc, #512]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a7f      	ldr	r2, [pc, #508]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 80041f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041fa:	6013      	str	r3, [r2, #0]
 80041fc:	e02e      	b.n	800425c <HAL_RCC_OscConfig+0xd4>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10c      	bne.n	8004220 <HAL_RCC_OscConfig+0x98>
 8004206:	4b7b      	ldr	r3, [pc, #492]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a7a      	ldr	r2, [pc, #488]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 800420c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	4b78      	ldr	r3, [pc, #480]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a77      	ldr	r2, [pc, #476]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 8004218:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	e01d      	b.n	800425c <HAL_RCC_OscConfig+0xd4>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004228:	d10c      	bne.n	8004244 <HAL_RCC_OscConfig+0xbc>
 800422a:	4b72      	ldr	r3, [pc, #456]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a71      	ldr	r2, [pc, #452]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 8004230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	4b6f      	ldr	r3, [pc, #444]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a6e      	ldr	r2, [pc, #440]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 800423c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	e00b      	b.n	800425c <HAL_RCC_OscConfig+0xd4>
 8004244:	4b6b      	ldr	r3, [pc, #428]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a6a      	ldr	r2, [pc, #424]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 800424a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800424e:	6013      	str	r3, [r2, #0]
 8004250:	4b68      	ldr	r3, [pc, #416]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a67      	ldr	r2, [pc, #412]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 8004256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800425a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d013      	beq.n	800428c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004264:	f7fd fe06 	bl	8001e74 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800426c:	f7fd fe02 	bl	8001e74 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b64      	cmp	r3, #100	; 0x64
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e200      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427e:	4b5d      	ldr	r3, [pc, #372]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0f0      	beq.n	800426c <HAL_RCC_OscConfig+0xe4>
 800428a:	e014      	b.n	80042b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800428c:	f7fd fdf2 	bl	8001e74 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004294:	f7fd fdee 	bl	8001e74 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b64      	cmp	r3, #100	; 0x64
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e1ec      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042a6:	4b53      	ldr	r3, [pc, #332]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f0      	bne.n	8004294 <HAL_RCC_OscConfig+0x10c>
 80042b2:	e000      	b.n	80042b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d063      	beq.n	800438a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042c2:	4b4c      	ldr	r3, [pc, #304]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f003 030c 	and.w	r3, r3, #12
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00b      	beq.n	80042e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80042ce:	4b49      	ldr	r3, [pc, #292]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f003 030c 	and.w	r3, r3, #12
 80042d6:	2b08      	cmp	r3, #8
 80042d8:	d11c      	bne.n	8004314 <HAL_RCC_OscConfig+0x18c>
 80042da:	4b46      	ldr	r3, [pc, #280]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d116      	bne.n	8004314 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042e6:	4b43      	ldr	r3, [pc, #268]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d005      	beq.n	80042fe <HAL_RCC_OscConfig+0x176>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d001      	beq.n	80042fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e1c0      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042fe:	4b3d      	ldr	r3, [pc, #244]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	4939      	ldr	r1, [pc, #228]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 800430e:	4313      	orrs	r3, r2
 8004310:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004312:	e03a      	b.n	800438a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d020      	beq.n	800435e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800431c:	4b36      	ldr	r3, [pc, #216]	; (80043f8 <HAL_RCC_OscConfig+0x270>)
 800431e:	2201      	movs	r2, #1
 8004320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004322:	f7fd fda7 	bl	8001e74 <HAL_GetTick>
 8004326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004328:	e008      	b.n	800433c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800432a:	f7fd fda3 	bl	8001e74 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b02      	cmp	r3, #2
 8004336:	d901      	bls.n	800433c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e1a1      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800433c:	4b2d      	ldr	r3, [pc, #180]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0f0      	beq.n	800432a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004348:	4b2a      	ldr	r3, [pc, #168]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	4927      	ldr	r1, [pc, #156]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 8004358:	4313      	orrs	r3, r2
 800435a:	600b      	str	r3, [r1, #0]
 800435c:	e015      	b.n	800438a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800435e:	4b26      	ldr	r3, [pc, #152]	; (80043f8 <HAL_RCC_OscConfig+0x270>)
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004364:	f7fd fd86 	bl	8001e74 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800436c:	f7fd fd82 	bl	8001e74 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e180      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800437e:	4b1d      	ldr	r3, [pc, #116]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1f0      	bne.n	800436c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b00      	cmp	r3, #0
 8004394:	d03a      	beq.n	800440c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d019      	beq.n	80043d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800439e:	4b17      	ldr	r3, [pc, #92]	; (80043fc <HAL_RCC_OscConfig+0x274>)
 80043a0:	2201      	movs	r2, #1
 80043a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043a4:	f7fd fd66 	bl	8001e74 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043ac:	f7fd fd62 	bl	8001e74 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e160      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043be:	4b0d      	ldr	r3, [pc, #52]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0f0      	beq.n	80043ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80043ca:	2001      	movs	r0, #1
 80043cc:	f000 faba 	bl	8004944 <RCC_Delay>
 80043d0:	e01c      	b.n	800440c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043d2:	4b0a      	ldr	r3, [pc, #40]	; (80043fc <HAL_RCC_OscConfig+0x274>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043d8:	f7fd fd4c 	bl	8001e74 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043de:	e00f      	b.n	8004400 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043e0:	f7fd fd48 	bl	8001e74 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d908      	bls.n	8004400 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e146      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>
 80043f2:	bf00      	nop
 80043f4:	40021000 	.word	0x40021000
 80043f8:	42420000 	.word	0x42420000
 80043fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004400:	4b92      	ldr	r3, [pc, #584]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1e9      	bne.n	80043e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 80a6 	beq.w	8004566 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800441a:	2300      	movs	r3, #0
 800441c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800441e:	4b8b      	ldr	r3, [pc, #556]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10d      	bne.n	8004446 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800442a:	4b88      	ldr	r3, [pc, #544]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	4a87      	ldr	r2, [pc, #540]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 8004430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004434:	61d3      	str	r3, [r2, #28]
 8004436:	4b85      	ldr	r3, [pc, #532]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443e:	60bb      	str	r3, [r7, #8]
 8004440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004442:	2301      	movs	r3, #1
 8004444:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004446:	4b82      	ldr	r3, [pc, #520]	; (8004650 <HAL_RCC_OscConfig+0x4c8>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444e:	2b00      	cmp	r3, #0
 8004450:	d118      	bne.n	8004484 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004452:	4b7f      	ldr	r3, [pc, #508]	; (8004650 <HAL_RCC_OscConfig+0x4c8>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a7e      	ldr	r2, [pc, #504]	; (8004650 <HAL_RCC_OscConfig+0x4c8>)
 8004458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800445c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800445e:	f7fd fd09 	bl	8001e74 <HAL_GetTick>
 8004462:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004466:	f7fd fd05 	bl	8001e74 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b64      	cmp	r3, #100	; 0x64
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e103      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004478:	4b75      	ldr	r3, [pc, #468]	; (8004650 <HAL_RCC_OscConfig+0x4c8>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0f0      	beq.n	8004466 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d106      	bne.n	800449a <HAL_RCC_OscConfig+0x312>
 800448c:	4b6f      	ldr	r3, [pc, #444]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	4a6e      	ldr	r2, [pc, #440]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 8004492:	f043 0301 	orr.w	r3, r3, #1
 8004496:	6213      	str	r3, [r2, #32]
 8004498:	e02d      	b.n	80044f6 <HAL_RCC_OscConfig+0x36e>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10c      	bne.n	80044bc <HAL_RCC_OscConfig+0x334>
 80044a2:	4b6a      	ldr	r3, [pc, #424]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	4a69      	ldr	r2, [pc, #420]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80044a8:	f023 0301 	bic.w	r3, r3, #1
 80044ac:	6213      	str	r3, [r2, #32]
 80044ae:	4b67      	ldr	r3, [pc, #412]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	4a66      	ldr	r2, [pc, #408]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80044b4:	f023 0304 	bic.w	r3, r3, #4
 80044b8:	6213      	str	r3, [r2, #32]
 80044ba:	e01c      	b.n	80044f6 <HAL_RCC_OscConfig+0x36e>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	2b05      	cmp	r3, #5
 80044c2:	d10c      	bne.n	80044de <HAL_RCC_OscConfig+0x356>
 80044c4:	4b61      	ldr	r3, [pc, #388]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	4a60      	ldr	r2, [pc, #384]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80044ca:	f043 0304 	orr.w	r3, r3, #4
 80044ce:	6213      	str	r3, [r2, #32]
 80044d0:	4b5e      	ldr	r3, [pc, #376]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	4a5d      	ldr	r2, [pc, #372]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80044d6:	f043 0301 	orr.w	r3, r3, #1
 80044da:	6213      	str	r3, [r2, #32]
 80044dc:	e00b      	b.n	80044f6 <HAL_RCC_OscConfig+0x36e>
 80044de:	4b5b      	ldr	r3, [pc, #364]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	4a5a      	ldr	r2, [pc, #360]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80044e4:	f023 0301 	bic.w	r3, r3, #1
 80044e8:	6213      	str	r3, [r2, #32]
 80044ea:	4b58      	ldr	r3, [pc, #352]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	4a57      	ldr	r2, [pc, #348]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80044f0:	f023 0304 	bic.w	r3, r3, #4
 80044f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d015      	beq.n	800452a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044fe:	f7fd fcb9 	bl	8001e74 <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004504:	e00a      	b.n	800451c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004506:	f7fd fcb5 	bl	8001e74 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	f241 3288 	movw	r2, #5000	; 0x1388
 8004514:	4293      	cmp	r3, r2
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e0b1      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451c:	4b4b      	ldr	r3, [pc, #300]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0ee      	beq.n	8004506 <HAL_RCC_OscConfig+0x37e>
 8004528:	e014      	b.n	8004554 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800452a:	f7fd fca3 	bl	8001e74 <HAL_GetTick>
 800452e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004530:	e00a      	b.n	8004548 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004532:	f7fd fc9f 	bl	8001e74 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004540:	4293      	cmp	r3, r2
 8004542:	d901      	bls.n	8004548 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e09b      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004548:	4b40      	ldr	r3, [pc, #256]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1ee      	bne.n	8004532 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004554:	7dfb      	ldrb	r3, [r7, #23]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d105      	bne.n	8004566 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800455a:	4b3c      	ldr	r3, [pc, #240]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	4a3b      	ldr	r2, [pc, #236]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 8004560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004564:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 8087 	beq.w	800467e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004570:	4b36      	ldr	r3, [pc, #216]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f003 030c 	and.w	r3, r3, #12
 8004578:	2b08      	cmp	r3, #8
 800457a:	d061      	beq.n	8004640 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	2b02      	cmp	r3, #2
 8004582:	d146      	bne.n	8004612 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004584:	4b33      	ldr	r3, [pc, #204]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 8004586:	2200      	movs	r2, #0
 8004588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458a:	f7fd fc73 	bl	8001e74 <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004590:	e008      	b.n	80045a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004592:	f7fd fc6f 	bl	8001e74 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d901      	bls.n	80045a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e06d      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045a4:	4b29      	ldr	r3, [pc, #164]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1f0      	bne.n	8004592 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b8:	d108      	bne.n	80045cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045ba:	4b24      	ldr	r3, [pc, #144]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	4921      	ldr	r1, [pc, #132]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045cc:	4b1f      	ldr	r3, [pc, #124]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a19      	ldr	r1, [r3, #32]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	430b      	orrs	r3, r1
 80045de:	491b      	ldr	r1, [pc, #108]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045e4:	4b1b      	ldr	r3, [pc, #108]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 80045e6:	2201      	movs	r2, #1
 80045e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ea:	f7fd fc43 	bl	8001e74 <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f2:	f7fd fc3f 	bl	8001e74 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e03d      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004604:	4b11      	ldr	r3, [pc, #68]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0f0      	beq.n	80045f2 <HAL_RCC_OscConfig+0x46a>
 8004610:	e035      	b.n	800467e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004612:	4b10      	ldr	r3, [pc, #64]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004618:	f7fd fc2c 	bl	8001e74 <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004620:	f7fd fc28 	bl	8001e74 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e026      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004632:	4b06      	ldr	r3, [pc, #24]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1f0      	bne.n	8004620 <HAL_RCC_OscConfig+0x498>
 800463e:	e01e      	b.n	800467e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d107      	bne.n	8004658 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e019      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>
 800464c:	40021000 	.word	0x40021000
 8004650:	40007000 	.word	0x40007000
 8004654:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004658:	4b0b      	ldr	r3, [pc, #44]	; (8004688 <HAL_RCC_OscConfig+0x500>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	429a      	cmp	r2, r3
 800466a:	d106      	bne.n	800467a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004676:	429a      	cmp	r2, r3
 8004678:	d001      	beq.n	800467e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40021000 	.word	0x40021000

0800468c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e0d0      	b.n	8004842 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046a0:	4b6a      	ldr	r3, [pc, #424]	; (800484c <HAL_RCC_ClockConfig+0x1c0>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d910      	bls.n	80046d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ae:	4b67      	ldr	r3, [pc, #412]	; (800484c <HAL_RCC_ClockConfig+0x1c0>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f023 0207 	bic.w	r2, r3, #7
 80046b6:	4965      	ldr	r1, [pc, #404]	; (800484c <HAL_RCC_ClockConfig+0x1c0>)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046be:	4b63      	ldr	r3, [pc, #396]	; (800484c <HAL_RCC_ClockConfig+0x1c0>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d001      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0b8      	b.n	8004842 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d020      	beq.n	800471e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d005      	beq.n	80046f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046e8:	4b59      	ldr	r3, [pc, #356]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	4a58      	ldr	r2, [pc, #352]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80046ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0308 	and.w	r3, r3, #8
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d005      	beq.n	800470c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004700:	4b53      	ldr	r3, [pc, #332]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	4a52      	ldr	r2, [pc, #328]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 8004706:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800470a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800470c:	4b50      	ldr	r3, [pc, #320]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	494d      	ldr	r1, [pc, #308]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 800471a:	4313      	orrs	r3, r2
 800471c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d040      	beq.n	80047ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d107      	bne.n	8004742 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004732:	4b47      	ldr	r3, [pc, #284]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d115      	bne.n	800476a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e07f      	b.n	8004842 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	2b02      	cmp	r3, #2
 8004748:	d107      	bne.n	800475a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800474a:	4b41      	ldr	r3, [pc, #260]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d109      	bne.n	800476a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e073      	b.n	8004842 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800475a:	4b3d      	ldr	r3, [pc, #244]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e06b      	b.n	8004842 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800476a:	4b39      	ldr	r3, [pc, #228]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f023 0203 	bic.w	r2, r3, #3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	4936      	ldr	r1, [pc, #216]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 8004778:	4313      	orrs	r3, r2
 800477a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800477c:	f7fd fb7a 	bl	8001e74 <HAL_GetTick>
 8004780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004782:	e00a      	b.n	800479a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004784:	f7fd fb76 	bl	8001e74 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004792:	4293      	cmp	r3, r2
 8004794:	d901      	bls.n	800479a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e053      	b.n	8004842 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800479a:	4b2d      	ldr	r3, [pc, #180]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f003 020c 	and.w	r2, r3, #12
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d1eb      	bne.n	8004784 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047ac:	4b27      	ldr	r3, [pc, #156]	; (800484c <HAL_RCC_ClockConfig+0x1c0>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d210      	bcs.n	80047dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ba:	4b24      	ldr	r3, [pc, #144]	; (800484c <HAL_RCC_ClockConfig+0x1c0>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f023 0207 	bic.w	r2, r3, #7
 80047c2:	4922      	ldr	r1, [pc, #136]	; (800484c <HAL_RCC_ClockConfig+0x1c0>)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ca:	4b20      	ldr	r3, [pc, #128]	; (800484c <HAL_RCC_ClockConfig+0x1c0>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d001      	beq.n	80047dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e032      	b.n	8004842 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d008      	beq.n	80047fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047e8:	4b19      	ldr	r3, [pc, #100]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	4916      	ldr	r1, [pc, #88]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0308 	and.w	r3, r3, #8
 8004802:	2b00      	cmp	r3, #0
 8004804:	d009      	beq.n	800481a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004806:	4b12      	ldr	r3, [pc, #72]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	490e      	ldr	r1, [pc, #56]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 8004816:	4313      	orrs	r3, r2
 8004818:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800481a:	f000 f821 	bl	8004860 <HAL_RCC_GetSysClockFreq>
 800481e:	4602      	mov	r2, r0
 8004820:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	091b      	lsrs	r3, r3, #4
 8004826:	f003 030f 	and.w	r3, r3, #15
 800482a:	490a      	ldr	r1, [pc, #40]	; (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 800482c:	5ccb      	ldrb	r3, [r1, r3]
 800482e:	fa22 f303 	lsr.w	r3, r2, r3
 8004832:	4a09      	ldr	r2, [pc, #36]	; (8004858 <HAL_RCC_ClockConfig+0x1cc>)
 8004834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004836:	4b09      	ldr	r3, [pc, #36]	; (800485c <HAL_RCC_ClockConfig+0x1d0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4618      	mov	r0, r3
 800483c:	f7fd fad8 	bl	8001df0 <HAL_InitTick>

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	40022000 	.word	0x40022000
 8004850:	40021000 	.word	0x40021000
 8004854:	0800e6b8 	.word	0x0800e6b8
 8004858:	20000000 	.word	0x20000000
 800485c:	20000004 	.word	0x20000004

08004860 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	60fb      	str	r3, [r7, #12]
 800486a:	2300      	movs	r3, #0
 800486c:	60bb      	str	r3, [r7, #8]
 800486e:	2300      	movs	r3, #0
 8004870:	617b      	str	r3, [r7, #20]
 8004872:	2300      	movs	r3, #0
 8004874:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800487a:	4b1e      	ldr	r3, [pc, #120]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f003 030c 	and.w	r3, r3, #12
 8004886:	2b04      	cmp	r3, #4
 8004888:	d002      	beq.n	8004890 <HAL_RCC_GetSysClockFreq+0x30>
 800488a:	2b08      	cmp	r3, #8
 800488c:	d003      	beq.n	8004896 <HAL_RCC_GetSysClockFreq+0x36>
 800488e:	e027      	b.n	80048e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004890:	4b19      	ldr	r3, [pc, #100]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004892:	613b      	str	r3, [r7, #16]
      break;
 8004894:	e027      	b.n	80048e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	0c9b      	lsrs	r3, r3, #18
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	4a17      	ldr	r2, [pc, #92]	; (80048fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80048a0:	5cd3      	ldrb	r3, [r2, r3]
 80048a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d010      	beq.n	80048d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048ae:	4b11      	ldr	r3, [pc, #68]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	0c5b      	lsrs	r3, r3, #17
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	4a11      	ldr	r2, [pc, #68]	; (8004900 <HAL_RCC_GetSysClockFreq+0xa0>)
 80048ba:	5cd3      	ldrb	r3, [r2, r3]
 80048bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a0d      	ldr	r2, [pc, #52]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80048c2:	fb03 f202 	mul.w	r2, r3, r2
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048cc:	617b      	str	r3, [r7, #20]
 80048ce:	e004      	b.n	80048da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a0c      	ldr	r2, [pc, #48]	; (8004904 <HAL_RCC_GetSysClockFreq+0xa4>)
 80048d4:	fb02 f303 	mul.w	r3, r2, r3
 80048d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	613b      	str	r3, [r7, #16]
      break;
 80048de:	e002      	b.n	80048e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048e0:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80048e2:	613b      	str	r3, [r7, #16]
      break;
 80048e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048e6:	693b      	ldr	r3, [r7, #16]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	371c      	adds	r7, #28
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bc80      	pop	{r7}
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	40021000 	.word	0x40021000
 80048f8:	007a1200 	.word	0x007a1200
 80048fc:	0800e6d0 	.word	0x0800e6d0
 8004900:	0800e6e0 	.word	0x0800e6e0
 8004904:	003d0900 	.word	0x003d0900

08004908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800490c:	4b02      	ldr	r3, [pc, #8]	; (8004918 <HAL_RCC_GetHCLKFreq+0x10>)
 800490e:	681b      	ldr	r3, [r3, #0]
}
 8004910:	4618      	mov	r0, r3
 8004912:	46bd      	mov	sp, r7
 8004914:	bc80      	pop	{r7}
 8004916:	4770      	bx	lr
 8004918:	20000000 	.word	0x20000000

0800491c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004920:	f7ff fff2 	bl	8004908 <HAL_RCC_GetHCLKFreq>
 8004924:	4602      	mov	r2, r0
 8004926:	4b05      	ldr	r3, [pc, #20]	; (800493c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	0a1b      	lsrs	r3, r3, #8
 800492c:	f003 0307 	and.w	r3, r3, #7
 8004930:	4903      	ldr	r1, [pc, #12]	; (8004940 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004932:	5ccb      	ldrb	r3, [r1, r3]
 8004934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004938:	4618      	mov	r0, r3
 800493a:	bd80      	pop	{r7, pc}
 800493c:	40021000 	.word	0x40021000
 8004940:	0800e6c8 	.word	0x0800e6c8

08004944 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800494c:	4b0a      	ldr	r3, [pc, #40]	; (8004978 <RCC_Delay+0x34>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a0a      	ldr	r2, [pc, #40]	; (800497c <RCC_Delay+0x38>)
 8004952:	fba2 2303 	umull	r2, r3, r2, r3
 8004956:	0a5b      	lsrs	r3, r3, #9
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	fb02 f303 	mul.w	r3, r2, r3
 800495e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004960:	bf00      	nop
  }
  while (Delay --);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	1e5a      	subs	r2, r3, #1
 8004966:	60fa      	str	r2, [r7, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1f9      	bne.n	8004960 <RCC_Delay+0x1c>
}
 800496c:	bf00      	nop
 800496e:	bf00      	nop
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	bc80      	pop	{r7}
 8004976:	4770      	bx	lr
 8004978:	20000000 	.word	0x20000000
 800497c:	10624dd3 	.word	0x10624dd3

08004980 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	613b      	str	r3, [r7, #16]
 800498c:	2300      	movs	r3, #0
 800498e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b00      	cmp	r3, #0
 800499a:	d07d      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800499c:	2300      	movs	r3, #0
 800499e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049a0:	4b4f      	ldr	r3, [pc, #316]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10d      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ac:	4b4c      	ldr	r3, [pc, #304]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	4a4b      	ldr	r2, [pc, #300]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049b6:	61d3      	str	r3, [r2, #28]
 80049b8:	4b49      	ldr	r3, [pc, #292]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c0:	60bb      	str	r3, [r7, #8]
 80049c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049c4:	2301      	movs	r3, #1
 80049c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c8:	4b46      	ldr	r3, [pc, #280]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d118      	bne.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049d4:	4b43      	ldr	r3, [pc, #268]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a42      	ldr	r2, [pc, #264]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049e0:	f7fd fa48 	bl	8001e74 <HAL_GetTick>
 80049e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e6:	e008      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049e8:	f7fd fa44 	bl	8001e74 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b64      	cmp	r3, #100	; 0x64
 80049f4:	d901      	bls.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e06d      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049fa:	4b3a      	ldr	r3, [pc, #232]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0f0      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a06:	4b36      	ldr	r3, [pc, #216]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a0e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d02e      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d027      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a24:	4b2e      	ldr	r3, [pc, #184]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a2c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a2e:	4b2e      	ldr	r3, [pc, #184]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a34:	4b2c      	ldr	r3, [pc, #176]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a3a:	4a29      	ldr	r2, [pc, #164]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d014      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4a:	f7fd fa13 	bl	8001e74 <HAL_GetTick>
 8004a4e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a50:	e00a      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a52:	f7fd fa0f 	bl	8001e74 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e036      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a68:	4b1d      	ldr	r3, [pc, #116]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0ee      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a74:	4b1a      	ldr	r3, [pc, #104]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	4917      	ldr	r1, [pc, #92]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a86:	7dfb      	ldrb	r3, [r7, #23]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d105      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a8c:	4b14      	ldr	r3, [pc, #80]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	4a13      	ldr	r2, [pc, #76]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a96:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d008      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004aa4:	4b0e      	ldr	r3, [pc, #56]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	490b      	ldr	r1, [pc, #44]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0310 	and.w	r3, r3, #16
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d008      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ac2:	4b07      	ldr	r3, [pc, #28]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	4904      	ldr	r1, [pc, #16]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3718      	adds	r7, #24
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	40007000 	.word	0x40007000
 8004ae8:	42420440 	.word	0x42420440

08004aec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e076      	b.n	8004bec <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d108      	bne.n	8004b18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b0e:	d009      	beq.n	8004b24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	61da      	str	r2, [r3, #28]
 8004b16:	e005      	b.n	8004b24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d106      	bne.n	8004b44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7fc ff9c 	bl	8001a7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b5a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	431a      	orrs	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b94:	431a      	orrs	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba8:	ea42 0103 	orr.w	r1, r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	0c1a      	lsrs	r2, r3, #16
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f002 0204 	and.w	r2, r2, #4
 8004bca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	69da      	ldr	r2, [r3, #28]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bda:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b088      	sub	sp, #32
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	603b      	str	r3, [r7, #0]
 8004c00:	4613      	mov	r3, r2
 8004c02:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c04:	2300      	movs	r3, #0
 8004c06:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d101      	bne.n	8004c16 <HAL_SPI_Transmit+0x22>
 8004c12:	2302      	movs	r3, #2
 8004c14:	e12d      	b.n	8004e72 <HAL_SPI_Transmit+0x27e>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c1e:	f7fd f929 	bl	8001e74 <HAL_GetTick>
 8004c22:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c24:	88fb      	ldrh	r3, [r7, #6]
 8004c26:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d002      	beq.n	8004c3a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c34:	2302      	movs	r3, #2
 8004c36:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c38:	e116      	b.n	8004e68 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <HAL_SPI_Transmit+0x52>
 8004c40:	88fb      	ldrh	r3, [r7, #6]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d102      	bne.n	8004c4c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c4a:	e10d      	b.n	8004e68 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2203      	movs	r2, #3
 8004c50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	88fa      	ldrh	r2, [r7, #6]
 8004c64:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	88fa      	ldrh	r2, [r7, #6]
 8004c6a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c92:	d10f      	bne.n	8004cb4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ca2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cb2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cbe:	2b40      	cmp	r3, #64	; 0x40
 8004cc0:	d007      	beq.n	8004cd2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cd0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cda:	d14f      	bne.n	8004d7c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <HAL_SPI_Transmit+0xf6>
 8004ce4:	8afb      	ldrh	r3, [r7, #22]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d142      	bne.n	8004d70 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cee:	881a      	ldrh	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfa:	1c9a      	adds	r2, r3, #2
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	3b01      	subs	r3, #1
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d0e:	e02f      	b.n	8004d70 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d112      	bne.n	8004d44 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d22:	881a      	ldrh	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2e:	1c9a      	adds	r2, r3, #2
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d42:	e015      	b.n	8004d70 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d44:	f7fd f896 	bl	8001e74 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d803      	bhi.n	8004d5c <HAL_SPI_Transmit+0x168>
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5a:	d102      	bne.n	8004d62 <HAL_SPI_Transmit+0x16e>
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d106      	bne.n	8004d70 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004d6e:	e07b      	b.n	8004e68 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1ca      	bne.n	8004d10 <HAL_SPI_Transmit+0x11c>
 8004d7a:	e050      	b.n	8004e1e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <HAL_SPI_Transmit+0x196>
 8004d84:	8afb      	ldrh	r3, [r7, #22]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d144      	bne.n	8004e14 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	330c      	adds	r3, #12
 8004d94:	7812      	ldrb	r2, [r2, #0]
 8004d96:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9c:	1c5a      	adds	r2, r3, #1
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004db0:	e030      	b.n	8004e14 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d113      	bne.n	8004de8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	330c      	adds	r3, #12
 8004dca:	7812      	ldrb	r2, [r2, #0]
 8004dcc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd2:	1c5a      	adds	r2, r3, #1
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	3b01      	subs	r3, #1
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	86da      	strh	r2, [r3, #54]	; 0x36
 8004de6:	e015      	b.n	8004e14 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004de8:	f7fd f844 	bl	8001e74 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d803      	bhi.n	8004e00 <HAL_SPI_Transmit+0x20c>
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfe:	d102      	bne.n	8004e06 <HAL_SPI_Transmit+0x212>
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d106      	bne.n	8004e14 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004e12:	e029      	b.n	8004e68 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1c9      	bne.n	8004db2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	6839      	ldr	r1, [r7, #0]
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 fbd8 	bl	80055d8 <SPI_EndRxTxTransaction>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d002      	beq.n	8004e34 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2220      	movs	r2, #32
 8004e32:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10a      	bne.n	8004e52 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	613b      	str	r3, [r7, #16]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	613b      	str	r3, [r7, #16]
 8004e50:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	77fb      	strb	r3, [r7, #31]
 8004e5e:	e003      	b.n	8004e68 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e70:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3720      	adds	r7, #32
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b088      	sub	sp, #32
 8004e7e:	af02      	add	r7, sp, #8
 8004e80:	60f8      	str	r0, [r7, #12]
 8004e82:	60b9      	str	r1, [r7, #8]
 8004e84:	603b      	str	r3, [r7, #0]
 8004e86:	4613      	mov	r3, r2
 8004e88:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d002      	beq.n	8004ea0 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e9e:	e0fb      	b.n	8005098 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ea8:	d112      	bne.n	8004ed0 <HAL_SPI_Receive+0x56>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10e      	bne.n	8004ed0 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2204      	movs	r2, #4
 8004eb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004eba:	88fa      	ldrh	r2, [r7, #6]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	68b9      	ldr	r1, [r7, #8]
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 f8ef 	bl	80050aa <HAL_SPI_TransmitReceive>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	e0e8      	b.n	80050a2 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d101      	bne.n	8004ede <HAL_SPI_Receive+0x64>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e0e1      	b.n	80050a2 <HAL_SPI_Receive+0x228>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ee6:	f7fc ffc5 	bl	8001e74 <HAL_GetTick>
 8004eea:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <HAL_SPI_Receive+0x7e>
 8004ef2:	88fb      	ldrh	r3, [r7, #6]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d102      	bne.n	8004efe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004efc:	e0cc      	b.n	8005098 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2204      	movs	r2, #4
 8004f02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	88fa      	ldrh	r2, [r7, #6]
 8004f16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	88fa      	ldrh	r2, [r7, #6]
 8004f1c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f44:	d10f      	bne.n	8004f66 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f64:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f70:	2b40      	cmp	r3, #64	; 0x40
 8004f72:	d007      	beq.n	8004f84 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f82:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d16a      	bne.n	8005062 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004f8c:	e032      	b.n	8004ff4 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d115      	bne.n	8004fc8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f103 020c 	add.w	r2, r3, #12
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa8:	7812      	ldrb	r2, [r2, #0]
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb2:	1c5a      	adds	r2, r3, #1
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fc6:	e015      	b.n	8004ff4 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fc8:	f7fc ff54 	bl	8001e74 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d803      	bhi.n	8004fe0 <HAL_SPI_Receive+0x166>
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fde:	d102      	bne.n	8004fe6 <HAL_SPI_Receive+0x16c>
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d106      	bne.n	8004ff4 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004ff2:	e051      	b.n	8005098 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1c7      	bne.n	8004f8e <HAL_SPI_Receive+0x114>
 8004ffe:	e035      	b.n	800506c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b01      	cmp	r3, #1
 800500c:	d113      	bne.n	8005036 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68da      	ldr	r2, [r3, #12]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	b292      	uxth	r2, r2
 800501a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005020:	1c9a      	adds	r2, r3, #2
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800502a:	b29b      	uxth	r3, r3
 800502c:	3b01      	subs	r3, #1
 800502e:	b29a      	uxth	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005034:	e015      	b.n	8005062 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005036:	f7fc ff1d 	bl	8001e74 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d803      	bhi.n	800504e <HAL_SPI_Receive+0x1d4>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504c:	d102      	bne.n	8005054 <HAL_SPI_Receive+0x1da>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d106      	bne.n	8005062 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005060:	e01a      	b.n	8005098 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005066:	b29b      	uxth	r3, r3
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1c9      	bne.n	8005000 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	6839      	ldr	r1, [r7, #0]
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f000 fa5f 	bl	8005534 <SPI_EndRxTransaction>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d002      	beq.n	8005082 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2220      	movs	r2, #32
 8005080:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005086:	2b00      	cmp	r3, #0
 8005088:	d002      	beq.n	8005090 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	75fb      	strb	r3, [r7, #23]
 800508e:	e003      	b.n	8005098 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3718      	adds	r7, #24
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b08c      	sub	sp, #48	; 0x30
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	60f8      	str	r0, [r7, #12]
 80050b2:	60b9      	str	r1, [r7, #8]
 80050b4:	607a      	str	r2, [r7, #4]
 80050b6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80050b8:	2301      	movs	r3, #1
 80050ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80050bc:	2300      	movs	r3, #0
 80050be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d101      	bne.n	80050d0 <HAL_SPI_TransmitReceive+0x26>
 80050cc:	2302      	movs	r3, #2
 80050ce:	e198      	b.n	8005402 <HAL_SPI_TransmitReceive+0x358>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050d8:	f7fc fecc 	bl	8001e74 <HAL_GetTick>
 80050dc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80050ee:	887b      	ldrh	r3, [r7, #2]
 80050f0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80050f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d00f      	beq.n	800511a <HAL_SPI_TransmitReceive+0x70>
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005100:	d107      	bne.n	8005112 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d103      	bne.n	8005112 <HAL_SPI_TransmitReceive+0x68>
 800510a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800510e:	2b04      	cmp	r3, #4
 8005110:	d003      	beq.n	800511a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005112:	2302      	movs	r3, #2
 8005114:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005118:	e16d      	b.n	80053f6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d005      	beq.n	800512c <HAL_SPI_TransmitReceive+0x82>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d002      	beq.n	800512c <HAL_SPI_TransmitReceive+0x82>
 8005126:	887b      	ldrh	r3, [r7, #2]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d103      	bne.n	8005134 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005132:	e160      	b.n	80053f6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b04      	cmp	r3, #4
 800513e:	d003      	beq.n	8005148 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2205      	movs	r2, #5
 8005144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	887a      	ldrh	r2, [r7, #2]
 8005158:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	887a      	ldrh	r2, [r7, #2]
 800515e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	887a      	ldrh	r2, [r7, #2]
 800516a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	887a      	ldrh	r2, [r7, #2]
 8005170:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005188:	2b40      	cmp	r3, #64	; 0x40
 800518a:	d007      	beq.n	800519c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800519a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051a4:	d17c      	bne.n	80052a0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d002      	beq.n	80051b4 <HAL_SPI_TransmitReceive+0x10a>
 80051ae:	8b7b      	ldrh	r3, [r7, #26]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d16a      	bne.n	800528a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b8:	881a      	ldrh	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c4:	1c9a      	adds	r2, r3, #2
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	3b01      	subs	r3, #1
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051d8:	e057      	b.n	800528a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d11b      	bne.n	8005220 <HAL_SPI_TransmitReceive+0x176>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d016      	beq.n	8005220 <HAL_SPI_TransmitReceive+0x176>
 80051f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d113      	bne.n	8005220 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fc:	881a      	ldrh	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005208:	1c9a      	adds	r2, r3, #2
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005212:	b29b      	uxth	r3, r3
 8005214:	3b01      	subs	r3, #1
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b01      	cmp	r3, #1
 800522c:	d119      	bne.n	8005262 <HAL_SPI_TransmitReceive+0x1b8>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005232:	b29b      	uxth	r3, r3
 8005234:	2b00      	cmp	r3, #0
 8005236:	d014      	beq.n	8005262 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68da      	ldr	r2, [r3, #12]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005242:	b292      	uxth	r2, r2
 8005244:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524a:	1c9a      	adds	r2, r3, #2
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005254:	b29b      	uxth	r3, r3
 8005256:	3b01      	subs	r3, #1
 8005258:	b29a      	uxth	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800525e:	2301      	movs	r3, #1
 8005260:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005262:	f7fc fe07 	bl	8001e74 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800526e:	429a      	cmp	r2, r3
 8005270:	d80b      	bhi.n	800528a <HAL_SPI_TransmitReceive+0x1e0>
 8005272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005278:	d007      	beq.n	800528a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005288:	e0b5      	b.n	80053f6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800528e:	b29b      	uxth	r3, r3
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1a2      	bne.n	80051da <HAL_SPI_TransmitReceive+0x130>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005298:	b29b      	uxth	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d19d      	bne.n	80051da <HAL_SPI_TransmitReceive+0x130>
 800529e:	e080      	b.n	80053a2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <HAL_SPI_TransmitReceive+0x204>
 80052a8:	8b7b      	ldrh	r3, [r7, #26]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d16f      	bne.n	800538e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	330c      	adds	r3, #12
 80052b8:	7812      	ldrb	r2, [r2, #0]
 80052ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c0:	1c5a      	adds	r2, r3, #1
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	3b01      	subs	r3, #1
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052d4:	e05b      	b.n	800538e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d11c      	bne.n	800531e <HAL_SPI_TransmitReceive+0x274>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d017      	beq.n	800531e <HAL_SPI_TransmitReceive+0x274>
 80052ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d114      	bne.n	800531e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	330c      	adds	r3, #12
 80052fe:	7812      	ldrb	r2, [r2, #0]
 8005300:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005306:	1c5a      	adds	r2, r3, #1
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005310:	b29b      	uxth	r3, r3
 8005312:	3b01      	subs	r3, #1
 8005314:	b29a      	uxth	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800531a:	2300      	movs	r3, #0
 800531c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b01      	cmp	r3, #1
 800532a:	d119      	bne.n	8005360 <HAL_SPI_TransmitReceive+0x2b6>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005330:	b29b      	uxth	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d014      	beq.n	8005360 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68da      	ldr	r2, [r3, #12]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005340:	b2d2      	uxtb	r2, r2
 8005342:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005348:	1c5a      	adds	r2, r3, #1
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005352:	b29b      	uxth	r3, r3
 8005354:	3b01      	subs	r3, #1
 8005356:	b29a      	uxth	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800535c:	2301      	movs	r3, #1
 800535e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005360:	f7fc fd88 	bl	8001e74 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800536c:	429a      	cmp	r2, r3
 800536e:	d803      	bhi.n	8005378 <HAL_SPI_TransmitReceive+0x2ce>
 8005370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005376:	d102      	bne.n	800537e <HAL_SPI_TransmitReceive+0x2d4>
 8005378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537a:	2b00      	cmp	r3, #0
 800537c:	d107      	bne.n	800538e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800538c:	e033      	b.n	80053f6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005392:	b29b      	uxth	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	d19e      	bne.n	80052d6 <HAL_SPI_TransmitReceive+0x22c>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800539c:	b29b      	uxth	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d199      	bne.n	80052d6 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f000 f916 	bl	80055d8 <SPI_EndRxTxTransaction>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d006      	beq.n	80053c0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2220      	movs	r2, #32
 80053bc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80053be:	e01a      	b.n	80053f6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10a      	bne.n	80053de <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053c8:	2300      	movs	r3, #0
 80053ca:	617b      	str	r3, [r7, #20]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	617b      	str	r3, [r7, #20]
 80053dc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053ec:	e003      	b.n	80053f6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80053fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005402:	4618      	mov	r0, r3
 8005404:	3730      	adds	r7, #48	; 0x30
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005418:	b2db      	uxtb	r3, r3
}
 800541a:	4618      	mov	r0, r3
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	bc80      	pop	{r7}
 8005422:	4770      	bx	lr

08005424 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b088      	sub	sp, #32
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	603b      	str	r3, [r7, #0]
 8005430:	4613      	mov	r3, r2
 8005432:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005434:	f7fc fd1e 	bl	8001e74 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543c:	1a9b      	subs	r3, r3, r2
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	4413      	add	r3, r2
 8005442:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005444:	f7fc fd16 	bl	8001e74 <HAL_GetTick>
 8005448:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800544a:	4b39      	ldr	r3, [pc, #228]	; (8005530 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	015b      	lsls	r3, r3, #5
 8005450:	0d1b      	lsrs	r3, r3, #20
 8005452:	69fa      	ldr	r2, [r7, #28]
 8005454:	fb02 f303 	mul.w	r3, r2, r3
 8005458:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800545a:	e054      	b.n	8005506 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005462:	d050      	beq.n	8005506 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005464:	f7fc fd06 	bl	8001e74 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	69fa      	ldr	r2, [r7, #28]
 8005470:	429a      	cmp	r2, r3
 8005472:	d902      	bls.n	800547a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d13d      	bne.n	80054f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005488:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005492:	d111      	bne.n	80054b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800549c:	d004      	beq.n	80054a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054a6:	d107      	bne.n	80054b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054c0:	d10f      	bne.n	80054e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e017      	b.n	8005526 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80054fc:	2300      	movs	r3, #0
 80054fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	3b01      	subs	r3, #1
 8005504:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	4013      	ands	r3, r2
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	429a      	cmp	r2, r3
 8005514:	bf0c      	ite	eq
 8005516:	2301      	moveq	r3, #1
 8005518:	2300      	movne	r3, #0
 800551a:	b2db      	uxtb	r3, r3
 800551c:	461a      	mov	r2, r3
 800551e:	79fb      	ldrb	r3, [r7, #7]
 8005520:	429a      	cmp	r2, r3
 8005522:	d19b      	bne.n	800545c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3720      	adds	r7, #32
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	20000000 	.word	0x20000000

08005534 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af02      	add	r7, sp, #8
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005548:	d111      	bne.n	800556e <SPI_EndRxTransaction+0x3a>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005552:	d004      	beq.n	800555e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800555c:	d107      	bne.n	800556e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800556c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005576:	d117      	bne.n	80055a8 <SPI_EndRxTransaction+0x74>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005580:	d112      	bne.n	80055a8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2200      	movs	r2, #0
 800558a:	2101      	movs	r1, #1
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f7ff ff49 	bl	8005424 <SPI_WaitFlagStateUntilTimeout>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d01a      	beq.n	80055ce <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800559c:	f043 0220 	orr.w	r2, r3, #32
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e013      	b.n	80055d0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2200      	movs	r2, #0
 80055b0:	2180      	movs	r1, #128	; 0x80
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f7ff ff36 	bl	8005424 <SPI_WaitFlagStateUntilTimeout>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d007      	beq.n	80055ce <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c2:	f043 0220 	orr.w	r2, r3, #32
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e000      	b.n	80055d0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af02      	add	r7, sp, #8
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	2200      	movs	r2, #0
 80055ec:	2180      	movs	r1, #128	; 0x80
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f7ff ff18 	bl	8005424 <SPI_WaitFlagStateUntilTimeout>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d007      	beq.n	800560a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fe:	f043 0220 	orr.w	r2, r3, #32
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e000      	b.n	800560c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005614:	b084      	sub	sp, #16
 8005616:	b480      	push	{r7}
 8005618:	b083      	sub	sp, #12
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
 800561e:	f107 0014 	add.w	r0, r7, #20
 8005622:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	bc80      	pop	{r7}
 8005630:	b004      	add	sp, #16
 8005632:	4770      	bx	lr

08005634 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005644:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005648:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	b29a      	uxth	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	bc80      	pop	{r7}
 800565e:	4770      	bx	lr

08005660 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005668:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800566c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005674:	b29a      	uxth	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	b29b      	uxth	r3, r3
 800567a:	43db      	mvns	r3, r3
 800567c:	b29b      	uxth	r3, r3
 800567e:	4013      	ands	r3, r2
 8005680:	b29a      	uxth	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	bc80      	pop	{r7}
 8005692:	4770      	bx	lr

08005694 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	460b      	mov	r3, r1
 800569e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bc80      	pop	{r7}
 80056aa:	4770      	bx	lr

080056ac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80056ac:	b084      	sub	sp, #16
 80056ae:	b480      	push	{r7}
 80056b0:	b083      	sub	sp, #12
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
 80056b6:	f107 0014 	add.w	r0, r7, #20
 80056ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bc80      	pop	{r7}
 80056e8:	b004      	add	sp, #16
 80056ea:	4770      	bx	lr

080056ec <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b09d      	sub	sp, #116	; 0x74
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80056f6:	2300      	movs	r3, #0
 80056f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	881b      	ldrh	r3, [r3, #0]
 8005708:	b29b      	uxth	r3, r3
 800570a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800570e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005712:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	78db      	ldrb	r3, [r3, #3]
 800571a:	2b03      	cmp	r3, #3
 800571c:	d81f      	bhi.n	800575e <USB_ActivateEndpoint+0x72>
 800571e:	a201      	add	r2, pc, #4	; (adr r2, 8005724 <USB_ActivateEndpoint+0x38>)
 8005720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005724:	08005735 	.word	0x08005735
 8005728:	08005751 	.word	0x08005751
 800572c:	08005767 	.word	0x08005767
 8005730:	08005743 	.word	0x08005743
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005734:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005738:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800573c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005740:	e012      	b.n	8005768 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005742:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005746:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800574a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800574e:	e00b      	b.n	8005768 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005750:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005754:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005758:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800575c:	e004      	b.n	8005768 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005764:	e000      	b.n	8005768 <USB_ActivateEndpoint+0x7c>
      break;
 8005766:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	441a      	add	r2, r3
 8005772:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005776:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800577a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800577e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005786:	b29b      	uxth	r3, r3
 8005788:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	881b      	ldrh	r3, [r3, #0]
 8005796:	b29b      	uxth	r3, r3
 8005798:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800579c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	4313      	orrs	r3, r2
 80057aa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	441a      	add	r2, r3
 80057b8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80057bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	7b1b      	ldrb	r3, [r3, #12]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f040 8178 	bne.w	8005aca <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	785b      	ldrb	r3, [r3, #1]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f000 8084 	beq.w	80058ec <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	61bb      	str	r3, [r7, #24]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	461a      	mov	r2, r3
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	4413      	add	r3, r2
 80057f6:	61bb      	str	r3, [r7, #24]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	011a      	lsls	r2, r3, #4
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	4413      	add	r3, r2
 8005802:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	88db      	ldrh	r3, [r3, #6]
 800580c:	085b      	lsrs	r3, r3, #1
 800580e:	b29b      	uxth	r3, r3
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	b29a      	uxth	r2, r3
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	881b      	ldrh	r3, [r3, #0]
 8005824:	827b      	strh	r3, [r7, #18]
 8005826:	8a7b      	ldrh	r3, [r7, #18]
 8005828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582c:	2b00      	cmp	r3, #0
 800582e:	d01b      	beq.n	8005868 <USB_ActivateEndpoint+0x17c>
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	881b      	ldrh	r3, [r3, #0]
 800583c:	b29b      	uxth	r3, r3
 800583e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005846:	823b      	strh	r3, [r7, #16]
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	441a      	add	r2, r3
 8005852:	8a3b      	ldrh	r3, [r7, #16]
 8005854:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005858:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800585c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005860:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005864:	b29b      	uxth	r3, r3
 8005866:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	78db      	ldrb	r3, [r3, #3]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d020      	beq.n	80058b2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	881b      	ldrh	r3, [r3, #0]
 800587c:	b29b      	uxth	r3, r3
 800587e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005886:	81bb      	strh	r3, [r7, #12]
 8005888:	89bb      	ldrh	r3, [r7, #12]
 800588a:	f083 0320 	eor.w	r3, r3, #32
 800588e:	81bb      	strh	r3, [r7, #12]
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	441a      	add	r2, r3
 800589a:	89bb      	ldrh	r3, [r7, #12]
 800589c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	8013      	strh	r3, [r2, #0]
 80058b0:	e2d5      	b.n	8005e5e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	881b      	ldrh	r3, [r3, #0]
 80058be:	b29b      	uxth	r3, r3
 80058c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058c8:	81fb      	strh	r3, [r7, #14]
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	441a      	add	r2, r3
 80058d4:	89fb      	ldrh	r3, [r7, #14]
 80058d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	8013      	strh	r3, [r2, #0]
 80058ea:	e2b8      	b.n	8005e5e <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	633b      	str	r3, [r7, #48]	; 0x30
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	461a      	mov	r2, r3
 80058fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fc:	4413      	add	r3, r2
 80058fe:	633b      	str	r3, [r7, #48]	; 0x30
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	011a      	lsls	r2, r3, #4
 8005906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005908:	4413      	add	r3, r2
 800590a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800590e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	88db      	ldrh	r3, [r3, #6]
 8005914:	085b      	lsrs	r3, r3, #1
 8005916:	b29b      	uxth	r3, r3
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	b29a      	uxth	r2, r3
 800591c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	62bb      	str	r3, [r7, #40]	; 0x28
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800592a:	b29b      	uxth	r3, r3
 800592c:	461a      	mov	r2, r3
 800592e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005930:	4413      	add	r3, r2
 8005932:	62bb      	str	r3, [r7, #40]	; 0x28
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	011a      	lsls	r2, r3, #4
 800593a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593c:	4413      	add	r3, r2
 800593e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005942:	627b      	str	r3, [r7, #36]	; 0x24
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	881b      	ldrh	r3, [r3, #0]
 8005948:	b29b      	uxth	r3, r3
 800594a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800594e:	b29a      	uxth	r2, r3
 8005950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005952:	801a      	strh	r2, [r3, #0]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	2b3e      	cmp	r3, #62	; 0x3e
 800595a:	d91d      	bls.n	8005998 <USB_ActivateEndpoint+0x2ac>
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	095b      	lsrs	r3, r3, #5
 8005962:	66bb      	str	r3, [r7, #104]	; 0x68
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	f003 031f 	and.w	r3, r3, #31
 800596c:	2b00      	cmp	r3, #0
 800596e:	d102      	bne.n	8005976 <USB_ActivateEndpoint+0x28a>
 8005970:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005972:	3b01      	subs	r3, #1
 8005974:	66bb      	str	r3, [r7, #104]	; 0x68
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005978:	881b      	ldrh	r3, [r3, #0]
 800597a:	b29a      	uxth	r2, r3
 800597c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800597e:	b29b      	uxth	r3, r3
 8005980:	029b      	lsls	r3, r3, #10
 8005982:	b29b      	uxth	r3, r3
 8005984:	4313      	orrs	r3, r2
 8005986:	b29b      	uxth	r3, r3
 8005988:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800598c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005990:	b29a      	uxth	r2, r3
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	801a      	strh	r2, [r3, #0]
 8005996:	e026      	b.n	80059e6 <USB_ActivateEndpoint+0x2fa>
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10a      	bne.n	80059b6 <USB_ActivateEndpoint+0x2ca>
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	881b      	ldrh	r3, [r3, #0]
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b2:	801a      	strh	r2, [r3, #0]
 80059b4:	e017      	b.n	80059e6 <USB_ActivateEndpoint+0x2fa>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	085b      	lsrs	r3, r3, #1
 80059bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d002      	beq.n	80059d0 <USB_ActivateEndpoint+0x2e4>
 80059ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059cc:	3301      	adds	r3, #1
 80059ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	881b      	ldrh	r3, [r3, #0]
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059d8:	b29b      	uxth	r3, r3
 80059da:	029b      	lsls	r3, r3, #10
 80059dc:	b29b      	uxth	r3, r3
 80059de:	4313      	orrs	r3, r2
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	881b      	ldrh	r3, [r3, #0]
 80059f2:	847b      	strh	r3, [r7, #34]	; 0x22
 80059f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80059f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d01b      	beq.n	8005a36 <USB_ActivateEndpoint+0x34a>
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a14:	843b      	strh	r3, [r7, #32]
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	441a      	add	r2, r3
 8005a20:	8c3b      	ldrh	r3, [r7, #32]
 8005a22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d124      	bne.n	8005a88 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4413      	add	r3, r2
 8005a48:	881b      	ldrh	r3, [r3, #0]
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a54:	83bb      	strh	r3, [r7, #28]
 8005a56:	8bbb      	ldrh	r3, [r7, #28]
 8005a58:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005a5c:	83bb      	strh	r3, [r7, #28]
 8005a5e:	8bbb      	ldrh	r3, [r7, #28]
 8005a60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a64:	83bb      	strh	r3, [r7, #28]
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	441a      	add	r2, r3
 8005a70:	8bbb      	ldrh	r3, [r7, #28]
 8005a72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	8013      	strh	r3, [r2, #0]
 8005a86:	e1ea      	b.n	8005e5e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	881b      	ldrh	r3, [r3, #0]
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a9e:	83fb      	strh	r3, [r7, #30]
 8005aa0:	8bfb      	ldrh	r3, [r7, #30]
 8005aa2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005aa6:	83fb      	strh	r3, [r7, #30]
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	441a      	add	r2, r3
 8005ab2:	8bfb      	ldrh	r3, [r7, #30]
 8005ab4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ab8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	8013      	strh	r3, [r2, #0]
 8005ac8:	e1c9      	b.n	8005e5e <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	78db      	ldrb	r3, [r3, #3]
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d11e      	bne.n	8005b10 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	441a      	add	r2, r3
 8005af6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005afa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005afe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b02:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	8013      	strh	r3, [r2, #0]
 8005b0e:	e01d      	b.n	8005b4c <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	881b      	ldrh	r3, [r3, #0]
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b26:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	441a      	add	r2, r3
 8005b34:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005b38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	461a      	mov	r2, r3
 8005b5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b5c:	4413      	add	r3, r2
 8005b5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	011a      	lsls	r2, r3, #4
 8005b66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	891b      	ldrh	r3, [r3, #8]
 8005b74:	085b      	lsrs	r3, r3, #1
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	005b      	lsls	r3, r3, #1
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b7e:	801a      	strh	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	657b      	str	r3, [r7, #84]	; 0x54
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b90:	4413      	add	r3, r2
 8005b92:	657b      	str	r3, [r7, #84]	; 0x54
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	011a      	lsls	r2, r3, #4
 8005b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005ba2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	895b      	ldrh	r3, [r3, #10]
 8005ba8:	085b      	lsrs	r3, r3, #1
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	005b      	lsls	r3, r3, #1
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bb2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	785b      	ldrb	r3, [r3, #1]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f040 8093 	bne.w	8005ce4 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005bce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d01b      	beq.n	8005c12 <USB_ActivateEndpoint+0x526>
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	881b      	ldrh	r3, [r3, #0]
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	441a      	add	r2, r3
 8005bfc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005bfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4413      	add	r3, r2
 8005c1c:	881b      	ldrh	r3, [r3, #0]
 8005c1e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005c20:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d01b      	beq.n	8005c62 <USB_ActivateEndpoint+0x576>
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c40:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	441a      	add	r2, r3
 8005c4c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005c4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4413      	add	r3, r2
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c78:	873b      	strh	r3, [r7, #56]	; 0x38
 8005c7a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005c7c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c80:	873b      	strh	r3, [r7, #56]	; 0x38
 8005c82:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005c84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c88:	873b      	strh	r3, [r7, #56]	; 0x38
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	441a      	add	r2, r3
 8005c94:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005c96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4413      	add	r3, r2
 8005cb4:	881b      	ldrh	r3, [r3, #0]
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cc0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	441a      	add	r2, r3
 8005ccc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005cce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	8013      	strh	r3, [r2, #0]
 8005ce2:	e0bc      	b.n	8005e5e <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	881b      	ldrh	r3, [r3, #0]
 8005cf0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005cf4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d01d      	beq.n	8005d3c <USB_ActivateEndpoint+0x650>
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d16:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	441a      	add	r2, r3
 8005d24:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005d28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	4413      	add	r3, r2
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005d4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d01d      	beq.n	8005d94 <USB_ActivateEndpoint+0x6a8>
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d6e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	441a      	add	r2, r3
 8005d7c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005d80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	78db      	ldrb	r3, [r3, #3]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d024      	beq.n	8005de6 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	881b      	ldrh	r3, [r3, #0]
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005db2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005db6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005dba:	f083 0320 	eor.w	r3, r3, #32
 8005dbe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	441a      	add	r2, r3
 8005dcc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005dd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	8013      	strh	r3, [r2, #0]
 8005de4:	e01d      	b.n	8005e22 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4413      	add	r3, r2
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005df8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dfc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	441a      	add	r2, r3
 8005e0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005e0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e38:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	441a      	add	r2, r3
 8005e46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005e5e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3774      	adds	r7, #116	; 0x74
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bc80      	pop	{r7}
 8005e6a:	4770      	bx	lr

08005e6c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b08d      	sub	sp, #52	; 0x34
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	7b1b      	ldrb	r3, [r3, #12]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f040 808e 	bne.w	8005f9c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	785b      	ldrb	r3, [r3, #1]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d044      	beq.n	8005f12 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	4413      	add	r3, r2
 8005e92:	881b      	ldrh	r3, [r3, #0]
 8005e94:	81bb      	strh	r3, [r7, #12]
 8005e96:	89bb      	ldrh	r3, [r7, #12]
 8005e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d01b      	beq.n	8005ed8 <USB_DeactivateEndpoint+0x6c>
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb6:	817b      	strh	r3, [r7, #10]
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	441a      	add	r2, r3
 8005ec2:	897b      	ldrh	r3, [r7, #10]
 8005ec4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ec8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ed0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4413      	add	r3, r2
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eee:	813b      	strh	r3, [r7, #8]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	441a      	add	r2, r3
 8005efa:	893b      	ldrh	r3, [r7, #8]
 8005efc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	8013      	strh	r3, [r2, #0]
 8005f10:	e192      	b.n	8006238 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	827b      	strh	r3, [r7, #18]
 8005f20:	8a7b      	ldrh	r3, [r7, #18]
 8005f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d01b      	beq.n	8005f62 <USB_DeactivateEndpoint+0xf6>
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4413      	add	r3, r2
 8005f34:	881b      	ldrh	r3, [r3, #0]
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f40:	823b      	strh	r3, [r7, #16]
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	441a      	add	r2, r3
 8005f4c:	8a3b      	ldrh	r3, [r7, #16]
 8005f4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4413      	add	r3, r2
 8005f6c:	881b      	ldrh	r3, [r3, #0]
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f78:	81fb      	strh	r3, [r7, #14]
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	441a      	add	r2, r3
 8005f84:	89fb      	ldrh	r3, [r7, #14]
 8005f86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	8013      	strh	r3, [r2, #0]
 8005f9a:	e14d      	b.n	8006238 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	785b      	ldrb	r3, [r3, #1]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f040 80a5 	bne.w	80060f0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4413      	add	r3, r2
 8005fb0:	881b      	ldrh	r3, [r3, #0]
 8005fb2:	843b      	strh	r3, [r7, #32]
 8005fb4:	8c3b      	ldrh	r3, [r7, #32]
 8005fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d01b      	beq.n	8005ff6 <USB_DeactivateEndpoint+0x18a>
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd4:	83fb      	strh	r3, [r7, #30]
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	441a      	add	r2, r3
 8005fe0:	8bfb      	ldrh	r3, [r7, #30]
 8005fe2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fe6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	83bb      	strh	r3, [r7, #28]
 8006004:	8bbb      	ldrh	r3, [r7, #28]
 8006006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800600a:	2b00      	cmp	r3, #0
 800600c:	d01b      	beq.n	8006046 <USB_DeactivateEndpoint+0x1da>
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4413      	add	r3, r2
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	b29b      	uxth	r3, r3
 800601c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006024:	837b      	strh	r3, [r7, #26]
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	441a      	add	r2, r3
 8006030:	8b7b      	ldrh	r3, [r7, #26]
 8006032:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006036:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800603a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800603e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006042:	b29b      	uxth	r3, r3
 8006044:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	b29b      	uxth	r3, r3
 8006054:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800605c:	833b      	strh	r3, [r7, #24]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	441a      	add	r2, r3
 8006068:	8b3b      	ldrh	r3, [r7, #24]
 800606a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800606e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006076:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800607a:	b29b      	uxth	r3, r3
 800607c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4413      	add	r3, r2
 8006088:	881b      	ldrh	r3, [r3, #0]
 800608a:	b29b      	uxth	r3, r3
 800608c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006094:	82fb      	strh	r3, [r7, #22]
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	441a      	add	r2, r3
 80060a0:	8afb      	ldrh	r3, [r7, #22]
 80060a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060cc:	82bb      	strh	r3, [r7, #20]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	441a      	add	r2, r3
 80060d8:	8abb      	ldrh	r3, [r7, #20]
 80060da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	8013      	strh	r3, [r2, #0]
 80060ee:	e0a3      	b.n	8006238 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80060fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d01b      	beq.n	8006140 <USB_DeactivateEndpoint+0x2d4>
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	b29b      	uxth	r3, r3
 8006116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800611a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800611e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	441a      	add	r2, r3
 800612a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800612c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006134:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800613c:	b29b      	uxth	r3, r3
 800613e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800614e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006154:	2b00      	cmp	r3, #0
 8006156:	d01b      	beq.n	8006190 <USB_DeactivateEndpoint+0x324>
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	881b      	ldrh	r3, [r3, #0]
 8006164:	b29b      	uxth	r3, r3
 8006166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800616a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800616e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	441a      	add	r2, r3
 800617a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800617c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006180:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006184:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006188:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800618c:	b29b      	uxth	r3, r3
 800618e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	881b      	ldrh	r3, [r3, #0]
 800619c:	b29b      	uxth	r3, r3
 800619e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	441a      	add	r2, r3
 80061b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	881b      	ldrh	r3, [r3, #0]
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061de:	84bb      	strh	r3, [r7, #36]	; 0x24
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	441a      	add	r2, r3
 80061ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4413      	add	r3, r2
 800620a:	881b      	ldrh	r3, [r3, #0]
 800620c:	b29b      	uxth	r3, r3
 800620e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006216:	847b      	strh	r3, [r7, #34]	; 0x22
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	441a      	add	r2, r3
 8006222:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800622c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006234:	b29b      	uxth	r3, r3
 8006236:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3734      	adds	r7, #52	; 0x34
 800623e:	46bd      	mov	sp, r7
 8006240:	bc80      	pop	{r7}
 8006242:	4770      	bx	lr

08006244 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b0c2      	sub	sp, #264	; 0x108
 8006248:	af00      	add	r7, sp, #0
 800624a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800624e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006252:	6018      	str	r0, [r3, #0]
 8006254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006258:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800625c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800625e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	785b      	ldrb	r3, [r3, #1]
 800626a:	2b01      	cmp	r3, #1
 800626c:	f040 86b7 	bne.w	8006fde <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006274:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	699a      	ldr	r2, [r3, #24]
 800627c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006280:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	429a      	cmp	r2, r3
 800628a:	d908      	bls.n	800629e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800628c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800629c:	e007      	b.n	80062ae <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800629e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80062ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	7b1b      	ldrb	r3, [r3, #12]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d13a      	bne.n	8006334 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80062be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6959      	ldr	r1, [r3, #20]
 80062ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	88da      	ldrh	r2, [r3, #6]
 80062d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062da:	b29b      	uxth	r3, r3
 80062dc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80062e0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80062e4:	6800      	ldr	r0, [r0, #0]
 80062e6:	f001 fc9c 	bl	8007c22 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80062ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	613b      	str	r3, [r7, #16]
 80062f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006304:	b29b      	uxth	r3, r3
 8006306:	461a      	mov	r2, r3
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	4413      	add	r3, r2
 800630c:	613b      	str	r3, [r7, #16]
 800630e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006312:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	011a      	lsls	r2, r3, #4
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	4413      	add	r3, r2
 8006320:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006324:	60fb      	str	r3, [r7, #12]
 8006326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800632a:	b29a      	uxth	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	801a      	strh	r2, [r3, #0]
 8006330:	f000 be1f 	b.w	8006f72 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006338:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	78db      	ldrb	r3, [r3, #3]
 8006340:	2b02      	cmp	r3, #2
 8006342:	f040 8462 	bne.w	8006c0a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800634a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6a1a      	ldr	r2, [r3, #32]
 8006352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	429a      	cmp	r2, r3
 8006360:	f240 83df 	bls.w	8006b22 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006368:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	881b      	ldrh	r3, [r3, #0]
 8006380:	b29b      	uxth	r3, r3
 8006382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800638a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800638e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006392:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800639c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	441a      	add	r2, r3
 80063a8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80063ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063b4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80063b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063bc:	b29b      	uxth	r3, r3
 80063be:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80063c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6a1a      	ldr	r2, [r3, #32]
 80063cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063d0:	1ad2      	subs	r2, r2, r3
 80063d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80063de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4413      	add	r3, r2
 80063f8:	881b      	ldrh	r3, [r3, #0]
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 81c7 	beq.w	8006794 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	633b      	str	r3, [r7, #48]	; 0x30
 8006412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006416:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	785b      	ldrb	r3, [r3, #1]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d177      	bne.n	8006512 <USB_EPStartXfer+0x2ce>
 8006422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006426:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	62bb      	str	r3, [r7, #40]	; 0x28
 800642e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006432:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800643c:	b29b      	uxth	r3, r3
 800643e:	461a      	mov	r2, r3
 8006440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006442:	4413      	add	r3, r2
 8006444:	62bb      	str	r3, [r7, #40]	; 0x28
 8006446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800644a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	011a      	lsls	r2, r3, #4
 8006454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006456:	4413      	add	r3, r2
 8006458:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800645c:	627b      	str	r3, [r7, #36]	; 0x24
 800645e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006460:	881b      	ldrh	r3, [r3, #0]
 8006462:	b29b      	uxth	r3, r3
 8006464:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006468:	b29a      	uxth	r2, r3
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	801a      	strh	r2, [r3, #0]
 800646e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006472:	2b3e      	cmp	r3, #62	; 0x3e
 8006474:	d921      	bls.n	80064ba <USB_EPStartXfer+0x276>
 8006476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800647a:	095b      	lsrs	r3, r3, #5
 800647c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006484:	f003 031f 	and.w	r3, r3, #31
 8006488:	2b00      	cmp	r3, #0
 800648a:	d104      	bne.n	8006496 <USB_EPStartXfer+0x252>
 800648c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006490:	3b01      	subs	r3, #1
 8006492:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	b29a      	uxth	r2, r3
 800649c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	029b      	lsls	r3, r3, #10
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	4313      	orrs	r3, r2
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	801a      	strh	r2, [r3, #0]
 80064b8:	e050      	b.n	800655c <USB_EPStartXfer+0x318>
 80064ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d10a      	bne.n	80064d8 <USB_EPStartXfer+0x294>
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	881b      	ldrh	r3, [r3, #0]
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	801a      	strh	r2, [r3, #0]
 80064d6:	e041      	b.n	800655c <USB_EPStartXfer+0x318>
 80064d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064dc:	085b      	lsrs	r3, r3, #1
 80064de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80064e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d004      	beq.n	80064f8 <USB_EPStartXfer+0x2b4>
 80064ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80064f2:	3301      	adds	r3, #1
 80064f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	881b      	ldrh	r3, [r3, #0]
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006502:	b29b      	uxth	r3, r3
 8006504:	029b      	lsls	r3, r3, #10
 8006506:	b29b      	uxth	r3, r3
 8006508:	4313      	orrs	r3, r2
 800650a:	b29a      	uxth	r2, r3
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	801a      	strh	r2, [r3, #0]
 8006510:	e024      	b.n	800655c <USB_EPStartXfer+0x318>
 8006512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006516:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	785b      	ldrb	r3, [r3, #1]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d11c      	bne.n	800655c <USB_EPStartXfer+0x318>
 8006522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006526:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006530:	b29b      	uxth	r3, r3
 8006532:	461a      	mov	r2, r3
 8006534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006536:	4413      	add	r3, r2
 8006538:	633b      	str	r3, [r7, #48]	; 0x30
 800653a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800653e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	011a      	lsls	r2, r3, #4
 8006548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654a:	4413      	add	r3, r2
 800654c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006550:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006552:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006556:	b29a      	uxth	r2, r3
 8006558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800655c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	895b      	ldrh	r3, [r3, #10]
 8006568:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800656c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006570:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	6959      	ldr	r1, [r3, #20]
 8006578:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800657c:	b29b      	uxth	r3, r3
 800657e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006582:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006586:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800658a:	6800      	ldr	r0, [r0, #0]
 800658c:	f001 fb49 	bl	8007c22 <USB_WritePMA>
            ep->xfer_buff += len;
 8006590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006594:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	695a      	ldr	r2, [r3, #20]
 800659c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065a0:	441a      	add	r2, r3
 80065a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80065ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6a1a      	ldr	r2, [r3, #32]
 80065ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d90f      	bls.n	80065ea <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80065ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6a1a      	ldr	r2, [r3, #32]
 80065d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065da:	1ad2      	subs	r2, r2, r3
 80065dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	621a      	str	r2, [r3, #32]
 80065e8:	e00e      	b.n	8006608 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80065ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80065fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2200      	movs	r2, #0
 8006606:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800660c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	785b      	ldrb	r3, [r3, #1]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d177      	bne.n	8006708 <USB_EPStartXfer+0x4c4>
 8006618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800661c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	61bb      	str	r3, [r7, #24]
 8006624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006628:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006632:	b29b      	uxth	r3, r3
 8006634:	461a      	mov	r2, r3
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	4413      	add	r3, r2
 800663a:	61bb      	str	r3, [r7, #24]
 800663c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	011a      	lsls	r2, r3, #4
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	4413      	add	r3, r2
 800664e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006652:	617b      	str	r3, [r7, #20]
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	b29b      	uxth	r3, r3
 800665a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800665e:	b29a      	uxth	r2, r3
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	801a      	strh	r2, [r3, #0]
 8006664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006668:	2b3e      	cmp	r3, #62	; 0x3e
 800666a:	d921      	bls.n	80066b0 <USB_EPStartXfer+0x46c>
 800666c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006670:	095b      	lsrs	r3, r3, #5
 8006672:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800667a:	f003 031f 	and.w	r3, r3, #31
 800667e:	2b00      	cmp	r3, #0
 8006680:	d104      	bne.n	800668c <USB_EPStartXfer+0x448>
 8006682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006686:	3b01      	subs	r3, #1
 8006688:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	881b      	ldrh	r3, [r3, #0]
 8006690:	b29a      	uxth	r2, r3
 8006692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006696:	b29b      	uxth	r3, r3
 8006698:	029b      	lsls	r3, r3, #10
 800669a:	b29b      	uxth	r3, r3
 800669c:	4313      	orrs	r3, r2
 800669e:	b29b      	uxth	r3, r3
 80066a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	801a      	strh	r2, [r3, #0]
 80066ae:	e056      	b.n	800675e <USB_EPStartXfer+0x51a>
 80066b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10a      	bne.n	80066ce <USB_EPStartXfer+0x48a>
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	b29b      	uxth	r3, r3
 80066be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	801a      	strh	r2, [r3, #0]
 80066cc:	e047      	b.n	800675e <USB_EPStartXfer+0x51a>
 80066ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066d2:	085b      	lsrs	r3, r3, #1
 80066d4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80066d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d004      	beq.n	80066ee <USB_EPStartXfer+0x4aa>
 80066e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066e8:	3301      	adds	r3, #1
 80066ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	029b      	lsls	r3, r3, #10
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	4313      	orrs	r3, r2
 8006700:	b29a      	uxth	r2, r3
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	801a      	strh	r2, [r3, #0]
 8006706:	e02a      	b.n	800675e <USB_EPStartXfer+0x51a>
 8006708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800670c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	785b      	ldrb	r3, [r3, #1]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d122      	bne.n	800675e <USB_EPStartXfer+0x51a>
 8006718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800671c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	623b      	str	r3, [r7, #32]
 8006724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006728:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006732:	b29b      	uxth	r3, r3
 8006734:	461a      	mov	r2, r3
 8006736:	6a3b      	ldr	r3, [r7, #32]
 8006738:	4413      	add	r3, r2
 800673a:	623b      	str	r3, [r7, #32]
 800673c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	011a      	lsls	r2, r3, #4
 800674a:	6a3b      	ldr	r3, [r7, #32]
 800674c:	4413      	add	r3, r2
 800674e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006752:	61fb      	str	r3, [r7, #28]
 8006754:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006758:	b29a      	uxth	r2, r3
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800675e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006762:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	891b      	ldrh	r3, [r3, #8]
 800676a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800676e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6959      	ldr	r1, [r3, #20]
 800677a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800677e:	b29b      	uxth	r3, r3
 8006780:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006784:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006788:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800678c:	6800      	ldr	r0, [r0, #0]
 800678e:	f001 fa48 	bl	8007c22 <USB_WritePMA>
 8006792:	e3ee      	b.n	8006f72 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006798:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	785b      	ldrb	r3, [r3, #1]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d177      	bne.n	8006894 <USB_EPStartXfer+0x650>
 80067a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80067b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067be:	b29b      	uxth	r3, r3
 80067c0:	461a      	mov	r2, r3
 80067c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067c4:	4413      	add	r3, r2
 80067c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80067c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	011a      	lsls	r2, r3, #4
 80067d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067d8:	4413      	add	r3, r2
 80067da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067de:	647b      	str	r3, [r7, #68]	; 0x44
 80067e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067e2:	881b      	ldrh	r3, [r3, #0]
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067ee:	801a      	strh	r2, [r3, #0]
 80067f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067f4:	2b3e      	cmp	r3, #62	; 0x3e
 80067f6:	d921      	bls.n	800683c <USB_EPStartXfer+0x5f8>
 80067f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067fc:	095b      	lsrs	r3, r3, #5
 80067fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006806:	f003 031f 	and.w	r3, r3, #31
 800680a:	2b00      	cmp	r3, #0
 800680c:	d104      	bne.n	8006818 <USB_EPStartXfer+0x5d4>
 800680e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006812:	3b01      	subs	r3, #1
 8006814:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	b29a      	uxth	r2, r3
 800681e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006822:	b29b      	uxth	r3, r3
 8006824:	029b      	lsls	r3, r3, #10
 8006826:	b29b      	uxth	r3, r3
 8006828:	4313      	orrs	r3, r2
 800682a:	b29b      	uxth	r3, r3
 800682c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006834:	b29a      	uxth	r2, r3
 8006836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006838:	801a      	strh	r2, [r3, #0]
 800683a:	e056      	b.n	80068ea <USB_EPStartXfer+0x6a6>
 800683c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10a      	bne.n	800685a <USB_EPStartXfer+0x616>
 8006844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	b29b      	uxth	r3, r3
 800684a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800684e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006852:	b29a      	uxth	r2, r3
 8006854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006856:	801a      	strh	r2, [r3, #0]
 8006858:	e047      	b.n	80068ea <USB_EPStartXfer+0x6a6>
 800685a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800685e:	085b      	lsrs	r3, r3, #1
 8006860:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006864:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b00      	cmp	r3, #0
 800686e:	d004      	beq.n	800687a <USB_EPStartXfer+0x636>
 8006870:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006874:	3301      	adds	r3, #1
 8006876:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800687a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800687c:	881b      	ldrh	r3, [r3, #0]
 800687e:	b29a      	uxth	r2, r3
 8006880:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006884:	b29b      	uxth	r3, r3
 8006886:	029b      	lsls	r3, r3, #10
 8006888:	b29b      	uxth	r3, r3
 800688a:	4313      	orrs	r3, r2
 800688c:	b29a      	uxth	r2, r3
 800688e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006890:	801a      	strh	r2, [r3, #0]
 8006892:	e02a      	b.n	80068ea <USB_EPStartXfer+0x6a6>
 8006894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006898:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	785b      	ldrb	r3, [r3, #1]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d122      	bne.n	80068ea <USB_EPStartXfer+0x6a6>
 80068a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	653b      	str	r3, [r7, #80]	; 0x50
 80068b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068be:	b29b      	uxth	r3, r3
 80068c0:	461a      	mov	r2, r3
 80068c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068c4:	4413      	add	r3, r2
 80068c6:	653b      	str	r3, [r7, #80]	; 0x50
 80068c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	011a      	lsls	r2, r3, #4
 80068d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068d8:	4413      	add	r3, r2
 80068da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80068ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	891b      	ldrh	r3, [r3, #8]
 80068f6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	6959      	ldr	r1, [r3, #20]
 8006906:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800690a:	b29b      	uxth	r3, r3
 800690c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006910:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006914:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006918:	6800      	ldr	r0, [r0, #0]
 800691a:	f001 f982 	bl	8007c22 <USB_WritePMA>
            ep->xfer_buff += len;
 800691e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006922:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	695a      	ldr	r2, [r3, #20]
 800692a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800692e:	441a      	add	r2, r3
 8006930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800693c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	6a1a      	ldr	r2, [r3, #32]
 8006948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800694c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	429a      	cmp	r2, r3
 8006956:	d90f      	bls.n	8006978 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800695c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	6a1a      	ldr	r2, [r3, #32]
 8006964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006968:	1ad2      	subs	r2, r2, r3
 800696a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800696e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	621a      	str	r2, [r3, #32]
 8006976:	e00e      	b.n	8006996 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800697c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800698c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2200      	movs	r2, #0
 8006994:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800699a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	643b      	str	r3, [r7, #64]	; 0x40
 80069a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	785b      	ldrb	r3, [r3, #1]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d177      	bne.n	8006aa2 <USB_EPStartXfer+0x85e>
 80069b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80069be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	461a      	mov	r2, r3
 80069d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d2:	4413      	add	r3, r2
 80069d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80069d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	011a      	lsls	r2, r3, #4
 80069e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e6:	4413      	add	r3, r2
 80069e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069ec:	637b      	str	r3, [r7, #52]	; 0x34
 80069ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f0:	881b      	ldrh	r3, [r3, #0]
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069fc:	801a      	strh	r2, [r3, #0]
 80069fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a02:	2b3e      	cmp	r3, #62	; 0x3e
 8006a04:	d921      	bls.n	8006a4a <USB_EPStartXfer+0x806>
 8006a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a0a:	095b      	lsrs	r3, r3, #5
 8006a0c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a14:	f003 031f 	and.w	r3, r3, #31
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d104      	bne.n	8006a26 <USB_EPStartXfer+0x7e2>
 8006a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a20:	3b01      	subs	r3, #1
 8006a22:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	029b      	lsls	r3, r3, #10
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	4313      	orrs	r3, r2
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a46:	801a      	strh	r2, [r3, #0]
 8006a48:	e050      	b.n	8006aec <USB_EPStartXfer+0x8a8>
 8006a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10a      	bne.n	8006a68 <USB_EPStartXfer+0x824>
 8006a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a64:	801a      	strh	r2, [r3, #0]
 8006a66:	e041      	b.n	8006aec <USB_EPStartXfer+0x8a8>
 8006a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a6c:	085b      	lsrs	r3, r3, #1
 8006a6e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a76:	f003 0301 	and.w	r3, r3, #1
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d004      	beq.n	8006a88 <USB_EPStartXfer+0x844>
 8006a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a82:	3301      	adds	r3, #1
 8006a84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a8a:	881b      	ldrh	r3, [r3, #0]
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	029b      	lsls	r3, r3, #10
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a9e:	801a      	strh	r2, [r3, #0]
 8006aa0:	e024      	b.n	8006aec <USB_EPStartXfer+0x8a8>
 8006aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	785b      	ldrb	r3, [r3, #1]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d11c      	bne.n	8006aec <USB_EPStartXfer+0x8a8>
 8006ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ac6:	4413      	add	r3, r2
 8006ac8:	643b      	str	r3, [r7, #64]	; 0x40
 8006aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ace:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	011a      	lsls	r2, r3, #4
 8006ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ada:	4413      	add	r3, r2
 8006adc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	895b      	ldrh	r3, [r3, #10]
 8006af8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006afc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	6959      	ldr	r1, [r3, #20]
 8006b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006b12:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006b16:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006b1a:	6800      	ldr	r0, [r0, #0]
 8006b1c:	f001 f881 	bl	8007c22 <USB_WritePMA>
 8006b20:	e227      	b.n	8006f72 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	881b      	ldrh	r3, [r3, #0]
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b58:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	441a      	add	r2, r3
 8006b76:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006b7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	461a      	mov	r2, r3
 8006bac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bae:	4413      	add	r3, r2
 8006bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	011a      	lsls	r2, r3, #4
 8006bc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006bc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8006bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bd2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006bd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	891b      	ldrh	r3, [r3, #8]
 8006be0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006be4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006be8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	6959      	ldr	r1, [r3, #20]
 8006bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006bfa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006bfe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006c02:	6800      	ldr	r0, [r0, #0]
 8006c04:	f001 f80d 	bl	8007c22 <USB_WritePMA>
 8006c08:	e1b3      	b.n	8006f72 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6a1a      	ldr	r2, [r3, #32]
 8006c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c1a:	1ad2      	subs	r2, r2, r3
 8006c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f000 80c6 	beq.w	8006ddc <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	673b      	str	r3, [r7, #112]	; 0x70
 8006c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	785b      	ldrb	r3, [r3, #1]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d177      	bne.n	8006d5c <USB_EPStartXfer+0xb18>
 8006c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	461a      	mov	r2, r3
 8006c8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c8c:	4413      	add	r3, r2
 8006c8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	011a      	lsls	r2, r3, #4
 8006c9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ca6:	667b      	str	r3, [r7, #100]	; 0x64
 8006ca8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006caa:	881b      	ldrh	r3, [r3, #0]
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cb6:	801a      	strh	r2, [r3, #0]
 8006cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cbc:	2b3e      	cmp	r3, #62	; 0x3e
 8006cbe:	d921      	bls.n	8006d04 <USB_EPStartXfer+0xac0>
 8006cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc4:	095b      	lsrs	r3, r3, #5
 8006cc6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cce:	f003 031f 	and.w	r3, r3, #31
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d104      	bne.n	8006ce0 <USB_EPStartXfer+0xa9c>
 8006cd6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ce0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ce2:	881b      	ldrh	r3, [r3, #0]
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	029b      	lsls	r3, r3, #10
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d00:	801a      	strh	r2, [r3, #0]
 8006d02:	e050      	b.n	8006da6 <USB_EPStartXfer+0xb62>
 8006d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10a      	bne.n	8006d22 <USB_EPStartXfer+0xade>
 8006d0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d0e:	881b      	ldrh	r3, [r3, #0]
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d1e:	801a      	strh	r2, [r3, #0]
 8006d20:	e041      	b.n	8006da6 <USB_EPStartXfer+0xb62>
 8006d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d26:	085b      	lsrs	r3, r3, #1
 8006d28:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d004      	beq.n	8006d42 <USB_EPStartXfer+0xafe>
 8006d38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d44:	881b      	ldrh	r3, [r3, #0]
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	029b      	lsls	r3, r3, #10
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	4313      	orrs	r3, r2
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d58:	801a      	strh	r2, [r3, #0]
 8006d5a:	e024      	b.n	8006da6 <USB_EPStartXfer+0xb62>
 8006d5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	785b      	ldrb	r3, [r3, #1]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d11c      	bne.n	8006da6 <USB_EPStartXfer+0xb62>
 8006d6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d80:	4413      	add	r3, r2
 8006d82:	673b      	str	r3, [r7, #112]	; 0x70
 8006d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	011a      	lsls	r2, r3, #4
 8006d92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d94:	4413      	add	r3, r2
 8006d96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006da4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006daa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	895b      	ldrh	r3, [r3, #10]
 8006db2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006db6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6959      	ldr	r1, [r3, #20]
 8006dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006dcc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006dd0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006dd4:	6800      	ldr	r0, [r0, #0]
 8006dd6:	f000 ff24 	bl	8007c22 <USB_WritePMA>
 8006dda:	e0ca      	b.n	8006f72 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	785b      	ldrb	r3, [r3, #1]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d177      	bne.n	8006edc <USB_EPStartXfer+0xc98>
 8006dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	461a      	mov	r2, r3
 8006e0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e0c:	4413      	add	r3, r2
 8006e0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	011a      	lsls	r2, r3, #4
 8006e1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e20:	4413      	add	r3, r2
 8006e22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e26:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e36:	801a      	strh	r2, [r3, #0]
 8006e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e3c:	2b3e      	cmp	r3, #62	; 0x3e
 8006e3e:	d921      	bls.n	8006e84 <USB_EPStartXfer+0xc40>
 8006e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e44:	095b      	lsrs	r3, r3, #5
 8006e46:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e4e:	f003 031f 	and.w	r3, r3, #31
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d104      	bne.n	8006e60 <USB_EPStartXfer+0xc1c>
 8006e56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e62:	881b      	ldrh	r3, [r3, #0]
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	029b      	lsls	r3, r3, #10
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	4313      	orrs	r3, r2
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e80:	801a      	strh	r2, [r3, #0]
 8006e82:	e05c      	b.n	8006f3e <USB_EPStartXfer+0xcfa>
 8006e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10a      	bne.n	8006ea2 <USB_EPStartXfer+0xc5e>
 8006e8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e8e:	881b      	ldrh	r3, [r3, #0]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e9e:	801a      	strh	r2, [r3, #0]
 8006ea0:	e04d      	b.n	8006f3e <USB_EPStartXfer+0xcfa>
 8006ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ea6:	085b      	lsrs	r3, r3, #1
 8006ea8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eb0:	f003 0301 	and.w	r3, r3, #1
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d004      	beq.n	8006ec2 <USB_EPStartXfer+0xc7e>
 8006eb8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ec2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ec4:	881b      	ldrh	r3, [r3, #0]
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	029b      	lsls	r3, r3, #10
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ed8:	801a      	strh	r2, [r3, #0]
 8006eda:	e030      	b.n	8006f3e <USB_EPStartXfer+0xcfa>
 8006edc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	785b      	ldrb	r3, [r3, #1]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d128      	bne.n	8006f3e <USB_EPStartXfer+0xcfa>
 8006eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006efe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f10:	4413      	add	r3, r2
 8006f12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	011a      	lsls	r2, r3, #4
 8006f24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f28:	4413      	add	r3, r2
 8006f2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f3c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	891b      	ldrh	r3, [r3, #8]
 8006f4a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	6959      	ldr	r1, [r3, #20]
 8006f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006f64:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006f68:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006f6c:	6800      	ldr	r0, [r0, #0]
 8006f6e:	f000 fe58 	bl	8007c22 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006f72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	881b      	ldrh	r3, [r3, #0]
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f98:	817b      	strh	r3, [r7, #10]
 8006f9a:	897b      	ldrh	r3, [r7, #10]
 8006f9c:	f083 0310 	eor.w	r3, r3, #16
 8006fa0:	817b      	strh	r3, [r7, #10]
 8006fa2:	897b      	ldrh	r3, [r7, #10]
 8006fa4:	f083 0320 	eor.w	r3, r3, #32
 8006fa8:	817b      	strh	r3, [r7, #10]
 8006faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	441a      	add	r2, r3
 8006fc4:	897b      	ldrh	r3, [r7, #10]
 8006fc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	8013      	strh	r3, [r2, #0]
 8006fda:	f000 bcde 	b.w	800799a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006fde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	7b1b      	ldrb	r3, [r3, #12]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f040 80bb 	bne.w	8007166 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	699a      	ldr	r2, [r3, #24]
 8006ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	429a      	cmp	r2, r3
 800700a:	d917      	bls.n	800703c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800700c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800701c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007020:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	699a      	ldr	r2, [r3, #24]
 8007028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800702c:	1ad2      	subs	r2, r2, r3
 800702e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	619a      	str	r2, [r3, #24]
 800703a:	e00e      	b.n	800705a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800703c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007040:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800704c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007050:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2200      	movs	r2, #0
 8007058:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800705a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800705e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800706c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007076:	b29b      	uxth	r3, r3
 8007078:	461a      	mov	r2, r3
 800707a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800707e:	4413      	add	r3, r2
 8007080:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	011a      	lsls	r2, r3, #4
 8007092:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007096:	4413      	add	r3, r2
 8007098:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800709c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80070a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070a4:	881b      	ldrh	r3, [r3, #0]
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070b2:	801a      	strh	r2, [r3, #0]
 80070b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070b8:	2b3e      	cmp	r3, #62	; 0x3e
 80070ba:	d924      	bls.n	8007106 <USB_EPStartXfer+0xec2>
 80070bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070c0:	095b      	lsrs	r3, r3, #5
 80070c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ca:	f003 031f 	and.w	r3, r3, #31
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d104      	bne.n	80070dc <USB_EPStartXfer+0xe98>
 80070d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80070d6:	3b01      	subs	r3, #1
 80070d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070e0:	881b      	ldrh	r3, [r3, #0]
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	029b      	lsls	r3, r3, #10
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	4313      	orrs	r3, r2
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007100:	801a      	strh	r2, [r3, #0]
 8007102:	f000 bc10 	b.w	8007926 <USB_EPStartXfer+0x16e2>
 8007106:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10c      	bne.n	8007128 <USB_EPStartXfer+0xee4>
 800710e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007112:	881b      	ldrh	r3, [r3, #0]
 8007114:	b29b      	uxth	r3, r3
 8007116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800711a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800711e:	b29a      	uxth	r2, r3
 8007120:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007124:	801a      	strh	r2, [r3, #0]
 8007126:	e3fe      	b.n	8007926 <USB_EPStartXfer+0x16e2>
 8007128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800712c:	085b      	lsrs	r3, r3, #1
 800712e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007136:	f003 0301 	and.w	r3, r3, #1
 800713a:	2b00      	cmp	r3, #0
 800713c:	d004      	beq.n	8007148 <USB_EPStartXfer+0xf04>
 800713e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007142:	3301      	adds	r3, #1
 8007144:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007148:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800714c:	881b      	ldrh	r3, [r3, #0]
 800714e:	b29a      	uxth	r2, r3
 8007150:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007154:	b29b      	uxth	r3, r3
 8007156:	029b      	lsls	r3, r3, #10
 8007158:	b29b      	uxth	r3, r3
 800715a:	4313      	orrs	r3, r2
 800715c:	b29a      	uxth	r2, r3
 800715e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007162:	801a      	strh	r2, [r3, #0]
 8007164:	e3df      	b.n	8007926 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800716a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	78db      	ldrb	r3, [r3, #3]
 8007172:	2b02      	cmp	r3, #2
 8007174:	f040 8218 	bne.w	80075a8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800717c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	785b      	ldrb	r3, [r3, #1]
 8007184:	2b00      	cmp	r3, #0
 8007186:	f040 809d 	bne.w	80072c4 <USB_EPStartXfer+0x1080>
 800718a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800718e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800719c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	461a      	mov	r2, r3
 80071aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071ae:	4413      	add	r3, r2
 80071b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80071b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	011a      	lsls	r2, r3, #4
 80071c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071c6:	4413      	add	r3, r2
 80071c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80071d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071d4:	881b      	ldrh	r3, [r3, #0]
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071dc:	b29a      	uxth	r2, r3
 80071de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071e2:	801a      	strh	r2, [r3, #0]
 80071e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	2b3e      	cmp	r3, #62	; 0x3e
 80071f2:	d92b      	bls.n	800724c <USB_EPStartXfer+0x1008>
 80071f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	095b      	lsrs	r3, r3, #5
 8007202:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800720a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	f003 031f 	and.w	r3, r3, #31
 8007216:	2b00      	cmp	r3, #0
 8007218:	d104      	bne.n	8007224 <USB_EPStartXfer+0xfe0>
 800721a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800721e:	3b01      	subs	r3, #1
 8007220:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007224:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007228:	881b      	ldrh	r3, [r3, #0]
 800722a:	b29a      	uxth	r2, r3
 800722c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007230:	b29b      	uxth	r3, r3
 8007232:	029b      	lsls	r3, r3, #10
 8007234:	b29b      	uxth	r3, r3
 8007236:	4313      	orrs	r3, r2
 8007238:	b29b      	uxth	r3, r3
 800723a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800723e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007242:	b29a      	uxth	r2, r3
 8007244:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007248:	801a      	strh	r2, [r3, #0]
 800724a:	e070      	b.n	800732e <USB_EPStartXfer+0x10ea>
 800724c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007250:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d10c      	bne.n	8007276 <USB_EPStartXfer+0x1032>
 800725c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007260:	881b      	ldrh	r3, [r3, #0]
 8007262:	b29b      	uxth	r3, r3
 8007264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800726c:	b29a      	uxth	r2, r3
 800726e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007272:	801a      	strh	r2, [r3, #0]
 8007274:	e05b      	b.n	800732e <USB_EPStartXfer+0x10ea>
 8007276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800727a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	085b      	lsrs	r3, r3, #1
 8007284:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800728c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	f003 0301 	and.w	r3, r3, #1
 8007298:	2b00      	cmp	r3, #0
 800729a:	d004      	beq.n	80072a6 <USB_EPStartXfer+0x1062>
 800729c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072a0:	3301      	adds	r3, #1
 80072a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80072a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80072aa:	881b      	ldrh	r3, [r3, #0]
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	029b      	lsls	r3, r3, #10
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	4313      	orrs	r3, r2
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80072c0:	801a      	strh	r2, [r3, #0]
 80072c2:	e034      	b.n	800732e <USB_EPStartXfer+0x10ea>
 80072c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	785b      	ldrb	r3, [r3, #1]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d12c      	bne.n	800732e <USB_EPStartXfer+0x10ea>
 80072d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	461a      	mov	r2, r3
 80072f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80072f8:	4413      	add	r3, r2
 80072fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007302:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	011a      	lsls	r2, r3, #4
 800730c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007310:	4413      	add	r3, r2
 8007312:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007316:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800731a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800731e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	b29a      	uxth	r2, r3
 8007328:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800732c:	801a      	strh	r2, [r3, #0]
 800732e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007332:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800733c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	785b      	ldrb	r3, [r3, #1]
 8007348:	2b00      	cmp	r3, #0
 800734a:	f040 809d 	bne.w	8007488 <USB_EPStartXfer+0x1244>
 800734e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007352:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800735c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007360:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800736a:	b29b      	uxth	r3, r3
 800736c:	461a      	mov	r2, r3
 800736e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007372:	4413      	add	r3, r2
 8007374:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800737c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	011a      	lsls	r2, r3, #4
 8007386:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800738a:	4413      	add	r3, r2
 800738c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007390:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007394:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007398:	881b      	ldrh	r3, [r3, #0]
 800739a:	b29b      	uxth	r3, r3
 800739c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073a6:	801a      	strh	r2, [r3, #0]
 80073a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	2b3e      	cmp	r3, #62	; 0x3e
 80073b6:	d92b      	bls.n	8007410 <USB_EPStartXfer+0x11cc>
 80073b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	095b      	lsrs	r3, r3, #5
 80073c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	f003 031f 	and.w	r3, r3, #31
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d104      	bne.n	80073e8 <USB_EPStartXfer+0x11a4>
 80073de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073e2:	3b01      	subs	r3, #1
 80073e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073ec:	881b      	ldrh	r3, [r3, #0]
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	029b      	lsls	r3, r3, #10
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	4313      	orrs	r3, r2
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007406:	b29a      	uxth	r2, r3
 8007408:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800740c:	801a      	strh	r2, [r3, #0]
 800740e:	e069      	b.n	80074e4 <USB_EPStartXfer+0x12a0>
 8007410:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007414:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10c      	bne.n	800743a <USB_EPStartXfer+0x11f6>
 8007420:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	b29b      	uxth	r3, r3
 8007428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800742c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007430:	b29a      	uxth	r2, r3
 8007432:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007436:	801a      	strh	r2, [r3, #0]
 8007438:	e054      	b.n	80074e4 <USB_EPStartXfer+0x12a0>
 800743a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800743e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	085b      	lsrs	r3, r3, #1
 8007448:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800744c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	f003 0301 	and.w	r3, r3, #1
 800745c:	2b00      	cmp	r3, #0
 800745e:	d004      	beq.n	800746a <USB_EPStartXfer+0x1226>
 8007460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007464:	3301      	adds	r3, #1
 8007466:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800746a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800746e:	881b      	ldrh	r3, [r3, #0]
 8007470:	b29a      	uxth	r2, r3
 8007472:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007476:	b29b      	uxth	r3, r3
 8007478:	029b      	lsls	r3, r3, #10
 800747a:	b29b      	uxth	r3, r3
 800747c:	4313      	orrs	r3, r2
 800747e:	b29a      	uxth	r2, r3
 8007480:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007484:	801a      	strh	r2, [r3, #0]
 8007486:	e02d      	b.n	80074e4 <USB_EPStartXfer+0x12a0>
 8007488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800748c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	785b      	ldrb	r3, [r3, #1]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d125      	bne.n	80074e4 <USB_EPStartXfer+0x12a0>
 8007498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800749c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	461a      	mov	r2, r3
 80074aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80074ae:	4413      	add	r3, r2
 80074b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80074b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	011a      	lsls	r2, r3, #4
 80074c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80074c6:	4413      	add	r3, r2
 80074c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80074d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	b29a      	uxth	r2, r3
 80074de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80074e2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80074e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	69db      	ldr	r3, [r3, #28]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f000 8218 	beq.w	8007926 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80074f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4413      	add	r3, r2
 8007510:	881b      	ldrh	r3, [r3, #0]
 8007512:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007516:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800751a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d005      	beq.n	800752e <USB_EPStartXfer+0x12ea>
 8007522:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10d      	bne.n	800754a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800752e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007536:	2b00      	cmp	r3, #0
 8007538:	f040 81f5 	bne.w	8007926 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800753c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007544:	2b00      	cmp	r3, #0
 8007546:	f040 81ee 	bne.w	8007926 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800754a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800754e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007558:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	4413      	add	r3, r2
 8007564:	881b      	ldrh	r3, [r3, #0]
 8007566:	b29b      	uxth	r3, r3
 8007568:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800756c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007570:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007578:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	441a      	add	r2, r3
 800758e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007592:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007596:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800759a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800759e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	8013      	strh	r3, [r2, #0]
 80075a6:	e1be      	b.n	8007926 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80075a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	78db      	ldrb	r3, [r3, #3]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	f040 81b4 	bne.w	8007922 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80075ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	699a      	ldr	r2, [r3, #24]
 80075c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d917      	bls.n	8007606 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80075d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80075e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	699a      	ldr	r2, [r3, #24]
 80075f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075f6:	1ad2      	subs	r2, r2, r3
 80075f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	619a      	str	r2, [r3, #24]
 8007604:	e00e      	b.n	8007624 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800760a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800761a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2200      	movs	r2, #0
 8007622:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007628:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	785b      	ldrb	r3, [r3, #1]
 8007630:	2b00      	cmp	r3, #0
 8007632:	f040 8085 	bne.w	8007740 <USB_EPStartXfer+0x14fc>
 8007636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800763a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007648:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007652:	b29b      	uxth	r3, r3
 8007654:	461a      	mov	r2, r3
 8007656:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800765a:	4413      	add	r3, r2
 800765c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	011a      	lsls	r2, r3, #4
 800766e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007672:	4413      	add	r3, r2
 8007674:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007678:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800767c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007680:	881b      	ldrh	r3, [r3, #0]
 8007682:	b29b      	uxth	r3, r3
 8007684:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007688:	b29a      	uxth	r2, r3
 800768a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800768e:	801a      	strh	r2, [r3, #0]
 8007690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007694:	2b3e      	cmp	r3, #62	; 0x3e
 8007696:	d923      	bls.n	80076e0 <USB_EPStartXfer+0x149c>
 8007698:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800769c:	095b      	lsrs	r3, r3, #5
 800769e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80076a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076a6:	f003 031f 	and.w	r3, r3, #31
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d104      	bne.n	80076b8 <USB_EPStartXfer+0x1474>
 80076ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076b2:	3b01      	subs	r3, #1
 80076b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80076b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80076bc:	881b      	ldrh	r3, [r3, #0]
 80076be:	b29a      	uxth	r2, r3
 80076c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	029b      	lsls	r3, r3, #10
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	4313      	orrs	r3, r2
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80076dc:	801a      	strh	r2, [r3, #0]
 80076de:	e060      	b.n	80077a2 <USB_EPStartXfer+0x155e>
 80076e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d10c      	bne.n	8007702 <USB_EPStartXfer+0x14be>
 80076e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80076ec:	881b      	ldrh	r3, [r3, #0]
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80076fe:	801a      	strh	r2, [r3, #0]
 8007700:	e04f      	b.n	80077a2 <USB_EPStartXfer+0x155e>
 8007702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007706:	085b      	lsrs	r3, r3, #1
 8007708:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800770c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007710:	f003 0301 	and.w	r3, r3, #1
 8007714:	2b00      	cmp	r3, #0
 8007716:	d004      	beq.n	8007722 <USB_EPStartXfer+0x14de>
 8007718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800771c:	3301      	adds	r3, #1
 800771e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007722:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007726:	881b      	ldrh	r3, [r3, #0]
 8007728:	b29a      	uxth	r2, r3
 800772a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800772e:	b29b      	uxth	r3, r3
 8007730:	029b      	lsls	r3, r3, #10
 8007732:	b29b      	uxth	r3, r3
 8007734:	4313      	orrs	r3, r2
 8007736:	b29a      	uxth	r2, r3
 8007738:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800773c:	801a      	strh	r2, [r3, #0]
 800773e:	e030      	b.n	80077a2 <USB_EPStartXfer+0x155e>
 8007740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	785b      	ldrb	r3, [r3, #1]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d128      	bne.n	80077a2 <USB_EPStartXfer+0x155e>
 8007750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007754:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800775e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007762:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800776c:	b29b      	uxth	r3, r3
 800776e:	461a      	mov	r2, r3
 8007770:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007774:	4413      	add	r3, r2
 8007776:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800777a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800777e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	011a      	lsls	r2, r3, #4
 8007788:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800778c:	4413      	add	r3, r2
 800778e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007792:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800779a:	b29a      	uxth	r2, r3
 800779c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80077a0:	801a      	strh	r2, [r3, #0]
 80077a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80077b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	785b      	ldrb	r3, [r3, #1]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f040 8085 	bne.w	80078cc <USB_EPStartXfer+0x1688>
 80077c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80077d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077de:	b29b      	uxth	r3, r3
 80077e0:	461a      	mov	r2, r3
 80077e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80077e6:	4413      	add	r3, r2
 80077e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80077ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	011a      	lsls	r2, r3, #4
 80077fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80077fe:	4413      	add	r3, r2
 8007800:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007804:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007808:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800780c:	881b      	ldrh	r3, [r3, #0]
 800780e:	b29b      	uxth	r3, r3
 8007810:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007814:	b29a      	uxth	r2, r3
 8007816:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800781a:	801a      	strh	r2, [r3, #0]
 800781c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007820:	2b3e      	cmp	r3, #62	; 0x3e
 8007822:	d923      	bls.n	800786c <USB_EPStartXfer+0x1628>
 8007824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007828:	095b      	lsrs	r3, r3, #5
 800782a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800782e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007832:	f003 031f 	and.w	r3, r3, #31
 8007836:	2b00      	cmp	r3, #0
 8007838:	d104      	bne.n	8007844 <USB_EPStartXfer+0x1600>
 800783a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800783e:	3b01      	subs	r3, #1
 8007840:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007844:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007848:	881b      	ldrh	r3, [r3, #0]
 800784a:	b29a      	uxth	r2, r3
 800784c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007850:	b29b      	uxth	r3, r3
 8007852:	029b      	lsls	r3, r3, #10
 8007854:	b29b      	uxth	r3, r3
 8007856:	4313      	orrs	r3, r2
 8007858:	b29b      	uxth	r3, r3
 800785a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800785e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007862:	b29a      	uxth	r2, r3
 8007864:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007868:	801a      	strh	r2, [r3, #0]
 800786a:	e05c      	b.n	8007926 <USB_EPStartXfer+0x16e2>
 800786c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007870:	2b00      	cmp	r3, #0
 8007872:	d10c      	bne.n	800788e <USB_EPStartXfer+0x164a>
 8007874:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007878:	881b      	ldrh	r3, [r3, #0]
 800787a:	b29b      	uxth	r3, r3
 800787c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007880:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007884:	b29a      	uxth	r2, r3
 8007886:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800788a:	801a      	strh	r2, [r3, #0]
 800788c:	e04b      	b.n	8007926 <USB_EPStartXfer+0x16e2>
 800788e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007892:	085b      	lsrs	r3, r3, #1
 8007894:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007898:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800789c:	f003 0301 	and.w	r3, r3, #1
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d004      	beq.n	80078ae <USB_EPStartXfer+0x166a>
 80078a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078a8:	3301      	adds	r3, #1
 80078aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80078ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80078b2:	881b      	ldrh	r3, [r3, #0]
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	029b      	lsls	r3, r3, #10
 80078be:	b29b      	uxth	r3, r3
 80078c0:	4313      	orrs	r3, r2
 80078c2:	b29a      	uxth	r2, r3
 80078c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80078c8:	801a      	strh	r2, [r3, #0]
 80078ca:	e02c      	b.n	8007926 <USB_EPStartXfer+0x16e2>
 80078cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	785b      	ldrb	r3, [r3, #1]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d124      	bne.n	8007926 <USB_EPStartXfer+0x16e2>
 80078dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	461a      	mov	r2, r3
 80078ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80078f2:	4413      	add	r3, r2
 80078f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80078f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	011a      	lsls	r2, r3, #4
 8007906:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800790a:	4413      	add	r3, r2
 800790c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007910:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007914:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007918:	b29a      	uxth	r2, r3
 800791a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800791e:	801a      	strh	r2, [r3, #0]
 8007920:	e001      	b.n	8007926 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e03a      	b.n	800799c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800792a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	4413      	add	r3, r2
 8007940:	881b      	ldrh	r3, [r3, #0]
 8007942:	b29b      	uxth	r3, r3
 8007944:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800794c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007950:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007954:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007958:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800795c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007960:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007964:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800796c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007976:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	441a      	add	r2, r3
 8007982:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800798a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800798e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007996:	b29b      	uxth	r3, r3
 8007998:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80079a6:	b480      	push	{r7}
 80079a8:	b085      	sub	sp, #20
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
 80079ae:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	785b      	ldrb	r3, [r3, #1]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d020      	beq.n	80079fa <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	4413      	add	r3, r2
 80079c2:	881b      	ldrh	r3, [r3, #0]
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079ce:	81bb      	strh	r3, [r7, #12]
 80079d0:	89bb      	ldrh	r3, [r7, #12]
 80079d2:	f083 0310 	eor.w	r3, r3, #16
 80079d6:	81bb      	strh	r3, [r7, #12]
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	441a      	add	r2, r3
 80079e2:	89bb      	ldrh	r3, [r7, #12]
 80079e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	8013      	strh	r3, [r2, #0]
 80079f8:	e01f      	b.n	8007a3a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4413      	add	r3, r2
 8007a04:	881b      	ldrh	r3, [r3, #0]
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a10:	81fb      	strh	r3, [r7, #14]
 8007a12:	89fb      	ldrh	r3, [r7, #14]
 8007a14:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a18:	81fb      	strh	r3, [r7, #14]
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	441a      	add	r2, r3
 8007a24:	89fb      	ldrh	r3, [r7, #14]
 8007a26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3714      	adds	r7, #20
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bc80      	pop	{r7}
 8007a44:	4770      	bx	lr

08007a46 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b087      	sub	sp, #28
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
 8007a4e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	7b1b      	ldrb	r3, [r3, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f040 809d 	bne.w	8007b94 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	785b      	ldrb	r3, [r3, #1]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d04c      	beq.n	8007afc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4413      	add	r3, r2
 8007a6c:	881b      	ldrh	r3, [r3, #0]
 8007a6e:	823b      	strh	r3, [r7, #16]
 8007a70:	8a3b      	ldrh	r3, [r7, #16]
 8007a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d01b      	beq.n	8007ab2 <USB_EPClearStall+0x6c>
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4413      	add	r3, r2
 8007a84:	881b      	ldrh	r3, [r3, #0]
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a90:	81fb      	strh	r3, [r7, #14]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	441a      	add	r2, r3
 8007a9c:	89fb      	ldrh	r3, [r7, #14]
 8007a9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aaa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	78db      	ldrb	r3, [r3, #3]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d06c      	beq.n	8007b94 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4413      	add	r3, r2
 8007ac4:	881b      	ldrh	r3, [r3, #0]
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007acc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ad0:	81bb      	strh	r3, [r7, #12]
 8007ad2:	89bb      	ldrh	r3, [r7, #12]
 8007ad4:	f083 0320 	eor.w	r3, r3, #32
 8007ad8:	81bb      	strh	r3, [r7, #12]
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	441a      	add	r2, r3
 8007ae4:	89bb      	ldrh	r3, [r7, #12]
 8007ae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	8013      	strh	r3, [r2, #0]
 8007afa:	e04b      	b.n	8007b94 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	4413      	add	r3, r2
 8007b06:	881b      	ldrh	r3, [r3, #0]
 8007b08:	82fb      	strh	r3, [r7, #22]
 8007b0a:	8afb      	ldrh	r3, [r7, #22]
 8007b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d01b      	beq.n	8007b4c <USB_EPClearStall+0x106>
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	4413      	add	r3, r2
 8007b1e:	881b      	ldrh	r3, [r3, #0]
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b2a:	82bb      	strh	r3, [r7, #20]
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	441a      	add	r2, r3
 8007b36:	8abb      	ldrh	r3, [r7, #20]
 8007b38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	4413      	add	r3, r2
 8007b56:	881b      	ldrh	r3, [r3, #0]
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b62:	827b      	strh	r3, [r7, #18]
 8007b64:	8a7b      	ldrh	r3, [r7, #18]
 8007b66:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b6a:	827b      	strh	r3, [r7, #18]
 8007b6c:	8a7b      	ldrh	r3, [r7, #18]
 8007b6e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007b72:	827b      	strh	r3, [r7, #18]
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	441a      	add	r2, r3
 8007b7e:	8a7b      	ldrh	r3, [r7, #18]
 8007b80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	371c      	adds	r7, #28
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bc80      	pop	{r7}
 8007b9e:	4770      	bx	lr

08007ba0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007bac:	78fb      	ldrb	r3, [r7, #3]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d103      	bne.n	8007bba <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2280      	movs	r2, #128	; 0x80
 8007bb6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bc80      	pop	{r7}
 8007bc4:	4770      	bx	lr

08007bc6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007bc6:	b480      	push	{r7}
 8007bc8:	b083      	sub	sp, #12
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bc80      	pop	{r7}
 8007bd8:	4770      	bx	lr

08007bda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007bda:	b480      	push	{r7}
 8007bdc:	b083      	sub	sp, #12
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bc80      	pop	{r7}
 8007bec:	4770      	bx	lr

08007bee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007bee:	b480      	push	{r7}
 8007bf0:	b085      	sub	sp, #20
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007c00:	68fb      	ldr	r3, [r7, #12]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3714      	adds	r7, #20
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bc80      	pop	{r7}
 8007c0a:	4770      	bx	lr

08007c0c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bc80      	pop	{r7}
 8007c20:	4770      	bx	lr

08007c22 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007c22:	b480      	push	{r7}
 8007c24:	b08b      	sub	sp, #44	; 0x2c
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	60f8      	str	r0, [r7, #12]
 8007c2a:	60b9      	str	r1, [r7, #8]
 8007c2c:	4611      	mov	r1, r2
 8007c2e:	461a      	mov	r2, r3
 8007c30:	460b      	mov	r3, r1
 8007c32:	80fb      	strh	r3, [r7, #6]
 8007c34:	4613      	mov	r3, r2
 8007c36:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007c38:	88bb      	ldrh	r3, [r7, #4]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	085b      	lsrs	r3, r3, #1
 8007c3e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007c48:	88fb      	ldrh	r3, [r7, #6]
 8007c4a:	005a      	lsls	r2, r3, #1
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	4413      	add	r3, r2
 8007c50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c54:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	627b      	str	r3, [r7, #36]	; 0x24
 8007c5a:	e01e      	b.n	8007c9a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	3301      	adds	r3, #1
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	021b      	lsls	r3, r3, #8
 8007c6a:	b21a      	sxth	r2, r3
 8007c6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c70:	4313      	orrs	r3, r2
 8007c72:	b21b      	sxth	r3, r3
 8007c74:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007c76:	6a3b      	ldr	r3, [r7, #32]
 8007c78:	8a7a      	ldrh	r2, [r7, #18]
 8007c7a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007c7c:	6a3b      	ldr	r3, [r7, #32]
 8007c7e:	3302      	adds	r3, #2
 8007c80:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007c82:	6a3b      	ldr	r3, [r7, #32]
 8007c84:	3302      	adds	r3, #2
 8007c86:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	3301      	adds	r3, #1
 8007c92:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c96:	3b01      	subs	r3, #1
 8007c98:	627b      	str	r3, [r7, #36]	; 0x24
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1dd      	bne.n	8007c5c <USB_WritePMA+0x3a>
  }
}
 8007ca0:	bf00      	nop
 8007ca2:	bf00      	nop
 8007ca4:	372c      	adds	r7, #44	; 0x2c
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bc80      	pop	{r7}
 8007caa:	4770      	bx	lr

08007cac <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b08b      	sub	sp, #44	; 0x2c
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	4611      	mov	r1, r2
 8007cb8:	461a      	mov	r2, r3
 8007cba:	460b      	mov	r3, r1
 8007cbc:	80fb      	strh	r3, [r7, #6]
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007cc2:	88bb      	ldrh	r3, [r7, #4]
 8007cc4:	085b      	lsrs	r3, r3, #1
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007cd2:	88fb      	ldrh	r3, [r7, #6]
 8007cd4:	005a      	lsls	r2, r3, #1
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	4413      	add	r3, r2
 8007cda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cde:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8007ce4:	e01b      	b.n	8007d1e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007ce6:	6a3b      	ldr	r3, [r7, #32]
 8007ce8:	881b      	ldrh	r3, [r3, #0]
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007cee:	6a3b      	ldr	r3, [r7, #32]
 8007cf0:	3302      	adds	r3, #2
 8007cf2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	b2da      	uxtb	r2, r3
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	0a1b      	lsrs	r3, r3, #8
 8007d06:	b2da      	uxtb	r2, r3
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007d12:	6a3b      	ldr	r3, [r7, #32]
 8007d14:	3302      	adds	r3, #2
 8007d16:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1e0      	bne.n	8007ce6 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007d24:	88bb      	ldrh	r3, [r7, #4]
 8007d26:	f003 0301 	and.w	r3, r3, #1
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d007      	beq.n	8007d40 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007d30:	6a3b      	ldr	r3, [r7, #32]
 8007d32:	881b      	ldrh	r3, [r3, #0]
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	b2da      	uxtb	r2, r3
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	701a      	strb	r2, [r3, #0]
  }
}
 8007d40:	bf00      	nop
 8007d42:	372c      	adds	r7, #44	; 0x2c
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bc80      	pop	{r7}
 8007d48:	4770      	bx	lr

08007d4a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b084      	sub	sp, #16
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
 8007d52:	460b      	mov	r3, r1
 8007d54:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007d56:	2300      	movs	r3, #0
 8007d58:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	7c1b      	ldrb	r3, [r3, #16]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d115      	bne.n	8007d8e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007d62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d66:	2202      	movs	r2, #2
 8007d68:	2181      	movs	r1, #129	; 0x81
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f001 fe8f 	bl	8009a8e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007d76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	2101      	movs	r1, #1
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f001 fe85 	bl	8009a8e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007d8c:	e012      	b.n	8007db4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007d8e:	2340      	movs	r3, #64	; 0x40
 8007d90:	2202      	movs	r2, #2
 8007d92:	2181      	movs	r1, #129	; 0x81
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f001 fe7a 	bl	8009a8e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007da0:	2340      	movs	r3, #64	; 0x40
 8007da2:	2202      	movs	r2, #2
 8007da4:	2101      	movs	r1, #1
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f001 fe71 	bl	8009a8e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007db4:	2308      	movs	r3, #8
 8007db6:	2203      	movs	r2, #3
 8007db8:	2182      	movs	r1, #130	; 0x82
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f001 fe67 	bl	8009a8e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007dc6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007dca:	f001 ff87 	bl	8009cdc <USBD_static_malloc>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d102      	bne.n	8007de6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007de0:	2301      	movs	r3, #1
 8007de2:	73fb      	strb	r3, [r7, #15]
 8007de4:	e026      	b.n	8007e34 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dec:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	7c1b      	ldrb	r3, [r3, #16]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d109      	bne.n	8007e24 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e1a:	2101      	movs	r1, #1
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f001 ff27 	bl	8009c70 <USBD_LL_PrepareReceive>
 8007e22:	e007      	b.n	8007e34 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e2a:	2340      	movs	r3, #64	; 0x40
 8007e2c:	2101      	movs	r1, #1
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f001 ff1e 	bl	8009c70 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b084      	sub	sp, #16
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
 8007e46:	460b      	mov	r3, r1
 8007e48:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007e4e:	2181      	movs	r1, #129	; 0x81
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f001 fe42 	bl	8009ada <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007e5c:	2101      	movs	r1, #1
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f001 fe3b 	bl	8009ada <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007e6c:	2182      	movs	r1, #130	; 0x82
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f001 fe33 	bl	8009ada <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00e      	beq.n	8007ea2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e94:	4618      	mov	r0, r3
 8007e96:	f001 ff2d 	bl	8009cf4 <USBD_static_free>
    pdev->pClassData = NULL;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b086      	sub	sp, #24
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ebc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d039      	beq.n	8007f4a <USBD_CDC_Setup+0x9e>
 8007ed6:	2b20      	cmp	r3, #32
 8007ed8:	d17f      	bne.n	8007fda <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	88db      	ldrh	r3, [r3, #6]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d029      	beq.n	8007f36 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	b25b      	sxtb	r3, r3
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	da11      	bge.n	8007f10 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	683a      	ldr	r2, [r7, #0]
 8007ef6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007ef8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007efa:	683a      	ldr	r2, [r7, #0]
 8007efc:	88d2      	ldrh	r2, [r2, #6]
 8007efe:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007f00:	6939      	ldr	r1, [r7, #16]
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	88db      	ldrh	r3, [r3, #6]
 8007f06:	461a      	mov	r2, r3
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f001 fa0a 	bl	8009322 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007f0e:	e06b      	b.n	8007fe8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	785a      	ldrb	r2, [r3, #1]
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	88db      	ldrh	r3, [r3, #6]
 8007f1e:	b2da      	uxtb	r2, r3
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007f26:	6939      	ldr	r1, [r7, #16]
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	88db      	ldrh	r3, [r3, #6]
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f001 fa25 	bl	800937e <USBD_CtlPrepareRx>
      break;
 8007f34:	e058      	b.n	8007fe8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	683a      	ldr	r2, [r7, #0]
 8007f40:	7850      	ldrb	r0, [r2, #1]
 8007f42:	2200      	movs	r2, #0
 8007f44:	6839      	ldr	r1, [r7, #0]
 8007f46:	4798      	blx	r3
      break;
 8007f48:	e04e      	b.n	8007fe8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	785b      	ldrb	r3, [r3, #1]
 8007f4e:	2b0b      	cmp	r3, #11
 8007f50:	d02e      	beq.n	8007fb0 <USBD_CDC_Setup+0x104>
 8007f52:	2b0b      	cmp	r3, #11
 8007f54:	dc38      	bgt.n	8007fc8 <USBD_CDC_Setup+0x11c>
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d002      	beq.n	8007f60 <USBD_CDC_Setup+0xb4>
 8007f5a:	2b0a      	cmp	r3, #10
 8007f5c:	d014      	beq.n	8007f88 <USBD_CDC_Setup+0xdc>
 8007f5e:	e033      	b.n	8007fc8 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f66:	2b03      	cmp	r3, #3
 8007f68:	d107      	bne.n	8007f7a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007f6a:	f107 030c 	add.w	r3, r7, #12
 8007f6e:	2202      	movs	r2, #2
 8007f70:	4619      	mov	r1, r3
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f001 f9d5 	bl	8009322 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f78:	e02e      	b.n	8007fd8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007f7a:	6839      	ldr	r1, [r7, #0]
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f001 f966 	bl	800924e <USBD_CtlError>
            ret = USBD_FAIL;
 8007f82:	2302      	movs	r3, #2
 8007f84:	75fb      	strb	r3, [r7, #23]
          break;
 8007f86:	e027      	b.n	8007fd8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f8e:	2b03      	cmp	r3, #3
 8007f90:	d107      	bne.n	8007fa2 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007f92:	f107 030f 	add.w	r3, r7, #15
 8007f96:	2201      	movs	r2, #1
 8007f98:	4619      	mov	r1, r3
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f001 f9c1 	bl	8009322 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007fa0:	e01a      	b.n	8007fd8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007fa2:	6839      	ldr	r1, [r7, #0]
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f001 f952 	bl	800924e <USBD_CtlError>
            ret = USBD_FAIL;
 8007faa:	2302      	movs	r3, #2
 8007fac:	75fb      	strb	r3, [r7, #23]
          break;
 8007fae:	e013      	b.n	8007fd8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fb6:	2b03      	cmp	r3, #3
 8007fb8:	d00d      	beq.n	8007fd6 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007fba:	6839      	ldr	r1, [r7, #0]
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f001 f946 	bl	800924e <USBD_CtlError>
            ret = USBD_FAIL;
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007fc6:	e006      	b.n	8007fd6 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007fc8:	6839      	ldr	r1, [r7, #0]
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f001 f93f 	bl	800924e <USBD_CtlError>
          ret = USBD_FAIL;
 8007fd0:	2302      	movs	r3, #2
 8007fd2:	75fb      	strb	r3, [r7, #23]
          break;
 8007fd4:	e000      	b.n	8007fd8 <USBD_CDC_Setup+0x12c>
          break;
 8007fd6:	bf00      	nop
      }
      break;
 8007fd8:	e006      	b.n	8007fe8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007fda:	6839      	ldr	r1, [r7, #0]
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f001 f936 	bl	800924e <USBD_CtlError>
      ret = USBD_FAIL;
 8007fe2:	2302      	movs	r3, #2
 8007fe4:	75fb      	strb	r3, [r7, #23]
      break;
 8007fe6:	bf00      	nop
  }

  return ret;
 8007fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3718      	adds	r7, #24
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b084      	sub	sp, #16
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008004:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800800c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008014:	2b00      	cmp	r3, #0
 8008016:	d03a      	beq.n	800808e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008018:	78fa      	ldrb	r2, [r7, #3]
 800801a:	6879      	ldr	r1, [r7, #4]
 800801c:	4613      	mov	r3, r2
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	4413      	add	r3, r2
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	440b      	add	r3, r1
 8008026:	331c      	adds	r3, #28
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d029      	beq.n	8008082 <USBD_CDC_DataIn+0x90>
 800802e:	78fa      	ldrb	r2, [r7, #3]
 8008030:	6879      	ldr	r1, [r7, #4]
 8008032:	4613      	mov	r3, r2
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	4413      	add	r3, r2
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	440b      	add	r3, r1
 800803c:	331c      	adds	r3, #28
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	78f9      	ldrb	r1, [r7, #3]
 8008042:	68b8      	ldr	r0, [r7, #8]
 8008044:	460b      	mov	r3, r1
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	440b      	add	r3, r1
 800804a:	00db      	lsls	r3, r3, #3
 800804c:	4403      	add	r3, r0
 800804e:	3338      	adds	r3, #56	; 0x38
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	fbb2 f1f3 	udiv	r1, r2, r3
 8008056:	fb01 f303 	mul.w	r3, r1, r3
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	2b00      	cmp	r3, #0
 800805e:	d110      	bne.n	8008082 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008060:	78fa      	ldrb	r2, [r7, #3]
 8008062:	6879      	ldr	r1, [r7, #4]
 8008064:	4613      	mov	r3, r2
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	4413      	add	r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	440b      	add	r3, r1
 800806e:	331c      	adds	r3, #28
 8008070:	2200      	movs	r2, #0
 8008072:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008074:	78f9      	ldrb	r1, [r7, #3]
 8008076:	2300      	movs	r3, #0
 8008078:	2200      	movs	r2, #0
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f001 fdd5 	bl	8009c2a <USBD_LL_Transmit>
 8008080:	e003      	b.n	800808a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800808a:	2300      	movs	r3, #0
 800808c:	e000      	b.n	8008090 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800808e:	2302      	movs	r3, #2
  }
}
 8008090:	4618      	mov	r0, r3
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	460b      	mov	r3, r1
 80080a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080aa:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80080ac:	78fb      	ldrb	r3, [r7, #3]
 80080ae:	4619      	mov	r1, r3
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f001 fe00 	bl	8009cb6 <USBD_LL_GetRxDataSize>
 80080b6:	4602      	mov	r2, r0
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00d      	beq.n	80080e4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80080dc:	4611      	mov	r1, r2
 80080de:	4798      	blx	r3

    return USBD_OK;
 80080e0:	2300      	movs	r3, #0
 80080e2:	e000      	b.n	80080e6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80080e4:	2302      	movs	r3, #2
  }
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b084      	sub	sp, #16
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080fc:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008104:	2b00      	cmp	r3, #0
 8008106:	d015      	beq.n	8008134 <USBD_CDC_EP0_RxReady+0x46>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800810e:	2bff      	cmp	r3, #255	; 0xff
 8008110:	d010      	beq.n	8008134 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	68fa      	ldr	r2, [r7, #12]
 800811c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008120:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008128:	b292      	uxth	r2, r2
 800812a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	22ff      	movs	r2, #255	; 0xff
 8008130:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
	...

08008140 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2243      	movs	r2, #67	; 0x43
 800814c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800814e:	4b03      	ldr	r3, [pc, #12]	; (800815c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008150:	4618      	mov	r0, r3
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	bc80      	pop	{r7}
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	20000094 	.word	0x20000094

08008160 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2243      	movs	r2, #67	; 0x43
 800816c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800816e:	4b03      	ldr	r3, [pc, #12]	; (800817c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008170:	4618      	mov	r0, r3
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	bc80      	pop	{r7}
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	20000050 	.word	0x20000050

08008180 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2243      	movs	r2, #67	; 0x43
 800818c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800818e:	4b03      	ldr	r3, [pc, #12]	; (800819c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008190:	4618      	mov	r0, r3
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	bc80      	pop	{r7}
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	200000d8 	.word	0x200000d8

080081a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	220a      	movs	r2, #10
 80081ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80081ae:	4b03      	ldr	r3, [pc, #12]	; (80081bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bc80      	pop	{r7}
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	2000000c 	.word	0x2000000c

080081c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b085      	sub	sp, #20
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80081ca:	2302      	movs	r3, #2
 80081cc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d005      	beq.n	80081e0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	683a      	ldr	r2, [r7, #0]
 80081d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80081dc:	2300      	movs	r3, #0
 80081de:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3714      	adds	r7, #20
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bc80      	pop	{r7}
 80081ea:	4770      	bx	lr

080081ec <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b087      	sub	sp, #28
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	4613      	mov	r3, r2
 80081f8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008200:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800820a:	88fa      	ldrh	r2, [r7, #6]
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	371c      	adds	r7, #28
 8008218:	46bd      	mov	sp, r7
 800821a:	bc80      	pop	{r7}
 800821c:	4770      	bx	lr

0800821e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800821e:	b480      	push	{r7}
 8008220:	b085      	sub	sp, #20
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
 8008226:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800822e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3714      	adds	r7, #20
 800823e:	46bd      	mov	sp, r7
 8008240:	bc80      	pop	{r7}
 8008242:	4770      	bx	lr

08008244 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008252:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800825a:	2b00      	cmp	r3, #0
 800825c:	d01c      	beq.n	8008298 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008264:	2b00      	cmp	r3, #0
 8008266:	d115      	bne.n	8008294 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2201      	movs	r2, #1
 800826c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008286:	b29b      	uxth	r3, r3
 8008288:	2181      	movs	r1, #129	; 0x81
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f001 fccd 	bl	8009c2a <USBD_LL_Transmit>

      return USBD_OK;
 8008290:	2300      	movs	r3, #0
 8008292:	e002      	b.n	800829a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008294:	2301      	movs	r3, #1
 8008296:	e000      	b.n	800829a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008298:	2302      	movs	r3, #2
  }
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b084      	sub	sp, #16
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082b0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d017      	beq.n	80082ec <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	7c1b      	ldrb	r3, [r3, #16]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d109      	bne.n	80082d8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80082ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082ce:	2101      	movs	r1, #1
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f001 fccd 	bl	8009c70 <USBD_LL_PrepareReceive>
 80082d6:	e007      	b.n	80082e8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80082de:	2340      	movs	r3, #64	; 0x40
 80082e0:	2101      	movs	r1, #1
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f001 fcc4 	bl	8009c70 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80082e8:	2300      	movs	r3, #0
 80082ea:	e000      	b.n	80082ee <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80082ec:	2302      	movs	r3, #2
  }
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b084      	sub	sp, #16
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	60f8      	str	r0, [r7, #12]
 80082fe:	60b9      	str	r1, [r7, #8]
 8008300:	4613      	mov	r3, r2
 8008302:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d101      	bne.n	800830e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800830a:	2302      	movs	r3, #2
 800830c:	e01a      	b.n	8008344 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008314:	2b00      	cmp	r3, #0
 8008316:	d003      	beq.n	8008320 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d003      	beq.n	800832e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2201      	movs	r2, #1
 8008332:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	79fa      	ldrb	r2, [r7, #7]
 800833a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f001 fb31 	bl	80099a4 <USBD_LL_Init>

  return USBD_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800834c:	b480      	push	{r7}
 800834e:	b085      	sub	sp, #20
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008356:	2300      	movs	r3, #0
 8008358:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d006      	beq.n	800836e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	683a      	ldr	r2, [r7, #0]
 8008364:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008368:	2300      	movs	r3, #0
 800836a:	73fb      	strb	r3, [r7, #15]
 800836c:	e001      	b.n	8008372 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800836e:	2302      	movs	r3, #2
 8008370:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008372:	7bfb      	ldrb	r3, [r7, #15]
}
 8008374:	4618      	mov	r0, r3
 8008376:	3714      	adds	r7, #20
 8008378:	46bd      	mov	sp, r7
 800837a:	bc80      	pop	{r7}
 800837c:	4770      	bx	lr

0800837e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b082      	sub	sp, #8
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f001 fb66 	bl	8009a58 <USBD_LL_Start>

  return USBD_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3708      	adds	r7, #8
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008396:	b480      	push	{r7}
 8008398:	b083      	sub	sp, #12
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bc80      	pop	{r7}
 80083a8:	4770      	bx	lr

080083aa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b084      	sub	sp, #16
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
 80083b2:	460b      	mov	r3, r1
 80083b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80083b6:	2302      	movs	r3, #2
 80083b8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00c      	beq.n	80083de <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	78fa      	ldrb	r2, [r7, #3]
 80083ce:	4611      	mov	r1, r2
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	4798      	blx	r3
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d101      	bne.n	80083de <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80083da:	2300      	movs	r3, #0
 80083dc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80083de:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	460b      	mov	r3, r1
 80083f2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	78fa      	ldrb	r2, [r7, #3]
 80083fe:	4611      	mov	r1, r2
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	4798      	blx	r3

  return USBD_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3708      	adds	r7, #8
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b082      	sub	sp, #8
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800841e:	6839      	ldr	r1, [r7, #0]
 8008420:	4618      	mov	r0, r3
 8008422:	f000 fed8 	bl	80091d6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2201      	movs	r2, #1
 800842a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008434:	461a      	mov	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008442:	f003 031f 	and.w	r3, r3, #31
 8008446:	2b02      	cmp	r3, #2
 8008448:	d016      	beq.n	8008478 <USBD_LL_SetupStage+0x6a>
 800844a:	2b02      	cmp	r3, #2
 800844c:	d81c      	bhi.n	8008488 <USBD_LL_SetupStage+0x7a>
 800844e:	2b00      	cmp	r3, #0
 8008450:	d002      	beq.n	8008458 <USBD_LL_SetupStage+0x4a>
 8008452:	2b01      	cmp	r3, #1
 8008454:	d008      	beq.n	8008468 <USBD_LL_SetupStage+0x5a>
 8008456:	e017      	b.n	8008488 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800845e:	4619      	mov	r1, r3
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f9cb 	bl	80087fc <USBD_StdDevReq>
      break;
 8008466:	e01a      	b.n	800849e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800846e:	4619      	mov	r1, r3
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 fa2d 	bl	80088d0 <USBD_StdItfReq>
      break;
 8008476:	e012      	b.n	800849e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800847e:	4619      	mov	r1, r3
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fa6d 	bl	8008960 <USBD_StdEPReq>
      break;
 8008486:	e00a      	b.n	800849e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800848e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008492:	b2db      	uxtb	r3, r3
 8008494:	4619      	mov	r1, r3
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f001 fb3e 	bl	8009b18 <USBD_LL_StallEP>
      break;
 800849c:	bf00      	nop
  }

  return USBD_OK;
 800849e:	2300      	movs	r3, #0
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b086      	sub	sp, #24
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	460b      	mov	r3, r1
 80084b2:	607a      	str	r2, [r7, #4]
 80084b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80084b6:	7afb      	ldrb	r3, [r7, #11]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d14b      	bne.n	8008554 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80084c2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084ca:	2b03      	cmp	r3, #3
 80084cc:	d134      	bne.n	8008538 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	68da      	ldr	r2, [r3, #12]
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d919      	bls.n	800850e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	68da      	ldr	r2, [r3, #12]
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	1ad2      	subs	r2, r2, r3
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	68da      	ldr	r2, [r3, #12]
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d203      	bcs.n	80084fc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	e002      	b.n	8008502 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008500:	b29b      	uxth	r3, r3
 8008502:	461a      	mov	r2, r3
 8008504:	6879      	ldr	r1, [r7, #4]
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f000 ff57 	bl	80093ba <USBD_CtlContinueRx>
 800850c:	e038      	b.n	8008580 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00a      	beq.n	8008530 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008520:	2b03      	cmp	r3, #3
 8008522:	d105      	bne.n	8008530 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800852a:	691b      	ldr	r3, [r3, #16]
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f000 ff54 	bl	80093de <USBD_CtlSendStatus>
 8008536:	e023      	b.n	8008580 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800853e:	2b05      	cmp	r3, #5
 8008540:	d11e      	bne.n	8008580 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800854a:	2100      	movs	r1, #0
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f001 fae3 	bl	8009b18 <USBD_LL_StallEP>
 8008552:	e015      	b.n	8008580 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800855a:	699b      	ldr	r3, [r3, #24]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00d      	beq.n	800857c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008566:	2b03      	cmp	r3, #3
 8008568:	d108      	bne.n	800857c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008570:	699b      	ldr	r3, [r3, #24]
 8008572:	7afa      	ldrb	r2, [r7, #11]
 8008574:	4611      	mov	r1, r2
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	4798      	blx	r3
 800857a:	e001      	b.n	8008580 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800857c:	2302      	movs	r3, #2
 800857e:	e000      	b.n	8008582 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3718      	adds	r7, #24
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b086      	sub	sp, #24
 800858e:	af00      	add	r7, sp, #0
 8008590:	60f8      	str	r0, [r7, #12]
 8008592:	460b      	mov	r3, r1
 8008594:	607a      	str	r2, [r7, #4]
 8008596:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008598:	7afb      	ldrb	r3, [r7, #11]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d17f      	bne.n	800869e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	3314      	adds	r3, #20
 80085a2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d15c      	bne.n	8008668 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	68da      	ldr	r2, [r3, #12]
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d915      	bls.n	80085e6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	68da      	ldr	r2, [r3, #12]
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	1ad2      	subs	r2, r2, r3
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	461a      	mov	r2, r3
 80085d0:	6879      	ldr	r1, [r7, #4]
 80085d2:	68f8      	ldr	r0, [r7, #12]
 80085d4:	f000 fec1 	bl	800935a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085d8:	2300      	movs	r3, #0
 80085da:	2200      	movs	r2, #0
 80085dc:	2100      	movs	r1, #0
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	f001 fb46 	bl	8009c70 <USBD_LL_PrepareReceive>
 80085e4:	e04e      	b.n	8008684 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	697a      	ldr	r2, [r7, #20]
 80085ec:	6912      	ldr	r2, [r2, #16]
 80085ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80085f2:	fb01 f202 	mul.w	r2, r1, r2
 80085f6:	1a9b      	subs	r3, r3, r2
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d11c      	bne.n	8008636 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	689a      	ldr	r2, [r3, #8]
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008604:	429a      	cmp	r2, r3
 8008606:	d316      	bcc.n	8008636 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	689a      	ldr	r2, [r3, #8]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008612:	429a      	cmp	r2, r3
 8008614:	d20f      	bcs.n	8008636 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008616:	2200      	movs	r2, #0
 8008618:	2100      	movs	r1, #0
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f000 fe9d 	bl	800935a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2200      	movs	r2, #0
 8008624:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008628:	2300      	movs	r3, #0
 800862a:	2200      	movs	r2, #0
 800862c:	2100      	movs	r1, #0
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	f001 fb1e 	bl	8009c70 <USBD_LL_PrepareReceive>
 8008634:	e026      	b.n	8008684 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00a      	beq.n	8008658 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008648:	2b03      	cmp	r3, #3
 800864a:	d105      	bne.n	8008658 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008658:	2180      	movs	r1, #128	; 0x80
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f001 fa5c 	bl	8009b18 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f000 fecf 	bl	8009404 <USBD_CtlReceiveStatus>
 8008666:	e00d      	b.n	8008684 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800866e:	2b04      	cmp	r3, #4
 8008670:	d004      	beq.n	800867c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008678:	2b00      	cmp	r3, #0
 800867a:	d103      	bne.n	8008684 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800867c:	2180      	movs	r1, #128	; 0x80
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f001 fa4a 	bl	8009b18 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800868a:	2b01      	cmp	r3, #1
 800868c:	d11d      	bne.n	80086ca <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f7ff fe81 	bl	8008396 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2200      	movs	r2, #0
 8008698:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800869c:	e015      	b.n	80086ca <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086a4:	695b      	ldr	r3, [r3, #20]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00d      	beq.n	80086c6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80086b0:	2b03      	cmp	r3, #3
 80086b2:	d108      	bne.n	80086c6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ba:	695b      	ldr	r3, [r3, #20]
 80086bc:	7afa      	ldrb	r2, [r7, #11]
 80086be:	4611      	mov	r1, r2
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	4798      	blx	r3
 80086c4:	e001      	b.n	80086ca <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80086c6:	2302      	movs	r3, #2
 80086c8:	e000      	b.n	80086cc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3718      	adds	r7, #24
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086dc:	2340      	movs	r3, #64	; 0x40
 80086de:	2200      	movs	r2, #0
 80086e0:	2100      	movs	r1, #0
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f001 f9d3 	bl	8009a8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2240      	movs	r2, #64	; 0x40
 80086f4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086f8:	2340      	movs	r3, #64	; 0x40
 80086fa:	2200      	movs	r2, #0
 80086fc:	2180      	movs	r1, #128	; 0x80
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f001 f9c5 	bl	8009a8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2240      	movs	r2, #64	; 0x40
 800870e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008734:	2b00      	cmp	r3, #0
 8008736:	d009      	beq.n	800874c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	6852      	ldr	r2, [r2, #4]
 8008744:	b2d2      	uxtb	r2, r2
 8008746:	4611      	mov	r1, r2
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	4798      	blx	r3
  }

  return USBD_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008756:	b480      	push	{r7}
 8008758:	b083      	sub	sp, #12
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
 800875e:	460b      	mov	r3, r1
 8008760:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	78fa      	ldrb	r2, [r7, #3]
 8008766:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	bc80      	pop	{r7}
 8008772:	4770      	bx	lr

08008774 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2204      	movs	r2, #4
 800878c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	370c      	adds	r7, #12
 8008796:	46bd      	mov	sp, r7
 8008798:	bc80      	pop	{r7}
 800879a:	4770      	bx	lr

0800879c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087aa:	2b04      	cmp	r3, #4
 80087ac:	d105      	bne.n	80087ba <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bc80      	pop	{r7}
 80087c4:	4770      	bx	lr

080087c6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b082      	sub	sp, #8
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087d4:	2b03      	cmp	r3, #3
 80087d6:	d10b      	bne.n	80087f0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087de:	69db      	ldr	r3, [r3, #28]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d005      	beq.n	80087f0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ea:	69db      	ldr	r3, [r3, #28]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
	...

080087fc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008806:	2300      	movs	r3, #0
 8008808:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008812:	2b40      	cmp	r3, #64	; 0x40
 8008814:	d005      	beq.n	8008822 <USBD_StdDevReq+0x26>
 8008816:	2b40      	cmp	r3, #64	; 0x40
 8008818:	d84f      	bhi.n	80088ba <USBD_StdDevReq+0xbe>
 800881a:	2b00      	cmp	r3, #0
 800881c:	d009      	beq.n	8008832 <USBD_StdDevReq+0x36>
 800881e:	2b20      	cmp	r3, #32
 8008820:	d14b      	bne.n	80088ba <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	6839      	ldr	r1, [r7, #0]
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	4798      	blx	r3
      break;
 8008830:	e048      	b.n	80088c4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	785b      	ldrb	r3, [r3, #1]
 8008836:	2b09      	cmp	r3, #9
 8008838:	d839      	bhi.n	80088ae <USBD_StdDevReq+0xb2>
 800883a:	a201      	add	r2, pc, #4	; (adr r2, 8008840 <USBD_StdDevReq+0x44>)
 800883c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008840:	08008891 	.word	0x08008891
 8008844:	080088a5 	.word	0x080088a5
 8008848:	080088af 	.word	0x080088af
 800884c:	0800889b 	.word	0x0800889b
 8008850:	080088af 	.word	0x080088af
 8008854:	08008873 	.word	0x08008873
 8008858:	08008869 	.word	0x08008869
 800885c:	080088af 	.word	0x080088af
 8008860:	08008887 	.word	0x08008887
 8008864:	0800887d 	.word	0x0800887d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008868:	6839      	ldr	r1, [r7, #0]
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f9dc 	bl	8008c28 <USBD_GetDescriptor>
          break;
 8008870:	e022      	b.n	80088b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008872:	6839      	ldr	r1, [r7, #0]
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 fb3f 	bl	8008ef8 <USBD_SetAddress>
          break;
 800887a:	e01d      	b.n	80088b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800887c:	6839      	ldr	r1, [r7, #0]
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 fb7e 	bl	8008f80 <USBD_SetConfig>
          break;
 8008884:	e018      	b.n	80088b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008886:	6839      	ldr	r1, [r7, #0]
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 fc07 	bl	800909c <USBD_GetConfig>
          break;
 800888e:	e013      	b.n	80088b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008890:	6839      	ldr	r1, [r7, #0]
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 fc37 	bl	8009106 <USBD_GetStatus>
          break;
 8008898:	e00e      	b.n	80088b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800889a:	6839      	ldr	r1, [r7, #0]
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 fc65 	bl	800916c <USBD_SetFeature>
          break;
 80088a2:	e009      	b.n	80088b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80088a4:	6839      	ldr	r1, [r7, #0]
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 fc74 	bl	8009194 <USBD_ClrFeature>
          break;
 80088ac:	e004      	b.n	80088b8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80088ae:	6839      	ldr	r1, [r7, #0]
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 fccc 	bl	800924e <USBD_CtlError>
          break;
 80088b6:	bf00      	nop
      }
      break;
 80088b8:	e004      	b.n	80088c4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80088ba:	6839      	ldr	r1, [r7, #0]
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fcc6 	bl	800924e <USBD_CtlError>
      break;
 80088c2:	bf00      	nop
  }

  return ret;
 80088c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop

080088d0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088da:	2300      	movs	r3, #0
 80088dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088e6:	2b40      	cmp	r3, #64	; 0x40
 80088e8:	d005      	beq.n	80088f6 <USBD_StdItfReq+0x26>
 80088ea:	2b40      	cmp	r3, #64	; 0x40
 80088ec:	d82e      	bhi.n	800894c <USBD_StdItfReq+0x7c>
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d001      	beq.n	80088f6 <USBD_StdItfReq+0x26>
 80088f2:	2b20      	cmp	r3, #32
 80088f4:	d12a      	bne.n	800894c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088fc:	3b01      	subs	r3, #1
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d81d      	bhi.n	800893e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	889b      	ldrh	r3, [r3, #4]
 8008906:	b2db      	uxtb	r3, r3
 8008908:	2b01      	cmp	r3, #1
 800890a:	d813      	bhi.n	8008934 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	6839      	ldr	r1, [r7, #0]
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	4798      	blx	r3
 800891a:	4603      	mov	r3, r0
 800891c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	88db      	ldrh	r3, [r3, #6]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d110      	bne.n	8008948 <USBD_StdItfReq+0x78>
 8008926:	7bfb      	ldrb	r3, [r7, #15]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d10d      	bne.n	8008948 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 fd56 	bl	80093de <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008932:	e009      	b.n	8008948 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008934:	6839      	ldr	r1, [r7, #0]
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 fc89 	bl	800924e <USBD_CtlError>
          break;
 800893c:	e004      	b.n	8008948 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800893e:	6839      	ldr	r1, [r7, #0]
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 fc84 	bl	800924e <USBD_CtlError>
          break;
 8008946:	e000      	b.n	800894a <USBD_StdItfReq+0x7a>
          break;
 8008948:	bf00      	nop
      }
      break;
 800894a:	e004      	b.n	8008956 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fc7d 	bl	800924e <USBD_CtlError>
      break;
 8008954:	bf00      	nop
  }

  return USBD_OK;
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800896a:	2300      	movs	r3, #0
 800896c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	889b      	ldrh	r3, [r3, #4]
 8008972:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800897c:	2b40      	cmp	r3, #64	; 0x40
 800897e:	d007      	beq.n	8008990 <USBD_StdEPReq+0x30>
 8008980:	2b40      	cmp	r3, #64	; 0x40
 8008982:	f200 8146 	bhi.w	8008c12 <USBD_StdEPReq+0x2b2>
 8008986:	2b00      	cmp	r3, #0
 8008988:	d00a      	beq.n	80089a0 <USBD_StdEPReq+0x40>
 800898a:	2b20      	cmp	r3, #32
 800898c:	f040 8141 	bne.w	8008c12 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	6839      	ldr	r1, [r7, #0]
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	4798      	blx	r3
      break;
 800899e:	e13d      	b.n	8008c1c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089a8:	2b20      	cmp	r3, #32
 80089aa:	d10a      	bne.n	80089c2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	6839      	ldr	r1, [r7, #0]
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	4798      	blx	r3
 80089ba:	4603      	mov	r3, r0
 80089bc:	73fb      	strb	r3, [r7, #15]

        return ret;
 80089be:	7bfb      	ldrb	r3, [r7, #15]
 80089c0:	e12d      	b.n	8008c1e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	785b      	ldrb	r3, [r3, #1]
 80089c6:	2b03      	cmp	r3, #3
 80089c8:	d007      	beq.n	80089da <USBD_StdEPReq+0x7a>
 80089ca:	2b03      	cmp	r3, #3
 80089cc:	f300 811b 	bgt.w	8008c06 <USBD_StdEPReq+0x2a6>
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d072      	beq.n	8008aba <USBD_StdEPReq+0x15a>
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d03a      	beq.n	8008a4e <USBD_StdEPReq+0xee>
 80089d8:	e115      	b.n	8008c06 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d002      	beq.n	80089ea <USBD_StdEPReq+0x8a>
 80089e4:	2b03      	cmp	r3, #3
 80089e6:	d015      	beq.n	8008a14 <USBD_StdEPReq+0xb4>
 80089e8:	e02b      	b.n	8008a42 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089ea:	7bbb      	ldrb	r3, [r7, #14]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d00c      	beq.n	8008a0a <USBD_StdEPReq+0xaa>
 80089f0:	7bbb      	ldrb	r3, [r7, #14]
 80089f2:	2b80      	cmp	r3, #128	; 0x80
 80089f4:	d009      	beq.n	8008a0a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80089f6:	7bbb      	ldrb	r3, [r7, #14]
 80089f8:	4619      	mov	r1, r3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f001 f88c 	bl	8009b18 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008a00:	2180      	movs	r1, #128	; 0x80
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f001 f888 	bl	8009b18 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a08:	e020      	b.n	8008a4c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008a0a:	6839      	ldr	r1, [r7, #0]
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 fc1e 	bl	800924e <USBD_CtlError>
              break;
 8008a12:	e01b      	b.n	8008a4c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	885b      	ldrh	r3, [r3, #2]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d10e      	bne.n	8008a3a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008a1c:	7bbb      	ldrb	r3, [r7, #14]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00b      	beq.n	8008a3a <USBD_StdEPReq+0xda>
 8008a22:	7bbb      	ldrb	r3, [r7, #14]
 8008a24:	2b80      	cmp	r3, #128	; 0x80
 8008a26:	d008      	beq.n	8008a3a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	88db      	ldrh	r3, [r3, #6]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d104      	bne.n	8008a3a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008a30:	7bbb      	ldrb	r3, [r7, #14]
 8008a32:	4619      	mov	r1, r3
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f001 f86f 	bl	8009b18 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 fccf 	bl	80093de <USBD_CtlSendStatus>

              break;
 8008a40:	e004      	b.n	8008a4c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008a42:	6839      	ldr	r1, [r7, #0]
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 fc02 	bl	800924e <USBD_CtlError>
              break;
 8008a4a:	bf00      	nop
          }
          break;
 8008a4c:	e0e0      	b.n	8008c10 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d002      	beq.n	8008a5e <USBD_StdEPReq+0xfe>
 8008a58:	2b03      	cmp	r3, #3
 8008a5a:	d015      	beq.n	8008a88 <USBD_StdEPReq+0x128>
 8008a5c:	e026      	b.n	8008aac <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a5e:	7bbb      	ldrb	r3, [r7, #14]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00c      	beq.n	8008a7e <USBD_StdEPReq+0x11e>
 8008a64:	7bbb      	ldrb	r3, [r7, #14]
 8008a66:	2b80      	cmp	r3, #128	; 0x80
 8008a68:	d009      	beq.n	8008a7e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008a6a:	7bbb      	ldrb	r3, [r7, #14]
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f001 f852 	bl	8009b18 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008a74:	2180      	movs	r1, #128	; 0x80
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f001 f84e 	bl	8009b18 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a7c:	e01c      	b.n	8008ab8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008a7e:	6839      	ldr	r1, [r7, #0]
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fbe4 	bl	800924e <USBD_CtlError>
              break;
 8008a86:	e017      	b.n	8008ab8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	885b      	ldrh	r3, [r3, #2]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d112      	bne.n	8008ab6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008a90:	7bbb      	ldrb	r3, [r7, #14]
 8008a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d004      	beq.n	8008aa4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a9a:	7bbb      	ldrb	r3, [r7, #14]
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f001 f859 	bl	8009b56 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fc9a 	bl	80093de <USBD_CtlSendStatus>
              }
              break;
 8008aaa:	e004      	b.n	8008ab6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008aac:	6839      	ldr	r1, [r7, #0]
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fbcd 	bl	800924e <USBD_CtlError>
              break;
 8008ab4:	e000      	b.n	8008ab8 <USBD_StdEPReq+0x158>
              break;
 8008ab6:	bf00      	nop
          }
          break;
 8008ab8:	e0aa      	b.n	8008c10 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	d002      	beq.n	8008aca <USBD_StdEPReq+0x16a>
 8008ac4:	2b03      	cmp	r3, #3
 8008ac6:	d032      	beq.n	8008b2e <USBD_StdEPReq+0x1ce>
 8008ac8:	e097      	b.n	8008bfa <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008aca:	7bbb      	ldrb	r3, [r7, #14]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d007      	beq.n	8008ae0 <USBD_StdEPReq+0x180>
 8008ad0:	7bbb      	ldrb	r3, [r7, #14]
 8008ad2:	2b80      	cmp	r3, #128	; 0x80
 8008ad4:	d004      	beq.n	8008ae0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008ad6:	6839      	ldr	r1, [r7, #0]
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 fbb8 	bl	800924e <USBD_CtlError>
                break;
 8008ade:	e091      	b.n	8008c04 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ae0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	da0b      	bge.n	8008b00 <USBD_StdEPReq+0x1a0>
 8008ae8:	7bbb      	ldrb	r3, [r7, #14]
 8008aea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008aee:	4613      	mov	r3, r2
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	4413      	add	r3, r2
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	3310      	adds	r3, #16
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	4413      	add	r3, r2
 8008afc:	3304      	adds	r3, #4
 8008afe:	e00b      	b.n	8008b18 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b00:	7bbb      	ldrb	r3, [r7, #14]
 8008b02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b06:	4613      	mov	r3, r2
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	4413      	add	r3, r2
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	4413      	add	r3, r2
 8008b16:	3304      	adds	r3, #4
 8008b18:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	2202      	movs	r2, #2
 8008b24:	4619      	mov	r1, r3
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 fbfb 	bl	8009322 <USBD_CtlSendData>
              break;
 8008b2c:	e06a      	b.n	8008c04 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008b2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	da11      	bge.n	8008b5a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008b36:	7bbb      	ldrb	r3, [r7, #14]
 8008b38:	f003 020f 	and.w	r2, r3, #15
 8008b3c:	6879      	ldr	r1, [r7, #4]
 8008b3e:	4613      	mov	r3, r2
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	4413      	add	r3, r2
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	440b      	add	r3, r1
 8008b48:	3318      	adds	r3, #24
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d117      	bne.n	8008b80 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008b50:	6839      	ldr	r1, [r7, #0]
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fb7b 	bl	800924e <USBD_CtlError>
                  break;
 8008b58:	e054      	b.n	8008c04 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b5a:	7bbb      	ldrb	r3, [r7, #14]
 8008b5c:	f003 020f 	and.w	r2, r3, #15
 8008b60:	6879      	ldr	r1, [r7, #4]
 8008b62:	4613      	mov	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4413      	add	r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	440b      	add	r3, r1
 8008b6c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d104      	bne.n	8008b80 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008b76:	6839      	ldr	r1, [r7, #0]
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 fb68 	bl	800924e <USBD_CtlError>
                  break;
 8008b7e:	e041      	b.n	8008c04 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	da0b      	bge.n	8008ba0 <USBD_StdEPReq+0x240>
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
 8008b8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b8e:	4613      	mov	r3, r2
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	4413      	add	r3, r2
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	3310      	adds	r3, #16
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	3304      	adds	r3, #4
 8008b9e:	e00b      	b.n	8008bb8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ba0:	7bbb      	ldrb	r3, [r7, #14]
 8008ba2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	4413      	add	r3, r2
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	3304      	adds	r3, #4
 8008bb8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008bba:	7bbb      	ldrb	r3, [r7, #14]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d002      	beq.n	8008bc6 <USBD_StdEPReq+0x266>
 8008bc0:	7bbb      	ldrb	r3, [r7, #14]
 8008bc2:	2b80      	cmp	r3, #128	; 0x80
 8008bc4:	d103      	bne.n	8008bce <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	601a      	str	r2, [r3, #0]
 8008bcc:	e00e      	b.n	8008bec <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008bce:	7bbb      	ldrb	r3, [r7, #14]
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 ffde 	bl	8009b94 <USBD_LL_IsStallEP>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d003      	beq.n	8008be6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	2201      	movs	r2, #1
 8008be2:	601a      	str	r2, [r3, #0]
 8008be4:	e002      	b.n	8008bec <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	2200      	movs	r2, #0
 8008bea:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	2202      	movs	r2, #2
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 fb95 	bl	8009322 <USBD_CtlSendData>
              break;
 8008bf8:	e004      	b.n	8008c04 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008bfa:	6839      	ldr	r1, [r7, #0]
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 fb26 	bl	800924e <USBD_CtlError>
              break;
 8008c02:	bf00      	nop
          }
          break;
 8008c04:	e004      	b.n	8008c10 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008c06:	6839      	ldr	r1, [r7, #0]
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 fb20 	bl	800924e <USBD_CtlError>
          break;
 8008c0e:	bf00      	nop
      }
      break;
 8008c10:	e004      	b.n	8008c1c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008c12:	6839      	ldr	r1, [r7, #0]
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 fb1a 	bl	800924e <USBD_CtlError>
      break;
 8008c1a:	bf00      	nop
  }

  return ret;
 8008c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
	...

08008c28 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c32:	2300      	movs	r3, #0
 8008c34:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008c36:	2300      	movs	r3, #0
 8008c38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	885b      	ldrh	r3, [r3, #2]
 8008c42:	0a1b      	lsrs	r3, r3, #8
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	3b01      	subs	r3, #1
 8008c48:	2b06      	cmp	r3, #6
 8008c4a:	f200 8128 	bhi.w	8008e9e <USBD_GetDescriptor+0x276>
 8008c4e:	a201      	add	r2, pc, #4	; (adr r2, 8008c54 <USBD_GetDescriptor+0x2c>)
 8008c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c54:	08008c71 	.word	0x08008c71
 8008c58:	08008c89 	.word	0x08008c89
 8008c5c:	08008cc9 	.word	0x08008cc9
 8008c60:	08008e9f 	.word	0x08008e9f
 8008c64:	08008e9f 	.word	0x08008e9f
 8008c68:	08008e3f 	.word	0x08008e3f
 8008c6c:	08008e6b 	.word	0x08008e6b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	7c12      	ldrb	r2, [r2, #16]
 8008c7c:	f107 0108 	add.w	r1, r7, #8
 8008c80:	4610      	mov	r0, r2
 8008c82:	4798      	blx	r3
 8008c84:	60f8      	str	r0, [r7, #12]
      break;
 8008c86:	e112      	b.n	8008eae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	7c1b      	ldrb	r3, [r3, #16]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d10d      	bne.n	8008cac <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c98:	f107 0208 	add.w	r2, r7, #8
 8008c9c:	4610      	mov	r0, r2
 8008c9e:	4798      	blx	r3
 8008ca0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	2202      	movs	r2, #2
 8008ca8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008caa:	e100      	b.n	8008eae <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb4:	f107 0208 	add.w	r2, r7, #8
 8008cb8:	4610      	mov	r0, r2
 8008cba:	4798      	blx	r3
 8008cbc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	2202      	movs	r2, #2
 8008cc4:	701a      	strb	r2, [r3, #0]
      break;
 8008cc6:	e0f2      	b.n	8008eae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	885b      	ldrh	r3, [r3, #2]
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	2b05      	cmp	r3, #5
 8008cd0:	f200 80ac 	bhi.w	8008e2c <USBD_GetDescriptor+0x204>
 8008cd4:	a201      	add	r2, pc, #4	; (adr r2, 8008cdc <USBD_GetDescriptor+0xb4>)
 8008cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cda:	bf00      	nop
 8008cdc:	08008cf5 	.word	0x08008cf5
 8008ce0:	08008d29 	.word	0x08008d29
 8008ce4:	08008d5d 	.word	0x08008d5d
 8008ce8:	08008d91 	.word	0x08008d91
 8008cec:	08008dc5 	.word	0x08008dc5
 8008cf0:	08008df9 	.word	0x08008df9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d00b      	beq.n	8008d18 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	7c12      	ldrb	r2, [r2, #16]
 8008d0c:	f107 0108 	add.w	r1, r7, #8
 8008d10:	4610      	mov	r0, r2
 8008d12:	4798      	blx	r3
 8008d14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d16:	e091      	b.n	8008e3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d18:	6839      	ldr	r1, [r7, #0]
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 fa97 	bl	800924e <USBD_CtlError>
            err++;
 8008d20:	7afb      	ldrb	r3, [r7, #11]
 8008d22:	3301      	adds	r3, #1
 8008d24:	72fb      	strb	r3, [r7, #11]
          break;
 8008d26:	e089      	b.n	8008e3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d00b      	beq.n	8008d4c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	7c12      	ldrb	r2, [r2, #16]
 8008d40:	f107 0108 	add.w	r1, r7, #8
 8008d44:	4610      	mov	r0, r2
 8008d46:	4798      	blx	r3
 8008d48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d4a:	e077      	b.n	8008e3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d4c:	6839      	ldr	r1, [r7, #0]
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 fa7d 	bl	800924e <USBD_CtlError>
            err++;
 8008d54:	7afb      	ldrb	r3, [r7, #11]
 8008d56:	3301      	adds	r3, #1
 8008d58:	72fb      	strb	r3, [r7, #11]
          break;
 8008d5a:	e06f      	b.n	8008e3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00b      	beq.n	8008d80 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	7c12      	ldrb	r2, [r2, #16]
 8008d74:	f107 0108 	add.w	r1, r7, #8
 8008d78:	4610      	mov	r0, r2
 8008d7a:	4798      	blx	r3
 8008d7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d7e:	e05d      	b.n	8008e3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d80:	6839      	ldr	r1, [r7, #0]
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 fa63 	bl	800924e <USBD_CtlError>
            err++;
 8008d88:	7afb      	ldrb	r3, [r7, #11]
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d8e:	e055      	b.n	8008e3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d00b      	beq.n	8008db4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	7c12      	ldrb	r2, [r2, #16]
 8008da8:	f107 0108 	add.w	r1, r7, #8
 8008dac:	4610      	mov	r0, r2
 8008dae:	4798      	blx	r3
 8008db0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008db2:	e043      	b.n	8008e3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008db4:	6839      	ldr	r1, [r7, #0]
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fa49 	bl	800924e <USBD_CtlError>
            err++;
 8008dbc:	7afb      	ldrb	r3, [r7, #11]
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	72fb      	strb	r3, [r7, #11]
          break;
 8008dc2:	e03b      	b.n	8008e3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008dca:	695b      	ldr	r3, [r3, #20]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d00b      	beq.n	8008de8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008dd6:	695b      	ldr	r3, [r3, #20]
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	7c12      	ldrb	r2, [r2, #16]
 8008ddc:	f107 0108 	add.w	r1, r7, #8
 8008de0:	4610      	mov	r0, r2
 8008de2:	4798      	blx	r3
 8008de4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008de6:	e029      	b.n	8008e3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008de8:	6839      	ldr	r1, [r7, #0]
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 fa2f 	bl	800924e <USBD_CtlError>
            err++;
 8008df0:	7afb      	ldrb	r3, [r7, #11]
 8008df2:	3301      	adds	r3, #1
 8008df4:	72fb      	strb	r3, [r7, #11]
          break;
 8008df6:	e021      	b.n	8008e3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008dfe:	699b      	ldr	r3, [r3, #24]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d00b      	beq.n	8008e1c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	7c12      	ldrb	r2, [r2, #16]
 8008e10:	f107 0108 	add.w	r1, r7, #8
 8008e14:	4610      	mov	r0, r2
 8008e16:	4798      	blx	r3
 8008e18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e1a:	e00f      	b.n	8008e3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e1c:	6839      	ldr	r1, [r7, #0]
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fa15 	bl	800924e <USBD_CtlError>
            err++;
 8008e24:	7afb      	ldrb	r3, [r7, #11]
 8008e26:	3301      	adds	r3, #1
 8008e28:	72fb      	strb	r3, [r7, #11]
          break;
 8008e2a:	e007      	b.n	8008e3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fa0d 	bl	800924e <USBD_CtlError>
          err++;
 8008e34:	7afb      	ldrb	r3, [r7, #11]
 8008e36:	3301      	adds	r3, #1
 8008e38:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008e3a:	e038      	b.n	8008eae <USBD_GetDescriptor+0x286>
 8008e3c:	e037      	b.n	8008eae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	7c1b      	ldrb	r3, [r3, #16]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d109      	bne.n	8008e5a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e4e:	f107 0208 	add.w	r2, r7, #8
 8008e52:	4610      	mov	r0, r2
 8008e54:	4798      	blx	r3
 8008e56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e58:	e029      	b.n	8008eae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e5a:	6839      	ldr	r1, [r7, #0]
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 f9f6 	bl	800924e <USBD_CtlError>
        err++;
 8008e62:	7afb      	ldrb	r3, [r7, #11]
 8008e64:	3301      	adds	r3, #1
 8008e66:	72fb      	strb	r3, [r7, #11]
      break;
 8008e68:	e021      	b.n	8008eae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	7c1b      	ldrb	r3, [r3, #16]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d10d      	bne.n	8008e8e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e7a:	f107 0208 	add.w	r2, r7, #8
 8008e7e:	4610      	mov	r0, r2
 8008e80:	4798      	blx	r3
 8008e82:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	3301      	adds	r3, #1
 8008e88:	2207      	movs	r2, #7
 8008e8a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e8c:	e00f      	b.n	8008eae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e8e:	6839      	ldr	r1, [r7, #0]
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 f9dc 	bl	800924e <USBD_CtlError>
        err++;
 8008e96:	7afb      	ldrb	r3, [r7, #11]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	72fb      	strb	r3, [r7, #11]
      break;
 8008e9c:	e007      	b.n	8008eae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008e9e:	6839      	ldr	r1, [r7, #0]
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 f9d4 	bl	800924e <USBD_CtlError>
      err++;
 8008ea6:	7afb      	ldrb	r3, [r7, #11]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	72fb      	strb	r3, [r7, #11]
      break;
 8008eac:	bf00      	nop
  }

  if (err != 0U)
 8008eae:	7afb      	ldrb	r3, [r7, #11]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d11c      	bne.n	8008eee <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008eb4:	893b      	ldrh	r3, [r7, #8]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d011      	beq.n	8008ede <USBD_GetDescriptor+0x2b6>
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	88db      	ldrh	r3, [r3, #6]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00d      	beq.n	8008ede <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	88da      	ldrh	r2, [r3, #6]
 8008ec6:	893b      	ldrh	r3, [r7, #8]
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	bf28      	it	cs
 8008ecc:	4613      	movcs	r3, r2
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ed2:	893b      	ldrh	r3, [r7, #8]
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	68f9      	ldr	r1, [r7, #12]
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 fa22 	bl	8009322 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	88db      	ldrh	r3, [r3, #6]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d104      	bne.n	8008ef0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 fa79 	bl	80093de <USBD_CtlSendStatus>
 8008eec:	e000      	b.n	8008ef0 <USBD_GetDescriptor+0x2c8>
    return;
 8008eee:	bf00      	nop
    }
  }
}
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop

08008ef8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	889b      	ldrh	r3, [r3, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d130      	bne.n	8008f6c <USBD_SetAddress+0x74>
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	88db      	ldrh	r3, [r3, #6]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d12c      	bne.n	8008f6c <USBD_SetAddress+0x74>
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	885b      	ldrh	r3, [r3, #2]
 8008f16:	2b7f      	cmp	r3, #127	; 0x7f
 8008f18:	d828      	bhi.n	8008f6c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	885b      	ldrh	r3, [r3, #2]
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f24:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f2c:	2b03      	cmp	r3, #3
 8008f2e:	d104      	bne.n	8008f3a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008f30:	6839      	ldr	r1, [r7, #0]
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 f98b 	bl	800924e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f38:	e01d      	b.n	8008f76 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	7bfa      	ldrb	r2, [r7, #15]
 8008f3e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008f42:	7bfb      	ldrb	r3, [r7, #15]
 8008f44:	4619      	mov	r1, r3
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fe50 	bl	8009bec <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 fa46 	bl	80093de <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008f52:	7bfb      	ldrb	r3, [r7, #15]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d004      	beq.n	8008f62 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f60:	e009      	b.n	8008f76 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2201      	movs	r2, #1
 8008f66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f6a:	e004      	b.n	8008f76 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008f6c:	6839      	ldr	r1, [r7, #0]
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 f96d 	bl	800924e <USBD_CtlError>
  }
}
 8008f74:	bf00      	nop
 8008f76:	bf00      	nop
 8008f78:	3710      	adds	r7, #16
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
	...

08008f80 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	885b      	ldrh	r3, [r3, #2]
 8008f8e:	b2da      	uxtb	r2, r3
 8008f90:	4b41      	ldr	r3, [pc, #260]	; (8009098 <USBD_SetConfig+0x118>)
 8008f92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008f94:	4b40      	ldr	r3, [pc, #256]	; (8009098 <USBD_SetConfig+0x118>)
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d904      	bls.n	8008fa6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008f9c:	6839      	ldr	r1, [r7, #0]
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f955 	bl	800924e <USBD_CtlError>
 8008fa4:	e075      	b.n	8009092 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	d002      	beq.n	8008fb6 <USBD_SetConfig+0x36>
 8008fb0:	2b03      	cmp	r3, #3
 8008fb2:	d023      	beq.n	8008ffc <USBD_SetConfig+0x7c>
 8008fb4:	e062      	b.n	800907c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008fb6:	4b38      	ldr	r3, [pc, #224]	; (8009098 <USBD_SetConfig+0x118>)
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d01a      	beq.n	8008ff4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008fbe:	4b36      	ldr	r3, [pc, #216]	; (8009098 <USBD_SetConfig+0x118>)
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2203      	movs	r2, #3
 8008fcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008fd0:	4b31      	ldr	r3, [pc, #196]	; (8009098 <USBD_SetConfig+0x118>)
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f7ff f9e7 	bl	80083aa <USBD_SetClassConfig>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b02      	cmp	r3, #2
 8008fe0:	d104      	bne.n	8008fec <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008fe2:	6839      	ldr	r1, [r7, #0]
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f932 	bl	800924e <USBD_CtlError>
            return;
 8008fea:	e052      	b.n	8009092 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 f9f6 	bl	80093de <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008ff2:	e04e      	b.n	8009092 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 f9f2 	bl	80093de <USBD_CtlSendStatus>
        break;
 8008ffa:	e04a      	b.n	8009092 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008ffc:	4b26      	ldr	r3, [pc, #152]	; (8009098 <USBD_SetConfig+0x118>)
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d112      	bne.n	800902a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2202      	movs	r2, #2
 8009008:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800900c:	4b22      	ldr	r3, [pc, #136]	; (8009098 <USBD_SetConfig+0x118>)
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	461a      	mov	r2, r3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009016:	4b20      	ldr	r3, [pc, #128]	; (8009098 <USBD_SetConfig+0x118>)
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	4619      	mov	r1, r3
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f7ff f9e3 	bl	80083e8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 f9db 	bl	80093de <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009028:	e033      	b.n	8009092 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800902a:	4b1b      	ldr	r3, [pc, #108]	; (8009098 <USBD_SetConfig+0x118>)
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	461a      	mov	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	429a      	cmp	r2, r3
 8009036:	d01d      	beq.n	8009074 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	b2db      	uxtb	r3, r3
 800903e:	4619      	mov	r1, r3
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f7ff f9d1 	bl	80083e8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009046:	4b14      	ldr	r3, [pc, #80]	; (8009098 <USBD_SetConfig+0x118>)
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	461a      	mov	r2, r3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009050:	4b11      	ldr	r3, [pc, #68]	; (8009098 <USBD_SetConfig+0x118>)
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	4619      	mov	r1, r3
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f7ff f9a7 	bl	80083aa <USBD_SetClassConfig>
 800905c:	4603      	mov	r3, r0
 800905e:	2b02      	cmp	r3, #2
 8009060:	d104      	bne.n	800906c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009062:	6839      	ldr	r1, [r7, #0]
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 f8f2 	bl	800924e <USBD_CtlError>
            return;
 800906a:	e012      	b.n	8009092 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 f9b6 	bl	80093de <USBD_CtlSendStatus>
        break;
 8009072:	e00e      	b.n	8009092 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 f9b2 	bl	80093de <USBD_CtlSendStatus>
        break;
 800907a:	e00a      	b.n	8009092 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800907c:	6839      	ldr	r1, [r7, #0]
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 f8e5 	bl	800924e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009084:	4b04      	ldr	r3, [pc, #16]	; (8009098 <USBD_SetConfig+0x118>)
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	4619      	mov	r1, r3
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f7ff f9ac 	bl	80083e8 <USBD_ClrClassConfig>
        break;
 8009090:	bf00      	nop
    }
  }
}
 8009092:	3708      	adds	r7, #8
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	20000434 	.word	0x20000434

0800909c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	88db      	ldrh	r3, [r3, #6]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d004      	beq.n	80090b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80090ae:	6839      	ldr	r1, [r7, #0]
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 f8cc 	bl	800924e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80090b6:	e022      	b.n	80090fe <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090be:	2b02      	cmp	r3, #2
 80090c0:	dc02      	bgt.n	80090c8 <USBD_GetConfig+0x2c>
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	dc03      	bgt.n	80090ce <USBD_GetConfig+0x32>
 80090c6:	e015      	b.n	80090f4 <USBD_GetConfig+0x58>
 80090c8:	2b03      	cmp	r3, #3
 80090ca:	d00b      	beq.n	80090e4 <USBD_GetConfig+0x48>
 80090cc:	e012      	b.n	80090f4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	3308      	adds	r3, #8
 80090d8:	2201      	movs	r2, #1
 80090da:	4619      	mov	r1, r3
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 f920 	bl	8009322 <USBD_CtlSendData>
        break;
 80090e2:	e00c      	b.n	80090fe <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	3304      	adds	r3, #4
 80090e8:	2201      	movs	r2, #1
 80090ea:	4619      	mov	r1, r3
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 f918 	bl	8009322 <USBD_CtlSendData>
        break;
 80090f2:	e004      	b.n	80090fe <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80090f4:	6839      	ldr	r1, [r7, #0]
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 f8a9 	bl	800924e <USBD_CtlError>
        break;
 80090fc:	bf00      	nop
}
 80090fe:	bf00      	nop
 8009100:	3708      	adds	r7, #8
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b082      	sub	sp, #8
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
 800910e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009116:	3b01      	subs	r3, #1
 8009118:	2b02      	cmp	r3, #2
 800911a:	d81e      	bhi.n	800915a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	88db      	ldrh	r3, [r3, #6]
 8009120:	2b02      	cmp	r3, #2
 8009122:	d004      	beq.n	800912e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009124:	6839      	ldr	r1, [r7, #0]
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 f891 	bl	800924e <USBD_CtlError>
        break;
 800912c:	e01a      	b.n	8009164 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2201      	movs	r2, #1
 8009132:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800913a:	2b00      	cmp	r3, #0
 800913c:	d005      	beq.n	800914a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	f043 0202 	orr.w	r2, r3, #2
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	330c      	adds	r3, #12
 800914e:	2202      	movs	r2, #2
 8009150:	4619      	mov	r1, r3
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 f8e5 	bl	8009322 <USBD_CtlSendData>
      break;
 8009158:	e004      	b.n	8009164 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800915a:	6839      	ldr	r1, [r7, #0]
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 f876 	bl	800924e <USBD_CtlError>
      break;
 8009162:	bf00      	nop
  }
}
 8009164:	bf00      	nop
 8009166:	3708      	adds	r7, #8
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	885b      	ldrh	r3, [r3, #2]
 800917a:	2b01      	cmp	r3, #1
 800917c:	d106      	bne.n	800918c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2201      	movs	r2, #1
 8009182:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 f929 	bl	80093de <USBD_CtlSendStatus>
  }
}
 800918c:	bf00      	nop
 800918e:	3708      	adds	r7, #8
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091a4:	3b01      	subs	r3, #1
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d80b      	bhi.n	80091c2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	885b      	ldrh	r3, [r3, #2]
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d10c      	bne.n	80091cc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f90f 	bl	80093de <USBD_CtlSendStatus>
      }
      break;
 80091c0:	e004      	b.n	80091cc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80091c2:	6839      	ldr	r1, [r7, #0]
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 f842 	bl	800924e <USBD_CtlError>
      break;
 80091ca:	e000      	b.n	80091ce <USBD_ClrFeature+0x3a>
      break;
 80091cc:	bf00      	nop
  }
}
 80091ce:	bf00      	nop
 80091d0:	3708      	adds	r7, #8
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80091d6:	b480      	push	{r7}
 80091d8:	b083      	sub	sp, #12
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
 80091de:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	781a      	ldrb	r2, [r3, #0]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	785a      	ldrb	r2, [r3, #1]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	3302      	adds	r3, #2
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	b29a      	uxth	r2, r3
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	3303      	adds	r3, #3
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	b29b      	uxth	r3, r3
 8009200:	021b      	lsls	r3, r3, #8
 8009202:	b29b      	uxth	r3, r3
 8009204:	4413      	add	r3, r2
 8009206:	b29a      	uxth	r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	3304      	adds	r3, #4
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	b29a      	uxth	r2, r3
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	3305      	adds	r3, #5
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	b29b      	uxth	r3, r3
 800921c:	021b      	lsls	r3, r3, #8
 800921e:	b29b      	uxth	r3, r3
 8009220:	4413      	add	r3, r2
 8009222:	b29a      	uxth	r2, r3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	3306      	adds	r3, #6
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	b29a      	uxth	r2, r3
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	3307      	adds	r3, #7
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	b29b      	uxth	r3, r3
 8009238:	021b      	lsls	r3, r3, #8
 800923a:	b29b      	uxth	r3, r3
 800923c:	4413      	add	r3, r2
 800923e:	b29a      	uxth	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	80da      	strh	r2, [r3, #6]

}
 8009244:	bf00      	nop
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	bc80      	pop	{r7}
 800924c:	4770      	bx	lr

0800924e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b082      	sub	sp, #8
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
 8009256:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009258:	2180      	movs	r1, #128	; 0x80
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fc5c 	bl	8009b18 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009260:	2100      	movs	r1, #0
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 fc58 	bl	8009b18 <USBD_LL_StallEP>
}
 8009268:	bf00      	nop
 800926a:	3708      	adds	r7, #8
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b086      	sub	sp, #24
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800927c:	2300      	movs	r3, #0
 800927e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d032      	beq.n	80092ec <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009286:	68f8      	ldr	r0, [r7, #12]
 8009288:	f000 f834 	bl	80092f4 <USBD_GetLen>
 800928c:	4603      	mov	r3, r0
 800928e:	3301      	adds	r3, #1
 8009290:	b29b      	uxth	r3, r3
 8009292:	005b      	lsls	r3, r3, #1
 8009294:	b29a      	uxth	r2, r3
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800929a:	7dfb      	ldrb	r3, [r7, #23]
 800929c:	1c5a      	adds	r2, r3, #1
 800929e:	75fa      	strb	r2, [r7, #23]
 80092a0:	461a      	mov	r2, r3
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	4413      	add	r3, r2
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	7812      	ldrb	r2, [r2, #0]
 80092aa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80092ac:	7dfb      	ldrb	r3, [r7, #23]
 80092ae:	1c5a      	adds	r2, r3, #1
 80092b0:	75fa      	strb	r2, [r7, #23]
 80092b2:	461a      	mov	r2, r3
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	4413      	add	r3, r2
 80092b8:	2203      	movs	r2, #3
 80092ba:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80092bc:	e012      	b.n	80092e4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	1c5a      	adds	r2, r3, #1
 80092c2:	60fa      	str	r2, [r7, #12]
 80092c4:	7dfa      	ldrb	r2, [r7, #23]
 80092c6:	1c51      	adds	r1, r2, #1
 80092c8:	75f9      	strb	r1, [r7, #23]
 80092ca:	4611      	mov	r1, r2
 80092cc:	68ba      	ldr	r2, [r7, #8]
 80092ce:	440a      	add	r2, r1
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80092d4:	7dfb      	ldrb	r3, [r7, #23]
 80092d6:	1c5a      	adds	r2, r3, #1
 80092d8:	75fa      	strb	r2, [r7, #23]
 80092da:	461a      	mov	r2, r3
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	4413      	add	r3, r2
 80092e0:	2200      	movs	r2, #0
 80092e2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d1e8      	bne.n	80092be <USBD_GetString+0x4e>
    }
  }
}
 80092ec:	bf00      	nop
 80092ee:	3718      	adds	r7, #24
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80092fc:	2300      	movs	r3, #0
 80092fe:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009300:	e005      	b.n	800930e <USBD_GetLen+0x1a>
  {
    len++;
 8009302:	7bfb      	ldrb	r3, [r7, #15]
 8009304:	3301      	adds	r3, #1
 8009306:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	3301      	adds	r3, #1
 800930c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d1f5      	bne.n	8009302 <USBD_GetLen+0xe>
  }

  return len;
 8009316:	7bfb      	ldrb	r3, [r7, #15]
}
 8009318:	4618      	mov	r0, r3
 800931a:	3714      	adds	r7, #20
 800931c:	46bd      	mov	sp, r7
 800931e:	bc80      	pop	{r7}
 8009320:	4770      	bx	lr

08009322 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009322:	b580      	push	{r7, lr}
 8009324:	b084      	sub	sp, #16
 8009326:	af00      	add	r7, sp, #0
 8009328:	60f8      	str	r0, [r7, #12]
 800932a:	60b9      	str	r1, [r7, #8]
 800932c:	4613      	mov	r3, r2
 800932e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2202      	movs	r2, #2
 8009334:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009338:	88fa      	ldrh	r2, [r7, #6]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800933e:	88fa      	ldrh	r2, [r7, #6]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009344:	88fb      	ldrh	r3, [r7, #6]
 8009346:	68ba      	ldr	r2, [r7, #8]
 8009348:	2100      	movs	r1, #0
 800934a:	68f8      	ldr	r0, [r7, #12]
 800934c:	f000 fc6d 	bl	8009c2a <USBD_LL_Transmit>

  return USBD_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b084      	sub	sp, #16
 800935e:	af00      	add	r7, sp, #0
 8009360:	60f8      	str	r0, [r7, #12]
 8009362:	60b9      	str	r1, [r7, #8]
 8009364:	4613      	mov	r3, r2
 8009366:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009368:	88fb      	ldrh	r3, [r7, #6]
 800936a:	68ba      	ldr	r2, [r7, #8]
 800936c:	2100      	movs	r1, #0
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f000 fc5b 	bl	8009c2a <USBD_LL_Transmit>

  return USBD_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b084      	sub	sp, #16
 8009382:	af00      	add	r7, sp, #0
 8009384:	60f8      	str	r0, [r7, #12]
 8009386:	60b9      	str	r1, [r7, #8]
 8009388:	4613      	mov	r3, r2
 800938a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2203      	movs	r2, #3
 8009390:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009394:	88fa      	ldrh	r2, [r7, #6]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800939c:	88fa      	ldrh	r2, [r7, #6]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093a4:	88fb      	ldrh	r3, [r7, #6]
 80093a6:	68ba      	ldr	r2, [r7, #8]
 80093a8:	2100      	movs	r1, #0
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f000 fc60 	bl	8009c70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b084      	sub	sp, #16
 80093be:	af00      	add	r7, sp, #0
 80093c0:	60f8      	str	r0, [r7, #12]
 80093c2:	60b9      	str	r1, [r7, #8]
 80093c4:	4613      	mov	r3, r2
 80093c6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093c8:	88fb      	ldrh	r3, [r7, #6]
 80093ca:	68ba      	ldr	r2, [r7, #8]
 80093cc:	2100      	movs	r1, #0
 80093ce:	68f8      	ldr	r0, [r7, #12]
 80093d0:	f000 fc4e 	bl	8009c70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b082      	sub	sp, #8
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2204      	movs	r2, #4
 80093ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80093ee:	2300      	movs	r3, #0
 80093f0:	2200      	movs	r2, #0
 80093f2:	2100      	movs	r1, #0
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 fc18 	bl	8009c2a <USBD_LL_Transmit>

  return USBD_OK;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3708      	adds	r7, #8
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2205      	movs	r2, #5
 8009410:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009414:	2300      	movs	r3, #0
 8009416:	2200      	movs	r2, #0
 8009418:	2100      	movs	r1, #0
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 fc28 	bl	8009c70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
	...

0800942c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009430:	2200      	movs	r2, #0
 8009432:	4912      	ldr	r1, [pc, #72]	; (800947c <MX_USB_DEVICE_Init+0x50>)
 8009434:	4812      	ldr	r0, [pc, #72]	; (8009480 <MX_USB_DEVICE_Init+0x54>)
 8009436:	f7fe ff5e 	bl	80082f6 <USBD_Init>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d001      	beq.n	8009444 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009440:	f7f8 fae1 	bl	8001a06 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009444:	490f      	ldr	r1, [pc, #60]	; (8009484 <MX_USB_DEVICE_Init+0x58>)
 8009446:	480e      	ldr	r0, [pc, #56]	; (8009480 <MX_USB_DEVICE_Init+0x54>)
 8009448:	f7fe ff80 	bl	800834c <USBD_RegisterClass>
 800944c:	4603      	mov	r3, r0
 800944e:	2b00      	cmp	r3, #0
 8009450:	d001      	beq.n	8009456 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009452:	f7f8 fad8 	bl	8001a06 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009456:	490c      	ldr	r1, [pc, #48]	; (8009488 <MX_USB_DEVICE_Init+0x5c>)
 8009458:	4809      	ldr	r0, [pc, #36]	; (8009480 <MX_USB_DEVICE_Init+0x54>)
 800945a:	f7fe feb1 	bl	80081c0 <USBD_CDC_RegisterInterface>
 800945e:	4603      	mov	r3, r0
 8009460:	2b00      	cmp	r3, #0
 8009462:	d001      	beq.n	8009468 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009464:	f7f8 facf 	bl	8001a06 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009468:	4805      	ldr	r0, [pc, #20]	; (8009480 <MX_USB_DEVICE_Init+0x54>)
 800946a:	f7fe ff88 	bl	800837e <USBD_Start>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d001      	beq.n	8009478 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009474:	f7f8 fac7 	bl	8001a06 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009478:	bf00      	nop
 800947a:	bd80      	pop	{r7, pc}
 800947c:	2000012c 	.word	0x2000012c
 8009480:	20000438 	.word	0x20000438
 8009484:	20000018 	.word	0x20000018
 8009488:	2000011c 	.word	0x2000011c

0800948c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009490:	2200      	movs	r2, #0
 8009492:	4905      	ldr	r1, [pc, #20]	; (80094a8 <CDC_Init_FS+0x1c>)
 8009494:	4805      	ldr	r0, [pc, #20]	; (80094ac <CDC_Init_FS+0x20>)
 8009496:	f7fe fea9 	bl	80081ec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800949a:	4905      	ldr	r1, [pc, #20]	; (80094b0 <CDC_Init_FS+0x24>)
 800949c:	4803      	ldr	r0, [pc, #12]	; (80094ac <CDC_Init_FS+0x20>)
 800949e:	f7fe febe 	bl	800821e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80094a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	20000afc 	.word	0x20000afc
 80094ac:	20000438 	.word	0x20000438
 80094b0:	200006fc 	.word	0x200006fc

080094b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80094b4:	b480      	push	{r7}
 80094b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80094b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	46bd      	mov	sp, r7
 80094be:	bc80      	pop	{r7}
 80094c0:	4770      	bx	lr
	...

080094c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	4603      	mov	r3, r0
 80094cc:	6039      	str	r1, [r7, #0]
 80094ce:	71fb      	strb	r3, [r7, #7]
 80094d0:	4613      	mov	r3, r2
 80094d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80094d4:	79fb      	ldrb	r3, [r7, #7]
 80094d6:	2b23      	cmp	r3, #35	; 0x23
 80094d8:	d84a      	bhi.n	8009570 <CDC_Control_FS+0xac>
 80094da:	a201      	add	r2, pc, #4	; (adr r2, 80094e0 <CDC_Control_FS+0x1c>)
 80094dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e0:	08009571 	.word	0x08009571
 80094e4:	08009571 	.word	0x08009571
 80094e8:	08009571 	.word	0x08009571
 80094ec:	08009571 	.word	0x08009571
 80094f0:	08009571 	.word	0x08009571
 80094f4:	08009571 	.word	0x08009571
 80094f8:	08009571 	.word	0x08009571
 80094fc:	08009571 	.word	0x08009571
 8009500:	08009571 	.word	0x08009571
 8009504:	08009571 	.word	0x08009571
 8009508:	08009571 	.word	0x08009571
 800950c:	08009571 	.word	0x08009571
 8009510:	08009571 	.word	0x08009571
 8009514:	08009571 	.word	0x08009571
 8009518:	08009571 	.word	0x08009571
 800951c:	08009571 	.word	0x08009571
 8009520:	08009571 	.word	0x08009571
 8009524:	08009571 	.word	0x08009571
 8009528:	08009571 	.word	0x08009571
 800952c:	08009571 	.word	0x08009571
 8009530:	08009571 	.word	0x08009571
 8009534:	08009571 	.word	0x08009571
 8009538:	08009571 	.word	0x08009571
 800953c:	08009571 	.word	0x08009571
 8009540:	08009571 	.word	0x08009571
 8009544:	08009571 	.word	0x08009571
 8009548:	08009571 	.word	0x08009571
 800954c:	08009571 	.word	0x08009571
 8009550:	08009571 	.word	0x08009571
 8009554:	08009571 	.word	0x08009571
 8009558:	08009571 	.word	0x08009571
 800955c:	08009571 	.word	0x08009571
 8009560:	08009571 	.word	0x08009571
 8009564:	08009571 	.word	0x08009571
 8009568:	08009571 	.word	0x08009571
 800956c:	08009571 	.word	0x08009571
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009570:	bf00      	nop
  }

  return (USBD_OK);
 8009572:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009574:	4618      	mov	r0, r3
 8009576:	370c      	adds	r7, #12
 8009578:	46bd      	mov	sp, r7
 800957a:	bc80      	pop	{r7}
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop

08009580 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800958a:	6879      	ldr	r1, [r7, #4]
 800958c:	4805      	ldr	r0, [pc, #20]	; (80095a4 <CDC_Receive_FS+0x24>)
 800958e:	f7fe fe46 	bl	800821e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009592:	4804      	ldr	r0, [pc, #16]	; (80095a4 <CDC_Receive_FS+0x24>)
 8009594:	f7fe fe85 	bl	80082a2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009598:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800959a:	4618      	mov	r0, r3
 800959c:	3708      	adds	r7, #8
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	20000438 	.word	0x20000438

080095a8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	460b      	mov	r3, r1
 80095b2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80095b4:	2300      	movs	r3, #0
 80095b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80095b8:	4b0d      	ldr	r3, [pc, #52]	; (80095f0 <CDC_Transmit_FS+0x48>)
 80095ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095be:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d001      	beq.n	80095ce <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80095ca:	2301      	movs	r3, #1
 80095cc:	e00b      	b.n	80095e6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80095ce:	887b      	ldrh	r3, [r7, #2]
 80095d0:	461a      	mov	r2, r3
 80095d2:	6879      	ldr	r1, [r7, #4]
 80095d4:	4806      	ldr	r0, [pc, #24]	; (80095f0 <CDC_Transmit_FS+0x48>)
 80095d6:	f7fe fe09 	bl	80081ec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80095da:	4805      	ldr	r0, [pc, #20]	; (80095f0 <CDC_Transmit_FS+0x48>)
 80095dc:	f7fe fe32 	bl	8008244 <USBD_CDC_TransmitPacket>
 80095e0:	4603      	mov	r3, r0
 80095e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80095e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	20000438 	.word	0x20000438

080095f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	4603      	mov	r3, r0
 80095fc:	6039      	str	r1, [r7, #0]
 80095fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	2212      	movs	r2, #18
 8009604:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009606:	4b03      	ldr	r3, [pc, #12]	; (8009614 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009608:	4618      	mov	r0, r3
 800960a:	370c      	adds	r7, #12
 800960c:	46bd      	mov	sp, r7
 800960e:	bc80      	pop	{r7}
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	20000148 	.word	0x20000148

08009618 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	4603      	mov	r3, r0
 8009620:	6039      	str	r1, [r7, #0]
 8009622:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	2204      	movs	r2, #4
 8009628:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800962a:	4b03      	ldr	r3, [pc, #12]	; (8009638 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800962c:	4618      	mov	r0, r3
 800962e:	370c      	adds	r7, #12
 8009630:	46bd      	mov	sp, r7
 8009632:	bc80      	pop	{r7}
 8009634:	4770      	bx	lr
 8009636:	bf00      	nop
 8009638:	2000015c 	.word	0x2000015c

0800963c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	4603      	mov	r3, r0
 8009644:	6039      	str	r1, [r7, #0]
 8009646:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009648:	79fb      	ldrb	r3, [r7, #7]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d105      	bne.n	800965a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800964e:	683a      	ldr	r2, [r7, #0]
 8009650:	4907      	ldr	r1, [pc, #28]	; (8009670 <USBD_FS_ProductStrDescriptor+0x34>)
 8009652:	4808      	ldr	r0, [pc, #32]	; (8009674 <USBD_FS_ProductStrDescriptor+0x38>)
 8009654:	f7ff fe0c 	bl	8009270 <USBD_GetString>
 8009658:	e004      	b.n	8009664 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800965a:	683a      	ldr	r2, [r7, #0]
 800965c:	4904      	ldr	r1, [pc, #16]	; (8009670 <USBD_FS_ProductStrDescriptor+0x34>)
 800965e:	4805      	ldr	r0, [pc, #20]	; (8009674 <USBD_FS_ProductStrDescriptor+0x38>)
 8009660:	f7ff fe06 	bl	8009270 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009664:	4b02      	ldr	r3, [pc, #8]	; (8009670 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009666:	4618      	mov	r0, r3
 8009668:	3708      	adds	r7, #8
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	20000efc 	.word	0x20000efc
 8009674:	0800e670 	.word	0x0800e670

08009678 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	4603      	mov	r3, r0
 8009680:	6039      	str	r1, [r7, #0]
 8009682:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009684:	683a      	ldr	r2, [r7, #0]
 8009686:	4904      	ldr	r1, [pc, #16]	; (8009698 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009688:	4804      	ldr	r0, [pc, #16]	; (800969c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800968a:	f7ff fdf1 	bl	8009270 <USBD_GetString>
  return USBD_StrDesc;
 800968e:	4b02      	ldr	r3, [pc, #8]	; (8009698 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009690:	4618      	mov	r0, r3
 8009692:	3708      	adds	r7, #8
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	20000efc 	.word	0x20000efc
 800969c:	0800e688 	.word	0x0800e688

080096a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	4603      	mov	r3, r0
 80096a8:	6039      	str	r1, [r7, #0]
 80096aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	221a      	movs	r2, #26
 80096b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80096b2:	f000 f843 	bl	800973c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80096b6:	4b02      	ldr	r3, [pc, #8]	; (80096c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	20000160 	.word	0x20000160

080096c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	4603      	mov	r3, r0
 80096cc:	6039      	str	r1, [r7, #0]
 80096ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80096d0:	79fb      	ldrb	r3, [r7, #7]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d105      	bne.n	80096e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80096d6:	683a      	ldr	r2, [r7, #0]
 80096d8:	4907      	ldr	r1, [pc, #28]	; (80096f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80096da:	4808      	ldr	r0, [pc, #32]	; (80096fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80096dc:	f7ff fdc8 	bl	8009270 <USBD_GetString>
 80096e0:	e004      	b.n	80096ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80096e2:	683a      	ldr	r2, [r7, #0]
 80096e4:	4904      	ldr	r1, [pc, #16]	; (80096f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80096e6:	4805      	ldr	r0, [pc, #20]	; (80096fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80096e8:	f7ff fdc2 	bl	8009270 <USBD_GetString>
  }
  return USBD_StrDesc;
 80096ec:	4b02      	ldr	r3, [pc, #8]	; (80096f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3708      	adds	r7, #8
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	20000efc 	.word	0x20000efc
 80096fc:	0800e69c 	.word	0x0800e69c

08009700 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	4603      	mov	r3, r0
 8009708:	6039      	str	r1, [r7, #0]
 800970a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800970c:	79fb      	ldrb	r3, [r7, #7]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d105      	bne.n	800971e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009712:	683a      	ldr	r2, [r7, #0]
 8009714:	4907      	ldr	r1, [pc, #28]	; (8009734 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009716:	4808      	ldr	r0, [pc, #32]	; (8009738 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009718:	f7ff fdaa 	bl	8009270 <USBD_GetString>
 800971c:	e004      	b.n	8009728 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800971e:	683a      	ldr	r2, [r7, #0]
 8009720:	4904      	ldr	r1, [pc, #16]	; (8009734 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009722:	4805      	ldr	r0, [pc, #20]	; (8009738 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009724:	f7ff fda4 	bl	8009270 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009728:	4b02      	ldr	r3, [pc, #8]	; (8009734 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800972a:	4618      	mov	r0, r3
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	20000efc 	.word	0x20000efc
 8009738:	0800e6a8 	.word	0x0800e6a8

0800973c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009742:	4b0f      	ldr	r3, [pc, #60]	; (8009780 <Get_SerialNum+0x44>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009748:	4b0e      	ldr	r3, [pc, #56]	; (8009784 <Get_SerialNum+0x48>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800974e:	4b0e      	ldr	r3, [pc, #56]	; (8009788 <Get_SerialNum+0x4c>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	4413      	add	r3, r2
 800975a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d009      	beq.n	8009776 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009762:	2208      	movs	r2, #8
 8009764:	4909      	ldr	r1, [pc, #36]	; (800978c <Get_SerialNum+0x50>)
 8009766:	68f8      	ldr	r0, [r7, #12]
 8009768:	f000 f814 	bl	8009794 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800976c:	2204      	movs	r2, #4
 800976e:	4908      	ldr	r1, [pc, #32]	; (8009790 <Get_SerialNum+0x54>)
 8009770:	68b8      	ldr	r0, [r7, #8]
 8009772:	f000 f80f 	bl	8009794 <IntToUnicode>
  }
}
 8009776:	bf00      	nop
 8009778:	3710      	adds	r7, #16
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	1ffff7e8 	.word	0x1ffff7e8
 8009784:	1ffff7ec 	.word	0x1ffff7ec
 8009788:	1ffff7f0 	.word	0x1ffff7f0
 800978c:	20000162 	.word	0x20000162
 8009790:	20000172 	.word	0x20000172

08009794 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009794:	b480      	push	{r7}
 8009796:	b087      	sub	sp, #28
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	4613      	mov	r3, r2
 80097a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80097a2:	2300      	movs	r3, #0
 80097a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80097a6:	2300      	movs	r3, #0
 80097a8:	75fb      	strb	r3, [r7, #23]
 80097aa:	e027      	b.n	80097fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	0f1b      	lsrs	r3, r3, #28
 80097b0:	2b09      	cmp	r3, #9
 80097b2:	d80b      	bhi.n	80097cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	0f1b      	lsrs	r3, r3, #28
 80097b8:	b2da      	uxtb	r2, r3
 80097ba:	7dfb      	ldrb	r3, [r7, #23]
 80097bc:	005b      	lsls	r3, r3, #1
 80097be:	4619      	mov	r1, r3
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	440b      	add	r3, r1
 80097c4:	3230      	adds	r2, #48	; 0x30
 80097c6:	b2d2      	uxtb	r2, r2
 80097c8:	701a      	strb	r2, [r3, #0]
 80097ca:	e00a      	b.n	80097e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	0f1b      	lsrs	r3, r3, #28
 80097d0:	b2da      	uxtb	r2, r3
 80097d2:	7dfb      	ldrb	r3, [r7, #23]
 80097d4:	005b      	lsls	r3, r3, #1
 80097d6:	4619      	mov	r1, r3
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	440b      	add	r3, r1
 80097dc:	3237      	adds	r2, #55	; 0x37
 80097de:	b2d2      	uxtb	r2, r2
 80097e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	011b      	lsls	r3, r3, #4
 80097e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80097e8:	7dfb      	ldrb	r3, [r7, #23]
 80097ea:	005b      	lsls	r3, r3, #1
 80097ec:	3301      	adds	r3, #1
 80097ee:	68ba      	ldr	r2, [r7, #8]
 80097f0:	4413      	add	r3, r2
 80097f2:	2200      	movs	r2, #0
 80097f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80097f6:	7dfb      	ldrb	r3, [r7, #23]
 80097f8:	3301      	adds	r3, #1
 80097fa:	75fb      	strb	r3, [r7, #23]
 80097fc:	7dfa      	ldrb	r2, [r7, #23]
 80097fe:	79fb      	ldrb	r3, [r7, #7]
 8009800:	429a      	cmp	r2, r3
 8009802:	d3d3      	bcc.n	80097ac <IntToUnicode+0x18>
  }
}
 8009804:	bf00      	nop
 8009806:	bf00      	nop
 8009808:	371c      	adds	r7, #28
 800980a:	46bd      	mov	sp, r7
 800980c:	bc80      	pop	{r7}
 800980e:	4770      	bx	lr

08009810 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a11      	ldr	r2, [pc, #68]	; (8009864 <HAL_PCD_MspInit+0x54>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d11b      	bne.n	800985a <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009822:	4b11      	ldr	r3, [pc, #68]	; (8009868 <HAL_PCD_MspInit+0x58>)
 8009824:	69db      	ldr	r3, [r3, #28]
 8009826:	4a10      	ldr	r2, [pc, #64]	; (8009868 <HAL_PCD_MspInit+0x58>)
 8009828:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800982c:	61d3      	str	r3, [r2, #28]
 800982e:	4b0e      	ldr	r3, [pc, #56]	; (8009868 <HAL_PCD_MspInit+0x58>)
 8009830:	69db      	ldr	r3, [r3, #28]
 8009832:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009836:	60fb      	str	r3, [r7, #12]
 8009838:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800983a:	2200      	movs	r2, #0
 800983c:	2100      	movs	r1, #0
 800983e:	2013      	movs	r0, #19
 8009840:	f7f8 fc1d 	bl	800207e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8009844:	2013      	movs	r0, #19
 8009846:	f7f8 fc36 	bl	80020b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800984a:	2200      	movs	r2, #0
 800984c:	2100      	movs	r1, #0
 800984e:	2014      	movs	r0, #20
 8009850:	f7f8 fc15 	bl	800207e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009854:	2014      	movs	r0, #20
 8009856:	f7f8 fc2e 	bl	80020b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800985a:	bf00      	nop
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	40005c00 	.word	0x40005c00
 8009868:	40021000 	.word	0x40021000

0800986c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009880:	4619      	mov	r1, r3
 8009882:	4610      	mov	r0, r2
 8009884:	f7fe fdc3 	bl	800840e <USBD_LL_SetupStage>
}
 8009888:	bf00      	nop
 800988a:	3708      	adds	r7, #8
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	460b      	mov	r3, r1
 800989a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80098a2:	78fa      	ldrb	r2, [r7, #3]
 80098a4:	6879      	ldr	r1, [r7, #4]
 80098a6:	4613      	mov	r3, r2
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	4413      	add	r3, r2
 80098ac:	00db      	lsls	r3, r3, #3
 80098ae:	440b      	add	r3, r1
 80098b0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	78fb      	ldrb	r3, [r7, #3]
 80098b8:	4619      	mov	r1, r3
 80098ba:	f7fe fdf5 	bl	80084a8 <USBD_LL_DataOutStage>
}
 80098be:	bf00      	nop
 80098c0:	3708      	adds	r7, #8
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098c6:	b580      	push	{r7, lr}
 80098c8:	b082      	sub	sp, #8
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
 80098ce:	460b      	mov	r3, r1
 80098d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80098d8:	78fa      	ldrb	r2, [r7, #3]
 80098da:	6879      	ldr	r1, [r7, #4]
 80098dc:	4613      	mov	r3, r2
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	4413      	add	r3, r2
 80098e2:	00db      	lsls	r3, r3, #3
 80098e4:	440b      	add	r3, r1
 80098e6:	333c      	adds	r3, #60	; 0x3c
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	78fb      	ldrb	r3, [r7, #3]
 80098ec:	4619      	mov	r1, r3
 80098ee:	f7fe fe4c 	bl	800858a <USBD_LL_DataInStage>
}
 80098f2:	bf00      	nop
 80098f4:	3708      	adds	r7, #8
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b082      	sub	sp, #8
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009908:	4618      	mov	r0, r3
 800990a:	f7fe ff5c 	bl	80087c6 <USBD_LL_SOF>
}
 800990e:	bf00      	nop
 8009910:	3708      	adds	r7, #8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b084      	sub	sp, #16
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800991e:	2301      	movs	r3, #1
 8009920:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	2b02      	cmp	r3, #2
 8009928:	d001      	beq.n	800992e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800992a:	f7f8 f86c 	bl	8001a06 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009934:	7bfa      	ldrb	r2, [r7, #15]
 8009936:	4611      	mov	r1, r2
 8009938:	4618      	mov	r0, r3
 800993a:	f7fe ff0c 	bl	8008756 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009944:	4618      	mov	r0, r3
 8009946:	f7fe fec5 	bl	80086d4 <USBD_LL_Reset>
}
 800994a:	bf00      	nop
 800994c:	3710      	adds	r7, #16
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
	...

08009954 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009962:	4618      	mov	r0, r3
 8009964:	f7fe ff06 	bl	8008774 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	699b      	ldr	r3, [r3, #24]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d005      	beq.n	800997c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009970:	4b04      	ldr	r3, [pc, #16]	; (8009984 <HAL_PCD_SuspendCallback+0x30>)
 8009972:	691b      	ldr	r3, [r3, #16]
 8009974:	4a03      	ldr	r2, [pc, #12]	; (8009984 <HAL_PCD_SuspendCallback+0x30>)
 8009976:	f043 0306 	orr.w	r3, r3, #6
 800997a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800997c:	bf00      	nop
 800997e:	3708      	adds	r7, #8
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}
 8009984:	e000ed00 	.word	0xe000ed00

08009988 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009996:	4618      	mov	r0, r3
 8009998:	f7fe ff00 	bl	800879c <USBD_LL_Resume>
}
 800999c:	bf00      	nop
 800999e:	3708      	adds	r7, #8
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80099ac:	4a28      	ldr	r2, [pc, #160]	; (8009a50 <USBD_LL_Init+0xac>)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a26      	ldr	r2, [pc, #152]	; (8009a50 <USBD_LL_Init+0xac>)
 80099b8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80099bc:	4b24      	ldr	r3, [pc, #144]	; (8009a50 <USBD_LL_Init+0xac>)
 80099be:	4a25      	ldr	r2, [pc, #148]	; (8009a54 <USBD_LL_Init+0xb0>)
 80099c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80099c2:	4b23      	ldr	r3, [pc, #140]	; (8009a50 <USBD_LL_Init+0xac>)
 80099c4:	2208      	movs	r2, #8
 80099c6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80099c8:	4b21      	ldr	r3, [pc, #132]	; (8009a50 <USBD_LL_Init+0xac>)
 80099ca:	2202      	movs	r2, #2
 80099cc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80099ce:	4b20      	ldr	r3, [pc, #128]	; (8009a50 <USBD_LL_Init+0xac>)
 80099d0:	2200      	movs	r2, #0
 80099d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80099d4:	4b1e      	ldr	r3, [pc, #120]	; (8009a50 <USBD_LL_Init+0xac>)
 80099d6:	2200      	movs	r2, #0
 80099d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80099da:	4b1d      	ldr	r3, [pc, #116]	; (8009a50 <USBD_LL_Init+0xac>)
 80099dc:	2200      	movs	r2, #0
 80099de:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80099e0:	481b      	ldr	r0, [pc, #108]	; (8009a50 <USBD_LL_Init+0xac>)
 80099e2:	f7f8 fe63 	bl	80026ac <HAL_PCD_Init>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d001      	beq.n	80099f0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80099ec:	f7f8 f80b 	bl	8001a06 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80099f6:	2318      	movs	r3, #24
 80099f8:	2200      	movs	r2, #0
 80099fa:	2100      	movs	r1, #0
 80099fc:	f7fa fb82 	bl	8004104 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009a06:	2358      	movs	r3, #88	; 0x58
 8009a08:	2200      	movs	r2, #0
 8009a0a:	2180      	movs	r1, #128	; 0x80
 8009a0c:	f7fa fb7a 	bl	8004104 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009a16:	23c0      	movs	r3, #192	; 0xc0
 8009a18:	2200      	movs	r2, #0
 8009a1a:	2181      	movs	r1, #129	; 0x81
 8009a1c:	f7fa fb72 	bl	8004104 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009a26:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	2101      	movs	r1, #1
 8009a2e:	f7fa fb69 	bl	8004104 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009a38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	2182      	movs	r1, #130	; 0x82
 8009a40:	f7fa fb60 	bl	8004104 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009a44:	2300      	movs	r3, #0
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3708      	adds	r7, #8
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	200010fc 	.word	0x200010fc
 8009a54:	40005c00 	.word	0x40005c00

08009a58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a60:	2300      	movs	r3, #0
 8009a62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a64:	2300      	movs	r3, #0
 8009a66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7f8 ff1b 	bl	80028aa <HAL_PCD_Start>
 8009a74:	4603      	mov	r3, r0
 8009a76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a78:	7bfb      	ldrb	r3, [r7, #15]
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f000 f94e 	bl	8009d1c <USBD_Get_USB_Status>
 8009a80:	4603      	mov	r3, r0
 8009a82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a84:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}

08009a8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b084      	sub	sp, #16
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
 8009a96:	4608      	mov	r0, r1
 8009a98:	4611      	mov	r1, r2
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	70fb      	strb	r3, [r7, #3]
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	70bb      	strb	r3, [r7, #2]
 8009aa4:	4613      	mov	r3, r2
 8009aa6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aac:	2300      	movs	r3, #0
 8009aae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009ab6:	78bb      	ldrb	r3, [r7, #2]
 8009ab8:	883a      	ldrh	r2, [r7, #0]
 8009aba:	78f9      	ldrb	r1, [r7, #3]
 8009abc:	f7f9 f870 	bl	8002ba0 <HAL_PCD_EP_Open>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ac4:	7bfb      	ldrb	r3, [r7, #15]
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f000 f928 	bl	8009d1c <USBD_Get_USB_Status>
 8009acc:	4603      	mov	r3, r0
 8009ace:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ad0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3710      	adds	r7, #16
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b084      	sub	sp, #16
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aea:	2300      	movs	r3, #0
 8009aec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009af4:	78fa      	ldrb	r2, [r7, #3]
 8009af6:	4611      	mov	r1, r2
 8009af8:	4618      	mov	r0, r3
 8009afa:	f7f9 f8ae 	bl	8002c5a <HAL_PCD_EP_Close>
 8009afe:	4603      	mov	r3, r0
 8009b00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b02:	7bfb      	ldrb	r3, [r7, #15]
 8009b04:	4618      	mov	r0, r3
 8009b06:	f000 f909 	bl	8009d1c <USBD_Get_USB_Status>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3710      	adds	r7, #16
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	460b      	mov	r3, r1
 8009b22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b24:	2300      	movs	r3, #0
 8009b26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b32:	78fa      	ldrb	r2, [r7, #3]
 8009b34:	4611      	mov	r1, r2
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7f9 f956 	bl	8002de8 <HAL_PCD_EP_SetStall>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b40:	7bfb      	ldrb	r3, [r7, #15]
 8009b42:	4618      	mov	r0, r3
 8009b44:	f000 f8ea 	bl	8009d1c <USBD_Get_USB_Status>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3710      	adds	r7, #16
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b084      	sub	sp, #16
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
 8009b5e:	460b      	mov	r3, r1
 8009b60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b62:	2300      	movs	r3, #0
 8009b64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b66:	2300      	movs	r3, #0
 8009b68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b70:	78fa      	ldrb	r2, [r7, #3]
 8009b72:	4611      	mov	r1, r2
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7f9 f997 	bl	8002ea8 <HAL_PCD_EP_ClrStall>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b7e:	7bfb      	ldrb	r3, [r7, #15]
 8009b80:	4618      	mov	r0, r3
 8009b82:	f000 f8cb 	bl	8009d1c <USBD_Get_USB_Status>
 8009b86:	4603      	mov	r3, r0
 8009b88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3710      	adds	r7, #16
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b085      	sub	sp, #20
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ba6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009ba8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	da0c      	bge.n	8009bca <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009bb0:	78fb      	ldrb	r3, [r7, #3]
 8009bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bb6:	68f9      	ldr	r1, [r7, #12]
 8009bb8:	1c5a      	adds	r2, r3, #1
 8009bba:	4613      	mov	r3, r2
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	4413      	add	r3, r2
 8009bc0:	00db      	lsls	r3, r3, #3
 8009bc2:	440b      	add	r3, r1
 8009bc4:	3302      	adds	r3, #2
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	e00b      	b.n	8009be2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009bca:	78fb      	ldrb	r3, [r7, #3]
 8009bcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bd0:	68f9      	ldr	r1, [r7, #12]
 8009bd2:	4613      	mov	r3, r2
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	4413      	add	r3, r2
 8009bd8:	00db      	lsls	r3, r3, #3
 8009bda:	440b      	add	r3, r1
 8009bdc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009be0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3714      	adds	r7, #20
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bc80      	pop	{r7}
 8009bea:	4770      	bx	lr

08009bec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c06:	78fa      	ldrb	r2, [r7, #3]
 8009c08:	4611      	mov	r1, r2
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7f8 ffa3 	bl	8002b56 <HAL_PCD_SetAddress>
 8009c10:	4603      	mov	r3, r0
 8009c12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c14:	7bfb      	ldrb	r3, [r7, #15]
 8009c16:	4618      	mov	r0, r3
 8009c18:	f000 f880 	bl	8009d1c <USBD_Get_USB_Status>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c20:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3710      	adds	r7, #16
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b086      	sub	sp, #24
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	60f8      	str	r0, [r7, #12]
 8009c32:	607a      	str	r2, [r7, #4]
 8009c34:	461a      	mov	r2, r3
 8009c36:	460b      	mov	r3, r1
 8009c38:	72fb      	strb	r3, [r7, #11]
 8009c3a:	4613      	mov	r3, r2
 8009c3c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c42:	2300      	movs	r3, #0
 8009c44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c4c:	893b      	ldrh	r3, [r7, #8]
 8009c4e:	7af9      	ldrb	r1, [r7, #11]
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	f7f9 f892 	bl	8002d7a <HAL_PCD_EP_Transmit>
 8009c56:	4603      	mov	r3, r0
 8009c58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c5a:	7dfb      	ldrb	r3, [r7, #23]
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f000 f85d 	bl	8009d1c <USBD_Get_USB_Status>
 8009c62:	4603      	mov	r3, r0
 8009c64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c66:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3718      	adds	r7, #24
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b086      	sub	sp, #24
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	607a      	str	r2, [r7, #4]
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	72fb      	strb	r3, [r7, #11]
 8009c80:	4613      	mov	r3, r2
 8009c82:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c84:	2300      	movs	r3, #0
 8009c86:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c92:	893b      	ldrh	r3, [r7, #8]
 8009c94:	7af9      	ldrb	r1, [r7, #11]
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	f7f9 f827 	bl	8002cea <HAL_PCD_EP_Receive>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ca0:	7dfb      	ldrb	r3, [r7, #23]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f000 f83a 	bl	8009d1c <USBD_Get_USB_Status>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009cac:	7dbb      	ldrb	r3, [r7, #22]
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3718      	adds	r7, #24
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}

08009cb6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b082      	sub	sp, #8
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cc8:	78fa      	ldrb	r2, [r7, #3]
 8009cca:	4611      	mov	r1, r2
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7f9 f83d 	bl	8002d4c <HAL_PCD_EP_GetRxCount>
 8009cd2:	4603      	mov	r3, r0
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3708      	adds	r7, #8
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b083      	sub	sp, #12
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009ce4:	4b02      	ldr	r3, [pc, #8]	; (8009cf0 <USBD_static_malloc+0x14>)
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	370c      	adds	r7, #12
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bc80      	pop	{r7}
 8009cee:	4770      	bx	lr
 8009cf0:	200013ec 	.word	0x200013ec

08009cf4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]

}
 8009cfc:	bf00      	nop
 8009cfe:	370c      	adds	r7, #12
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bc80      	pop	{r7}
 8009d04:	4770      	bx	lr

08009d06 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d06:	b480      	push	{r7}
 8009d08:	b083      	sub	sp, #12
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
 8009d0e:	460b      	mov	r3, r1
 8009d10:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009d12:	bf00      	nop
 8009d14:	370c      	adds	r7, #12
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bc80      	pop	{r7}
 8009d1a:	4770      	bx	lr

08009d1c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b085      	sub	sp, #20
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	4603      	mov	r3, r0
 8009d24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d26:	2300      	movs	r3, #0
 8009d28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009d2a:	79fb      	ldrb	r3, [r7, #7]
 8009d2c:	2b03      	cmp	r3, #3
 8009d2e:	d817      	bhi.n	8009d60 <USBD_Get_USB_Status+0x44>
 8009d30:	a201      	add	r2, pc, #4	; (adr r2, 8009d38 <USBD_Get_USB_Status+0x1c>)
 8009d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d36:	bf00      	nop
 8009d38:	08009d49 	.word	0x08009d49
 8009d3c:	08009d4f 	.word	0x08009d4f
 8009d40:	08009d55 	.word	0x08009d55
 8009d44:	08009d5b 	.word	0x08009d5b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	73fb      	strb	r3, [r7, #15]
    break;
 8009d4c:	e00b      	b.n	8009d66 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009d4e:	2302      	movs	r3, #2
 8009d50:	73fb      	strb	r3, [r7, #15]
    break;
 8009d52:	e008      	b.n	8009d66 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009d54:	2301      	movs	r3, #1
 8009d56:	73fb      	strb	r3, [r7, #15]
    break;
 8009d58:	e005      	b.n	8009d66 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009d5a:	2302      	movs	r3, #2
 8009d5c:	73fb      	strb	r3, [r7, #15]
    break;
 8009d5e:	e002      	b.n	8009d66 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009d60:	2302      	movs	r3, #2
 8009d62:	73fb      	strb	r3, [r7, #15]
    break;
 8009d64:	bf00      	nop
  }
  return usb_status;
 8009d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3714      	adds	r7, #20
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bc80      	pop	{r7}
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop

08009d74 <__errno>:
 8009d74:	4b01      	ldr	r3, [pc, #4]	; (8009d7c <__errno+0x8>)
 8009d76:	6818      	ldr	r0, [r3, #0]
 8009d78:	4770      	bx	lr
 8009d7a:	bf00      	nop
 8009d7c:	2000017c 	.word	0x2000017c

08009d80 <__libc_init_array>:
 8009d80:	b570      	push	{r4, r5, r6, lr}
 8009d82:	2600      	movs	r6, #0
 8009d84:	4d0c      	ldr	r5, [pc, #48]	; (8009db8 <__libc_init_array+0x38>)
 8009d86:	4c0d      	ldr	r4, [pc, #52]	; (8009dbc <__libc_init_array+0x3c>)
 8009d88:	1b64      	subs	r4, r4, r5
 8009d8a:	10a4      	asrs	r4, r4, #2
 8009d8c:	42a6      	cmp	r6, r4
 8009d8e:	d109      	bne.n	8009da4 <__libc_init_array+0x24>
 8009d90:	f004 fc50 	bl	800e634 <_init>
 8009d94:	2600      	movs	r6, #0
 8009d96:	4d0a      	ldr	r5, [pc, #40]	; (8009dc0 <__libc_init_array+0x40>)
 8009d98:	4c0a      	ldr	r4, [pc, #40]	; (8009dc4 <__libc_init_array+0x44>)
 8009d9a:	1b64      	subs	r4, r4, r5
 8009d9c:	10a4      	asrs	r4, r4, #2
 8009d9e:	42a6      	cmp	r6, r4
 8009da0:	d105      	bne.n	8009dae <__libc_init_array+0x2e>
 8009da2:	bd70      	pop	{r4, r5, r6, pc}
 8009da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009da8:	4798      	blx	r3
 8009daa:	3601      	adds	r6, #1
 8009dac:	e7ee      	b.n	8009d8c <__libc_init_array+0xc>
 8009dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8009db2:	4798      	blx	r3
 8009db4:	3601      	adds	r6, #1
 8009db6:	e7f2      	b.n	8009d9e <__libc_init_array+0x1e>
 8009db8:	0800eb8c 	.word	0x0800eb8c
 8009dbc:	0800eb8c 	.word	0x0800eb8c
 8009dc0:	0800eb8c 	.word	0x0800eb8c
 8009dc4:	0800eb90 	.word	0x0800eb90

08009dc8 <memset>:
 8009dc8:	4603      	mov	r3, r0
 8009dca:	4402      	add	r2, r0
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d100      	bne.n	8009dd2 <memset+0xa>
 8009dd0:	4770      	bx	lr
 8009dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8009dd6:	e7f9      	b.n	8009dcc <memset+0x4>

08009dd8 <__cvt>:
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dde:	461f      	mov	r7, r3
 8009de0:	bfbb      	ittet	lt
 8009de2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009de6:	461f      	movlt	r7, r3
 8009de8:	2300      	movge	r3, #0
 8009dea:	232d      	movlt	r3, #45	; 0x2d
 8009dec:	b088      	sub	sp, #32
 8009dee:	4614      	mov	r4, r2
 8009df0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009df2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009df4:	7013      	strb	r3, [r2, #0]
 8009df6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009df8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009dfc:	f023 0820 	bic.w	r8, r3, #32
 8009e00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009e04:	d005      	beq.n	8009e12 <__cvt+0x3a>
 8009e06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009e0a:	d100      	bne.n	8009e0e <__cvt+0x36>
 8009e0c:	3501      	adds	r5, #1
 8009e0e:	2302      	movs	r3, #2
 8009e10:	e000      	b.n	8009e14 <__cvt+0x3c>
 8009e12:	2303      	movs	r3, #3
 8009e14:	aa07      	add	r2, sp, #28
 8009e16:	9204      	str	r2, [sp, #16]
 8009e18:	aa06      	add	r2, sp, #24
 8009e1a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009e1e:	e9cd 3500 	strd	r3, r5, [sp]
 8009e22:	4622      	mov	r2, r4
 8009e24:	463b      	mov	r3, r7
 8009e26:	f001 fd83 	bl	800b930 <_dtoa_r>
 8009e2a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009e2e:	4606      	mov	r6, r0
 8009e30:	d102      	bne.n	8009e38 <__cvt+0x60>
 8009e32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e34:	07db      	lsls	r3, r3, #31
 8009e36:	d522      	bpl.n	8009e7e <__cvt+0xa6>
 8009e38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009e3c:	eb06 0905 	add.w	r9, r6, r5
 8009e40:	d110      	bne.n	8009e64 <__cvt+0x8c>
 8009e42:	7833      	ldrb	r3, [r6, #0]
 8009e44:	2b30      	cmp	r3, #48	; 0x30
 8009e46:	d10a      	bne.n	8009e5e <__cvt+0x86>
 8009e48:	2200      	movs	r2, #0
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	4620      	mov	r0, r4
 8009e4e:	4639      	mov	r1, r7
 8009e50:	f7f6 fdaa 	bl	80009a8 <__aeabi_dcmpeq>
 8009e54:	b918      	cbnz	r0, 8009e5e <__cvt+0x86>
 8009e56:	f1c5 0501 	rsb	r5, r5, #1
 8009e5a:	f8ca 5000 	str.w	r5, [sl]
 8009e5e:	f8da 3000 	ldr.w	r3, [sl]
 8009e62:	4499      	add	r9, r3
 8009e64:	2200      	movs	r2, #0
 8009e66:	2300      	movs	r3, #0
 8009e68:	4620      	mov	r0, r4
 8009e6a:	4639      	mov	r1, r7
 8009e6c:	f7f6 fd9c 	bl	80009a8 <__aeabi_dcmpeq>
 8009e70:	b108      	cbz	r0, 8009e76 <__cvt+0x9e>
 8009e72:	f8cd 901c 	str.w	r9, [sp, #28]
 8009e76:	2230      	movs	r2, #48	; 0x30
 8009e78:	9b07      	ldr	r3, [sp, #28]
 8009e7a:	454b      	cmp	r3, r9
 8009e7c:	d307      	bcc.n	8009e8e <__cvt+0xb6>
 8009e7e:	4630      	mov	r0, r6
 8009e80:	9b07      	ldr	r3, [sp, #28]
 8009e82:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009e84:	1b9b      	subs	r3, r3, r6
 8009e86:	6013      	str	r3, [r2, #0]
 8009e88:	b008      	add	sp, #32
 8009e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e8e:	1c59      	adds	r1, r3, #1
 8009e90:	9107      	str	r1, [sp, #28]
 8009e92:	701a      	strb	r2, [r3, #0]
 8009e94:	e7f0      	b.n	8009e78 <__cvt+0xa0>

08009e96 <__exponent>:
 8009e96:	4603      	mov	r3, r0
 8009e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e9a:	2900      	cmp	r1, #0
 8009e9c:	f803 2b02 	strb.w	r2, [r3], #2
 8009ea0:	bfb6      	itet	lt
 8009ea2:	222d      	movlt	r2, #45	; 0x2d
 8009ea4:	222b      	movge	r2, #43	; 0x2b
 8009ea6:	4249      	neglt	r1, r1
 8009ea8:	2909      	cmp	r1, #9
 8009eaa:	7042      	strb	r2, [r0, #1]
 8009eac:	dd2b      	ble.n	8009f06 <__exponent+0x70>
 8009eae:	f10d 0407 	add.w	r4, sp, #7
 8009eb2:	46a4      	mov	ip, r4
 8009eb4:	270a      	movs	r7, #10
 8009eb6:	fb91 f6f7 	sdiv	r6, r1, r7
 8009eba:	460a      	mov	r2, r1
 8009ebc:	46a6      	mov	lr, r4
 8009ebe:	fb07 1516 	mls	r5, r7, r6, r1
 8009ec2:	2a63      	cmp	r2, #99	; 0x63
 8009ec4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009ec8:	4631      	mov	r1, r6
 8009eca:	f104 34ff 	add.w	r4, r4, #4294967295
 8009ece:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009ed2:	dcf0      	bgt.n	8009eb6 <__exponent+0x20>
 8009ed4:	3130      	adds	r1, #48	; 0x30
 8009ed6:	f1ae 0502 	sub.w	r5, lr, #2
 8009eda:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009ede:	4629      	mov	r1, r5
 8009ee0:	1c44      	adds	r4, r0, #1
 8009ee2:	4561      	cmp	r1, ip
 8009ee4:	d30a      	bcc.n	8009efc <__exponent+0x66>
 8009ee6:	f10d 0209 	add.w	r2, sp, #9
 8009eea:	eba2 020e 	sub.w	r2, r2, lr
 8009eee:	4565      	cmp	r5, ip
 8009ef0:	bf88      	it	hi
 8009ef2:	2200      	movhi	r2, #0
 8009ef4:	4413      	add	r3, r2
 8009ef6:	1a18      	subs	r0, r3, r0
 8009ef8:	b003      	add	sp, #12
 8009efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009efc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f00:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009f04:	e7ed      	b.n	8009ee2 <__exponent+0x4c>
 8009f06:	2330      	movs	r3, #48	; 0x30
 8009f08:	3130      	adds	r1, #48	; 0x30
 8009f0a:	7083      	strb	r3, [r0, #2]
 8009f0c:	70c1      	strb	r1, [r0, #3]
 8009f0e:	1d03      	adds	r3, r0, #4
 8009f10:	e7f1      	b.n	8009ef6 <__exponent+0x60>
	...

08009f14 <_printf_float>:
 8009f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f18:	b091      	sub	sp, #68	; 0x44
 8009f1a:	460c      	mov	r4, r1
 8009f1c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009f20:	4616      	mov	r6, r2
 8009f22:	461f      	mov	r7, r3
 8009f24:	4605      	mov	r5, r0
 8009f26:	f002 fe57 	bl	800cbd8 <_localeconv_r>
 8009f2a:	6803      	ldr	r3, [r0, #0]
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8009f30:	f7f6 f90e 	bl	8000150 <strlen>
 8009f34:	2300      	movs	r3, #0
 8009f36:	930e      	str	r3, [sp, #56]	; 0x38
 8009f38:	f8d8 3000 	ldr.w	r3, [r8]
 8009f3c:	900a      	str	r0, [sp, #40]	; 0x28
 8009f3e:	3307      	adds	r3, #7
 8009f40:	f023 0307 	bic.w	r3, r3, #7
 8009f44:	f103 0208 	add.w	r2, r3, #8
 8009f48:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009f4c:	f8d4 b000 	ldr.w	fp, [r4]
 8009f50:	f8c8 2000 	str.w	r2, [r8]
 8009f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f58:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009f5c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009f60:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009f64:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f66:	f04f 32ff 	mov.w	r2, #4294967295
 8009f6a:	4640      	mov	r0, r8
 8009f6c:	4b9c      	ldr	r3, [pc, #624]	; (800a1e0 <_printf_float+0x2cc>)
 8009f6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f70:	f7f6 fd4c 	bl	8000a0c <__aeabi_dcmpun>
 8009f74:	bb70      	cbnz	r0, 8009fd4 <_printf_float+0xc0>
 8009f76:	f04f 32ff 	mov.w	r2, #4294967295
 8009f7a:	4640      	mov	r0, r8
 8009f7c:	4b98      	ldr	r3, [pc, #608]	; (800a1e0 <_printf_float+0x2cc>)
 8009f7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f80:	f7f6 fd26 	bl	80009d0 <__aeabi_dcmple>
 8009f84:	bb30      	cbnz	r0, 8009fd4 <_printf_float+0xc0>
 8009f86:	2200      	movs	r2, #0
 8009f88:	2300      	movs	r3, #0
 8009f8a:	4640      	mov	r0, r8
 8009f8c:	4651      	mov	r1, sl
 8009f8e:	f7f6 fd15 	bl	80009bc <__aeabi_dcmplt>
 8009f92:	b110      	cbz	r0, 8009f9a <_printf_float+0x86>
 8009f94:	232d      	movs	r3, #45	; 0x2d
 8009f96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f9a:	4b92      	ldr	r3, [pc, #584]	; (800a1e4 <_printf_float+0x2d0>)
 8009f9c:	4892      	ldr	r0, [pc, #584]	; (800a1e8 <_printf_float+0x2d4>)
 8009f9e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009fa2:	bf94      	ite	ls
 8009fa4:	4698      	movls	r8, r3
 8009fa6:	4680      	movhi	r8, r0
 8009fa8:	2303      	movs	r3, #3
 8009faa:	f04f 0a00 	mov.w	sl, #0
 8009fae:	6123      	str	r3, [r4, #16]
 8009fb0:	f02b 0304 	bic.w	r3, fp, #4
 8009fb4:	6023      	str	r3, [r4, #0]
 8009fb6:	4633      	mov	r3, r6
 8009fb8:	4621      	mov	r1, r4
 8009fba:	4628      	mov	r0, r5
 8009fbc:	9700      	str	r7, [sp, #0]
 8009fbe:	aa0f      	add	r2, sp, #60	; 0x3c
 8009fc0:	f000 f9d4 	bl	800a36c <_printf_common>
 8009fc4:	3001      	adds	r0, #1
 8009fc6:	f040 8090 	bne.w	800a0ea <_printf_float+0x1d6>
 8009fca:	f04f 30ff 	mov.w	r0, #4294967295
 8009fce:	b011      	add	sp, #68	; 0x44
 8009fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fd4:	4642      	mov	r2, r8
 8009fd6:	4653      	mov	r3, sl
 8009fd8:	4640      	mov	r0, r8
 8009fda:	4651      	mov	r1, sl
 8009fdc:	f7f6 fd16 	bl	8000a0c <__aeabi_dcmpun>
 8009fe0:	b148      	cbz	r0, 8009ff6 <_printf_float+0xe2>
 8009fe2:	f1ba 0f00 	cmp.w	sl, #0
 8009fe6:	bfb8      	it	lt
 8009fe8:	232d      	movlt	r3, #45	; 0x2d
 8009fea:	4880      	ldr	r0, [pc, #512]	; (800a1ec <_printf_float+0x2d8>)
 8009fec:	bfb8      	it	lt
 8009fee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009ff2:	4b7f      	ldr	r3, [pc, #508]	; (800a1f0 <_printf_float+0x2dc>)
 8009ff4:	e7d3      	b.n	8009f9e <_printf_float+0x8a>
 8009ff6:	6863      	ldr	r3, [r4, #4]
 8009ff8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009ffc:	1c5a      	adds	r2, r3, #1
 8009ffe:	d142      	bne.n	800a086 <_printf_float+0x172>
 800a000:	2306      	movs	r3, #6
 800a002:	6063      	str	r3, [r4, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	9206      	str	r2, [sp, #24]
 800a008:	aa0e      	add	r2, sp, #56	; 0x38
 800a00a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800a00e:	aa0d      	add	r2, sp, #52	; 0x34
 800a010:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800a014:	9203      	str	r2, [sp, #12]
 800a016:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800a01a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a01e:	6023      	str	r3, [r4, #0]
 800a020:	6863      	ldr	r3, [r4, #4]
 800a022:	4642      	mov	r2, r8
 800a024:	9300      	str	r3, [sp, #0]
 800a026:	4628      	mov	r0, r5
 800a028:	4653      	mov	r3, sl
 800a02a:	910b      	str	r1, [sp, #44]	; 0x2c
 800a02c:	f7ff fed4 	bl	8009dd8 <__cvt>
 800a030:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a032:	4680      	mov	r8, r0
 800a034:	2947      	cmp	r1, #71	; 0x47
 800a036:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a038:	d108      	bne.n	800a04c <_printf_float+0x138>
 800a03a:	1cc8      	adds	r0, r1, #3
 800a03c:	db02      	blt.n	800a044 <_printf_float+0x130>
 800a03e:	6863      	ldr	r3, [r4, #4]
 800a040:	4299      	cmp	r1, r3
 800a042:	dd40      	ble.n	800a0c6 <_printf_float+0x1b2>
 800a044:	f1a9 0902 	sub.w	r9, r9, #2
 800a048:	fa5f f989 	uxtb.w	r9, r9
 800a04c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a050:	d81f      	bhi.n	800a092 <_printf_float+0x17e>
 800a052:	464a      	mov	r2, r9
 800a054:	3901      	subs	r1, #1
 800a056:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a05a:	910d      	str	r1, [sp, #52]	; 0x34
 800a05c:	f7ff ff1b 	bl	8009e96 <__exponent>
 800a060:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a062:	4682      	mov	sl, r0
 800a064:	1813      	adds	r3, r2, r0
 800a066:	2a01      	cmp	r2, #1
 800a068:	6123      	str	r3, [r4, #16]
 800a06a:	dc02      	bgt.n	800a072 <_printf_float+0x15e>
 800a06c:	6822      	ldr	r2, [r4, #0]
 800a06e:	07d2      	lsls	r2, r2, #31
 800a070:	d501      	bpl.n	800a076 <_printf_float+0x162>
 800a072:	3301      	adds	r3, #1
 800a074:	6123      	str	r3, [r4, #16]
 800a076:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d09b      	beq.n	8009fb6 <_printf_float+0xa2>
 800a07e:	232d      	movs	r3, #45	; 0x2d
 800a080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a084:	e797      	b.n	8009fb6 <_printf_float+0xa2>
 800a086:	2947      	cmp	r1, #71	; 0x47
 800a088:	d1bc      	bne.n	800a004 <_printf_float+0xf0>
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d1ba      	bne.n	800a004 <_printf_float+0xf0>
 800a08e:	2301      	movs	r3, #1
 800a090:	e7b7      	b.n	800a002 <_printf_float+0xee>
 800a092:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a096:	d118      	bne.n	800a0ca <_printf_float+0x1b6>
 800a098:	2900      	cmp	r1, #0
 800a09a:	6863      	ldr	r3, [r4, #4]
 800a09c:	dd0b      	ble.n	800a0b6 <_printf_float+0x1a2>
 800a09e:	6121      	str	r1, [r4, #16]
 800a0a0:	b913      	cbnz	r3, 800a0a8 <_printf_float+0x194>
 800a0a2:	6822      	ldr	r2, [r4, #0]
 800a0a4:	07d0      	lsls	r0, r2, #31
 800a0a6:	d502      	bpl.n	800a0ae <_printf_float+0x19a>
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	440b      	add	r3, r1
 800a0ac:	6123      	str	r3, [r4, #16]
 800a0ae:	f04f 0a00 	mov.w	sl, #0
 800a0b2:	65a1      	str	r1, [r4, #88]	; 0x58
 800a0b4:	e7df      	b.n	800a076 <_printf_float+0x162>
 800a0b6:	b913      	cbnz	r3, 800a0be <_printf_float+0x1aa>
 800a0b8:	6822      	ldr	r2, [r4, #0]
 800a0ba:	07d2      	lsls	r2, r2, #31
 800a0bc:	d501      	bpl.n	800a0c2 <_printf_float+0x1ae>
 800a0be:	3302      	adds	r3, #2
 800a0c0:	e7f4      	b.n	800a0ac <_printf_float+0x198>
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e7f2      	b.n	800a0ac <_printf_float+0x198>
 800a0c6:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a0ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0cc:	4299      	cmp	r1, r3
 800a0ce:	db05      	blt.n	800a0dc <_printf_float+0x1c8>
 800a0d0:	6823      	ldr	r3, [r4, #0]
 800a0d2:	6121      	str	r1, [r4, #16]
 800a0d4:	07d8      	lsls	r0, r3, #31
 800a0d6:	d5ea      	bpl.n	800a0ae <_printf_float+0x19a>
 800a0d8:	1c4b      	adds	r3, r1, #1
 800a0da:	e7e7      	b.n	800a0ac <_printf_float+0x198>
 800a0dc:	2900      	cmp	r1, #0
 800a0de:	bfcc      	ite	gt
 800a0e0:	2201      	movgt	r2, #1
 800a0e2:	f1c1 0202 	rsble	r2, r1, #2
 800a0e6:	4413      	add	r3, r2
 800a0e8:	e7e0      	b.n	800a0ac <_printf_float+0x198>
 800a0ea:	6823      	ldr	r3, [r4, #0]
 800a0ec:	055a      	lsls	r2, r3, #21
 800a0ee:	d407      	bmi.n	800a100 <_printf_float+0x1ec>
 800a0f0:	6923      	ldr	r3, [r4, #16]
 800a0f2:	4642      	mov	r2, r8
 800a0f4:	4631      	mov	r1, r6
 800a0f6:	4628      	mov	r0, r5
 800a0f8:	47b8      	blx	r7
 800a0fa:	3001      	adds	r0, #1
 800a0fc:	d12b      	bne.n	800a156 <_printf_float+0x242>
 800a0fe:	e764      	b.n	8009fca <_printf_float+0xb6>
 800a100:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a104:	f240 80dd 	bls.w	800a2c2 <_printf_float+0x3ae>
 800a108:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a10c:	2200      	movs	r2, #0
 800a10e:	2300      	movs	r3, #0
 800a110:	f7f6 fc4a 	bl	80009a8 <__aeabi_dcmpeq>
 800a114:	2800      	cmp	r0, #0
 800a116:	d033      	beq.n	800a180 <_printf_float+0x26c>
 800a118:	2301      	movs	r3, #1
 800a11a:	4631      	mov	r1, r6
 800a11c:	4628      	mov	r0, r5
 800a11e:	4a35      	ldr	r2, [pc, #212]	; (800a1f4 <_printf_float+0x2e0>)
 800a120:	47b8      	blx	r7
 800a122:	3001      	adds	r0, #1
 800a124:	f43f af51 	beq.w	8009fca <_printf_float+0xb6>
 800a128:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a12c:	429a      	cmp	r2, r3
 800a12e:	db02      	blt.n	800a136 <_printf_float+0x222>
 800a130:	6823      	ldr	r3, [r4, #0]
 800a132:	07d8      	lsls	r0, r3, #31
 800a134:	d50f      	bpl.n	800a156 <_printf_float+0x242>
 800a136:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a13a:	4631      	mov	r1, r6
 800a13c:	4628      	mov	r0, r5
 800a13e:	47b8      	blx	r7
 800a140:	3001      	adds	r0, #1
 800a142:	f43f af42 	beq.w	8009fca <_printf_float+0xb6>
 800a146:	f04f 0800 	mov.w	r8, #0
 800a14a:	f104 091a 	add.w	r9, r4, #26
 800a14e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a150:	3b01      	subs	r3, #1
 800a152:	4543      	cmp	r3, r8
 800a154:	dc09      	bgt.n	800a16a <_printf_float+0x256>
 800a156:	6823      	ldr	r3, [r4, #0]
 800a158:	079b      	lsls	r3, r3, #30
 800a15a:	f100 8102 	bmi.w	800a362 <_printf_float+0x44e>
 800a15e:	68e0      	ldr	r0, [r4, #12]
 800a160:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a162:	4298      	cmp	r0, r3
 800a164:	bfb8      	it	lt
 800a166:	4618      	movlt	r0, r3
 800a168:	e731      	b.n	8009fce <_printf_float+0xba>
 800a16a:	2301      	movs	r3, #1
 800a16c:	464a      	mov	r2, r9
 800a16e:	4631      	mov	r1, r6
 800a170:	4628      	mov	r0, r5
 800a172:	47b8      	blx	r7
 800a174:	3001      	adds	r0, #1
 800a176:	f43f af28 	beq.w	8009fca <_printf_float+0xb6>
 800a17a:	f108 0801 	add.w	r8, r8, #1
 800a17e:	e7e6      	b.n	800a14e <_printf_float+0x23a>
 800a180:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a182:	2b00      	cmp	r3, #0
 800a184:	dc38      	bgt.n	800a1f8 <_printf_float+0x2e4>
 800a186:	2301      	movs	r3, #1
 800a188:	4631      	mov	r1, r6
 800a18a:	4628      	mov	r0, r5
 800a18c:	4a19      	ldr	r2, [pc, #100]	; (800a1f4 <_printf_float+0x2e0>)
 800a18e:	47b8      	blx	r7
 800a190:	3001      	adds	r0, #1
 800a192:	f43f af1a 	beq.w	8009fca <_printf_float+0xb6>
 800a196:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a19a:	4313      	orrs	r3, r2
 800a19c:	d102      	bne.n	800a1a4 <_printf_float+0x290>
 800a19e:	6823      	ldr	r3, [r4, #0]
 800a1a0:	07d9      	lsls	r1, r3, #31
 800a1a2:	d5d8      	bpl.n	800a156 <_printf_float+0x242>
 800a1a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1a8:	4631      	mov	r1, r6
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	47b8      	blx	r7
 800a1ae:	3001      	adds	r0, #1
 800a1b0:	f43f af0b 	beq.w	8009fca <_printf_float+0xb6>
 800a1b4:	f04f 0900 	mov.w	r9, #0
 800a1b8:	f104 0a1a 	add.w	sl, r4, #26
 800a1bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1be:	425b      	negs	r3, r3
 800a1c0:	454b      	cmp	r3, r9
 800a1c2:	dc01      	bgt.n	800a1c8 <_printf_float+0x2b4>
 800a1c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1c6:	e794      	b.n	800a0f2 <_printf_float+0x1de>
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	4652      	mov	r2, sl
 800a1cc:	4631      	mov	r1, r6
 800a1ce:	4628      	mov	r0, r5
 800a1d0:	47b8      	blx	r7
 800a1d2:	3001      	adds	r0, #1
 800a1d4:	f43f aef9 	beq.w	8009fca <_printf_float+0xb6>
 800a1d8:	f109 0901 	add.w	r9, r9, #1
 800a1dc:	e7ee      	b.n	800a1bc <_printf_float+0x2a8>
 800a1de:	bf00      	nop
 800a1e0:	7fefffff 	.word	0x7fefffff
 800a1e4:	0800e6e8 	.word	0x0800e6e8
 800a1e8:	0800e6ec 	.word	0x0800e6ec
 800a1ec:	0800e6f4 	.word	0x0800e6f4
 800a1f0:	0800e6f0 	.word	0x0800e6f0
 800a1f4:	0800e6f8 	.word	0x0800e6f8
 800a1f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a1fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	bfa8      	it	ge
 800a200:	461a      	movge	r2, r3
 800a202:	2a00      	cmp	r2, #0
 800a204:	4691      	mov	r9, r2
 800a206:	dc37      	bgt.n	800a278 <_printf_float+0x364>
 800a208:	f04f 0b00 	mov.w	fp, #0
 800a20c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a210:	f104 021a 	add.w	r2, r4, #26
 800a214:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a218:	ebaa 0309 	sub.w	r3, sl, r9
 800a21c:	455b      	cmp	r3, fp
 800a21e:	dc33      	bgt.n	800a288 <_printf_float+0x374>
 800a220:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a224:	429a      	cmp	r2, r3
 800a226:	db3b      	blt.n	800a2a0 <_printf_float+0x38c>
 800a228:	6823      	ldr	r3, [r4, #0]
 800a22a:	07da      	lsls	r2, r3, #31
 800a22c:	d438      	bmi.n	800a2a0 <_printf_float+0x38c>
 800a22e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a230:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a232:	eba3 020a 	sub.w	r2, r3, sl
 800a236:	eba3 0901 	sub.w	r9, r3, r1
 800a23a:	4591      	cmp	r9, r2
 800a23c:	bfa8      	it	ge
 800a23e:	4691      	movge	r9, r2
 800a240:	f1b9 0f00 	cmp.w	r9, #0
 800a244:	dc34      	bgt.n	800a2b0 <_printf_float+0x39c>
 800a246:	f04f 0800 	mov.w	r8, #0
 800a24a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a24e:	f104 0a1a 	add.w	sl, r4, #26
 800a252:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a256:	1a9b      	subs	r3, r3, r2
 800a258:	eba3 0309 	sub.w	r3, r3, r9
 800a25c:	4543      	cmp	r3, r8
 800a25e:	f77f af7a 	ble.w	800a156 <_printf_float+0x242>
 800a262:	2301      	movs	r3, #1
 800a264:	4652      	mov	r2, sl
 800a266:	4631      	mov	r1, r6
 800a268:	4628      	mov	r0, r5
 800a26a:	47b8      	blx	r7
 800a26c:	3001      	adds	r0, #1
 800a26e:	f43f aeac 	beq.w	8009fca <_printf_float+0xb6>
 800a272:	f108 0801 	add.w	r8, r8, #1
 800a276:	e7ec      	b.n	800a252 <_printf_float+0x33e>
 800a278:	4613      	mov	r3, r2
 800a27a:	4631      	mov	r1, r6
 800a27c:	4642      	mov	r2, r8
 800a27e:	4628      	mov	r0, r5
 800a280:	47b8      	blx	r7
 800a282:	3001      	adds	r0, #1
 800a284:	d1c0      	bne.n	800a208 <_printf_float+0x2f4>
 800a286:	e6a0      	b.n	8009fca <_printf_float+0xb6>
 800a288:	2301      	movs	r3, #1
 800a28a:	4631      	mov	r1, r6
 800a28c:	4628      	mov	r0, r5
 800a28e:	920b      	str	r2, [sp, #44]	; 0x2c
 800a290:	47b8      	blx	r7
 800a292:	3001      	adds	r0, #1
 800a294:	f43f ae99 	beq.w	8009fca <_printf_float+0xb6>
 800a298:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a29a:	f10b 0b01 	add.w	fp, fp, #1
 800a29e:	e7b9      	b.n	800a214 <_printf_float+0x300>
 800a2a0:	4631      	mov	r1, r6
 800a2a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2a6:	4628      	mov	r0, r5
 800a2a8:	47b8      	blx	r7
 800a2aa:	3001      	adds	r0, #1
 800a2ac:	d1bf      	bne.n	800a22e <_printf_float+0x31a>
 800a2ae:	e68c      	b.n	8009fca <_printf_float+0xb6>
 800a2b0:	464b      	mov	r3, r9
 800a2b2:	4631      	mov	r1, r6
 800a2b4:	4628      	mov	r0, r5
 800a2b6:	eb08 020a 	add.w	r2, r8, sl
 800a2ba:	47b8      	blx	r7
 800a2bc:	3001      	adds	r0, #1
 800a2be:	d1c2      	bne.n	800a246 <_printf_float+0x332>
 800a2c0:	e683      	b.n	8009fca <_printf_float+0xb6>
 800a2c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a2c4:	2a01      	cmp	r2, #1
 800a2c6:	dc01      	bgt.n	800a2cc <_printf_float+0x3b8>
 800a2c8:	07db      	lsls	r3, r3, #31
 800a2ca:	d537      	bpl.n	800a33c <_printf_float+0x428>
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	4642      	mov	r2, r8
 800a2d0:	4631      	mov	r1, r6
 800a2d2:	4628      	mov	r0, r5
 800a2d4:	47b8      	blx	r7
 800a2d6:	3001      	adds	r0, #1
 800a2d8:	f43f ae77 	beq.w	8009fca <_printf_float+0xb6>
 800a2dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2e0:	4631      	mov	r1, r6
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	47b8      	blx	r7
 800a2e6:	3001      	adds	r0, #1
 800a2e8:	f43f ae6f 	beq.w	8009fca <_printf_float+0xb6>
 800a2ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	f7f6 fb58 	bl	80009a8 <__aeabi_dcmpeq>
 800a2f8:	b9d8      	cbnz	r0, 800a332 <_printf_float+0x41e>
 800a2fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2fc:	f108 0201 	add.w	r2, r8, #1
 800a300:	3b01      	subs	r3, #1
 800a302:	4631      	mov	r1, r6
 800a304:	4628      	mov	r0, r5
 800a306:	47b8      	blx	r7
 800a308:	3001      	adds	r0, #1
 800a30a:	d10e      	bne.n	800a32a <_printf_float+0x416>
 800a30c:	e65d      	b.n	8009fca <_printf_float+0xb6>
 800a30e:	2301      	movs	r3, #1
 800a310:	464a      	mov	r2, r9
 800a312:	4631      	mov	r1, r6
 800a314:	4628      	mov	r0, r5
 800a316:	47b8      	blx	r7
 800a318:	3001      	adds	r0, #1
 800a31a:	f43f ae56 	beq.w	8009fca <_printf_float+0xb6>
 800a31e:	f108 0801 	add.w	r8, r8, #1
 800a322:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a324:	3b01      	subs	r3, #1
 800a326:	4543      	cmp	r3, r8
 800a328:	dcf1      	bgt.n	800a30e <_printf_float+0x3fa>
 800a32a:	4653      	mov	r3, sl
 800a32c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a330:	e6e0      	b.n	800a0f4 <_printf_float+0x1e0>
 800a332:	f04f 0800 	mov.w	r8, #0
 800a336:	f104 091a 	add.w	r9, r4, #26
 800a33a:	e7f2      	b.n	800a322 <_printf_float+0x40e>
 800a33c:	2301      	movs	r3, #1
 800a33e:	4642      	mov	r2, r8
 800a340:	e7df      	b.n	800a302 <_printf_float+0x3ee>
 800a342:	2301      	movs	r3, #1
 800a344:	464a      	mov	r2, r9
 800a346:	4631      	mov	r1, r6
 800a348:	4628      	mov	r0, r5
 800a34a:	47b8      	blx	r7
 800a34c:	3001      	adds	r0, #1
 800a34e:	f43f ae3c 	beq.w	8009fca <_printf_float+0xb6>
 800a352:	f108 0801 	add.w	r8, r8, #1
 800a356:	68e3      	ldr	r3, [r4, #12]
 800a358:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a35a:	1a5b      	subs	r3, r3, r1
 800a35c:	4543      	cmp	r3, r8
 800a35e:	dcf0      	bgt.n	800a342 <_printf_float+0x42e>
 800a360:	e6fd      	b.n	800a15e <_printf_float+0x24a>
 800a362:	f04f 0800 	mov.w	r8, #0
 800a366:	f104 0919 	add.w	r9, r4, #25
 800a36a:	e7f4      	b.n	800a356 <_printf_float+0x442>

0800a36c <_printf_common>:
 800a36c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a370:	4616      	mov	r6, r2
 800a372:	4699      	mov	r9, r3
 800a374:	688a      	ldr	r2, [r1, #8]
 800a376:	690b      	ldr	r3, [r1, #16]
 800a378:	4607      	mov	r7, r0
 800a37a:	4293      	cmp	r3, r2
 800a37c:	bfb8      	it	lt
 800a37e:	4613      	movlt	r3, r2
 800a380:	6033      	str	r3, [r6, #0]
 800a382:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a386:	460c      	mov	r4, r1
 800a388:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a38c:	b10a      	cbz	r2, 800a392 <_printf_common+0x26>
 800a38e:	3301      	adds	r3, #1
 800a390:	6033      	str	r3, [r6, #0]
 800a392:	6823      	ldr	r3, [r4, #0]
 800a394:	0699      	lsls	r1, r3, #26
 800a396:	bf42      	ittt	mi
 800a398:	6833      	ldrmi	r3, [r6, #0]
 800a39a:	3302      	addmi	r3, #2
 800a39c:	6033      	strmi	r3, [r6, #0]
 800a39e:	6825      	ldr	r5, [r4, #0]
 800a3a0:	f015 0506 	ands.w	r5, r5, #6
 800a3a4:	d106      	bne.n	800a3b4 <_printf_common+0x48>
 800a3a6:	f104 0a19 	add.w	sl, r4, #25
 800a3aa:	68e3      	ldr	r3, [r4, #12]
 800a3ac:	6832      	ldr	r2, [r6, #0]
 800a3ae:	1a9b      	subs	r3, r3, r2
 800a3b0:	42ab      	cmp	r3, r5
 800a3b2:	dc28      	bgt.n	800a406 <_printf_common+0x9a>
 800a3b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a3b8:	1e13      	subs	r3, r2, #0
 800a3ba:	6822      	ldr	r2, [r4, #0]
 800a3bc:	bf18      	it	ne
 800a3be:	2301      	movne	r3, #1
 800a3c0:	0692      	lsls	r2, r2, #26
 800a3c2:	d42d      	bmi.n	800a420 <_printf_common+0xb4>
 800a3c4:	4649      	mov	r1, r9
 800a3c6:	4638      	mov	r0, r7
 800a3c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a3cc:	47c0      	blx	r8
 800a3ce:	3001      	adds	r0, #1
 800a3d0:	d020      	beq.n	800a414 <_printf_common+0xa8>
 800a3d2:	6823      	ldr	r3, [r4, #0]
 800a3d4:	68e5      	ldr	r5, [r4, #12]
 800a3d6:	f003 0306 	and.w	r3, r3, #6
 800a3da:	2b04      	cmp	r3, #4
 800a3dc:	bf18      	it	ne
 800a3de:	2500      	movne	r5, #0
 800a3e0:	6832      	ldr	r2, [r6, #0]
 800a3e2:	f04f 0600 	mov.w	r6, #0
 800a3e6:	68a3      	ldr	r3, [r4, #8]
 800a3e8:	bf08      	it	eq
 800a3ea:	1aad      	subeq	r5, r5, r2
 800a3ec:	6922      	ldr	r2, [r4, #16]
 800a3ee:	bf08      	it	eq
 800a3f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	bfc4      	itt	gt
 800a3f8:	1a9b      	subgt	r3, r3, r2
 800a3fa:	18ed      	addgt	r5, r5, r3
 800a3fc:	341a      	adds	r4, #26
 800a3fe:	42b5      	cmp	r5, r6
 800a400:	d11a      	bne.n	800a438 <_printf_common+0xcc>
 800a402:	2000      	movs	r0, #0
 800a404:	e008      	b.n	800a418 <_printf_common+0xac>
 800a406:	2301      	movs	r3, #1
 800a408:	4652      	mov	r2, sl
 800a40a:	4649      	mov	r1, r9
 800a40c:	4638      	mov	r0, r7
 800a40e:	47c0      	blx	r8
 800a410:	3001      	adds	r0, #1
 800a412:	d103      	bne.n	800a41c <_printf_common+0xb0>
 800a414:	f04f 30ff 	mov.w	r0, #4294967295
 800a418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a41c:	3501      	adds	r5, #1
 800a41e:	e7c4      	b.n	800a3aa <_printf_common+0x3e>
 800a420:	2030      	movs	r0, #48	; 0x30
 800a422:	18e1      	adds	r1, r4, r3
 800a424:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a428:	1c5a      	adds	r2, r3, #1
 800a42a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a42e:	4422      	add	r2, r4
 800a430:	3302      	adds	r3, #2
 800a432:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a436:	e7c5      	b.n	800a3c4 <_printf_common+0x58>
 800a438:	2301      	movs	r3, #1
 800a43a:	4622      	mov	r2, r4
 800a43c:	4649      	mov	r1, r9
 800a43e:	4638      	mov	r0, r7
 800a440:	47c0      	blx	r8
 800a442:	3001      	adds	r0, #1
 800a444:	d0e6      	beq.n	800a414 <_printf_common+0xa8>
 800a446:	3601      	adds	r6, #1
 800a448:	e7d9      	b.n	800a3fe <_printf_common+0x92>
	...

0800a44c <_printf_i>:
 800a44c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a450:	7e0f      	ldrb	r7, [r1, #24]
 800a452:	4691      	mov	r9, r2
 800a454:	2f78      	cmp	r7, #120	; 0x78
 800a456:	4680      	mov	r8, r0
 800a458:	460c      	mov	r4, r1
 800a45a:	469a      	mov	sl, r3
 800a45c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a45e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a462:	d807      	bhi.n	800a474 <_printf_i+0x28>
 800a464:	2f62      	cmp	r7, #98	; 0x62
 800a466:	d80a      	bhi.n	800a47e <_printf_i+0x32>
 800a468:	2f00      	cmp	r7, #0
 800a46a:	f000 80d9 	beq.w	800a620 <_printf_i+0x1d4>
 800a46e:	2f58      	cmp	r7, #88	; 0x58
 800a470:	f000 80a4 	beq.w	800a5bc <_printf_i+0x170>
 800a474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a478:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a47c:	e03a      	b.n	800a4f4 <_printf_i+0xa8>
 800a47e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a482:	2b15      	cmp	r3, #21
 800a484:	d8f6      	bhi.n	800a474 <_printf_i+0x28>
 800a486:	a101      	add	r1, pc, #4	; (adr r1, 800a48c <_printf_i+0x40>)
 800a488:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a48c:	0800a4e5 	.word	0x0800a4e5
 800a490:	0800a4f9 	.word	0x0800a4f9
 800a494:	0800a475 	.word	0x0800a475
 800a498:	0800a475 	.word	0x0800a475
 800a49c:	0800a475 	.word	0x0800a475
 800a4a0:	0800a475 	.word	0x0800a475
 800a4a4:	0800a4f9 	.word	0x0800a4f9
 800a4a8:	0800a475 	.word	0x0800a475
 800a4ac:	0800a475 	.word	0x0800a475
 800a4b0:	0800a475 	.word	0x0800a475
 800a4b4:	0800a475 	.word	0x0800a475
 800a4b8:	0800a607 	.word	0x0800a607
 800a4bc:	0800a529 	.word	0x0800a529
 800a4c0:	0800a5e9 	.word	0x0800a5e9
 800a4c4:	0800a475 	.word	0x0800a475
 800a4c8:	0800a475 	.word	0x0800a475
 800a4cc:	0800a629 	.word	0x0800a629
 800a4d0:	0800a475 	.word	0x0800a475
 800a4d4:	0800a529 	.word	0x0800a529
 800a4d8:	0800a475 	.word	0x0800a475
 800a4dc:	0800a475 	.word	0x0800a475
 800a4e0:	0800a5f1 	.word	0x0800a5f1
 800a4e4:	682b      	ldr	r3, [r5, #0]
 800a4e6:	1d1a      	adds	r2, r3, #4
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	602a      	str	r2, [r5, #0]
 800a4ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	e0a4      	b.n	800a642 <_printf_i+0x1f6>
 800a4f8:	6820      	ldr	r0, [r4, #0]
 800a4fa:	6829      	ldr	r1, [r5, #0]
 800a4fc:	0606      	lsls	r6, r0, #24
 800a4fe:	f101 0304 	add.w	r3, r1, #4
 800a502:	d50a      	bpl.n	800a51a <_printf_i+0xce>
 800a504:	680e      	ldr	r6, [r1, #0]
 800a506:	602b      	str	r3, [r5, #0]
 800a508:	2e00      	cmp	r6, #0
 800a50a:	da03      	bge.n	800a514 <_printf_i+0xc8>
 800a50c:	232d      	movs	r3, #45	; 0x2d
 800a50e:	4276      	negs	r6, r6
 800a510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a514:	230a      	movs	r3, #10
 800a516:	485e      	ldr	r0, [pc, #376]	; (800a690 <_printf_i+0x244>)
 800a518:	e019      	b.n	800a54e <_printf_i+0x102>
 800a51a:	680e      	ldr	r6, [r1, #0]
 800a51c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a520:	602b      	str	r3, [r5, #0]
 800a522:	bf18      	it	ne
 800a524:	b236      	sxthne	r6, r6
 800a526:	e7ef      	b.n	800a508 <_printf_i+0xbc>
 800a528:	682b      	ldr	r3, [r5, #0]
 800a52a:	6820      	ldr	r0, [r4, #0]
 800a52c:	1d19      	adds	r1, r3, #4
 800a52e:	6029      	str	r1, [r5, #0]
 800a530:	0601      	lsls	r1, r0, #24
 800a532:	d501      	bpl.n	800a538 <_printf_i+0xec>
 800a534:	681e      	ldr	r6, [r3, #0]
 800a536:	e002      	b.n	800a53e <_printf_i+0xf2>
 800a538:	0646      	lsls	r6, r0, #25
 800a53a:	d5fb      	bpl.n	800a534 <_printf_i+0xe8>
 800a53c:	881e      	ldrh	r6, [r3, #0]
 800a53e:	2f6f      	cmp	r7, #111	; 0x6f
 800a540:	bf0c      	ite	eq
 800a542:	2308      	moveq	r3, #8
 800a544:	230a      	movne	r3, #10
 800a546:	4852      	ldr	r0, [pc, #328]	; (800a690 <_printf_i+0x244>)
 800a548:	2100      	movs	r1, #0
 800a54a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a54e:	6865      	ldr	r5, [r4, #4]
 800a550:	2d00      	cmp	r5, #0
 800a552:	bfa8      	it	ge
 800a554:	6821      	ldrge	r1, [r4, #0]
 800a556:	60a5      	str	r5, [r4, #8]
 800a558:	bfa4      	itt	ge
 800a55a:	f021 0104 	bicge.w	r1, r1, #4
 800a55e:	6021      	strge	r1, [r4, #0]
 800a560:	b90e      	cbnz	r6, 800a566 <_printf_i+0x11a>
 800a562:	2d00      	cmp	r5, #0
 800a564:	d04d      	beq.n	800a602 <_printf_i+0x1b6>
 800a566:	4615      	mov	r5, r2
 800a568:	fbb6 f1f3 	udiv	r1, r6, r3
 800a56c:	fb03 6711 	mls	r7, r3, r1, r6
 800a570:	5dc7      	ldrb	r7, [r0, r7]
 800a572:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a576:	4637      	mov	r7, r6
 800a578:	42bb      	cmp	r3, r7
 800a57a:	460e      	mov	r6, r1
 800a57c:	d9f4      	bls.n	800a568 <_printf_i+0x11c>
 800a57e:	2b08      	cmp	r3, #8
 800a580:	d10b      	bne.n	800a59a <_printf_i+0x14e>
 800a582:	6823      	ldr	r3, [r4, #0]
 800a584:	07de      	lsls	r6, r3, #31
 800a586:	d508      	bpl.n	800a59a <_printf_i+0x14e>
 800a588:	6923      	ldr	r3, [r4, #16]
 800a58a:	6861      	ldr	r1, [r4, #4]
 800a58c:	4299      	cmp	r1, r3
 800a58e:	bfde      	ittt	le
 800a590:	2330      	movle	r3, #48	; 0x30
 800a592:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a596:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a59a:	1b52      	subs	r2, r2, r5
 800a59c:	6122      	str	r2, [r4, #16]
 800a59e:	464b      	mov	r3, r9
 800a5a0:	4621      	mov	r1, r4
 800a5a2:	4640      	mov	r0, r8
 800a5a4:	f8cd a000 	str.w	sl, [sp]
 800a5a8:	aa03      	add	r2, sp, #12
 800a5aa:	f7ff fedf 	bl	800a36c <_printf_common>
 800a5ae:	3001      	adds	r0, #1
 800a5b0:	d14c      	bne.n	800a64c <_printf_i+0x200>
 800a5b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b6:	b004      	add	sp, #16
 800a5b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5bc:	4834      	ldr	r0, [pc, #208]	; (800a690 <_printf_i+0x244>)
 800a5be:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a5c2:	6829      	ldr	r1, [r5, #0]
 800a5c4:	6823      	ldr	r3, [r4, #0]
 800a5c6:	f851 6b04 	ldr.w	r6, [r1], #4
 800a5ca:	6029      	str	r1, [r5, #0]
 800a5cc:	061d      	lsls	r5, r3, #24
 800a5ce:	d514      	bpl.n	800a5fa <_printf_i+0x1ae>
 800a5d0:	07df      	lsls	r7, r3, #31
 800a5d2:	bf44      	itt	mi
 800a5d4:	f043 0320 	orrmi.w	r3, r3, #32
 800a5d8:	6023      	strmi	r3, [r4, #0]
 800a5da:	b91e      	cbnz	r6, 800a5e4 <_printf_i+0x198>
 800a5dc:	6823      	ldr	r3, [r4, #0]
 800a5de:	f023 0320 	bic.w	r3, r3, #32
 800a5e2:	6023      	str	r3, [r4, #0]
 800a5e4:	2310      	movs	r3, #16
 800a5e6:	e7af      	b.n	800a548 <_printf_i+0xfc>
 800a5e8:	6823      	ldr	r3, [r4, #0]
 800a5ea:	f043 0320 	orr.w	r3, r3, #32
 800a5ee:	6023      	str	r3, [r4, #0]
 800a5f0:	2378      	movs	r3, #120	; 0x78
 800a5f2:	4828      	ldr	r0, [pc, #160]	; (800a694 <_printf_i+0x248>)
 800a5f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a5f8:	e7e3      	b.n	800a5c2 <_printf_i+0x176>
 800a5fa:	0659      	lsls	r1, r3, #25
 800a5fc:	bf48      	it	mi
 800a5fe:	b2b6      	uxthmi	r6, r6
 800a600:	e7e6      	b.n	800a5d0 <_printf_i+0x184>
 800a602:	4615      	mov	r5, r2
 800a604:	e7bb      	b.n	800a57e <_printf_i+0x132>
 800a606:	682b      	ldr	r3, [r5, #0]
 800a608:	6826      	ldr	r6, [r4, #0]
 800a60a:	1d18      	adds	r0, r3, #4
 800a60c:	6961      	ldr	r1, [r4, #20]
 800a60e:	6028      	str	r0, [r5, #0]
 800a610:	0635      	lsls	r5, r6, #24
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	d501      	bpl.n	800a61a <_printf_i+0x1ce>
 800a616:	6019      	str	r1, [r3, #0]
 800a618:	e002      	b.n	800a620 <_printf_i+0x1d4>
 800a61a:	0670      	lsls	r0, r6, #25
 800a61c:	d5fb      	bpl.n	800a616 <_printf_i+0x1ca>
 800a61e:	8019      	strh	r1, [r3, #0]
 800a620:	2300      	movs	r3, #0
 800a622:	4615      	mov	r5, r2
 800a624:	6123      	str	r3, [r4, #16]
 800a626:	e7ba      	b.n	800a59e <_printf_i+0x152>
 800a628:	682b      	ldr	r3, [r5, #0]
 800a62a:	2100      	movs	r1, #0
 800a62c:	1d1a      	adds	r2, r3, #4
 800a62e:	602a      	str	r2, [r5, #0]
 800a630:	681d      	ldr	r5, [r3, #0]
 800a632:	6862      	ldr	r2, [r4, #4]
 800a634:	4628      	mov	r0, r5
 800a636:	f002 faed 	bl	800cc14 <memchr>
 800a63a:	b108      	cbz	r0, 800a640 <_printf_i+0x1f4>
 800a63c:	1b40      	subs	r0, r0, r5
 800a63e:	6060      	str	r0, [r4, #4]
 800a640:	6863      	ldr	r3, [r4, #4]
 800a642:	6123      	str	r3, [r4, #16]
 800a644:	2300      	movs	r3, #0
 800a646:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a64a:	e7a8      	b.n	800a59e <_printf_i+0x152>
 800a64c:	462a      	mov	r2, r5
 800a64e:	4649      	mov	r1, r9
 800a650:	4640      	mov	r0, r8
 800a652:	6923      	ldr	r3, [r4, #16]
 800a654:	47d0      	blx	sl
 800a656:	3001      	adds	r0, #1
 800a658:	d0ab      	beq.n	800a5b2 <_printf_i+0x166>
 800a65a:	6823      	ldr	r3, [r4, #0]
 800a65c:	079b      	lsls	r3, r3, #30
 800a65e:	d413      	bmi.n	800a688 <_printf_i+0x23c>
 800a660:	68e0      	ldr	r0, [r4, #12]
 800a662:	9b03      	ldr	r3, [sp, #12]
 800a664:	4298      	cmp	r0, r3
 800a666:	bfb8      	it	lt
 800a668:	4618      	movlt	r0, r3
 800a66a:	e7a4      	b.n	800a5b6 <_printf_i+0x16a>
 800a66c:	2301      	movs	r3, #1
 800a66e:	4632      	mov	r2, r6
 800a670:	4649      	mov	r1, r9
 800a672:	4640      	mov	r0, r8
 800a674:	47d0      	blx	sl
 800a676:	3001      	adds	r0, #1
 800a678:	d09b      	beq.n	800a5b2 <_printf_i+0x166>
 800a67a:	3501      	adds	r5, #1
 800a67c:	68e3      	ldr	r3, [r4, #12]
 800a67e:	9903      	ldr	r1, [sp, #12]
 800a680:	1a5b      	subs	r3, r3, r1
 800a682:	42ab      	cmp	r3, r5
 800a684:	dcf2      	bgt.n	800a66c <_printf_i+0x220>
 800a686:	e7eb      	b.n	800a660 <_printf_i+0x214>
 800a688:	2500      	movs	r5, #0
 800a68a:	f104 0619 	add.w	r6, r4, #25
 800a68e:	e7f5      	b.n	800a67c <_printf_i+0x230>
 800a690:	0800e6fa 	.word	0x0800e6fa
 800a694:	0800e70b 	.word	0x0800e70b

0800a698 <_scanf_float>:
 800a698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a69c:	b087      	sub	sp, #28
 800a69e:	9303      	str	r3, [sp, #12]
 800a6a0:	688b      	ldr	r3, [r1, #8]
 800a6a2:	4617      	mov	r7, r2
 800a6a4:	1e5a      	subs	r2, r3, #1
 800a6a6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a6aa:	bf85      	ittet	hi
 800a6ac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a6b0:	195b      	addhi	r3, r3, r5
 800a6b2:	2300      	movls	r3, #0
 800a6b4:	9302      	strhi	r3, [sp, #8]
 800a6b6:	bf88      	it	hi
 800a6b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a6bc:	468b      	mov	fp, r1
 800a6be:	f04f 0500 	mov.w	r5, #0
 800a6c2:	bf8c      	ite	hi
 800a6c4:	608b      	strhi	r3, [r1, #8]
 800a6c6:	9302      	strls	r3, [sp, #8]
 800a6c8:	680b      	ldr	r3, [r1, #0]
 800a6ca:	4680      	mov	r8, r0
 800a6cc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a6d0:	f84b 3b1c 	str.w	r3, [fp], #28
 800a6d4:	460c      	mov	r4, r1
 800a6d6:	465e      	mov	r6, fp
 800a6d8:	46aa      	mov	sl, r5
 800a6da:	46a9      	mov	r9, r5
 800a6dc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a6e0:	9501      	str	r5, [sp, #4]
 800a6e2:	68a2      	ldr	r2, [r4, #8]
 800a6e4:	b152      	cbz	r2, 800a6fc <_scanf_float+0x64>
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	2b4e      	cmp	r3, #78	; 0x4e
 800a6ec:	d864      	bhi.n	800a7b8 <_scanf_float+0x120>
 800a6ee:	2b40      	cmp	r3, #64	; 0x40
 800a6f0:	d83c      	bhi.n	800a76c <_scanf_float+0xd4>
 800a6f2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a6f6:	b2c8      	uxtb	r0, r1
 800a6f8:	280e      	cmp	r0, #14
 800a6fa:	d93a      	bls.n	800a772 <_scanf_float+0xda>
 800a6fc:	f1b9 0f00 	cmp.w	r9, #0
 800a700:	d003      	beq.n	800a70a <_scanf_float+0x72>
 800a702:	6823      	ldr	r3, [r4, #0]
 800a704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a708:	6023      	str	r3, [r4, #0]
 800a70a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a70e:	f1ba 0f01 	cmp.w	sl, #1
 800a712:	f200 8113 	bhi.w	800a93c <_scanf_float+0x2a4>
 800a716:	455e      	cmp	r6, fp
 800a718:	f200 8105 	bhi.w	800a926 <_scanf_float+0x28e>
 800a71c:	2501      	movs	r5, #1
 800a71e:	4628      	mov	r0, r5
 800a720:	b007      	add	sp, #28
 800a722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a726:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a72a:	2a0d      	cmp	r2, #13
 800a72c:	d8e6      	bhi.n	800a6fc <_scanf_float+0x64>
 800a72e:	a101      	add	r1, pc, #4	; (adr r1, 800a734 <_scanf_float+0x9c>)
 800a730:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a734:	0800a873 	.word	0x0800a873
 800a738:	0800a6fd 	.word	0x0800a6fd
 800a73c:	0800a6fd 	.word	0x0800a6fd
 800a740:	0800a6fd 	.word	0x0800a6fd
 800a744:	0800a8d3 	.word	0x0800a8d3
 800a748:	0800a8ab 	.word	0x0800a8ab
 800a74c:	0800a6fd 	.word	0x0800a6fd
 800a750:	0800a6fd 	.word	0x0800a6fd
 800a754:	0800a881 	.word	0x0800a881
 800a758:	0800a6fd 	.word	0x0800a6fd
 800a75c:	0800a6fd 	.word	0x0800a6fd
 800a760:	0800a6fd 	.word	0x0800a6fd
 800a764:	0800a6fd 	.word	0x0800a6fd
 800a768:	0800a839 	.word	0x0800a839
 800a76c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a770:	e7db      	b.n	800a72a <_scanf_float+0x92>
 800a772:	290e      	cmp	r1, #14
 800a774:	d8c2      	bhi.n	800a6fc <_scanf_float+0x64>
 800a776:	a001      	add	r0, pc, #4	; (adr r0, 800a77c <_scanf_float+0xe4>)
 800a778:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a77c:	0800a82b 	.word	0x0800a82b
 800a780:	0800a6fd 	.word	0x0800a6fd
 800a784:	0800a82b 	.word	0x0800a82b
 800a788:	0800a8bf 	.word	0x0800a8bf
 800a78c:	0800a6fd 	.word	0x0800a6fd
 800a790:	0800a7d9 	.word	0x0800a7d9
 800a794:	0800a815 	.word	0x0800a815
 800a798:	0800a815 	.word	0x0800a815
 800a79c:	0800a815 	.word	0x0800a815
 800a7a0:	0800a815 	.word	0x0800a815
 800a7a4:	0800a815 	.word	0x0800a815
 800a7a8:	0800a815 	.word	0x0800a815
 800a7ac:	0800a815 	.word	0x0800a815
 800a7b0:	0800a815 	.word	0x0800a815
 800a7b4:	0800a815 	.word	0x0800a815
 800a7b8:	2b6e      	cmp	r3, #110	; 0x6e
 800a7ba:	d809      	bhi.n	800a7d0 <_scanf_float+0x138>
 800a7bc:	2b60      	cmp	r3, #96	; 0x60
 800a7be:	d8b2      	bhi.n	800a726 <_scanf_float+0x8e>
 800a7c0:	2b54      	cmp	r3, #84	; 0x54
 800a7c2:	d077      	beq.n	800a8b4 <_scanf_float+0x21c>
 800a7c4:	2b59      	cmp	r3, #89	; 0x59
 800a7c6:	d199      	bne.n	800a6fc <_scanf_float+0x64>
 800a7c8:	2d07      	cmp	r5, #7
 800a7ca:	d197      	bne.n	800a6fc <_scanf_float+0x64>
 800a7cc:	2508      	movs	r5, #8
 800a7ce:	e029      	b.n	800a824 <_scanf_float+0x18c>
 800a7d0:	2b74      	cmp	r3, #116	; 0x74
 800a7d2:	d06f      	beq.n	800a8b4 <_scanf_float+0x21c>
 800a7d4:	2b79      	cmp	r3, #121	; 0x79
 800a7d6:	e7f6      	b.n	800a7c6 <_scanf_float+0x12e>
 800a7d8:	6821      	ldr	r1, [r4, #0]
 800a7da:	05c8      	lsls	r0, r1, #23
 800a7dc:	d51a      	bpl.n	800a814 <_scanf_float+0x17c>
 800a7de:	9b02      	ldr	r3, [sp, #8]
 800a7e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a7e4:	6021      	str	r1, [r4, #0]
 800a7e6:	f109 0901 	add.w	r9, r9, #1
 800a7ea:	b11b      	cbz	r3, 800a7f4 <_scanf_float+0x15c>
 800a7ec:	3b01      	subs	r3, #1
 800a7ee:	3201      	adds	r2, #1
 800a7f0:	9302      	str	r3, [sp, #8]
 800a7f2:	60a2      	str	r2, [r4, #8]
 800a7f4:	68a3      	ldr	r3, [r4, #8]
 800a7f6:	3b01      	subs	r3, #1
 800a7f8:	60a3      	str	r3, [r4, #8]
 800a7fa:	6923      	ldr	r3, [r4, #16]
 800a7fc:	3301      	adds	r3, #1
 800a7fe:	6123      	str	r3, [r4, #16]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	3b01      	subs	r3, #1
 800a804:	2b00      	cmp	r3, #0
 800a806:	607b      	str	r3, [r7, #4]
 800a808:	f340 8084 	ble.w	800a914 <_scanf_float+0x27c>
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	3301      	adds	r3, #1
 800a810:	603b      	str	r3, [r7, #0]
 800a812:	e766      	b.n	800a6e2 <_scanf_float+0x4a>
 800a814:	eb1a 0f05 	cmn.w	sl, r5
 800a818:	f47f af70 	bne.w	800a6fc <_scanf_float+0x64>
 800a81c:	6822      	ldr	r2, [r4, #0]
 800a81e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a822:	6022      	str	r2, [r4, #0]
 800a824:	f806 3b01 	strb.w	r3, [r6], #1
 800a828:	e7e4      	b.n	800a7f4 <_scanf_float+0x15c>
 800a82a:	6822      	ldr	r2, [r4, #0]
 800a82c:	0610      	lsls	r0, r2, #24
 800a82e:	f57f af65 	bpl.w	800a6fc <_scanf_float+0x64>
 800a832:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a836:	e7f4      	b.n	800a822 <_scanf_float+0x18a>
 800a838:	f1ba 0f00 	cmp.w	sl, #0
 800a83c:	d10e      	bne.n	800a85c <_scanf_float+0x1c4>
 800a83e:	f1b9 0f00 	cmp.w	r9, #0
 800a842:	d10e      	bne.n	800a862 <_scanf_float+0x1ca>
 800a844:	6822      	ldr	r2, [r4, #0]
 800a846:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a84a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a84e:	d108      	bne.n	800a862 <_scanf_float+0x1ca>
 800a850:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a854:	f04f 0a01 	mov.w	sl, #1
 800a858:	6022      	str	r2, [r4, #0]
 800a85a:	e7e3      	b.n	800a824 <_scanf_float+0x18c>
 800a85c:	f1ba 0f02 	cmp.w	sl, #2
 800a860:	d055      	beq.n	800a90e <_scanf_float+0x276>
 800a862:	2d01      	cmp	r5, #1
 800a864:	d002      	beq.n	800a86c <_scanf_float+0x1d4>
 800a866:	2d04      	cmp	r5, #4
 800a868:	f47f af48 	bne.w	800a6fc <_scanf_float+0x64>
 800a86c:	3501      	adds	r5, #1
 800a86e:	b2ed      	uxtb	r5, r5
 800a870:	e7d8      	b.n	800a824 <_scanf_float+0x18c>
 800a872:	f1ba 0f01 	cmp.w	sl, #1
 800a876:	f47f af41 	bne.w	800a6fc <_scanf_float+0x64>
 800a87a:	f04f 0a02 	mov.w	sl, #2
 800a87e:	e7d1      	b.n	800a824 <_scanf_float+0x18c>
 800a880:	b97d      	cbnz	r5, 800a8a2 <_scanf_float+0x20a>
 800a882:	f1b9 0f00 	cmp.w	r9, #0
 800a886:	f47f af3c 	bne.w	800a702 <_scanf_float+0x6a>
 800a88a:	6822      	ldr	r2, [r4, #0]
 800a88c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a890:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a894:	f47f af39 	bne.w	800a70a <_scanf_float+0x72>
 800a898:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a89c:	2501      	movs	r5, #1
 800a89e:	6022      	str	r2, [r4, #0]
 800a8a0:	e7c0      	b.n	800a824 <_scanf_float+0x18c>
 800a8a2:	2d03      	cmp	r5, #3
 800a8a4:	d0e2      	beq.n	800a86c <_scanf_float+0x1d4>
 800a8a6:	2d05      	cmp	r5, #5
 800a8a8:	e7de      	b.n	800a868 <_scanf_float+0x1d0>
 800a8aa:	2d02      	cmp	r5, #2
 800a8ac:	f47f af26 	bne.w	800a6fc <_scanf_float+0x64>
 800a8b0:	2503      	movs	r5, #3
 800a8b2:	e7b7      	b.n	800a824 <_scanf_float+0x18c>
 800a8b4:	2d06      	cmp	r5, #6
 800a8b6:	f47f af21 	bne.w	800a6fc <_scanf_float+0x64>
 800a8ba:	2507      	movs	r5, #7
 800a8bc:	e7b2      	b.n	800a824 <_scanf_float+0x18c>
 800a8be:	6822      	ldr	r2, [r4, #0]
 800a8c0:	0591      	lsls	r1, r2, #22
 800a8c2:	f57f af1b 	bpl.w	800a6fc <_scanf_float+0x64>
 800a8c6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a8ca:	6022      	str	r2, [r4, #0]
 800a8cc:	f8cd 9004 	str.w	r9, [sp, #4]
 800a8d0:	e7a8      	b.n	800a824 <_scanf_float+0x18c>
 800a8d2:	6822      	ldr	r2, [r4, #0]
 800a8d4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a8d8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a8dc:	d006      	beq.n	800a8ec <_scanf_float+0x254>
 800a8de:	0550      	lsls	r0, r2, #21
 800a8e0:	f57f af0c 	bpl.w	800a6fc <_scanf_float+0x64>
 800a8e4:	f1b9 0f00 	cmp.w	r9, #0
 800a8e8:	f43f af0f 	beq.w	800a70a <_scanf_float+0x72>
 800a8ec:	0591      	lsls	r1, r2, #22
 800a8ee:	bf58      	it	pl
 800a8f0:	9901      	ldrpl	r1, [sp, #4]
 800a8f2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a8f6:	bf58      	it	pl
 800a8f8:	eba9 0101 	subpl.w	r1, r9, r1
 800a8fc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a900:	f04f 0900 	mov.w	r9, #0
 800a904:	bf58      	it	pl
 800a906:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a90a:	6022      	str	r2, [r4, #0]
 800a90c:	e78a      	b.n	800a824 <_scanf_float+0x18c>
 800a90e:	f04f 0a03 	mov.w	sl, #3
 800a912:	e787      	b.n	800a824 <_scanf_float+0x18c>
 800a914:	4639      	mov	r1, r7
 800a916:	4640      	mov	r0, r8
 800a918:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a91c:	4798      	blx	r3
 800a91e:	2800      	cmp	r0, #0
 800a920:	f43f aedf 	beq.w	800a6e2 <_scanf_float+0x4a>
 800a924:	e6ea      	b.n	800a6fc <_scanf_float+0x64>
 800a926:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a92a:	463a      	mov	r2, r7
 800a92c:	4640      	mov	r0, r8
 800a92e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a932:	4798      	blx	r3
 800a934:	6923      	ldr	r3, [r4, #16]
 800a936:	3b01      	subs	r3, #1
 800a938:	6123      	str	r3, [r4, #16]
 800a93a:	e6ec      	b.n	800a716 <_scanf_float+0x7e>
 800a93c:	1e6b      	subs	r3, r5, #1
 800a93e:	2b06      	cmp	r3, #6
 800a940:	d825      	bhi.n	800a98e <_scanf_float+0x2f6>
 800a942:	2d02      	cmp	r5, #2
 800a944:	d836      	bhi.n	800a9b4 <_scanf_float+0x31c>
 800a946:	455e      	cmp	r6, fp
 800a948:	f67f aee8 	bls.w	800a71c <_scanf_float+0x84>
 800a94c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a950:	463a      	mov	r2, r7
 800a952:	4640      	mov	r0, r8
 800a954:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a958:	4798      	blx	r3
 800a95a:	6923      	ldr	r3, [r4, #16]
 800a95c:	3b01      	subs	r3, #1
 800a95e:	6123      	str	r3, [r4, #16]
 800a960:	e7f1      	b.n	800a946 <_scanf_float+0x2ae>
 800a962:	9802      	ldr	r0, [sp, #8]
 800a964:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a968:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a96c:	463a      	mov	r2, r7
 800a96e:	9002      	str	r0, [sp, #8]
 800a970:	4640      	mov	r0, r8
 800a972:	4798      	blx	r3
 800a974:	6923      	ldr	r3, [r4, #16]
 800a976:	3b01      	subs	r3, #1
 800a978:	6123      	str	r3, [r4, #16]
 800a97a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a97e:	fa5f fa8a 	uxtb.w	sl, sl
 800a982:	f1ba 0f02 	cmp.w	sl, #2
 800a986:	d1ec      	bne.n	800a962 <_scanf_float+0x2ca>
 800a988:	3d03      	subs	r5, #3
 800a98a:	b2ed      	uxtb	r5, r5
 800a98c:	1b76      	subs	r6, r6, r5
 800a98e:	6823      	ldr	r3, [r4, #0]
 800a990:	05da      	lsls	r2, r3, #23
 800a992:	d52f      	bpl.n	800a9f4 <_scanf_float+0x35c>
 800a994:	055b      	lsls	r3, r3, #21
 800a996:	d510      	bpl.n	800a9ba <_scanf_float+0x322>
 800a998:	455e      	cmp	r6, fp
 800a99a:	f67f aebf 	bls.w	800a71c <_scanf_float+0x84>
 800a99e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a9a2:	463a      	mov	r2, r7
 800a9a4:	4640      	mov	r0, r8
 800a9a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a9aa:	4798      	blx	r3
 800a9ac:	6923      	ldr	r3, [r4, #16]
 800a9ae:	3b01      	subs	r3, #1
 800a9b0:	6123      	str	r3, [r4, #16]
 800a9b2:	e7f1      	b.n	800a998 <_scanf_float+0x300>
 800a9b4:	46aa      	mov	sl, r5
 800a9b6:	9602      	str	r6, [sp, #8]
 800a9b8:	e7df      	b.n	800a97a <_scanf_float+0x2e2>
 800a9ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a9be:	6923      	ldr	r3, [r4, #16]
 800a9c0:	2965      	cmp	r1, #101	; 0x65
 800a9c2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a9c6:	f106 35ff 	add.w	r5, r6, #4294967295
 800a9ca:	6123      	str	r3, [r4, #16]
 800a9cc:	d00c      	beq.n	800a9e8 <_scanf_float+0x350>
 800a9ce:	2945      	cmp	r1, #69	; 0x45
 800a9d0:	d00a      	beq.n	800a9e8 <_scanf_float+0x350>
 800a9d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a9d6:	463a      	mov	r2, r7
 800a9d8:	4640      	mov	r0, r8
 800a9da:	4798      	blx	r3
 800a9dc:	6923      	ldr	r3, [r4, #16]
 800a9de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a9e2:	3b01      	subs	r3, #1
 800a9e4:	1eb5      	subs	r5, r6, #2
 800a9e6:	6123      	str	r3, [r4, #16]
 800a9e8:	463a      	mov	r2, r7
 800a9ea:	4640      	mov	r0, r8
 800a9ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a9f0:	4798      	blx	r3
 800a9f2:	462e      	mov	r6, r5
 800a9f4:	6825      	ldr	r5, [r4, #0]
 800a9f6:	f015 0510 	ands.w	r5, r5, #16
 800a9fa:	d155      	bne.n	800aaa8 <_scanf_float+0x410>
 800a9fc:	7035      	strb	r5, [r6, #0]
 800a9fe:	6823      	ldr	r3, [r4, #0]
 800aa00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800aa04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa08:	d11b      	bne.n	800aa42 <_scanf_float+0x3aa>
 800aa0a:	9b01      	ldr	r3, [sp, #4]
 800aa0c:	454b      	cmp	r3, r9
 800aa0e:	eba3 0209 	sub.w	r2, r3, r9
 800aa12:	d123      	bne.n	800aa5c <_scanf_float+0x3c4>
 800aa14:	2200      	movs	r2, #0
 800aa16:	4659      	mov	r1, fp
 800aa18:	4640      	mov	r0, r8
 800aa1a:	f000 fe79 	bl	800b710 <_strtod_r>
 800aa1e:	6822      	ldr	r2, [r4, #0]
 800aa20:	9b03      	ldr	r3, [sp, #12]
 800aa22:	f012 0f02 	tst.w	r2, #2
 800aa26:	4606      	mov	r6, r0
 800aa28:	460f      	mov	r7, r1
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	d021      	beq.n	800aa72 <_scanf_float+0x3da>
 800aa2e:	1d1a      	adds	r2, r3, #4
 800aa30:	9903      	ldr	r1, [sp, #12]
 800aa32:	600a      	str	r2, [r1, #0]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	e9c3 6700 	strd	r6, r7, [r3]
 800aa3a:	68e3      	ldr	r3, [r4, #12]
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	60e3      	str	r3, [r4, #12]
 800aa40:	e66d      	b.n	800a71e <_scanf_float+0x86>
 800aa42:	9b04      	ldr	r3, [sp, #16]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d0e5      	beq.n	800aa14 <_scanf_float+0x37c>
 800aa48:	9905      	ldr	r1, [sp, #20]
 800aa4a:	230a      	movs	r3, #10
 800aa4c:	462a      	mov	r2, r5
 800aa4e:	4640      	mov	r0, r8
 800aa50:	3101      	adds	r1, #1
 800aa52:	f000 fedf 	bl	800b814 <_strtol_r>
 800aa56:	9b04      	ldr	r3, [sp, #16]
 800aa58:	9e05      	ldr	r6, [sp, #20]
 800aa5a:	1ac2      	subs	r2, r0, r3
 800aa5c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800aa60:	429e      	cmp	r6, r3
 800aa62:	bf28      	it	cs
 800aa64:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800aa68:	4630      	mov	r0, r6
 800aa6a:	4910      	ldr	r1, [pc, #64]	; (800aaac <_scanf_float+0x414>)
 800aa6c:	f000 f826 	bl	800aabc <siprintf>
 800aa70:	e7d0      	b.n	800aa14 <_scanf_float+0x37c>
 800aa72:	f012 0f04 	tst.w	r2, #4
 800aa76:	f103 0204 	add.w	r2, r3, #4
 800aa7a:	d1d9      	bne.n	800aa30 <_scanf_float+0x398>
 800aa7c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800aa80:	f8cc 2000 	str.w	r2, [ip]
 800aa84:	f8d3 8000 	ldr.w	r8, [r3]
 800aa88:	4602      	mov	r2, r0
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	f7f5 ffbe 	bl	8000a0c <__aeabi_dcmpun>
 800aa90:	b128      	cbz	r0, 800aa9e <_scanf_float+0x406>
 800aa92:	4807      	ldr	r0, [pc, #28]	; (800aab0 <_scanf_float+0x418>)
 800aa94:	f000 f80e 	bl	800aab4 <nanf>
 800aa98:	f8c8 0000 	str.w	r0, [r8]
 800aa9c:	e7cd      	b.n	800aa3a <_scanf_float+0x3a2>
 800aa9e:	4630      	mov	r0, r6
 800aaa0:	4639      	mov	r1, r7
 800aaa2:	f7f6 f811 	bl	8000ac8 <__aeabi_d2f>
 800aaa6:	e7f7      	b.n	800aa98 <_scanf_float+0x400>
 800aaa8:	2500      	movs	r5, #0
 800aaaa:	e638      	b.n	800a71e <_scanf_float+0x86>
 800aaac:	0800e71c 	.word	0x0800e71c
 800aab0:	0800eb28 	.word	0x0800eb28

0800aab4 <nanf>:
 800aab4:	4800      	ldr	r0, [pc, #0]	; (800aab8 <nanf+0x4>)
 800aab6:	4770      	bx	lr
 800aab8:	7fc00000 	.word	0x7fc00000

0800aabc <siprintf>:
 800aabc:	b40e      	push	{r1, r2, r3}
 800aabe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aac2:	b500      	push	{lr}
 800aac4:	b09c      	sub	sp, #112	; 0x70
 800aac6:	ab1d      	add	r3, sp, #116	; 0x74
 800aac8:	9002      	str	r0, [sp, #8]
 800aaca:	9006      	str	r0, [sp, #24]
 800aacc:	9107      	str	r1, [sp, #28]
 800aace:	9104      	str	r1, [sp, #16]
 800aad0:	4808      	ldr	r0, [pc, #32]	; (800aaf4 <siprintf+0x38>)
 800aad2:	4909      	ldr	r1, [pc, #36]	; (800aaf8 <siprintf+0x3c>)
 800aad4:	f853 2b04 	ldr.w	r2, [r3], #4
 800aad8:	9105      	str	r1, [sp, #20]
 800aada:	6800      	ldr	r0, [r0, #0]
 800aadc:	a902      	add	r1, sp, #8
 800aade:	9301      	str	r3, [sp, #4]
 800aae0:	f002 feb8 	bl	800d854 <_svfiprintf_r>
 800aae4:	2200      	movs	r2, #0
 800aae6:	9b02      	ldr	r3, [sp, #8]
 800aae8:	701a      	strb	r2, [r3, #0]
 800aaea:	b01c      	add	sp, #112	; 0x70
 800aaec:	f85d eb04 	ldr.w	lr, [sp], #4
 800aaf0:	b003      	add	sp, #12
 800aaf2:	4770      	bx	lr
 800aaf4:	2000017c 	.word	0x2000017c
 800aaf8:	ffff0208 	.word	0xffff0208

0800aafc <sulp>:
 800aafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab00:	460f      	mov	r7, r1
 800ab02:	4690      	mov	r8, r2
 800ab04:	f002 fc12 	bl	800d32c <__ulp>
 800ab08:	4604      	mov	r4, r0
 800ab0a:	460d      	mov	r5, r1
 800ab0c:	f1b8 0f00 	cmp.w	r8, #0
 800ab10:	d011      	beq.n	800ab36 <sulp+0x3a>
 800ab12:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800ab16:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	dd0b      	ble.n	800ab36 <sulp+0x3a>
 800ab1e:	2400      	movs	r4, #0
 800ab20:	051b      	lsls	r3, r3, #20
 800ab22:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ab26:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ab2a:	4622      	mov	r2, r4
 800ab2c:	462b      	mov	r3, r5
 800ab2e:	f7f5 fcd3 	bl	80004d8 <__aeabi_dmul>
 800ab32:	4604      	mov	r4, r0
 800ab34:	460d      	mov	r5, r1
 800ab36:	4620      	mov	r0, r4
 800ab38:	4629      	mov	r1, r5
 800ab3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800ab40 <_strtod_l>:
 800ab40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab44:	469b      	mov	fp, r3
 800ab46:	2300      	movs	r3, #0
 800ab48:	b09f      	sub	sp, #124	; 0x7c
 800ab4a:	931a      	str	r3, [sp, #104]	; 0x68
 800ab4c:	4b9e      	ldr	r3, [pc, #632]	; (800adc8 <_strtod_l+0x288>)
 800ab4e:	4682      	mov	sl, r0
 800ab50:	681f      	ldr	r7, [r3, #0]
 800ab52:	460e      	mov	r6, r1
 800ab54:	4638      	mov	r0, r7
 800ab56:	9215      	str	r2, [sp, #84]	; 0x54
 800ab58:	f7f5 fafa 	bl	8000150 <strlen>
 800ab5c:	f04f 0800 	mov.w	r8, #0
 800ab60:	4604      	mov	r4, r0
 800ab62:	f04f 0900 	mov.w	r9, #0
 800ab66:	9619      	str	r6, [sp, #100]	; 0x64
 800ab68:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab6a:	781a      	ldrb	r2, [r3, #0]
 800ab6c:	2a2b      	cmp	r2, #43	; 0x2b
 800ab6e:	d04c      	beq.n	800ac0a <_strtod_l+0xca>
 800ab70:	d83a      	bhi.n	800abe8 <_strtod_l+0xa8>
 800ab72:	2a0d      	cmp	r2, #13
 800ab74:	d833      	bhi.n	800abde <_strtod_l+0x9e>
 800ab76:	2a08      	cmp	r2, #8
 800ab78:	d833      	bhi.n	800abe2 <_strtod_l+0xa2>
 800ab7a:	2a00      	cmp	r2, #0
 800ab7c:	d03d      	beq.n	800abfa <_strtod_l+0xba>
 800ab7e:	2300      	movs	r3, #0
 800ab80:	930a      	str	r3, [sp, #40]	; 0x28
 800ab82:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800ab84:	782b      	ldrb	r3, [r5, #0]
 800ab86:	2b30      	cmp	r3, #48	; 0x30
 800ab88:	f040 80aa 	bne.w	800ace0 <_strtod_l+0x1a0>
 800ab8c:	786b      	ldrb	r3, [r5, #1]
 800ab8e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ab92:	2b58      	cmp	r3, #88	; 0x58
 800ab94:	d166      	bne.n	800ac64 <_strtod_l+0x124>
 800ab96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab98:	4650      	mov	r0, sl
 800ab9a:	9301      	str	r3, [sp, #4]
 800ab9c:	ab1a      	add	r3, sp, #104	; 0x68
 800ab9e:	9300      	str	r3, [sp, #0]
 800aba0:	4a8a      	ldr	r2, [pc, #552]	; (800adcc <_strtod_l+0x28c>)
 800aba2:	f8cd b008 	str.w	fp, [sp, #8]
 800aba6:	ab1b      	add	r3, sp, #108	; 0x6c
 800aba8:	a919      	add	r1, sp, #100	; 0x64
 800abaa:	f001 fd17 	bl	800c5dc <__gethex>
 800abae:	f010 0607 	ands.w	r6, r0, #7
 800abb2:	4604      	mov	r4, r0
 800abb4:	d005      	beq.n	800abc2 <_strtod_l+0x82>
 800abb6:	2e06      	cmp	r6, #6
 800abb8:	d129      	bne.n	800ac0e <_strtod_l+0xce>
 800abba:	2300      	movs	r3, #0
 800abbc:	3501      	adds	r5, #1
 800abbe:	9519      	str	r5, [sp, #100]	; 0x64
 800abc0:	930a      	str	r3, [sp, #40]	; 0x28
 800abc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	f040 858a 	bne.w	800b6de <_strtod_l+0xb9e>
 800abca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abcc:	b1d3      	cbz	r3, 800ac04 <_strtod_l+0xc4>
 800abce:	4642      	mov	r2, r8
 800abd0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800abd4:	4610      	mov	r0, r2
 800abd6:	4619      	mov	r1, r3
 800abd8:	b01f      	add	sp, #124	; 0x7c
 800abda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abde:	2a20      	cmp	r2, #32
 800abe0:	d1cd      	bne.n	800ab7e <_strtod_l+0x3e>
 800abe2:	3301      	adds	r3, #1
 800abe4:	9319      	str	r3, [sp, #100]	; 0x64
 800abe6:	e7bf      	b.n	800ab68 <_strtod_l+0x28>
 800abe8:	2a2d      	cmp	r2, #45	; 0x2d
 800abea:	d1c8      	bne.n	800ab7e <_strtod_l+0x3e>
 800abec:	2201      	movs	r2, #1
 800abee:	920a      	str	r2, [sp, #40]	; 0x28
 800abf0:	1c5a      	adds	r2, r3, #1
 800abf2:	9219      	str	r2, [sp, #100]	; 0x64
 800abf4:	785b      	ldrb	r3, [r3, #1]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d1c3      	bne.n	800ab82 <_strtod_l+0x42>
 800abfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abfc:	9619      	str	r6, [sp, #100]	; 0x64
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	f040 856b 	bne.w	800b6da <_strtod_l+0xb9a>
 800ac04:	4642      	mov	r2, r8
 800ac06:	464b      	mov	r3, r9
 800ac08:	e7e4      	b.n	800abd4 <_strtod_l+0x94>
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	e7ef      	b.n	800abee <_strtod_l+0xae>
 800ac0e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ac10:	b13a      	cbz	r2, 800ac22 <_strtod_l+0xe2>
 800ac12:	2135      	movs	r1, #53	; 0x35
 800ac14:	a81c      	add	r0, sp, #112	; 0x70
 800ac16:	f002 fc8d 	bl	800d534 <__copybits>
 800ac1a:	4650      	mov	r0, sl
 800ac1c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ac1e:	f002 f855 	bl	800cccc <_Bfree>
 800ac22:	3e01      	subs	r6, #1
 800ac24:	2e04      	cmp	r6, #4
 800ac26:	d806      	bhi.n	800ac36 <_strtod_l+0xf6>
 800ac28:	e8df f006 	tbb	[pc, r6]
 800ac2c:	1714030a 	.word	0x1714030a
 800ac30:	0a          	.byte	0x0a
 800ac31:	00          	.byte	0x00
 800ac32:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800ac36:	0721      	lsls	r1, r4, #28
 800ac38:	d5c3      	bpl.n	800abc2 <_strtod_l+0x82>
 800ac3a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800ac3e:	e7c0      	b.n	800abc2 <_strtod_l+0x82>
 800ac40:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ac42:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800ac46:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ac4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ac4e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ac52:	e7f0      	b.n	800ac36 <_strtod_l+0xf6>
 800ac54:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800add0 <_strtod_l+0x290>
 800ac58:	e7ed      	b.n	800ac36 <_strtod_l+0xf6>
 800ac5a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ac5e:	f04f 38ff 	mov.w	r8, #4294967295
 800ac62:	e7e8      	b.n	800ac36 <_strtod_l+0xf6>
 800ac64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ac66:	1c5a      	adds	r2, r3, #1
 800ac68:	9219      	str	r2, [sp, #100]	; 0x64
 800ac6a:	785b      	ldrb	r3, [r3, #1]
 800ac6c:	2b30      	cmp	r3, #48	; 0x30
 800ac6e:	d0f9      	beq.n	800ac64 <_strtod_l+0x124>
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d0a6      	beq.n	800abc2 <_strtod_l+0x82>
 800ac74:	2301      	movs	r3, #1
 800ac76:	9307      	str	r3, [sp, #28]
 800ac78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ac7a:	220a      	movs	r2, #10
 800ac7c:	9308      	str	r3, [sp, #32]
 800ac7e:	2300      	movs	r3, #0
 800ac80:	469b      	mov	fp, r3
 800ac82:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800ac86:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ac88:	7805      	ldrb	r5, [r0, #0]
 800ac8a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800ac8e:	b2d9      	uxtb	r1, r3
 800ac90:	2909      	cmp	r1, #9
 800ac92:	d927      	bls.n	800ace4 <_strtod_l+0x1a4>
 800ac94:	4622      	mov	r2, r4
 800ac96:	4639      	mov	r1, r7
 800ac98:	f002 fef2 	bl	800da80 <strncmp>
 800ac9c:	2800      	cmp	r0, #0
 800ac9e:	d033      	beq.n	800ad08 <_strtod_l+0x1c8>
 800aca0:	2000      	movs	r0, #0
 800aca2:	462a      	mov	r2, r5
 800aca4:	465c      	mov	r4, fp
 800aca6:	4603      	mov	r3, r0
 800aca8:	9004      	str	r0, [sp, #16]
 800acaa:	2a65      	cmp	r2, #101	; 0x65
 800acac:	d001      	beq.n	800acb2 <_strtod_l+0x172>
 800acae:	2a45      	cmp	r2, #69	; 0x45
 800acb0:	d114      	bne.n	800acdc <_strtod_l+0x19c>
 800acb2:	b91c      	cbnz	r4, 800acbc <_strtod_l+0x17c>
 800acb4:	9a07      	ldr	r2, [sp, #28]
 800acb6:	4302      	orrs	r2, r0
 800acb8:	d09f      	beq.n	800abfa <_strtod_l+0xba>
 800acba:	2400      	movs	r4, #0
 800acbc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800acbe:	1c72      	adds	r2, r6, #1
 800acc0:	9219      	str	r2, [sp, #100]	; 0x64
 800acc2:	7872      	ldrb	r2, [r6, #1]
 800acc4:	2a2b      	cmp	r2, #43	; 0x2b
 800acc6:	d079      	beq.n	800adbc <_strtod_l+0x27c>
 800acc8:	2a2d      	cmp	r2, #45	; 0x2d
 800acca:	f000 8083 	beq.w	800add4 <_strtod_l+0x294>
 800acce:	2700      	movs	r7, #0
 800acd0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800acd4:	2909      	cmp	r1, #9
 800acd6:	f240 8083 	bls.w	800ade0 <_strtod_l+0x2a0>
 800acda:	9619      	str	r6, [sp, #100]	; 0x64
 800acdc:	2500      	movs	r5, #0
 800acde:	e09f      	b.n	800ae20 <_strtod_l+0x2e0>
 800ace0:	2300      	movs	r3, #0
 800ace2:	e7c8      	b.n	800ac76 <_strtod_l+0x136>
 800ace4:	f1bb 0f08 	cmp.w	fp, #8
 800ace8:	bfd5      	itete	le
 800acea:	9906      	ldrle	r1, [sp, #24]
 800acec:	9905      	ldrgt	r1, [sp, #20]
 800acee:	fb02 3301 	mlale	r3, r2, r1, r3
 800acf2:	fb02 3301 	mlagt	r3, r2, r1, r3
 800acf6:	f100 0001 	add.w	r0, r0, #1
 800acfa:	bfd4      	ite	le
 800acfc:	9306      	strle	r3, [sp, #24]
 800acfe:	9305      	strgt	r3, [sp, #20]
 800ad00:	f10b 0b01 	add.w	fp, fp, #1
 800ad04:	9019      	str	r0, [sp, #100]	; 0x64
 800ad06:	e7be      	b.n	800ac86 <_strtod_l+0x146>
 800ad08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad0a:	191a      	adds	r2, r3, r4
 800ad0c:	9219      	str	r2, [sp, #100]	; 0x64
 800ad0e:	5d1a      	ldrb	r2, [r3, r4]
 800ad10:	f1bb 0f00 	cmp.w	fp, #0
 800ad14:	d036      	beq.n	800ad84 <_strtod_l+0x244>
 800ad16:	465c      	mov	r4, fp
 800ad18:	9004      	str	r0, [sp, #16]
 800ad1a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ad1e:	2b09      	cmp	r3, #9
 800ad20:	d912      	bls.n	800ad48 <_strtod_l+0x208>
 800ad22:	2301      	movs	r3, #1
 800ad24:	e7c1      	b.n	800acaa <_strtod_l+0x16a>
 800ad26:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad28:	3001      	adds	r0, #1
 800ad2a:	1c5a      	adds	r2, r3, #1
 800ad2c:	9219      	str	r2, [sp, #100]	; 0x64
 800ad2e:	785a      	ldrb	r2, [r3, #1]
 800ad30:	2a30      	cmp	r2, #48	; 0x30
 800ad32:	d0f8      	beq.n	800ad26 <_strtod_l+0x1e6>
 800ad34:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ad38:	2b08      	cmp	r3, #8
 800ad3a:	f200 84d5 	bhi.w	800b6e8 <_strtod_l+0xba8>
 800ad3e:	9004      	str	r0, [sp, #16]
 800ad40:	2000      	movs	r0, #0
 800ad42:	4604      	mov	r4, r0
 800ad44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad46:	9308      	str	r3, [sp, #32]
 800ad48:	3a30      	subs	r2, #48	; 0x30
 800ad4a:	f100 0301 	add.w	r3, r0, #1
 800ad4e:	d013      	beq.n	800ad78 <_strtod_l+0x238>
 800ad50:	9904      	ldr	r1, [sp, #16]
 800ad52:	1905      	adds	r5, r0, r4
 800ad54:	4419      	add	r1, r3
 800ad56:	9104      	str	r1, [sp, #16]
 800ad58:	4623      	mov	r3, r4
 800ad5a:	210a      	movs	r1, #10
 800ad5c:	42ab      	cmp	r3, r5
 800ad5e:	d113      	bne.n	800ad88 <_strtod_l+0x248>
 800ad60:	1823      	adds	r3, r4, r0
 800ad62:	2b08      	cmp	r3, #8
 800ad64:	f104 0401 	add.w	r4, r4, #1
 800ad68:	4404      	add	r4, r0
 800ad6a:	dc1b      	bgt.n	800ada4 <_strtod_l+0x264>
 800ad6c:	230a      	movs	r3, #10
 800ad6e:	9906      	ldr	r1, [sp, #24]
 800ad70:	fb03 2301 	mla	r3, r3, r1, r2
 800ad74:	9306      	str	r3, [sp, #24]
 800ad76:	2300      	movs	r3, #0
 800ad78:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	1c51      	adds	r1, r2, #1
 800ad7e:	9119      	str	r1, [sp, #100]	; 0x64
 800ad80:	7852      	ldrb	r2, [r2, #1]
 800ad82:	e7ca      	b.n	800ad1a <_strtod_l+0x1da>
 800ad84:	4658      	mov	r0, fp
 800ad86:	e7d3      	b.n	800ad30 <_strtod_l+0x1f0>
 800ad88:	2b08      	cmp	r3, #8
 800ad8a:	dc04      	bgt.n	800ad96 <_strtod_l+0x256>
 800ad8c:	9f06      	ldr	r7, [sp, #24]
 800ad8e:	434f      	muls	r7, r1
 800ad90:	9706      	str	r7, [sp, #24]
 800ad92:	3301      	adds	r3, #1
 800ad94:	e7e2      	b.n	800ad5c <_strtod_l+0x21c>
 800ad96:	1c5f      	adds	r7, r3, #1
 800ad98:	2f10      	cmp	r7, #16
 800ad9a:	bfde      	ittt	le
 800ad9c:	9f05      	ldrle	r7, [sp, #20]
 800ad9e:	434f      	mulle	r7, r1
 800ada0:	9705      	strle	r7, [sp, #20]
 800ada2:	e7f6      	b.n	800ad92 <_strtod_l+0x252>
 800ada4:	2c10      	cmp	r4, #16
 800ada6:	bfdf      	itttt	le
 800ada8:	230a      	movle	r3, #10
 800adaa:	9905      	ldrle	r1, [sp, #20]
 800adac:	fb03 2301 	mlale	r3, r3, r1, r2
 800adb0:	9305      	strle	r3, [sp, #20]
 800adb2:	e7e0      	b.n	800ad76 <_strtod_l+0x236>
 800adb4:	2300      	movs	r3, #0
 800adb6:	9304      	str	r3, [sp, #16]
 800adb8:	2301      	movs	r3, #1
 800adba:	e77b      	b.n	800acb4 <_strtod_l+0x174>
 800adbc:	2700      	movs	r7, #0
 800adbe:	1cb2      	adds	r2, r6, #2
 800adc0:	9219      	str	r2, [sp, #100]	; 0x64
 800adc2:	78b2      	ldrb	r2, [r6, #2]
 800adc4:	e784      	b.n	800acd0 <_strtod_l+0x190>
 800adc6:	bf00      	nop
 800adc8:	0800e970 	.word	0x0800e970
 800adcc:	0800e724 	.word	0x0800e724
 800add0:	7ff00000 	.word	0x7ff00000
 800add4:	2701      	movs	r7, #1
 800add6:	e7f2      	b.n	800adbe <_strtod_l+0x27e>
 800add8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800adda:	1c51      	adds	r1, r2, #1
 800addc:	9119      	str	r1, [sp, #100]	; 0x64
 800adde:	7852      	ldrb	r2, [r2, #1]
 800ade0:	2a30      	cmp	r2, #48	; 0x30
 800ade2:	d0f9      	beq.n	800add8 <_strtod_l+0x298>
 800ade4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ade8:	2908      	cmp	r1, #8
 800adea:	f63f af77 	bhi.w	800acdc <_strtod_l+0x19c>
 800adee:	f04f 0e0a 	mov.w	lr, #10
 800adf2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800adf6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800adf8:	9209      	str	r2, [sp, #36]	; 0x24
 800adfa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800adfc:	1c51      	adds	r1, r2, #1
 800adfe:	9119      	str	r1, [sp, #100]	; 0x64
 800ae00:	7852      	ldrb	r2, [r2, #1]
 800ae02:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800ae06:	2d09      	cmp	r5, #9
 800ae08:	d935      	bls.n	800ae76 <_strtod_l+0x336>
 800ae0a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ae0c:	1b49      	subs	r1, r1, r5
 800ae0e:	2908      	cmp	r1, #8
 800ae10:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800ae14:	dc02      	bgt.n	800ae1c <_strtod_l+0x2dc>
 800ae16:	4565      	cmp	r5, ip
 800ae18:	bfa8      	it	ge
 800ae1a:	4665      	movge	r5, ip
 800ae1c:	b107      	cbz	r7, 800ae20 <_strtod_l+0x2e0>
 800ae1e:	426d      	negs	r5, r5
 800ae20:	2c00      	cmp	r4, #0
 800ae22:	d14c      	bne.n	800aebe <_strtod_l+0x37e>
 800ae24:	9907      	ldr	r1, [sp, #28]
 800ae26:	4301      	orrs	r1, r0
 800ae28:	f47f aecb 	bne.w	800abc2 <_strtod_l+0x82>
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f47f aee4 	bne.w	800abfa <_strtod_l+0xba>
 800ae32:	2a69      	cmp	r2, #105	; 0x69
 800ae34:	d026      	beq.n	800ae84 <_strtod_l+0x344>
 800ae36:	dc23      	bgt.n	800ae80 <_strtod_l+0x340>
 800ae38:	2a49      	cmp	r2, #73	; 0x49
 800ae3a:	d023      	beq.n	800ae84 <_strtod_l+0x344>
 800ae3c:	2a4e      	cmp	r2, #78	; 0x4e
 800ae3e:	f47f aedc 	bne.w	800abfa <_strtod_l+0xba>
 800ae42:	499d      	ldr	r1, [pc, #628]	; (800b0b8 <_strtod_l+0x578>)
 800ae44:	a819      	add	r0, sp, #100	; 0x64
 800ae46:	f001 fe17 	bl	800ca78 <__match>
 800ae4a:	2800      	cmp	r0, #0
 800ae4c:	f43f aed5 	beq.w	800abfa <_strtod_l+0xba>
 800ae50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	2b28      	cmp	r3, #40	; 0x28
 800ae56:	d12c      	bne.n	800aeb2 <_strtod_l+0x372>
 800ae58:	4998      	ldr	r1, [pc, #608]	; (800b0bc <_strtod_l+0x57c>)
 800ae5a:	aa1c      	add	r2, sp, #112	; 0x70
 800ae5c:	a819      	add	r0, sp, #100	; 0x64
 800ae5e:	f001 fe1f 	bl	800caa0 <__hexnan>
 800ae62:	2805      	cmp	r0, #5
 800ae64:	d125      	bne.n	800aeb2 <_strtod_l+0x372>
 800ae66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ae68:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800ae6c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ae70:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ae74:	e6a5      	b.n	800abc2 <_strtod_l+0x82>
 800ae76:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800ae7a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800ae7e:	e7bc      	b.n	800adfa <_strtod_l+0x2ba>
 800ae80:	2a6e      	cmp	r2, #110	; 0x6e
 800ae82:	e7dc      	b.n	800ae3e <_strtod_l+0x2fe>
 800ae84:	498e      	ldr	r1, [pc, #568]	; (800b0c0 <_strtod_l+0x580>)
 800ae86:	a819      	add	r0, sp, #100	; 0x64
 800ae88:	f001 fdf6 	bl	800ca78 <__match>
 800ae8c:	2800      	cmp	r0, #0
 800ae8e:	f43f aeb4 	beq.w	800abfa <_strtod_l+0xba>
 800ae92:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ae94:	498b      	ldr	r1, [pc, #556]	; (800b0c4 <_strtod_l+0x584>)
 800ae96:	3b01      	subs	r3, #1
 800ae98:	a819      	add	r0, sp, #100	; 0x64
 800ae9a:	9319      	str	r3, [sp, #100]	; 0x64
 800ae9c:	f001 fdec 	bl	800ca78 <__match>
 800aea0:	b910      	cbnz	r0, 800aea8 <_strtod_l+0x368>
 800aea2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aea4:	3301      	adds	r3, #1
 800aea6:	9319      	str	r3, [sp, #100]	; 0x64
 800aea8:	f04f 0800 	mov.w	r8, #0
 800aeac:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800b0c8 <_strtod_l+0x588>
 800aeb0:	e687      	b.n	800abc2 <_strtod_l+0x82>
 800aeb2:	4886      	ldr	r0, [pc, #536]	; (800b0cc <_strtod_l+0x58c>)
 800aeb4:	f002 fdce 	bl	800da54 <nan>
 800aeb8:	4680      	mov	r8, r0
 800aeba:	4689      	mov	r9, r1
 800aebc:	e681      	b.n	800abc2 <_strtod_l+0x82>
 800aebe:	9b04      	ldr	r3, [sp, #16]
 800aec0:	f1bb 0f00 	cmp.w	fp, #0
 800aec4:	bf08      	it	eq
 800aec6:	46a3      	moveq	fp, r4
 800aec8:	1aeb      	subs	r3, r5, r3
 800aeca:	2c10      	cmp	r4, #16
 800aecc:	9806      	ldr	r0, [sp, #24]
 800aece:	4626      	mov	r6, r4
 800aed0:	9307      	str	r3, [sp, #28]
 800aed2:	bfa8      	it	ge
 800aed4:	2610      	movge	r6, #16
 800aed6:	f7f5 fa85 	bl	80003e4 <__aeabi_ui2d>
 800aeda:	2c09      	cmp	r4, #9
 800aedc:	4680      	mov	r8, r0
 800aede:	4689      	mov	r9, r1
 800aee0:	dd13      	ble.n	800af0a <_strtod_l+0x3ca>
 800aee2:	4b7b      	ldr	r3, [pc, #492]	; (800b0d0 <_strtod_l+0x590>)
 800aee4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aee8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800aeec:	f7f5 faf4 	bl	80004d8 <__aeabi_dmul>
 800aef0:	4680      	mov	r8, r0
 800aef2:	9805      	ldr	r0, [sp, #20]
 800aef4:	4689      	mov	r9, r1
 800aef6:	f7f5 fa75 	bl	80003e4 <__aeabi_ui2d>
 800aefa:	4602      	mov	r2, r0
 800aefc:	460b      	mov	r3, r1
 800aefe:	4640      	mov	r0, r8
 800af00:	4649      	mov	r1, r9
 800af02:	f7f5 f933 	bl	800016c <__adddf3>
 800af06:	4680      	mov	r8, r0
 800af08:	4689      	mov	r9, r1
 800af0a:	2c0f      	cmp	r4, #15
 800af0c:	dc36      	bgt.n	800af7c <_strtod_l+0x43c>
 800af0e:	9b07      	ldr	r3, [sp, #28]
 800af10:	2b00      	cmp	r3, #0
 800af12:	f43f ae56 	beq.w	800abc2 <_strtod_l+0x82>
 800af16:	dd22      	ble.n	800af5e <_strtod_l+0x41e>
 800af18:	2b16      	cmp	r3, #22
 800af1a:	dc09      	bgt.n	800af30 <_strtod_l+0x3f0>
 800af1c:	496c      	ldr	r1, [pc, #432]	; (800b0d0 <_strtod_l+0x590>)
 800af1e:	4642      	mov	r2, r8
 800af20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af24:	464b      	mov	r3, r9
 800af26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af2a:	f7f5 fad5 	bl	80004d8 <__aeabi_dmul>
 800af2e:	e7c3      	b.n	800aeb8 <_strtod_l+0x378>
 800af30:	9a07      	ldr	r2, [sp, #28]
 800af32:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800af36:	4293      	cmp	r3, r2
 800af38:	db20      	blt.n	800af7c <_strtod_l+0x43c>
 800af3a:	4d65      	ldr	r5, [pc, #404]	; (800b0d0 <_strtod_l+0x590>)
 800af3c:	f1c4 040f 	rsb	r4, r4, #15
 800af40:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800af44:	4642      	mov	r2, r8
 800af46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af4a:	464b      	mov	r3, r9
 800af4c:	f7f5 fac4 	bl	80004d8 <__aeabi_dmul>
 800af50:	9b07      	ldr	r3, [sp, #28]
 800af52:	1b1c      	subs	r4, r3, r4
 800af54:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800af58:	e9d5 2300 	ldrd	r2, r3, [r5]
 800af5c:	e7e5      	b.n	800af2a <_strtod_l+0x3ea>
 800af5e:	9b07      	ldr	r3, [sp, #28]
 800af60:	3316      	adds	r3, #22
 800af62:	db0b      	blt.n	800af7c <_strtod_l+0x43c>
 800af64:	9b04      	ldr	r3, [sp, #16]
 800af66:	4640      	mov	r0, r8
 800af68:	1b5d      	subs	r5, r3, r5
 800af6a:	4b59      	ldr	r3, [pc, #356]	; (800b0d0 <_strtod_l+0x590>)
 800af6c:	4649      	mov	r1, r9
 800af6e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800af72:	e9d5 2300 	ldrd	r2, r3, [r5]
 800af76:	f7f5 fbd9 	bl	800072c <__aeabi_ddiv>
 800af7a:	e79d      	b.n	800aeb8 <_strtod_l+0x378>
 800af7c:	9b07      	ldr	r3, [sp, #28]
 800af7e:	1ba6      	subs	r6, r4, r6
 800af80:	441e      	add	r6, r3
 800af82:	2e00      	cmp	r6, #0
 800af84:	dd74      	ble.n	800b070 <_strtod_l+0x530>
 800af86:	f016 030f 	ands.w	r3, r6, #15
 800af8a:	d00a      	beq.n	800afa2 <_strtod_l+0x462>
 800af8c:	4950      	ldr	r1, [pc, #320]	; (800b0d0 <_strtod_l+0x590>)
 800af8e:	4642      	mov	r2, r8
 800af90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af98:	464b      	mov	r3, r9
 800af9a:	f7f5 fa9d 	bl	80004d8 <__aeabi_dmul>
 800af9e:	4680      	mov	r8, r0
 800afa0:	4689      	mov	r9, r1
 800afa2:	f036 060f 	bics.w	r6, r6, #15
 800afa6:	d052      	beq.n	800b04e <_strtod_l+0x50e>
 800afa8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800afac:	dd27      	ble.n	800affe <_strtod_l+0x4be>
 800afae:	f04f 0b00 	mov.w	fp, #0
 800afb2:	f8cd b010 	str.w	fp, [sp, #16]
 800afb6:	f8cd b020 	str.w	fp, [sp, #32]
 800afba:	f8cd b018 	str.w	fp, [sp, #24]
 800afbe:	2322      	movs	r3, #34	; 0x22
 800afc0:	f04f 0800 	mov.w	r8, #0
 800afc4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800b0c8 <_strtod_l+0x588>
 800afc8:	f8ca 3000 	str.w	r3, [sl]
 800afcc:	9b08      	ldr	r3, [sp, #32]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	f43f adf7 	beq.w	800abc2 <_strtod_l+0x82>
 800afd4:	4650      	mov	r0, sl
 800afd6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800afd8:	f001 fe78 	bl	800cccc <_Bfree>
 800afdc:	4650      	mov	r0, sl
 800afde:	9906      	ldr	r1, [sp, #24]
 800afe0:	f001 fe74 	bl	800cccc <_Bfree>
 800afe4:	4650      	mov	r0, sl
 800afe6:	9904      	ldr	r1, [sp, #16]
 800afe8:	f001 fe70 	bl	800cccc <_Bfree>
 800afec:	4650      	mov	r0, sl
 800afee:	9908      	ldr	r1, [sp, #32]
 800aff0:	f001 fe6c 	bl	800cccc <_Bfree>
 800aff4:	4659      	mov	r1, fp
 800aff6:	4650      	mov	r0, sl
 800aff8:	f001 fe68 	bl	800cccc <_Bfree>
 800affc:	e5e1      	b.n	800abc2 <_strtod_l+0x82>
 800affe:	4b35      	ldr	r3, [pc, #212]	; (800b0d4 <_strtod_l+0x594>)
 800b000:	4640      	mov	r0, r8
 800b002:	9305      	str	r3, [sp, #20]
 800b004:	2300      	movs	r3, #0
 800b006:	4649      	mov	r1, r9
 800b008:	461f      	mov	r7, r3
 800b00a:	1136      	asrs	r6, r6, #4
 800b00c:	2e01      	cmp	r6, #1
 800b00e:	dc21      	bgt.n	800b054 <_strtod_l+0x514>
 800b010:	b10b      	cbz	r3, 800b016 <_strtod_l+0x4d6>
 800b012:	4680      	mov	r8, r0
 800b014:	4689      	mov	r9, r1
 800b016:	4b2f      	ldr	r3, [pc, #188]	; (800b0d4 <_strtod_l+0x594>)
 800b018:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b01c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b020:	4642      	mov	r2, r8
 800b022:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b026:	464b      	mov	r3, r9
 800b028:	f7f5 fa56 	bl	80004d8 <__aeabi_dmul>
 800b02c:	4b26      	ldr	r3, [pc, #152]	; (800b0c8 <_strtod_l+0x588>)
 800b02e:	460a      	mov	r2, r1
 800b030:	400b      	ands	r3, r1
 800b032:	4929      	ldr	r1, [pc, #164]	; (800b0d8 <_strtod_l+0x598>)
 800b034:	4680      	mov	r8, r0
 800b036:	428b      	cmp	r3, r1
 800b038:	d8b9      	bhi.n	800afae <_strtod_l+0x46e>
 800b03a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b03e:	428b      	cmp	r3, r1
 800b040:	bf86      	itte	hi
 800b042:	f04f 38ff 	movhi.w	r8, #4294967295
 800b046:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800b0dc <_strtod_l+0x59c>
 800b04a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b04e:	2300      	movs	r3, #0
 800b050:	9305      	str	r3, [sp, #20]
 800b052:	e07f      	b.n	800b154 <_strtod_l+0x614>
 800b054:	07f2      	lsls	r2, r6, #31
 800b056:	d505      	bpl.n	800b064 <_strtod_l+0x524>
 800b058:	9b05      	ldr	r3, [sp, #20]
 800b05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05e:	f7f5 fa3b 	bl	80004d8 <__aeabi_dmul>
 800b062:	2301      	movs	r3, #1
 800b064:	9a05      	ldr	r2, [sp, #20]
 800b066:	3701      	adds	r7, #1
 800b068:	3208      	adds	r2, #8
 800b06a:	1076      	asrs	r6, r6, #1
 800b06c:	9205      	str	r2, [sp, #20]
 800b06e:	e7cd      	b.n	800b00c <_strtod_l+0x4cc>
 800b070:	d0ed      	beq.n	800b04e <_strtod_l+0x50e>
 800b072:	4276      	negs	r6, r6
 800b074:	f016 020f 	ands.w	r2, r6, #15
 800b078:	d00a      	beq.n	800b090 <_strtod_l+0x550>
 800b07a:	4b15      	ldr	r3, [pc, #84]	; (800b0d0 <_strtod_l+0x590>)
 800b07c:	4640      	mov	r0, r8
 800b07e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b082:	4649      	mov	r1, r9
 800b084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b088:	f7f5 fb50 	bl	800072c <__aeabi_ddiv>
 800b08c:	4680      	mov	r8, r0
 800b08e:	4689      	mov	r9, r1
 800b090:	1136      	asrs	r6, r6, #4
 800b092:	d0dc      	beq.n	800b04e <_strtod_l+0x50e>
 800b094:	2e1f      	cmp	r6, #31
 800b096:	dd23      	ble.n	800b0e0 <_strtod_l+0x5a0>
 800b098:	f04f 0b00 	mov.w	fp, #0
 800b09c:	f8cd b010 	str.w	fp, [sp, #16]
 800b0a0:	f8cd b020 	str.w	fp, [sp, #32]
 800b0a4:	f8cd b018 	str.w	fp, [sp, #24]
 800b0a8:	2322      	movs	r3, #34	; 0x22
 800b0aa:	f04f 0800 	mov.w	r8, #0
 800b0ae:	f04f 0900 	mov.w	r9, #0
 800b0b2:	f8ca 3000 	str.w	r3, [sl]
 800b0b6:	e789      	b.n	800afcc <_strtod_l+0x48c>
 800b0b8:	0800e6f5 	.word	0x0800e6f5
 800b0bc:	0800e738 	.word	0x0800e738
 800b0c0:	0800e6ed 	.word	0x0800e6ed
 800b0c4:	0800e87c 	.word	0x0800e87c
 800b0c8:	7ff00000 	.word	0x7ff00000
 800b0cc:	0800eb28 	.word	0x0800eb28
 800b0d0:	0800ea08 	.word	0x0800ea08
 800b0d4:	0800e9e0 	.word	0x0800e9e0
 800b0d8:	7ca00000 	.word	0x7ca00000
 800b0dc:	7fefffff 	.word	0x7fefffff
 800b0e0:	f016 0310 	ands.w	r3, r6, #16
 800b0e4:	bf18      	it	ne
 800b0e6:	236a      	movne	r3, #106	; 0x6a
 800b0e8:	4640      	mov	r0, r8
 800b0ea:	9305      	str	r3, [sp, #20]
 800b0ec:	4649      	mov	r1, r9
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	4fb0      	ldr	r7, [pc, #704]	; (800b3b4 <_strtod_l+0x874>)
 800b0f2:	07f2      	lsls	r2, r6, #31
 800b0f4:	d504      	bpl.n	800b100 <_strtod_l+0x5c0>
 800b0f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0fa:	f7f5 f9ed 	bl	80004d8 <__aeabi_dmul>
 800b0fe:	2301      	movs	r3, #1
 800b100:	1076      	asrs	r6, r6, #1
 800b102:	f107 0708 	add.w	r7, r7, #8
 800b106:	d1f4      	bne.n	800b0f2 <_strtod_l+0x5b2>
 800b108:	b10b      	cbz	r3, 800b10e <_strtod_l+0x5ce>
 800b10a:	4680      	mov	r8, r0
 800b10c:	4689      	mov	r9, r1
 800b10e:	9b05      	ldr	r3, [sp, #20]
 800b110:	b1c3      	cbz	r3, 800b144 <_strtod_l+0x604>
 800b112:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b116:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	4649      	mov	r1, r9
 800b11e:	dd11      	ble.n	800b144 <_strtod_l+0x604>
 800b120:	2b1f      	cmp	r3, #31
 800b122:	f340 8127 	ble.w	800b374 <_strtod_l+0x834>
 800b126:	2b34      	cmp	r3, #52	; 0x34
 800b128:	bfd8      	it	le
 800b12a:	f04f 33ff 	movle.w	r3, #4294967295
 800b12e:	f04f 0800 	mov.w	r8, #0
 800b132:	bfcf      	iteee	gt
 800b134:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b138:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b13c:	fa03 f202 	lslle.w	r2, r3, r2
 800b140:	ea02 0901 	andle.w	r9, r2, r1
 800b144:	2200      	movs	r2, #0
 800b146:	2300      	movs	r3, #0
 800b148:	4640      	mov	r0, r8
 800b14a:	4649      	mov	r1, r9
 800b14c:	f7f5 fc2c 	bl	80009a8 <__aeabi_dcmpeq>
 800b150:	2800      	cmp	r0, #0
 800b152:	d1a1      	bne.n	800b098 <_strtod_l+0x558>
 800b154:	9b06      	ldr	r3, [sp, #24]
 800b156:	465a      	mov	r2, fp
 800b158:	9300      	str	r3, [sp, #0]
 800b15a:	4650      	mov	r0, sl
 800b15c:	4623      	mov	r3, r4
 800b15e:	9908      	ldr	r1, [sp, #32]
 800b160:	f001 fe1c 	bl	800cd9c <__s2b>
 800b164:	9008      	str	r0, [sp, #32]
 800b166:	2800      	cmp	r0, #0
 800b168:	f43f af21 	beq.w	800afae <_strtod_l+0x46e>
 800b16c:	9b04      	ldr	r3, [sp, #16]
 800b16e:	f04f 0b00 	mov.w	fp, #0
 800b172:	1b5d      	subs	r5, r3, r5
 800b174:	9b07      	ldr	r3, [sp, #28]
 800b176:	f8cd b010 	str.w	fp, [sp, #16]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	bfb4      	ite	lt
 800b17e:	462b      	movlt	r3, r5
 800b180:	2300      	movge	r3, #0
 800b182:	930e      	str	r3, [sp, #56]	; 0x38
 800b184:	9b07      	ldr	r3, [sp, #28]
 800b186:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b18a:	9314      	str	r3, [sp, #80]	; 0x50
 800b18c:	9b08      	ldr	r3, [sp, #32]
 800b18e:	4650      	mov	r0, sl
 800b190:	6859      	ldr	r1, [r3, #4]
 800b192:	f001 fd5b 	bl	800cc4c <_Balloc>
 800b196:	9006      	str	r0, [sp, #24]
 800b198:	2800      	cmp	r0, #0
 800b19a:	f43f af10 	beq.w	800afbe <_strtod_l+0x47e>
 800b19e:	9b08      	ldr	r3, [sp, #32]
 800b1a0:	300c      	adds	r0, #12
 800b1a2:	691a      	ldr	r2, [r3, #16]
 800b1a4:	f103 010c 	add.w	r1, r3, #12
 800b1a8:	3202      	adds	r2, #2
 800b1aa:	0092      	lsls	r2, r2, #2
 800b1ac:	f001 fd40 	bl	800cc30 <memcpy>
 800b1b0:	ab1c      	add	r3, sp, #112	; 0x70
 800b1b2:	9301      	str	r3, [sp, #4]
 800b1b4:	ab1b      	add	r3, sp, #108	; 0x6c
 800b1b6:	9300      	str	r3, [sp, #0]
 800b1b8:	4642      	mov	r2, r8
 800b1ba:	464b      	mov	r3, r9
 800b1bc:	4650      	mov	r0, sl
 800b1be:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800b1c2:	f002 f92d 	bl	800d420 <__d2b>
 800b1c6:	901a      	str	r0, [sp, #104]	; 0x68
 800b1c8:	2800      	cmp	r0, #0
 800b1ca:	f43f aef8 	beq.w	800afbe <_strtod_l+0x47e>
 800b1ce:	2101      	movs	r1, #1
 800b1d0:	4650      	mov	r0, sl
 800b1d2:	f001 fe7b 	bl	800cecc <__i2b>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	9004      	str	r0, [sp, #16]
 800b1da:	2800      	cmp	r0, #0
 800b1dc:	f43f aeef 	beq.w	800afbe <_strtod_l+0x47e>
 800b1e0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b1e2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b1e4:	2d00      	cmp	r5, #0
 800b1e6:	bfab      	itete	ge
 800b1e8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800b1ea:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800b1ec:	18ee      	addge	r6, r5, r3
 800b1ee:	1b5c      	sublt	r4, r3, r5
 800b1f0:	9b05      	ldr	r3, [sp, #20]
 800b1f2:	bfa8      	it	ge
 800b1f4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800b1f6:	eba5 0503 	sub.w	r5, r5, r3
 800b1fa:	4415      	add	r5, r2
 800b1fc:	4b6e      	ldr	r3, [pc, #440]	; (800b3b8 <_strtod_l+0x878>)
 800b1fe:	f105 35ff 	add.w	r5, r5, #4294967295
 800b202:	bfb8      	it	lt
 800b204:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800b206:	429d      	cmp	r5, r3
 800b208:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b20c:	f280 80c4 	bge.w	800b398 <_strtod_l+0x858>
 800b210:	1b5b      	subs	r3, r3, r5
 800b212:	2b1f      	cmp	r3, #31
 800b214:	f04f 0701 	mov.w	r7, #1
 800b218:	eba2 0203 	sub.w	r2, r2, r3
 800b21c:	f300 80b1 	bgt.w	800b382 <_strtod_l+0x842>
 800b220:	2500      	movs	r5, #0
 800b222:	fa07 f303 	lsl.w	r3, r7, r3
 800b226:	930f      	str	r3, [sp, #60]	; 0x3c
 800b228:	18b7      	adds	r7, r6, r2
 800b22a:	9b05      	ldr	r3, [sp, #20]
 800b22c:	42be      	cmp	r6, r7
 800b22e:	4414      	add	r4, r2
 800b230:	441c      	add	r4, r3
 800b232:	4633      	mov	r3, r6
 800b234:	bfa8      	it	ge
 800b236:	463b      	movge	r3, r7
 800b238:	42a3      	cmp	r3, r4
 800b23a:	bfa8      	it	ge
 800b23c:	4623      	movge	r3, r4
 800b23e:	2b00      	cmp	r3, #0
 800b240:	bfc2      	ittt	gt
 800b242:	1aff      	subgt	r7, r7, r3
 800b244:	1ae4      	subgt	r4, r4, r3
 800b246:	1af6      	subgt	r6, r6, r3
 800b248:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	dd17      	ble.n	800b27e <_strtod_l+0x73e>
 800b24e:	461a      	mov	r2, r3
 800b250:	4650      	mov	r0, sl
 800b252:	9904      	ldr	r1, [sp, #16]
 800b254:	f001 fef8 	bl	800d048 <__pow5mult>
 800b258:	9004      	str	r0, [sp, #16]
 800b25a:	2800      	cmp	r0, #0
 800b25c:	f43f aeaf 	beq.w	800afbe <_strtod_l+0x47e>
 800b260:	4601      	mov	r1, r0
 800b262:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b264:	4650      	mov	r0, sl
 800b266:	f001 fe47 	bl	800cef8 <__multiply>
 800b26a:	9009      	str	r0, [sp, #36]	; 0x24
 800b26c:	2800      	cmp	r0, #0
 800b26e:	f43f aea6 	beq.w	800afbe <_strtod_l+0x47e>
 800b272:	4650      	mov	r0, sl
 800b274:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b276:	f001 fd29 	bl	800cccc <_Bfree>
 800b27a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b27c:	931a      	str	r3, [sp, #104]	; 0x68
 800b27e:	2f00      	cmp	r7, #0
 800b280:	f300 808e 	bgt.w	800b3a0 <_strtod_l+0x860>
 800b284:	9b07      	ldr	r3, [sp, #28]
 800b286:	2b00      	cmp	r3, #0
 800b288:	dd08      	ble.n	800b29c <_strtod_l+0x75c>
 800b28a:	4650      	mov	r0, sl
 800b28c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b28e:	9906      	ldr	r1, [sp, #24]
 800b290:	f001 feda 	bl	800d048 <__pow5mult>
 800b294:	9006      	str	r0, [sp, #24]
 800b296:	2800      	cmp	r0, #0
 800b298:	f43f ae91 	beq.w	800afbe <_strtod_l+0x47e>
 800b29c:	2c00      	cmp	r4, #0
 800b29e:	dd08      	ble.n	800b2b2 <_strtod_l+0x772>
 800b2a0:	4622      	mov	r2, r4
 800b2a2:	4650      	mov	r0, sl
 800b2a4:	9906      	ldr	r1, [sp, #24]
 800b2a6:	f001 ff29 	bl	800d0fc <__lshift>
 800b2aa:	9006      	str	r0, [sp, #24]
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	f43f ae86 	beq.w	800afbe <_strtod_l+0x47e>
 800b2b2:	2e00      	cmp	r6, #0
 800b2b4:	dd08      	ble.n	800b2c8 <_strtod_l+0x788>
 800b2b6:	4632      	mov	r2, r6
 800b2b8:	4650      	mov	r0, sl
 800b2ba:	9904      	ldr	r1, [sp, #16]
 800b2bc:	f001 ff1e 	bl	800d0fc <__lshift>
 800b2c0:	9004      	str	r0, [sp, #16]
 800b2c2:	2800      	cmp	r0, #0
 800b2c4:	f43f ae7b 	beq.w	800afbe <_strtod_l+0x47e>
 800b2c8:	4650      	mov	r0, sl
 800b2ca:	9a06      	ldr	r2, [sp, #24]
 800b2cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b2ce:	f001 ffa1 	bl	800d214 <__mdiff>
 800b2d2:	4683      	mov	fp, r0
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	f43f ae72 	beq.w	800afbe <_strtod_l+0x47e>
 800b2da:	2400      	movs	r4, #0
 800b2dc:	68c3      	ldr	r3, [r0, #12]
 800b2de:	9904      	ldr	r1, [sp, #16]
 800b2e0:	60c4      	str	r4, [r0, #12]
 800b2e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2e4:	f001 ff7a 	bl	800d1dc <__mcmp>
 800b2e8:	42a0      	cmp	r0, r4
 800b2ea:	da6b      	bge.n	800b3c4 <_strtod_l+0x884>
 800b2ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2ee:	ea53 0308 	orrs.w	r3, r3, r8
 800b2f2:	f040 8091 	bne.w	800b418 <_strtod_l+0x8d8>
 800b2f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	f040 808c 	bne.w	800b418 <_strtod_l+0x8d8>
 800b300:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b304:	0d1b      	lsrs	r3, r3, #20
 800b306:	051b      	lsls	r3, r3, #20
 800b308:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b30c:	f240 8084 	bls.w	800b418 <_strtod_l+0x8d8>
 800b310:	f8db 3014 	ldr.w	r3, [fp, #20]
 800b314:	b91b      	cbnz	r3, 800b31e <_strtod_l+0x7de>
 800b316:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	dd7c      	ble.n	800b418 <_strtod_l+0x8d8>
 800b31e:	4659      	mov	r1, fp
 800b320:	2201      	movs	r2, #1
 800b322:	4650      	mov	r0, sl
 800b324:	f001 feea 	bl	800d0fc <__lshift>
 800b328:	9904      	ldr	r1, [sp, #16]
 800b32a:	4683      	mov	fp, r0
 800b32c:	f001 ff56 	bl	800d1dc <__mcmp>
 800b330:	2800      	cmp	r0, #0
 800b332:	dd71      	ble.n	800b418 <_strtod_l+0x8d8>
 800b334:	9905      	ldr	r1, [sp, #20]
 800b336:	464b      	mov	r3, r9
 800b338:	4a20      	ldr	r2, [pc, #128]	; (800b3bc <_strtod_l+0x87c>)
 800b33a:	2900      	cmp	r1, #0
 800b33c:	f000 808c 	beq.w	800b458 <_strtod_l+0x918>
 800b340:	ea02 0109 	and.w	r1, r2, r9
 800b344:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b348:	f300 8086 	bgt.w	800b458 <_strtod_l+0x918>
 800b34c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b350:	f77f aeaa 	ble.w	800b0a8 <_strtod_l+0x568>
 800b354:	4640      	mov	r0, r8
 800b356:	4649      	mov	r1, r9
 800b358:	4b19      	ldr	r3, [pc, #100]	; (800b3c0 <_strtod_l+0x880>)
 800b35a:	2200      	movs	r2, #0
 800b35c:	f7f5 f8bc 	bl	80004d8 <__aeabi_dmul>
 800b360:	460b      	mov	r3, r1
 800b362:	4303      	orrs	r3, r0
 800b364:	bf08      	it	eq
 800b366:	2322      	moveq	r3, #34	; 0x22
 800b368:	4680      	mov	r8, r0
 800b36a:	4689      	mov	r9, r1
 800b36c:	bf08      	it	eq
 800b36e:	f8ca 3000 	streq.w	r3, [sl]
 800b372:	e62f      	b.n	800afd4 <_strtod_l+0x494>
 800b374:	f04f 32ff 	mov.w	r2, #4294967295
 800b378:	fa02 f303 	lsl.w	r3, r2, r3
 800b37c:	ea03 0808 	and.w	r8, r3, r8
 800b380:	e6e0      	b.n	800b144 <_strtod_l+0x604>
 800b382:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800b386:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800b38a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800b38e:	35e2      	adds	r5, #226	; 0xe2
 800b390:	fa07 f505 	lsl.w	r5, r7, r5
 800b394:	970f      	str	r7, [sp, #60]	; 0x3c
 800b396:	e747      	b.n	800b228 <_strtod_l+0x6e8>
 800b398:	2301      	movs	r3, #1
 800b39a:	2500      	movs	r5, #0
 800b39c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b39e:	e743      	b.n	800b228 <_strtod_l+0x6e8>
 800b3a0:	463a      	mov	r2, r7
 800b3a2:	4650      	mov	r0, sl
 800b3a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b3a6:	f001 fea9 	bl	800d0fc <__lshift>
 800b3aa:	901a      	str	r0, [sp, #104]	; 0x68
 800b3ac:	2800      	cmp	r0, #0
 800b3ae:	f47f af69 	bne.w	800b284 <_strtod_l+0x744>
 800b3b2:	e604      	b.n	800afbe <_strtod_l+0x47e>
 800b3b4:	0800e750 	.word	0x0800e750
 800b3b8:	fffffc02 	.word	0xfffffc02
 800b3bc:	7ff00000 	.word	0x7ff00000
 800b3c0:	39500000 	.word	0x39500000
 800b3c4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b3c8:	d165      	bne.n	800b496 <_strtod_l+0x956>
 800b3ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b3cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b3d0:	b35a      	cbz	r2, 800b42a <_strtod_l+0x8ea>
 800b3d2:	4a99      	ldr	r2, [pc, #612]	; (800b638 <_strtod_l+0xaf8>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d12b      	bne.n	800b430 <_strtod_l+0x8f0>
 800b3d8:	9b05      	ldr	r3, [sp, #20]
 800b3da:	4641      	mov	r1, r8
 800b3dc:	b303      	cbz	r3, 800b420 <_strtod_l+0x8e0>
 800b3de:	464a      	mov	r2, r9
 800b3e0:	4b96      	ldr	r3, [pc, #600]	; (800b63c <_strtod_l+0xafc>)
 800b3e2:	4013      	ands	r3, r2
 800b3e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b3e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b3ec:	d81b      	bhi.n	800b426 <_strtod_l+0x8e6>
 800b3ee:	0d1b      	lsrs	r3, r3, #20
 800b3f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b3f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b3f8:	4299      	cmp	r1, r3
 800b3fa:	d119      	bne.n	800b430 <_strtod_l+0x8f0>
 800b3fc:	4b90      	ldr	r3, [pc, #576]	; (800b640 <_strtod_l+0xb00>)
 800b3fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b400:	429a      	cmp	r2, r3
 800b402:	d102      	bne.n	800b40a <_strtod_l+0x8ca>
 800b404:	3101      	adds	r1, #1
 800b406:	f43f adda 	beq.w	800afbe <_strtod_l+0x47e>
 800b40a:	f04f 0800 	mov.w	r8, #0
 800b40e:	4b8b      	ldr	r3, [pc, #556]	; (800b63c <_strtod_l+0xafc>)
 800b410:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b412:	401a      	ands	r2, r3
 800b414:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800b418:	9b05      	ldr	r3, [sp, #20]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d19a      	bne.n	800b354 <_strtod_l+0x814>
 800b41e:	e5d9      	b.n	800afd4 <_strtod_l+0x494>
 800b420:	f04f 33ff 	mov.w	r3, #4294967295
 800b424:	e7e8      	b.n	800b3f8 <_strtod_l+0x8b8>
 800b426:	4613      	mov	r3, r2
 800b428:	e7e6      	b.n	800b3f8 <_strtod_l+0x8b8>
 800b42a:	ea53 0308 	orrs.w	r3, r3, r8
 800b42e:	d081      	beq.n	800b334 <_strtod_l+0x7f4>
 800b430:	b1e5      	cbz	r5, 800b46c <_strtod_l+0x92c>
 800b432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b434:	421d      	tst	r5, r3
 800b436:	d0ef      	beq.n	800b418 <_strtod_l+0x8d8>
 800b438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b43a:	4640      	mov	r0, r8
 800b43c:	4649      	mov	r1, r9
 800b43e:	9a05      	ldr	r2, [sp, #20]
 800b440:	b1c3      	cbz	r3, 800b474 <_strtod_l+0x934>
 800b442:	f7ff fb5b 	bl	800aafc <sulp>
 800b446:	4602      	mov	r2, r0
 800b448:	460b      	mov	r3, r1
 800b44a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b44e:	f7f4 fe8d 	bl	800016c <__adddf3>
 800b452:	4680      	mov	r8, r0
 800b454:	4689      	mov	r9, r1
 800b456:	e7df      	b.n	800b418 <_strtod_l+0x8d8>
 800b458:	4013      	ands	r3, r2
 800b45a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b45e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b462:	f04f 38ff 	mov.w	r8, #4294967295
 800b466:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b46a:	e7d5      	b.n	800b418 <_strtod_l+0x8d8>
 800b46c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b46e:	ea13 0f08 	tst.w	r3, r8
 800b472:	e7e0      	b.n	800b436 <_strtod_l+0x8f6>
 800b474:	f7ff fb42 	bl	800aafc <sulp>
 800b478:	4602      	mov	r2, r0
 800b47a:	460b      	mov	r3, r1
 800b47c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b480:	f7f4 fe72 	bl	8000168 <__aeabi_dsub>
 800b484:	2200      	movs	r2, #0
 800b486:	2300      	movs	r3, #0
 800b488:	4680      	mov	r8, r0
 800b48a:	4689      	mov	r9, r1
 800b48c:	f7f5 fa8c 	bl	80009a8 <__aeabi_dcmpeq>
 800b490:	2800      	cmp	r0, #0
 800b492:	d0c1      	beq.n	800b418 <_strtod_l+0x8d8>
 800b494:	e608      	b.n	800b0a8 <_strtod_l+0x568>
 800b496:	4658      	mov	r0, fp
 800b498:	9904      	ldr	r1, [sp, #16]
 800b49a:	f002 f81d 	bl	800d4d8 <__ratio>
 800b49e:	2200      	movs	r2, #0
 800b4a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b4a4:	4606      	mov	r6, r0
 800b4a6:	460f      	mov	r7, r1
 800b4a8:	f7f5 fa92 	bl	80009d0 <__aeabi_dcmple>
 800b4ac:	2800      	cmp	r0, #0
 800b4ae:	d070      	beq.n	800b592 <_strtod_l+0xa52>
 800b4b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d042      	beq.n	800b53c <_strtod_l+0x9fc>
 800b4b6:	2600      	movs	r6, #0
 800b4b8:	4f62      	ldr	r7, [pc, #392]	; (800b644 <_strtod_l+0xb04>)
 800b4ba:	4d62      	ldr	r5, [pc, #392]	; (800b644 <_strtod_l+0xb04>)
 800b4bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b4c2:	0d1b      	lsrs	r3, r3, #20
 800b4c4:	051b      	lsls	r3, r3, #20
 800b4c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b4ca:	4b5f      	ldr	r3, [pc, #380]	; (800b648 <_strtod_l+0xb08>)
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	f040 80c3 	bne.w	800b658 <_strtod_l+0xb18>
 800b4d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4d4:	4640      	mov	r0, r8
 800b4d6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800b4da:	4649      	mov	r1, r9
 800b4dc:	f001 ff26 	bl	800d32c <__ulp>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	460b      	mov	r3, r1
 800b4e4:	4630      	mov	r0, r6
 800b4e6:	4639      	mov	r1, r7
 800b4e8:	f7f4 fff6 	bl	80004d8 <__aeabi_dmul>
 800b4ec:	4642      	mov	r2, r8
 800b4ee:	464b      	mov	r3, r9
 800b4f0:	f7f4 fe3c 	bl	800016c <__adddf3>
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	4951      	ldr	r1, [pc, #324]	; (800b63c <_strtod_l+0xafc>)
 800b4f8:	4a54      	ldr	r2, [pc, #336]	; (800b64c <_strtod_l+0xb0c>)
 800b4fa:	4019      	ands	r1, r3
 800b4fc:	4291      	cmp	r1, r2
 800b4fe:	4680      	mov	r8, r0
 800b500:	d95d      	bls.n	800b5be <_strtod_l+0xa7e>
 800b502:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b504:	4b4e      	ldr	r3, [pc, #312]	; (800b640 <_strtod_l+0xb00>)
 800b506:	429a      	cmp	r2, r3
 800b508:	d103      	bne.n	800b512 <_strtod_l+0x9d2>
 800b50a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b50c:	3301      	adds	r3, #1
 800b50e:	f43f ad56 	beq.w	800afbe <_strtod_l+0x47e>
 800b512:	f04f 38ff 	mov.w	r8, #4294967295
 800b516:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800b640 <_strtod_l+0xb00>
 800b51a:	4650      	mov	r0, sl
 800b51c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b51e:	f001 fbd5 	bl	800cccc <_Bfree>
 800b522:	4650      	mov	r0, sl
 800b524:	9906      	ldr	r1, [sp, #24]
 800b526:	f001 fbd1 	bl	800cccc <_Bfree>
 800b52a:	4650      	mov	r0, sl
 800b52c:	9904      	ldr	r1, [sp, #16]
 800b52e:	f001 fbcd 	bl	800cccc <_Bfree>
 800b532:	4659      	mov	r1, fp
 800b534:	4650      	mov	r0, sl
 800b536:	f001 fbc9 	bl	800cccc <_Bfree>
 800b53a:	e627      	b.n	800b18c <_strtod_l+0x64c>
 800b53c:	f1b8 0f00 	cmp.w	r8, #0
 800b540:	d119      	bne.n	800b576 <_strtod_l+0xa36>
 800b542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b544:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b548:	b9e3      	cbnz	r3, 800b584 <_strtod_l+0xa44>
 800b54a:	2200      	movs	r2, #0
 800b54c:	4630      	mov	r0, r6
 800b54e:	4639      	mov	r1, r7
 800b550:	4b3c      	ldr	r3, [pc, #240]	; (800b644 <_strtod_l+0xb04>)
 800b552:	f7f5 fa33 	bl	80009bc <__aeabi_dcmplt>
 800b556:	b9c8      	cbnz	r0, 800b58c <_strtod_l+0xa4c>
 800b558:	2200      	movs	r2, #0
 800b55a:	4630      	mov	r0, r6
 800b55c:	4639      	mov	r1, r7
 800b55e:	4b3c      	ldr	r3, [pc, #240]	; (800b650 <_strtod_l+0xb10>)
 800b560:	f7f4 ffba 	bl	80004d8 <__aeabi_dmul>
 800b564:	4604      	mov	r4, r0
 800b566:	460d      	mov	r5, r1
 800b568:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b56c:	9416      	str	r4, [sp, #88]	; 0x58
 800b56e:	9317      	str	r3, [sp, #92]	; 0x5c
 800b570:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800b574:	e7a2      	b.n	800b4bc <_strtod_l+0x97c>
 800b576:	f1b8 0f01 	cmp.w	r8, #1
 800b57a:	d103      	bne.n	800b584 <_strtod_l+0xa44>
 800b57c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b57e:	2b00      	cmp	r3, #0
 800b580:	f43f ad92 	beq.w	800b0a8 <_strtod_l+0x568>
 800b584:	2600      	movs	r6, #0
 800b586:	2400      	movs	r4, #0
 800b588:	4f32      	ldr	r7, [pc, #200]	; (800b654 <_strtod_l+0xb14>)
 800b58a:	e796      	b.n	800b4ba <_strtod_l+0x97a>
 800b58c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b58e:	4d30      	ldr	r5, [pc, #192]	; (800b650 <_strtod_l+0xb10>)
 800b590:	e7ea      	b.n	800b568 <_strtod_l+0xa28>
 800b592:	4b2f      	ldr	r3, [pc, #188]	; (800b650 <_strtod_l+0xb10>)
 800b594:	2200      	movs	r2, #0
 800b596:	4630      	mov	r0, r6
 800b598:	4639      	mov	r1, r7
 800b59a:	f7f4 ff9d 	bl	80004d8 <__aeabi_dmul>
 800b59e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5a0:	4604      	mov	r4, r0
 800b5a2:	460d      	mov	r5, r1
 800b5a4:	b933      	cbnz	r3, 800b5b4 <_strtod_l+0xa74>
 800b5a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5aa:	9010      	str	r0, [sp, #64]	; 0x40
 800b5ac:	9311      	str	r3, [sp, #68]	; 0x44
 800b5ae:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b5b2:	e783      	b.n	800b4bc <_strtod_l+0x97c>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	460b      	mov	r3, r1
 800b5b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b5bc:	e7f7      	b.n	800b5ae <_strtod_l+0xa6e>
 800b5be:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b5c2:	9b05      	ldr	r3, [sp, #20]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d1a8      	bne.n	800b51a <_strtod_l+0x9da>
 800b5c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b5cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b5ce:	0d1b      	lsrs	r3, r3, #20
 800b5d0:	051b      	lsls	r3, r3, #20
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d1a1      	bne.n	800b51a <_strtod_l+0x9da>
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	4629      	mov	r1, r5
 800b5da:	f7f5 fd23 	bl	8001024 <__aeabi_d2lz>
 800b5de:	f7f4 ff4d 	bl	800047c <__aeabi_l2d>
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	4620      	mov	r0, r4
 800b5e8:	4629      	mov	r1, r5
 800b5ea:	f7f4 fdbd 	bl	8000168 <__aeabi_dsub>
 800b5ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b5f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b5f4:	ea43 0308 	orr.w	r3, r3, r8
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	4604      	mov	r4, r0
 800b5fc:	460d      	mov	r5, r1
 800b5fe:	d066      	beq.n	800b6ce <_strtod_l+0xb8e>
 800b600:	a309      	add	r3, pc, #36	; (adr r3, 800b628 <_strtod_l+0xae8>)
 800b602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b606:	f7f5 f9d9 	bl	80009bc <__aeabi_dcmplt>
 800b60a:	2800      	cmp	r0, #0
 800b60c:	f47f ace2 	bne.w	800afd4 <_strtod_l+0x494>
 800b610:	a307      	add	r3, pc, #28	; (adr r3, 800b630 <_strtod_l+0xaf0>)
 800b612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b616:	4620      	mov	r0, r4
 800b618:	4629      	mov	r1, r5
 800b61a:	f7f5 f9ed 	bl	80009f8 <__aeabi_dcmpgt>
 800b61e:	2800      	cmp	r0, #0
 800b620:	f43f af7b 	beq.w	800b51a <_strtod_l+0x9da>
 800b624:	e4d6      	b.n	800afd4 <_strtod_l+0x494>
 800b626:	bf00      	nop
 800b628:	94a03595 	.word	0x94a03595
 800b62c:	3fdfffff 	.word	0x3fdfffff
 800b630:	35afe535 	.word	0x35afe535
 800b634:	3fe00000 	.word	0x3fe00000
 800b638:	000fffff 	.word	0x000fffff
 800b63c:	7ff00000 	.word	0x7ff00000
 800b640:	7fefffff 	.word	0x7fefffff
 800b644:	3ff00000 	.word	0x3ff00000
 800b648:	7fe00000 	.word	0x7fe00000
 800b64c:	7c9fffff 	.word	0x7c9fffff
 800b650:	3fe00000 	.word	0x3fe00000
 800b654:	bff00000 	.word	0xbff00000
 800b658:	9b05      	ldr	r3, [sp, #20]
 800b65a:	b313      	cbz	r3, 800b6a2 <_strtod_l+0xb62>
 800b65c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b65e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b662:	d81e      	bhi.n	800b6a2 <_strtod_l+0xb62>
 800b664:	a326      	add	r3, pc, #152	; (adr r3, 800b700 <_strtod_l+0xbc0>)
 800b666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66a:	4620      	mov	r0, r4
 800b66c:	4629      	mov	r1, r5
 800b66e:	f7f5 f9af 	bl	80009d0 <__aeabi_dcmple>
 800b672:	b190      	cbz	r0, 800b69a <_strtod_l+0xb5a>
 800b674:	4629      	mov	r1, r5
 800b676:	4620      	mov	r0, r4
 800b678:	f7f5 fa06 	bl	8000a88 <__aeabi_d2uiz>
 800b67c:	2801      	cmp	r0, #1
 800b67e:	bf38      	it	cc
 800b680:	2001      	movcc	r0, #1
 800b682:	f7f4 feaf 	bl	80003e4 <__aeabi_ui2d>
 800b686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b688:	4604      	mov	r4, r0
 800b68a:	460d      	mov	r5, r1
 800b68c:	b9d3      	cbnz	r3, 800b6c4 <_strtod_l+0xb84>
 800b68e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b692:	9012      	str	r0, [sp, #72]	; 0x48
 800b694:	9313      	str	r3, [sp, #76]	; 0x4c
 800b696:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800b69a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b69c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800b6a0:	1a9f      	subs	r7, r3, r2
 800b6a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b6a6:	f001 fe41 	bl	800d32c <__ulp>
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	460b      	mov	r3, r1
 800b6ae:	4630      	mov	r0, r6
 800b6b0:	4639      	mov	r1, r7
 800b6b2:	f7f4 ff11 	bl	80004d8 <__aeabi_dmul>
 800b6b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b6ba:	f7f4 fd57 	bl	800016c <__adddf3>
 800b6be:	4680      	mov	r8, r0
 800b6c0:	4689      	mov	r9, r1
 800b6c2:	e77e      	b.n	800b5c2 <_strtod_l+0xa82>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	460b      	mov	r3, r1
 800b6c8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800b6cc:	e7e3      	b.n	800b696 <_strtod_l+0xb56>
 800b6ce:	a30e      	add	r3, pc, #56	; (adr r3, 800b708 <_strtod_l+0xbc8>)
 800b6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d4:	f7f5 f972 	bl	80009bc <__aeabi_dcmplt>
 800b6d8:	e7a1      	b.n	800b61e <_strtod_l+0xade>
 800b6da:	2300      	movs	r3, #0
 800b6dc:	930a      	str	r3, [sp, #40]	; 0x28
 800b6de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b6e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b6e2:	6013      	str	r3, [r2, #0]
 800b6e4:	f7ff ba71 	b.w	800abca <_strtod_l+0x8a>
 800b6e8:	2a65      	cmp	r2, #101	; 0x65
 800b6ea:	f43f ab63 	beq.w	800adb4 <_strtod_l+0x274>
 800b6ee:	2a45      	cmp	r2, #69	; 0x45
 800b6f0:	f43f ab60 	beq.w	800adb4 <_strtod_l+0x274>
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	f7ff bb95 	b.w	800ae24 <_strtod_l+0x2e4>
 800b6fa:	bf00      	nop
 800b6fc:	f3af 8000 	nop.w
 800b700:	ffc00000 	.word	0xffc00000
 800b704:	41dfffff 	.word	0x41dfffff
 800b708:	94a03595 	.word	0x94a03595
 800b70c:	3fcfffff 	.word	0x3fcfffff

0800b710 <_strtod_r>:
 800b710:	4b01      	ldr	r3, [pc, #4]	; (800b718 <_strtod_r+0x8>)
 800b712:	f7ff ba15 	b.w	800ab40 <_strtod_l>
 800b716:	bf00      	nop
 800b718:	200001e4 	.word	0x200001e4

0800b71c <_strtol_l.constprop.0>:
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b722:	4680      	mov	r8, r0
 800b724:	d001      	beq.n	800b72a <_strtol_l.constprop.0+0xe>
 800b726:	2b24      	cmp	r3, #36	; 0x24
 800b728:	d906      	bls.n	800b738 <_strtol_l.constprop.0+0x1c>
 800b72a:	f7fe fb23 	bl	8009d74 <__errno>
 800b72e:	2316      	movs	r3, #22
 800b730:	6003      	str	r3, [r0, #0]
 800b732:	2000      	movs	r0, #0
 800b734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b738:	460d      	mov	r5, r1
 800b73a:	4f35      	ldr	r7, [pc, #212]	; (800b810 <_strtol_l.constprop.0+0xf4>)
 800b73c:	4628      	mov	r0, r5
 800b73e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b742:	5de6      	ldrb	r6, [r4, r7]
 800b744:	f016 0608 	ands.w	r6, r6, #8
 800b748:	d1f8      	bne.n	800b73c <_strtol_l.constprop.0+0x20>
 800b74a:	2c2d      	cmp	r4, #45	; 0x2d
 800b74c:	d12f      	bne.n	800b7ae <_strtol_l.constprop.0+0x92>
 800b74e:	2601      	movs	r6, #1
 800b750:	782c      	ldrb	r4, [r5, #0]
 800b752:	1c85      	adds	r5, r0, #2
 800b754:	2b00      	cmp	r3, #0
 800b756:	d057      	beq.n	800b808 <_strtol_l.constprop.0+0xec>
 800b758:	2b10      	cmp	r3, #16
 800b75a:	d109      	bne.n	800b770 <_strtol_l.constprop.0+0x54>
 800b75c:	2c30      	cmp	r4, #48	; 0x30
 800b75e:	d107      	bne.n	800b770 <_strtol_l.constprop.0+0x54>
 800b760:	7828      	ldrb	r0, [r5, #0]
 800b762:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b766:	2858      	cmp	r0, #88	; 0x58
 800b768:	d149      	bne.n	800b7fe <_strtol_l.constprop.0+0xe2>
 800b76a:	2310      	movs	r3, #16
 800b76c:	786c      	ldrb	r4, [r5, #1]
 800b76e:	3502      	adds	r5, #2
 800b770:	2700      	movs	r7, #0
 800b772:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800b776:	f10e 3eff 	add.w	lr, lr, #4294967295
 800b77a:	fbbe f9f3 	udiv	r9, lr, r3
 800b77e:	4638      	mov	r0, r7
 800b780:	fb03 ea19 	mls	sl, r3, r9, lr
 800b784:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b788:	f1bc 0f09 	cmp.w	ip, #9
 800b78c:	d814      	bhi.n	800b7b8 <_strtol_l.constprop.0+0x9c>
 800b78e:	4664      	mov	r4, ip
 800b790:	42a3      	cmp	r3, r4
 800b792:	dd22      	ble.n	800b7da <_strtol_l.constprop.0+0xbe>
 800b794:	2f00      	cmp	r7, #0
 800b796:	db1d      	blt.n	800b7d4 <_strtol_l.constprop.0+0xb8>
 800b798:	4581      	cmp	r9, r0
 800b79a:	d31b      	bcc.n	800b7d4 <_strtol_l.constprop.0+0xb8>
 800b79c:	d101      	bne.n	800b7a2 <_strtol_l.constprop.0+0x86>
 800b79e:	45a2      	cmp	sl, r4
 800b7a0:	db18      	blt.n	800b7d4 <_strtol_l.constprop.0+0xb8>
 800b7a2:	2701      	movs	r7, #1
 800b7a4:	fb00 4003 	mla	r0, r0, r3, r4
 800b7a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b7ac:	e7ea      	b.n	800b784 <_strtol_l.constprop.0+0x68>
 800b7ae:	2c2b      	cmp	r4, #43	; 0x2b
 800b7b0:	bf04      	itt	eq
 800b7b2:	782c      	ldrbeq	r4, [r5, #0]
 800b7b4:	1c85      	addeq	r5, r0, #2
 800b7b6:	e7cd      	b.n	800b754 <_strtol_l.constprop.0+0x38>
 800b7b8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b7bc:	f1bc 0f19 	cmp.w	ip, #25
 800b7c0:	d801      	bhi.n	800b7c6 <_strtol_l.constprop.0+0xaa>
 800b7c2:	3c37      	subs	r4, #55	; 0x37
 800b7c4:	e7e4      	b.n	800b790 <_strtol_l.constprop.0+0x74>
 800b7c6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b7ca:	f1bc 0f19 	cmp.w	ip, #25
 800b7ce:	d804      	bhi.n	800b7da <_strtol_l.constprop.0+0xbe>
 800b7d0:	3c57      	subs	r4, #87	; 0x57
 800b7d2:	e7dd      	b.n	800b790 <_strtol_l.constprop.0+0x74>
 800b7d4:	f04f 37ff 	mov.w	r7, #4294967295
 800b7d8:	e7e6      	b.n	800b7a8 <_strtol_l.constprop.0+0x8c>
 800b7da:	2f00      	cmp	r7, #0
 800b7dc:	da07      	bge.n	800b7ee <_strtol_l.constprop.0+0xd2>
 800b7de:	2322      	movs	r3, #34	; 0x22
 800b7e0:	4670      	mov	r0, lr
 800b7e2:	f8c8 3000 	str.w	r3, [r8]
 800b7e6:	2a00      	cmp	r2, #0
 800b7e8:	d0a4      	beq.n	800b734 <_strtol_l.constprop.0+0x18>
 800b7ea:	1e69      	subs	r1, r5, #1
 800b7ec:	e005      	b.n	800b7fa <_strtol_l.constprop.0+0xde>
 800b7ee:	b106      	cbz	r6, 800b7f2 <_strtol_l.constprop.0+0xd6>
 800b7f0:	4240      	negs	r0, r0
 800b7f2:	2a00      	cmp	r2, #0
 800b7f4:	d09e      	beq.n	800b734 <_strtol_l.constprop.0+0x18>
 800b7f6:	2f00      	cmp	r7, #0
 800b7f8:	d1f7      	bne.n	800b7ea <_strtol_l.constprop.0+0xce>
 800b7fa:	6011      	str	r1, [r2, #0]
 800b7fc:	e79a      	b.n	800b734 <_strtol_l.constprop.0+0x18>
 800b7fe:	2430      	movs	r4, #48	; 0x30
 800b800:	2b00      	cmp	r3, #0
 800b802:	d1b5      	bne.n	800b770 <_strtol_l.constprop.0+0x54>
 800b804:	2308      	movs	r3, #8
 800b806:	e7b3      	b.n	800b770 <_strtol_l.constprop.0+0x54>
 800b808:	2c30      	cmp	r4, #48	; 0x30
 800b80a:	d0a9      	beq.n	800b760 <_strtol_l.constprop.0+0x44>
 800b80c:	230a      	movs	r3, #10
 800b80e:	e7af      	b.n	800b770 <_strtol_l.constprop.0+0x54>
 800b810:	0800e779 	.word	0x0800e779

0800b814 <_strtol_r>:
 800b814:	f7ff bf82 	b.w	800b71c <_strtol_l.constprop.0>

0800b818 <quorem>:
 800b818:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b81c:	6903      	ldr	r3, [r0, #16]
 800b81e:	690c      	ldr	r4, [r1, #16]
 800b820:	4607      	mov	r7, r0
 800b822:	42a3      	cmp	r3, r4
 800b824:	f2c0 8082 	blt.w	800b92c <quorem+0x114>
 800b828:	3c01      	subs	r4, #1
 800b82a:	f100 0514 	add.w	r5, r0, #20
 800b82e:	f101 0814 	add.w	r8, r1, #20
 800b832:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b836:	9301      	str	r3, [sp, #4]
 800b838:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b83c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b840:	3301      	adds	r3, #1
 800b842:	429a      	cmp	r2, r3
 800b844:	fbb2 f6f3 	udiv	r6, r2, r3
 800b848:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b84c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b850:	d331      	bcc.n	800b8b6 <quorem+0x9e>
 800b852:	f04f 0e00 	mov.w	lr, #0
 800b856:	4640      	mov	r0, r8
 800b858:	46ac      	mov	ip, r5
 800b85a:	46f2      	mov	sl, lr
 800b85c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b860:	b293      	uxth	r3, r2
 800b862:	fb06 e303 	mla	r3, r6, r3, lr
 800b866:	0c12      	lsrs	r2, r2, #16
 800b868:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	fb06 e202 	mla	r2, r6, r2, lr
 800b872:	ebaa 0303 	sub.w	r3, sl, r3
 800b876:	f8dc a000 	ldr.w	sl, [ip]
 800b87a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b87e:	fa1f fa8a 	uxth.w	sl, sl
 800b882:	4453      	add	r3, sl
 800b884:	f8dc a000 	ldr.w	sl, [ip]
 800b888:	b292      	uxth	r2, r2
 800b88a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b88e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b892:	b29b      	uxth	r3, r3
 800b894:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b898:	4581      	cmp	r9, r0
 800b89a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b89e:	f84c 3b04 	str.w	r3, [ip], #4
 800b8a2:	d2db      	bcs.n	800b85c <quorem+0x44>
 800b8a4:	f855 300b 	ldr.w	r3, [r5, fp]
 800b8a8:	b92b      	cbnz	r3, 800b8b6 <quorem+0x9e>
 800b8aa:	9b01      	ldr	r3, [sp, #4]
 800b8ac:	3b04      	subs	r3, #4
 800b8ae:	429d      	cmp	r5, r3
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	d32f      	bcc.n	800b914 <quorem+0xfc>
 800b8b4:	613c      	str	r4, [r7, #16]
 800b8b6:	4638      	mov	r0, r7
 800b8b8:	f001 fc90 	bl	800d1dc <__mcmp>
 800b8bc:	2800      	cmp	r0, #0
 800b8be:	db25      	blt.n	800b90c <quorem+0xf4>
 800b8c0:	4628      	mov	r0, r5
 800b8c2:	f04f 0c00 	mov.w	ip, #0
 800b8c6:	3601      	adds	r6, #1
 800b8c8:	f858 1b04 	ldr.w	r1, [r8], #4
 800b8cc:	f8d0 e000 	ldr.w	lr, [r0]
 800b8d0:	b28b      	uxth	r3, r1
 800b8d2:	ebac 0303 	sub.w	r3, ip, r3
 800b8d6:	fa1f f28e 	uxth.w	r2, lr
 800b8da:	4413      	add	r3, r2
 800b8dc:	0c0a      	lsrs	r2, r1, #16
 800b8de:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b8e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8ec:	45c1      	cmp	r9, r8
 800b8ee:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b8f2:	f840 3b04 	str.w	r3, [r0], #4
 800b8f6:	d2e7      	bcs.n	800b8c8 <quorem+0xb0>
 800b8f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b8fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b900:	b922      	cbnz	r2, 800b90c <quorem+0xf4>
 800b902:	3b04      	subs	r3, #4
 800b904:	429d      	cmp	r5, r3
 800b906:	461a      	mov	r2, r3
 800b908:	d30a      	bcc.n	800b920 <quorem+0x108>
 800b90a:	613c      	str	r4, [r7, #16]
 800b90c:	4630      	mov	r0, r6
 800b90e:	b003      	add	sp, #12
 800b910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b914:	6812      	ldr	r2, [r2, #0]
 800b916:	3b04      	subs	r3, #4
 800b918:	2a00      	cmp	r2, #0
 800b91a:	d1cb      	bne.n	800b8b4 <quorem+0x9c>
 800b91c:	3c01      	subs	r4, #1
 800b91e:	e7c6      	b.n	800b8ae <quorem+0x96>
 800b920:	6812      	ldr	r2, [r2, #0]
 800b922:	3b04      	subs	r3, #4
 800b924:	2a00      	cmp	r2, #0
 800b926:	d1f0      	bne.n	800b90a <quorem+0xf2>
 800b928:	3c01      	subs	r4, #1
 800b92a:	e7eb      	b.n	800b904 <quorem+0xec>
 800b92c:	2000      	movs	r0, #0
 800b92e:	e7ee      	b.n	800b90e <quorem+0xf6>

0800b930 <_dtoa_r>:
 800b930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b934:	4616      	mov	r6, r2
 800b936:	461f      	mov	r7, r3
 800b938:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b93a:	b099      	sub	sp, #100	; 0x64
 800b93c:	4605      	mov	r5, r0
 800b93e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b942:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b946:	b974      	cbnz	r4, 800b966 <_dtoa_r+0x36>
 800b948:	2010      	movs	r0, #16
 800b94a:	f001 f949 	bl	800cbe0 <malloc>
 800b94e:	4602      	mov	r2, r0
 800b950:	6268      	str	r0, [r5, #36]	; 0x24
 800b952:	b920      	cbnz	r0, 800b95e <_dtoa_r+0x2e>
 800b954:	21ea      	movs	r1, #234	; 0xea
 800b956:	4ba8      	ldr	r3, [pc, #672]	; (800bbf8 <_dtoa_r+0x2c8>)
 800b958:	48a8      	ldr	r0, [pc, #672]	; (800bbfc <_dtoa_r+0x2cc>)
 800b95a:	f002 f8b3 	bl	800dac4 <__assert_func>
 800b95e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b962:	6004      	str	r4, [r0, #0]
 800b964:	60c4      	str	r4, [r0, #12]
 800b966:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b968:	6819      	ldr	r1, [r3, #0]
 800b96a:	b151      	cbz	r1, 800b982 <_dtoa_r+0x52>
 800b96c:	685a      	ldr	r2, [r3, #4]
 800b96e:	2301      	movs	r3, #1
 800b970:	4093      	lsls	r3, r2
 800b972:	604a      	str	r2, [r1, #4]
 800b974:	608b      	str	r3, [r1, #8]
 800b976:	4628      	mov	r0, r5
 800b978:	f001 f9a8 	bl	800cccc <_Bfree>
 800b97c:	2200      	movs	r2, #0
 800b97e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b980:	601a      	str	r2, [r3, #0]
 800b982:	1e3b      	subs	r3, r7, #0
 800b984:	bfaf      	iteee	ge
 800b986:	2300      	movge	r3, #0
 800b988:	2201      	movlt	r2, #1
 800b98a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b98e:	9305      	strlt	r3, [sp, #20]
 800b990:	bfa8      	it	ge
 800b992:	f8c8 3000 	strge.w	r3, [r8]
 800b996:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b99a:	4b99      	ldr	r3, [pc, #612]	; (800bc00 <_dtoa_r+0x2d0>)
 800b99c:	bfb8      	it	lt
 800b99e:	f8c8 2000 	strlt.w	r2, [r8]
 800b9a2:	ea33 0309 	bics.w	r3, r3, r9
 800b9a6:	d119      	bne.n	800b9dc <_dtoa_r+0xac>
 800b9a8:	f242 730f 	movw	r3, #9999	; 0x270f
 800b9ac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b9ae:	6013      	str	r3, [r2, #0]
 800b9b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b9b4:	4333      	orrs	r3, r6
 800b9b6:	f000 857f 	beq.w	800c4b8 <_dtoa_r+0xb88>
 800b9ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b9bc:	b953      	cbnz	r3, 800b9d4 <_dtoa_r+0xa4>
 800b9be:	4b91      	ldr	r3, [pc, #580]	; (800bc04 <_dtoa_r+0x2d4>)
 800b9c0:	e022      	b.n	800ba08 <_dtoa_r+0xd8>
 800b9c2:	4b91      	ldr	r3, [pc, #580]	; (800bc08 <_dtoa_r+0x2d8>)
 800b9c4:	9303      	str	r3, [sp, #12]
 800b9c6:	3308      	adds	r3, #8
 800b9c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b9ca:	6013      	str	r3, [r2, #0]
 800b9cc:	9803      	ldr	r0, [sp, #12]
 800b9ce:	b019      	add	sp, #100	; 0x64
 800b9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9d4:	4b8b      	ldr	r3, [pc, #556]	; (800bc04 <_dtoa_r+0x2d4>)
 800b9d6:	9303      	str	r3, [sp, #12]
 800b9d8:	3303      	adds	r3, #3
 800b9da:	e7f5      	b.n	800b9c8 <_dtoa_r+0x98>
 800b9dc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b9e0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b9e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	f7f4 ffdc 	bl	80009a8 <__aeabi_dcmpeq>
 800b9f0:	4680      	mov	r8, r0
 800b9f2:	b158      	cbz	r0, 800ba0c <_dtoa_r+0xdc>
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b9f8:	6013      	str	r3, [r2, #0]
 800b9fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	f000 8558 	beq.w	800c4b2 <_dtoa_r+0xb82>
 800ba02:	4882      	ldr	r0, [pc, #520]	; (800bc0c <_dtoa_r+0x2dc>)
 800ba04:	6018      	str	r0, [r3, #0]
 800ba06:	1e43      	subs	r3, r0, #1
 800ba08:	9303      	str	r3, [sp, #12]
 800ba0a:	e7df      	b.n	800b9cc <_dtoa_r+0x9c>
 800ba0c:	ab16      	add	r3, sp, #88	; 0x58
 800ba0e:	9301      	str	r3, [sp, #4]
 800ba10:	ab17      	add	r3, sp, #92	; 0x5c
 800ba12:	9300      	str	r3, [sp, #0]
 800ba14:	4628      	mov	r0, r5
 800ba16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ba1a:	f001 fd01 	bl	800d420 <__d2b>
 800ba1e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ba22:	4683      	mov	fp, r0
 800ba24:	2c00      	cmp	r4, #0
 800ba26:	d07f      	beq.n	800bb28 <_dtoa_r+0x1f8>
 800ba28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ba2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba2e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ba32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba36:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800ba3a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800ba3e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800ba42:	2200      	movs	r2, #0
 800ba44:	4b72      	ldr	r3, [pc, #456]	; (800bc10 <_dtoa_r+0x2e0>)
 800ba46:	f7f4 fb8f 	bl	8000168 <__aeabi_dsub>
 800ba4a:	a365      	add	r3, pc, #404	; (adr r3, 800bbe0 <_dtoa_r+0x2b0>)
 800ba4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba50:	f7f4 fd42 	bl	80004d8 <__aeabi_dmul>
 800ba54:	a364      	add	r3, pc, #400	; (adr r3, 800bbe8 <_dtoa_r+0x2b8>)
 800ba56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5a:	f7f4 fb87 	bl	800016c <__adddf3>
 800ba5e:	4606      	mov	r6, r0
 800ba60:	4620      	mov	r0, r4
 800ba62:	460f      	mov	r7, r1
 800ba64:	f7f4 fcce 	bl	8000404 <__aeabi_i2d>
 800ba68:	a361      	add	r3, pc, #388	; (adr r3, 800bbf0 <_dtoa_r+0x2c0>)
 800ba6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6e:	f7f4 fd33 	bl	80004d8 <__aeabi_dmul>
 800ba72:	4602      	mov	r2, r0
 800ba74:	460b      	mov	r3, r1
 800ba76:	4630      	mov	r0, r6
 800ba78:	4639      	mov	r1, r7
 800ba7a:	f7f4 fb77 	bl	800016c <__adddf3>
 800ba7e:	4606      	mov	r6, r0
 800ba80:	460f      	mov	r7, r1
 800ba82:	f7f4 ffd9 	bl	8000a38 <__aeabi_d2iz>
 800ba86:	2200      	movs	r2, #0
 800ba88:	4682      	mov	sl, r0
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	4630      	mov	r0, r6
 800ba8e:	4639      	mov	r1, r7
 800ba90:	f7f4 ff94 	bl	80009bc <__aeabi_dcmplt>
 800ba94:	b148      	cbz	r0, 800baaa <_dtoa_r+0x17a>
 800ba96:	4650      	mov	r0, sl
 800ba98:	f7f4 fcb4 	bl	8000404 <__aeabi_i2d>
 800ba9c:	4632      	mov	r2, r6
 800ba9e:	463b      	mov	r3, r7
 800baa0:	f7f4 ff82 	bl	80009a8 <__aeabi_dcmpeq>
 800baa4:	b908      	cbnz	r0, 800baaa <_dtoa_r+0x17a>
 800baa6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800baaa:	f1ba 0f16 	cmp.w	sl, #22
 800baae:	d858      	bhi.n	800bb62 <_dtoa_r+0x232>
 800bab0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bab4:	4b57      	ldr	r3, [pc, #348]	; (800bc14 <_dtoa_r+0x2e4>)
 800bab6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800baba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800babe:	f7f4 ff7d 	bl	80009bc <__aeabi_dcmplt>
 800bac2:	2800      	cmp	r0, #0
 800bac4:	d04f      	beq.n	800bb66 <_dtoa_r+0x236>
 800bac6:	2300      	movs	r3, #0
 800bac8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bacc:	930f      	str	r3, [sp, #60]	; 0x3c
 800bace:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bad0:	1b1c      	subs	r4, r3, r4
 800bad2:	1e63      	subs	r3, r4, #1
 800bad4:	9309      	str	r3, [sp, #36]	; 0x24
 800bad6:	bf49      	itett	mi
 800bad8:	f1c4 0301 	rsbmi	r3, r4, #1
 800badc:	2300      	movpl	r3, #0
 800bade:	9306      	strmi	r3, [sp, #24]
 800bae0:	2300      	movmi	r3, #0
 800bae2:	bf54      	ite	pl
 800bae4:	9306      	strpl	r3, [sp, #24]
 800bae6:	9309      	strmi	r3, [sp, #36]	; 0x24
 800bae8:	f1ba 0f00 	cmp.w	sl, #0
 800baec:	db3d      	blt.n	800bb6a <_dtoa_r+0x23a>
 800baee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baf0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800baf4:	4453      	add	r3, sl
 800baf6:	9309      	str	r3, [sp, #36]	; 0x24
 800baf8:	2300      	movs	r3, #0
 800bafa:	930a      	str	r3, [sp, #40]	; 0x28
 800bafc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bafe:	2b09      	cmp	r3, #9
 800bb00:	f200 808c 	bhi.w	800bc1c <_dtoa_r+0x2ec>
 800bb04:	2b05      	cmp	r3, #5
 800bb06:	bfc4      	itt	gt
 800bb08:	3b04      	subgt	r3, #4
 800bb0a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800bb0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bb0e:	bfc8      	it	gt
 800bb10:	2400      	movgt	r4, #0
 800bb12:	f1a3 0302 	sub.w	r3, r3, #2
 800bb16:	bfd8      	it	le
 800bb18:	2401      	movle	r4, #1
 800bb1a:	2b03      	cmp	r3, #3
 800bb1c:	f200 808a 	bhi.w	800bc34 <_dtoa_r+0x304>
 800bb20:	e8df f003 	tbb	[pc, r3]
 800bb24:	5b4d4f2d 	.word	0x5b4d4f2d
 800bb28:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800bb2c:	441c      	add	r4, r3
 800bb2e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800bb32:	2b20      	cmp	r3, #32
 800bb34:	bfc3      	ittte	gt
 800bb36:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bb3a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800bb3e:	fa09 f303 	lslgt.w	r3, r9, r3
 800bb42:	f1c3 0320 	rsble	r3, r3, #32
 800bb46:	bfc6      	itte	gt
 800bb48:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bb4c:	4318      	orrgt	r0, r3
 800bb4e:	fa06 f003 	lslle.w	r0, r6, r3
 800bb52:	f7f4 fc47 	bl	80003e4 <__aeabi_ui2d>
 800bb56:	2301      	movs	r3, #1
 800bb58:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800bb5c:	3c01      	subs	r4, #1
 800bb5e:	9313      	str	r3, [sp, #76]	; 0x4c
 800bb60:	e76f      	b.n	800ba42 <_dtoa_r+0x112>
 800bb62:	2301      	movs	r3, #1
 800bb64:	e7b2      	b.n	800bacc <_dtoa_r+0x19c>
 800bb66:	900f      	str	r0, [sp, #60]	; 0x3c
 800bb68:	e7b1      	b.n	800bace <_dtoa_r+0x19e>
 800bb6a:	9b06      	ldr	r3, [sp, #24]
 800bb6c:	eba3 030a 	sub.w	r3, r3, sl
 800bb70:	9306      	str	r3, [sp, #24]
 800bb72:	f1ca 0300 	rsb	r3, sl, #0
 800bb76:	930a      	str	r3, [sp, #40]	; 0x28
 800bb78:	2300      	movs	r3, #0
 800bb7a:	930e      	str	r3, [sp, #56]	; 0x38
 800bb7c:	e7be      	b.n	800bafc <_dtoa_r+0x1cc>
 800bb7e:	2300      	movs	r3, #0
 800bb80:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	dc58      	bgt.n	800bc3a <_dtoa_r+0x30a>
 800bb88:	f04f 0901 	mov.w	r9, #1
 800bb8c:	464b      	mov	r3, r9
 800bb8e:	f8cd 9020 	str.w	r9, [sp, #32]
 800bb92:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800bb96:	2200      	movs	r2, #0
 800bb98:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800bb9a:	6042      	str	r2, [r0, #4]
 800bb9c:	2204      	movs	r2, #4
 800bb9e:	f102 0614 	add.w	r6, r2, #20
 800bba2:	429e      	cmp	r6, r3
 800bba4:	6841      	ldr	r1, [r0, #4]
 800bba6:	d94e      	bls.n	800bc46 <_dtoa_r+0x316>
 800bba8:	4628      	mov	r0, r5
 800bbaa:	f001 f84f 	bl	800cc4c <_Balloc>
 800bbae:	9003      	str	r0, [sp, #12]
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	d14c      	bne.n	800bc4e <_dtoa_r+0x31e>
 800bbb4:	4602      	mov	r2, r0
 800bbb6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bbba:	4b17      	ldr	r3, [pc, #92]	; (800bc18 <_dtoa_r+0x2e8>)
 800bbbc:	e6cc      	b.n	800b958 <_dtoa_r+0x28>
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	e7de      	b.n	800bb80 <_dtoa_r+0x250>
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	930b      	str	r3, [sp, #44]	; 0x2c
 800bbc6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bbc8:	eb0a 0903 	add.w	r9, sl, r3
 800bbcc:	f109 0301 	add.w	r3, r9, #1
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	9308      	str	r3, [sp, #32]
 800bbd4:	bfb8      	it	lt
 800bbd6:	2301      	movlt	r3, #1
 800bbd8:	e7dd      	b.n	800bb96 <_dtoa_r+0x266>
 800bbda:	2301      	movs	r3, #1
 800bbdc:	e7f2      	b.n	800bbc4 <_dtoa_r+0x294>
 800bbde:	bf00      	nop
 800bbe0:	636f4361 	.word	0x636f4361
 800bbe4:	3fd287a7 	.word	0x3fd287a7
 800bbe8:	8b60c8b3 	.word	0x8b60c8b3
 800bbec:	3fc68a28 	.word	0x3fc68a28
 800bbf0:	509f79fb 	.word	0x509f79fb
 800bbf4:	3fd34413 	.word	0x3fd34413
 800bbf8:	0800e886 	.word	0x0800e886
 800bbfc:	0800e89d 	.word	0x0800e89d
 800bc00:	7ff00000 	.word	0x7ff00000
 800bc04:	0800e882 	.word	0x0800e882
 800bc08:	0800e879 	.word	0x0800e879
 800bc0c:	0800e6f9 	.word	0x0800e6f9
 800bc10:	3ff80000 	.word	0x3ff80000
 800bc14:	0800ea08 	.word	0x0800ea08
 800bc18:	0800e8f8 	.word	0x0800e8f8
 800bc1c:	2401      	movs	r4, #1
 800bc1e:	2300      	movs	r3, #0
 800bc20:	940b      	str	r4, [sp, #44]	; 0x2c
 800bc22:	9322      	str	r3, [sp, #136]	; 0x88
 800bc24:	f04f 39ff 	mov.w	r9, #4294967295
 800bc28:	2200      	movs	r2, #0
 800bc2a:	2312      	movs	r3, #18
 800bc2c:	f8cd 9020 	str.w	r9, [sp, #32]
 800bc30:	9223      	str	r2, [sp, #140]	; 0x8c
 800bc32:	e7b0      	b.n	800bb96 <_dtoa_r+0x266>
 800bc34:	2301      	movs	r3, #1
 800bc36:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc38:	e7f4      	b.n	800bc24 <_dtoa_r+0x2f4>
 800bc3a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800bc3e:	464b      	mov	r3, r9
 800bc40:	f8cd 9020 	str.w	r9, [sp, #32]
 800bc44:	e7a7      	b.n	800bb96 <_dtoa_r+0x266>
 800bc46:	3101      	adds	r1, #1
 800bc48:	6041      	str	r1, [r0, #4]
 800bc4a:	0052      	lsls	r2, r2, #1
 800bc4c:	e7a7      	b.n	800bb9e <_dtoa_r+0x26e>
 800bc4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bc50:	9a03      	ldr	r2, [sp, #12]
 800bc52:	601a      	str	r2, [r3, #0]
 800bc54:	9b08      	ldr	r3, [sp, #32]
 800bc56:	2b0e      	cmp	r3, #14
 800bc58:	f200 80a8 	bhi.w	800bdac <_dtoa_r+0x47c>
 800bc5c:	2c00      	cmp	r4, #0
 800bc5e:	f000 80a5 	beq.w	800bdac <_dtoa_r+0x47c>
 800bc62:	f1ba 0f00 	cmp.w	sl, #0
 800bc66:	dd34      	ble.n	800bcd2 <_dtoa_r+0x3a2>
 800bc68:	4a9a      	ldr	r2, [pc, #616]	; (800bed4 <_dtoa_r+0x5a4>)
 800bc6a:	f00a 030f 	and.w	r3, sl, #15
 800bc6e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bc72:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800bc76:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bc7a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bc7e:	ea4f 142a 	mov.w	r4, sl, asr #4
 800bc82:	d016      	beq.n	800bcb2 <_dtoa_r+0x382>
 800bc84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bc88:	4b93      	ldr	r3, [pc, #588]	; (800bed8 <_dtoa_r+0x5a8>)
 800bc8a:	2703      	movs	r7, #3
 800bc8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bc90:	f7f4 fd4c 	bl	800072c <__aeabi_ddiv>
 800bc94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc98:	f004 040f 	and.w	r4, r4, #15
 800bc9c:	4e8e      	ldr	r6, [pc, #568]	; (800bed8 <_dtoa_r+0x5a8>)
 800bc9e:	b954      	cbnz	r4, 800bcb6 <_dtoa_r+0x386>
 800bca0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bca4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bca8:	f7f4 fd40 	bl	800072c <__aeabi_ddiv>
 800bcac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bcb0:	e029      	b.n	800bd06 <_dtoa_r+0x3d6>
 800bcb2:	2702      	movs	r7, #2
 800bcb4:	e7f2      	b.n	800bc9c <_dtoa_r+0x36c>
 800bcb6:	07e1      	lsls	r1, r4, #31
 800bcb8:	d508      	bpl.n	800bccc <_dtoa_r+0x39c>
 800bcba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bcbe:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bcc2:	f7f4 fc09 	bl	80004d8 <__aeabi_dmul>
 800bcc6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bcca:	3701      	adds	r7, #1
 800bccc:	1064      	asrs	r4, r4, #1
 800bcce:	3608      	adds	r6, #8
 800bcd0:	e7e5      	b.n	800bc9e <_dtoa_r+0x36e>
 800bcd2:	f000 80a5 	beq.w	800be20 <_dtoa_r+0x4f0>
 800bcd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bcda:	f1ca 0400 	rsb	r4, sl, #0
 800bcde:	4b7d      	ldr	r3, [pc, #500]	; (800bed4 <_dtoa_r+0x5a4>)
 800bce0:	f004 020f 	and.w	r2, r4, #15
 800bce4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcec:	f7f4 fbf4 	bl	80004d8 <__aeabi_dmul>
 800bcf0:	2702      	movs	r7, #2
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bcf8:	4e77      	ldr	r6, [pc, #476]	; (800bed8 <_dtoa_r+0x5a8>)
 800bcfa:	1124      	asrs	r4, r4, #4
 800bcfc:	2c00      	cmp	r4, #0
 800bcfe:	f040 8084 	bne.w	800be0a <_dtoa_r+0x4da>
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d1d2      	bne.n	800bcac <_dtoa_r+0x37c>
 800bd06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	f000 808b 	beq.w	800be24 <_dtoa_r+0x4f4>
 800bd0e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bd12:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bd16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	4b6f      	ldr	r3, [pc, #444]	; (800bedc <_dtoa_r+0x5ac>)
 800bd1e:	f7f4 fe4d 	bl	80009bc <__aeabi_dcmplt>
 800bd22:	2800      	cmp	r0, #0
 800bd24:	d07e      	beq.n	800be24 <_dtoa_r+0x4f4>
 800bd26:	9b08      	ldr	r3, [sp, #32]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d07b      	beq.n	800be24 <_dtoa_r+0x4f4>
 800bd2c:	f1b9 0f00 	cmp.w	r9, #0
 800bd30:	dd38      	ble.n	800bda4 <_dtoa_r+0x474>
 800bd32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bd36:	2200      	movs	r2, #0
 800bd38:	4b69      	ldr	r3, [pc, #420]	; (800bee0 <_dtoa_r+0x5b0>)
 800bd3a:	f7f4 fbcd 	bl	80004d8 <__aeabi_dmul>
 800bd3e:	464c      	mov	r4, r9
 800bd40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd44:	f10a 38ff 	add.w	r8, sl, #4294967295
 800bd48:	3701      	adds	r7, #1
 800bd4a:	4638      	mov	r0, r7
 800bd4c:	f7f4 fb5a 	bl	8000404 <__aeabi_i2d>
 800bd50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd54:	f7f4 fbc0 	bl	80004d8 <__aeabi_dmul>
 800bd58:	2200      	movs	r2, #0
 800bd5a:	4b62      	ldr	r3, [pc, #392]	; (800bee4 <_dtoa_r+0x5b4>)
 800bd5c:	f7f4 fa06 	bl	800016c <__adddf3>
 800bd60:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bd64:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bd68:	9611      	str	r6, [sp, #68]	; 0x44
 800bd6a:	2c00      	cmp	r4, #0
 800bd6c:	d15d      	bne.n	800be2a <_dtoa_r+0x4fa>
 800bd6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd72:	2200      	movs	r2, #0
 800bd74:	4b5c      	ldr	r3, [pc, #368]	; (800bee8 <_dtoa_r+0x5b8>)
 800bd76:	f7f4 f9f7 	bl	8000168 <__aeabi_dsub>
 800bd7a:	4602      	mov	r2, r0
 800bd7c:	460b      	mov	r3, r1
 800bd7e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bd82:	4633      	mov	r3, r6
 800bd84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bd86:	f7f4 fe37 	bl	80009f8 <__aeabi_dcmpgt>
 800bd8a:	2800      	cmp	r0, #0
 800bd8c:	f040 829c 	bne.w	800c2c8 <_dtoa_r+0x998>
 800bd90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bd96:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bd9a:	f7f4 fe0f 	bl	80009bc <__aeabi_dcmplt>
 800bd9e:	2800      	cmp	r0, #0
 800bda0:	f040 8290 	bne.w	800c2c4 <_dtoa_r+0x994>
 800bda4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800bda8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bdac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	f2c0 8152 	blt.w	800c058 <_dtoa_r+0x728>
 800bdb4:	f1ba 0f0e 	cmp.w	sl, #14
 800bdb8:	f300 814e 	bgt.w	800c058 <_dtoa_r+0x728>
 800bdbc:	4b45      	ldr	r3, [pc, #276]	; (800bed4 <_dtoa_r+0x5a4>)
 800bdbe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bdc2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bdc6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800bdca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	f280 80db 	bge.w	800bf88 <_dtoa_r+0x658>
 800bdd2:	9b08      	ldr	r3, [sp, #32]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	f300 80d7 	bgt.w	800bf88 <_dtoa_r+0x658>
 800bdda:	f040 8272 	bne.w	800c2c2 <_dtoa_r+0x992>
 800bdde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bde2:	2200      	movs	r2, #0
 800bde4:	4b40      	ldr	r3, [pc, #256]	; (800bee8 <_dtoa_r+0x5b8>)
 800bde6:	f7f4 fb77 	bl	80004d8 <__aeabi_dmul>
 800bdea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdee:	f7f4 fdf9 	bl	80009e4 <__aeabi_dcmpge>
 800bdf2:	9c08      	ldr	r4, [sp, #32]
 800bdf4:	4626      	mov	r6, r4
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	f040 8248 	bne.w	800c28c <_dtoa_r+0x95c>
 800bdfc:	2331      	movs	r3, #49	; 0x31
 800bdfe:	9f03      	ldr	r7, [sp, #12]
 800be00:	f10a 0a01 	add.w	sl, sl, #1
 800be04:	f807 3b01 	strb.w	r3, [r7], #1
 800be08:	e244      	b.n	800c294 <_dtoa_r+0x964>
 800be0a:	07e2      	lsls	r2, r4, #31
 800be0c:	d505      	bpl.n	800be1a <_dtoa_r+0x4ea>
 800be0e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800be12:	f7f4 fb61 	bl	80004d8 <__aeabi_dmul>
 800be16:	2301      	movs	r3, #1
 800be18:	3701      	adds	r7, #1
 800be1a:	1064      	asrs	r4, r4, #1
 800be1c:	3608      	adds	r6, #8
 800be1e:	e76d      	b.n	800bcfc <_dtoa_r+0x3cc>
 800be20:	2702      	movs	r7, #2
 800be22:	e770      	b.n	800bd06 <_dtoa_r+0x3d6>
 800be24:	46d0      	mov	r8, sl
 800be26:	9c08      	ldr	r4, [sp, #32]
 800be28:	e78f      	b.n	800bd4a <_dtoa_r+0x41a>
 800be2a:	9903      	ldr	r1, [sp, #12]
 800be2c:	4b29      	ldr	r3, [pc, #164]	; (800bed4 <_dtoa_r+0x5a4>)
 800be2e:	4421      	add	r1, r4
 800be30:	9112      	str	r1, [sp, #72]	; 0x48
 800be32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800be34:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800be38:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800be3c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800be40:	2900      	cmp	r1, #0
 800be42:	d055      	beq.n	800bef0 <_dtoa_r+0x5c0>
 800be44:	2000      	movs	r0, #0
 800be46:	4929      	ldr	r1, [pc, #164]	; (800beec <_dtoa_r+0x5bc>)
 800be48:	f7f4 fc70 	bl	800072c <__aeabi_ddiv>
 800be4c:	463b      	mov	r3, r7
 800be4e:	4632      	mov	r2, r6
 800be50:	f7f4 f98a 	bl	8000168 <__aeabi_dsub>
 800be54:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800be58:	9f03      	ldr	r7, [sp, #12]
 800be5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be5e:	f7f4 fdeb 	bl	8000a38 <__aeabi_d2iz>
 800be62:	4604      	mov	r4, r0
 800be64:	f7f4 face 	bl	8000404 <__aeabi_i2d>
 800be68:	4602      	mov	r2, r0
 800be6a:	460b      	mov	r3, r1
 800be6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be70:	f7f4 f97a 	bl	8000168 <__aeabi_dsub>
 800be74:	4602      	mov	r2, r0
 800be76:	460b      	mov	r3, r1
 800be78:	3430      	adds	r4, #48	; 0x30
 800be7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800be7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800be82:	f807 4b01 	strb.w	r4, [r7], #1
 800be86:	f7f4 fd99 	bl	80009bc <__aeabi_dcmplt>
 800be8a:	2800      	cmp	r0, #0
 800be8c:	d174      	bne.n	800bf78 <_dtoa_r+0x648>
 800be8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be92:	2000      	movs	r0, #0
 800be94:	4911      	ldr	r1, [pc, #68]	; (800bedc <_dtoa_r+0x5ac>)
 800be96:	f7f4 f967 	bl	8000168 <__aeabi_dsub>
 800be9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800be9e:	f7f4 fd8d 	bl	80009bc <__aeabi_dcmplt>
 800bea2:	2800      	cmp	r0, #0
 800bea4:	f040 80b7 	bne.w	800c016 <_dtoa_r+0x6e6>
 800bea8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800beaa:	429f      	cmp	r7, r3
 800beac:	f43f af7a 	beq.w	800bda4 <_dtoa_r+0x474>
 800beb0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800beb4:	2200      	movs	r2, #0
 800beb6:	4b0a      	ldr	r3, [pc, #40]	; (800bee0 <_dtoa_r+0x5b0>)
 800beb8:	f7f4 fb0e 	bl	80004d8 <__aeabi_dmul>
 800bebc:	2200      	movs	r2, #0
 800bebe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bec2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bec6:	4b06      	ldr	r3, [pc, #24]	; (800bee0 <_dtoa_r+0x5b0>)
 800bec8:	f7f4 fb06 	bl	80004d8 <__aeabi_dmul>
 800becc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bed0:	e7c3      	b.n	800be5a <_dtoa_r+0x52a>
 800bed2:	bf00      	nop
 800bed4:	0800ea08 	.word	0x0800ea08
 800bed8:	0800e9e0 	.word	0x0800e9e0
 800bedc:	3ff00000 	.word	0x3ff00000
 800bee0:	40240000 	.word	0x40240000
 800bee4:	401c0000 	.word	0x401c0000
 800bee8:	40140000 	.word	0x40140000
 800beec:	3fe00000 	.word	0x3fe00000
 800bef0:	4630      	mov	r0, r6
 800bef2:	4639      	mov	r1, r7
 800bef4:	f7f4 faf0 	bl	80004d8 <__aeabi_dmul>
 800bef8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800befa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800befe:	9c03      	ldr	r4, [sp, #12]
 800bf00:	9314      	str	r3, [sp, #80]	; 0x50
 800bf02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf06:	f7f4 fd97 	bl	8000a38 <__aeabi_d2iz>
 800bf0a:	9015      	str	r0, [sp, #84]	; 0x54
 800bf0c:	f7f4 fa7a 	bl	8000404 <__aeabi_i2d>
 800bf10:	4602      	mov	r2, r0
 800bf12:	460b      	mov	r3, r1
 800bf14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf18:	f7f4 f926 	bl	8000168 <__aeabi_dsub>
 800bf1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf1e:	4606      	mov	r6, r0
 800bf20:	3330      	adds	r3, #48	; 0x30
 800bf22:	f804 3b01 	strb.w	r3, [r4], #1
 800bf26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bf28:	460f      	mov	r7, r1
 800bf2a:	429c      	cmp	r4, r3
 800bf2c:	f04f 0200 	mov.w	r2, #0
 800bf30:	d124      	bne.n	800bf7c <_dtoa_r+0x64c>
 800bf32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bf36:	4bb0      	ldr	r3, [pc, #704]	; (800c1f8 <_dtoa_r+0x8c8>)
 800bf38:	f7f4 f918 	bl	800016c <__adddf3>
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	460b      	mov	r3, r1
 800bf40:	4630      	mov	r0, r6
 800bf42:	4639      	mov	r1, r7
 800bf44:	f7f4 fd58 	bl	80009f8 <__aeabi_dcmpgt>
 800bf48:	2800      	cmp	r0, #0
 800bf4a:	d163      	bne.n	800c014 <_dtoa_r+0x6e4>
 800bf4c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bf50:	2000      	movs	r0, #0
 800bf52:	49a9      	ldr	r1, [pc, #676]	; (800c1f8 <_dtoa_r+0x8c8>)
 800bf54:	f7f4 f908 	bl	8000168 <__aeabi_dsub>
 800bf58:	4602      	mov	r2, r0
 800bf5a:	460b      	mov	r3, r1
 800bf5c:	4630      	mov	r0, r6
 800bf5e:	4639      	mov	r1, r7
 800bf60:	f7f4 fd2c 	bl	80009bc <__aeabi_dcmplt>
 800bf64:	2800      	cmp	r0, #0
 800bf66:	f43f af1d 	beq.w	800bda4 <_dtoa_r+0x474>
 800bf6a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800bf6c:	1e7b      	subs	r3, r7, #1
 800bf6e:	9314      	str	r3, [sp, #80]	; 0x50
 800bf70:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800bf74:	2b30      	cmp	r3, #48	; 0x30
 800bf76:	d0f8      	beq.n	800bf6a <_dtoa_r+0x63a>
 800bf78:	46c2      	mov	sl, r8
 800bf7a:	e03b      	b.n	800bff4 <_dtoa_r+0x6c4>
 800bf7c:	4b9f      	ldr	r3, [pc, #636]	; (800c1fc <_dtoa_r+0x8cc>)
 800bf7e:	f7f4 faab 	bl	80004d8 <__aeabi_dmul>
 800bf82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf86:	e7bc      	b.n	800bf02 <_dtoa_r+0x5d2>
 800bf88:	9f03      	ldr	r7, [sp, #12]
 800bf8a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800bf8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf92:	4640      	mov	r0, r8
 800bf94:	4649      	mov	r1, r9
 800bf96:	f7f4 fbc9 	bl	800072c <__aeabi_ddiv>
 800bf9a:	f7f4 fd4d 	bl	8000a38 <__aeabi_d2iz>
 800bf9e:	4604      	mov	r4, r0
 800bfa0:	f7f4 fa30 	bl	8000404 <__aeabi_i2d>
 800bfa4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bfa8:	f7f4 fa96 	bl	80004d8 <__aeabi_dmul>
 800bfac:	4602      	mov	r2, r0
 800bfae:	460b      	mov	r3, r1
 800bfb0:	4640      	mov	r0, r8
 800bfb2:	4649      	mov	r1, r9
 800bfb4:	f7f4 f8d8 	bl	8000168 <__aeabi_dsub>
 800bfb8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800bfbc:	f807 6b01 	strb.w	r6, [r7], #1
 800bfc0:	9e03      	ldr	r6, [sp, #12]
 800bfc2:	f8dd c020 	ldr.w	ip, [sp, #32]
 800bfc6:	1bbe      	subs	r6, r7, r6
 800bfc8:	45b4      	cmp	ip, r6
 800bfca:	4602      	mov	r2, r0
 800bfcc:	460b      	mov	r3, r1
 800bfce:	d136      	bne.n	800c03e <_dtoa_r+0x70e>
 800bfd0:	f7f4 f8cc 	bl	800016c <__adddf3>
 800bfd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bfd8:	4680      	mov	r8, r0
 800bfda:	4689      	mov	r9, r1
 800bfdc:	f7f4 fd0c 	bl	80009f8 <__aeabi_dcmpgt>
 800bfe0:	bb58      	cbnz	r0, 800c03a <_dtoa_r+0x70a>
 800bfe2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bfe6:	4640      	mov	r0, r8
 800bfe8:	4649      	mov	r1, r9
 800bfea:	f7f4 fcdd 	bl	80009a8 <__aeabi_dcmpeq>
 800bfee:	b108      	cbz	r0, 800bff4 <_dtoa_r+0x6c4>
 800bff0:	07e1      	lsls	r1, r4, #31
 800bff2:	d422      	bmi.n	800c03a <_dtoa_r+0x70a>
 800bff4:	4628      	mov	r0, r5
 800bff6:	4659      	mov	r1, fp
 800bff8:	f000 fe68 	bl	800cccc <_Bfree>
 800bffc:	2300      	movs	r3, #0
 800bffe:	703b      	strb	r3, [r7, #0]
 800c000:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c002:	f10a 0001 	add.w	r0, sl, #1
 800c006:	6018      	str	r0, [r3, #0]
 800c008:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	f43f acde 	beq.w	800b9cc <_dtoa_r+0x9c>
 800c010:	601f      	str	r7, [r3, #0]
 800c012:	e4db      	b.n	800b9cc <_dtoa_r+0x9c>
 800c014:	4627      	mov	r7, r4
 800c016:	463b      	mov	r3, r7
 800c018:	461f      	mov	r7, r3
 800c01a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c01e:	2a39      	cmp	r2, #57	; 0x39
 800c020:	d107      	bne.n	800c032 <_dtoa_r+0x702>
 800c022:	9a03      	ldr	r2, [sp, #12]
 800c024:	429a      	cmp	r2, r3
 800c026:	d1f7      	bne.n	800c018 <_dtoa_r+0x6e8>
 800c028:	2230      	movs	r2, #48	; 0x30
 800c02a:	9903      	ldr	r1, [sp, #12]
 800c02c:	f108 0801 	add.w	r8, r8, #1
 800c030:	700a      	strb	r2, [r1, #0]
 800c032:	781a      	ldrb	r2, [r3, #0]
 800c034:	3201      	adds	r2, #1
 800c036:	701a      	strb	r2, [r3, #0]
 800c038:	e79e      	b.n	800bf78 <_dtoa_r+0x648>
 800c03a:	46d0      	mov	r8, sl
 800c03c:	e7eb      	b.n	800c016 <_dtoa_r+0x6e6>
 800c03e:	2200      	movs	r2, #0
 800c040:	4b6e      	ldr	r3, [pc, #440]	; (800c1fc <_dtoa_r+0x8cc>)
 800c042:	f7f4 fa49 	bl	80004d8 <__aeabi_dmul>
 800c046:	2200      	movs	r2, #0
 800c048:	2300      	movs	r3, #0
 800c04a:	4680      	mov	r8, r0
 800c04c:	4689      	mov	r9, r1
 800c04e:	f7f4 fcab 	bl	80009a8 <__aeabi_dcmpeq>
 800c052:	2800      	cmp	r0, #0
 800c054:	d09b      	beq.n	800bf8e <_dtoa_r+0x65e>
 800c056:	e7cd      	b.n	800bff4 <_dtoa_r+0x6c4>
 800c058:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c05a:	2a00      	cmp	r2, #0
 800c05c:	f000 80d0 	beq.w	800c200 <_dtoa_r+0x8d0>
 800c060:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c062:	2a01      	cmp	r2, #1
 800c064:	f300 80ae 	bgt.w	800c1c4 <_dtoa_r+0x894>
 800c068:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c06a:	2a00      	cmp	r2, #0
 800c06c:	f000 80a6 	beq.w	800c1bc <_dtoa_r+0x88c>
 800c070:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c074:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c076:	9f06      	ldr	r7, [sp, #24]
 800c078:	9a06      	ldr	r2, [sp, #24]
 800c07a:	2101      	movs	r1, #1
 800c07c:	441a      	add	r2, r3
 800c07e:	9206      	str	r2, [sp, #24]
 800c080:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c082:	4628      	mov	r0, r5
 800c084:	441a      	add	r2, r3
 800c086:	9209      	str	r2, [sp, #36]	; 0x24
 800c088:	f000 ff20 	bl	800cecc <__i2b>
 800c08c:	4606      	mov	r6, r0
 800c08e:	2f00      	cmp	r7, #0
 800c090:	dd0c      	ble.n	800c0ac <_dtoa_r+0x77c>
 800c092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c094:	2b00      	cmp	r3, #0
 800c096:	dd09      	ble.n	800c0ac <_dtoa_r+0x77c>
 800c098:	42bb      	cmp	r3, r7
 800c09a:	bfa8      	it	ge
 800c09c:	463b      	movge	r3, r7
 800c09e:	9a06      	ldr	r2, [sp, #24]
 800c0a0:	1aff      	subs	r7, r7, r3
 800c0a2:	1ad2      	subs	r2, r2, r3
 800c0a4:	9206      	str	r2, [sp, #24]
 800c0a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0a8:	1ad3      	subs	r3, r2, r3
 800c0aa:	9309      	str	r3, [sp, #36]	; 0x24
 800c0ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0ae:	b1f3      	cbz	r3, 800c0ee <_dtoa_r+0x7be>
 800c0b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	f000 80a8 	beq.w	800c208 <_dtoa_r+0x8d8>
 800c0b8:	2c00      	cmp	r4, #0
 800c0ba:	dd10      	ble.n	800c0de <_dtoa_r+0x7ae>
 800c0bc:	4631      	mov	r1, r6
 800c0be:	4622      	mov	r2, r4
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	f000 ffc1 	bl	800d048 <__pow5mult>
 800c0c6:	465a      	mov	r2, fp
 800c0c8:	4601      	mov	r1, r0
 800c0ca:	4606      	mov	r6, r0
 800c0cc:	4628      	mov	r0, r5
 800c0ce:	f000 ff13 	bl	800cef8 <__multiply>
 800c0d2:	4680      	mov	r8, r0
 800c0d4:	4659      	mov	r1, fp
 800c0d6:	4628      	mov	r0, r5
 800c0d8:	f000 fdf8 	bl	800cccc <_Bfree>
 800c0dc:	46c3      	mov	fp, r8
 800c0de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0e0:	1b1a      	subs	r2, r3, r4
 800c0e2:	d004      	beq.n	800c0ee <_dtoa_r+0x7be>
 800c0e4:	4659      	mov	r1, fp
 800c0e6:	4628      	mov	r0, r5
 800c0e8:	f000 ffae 	bl	800d048 <__pow5mult>
 800c0ec:	4683      	mov	fp, r0
 800c0ee:	2101      	movs	r1, #1
 800c0f0:	4628      	mov	r0, r5
 800c0f2:	f000 feeb 	bl	800cecc <__i2b>
 800c0f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c0f8:	4604      	mov	r4, r0
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	f340 8086 	ble.w	800c20c <_dtoa_r+0x8dc>
 800c100:	461a      	mov	r2, r3
 800c102:	4601      	mov	r1, r0
 800c104:	4628      	mov	r0, r5
 800c106:	f000 ff9f 	bl	800d048 <__pow5mult>
 800c10a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c10c:	4604      	mov	r4, r0
 800c10e:	2b01      	cmp	r3, #1
 800c110:	dd7f      	ble.n	800c212 <_dtoa_r+0x8e2>
 800c112:	f04f 0800 	mov.w	r8, #0
 800c116:	6923      	ldr	r3, [r4, #16]
 800c118:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c11c:	6918      	ldr	r0, [r3, #16]
 800c11e:	f000 fe87 	bl	800ce30 <__hi0bits>
 800c122:	f1c0 0020 	rsb	r0, r0, #32
 800c126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c128:	4418      	add	r0, r3
 800c12a:	f010 001f 	ands.w	r0, r0, #31
 800c12e:	f000 8092 	beq.w	800c256 <_dtoa_r+0x926>
 800c132:	f1c0 0320 	rsb	r3, r0, #32
 800c136:	2b04      	cmp	r3, #4
 800c138:	f340 808a 	ble.w	800c250 <_dtoa_r+0x920>
 800c13c:	f1c0 001c 	rsb	r0, r0, #28
 800c140:	9b06      	ldr	r3, [sp, #24]
 800c142:	4407      	add	r7, r0
 800c144:	4403      	add	r3, r0
 800c146:	9306      	str	r3, [sp, #24]
 800c148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c14a:	4403      	add	r3, r0
 800c14c:	9309      	str	r3, [sp, #36]	; 0x24
 800c14e:	9b06      	ldr	r3, [sp, #24]
 800c150:	2b00      	cmp	r3, #0
 800c152:	dd05      	ble.n	800c160 <_dtoa_r+0x830>
 800c154:	4659      	mov	r1, fp
 800c156:	461a      	mov	r2, r3
 800c158:	4628      	mov	r0, r5
 800c15a:	f000 ffcf 	bl	800d0fc <__lshift>
 800c15e:	4683      	mov	fp, r0
 800c160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c162:	2b00      	cmp	r3, #0
 800c164:	dd05      	ble.n	800c172 <_dtoa_r+0x842>
 800c166:	4621      	mov	r1, r4
 800c168:	461a      	mov	r2, r3
 800c16a:	4628      	mov	r0, r5
 800c16c:	f000 ffc6 	bl	800d0fc <__lshift>
 800c170:	4604      	mov	r4, r0
 800c172:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c174:	2b00      	cmp	r3, #0
 800c176:	d070      	beq.n	800c25a <_dtoa_r+0x92a>
 800c178:	4621      	mov	r1, r4
 800c17a:	4658      	mov	r0, fp
 800c17c:	f001 f82e 	bl	800d1dc <__mcmp>
 800c180:	2800      	cmp	r0, #0
 800c182:	da6a      	bge.n	800c25a <_dtoa_r+0x92a>
 800c184:	2300      	movs	r3, #0
 800c186:	4659      	mov	r1, fp
 800c188:	220a      	movs	r2, #10
 800c18a:	4628      	mov	r0, r5
 800c18c:	f000 fdc0 	bl	800cd10 <__multadd>
 800c190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c192:	4683      	mov	fp, r0
 800c194:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c198:	2b00      	cmp	r3, #0
 800c19a:	f000 8194 	beq.w	800c4c6 <_dtoa_r+0xb96>
 800c19e:	4631      	mov	r1, r6
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	220a      	movs	r2, #10
 800c1a4:	4628      	mov	r0, r5
 800c1a6:	f000 fdb3 	bl	800cd10 <__multadd>
 800c1aa:	f1b9 0f00 	cmp.w	r9, #0
 800c1ae:	4606      	mov	r6, r0
 800c1b0:	f300 8093 	bgt.w	800c2da <_dtoa_r+0x9aa>
 800c1b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c1b6:	2b02      	cmp	r3, #2
 800c1b8:	dc57      	bgt.n	800c26a <_dtoa_r+0x93a>
 800c1ba:	e08e      	b.n	800c2da <_dtoa_r+0x9aa>
 800c1bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c1be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c1c2:	e757      	b.n	800c074 <_dtoa_r+0x744>
 800c1c4:	9b08      	ldr	r3, [sp, #32]
 800c1c6:	1e5c      	subs	r4, r3, #1
 800c1c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1ca:	42a3      	cmp	r3, r4
 800c1cc:	bfb7      	itett	lt
 800c1ce:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c1d0:	1b1c      	subge	r4, r3, r4
 800c1d2:	1ae2      	sublt	r2, r4, r3
 800c1d4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c1d6:	bfbe      	ittt	lt
 800c1d8:	940a      	strlt	r4, [sp, #40]	; 0x28
 800c1da:	189b      	addlt	r3, r3, r2
 800c1dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c1de:	9b08      	ldr	r3, [sp, #32]
 800c1e0:	bfb8      	it	lt
 800c1e2:	2400      	movlt	r4, #0
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	bfbb      	ittet	lt
 800c1e8:	9b06      	ldrlt	r3, [sp, #24]
 800c1ea:	9a08      	ldrlt	r2, [sp, #32]
 800c1ec:	9f06      	ldrge	r7, [sp, #24]
 800c1ee:	1a9f      	sublt	r7, r3, r2
 800c1f0:	bfac      	ite	ge
 800c1f2:	9b08      	ldrge	r3, [sp, #32]
 800c1f4:	2300      	movlt	r3, #0
 800c1f6:	e73f      	b.n	800c078 <_dtoa_r+0x748>
 800c1f8:	3fe00000 	.word	0x3fe00000
 800c1fc:	40240000 	.word	0x40240000
 800c200:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c202:	9f06      	ldr	r7, [sp, #24]
 800c204:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c206:	e742      	b.n	800c08e <_dtoa_r+0x75e>
 800c208:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c20a:	e76b      	b.n	800c0e4 <_dtoa_r+0x7b4>
 800c20c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c20e:	2b01      	cmp	r3, #1
 800c210:	dc19      	bgt.n	800c246 <_dtoa_r+0x916>
 800c212:	9b04      	ldr	r3, [sp, #16]
 800c214:	b9bb      	cbnz	r3, 800c246 <_dtoa_r+0x916>
 800c216:	9b05      	ldr	r3, [sp, #20]
 800c218:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c21c:	b99b      	cbnz	r3, 800c246 <_dtoa_r+0x916>
 800c21e:	9b05      	ldr	r3, [sp, #20]
 800c220:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c224:	0d1b      	lsrs	r3, r3, #20
 800c226:	051b      	lsls	r3, r3, #20
 800c228:	b183      	cbz	r3, 800c24c <_dtoa_r+0x91c>
 800c22a:	f04f 0801 	mov.w	r8, #1
 800c22e:	9b06      	ldr	r3, [sp, #24]
 800c230:	3301      	adds	r3, #1
 800c232:	9306      	str	r3, [sp, #24]
 800c234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c236:	3301      	adds	r3, #1
 800c238:	9309      	str	r3, [sp, #36]	; 0x24
 800c23a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f47f af6a 	bne.w	800c116 <_dtoa_r+0x7e6>
 800c242:	2001      	movs	r0, #1
 800c244:	e76f      	b.n	800c126 <_dtoa_r+0x7f6>
 800c246:	f04f 0800 	mov.w	r8, #0
 800c24a:	e7f6      	b.n	800c23a <_dtoa_r+0x90a>
 800c24c:	4698      	mov	r8, r3
 800c24e:	e7f4      	b.n	800c23a <_dtoa_r+0x90a>
 800c250:	f43f af7d 	beq.w	800c14e <_dtoa_r+0x81e>
 800c254:	4618      	mov	r0, r3
 800c256:	301c      	adds	r0, #28
 800c258:	e772      	b.n	800c140 <_dtoa_r+0x810>
 800c25a:	9b08      	ldr	r3, [sp, #32]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	dc36      	bgt.n	800c2ce <_dtoa_r+0x99e>
 800c260:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c262:	2b02      	cmp	r3, #2
 800c264:	dd33      	ble.n	800c2ce <_dtoa_r+0x99e>
 800c266:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c26a:	f1b9 0f00 	cmp.w	r9, #0
 800c26e:	d10d      	bne.n	800c28c <_dtoa_r+0x95c>
 800c270:	4621      	mov	r1, r4
 800c272:	464b      	mov	r3, r9
 800c274:	2205      	movs	r2, #5
 800c276:	4628      	mov	r0, r5
 800c278:	f000 fd4a 	bl	800cd10 <__multadd>
 800c27c:	4601      	mov	r1, r0
 800c27e:	4604      	mov	r4, r0
 800c280:	4658      	mov	r0, fp
 800c282:	f000 ffab 	bl	800d1dc <__mcmp>
 800c286:	2800      	cmp	r0, #0
 800c288:	f73f adb8 	bgt.w	800bdfc <_dtoa_r+0x4cc>
 800c28c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c28e:	9f03      	ldr	r7, [sp, #12]
 800c290:	ea6f 0a03 	mvn.w	sl, r3
 800c294:	f04f 0800 	mov.w	r8, #0
 800c298:	4621      	mov	r1, r4
 800c29a:	4628      	mov	r0, r5
 800c29c:	f000 fd16 	bl	800cccc <_Bfree>
 800c2a0:	2e00      	cmp	r6, #0
 800c2a2:	f43f aea7 	beq.w	800bff4 <_dtoa_r+0x6c4>
 800c2a6:	f1b8 0f00 	cmp.w	r8, #0
 800c2aa:	d005      	beq.n	800c2b8 <_dtoa_r+0x988>
 800c2ac:	45b0      	cmp	r8, r6
 800c2ae:	d003      	beq.n	800c2b8 <_dtoa_r+0x988>
 800c2b0:	4641      	mov	r1, r8
 800c2b2:	4628      	mov	r0, r5
 800c2b4:	f000 fd0a 	bl	800cccc <_Bfree>
 800c2b8:	4631      	mov	r1, r6
 800c2ba:	4628      	mov	r0, r5
 800c2bc:	f000 fd06 	bl	800cccc <_Bfree>
 800c2c0:	e698      	b.n	800bff4 <_dtoa_r+0x6c4>
 800c2c2:	2400      	movs	r4, #0
 800c2c4:	4626      	mov	r6, r4
 800c2c6:	e7e1      	b.n	800c28c <_dtoa_r+0x95c>
 800c2c8:	46c2      	mov	sl, r8
 800c2ca:	4626      	mov	r6, r4
 800c2cc:	e596      	b.n	800bdfc <_dtoa_r+0x4cc>
 800c2ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	f000 80fd 	beq.w	800c4d4 <_dtoa_r+0xba4>
 800c2da:	2f00      	cmp	r7, #0
 800c2dc:	dd05      	ble.n	800c2ea <_dtoa_r+0x9ba>
 800c2de:	4631      	mov	r1, r6
 800c2e0:	463a      	mov	r2, r7
 800c2e2:	4628      	mov	r0, r5
 800c2e4:	f000 ff0a 	bl	800d0fc <__lshift>
 800c2e8:	4606      	mov	r6, r0
 800c2ea:	f1b8 0f00 	cmp.w	r8, #0
 800c2ee:	d05c      	beq.n	800c3aa <_dtoa_r+0xa7a>
 800c2f0:	4628      	mov	r0, r5
 800c2f2:	6871      	ldr	r1, [r6, #4]
 800c2f4:	f000 fcaa 	bl	800cc4c <_Balloc>
 800c2f8:	4607      	mov	r7, r0
 800c2fa:	b928      	cbnz	r0, 800c308 <_dtoa_r+0x9d8>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c302:	4b7f      	ldr	r3, [pc, #508]	; (800c500 <_dtoa_r+0xbd0>)
 800c304:	f7ff bb28 	b.w	800b958 <_dtoa_r+0x28>
 800c308:	6932      	ldr	r2, [r6, #16]
 800c30a:	f106 010c 	add.w	r1, r6, #12
 800c30e:	3202      	adds	r2, #2
 800c310:	0092      	lsls	r2, r2, #2
 800c312:	300c      	adds	r0, #12
 800c314:	f000 fc8c 	bl	800cc30 <memcpy>
 800c318:	2201      	movs	r2, #1
 800c31a:	4639      	mov	r1, r7
 800c31c:	4628      	mov	r0, r5
 800c31e:	f000 feed 	bl	800d0fc <__lshift>
 800c322:	46b0      	mov	r8, r6
 800c324:	4606      	mov	r6, r0
 800c326:	9b03      	ldr	r3, [sp, #12]
 800c328:	3301      	adds	r3, #1
 800c32a:	9308      	str	r3, [sp, #32]
 800c32c:	9b03      	ldr	r3, [sp, #12]
 800c32e:	444b      	add	r3, r9
 800c330:	930a      	str	r3, [sp, #40]	; 0x28
 800c332:	9b04      	ldr	r3, [sp, #16]
 800c334:	f003 0301 	and.w	r3, r3, #1
 800c338:	9309      	str	r3, [sp, #36]	; 0x24
 800c33a:	9b08      	ldr	r3, [sp, #32]
 800c33c:	4621      	mov	r1, r4
 800c33e:	3b01      	subs	r3, #1
 800c340:	4658      	mov	r0, fp
 800c342:	9304      	str	r3, [sp, #16]
 800c344:	f7ff fa68 	bl	800b818 <quorem>
 800c348:	4603      	mov	r3, r0
 800c34a:	4641      	mov	r1, r8
 800c34c:	3330      	adds	r3, #48	; 0x30
 800c34e:	9006      	str	r0, [sp, #24]
 800c350:	4658      	mov	r0, fp
 800c352:	930b      	str	r3, [sp, #44]	; 0x2c
 800c354:	f000 ff42 	bl	800d1dc <__mcmp>
 800c358:	4632      	mov	r2, r6
 800c35a:	4681      	mov	r9, r0
 800c35c:	4621      	mov	r1, r4
 800c35e:	4628      	mov	r0, r5
 800c360:	f000 ff58 	bl	800d214 <__mdiff>
 800c364:	68c2      	ldr	r2, [r0, #12]
 800c366:	4607      	mov	r7, r0
 800c368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c36a:	bb02      	cbnz	r2, 800c3ae <_dtoa_r+0xa7e>
 800c36c:	4601      	mov	r1, r0
 800c36e:	4658      	mov	r0, fp
 800c370:	f000 ff34 	bl	800d1dc <__mcmp>
 800c374:	4602      	mov	r2, r0
 800c376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c378:	4639      	mov	r1, r7
 800c37a:	4628      	mov	r0, r5
 800c37c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800c380:	f000 fca4 	bl	800cccc <_Bfree>
 800c384:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c386:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c388:	9f08      	ldr	r7, [sp, #32]
 800c38a:	ea43 0102 	orr.w	r1, r3, r2
 800c38e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c390:	430b      	orrs	r3, r1
 800c392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c394:	d10d      	bne.n	800c3b2 <_dtoa_r+0xa82>
 800c396:	2b39      	cmp	r3, #57	; 0x39
 800c398:	d029      	beq.n	800c3ee <_dtoa_r+0xabe>
 800c39a:	f1b9 0f00 	cmp.w	r9, #0
 800c39e:	dd01      	ble.n	800c3a4 <_dtoa_r+0xa74>
 800c3a0:	9b06      	ldr	r3, [sp, #24]
 800c3a2:	3331      	adds	r3, #49	; 0x31
 800c3a4:	9a04      	ldr	r2, [sp, #16]
 800c3a6:	7013      	strb	r3, [r2, #0]
 800c3a8:	e776      	b.n	800c298 <_dtoa_r+0x968>
 800c3aa:	4630      	mov	r0, r6
 800c3ac:	e7b9      	b.n	800c322 <_dtoa_r+0x9f2>
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	e7e2      	b.n	800c378 <_dtoa_r+0xa48>
 800c3b2:	f1b9 0f00 	cmp.w	r9, #0
 800c3b6:	db06      	blt.n	800c3c6 <_dtoa_r+0xa96>
 800c3b8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c3ba:	ea41 0909 	orr.w	r9, r1, r9
 800c3be:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c3c0:	ea59 0101 	orrs.w	r1, r9, r1
 800c3c4:	d120      	bne.n	800c408 <_dtoa_r+0xad8>
 800c3c6:	2a00      	cmp	r2, #0
 800c3c8:	ddec      	ble.n	800c3a4 <_dtoa_r+0xa74>
 800c3ca:	4659      	mov	r1, fp
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	4628      	mov	r0, r5
 800c3d0:	9308      	str	r3, [sp, #32]
 800c3d2:	f000 fe93 	bl	800d0fc <__lshift>
 800c3d6:	4621      	mov	r1, r4
 800c3d8:	4683      	mov	fp, r0
 800c3da:	f000 feff 	bl	800d1dc <__mcmp>
 800c3de:	2800      	cmp	r0, #0
 800c3e0:	9b08      	ldr	r3, [sp, #32]
 800c3e2:	dc02      	bgt.n	800c3ea <_dtoa_r+0xaba>
 800c3e4:	d1de      	bne.n	800c3a4 <_dtoa_r+0xa74>
 800c3e6:	07da      	lsls	r2, r3, #31
 800c3e8:	d5dc      	bpl.n	800c3a4 <_dtoa_r+0xa74>
 800c3ea:	2b39      	cmp	r3, #57	; 0x39
 800c3ec:	d1d8      	bne.n	800c3a0 <_dtoa_r+0xa70>
 800c3ee:	2339      	movs	r3, #57	; 0x39
 800c3f0:	9a04      	ldr	r2, [sp, #16]
 800c3f2:	7013      	strb	r3, [r2, #0]
 800c3f4:	463b      	mov	r3, r7
 800c3f6:	461f      	mov	r7, r3
 800c3f8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c3fc:	3b01      	subs	r3, #1
 800c3fe:	2a39      	cmp	r2, #57	; 0x39
 800c400:	d050      	beq.n	800c4a4 <_dtoa_r+0xb74>
 800c402:	3201      	adds	r2, #1
 800c404:	701a      	strb	r2, [r3, #0]
 800c406:	e747      	b.n	800c298 <_dtoa_r+0x968>
 800c408:	2a00      	cmp	r2, #0
 800c40a:	dd03      	ble.n	800c414 <_dtoa_r+0xae4>
 800c40c:	2b39      	cmp	r3, #57	; 0x39
 800c40e:	d0ee      	beq.n	800c3ee <_dtoa_r+0xabe>
 800c410:	3301      	adds	r3, #1
 800c412:	e7c7      	b.n	800c3a4 <_dtoa_r+0xa74>
 800c414:	9a08      	ldr	r2, [sp, #32]
 800c416:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c418:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c41c:	428a      	cmp	r2, r1
 800c41e:	d02a      	beq.n	800c476 <_dtoa_r+0xb46>
 800c420:	4659      	mov	r1, fp
 800c422:	2300      	movs	r3, #0
 800c424:	220a      	movs	r2, #10
 800c426:	4628      	mov	r0, r5
 800c428:	f000 fc72 	bl	800cd10 <__multadd>
 800c42c:	45b0      	cmp	r8, r6
 800c42e:	4683      	mov	fp, r0
 800c430:	f04f 0300 	mov.w	r3, #0
 800c434:	f04f 020a 	mov.w	r2, #10
 800c438:	4641      	mov	r1, r8
 800c43a:	4628      	mov	r0, r5
 800c43c:	d107      	bne.n	800c44e <_dtoa_r+0xb1e>
 800c43e:	f000 fc67 	bl	800cd10 <__multadd>
 800c442:	4680      	mov	r8, r0
 800c444:	4606      	mov	r6, r0
 800c446:	9b08      	ldr	r3, [sp, #32]
 800c448:	3301      	adds	r3, #1
 800c44a:	9308      	str	r3, [sp, #32]
 800c44c:	e775      	b.n	800c33a <_dtoa_r+0xa0a>
 800c44e:	f000 fc5f 	bl	800cd10 <__multadd>
 800c452:	4631      	mov	r1, r6
 800c454:	4680      	mov	r8, r0
 800c456:	2300      	movs	r3, #0
 800c458:	220a      	movs	r2, #10
 800c45a:	4628      	mov	r0, r5
 800c45c:	f000 fc58 	bl	800cd10 <__multadd>
 800c460:	4606      	mov	r6, r0
 800c462:	e7f0      	b.n	800c446 <_dtoa_r+0xb16>
 800c464:	f1b9 0f00 	cmp.w	r9, #0
 800c468:	bfcc      	ite	gt
 800c46a:	464f      	movgt	r7, r9
 800c46c:	2701      	movle	r7, #1
 800c46e:	f04f 0800 	mov.w	r8, #0
 800c472:	9a03      	ldr	r2, [sp, #12]
 800c474:	4417      	add	r7, r2
 800c476:	4659      	mov	r1, fp
 800c478:	2201      	movs	r2, #1
 800c47a:	4628      	mov	r0, r5
 800c47c:	9308      	str	r3, [sp, #32]
 800c47e:	f000 fe3d 	bl	800d0fc <__lshift>
 800c482:	4621      	mov	r1, r4
 800c484:	4683      	mov	fp, r0
 800c486:	f000 fea9 	bl	800d1dc <__mcmp>
 800c48a:	2800      	cmp	r0, #0
 800c48c:	dcb2      	bgt.n	800c3f4 <_dtoa_r+0xac4>
 800c48e:	d102      	bne.n	800c496 <_dtoa_r+0xb66>
 800c490:	9b08      	ldr	r3, [sp, #32]
 800c492:	07db      	lsls	r3, r3, #31
 800c494:	d4ae      	bmi.n	800c3f4 <_dtoa_r+0xac4>
 800c496:	463b      	mov	r3, r7
 800c498:	461f      	mov	r7, r3
 800c49a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c49e:	2a30      	cmp	r2, #48	; 0x30
 800c4a0:	d0fa      	beq.n	800c498 <_dtoa_r+0xb68>
 800c4a2:	e6f9      	b.n	800c298 <_dtoa_r+0x968>
 800c4a4:	9a03      	ldr	r2, [sp, #12]
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d1a5      	bne.n	800c3f6 <_dtoa_r+0xac6>
 800c4aa:	2331      	movs	r3, #49	; 0x31
 800c4ac:	f10a 0a01 	add.w	sl, sl, #1
 800c4b0:	e779      	b.n	800c3a6 <_dtoa_r+0xa76>
 800c4b2:	4b14      	ldr	r3, [pc, #80]	; (800c504 <_dtoa_r+0xbd4>)
 800c4b4:	f7ff baa8 	b.w	800ba08 <_dtoa_r+0xd8>
 800c4b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	f47f aa81 	bne.w	800b9c2 <_dtoa_r+0x92>
 800c4c0:	4b11      	ldr	r3, [pc, #68]	; (800c508 <_dtoa_r+0xbd8>)
 800c4c2:	f7ff baa1 	b.w	800ba08 <_dtoa_r+0xd8>
 800c4c6:	f1b9 0f00 	cmp.w	r9, #0
 800c4ca:	dc03      	bgt.n	800c4d4 <_dtoa_r+0xba4>
 800c4cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c4ce:	2b02      	cmp	r3, #2
 800c4d0:	f73f aecb 	bgt.w	800c26a <_dtoa_r+0x93a>
 800c4d4:	9f03      	ldr	r7, [sp, #12]
 800c4d6:	4621      	mov	r1, r4
 800c4d8:	4658      	mov	r0, fp
 800c4da:	f7ff f99d 	bl	800b818 <quorem>
 800c4de:	9a03      	ldr	r2, [sp, #12]
 800c4e0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c4e4:	f807 3b01 	strb.w	r3, [r7], #1
 800c4e8:	1aba      	subs	r2, r7, r2
 800c4ea:	4591      	cmp	r9, r2
 800c4ec:	ddba      	ble.n	800c464 <_dtoa_r+0xb34>
 800c4ee:	4659      	mov	r1, fp
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	220a      	movs	r2, #10
 800c4f4:	4628      	mov	r0, r5
 800c4f6:	f000 fc0b 	bl	800cd10 <__multadd>
 800c4fa:	4683      	mov	fp, r0
 800c4fc:	e7eb      	b.n	800c4d6 <_dtoa_r+0xba6>
 800c4fe:	bf00      	nop
 800c500:	0800e8f8 	.word	0x0800e8f8
 800c504:	0800e6f8 	.word	0x0800e6f8
 800c508:	0800e879 	.word	0x0800e879

0800c50c <rshift>:
 800c50c:	6903      	ldr	r3, [r0, #16]
 800c50e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c512:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c516:	f100 0414 	add.w	r4, r0, #20
 800c51a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c51e:	dd46      	ble.n	800c5ae <rshift+0xa2>
 800c520:	f011 011f 	ands.w	r1, r1, #31
 800c524:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c528:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c52c:	d10c      	bne.n	800c548 <rshift+0x3c>
 800c52e:	4629      	mov	r1, r5
 800c530:	f100 0710 	add.w	r7, r0, #16
 800c534:	42b1      	cmp	r1, r6
 800c536:	d335      	bcc.n	800c5a4 <rshift+0x98>
 800c538:	1a9b      	subs	r3, r3, r2
 800c53a:	009b      	lsls	r3, r3, #2
 800c53c:	1eea      	subs	r2, r5, #3
 800c53e:	4296      	cmp	r6, r2
 800c540:	bf38      	it	cc
 800c542:	2300      	movcc	r3, #0
 800c544:	4423      	add	r3, r4
 800c546:	e015      	b.n	800c574 <rshift+0x68>
 800c548:	46a1      	mov	r9, r4
 800c54a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c54e:	f1c1 0820 	rsb	r8, r1, #32
 800c552:	40cf      	lsrs	r7, r1
 800c554:	f105 0e04 	add.w	lr, r5, #4
 800c558:	4576      	cmp	r6, lr
 800c55a:	46f4      	mov	ip, lr
 800c55c:	d816      	bhi.n	800c58c <rshift+0x80>
 800c55e:	1a9a      	subs	r2, r3, r2
 800c560:	0092      	lsls	r2, r2, #2
 800c562:	3a04      	subs	r2, #4
 800c564:	3501      	adds	r5, #1
 800c566:	42ae      	cmp	r6, r5
 800c568:	bf38      	it	cc
 800c56a:	2200      	movcc	r2, #0
 800c56c:	18a3      	adds	r3, r4, r2
 800c56e:	50a7      	str	r7, [r4, r2]
 800c570:	b107      	cbz	r7, 800c574 <rshift+0x68>
 800c572:	3304      	adds	r3, #4
 800c574:	42a3      	cmp	r3, r4
 800c576:	eba3 0204 	sub.w	r2, r3, r4
 800c57a:	bf08      	it	eq
 800c57c:	2300      	moveq	r3, #0
 800c57e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c582:	6102      	str	r2, [r0, #16]
 800c584:	bf08      	it	eq
 800c586:	6143      	streq	r3, [r0, #20]
 800c588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c58c:	f8dc c000 	ldr.w	ip, [ip]
 800c590:	fa0c fc08 	lsl.w	ip, ip, r8
 800c594:	ea4c 0707 	orr.w	r7, ip, r7
 800c598:	f849 7b04 	str.w	r7, [r9], #4
 800c59c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c5a0:	40cf      	lsrs	r7, r1
 800c5a2:	e7d9      	b.n	800c558 <rshift+0x4c>
 800c5a4:	f851 cb04 	ldr.w	ip, [r1], #4
 800c5a8:	f847 cf04 	str.w	ip, [r7, #4]!
 800c5ac:	e7c2      	b.n	800c534 <rshift+0x28>
 800c5ae:	4623      	mov	r3, r4
 800c5b0:	e7e0      	b.n	800c574 <rshift+0x68>

0800c5b2 <__hexdig_fun>:
 800c5b2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c5b6:	2b09      	cmp	r3, #9
 800c5b8:	d802      	bhi.n	800c5c0 <__hexdig_fun+0xe>
 800c5ba:	3820      	subs	r0, #32
 800c5bc:	b2c0      	uxtb	r0, r0
 800c5be:	4770      	bx	lr
 800c5c0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c5c4:	2b05      	cmp	r3, #5
 800c5c6:	d801      	bhi.n	800c5cc <__hexdig_fun+0x1a>
 800c5c8:	3847      	subs	r0, #71	; 0x47
 800c5ca:	e7f7      	b.n	800c5bc <__hexdig_fun+0xa>
 800c5cc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c5d0:	2b05      	cmp	r3, #5
 800c5d2:	d801      	bhi.n	800c5d8 <__hexdig_fun+0x26>
 800c5d4:	3827      	subs	r0, #39	; 0x27
 800c5d6:	e7f1      	b.n	800c5bc <__hexdig_fun+0xa>
 800c5d8:	2000      	movs	r0, #0
 800c5da:	4770      	bx	lr

0800c5dc <__gethex>:
 800c5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e0:	b08b      	sub	sp, #44	; 0x2c
 800c5e2:	9305      	str	r3, [sp, #20]
 800c5e4:	4bb2      	ldr	r3, [pc, #712]	; (800c8b0 <__gethex+0x2d4>)
 800c5e6:	9002      	str	r0, [sp, #8]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	468b      	mov	fp, r1
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	4690      	mov	r8, r2
 800c5f0:	9303      	str	r3, [sp, #12]
 800c5f2:	f7f3 fdad 	bl	8000150 <strlen>
 800c5f6:	4682      	mov	sl, r0
 800c5f8:	9b03      	ldr	r3, [sp, #12]
 800c5fa:	f8db 2000 	ldr.w	r2, [fp]
 800c5fe:	4403      	add	r3, r0
 800c600:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c604:	9306      	str	r3, [sp, #24]
 800c606:	1c93      	adds	r3, r2, #2
 800c608:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c60c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c610:	32fe      	adds	r2, #254	; 0xfe
 800c612:	18d1      	adds	r1, r2, r3
 800c614:	461f      	mov	r7, r3
 800c616:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c61a:	9101      	str	r1, [sp, #4]
 800c61c:	2830      	cmp	r0, #48	; 0x30
 800c61e:	d0f8      	beq.n	800c612 <__gethex+0x36>
 800c620:	f7ff ffc7 	bl	800c5b2 <__hexdig_fun>
 800c624:	4604      	mov	r4, r0
 800c626:	2800      	cmp	r0, #0
 800c628:	d13a      	bne.n	800c6a0 <__gethex+0xc4>
 800c62a:	4652      	mov	r2, sl
 800c62c:	4638      	mov	r0, r7
 800c62e:	9903      	ldr	r1, [sp, #12]
 800c630:	f001 fa26 	bl	800da80 <strncmp>
 800c634:	4605      	mov	r5, r0
 800c636:	2800      	cmp	r0, #0
 800c638:	d166      	bne.n	800c708 <__gethex+0x12c>
 800c63a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c63e:	eb07 060a 	add.w	r6, r7, sl
 800c642:	f7ff ffb6 	bl	800c5b2 <__hexdig_fun>
 800c646:	2800      	cmp	r0, #0
 800c648:	d060      	beq.n	800c70c <__gethex+0x130>
 800c64a:	4633      	mov	r3, r6
 800c64c:	7818      	ldrb	r0, [r3, #0]
 800c64e:	461f      	mov	r7, r3
 800c650:	2830      	cmp	r0, #48	; 0x30
 800c652:	f103 0301 	add.w	r3, r3, #1
 800c656:	d0f9      	beq.n	800c64c <__gethex+0x70>
 800c658:	f7ff ffab 	bl	800c5b2 <__hexdig_fun>
 800c65c:	2301      	movs	r3, #1
 800c65e:	fab0 f480 	clz	r4, r0
 800c662:	4635      	mov	r5, r6
 800c664:	0964      	lsrs	r4, r4, #5
 800c666:	9301      	str	r3, [sp, #4]
 800c668:	463a      	mov	r2, r7
 800c66a:	4616      	mov	r6, r2
 800c66c:	7830      	ldrb	r0, [r6, #0]
 800c66e:	3201      	adds	r2, #1
 800c670:	f7ff ff9f 	bl	800c5b2 <__hexdig_fun>
 800c674:	2800      	cmp	r0, #0
 800c676:	d1f8      	bne.n	800c66a <__gethex+0x8e>
 800c678:	4652      	mov	r2, sl
 800c67a:	4630      	mov	r0, r6
 800c67c:	9903      	ldr	r1, [sp, #12]
 800c67e:	f001 f9ff 	bl	800da80 <strncmp>
 800c682:	b980      	cbnz	r0, 800c6a6 <__gethex+0xca>
 800c684:	b94d      	cbnz	r5, 800c69a <__gethex+0xbe>
 800c686:	eb06 050a 	add.w	r5, r6, sl
 800c68a:	462a      	mov	r2, r5
 800c68c:	4616      	mov	r6, r2
 800c68e:	7830      	ldrb	r0, [r6, #0]
 800c690:	3201      	adds	r2, #1
 800c692:	f7ff ff8e 	bl	800c5b2 <__hexdig_fun>
 800c696:	2800      	cmp	r0, #0
 800c698:	d1f8      	bne.n	800c68c <__gethex+0xb0>
 800c69a:	1bad      	subs	r5, r5, r6
 800c69c:	00ad      	lsls	r5, r5, #2
 800c69e:	e004      	b.n	800c6aa <__gethex+0xce>
 800c6a0:	2400      	movs	r4, #0
 800c6a2:	4625      	mov	r5, r4
 800c6a4:	e7e0      	b.n	800c668 <__gethex+0x8c>
 800c6a6:	2d00      	cmp	r5, #0
 800c6a8:	d1f7      	bne.n	800c69a <__gethex+0xbe>
 800c6aa:	7833      	ldrb	r3, [r6, #0]
 800c6ac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c6b0:	2b50      	cmp	r3, #80	; 0x50
 800c6b2:	d139      	bne.n	800c728 <__gethex+0x14c>
 800c6b4:	7873      	ldrb	r3, [r6, #1]
 800c6b6:	2b2b      	cmp	r3, #43	; 0x2b
 800c6b8:	d02a      	beq.n	800c710 <__gethex+0x134>
 800c6ba:	2b2d      	cmp	r3, #45	; 0x2d
 800c6bc:	d02c      	beq.n	800c718 <__gethex+0x13c>
 800c6be:	f04f 0900 	mov.w	r9, #0
 800c6c2:	1c71      	adds	r1, r6, #1
 800c6c4:	7808      	ldrb	r0, [r1, #0]
 800c6c6:	f7ff ff74 	bl	800c5b2 <__hexdig_fun>
 800c6ca:	1e43      	subs	r3, r0, #1
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	2b18      	cmp	r3, #24
 800c6d0:	d82a      	bhi.n	800c728 <__gethex+0x14c>
 800c6d2:	f1a0 0210 	sub.w	r2, r0, #16
 800c6d6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c6da:	f7ff ff6a 	bl	800c5b2 <__hexdig_fun>
 800c6de:	1e43      	subs	r3, r0, #1
 800c6e0:	b2db      	uxtb	r3, r3
 800c6e2:	2b18      	cmp	r3, #24
 800c6e4:	d91b      	bls.n	800c71e <__gethex+0x142>
 800c6e6:	f1b9 0f00 	cmp.w	r9, #0
 800c6ea:	d000      	beq.n	800c6ee <__gethex+0x112>
 800c6ec:	4252      	negs	r2, r2
 800c6ee:	4415      	add	r5, r2
 800c6f0:	f8cb 1000 	str.w	r1, [fp]
 800c6f4:	b1d4      	cbz	r4, 800c72c <__gethex+0x150>
 800c6f6:	9b01      	ldr	r3, [sp, #4]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	bf14      	ite	ne
 800c6fc:	2700      	movne	r7, #0
 800c6fe:	2706      	moveq	r7, #6
 800c700:	4638      	mov	r0, r7
 800c702:	b00b      	add	sp, #44	; 0x2c
 800c704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c708:	463e      	mov	r6, r7
 800c70a:	4625      	mov	r5, r4
 800c70c:	2401      	movs	r4, #1
 800c70e:	e7cc      	b.n	800c6aa <__gethex+0xce>
 800c710:	f04f 0900 	mov.w	r9, #0
 800c714:	1cb1      	adds	r1, r6, #2
 800c716:	e7d5      	b.n	800c6c4 <__gethex+0xe8>
 800c718:	f04f 0901 	mov.w	r9, #1
 800c71c:	e7fa      	b.n	800c714 <__gethex+0x138>
 800c71e:	230a      	movs	r3, #10
 800c720:	fb03 0202 	mla	r2, r3, r2, r0
 800c724:	3a10      	subs	r2, #16
 800c726:	e7d6      	b.n	800c6d6 <__gethex+0xfa>
 800c728:	4631      	mov	r1, r6
 800c72a:	e7e1      	b.n	800c6f0 <__gethex+0x114>
 800c72c:	4621      	mov	r1, r4
 800c72e:	1bf3      	subs	r3, r6, r7
 800c730:	3b01      	subs	r3, #1
 800c732:	2b07      	cmp	r3, #7
 800c734:	dc0a      	bgt.n	800c74c <__gethex+0x170>
 800c736:	9802      	ldr	r0, [sp, #8]
 800c738:	f000 fa88 	bl	800cc4c <_Balloc>
 800c73c:	4604      	mov	r4, r0
 800c73e:	b940      	cbnz	r0, 800c752 <__gethex+0x176>
 800c740:	4602      	mov	r2, r0
 800c742:	21de      	movs	r1, #222	; 0xde
 800c744:	4b5b      	ldr	r3, [pc, #364]	; (800c8b4 <__gethex+0x2d8>)
 800c746:	485c      	ldr	r0, [pc, #368]	; (800c8b8 <__gethex+0x2dc>)
 800c748:	f001 f9bc 	bl	800dac4 <__assert_func>
 800c74c:	3101      	adds	r1, #1
 800c74e:	105b      	asrs	r3, r3, #1
 800c750:	e7ef      	b.n	800c732 <__gethex+0x156>
 800c752:	f04f 0b00 	mov.w	fp, #0
 800c756:	f100 0914 	add.w	r9, r0, #20
 800c75a:	f1ca 0301 	rsb	r3, sl, #1
 800c75e:	f8cd 9010 	str.w	r9, [sp, #16]
 800c762:	f8cd b004 	str.w	fp, [sp, #4]
 800c766:	9308      	str	r3, [sp, #32]
 800c768:	42b7      	cmp	r7, r6
 800c76a:	d33f      	bcc.n	800c7ec <__gethex+0x210>
 800c76c:	9f04      	ldr	r7, [sp, #16]
 800c76e:	9b01      	ldr	r3, [sp, #4]
 800c770:	f847 3b04 	str.w	r3, [r7], #4
 800c774:	eba7 0709 	sub.w	r7, r7, r9
 800c778:	10bf      	asrs	r7, r7, #2
 800c77a:	6127      	str	r7, [r4, #16]
 800c77c:	4618      	mov	r0, r3
 800c77e:	f000 fb57 	bl	800ce30 <__hi0bits>
 800c782:	017f      	lsls	r7, r7, #5
 800c784:	f8d8 6000 	ldr.w	r6, [r8]
 800c788:	1a3f      	subs	r7, r7, r0
 800c78a:	42b7      	cmp	r7, r6
 800c78c:	dd62      	ble.n	800c854 <__gethex+0x278>
 800c78e:	1bbf      	subs	r7, r7, r6
 800c790:	4639      	mov	r1, r7
 800c792:	4620      	mov	r0, r4
 800c794:	f000 fef1 	bl	800d57a <__any_on>
 800c798:	4682      	mov	sl, r0
 800c79a:	b1a8      	cbz	r0, 800c7c8 <__gethex+0x1ec>
 800c79c:	f04f 0a01 	mov.w	sl, #1
 800c7a0:	1e7b      	subs	r3, r7, #1
 800c7a2:	1159      	asrs	r1, r3, #5
 800c7a4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c7a8:	f003 021f 	and.w	r2, r3, #31
 800c7ac:	fa0a f202 	lsl.w	r2, sl, r2
 800c7b0:	420a      	tst	r2, r1
 800c7b2:	d009      	beq.n	800c7c8 <__gethex+0x1ec>
 800c7b4:	4553      	cmp	r3, sl
 800c7b6:	dd05      	ble.n	800c7c4 <__gethex+0x1e8>
 800c7b8:	4620      	mov	r0, r4
 800c7ba:	1eb9      	subs	r1, r7, #2
 800c7bc:	f000 fedd 	bl	800d57a <__any_on>
 800c7c0:	2800      	cmp	r0, #0
 800c7c2:	d144      	bne.n	800c84e <__gethex+0x272>
 800c7c4:	f04f 0a02 	mov.w	sl, #2
 800c7c8:	4639      	mov	r1, r7
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	f7ff fe9e 	bl	800c50c <rshift>
 800c7d0:	443d      	add	r5, r7
 800c7d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c7d6:	42ab      	cmp	r3, r5
 800c7d8:	da4a      	bge.n	800c870 <__gethex+0x294>
 800c7da:	4621      	mov	r1, r4
 800c7dc:	9802      	ldr	r0, [sp, #8]
 800c7de:	f000 fa75 	bl	800cccc <_Bfree>
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c7e6:	27a3      	movs	r7, #163	; 0xa3
 800c7e8:	6013      	str	r3, [r2, #0]
 800c7ea:	e789      	b.n	800c700 <__gethex+0x124>
 800c7ec:	1e73      	subs	r3, r6, #1
 800c7ee:	9a06      	ldr	r2, [sp, #24]
 800c7f0:	9307      	str	r3, [sp, #28]
 800c7f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	d019      	beq.n	800c82e <__gethex+0x252>
 800c7fa:	f1bb 0f20 	cmp.w	fp, #32
 800c7fe:	d107      	bne.n	800c810 <__gethex+0x234>
 800c800:	9b04      	ldr	r3, [sp, #16]
 800c802:	9a01      	ldr	r2, [sp, #4]
 800c804:	f843 2b04 	str.w	r2, [r3], #4
 800c808:	9304      	str	r3, [sp, #16]
 800c80a:	2300      	movs	r3, #0
 800c80c:	469b      	mov	fp, r3
 800c80e:	9301      	str	r3, [sp, #4]
 800c810:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c814:	f7ff fecd 	bl	800c5b2 <__hexdig_fun>
 800c818:	9b01      	ldr	r3, [sp, #4]
 800c81a:	f000 000f 	and.w	r0, r0, #15
 800c81e:	fa00 f00b 	lsl.w	r0, r0, fp
 800c822:	4303      	orrs	r3, r0
 800c824:	9301      	str	r3, [sp, #4]
 800c826:	f10b 0b04 	add.w	fp, fp, #4
 800c82a:	9b07      	ldr	r3, [sp, #28]
 800c82c:	e00d      	b.n	800c84a <__gethex+0x26e>
 800c82e:	9a08      	ldr	r2, [sp, #32]
 800c830:	1e73      	subs	r3, r6, #1
 800c832:	4413      	add	r3, r2
 800c834:	42bb      	cmp	r3, r7
 800c836:	d3e0      	bcc.n	800c7fa <__gethex+0x21e>
 800c838:	4618      	mov	r0, r3
 800c83a:	4652      	mov	r2, sl
 800c83c:	9903      	ldr	r1, [sp, #12]
 800c83e:	9309      	str	r3, [sp, #36]	; 0x24
 800c840:	f001 f91e 	bl	800da80 <strncmp>
 800c844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c846:	2800      	cmp	r0, #0
 800c848:	d1d7      	bne.n	800c7fa <__gethex+0x21e>
 800c84a:	461e      	mov	r6, r3
 800c84c:	e78c      	b.n	800c768 <__gethex+0x18c>
 800c84e:	f04f 0a03 	mov.w	sl, #3
 800c852:	e7b9      	b.n	800c7c8 <__gethex+0x1ec>
 800c854:	da09      	bge.n	800c86a <__gethex+0x28e>
 800c856:	1bf7      	subs	r7, r6, r7
 800c858:	4621      	mov	r1, r4
 800c85a:	463a      	mov	r2, r7
 800c85c:	9802      	ldr	r0, [sp, #8]
 800c85e:	f000 fc4d 	bl	800d0fc <__lshift>
 800c862:	4604      	mov	r4, r0
 800c864:	1bed      	subs	r5, r5, r7
 800c866:	f100 0914 	add.w	r9, r0, #20
 800c86a:	f04f 0a00 	mov.w	sl, #0
 800c86e:	e7b0      	b.n	800c7d2 <__gethex+0x1f6>
 800c870:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c874:	42a8      	cmp	r0, r5
 800c876:	dd72      	ble.n	800c95e <__gethex+0x382>
 800c878:	1b45      	subs	r5, r0, r5
 800c87a:	42ae      	cmp	r6, r5
 800c87c:	dc35      	bgt.n	800c8ea <__gethex+0x30e>
 800c87e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c882:	2b02      	cmp	r3, #2
 800c884:	d029      	beq.n	800c8da <__gethex+0x2fe>
 800c886:	2b03      	cmp	r3, #3
 800c888:	d02b      	beq.n	800c8e2 <__gethex+0x306>
 800c88a:	2b01      	cmp	r3, #1
 800c88c:	d11c      	bne.n	800c8c8 <__gethex+0x2ec>
 800c88e:	42ae      	cmp	r6, r5
 800c890:	d11a      	bne.n	800c8c8 <__gethex+0x2ec>
 800c892:	2e01      	cmp	r6, #1
 800c894:	d112      	bne.n	800c8bc <__gethex+0x2e0>
 800c896:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c89a:	9a05      	ldr	r2, [sp, #20]
 800c89c:	2762      	movs	r7, #98	; 0x62
 800c89e:	6013      	str	r3, [r2, #0]
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	6123      	str	r3, [r4, #16]
 800c8a4:	f8c9 3000 	str.w	r3, [r9]
 800c8a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c8aa:	601c      	str	r4, [r3, #0]
 800c8ac:	e728      	b.n	800c700 <__gethex+0x124>
 800c8ae:	bf00      	nop
 800c8b0:	0800e970 	.word	0x0800e970
 800c8b4:	0800e8f8 	.word	0x0800e8f8
 800c8b8:	0800e909 	.word	0x0800e909
 800c8bc:	4620      	mov	r0, r4
 800c8be:	1e71      	subs	r1, r6, #1
 800c8c0:	f000 fe5b 	bl	800d57a <__any_on>
 800c8c4:	2800      	cmp	r0, #0
 800c8c6:	d1e6      	bne.n	800c896 <__gethex+0x2ba>
 800c8c8:	4621      	mov	r1, r4
 800c8ca:	9802      	ldr	r0, [sp, #8]
 800c8cc:	f000 f9fe 	bl	800cccc <_Bfree>
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c8d4:	2750      	movs	r7, #80	; 0x50
 800c8d6:	6013      	str	r3, [r2, #0]
 800c8d8:	e712      	b.n	800c700 <__gethex+0x124>
 800c8da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d1f3      	bne.n	800c8c8 <__gethex+0x2ec>
 800c8e0:	e7d9      	b.n	800c896 <__gethex+0x2ba>
 800c8e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d1d6      	bne.n	800c896 <__gethex+0x2ba>
 800c8e8:	e7ee      	b.n	800c8c8 <__gethex+0x2ec>
 800c8ea:	1e6f      	subs	r7, r5, #1
 800c8ec:	f1ba 0f00 	cmp.w	sl, #0
 800c8f0:	d132      	bne.n	800c958 <__gethex+0x37c>
 800c8f2:	b127      	cbz	r7, 800c8fe <__gethex+0x322>
 800c8f4:	4639      	mov	r1, r7
 800c8f6:	4620      	mov	r0, r4
 800c8f8:	f000 fe3f 	bl	800d57a <__any_on>
 800c8fc:	4682      	mov	sl, r0
 800c8fe:	2101      	movs	r1, #1
 800c900:	117b      	asrs	r3, r7, #5
 800c902:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c906:	f007 071f 	and.w	r7, r7, #31
 800c90a:	fa01 f707 	lsl.w	r7, r1, r7
 800c90e:	421f      	tst	r7, r3
 800c910:	f04f 0702 	mov.w	r7, #2
 800c914:	4629      	mov	r1, r5
 800c916:	4620      	mov	r0, r4
 800c918:	bf18      	it	ne
 800c91a:	f04a 0a02 	orrne.w	sl, sl, #2
 800c91e:	1b76      	subs	r6, r6, r5
 800c920:	f7ff fdf4 	bl	800c50c <rshift>
 800c924:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c928:	f1ba 0f00 	cmp.w	sl, #0
 800c92c:	d048      	beq.n	800c9c0 <__gethex+0x3e4>
 800c92e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c932:	2b02      	cmp	r3, #2
 800c934:	d015      	beq.n	800c962 <__gethex+0x386>
 800c936:	2b03      	cmp	r3, #3
 800c938:	d017      	beq.n	800c96a <__gethex+0x38e>
 800c93a:	2b01      	cmp	r3, #1
 800c93c:	d109      	bne.n	800c952 <__gethex+0x376>
 800c93e:	f01a 0f02 	tst.w	sl, #2
 800c942:	d006      	beq.n	800c952 <__gethex+0x376>
 800c944:	f8d9 0000 	ldr.w	r0, [r9]
 800c948:	ea4a 0a00 	orr.w	sl, sl, r0
 800c94c:	f01a 0f01 	tst.w	sl, #1
 800c950:	d10e      	bne.n	800c970 <__gethex+0x394>
 800c952:	f047 0710 	orr.w	r7, r7, #16
 800c956:	e033      	b.n	800c9c0 <__gethex+0x3e4>
 800c958:	f04f 0a01 	mov.w	sl, #1
 800c95c:	e7cf      	b.n	800c8fe <__gethex+0x322>
 800c95e:	2701      	movs	r7, #1
 800c960:	e7e2      	b.n	800c928 <__gethex+0x34c>
 800c962:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c964:	f1c3 0301 	rsb	r3, r3, #1
 800c968:	9315      	str	r3, [sp, #84]	; 0x54
 800c96a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d0f0      	beq.n	800c952 <__gethex+0x376>
 800c970:	f04f 0c00 	mov.w	ip, #0
 800c974:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c978:	f104 0314 	add.w	r3, r4, #20
 800c97c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c980:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c984:	4618      	mov	r0, r3
 800c986:	f853 2b04 	ldr.w	r2, [r3], #4
 800c98a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c98e:	d01c      	beq.n	800c9ca <__gethex+0x3ee>
 800c990:	3201      	adds	r2, #1
 800c992:	6002      	str	r2, [r0, #0]
 800c994:	2f02      	cmp	r7, #2
 800c996:	f104 0314 	add.w	r3, r4, #20
 800c99a:	d13d      	bne.n	800ca18 <__gethex+0x43c>
 800c99c:	f8d8 2000 	ldr.w	r2, [r8]
 800c9a0:	3a01      	subs	r2, #1
 800c9a2:	42b2      	cmp	r2, r6
 800c9a4:	d10a      	bne.n	800c9bc <__gethex+0x3e0>
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	1171      	asrs	r1, r6, #5
 800c9aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c9ae:	f006 061f 	and.w	r6, r6, #31
 800c9b2:	fa02 f606 	lsl.w	r6, r2, r6
 800c9b6:	421e      	tst	r6, r3
 800c9b8:	bf18      	it	ne
 800c9ba:	4617      	movne	r7, r2
 800c9bc:	f047 0720 	orr.w	r7, r7, #32
 800c9c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c9c2:	601c      	str	r4, [r3, #0]
 800c9c4:	9b05      	ldr	r3, [sp, #20]
 800c9c6:	601d      	str	r5, [r3, #0]
 800c9c8:	e69a      	b.n	800c700 <__gethex+0x124>
 800c9ca:	4299      	cmp	r1, r3
 800c9cc:	f843 cc04 	str.w	ip, [r3, #-4]
 800c9d0:	d8d8      	bhi.n	800c984 <__gethex+0x3a8>
 800c9d2:	68a3      	ldr	r3, [r4, #8]
 800c9d4:	459b      	cmp	fp, r3
 800c9d6:	db17      	blt.n	800ca08 <__gethex+0x42c>
 800c9d8:	6861      	ldr	r1, [r4, #4]
 800c9da:	9802      	ldr	r0, [sp, #8]
 800c9dc:	3101      	adds	r1, #1
 800c9de:	f000 f935 	bl	800cc4c <_Balloc>
 800c9e2:	4681      	mov	r9, r0
 800c9e4:	b918      	cbnz	r0, 800c9ee <__gethex+0x412>
 800c9e6:	4602      	mov	r2, r0
 800c9e8:	2184      	movs	r1, #132	; 0x84
 800c9ea:	4b19      	ldr	r3, [pc, #100]	; (800ca50 <__gethex+0x474>)
 800c9ec:	e6ab      	b.n	800c746 <__gethex+0x16a>
 800c9ee:	6922      	ldr	r2, [r4, #16]
 800c9f0:	f104 010c 	add.w	r1, r4, #12
 800c9f4:	3202      	adds	r2, #2
 800c9f6:	0092      	lsls	r2, r2, #2
 800c9f8:	300c      	adds	r0, #12
 800c9fa:	f000 f919 	bl	800cc30 <memcpy>
 800c9fe:	4621      	mov	r1, r4
 800ca00:	9802      	ldr	r0, [sp, #8]
 800ca02:	f000 f963 	bl	800cccc <_Bfree>
 800ca06:	464c      	mov	r4, r9
 800ca08:	6923      	ldr	r3, [r4, #16]
 800ca0a:	1c5a      	adds	r2, r3, #1
 800ca0c:	6122      	str	r2, [r4, #16]
 800ca0e:	2201      	movs	r2, #1
 800ca10:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ca14:	615a      	str	r2, [r3, #20]
 800ca16:	e7bd      	b.n	800c994 <__gethex+0x3b8>
 800ca18:	6922      	ldr	r2, [r4, #16]
 800ca1a:	455a      	cmp	r2, fp
 800ca1c:	dd0b      	ble.n	800ca36 <__gethex+0x45a>
 800ca1e:	2101      	movs	r1, #1
 800ca20:	4620      	mov	r0, r4
 800ca22:	f7ff fd73 	bl	800c50c <rshift>
 800ca26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca2a:	3501      	adds	r5, #1
 800ca2c:	42ab      	cmp	r3, r5
 800ca2e:	f6ff aed4 	blt.w	800c7da <__gethex+0x1fe>
 800ca32:	2701      	movs	r7, #1
 800ca34:	e7c2      	b.n	800c9bc <__gethex+0x3e0>
 800ca36:	f016 061f 	ands.w	r6, r6, #31
 800ca3a:	d0fa      	beq.n	800ca32 <__gethex+0x456>
 800ca3c:	4453      	add	r3, sl
 800ca3e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ca42:	f000 f9f5 	bl	800ce30 <__hi0bits>
 800ca46:	f1c6 0620 	rsb	r6, r6, #32
 800ca4a:	42b0      	cmp	r0, r6
 800ca4c:	dbe7      	blt.n	800ca1e <__gethex+0x442>
 800ca4e:	e7f0      	b.n	800ca32 <__gethex+0x456>
 800ca50:	0800e8f8 	.word	0x0800e8f8

0800ca54 <L_shift>:
 800ca54:	f1c2 0208 	rsb	r2, r2, #8
 800ca58:	0092      	lsls	r2, r2, #2
 800ca5a:	b570      	push	{r4, r5, r6, lr}
 800ca5c:	f1c2 0620 	rsb	r6, r2, #32
 800ca60:	6843      	ldr	r3, [r0, #4]
 800ca62:	6804      	ldr	r4, [r0, #0]
 800ca64:	fa03 f506 	lsl.w	r5, r3, r6
 800ca68:	432c      	orrs	r4, r5
 800ca6a:	40d3      	lsrs	r3, r2
 800ca6c:	6004      	str	r4, [r0, #0]
 800ca6e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ca72:	4288      	cmp	r0, r1
 800ca74:	d3f4      	bcc.n	800ca60 <L_shift+0xc>
 800ca76:	bd70      	pop	{r4, r5, r6, pc}

0800ca78 <__match>:
 800ca78:	b530      	push	{r4, r5, lr}
 800ca7a:	6803      	ldr	r3, [r0, #0]
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca82:	b914      	cbnz	r4, 800ca8a <__match+0x12>
 800ca84:	6003      	str	r3, [r0, #0]
 800ca86:	2001      	movs	r0, #1
 800ca88:	bd30      	pop	{r4, r5, pc}
 800ca8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca8e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ca92:	2d19      	cmp	r5, #25
 800ca94:	bf98      	it	ls
 800ca96:	3220      	addls	r2, #32
 800ca98:	42a2      	cmp	r2, r4
 800ca9a:	d0f0      	beq.n	800ca7e <__match+0x6>
 800ca9c:	2000      	movs	r0, #0
 800ca9e:	e7f3      	b.n	800ca88 <__match+0x10>

0800caa0 <__hexnan>:
 800caa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa4:	2500      	movs	r5, #0
 800caa6:	680b      	ldr	r3, [r1, #0]
 800caa8:	4682      	mov	sl, r0
 800caaa:	115e      	asrs	r6, r3, #5
 800caac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cab0:	f013 031f 	ands.w	r3, r3, #31
 800cab4:	bf18      	it	ne
 800cab6:	3604      	addne	r6, #4
 800cab8:	1f37      	subs	r7, r6, #4
 800caba:	46b9      	mov	r9, r7
 800cabc:	463c      	mov	r4, r7
 800cabe:	46ab      	mov	fp, r5
 800cac0:	b087      	sub	sp, #28
 800cac2:	4690      	mov	r8, r2
 800cac4:	6802      	ldr	r2, [r0, #0]
 800cac6:	9301      	str	r3, [sp, #4]
 800cac8:	f846 5c04 	str.w	r5, [r6, #-4]
 800cacc:	9502      	str	r5, [sp, #8]
 800cace:	7851      	ldrb	r1, [r2, #1]
 800cad0:	1c53      	adds	r3, r2, #1
 800cad2:	9303      	str	r3, [sp, #12]
 800cad4:	b341      	cbz	r1, 800cb28 <__hexnan+0x88>
 800cad6:	4608      	mov	r0, r1
 800cad8:	9205      	str	r2, [sp, #20]
 800cada:	9104      	str	r1, [sp, #16]
 800cadc:	f7ff fd69 	bl	800c5b2 <__hexdig_fun>
 800cae0:	2800      	cmp	r0, #0
 800cae2:	d14f      	bne.n	800cb84 <__hexnan+0xe4>
 800cae4:	9904      	ldr	r1, [sp, #16]
 800cae6:	9a05      	ldr	r2, [sp, #20]
 800cae8:	2920      	cmp	r1, #32
 800caea:	d818      	bhi.n	800cb1e <__hexnan+0x7e>
 800caec:	9b02      	ldr	r3, [sp, #8]
 800caee:	459b      	cmp	fp, r3
 800caf0:	dd13      	ble.n	800cb1a <__hexnan+0x7a>
 800caf2:	454c      	cmp	r4, r9
 800caf4:	d206      	bcs.n	800cb04 <__hexnan+0x64>
 800caf6:	2d07      	cmp	r5, #7
 800caf8:	dc04      	bgt.n	800cb04 <__hexnan+0x64>
 800cafa:	462a      	mov	r2, r5
 800cafc:	4649      	mov	r1, r9
 800cafe:	4620      	mov	r0, r4
 800cb00:	f7ff ffa8 	bl	800ca54 <L_shift>
 800cb04:	4544      	cmp	r4, r8
 800cb06:	d950      	bls.n	800cbaa <__hexnan+0x10a>
 800cb08:	2300      	movs	r3, #0
 800cb0a:	f1a4 0904 	sub.w	r9, r4, #4
 800cb0e:	f844 3c04 	str.w	r3, [r4, #-4]
 800cb12:	461d      	mov	r5, r3
 800cb14:	464c      	mov	r4, r9
 800cb16:	f8cd b008 	str.w	fp, [sp, #8]
 800cb1a:	9a03      	ldr	r2, [sp, #12]
 800cb1c:	e7d7      	b.n	800cace <__hexnan+0x2e>
 800cb1e:	2929      	cmp	r1, #41	; 0x29
 800cb20:	d156      	bne.n	800cbd0 <__hexnan+0x130>
 800cb22:	3202      	adds	r2, #2
 800cb24:	f8ca 2000 	str.w	r2, [sl]
 800cb28:	f1bb 0f00 	cmp.w	fp, #0
 800cb2c:	d050      	beq.n	800cbd0 <__hexnan+0x130>
 800cb2e:	454c      	cmp	r4, r9
 800cb30:	d206      	bcs.n	800cb40 <__hexnan+0xa0>
 800cb32:	2d07      	cmp	r5, #7
 800cb34:	dc04      	bgt.n	800cb40 <__hexnan+0xa0>
 800cb36:	462a      	mov	r2, r5
 800cb38:	4649      	mov	r1, r9
 800cb3a:	4620      	mov	r0, r4
 800cb3c:	f7ff ff8a 	bl	800ca54 <L_shift>
 800cb40:	4544      	cmp	r4, r8
 800cb42:	d934      	bls.n	800cbae <__hexnan+0x10e>
 800cb44:	4623      	mov	r3, r4
 800cb46:	f1a8 0204 	sub.w	r2, r8, #4
 800cb4a:	f853 1b04 	ldr.w	r1, [r3], #4
 800cb4e:	429f      	cmp	r7, r3
 800cb50:	f842 1f04 	str.w	r1, [r2, #4]!
 800cb54:	d2f9      	bcs.n	800cb4a <__hexnan+0xaa>
 800cb56:	1b3b      	subs	r3, r7, r4
 800cb58:	f023 0303 	bic.w	r3, r3, #3
 800cb5c:	3304      	adds	r3, #4
 800cb5e:	3401      	adds	r4, #1
 800cb60:	3e03      	subs	r6, #3
 800cb62:	42b4      	cmp	r4, r6
 800cb64:	bf88      	it	hi
 800cb66:	2304      	movhi	r3, #4
 800cb68:	2200      	movs	r2, #0
 800cb6a:	4443      	add	r3, r8
 800cb6c:	f843 2b04 	str.w	r2, [r3], #4
 800cb70:	429f      	cmp	r7, r3
 800cb72:	d2fb      	bcs.n	800cb6c <__hexnan+0xcc>
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	b91b      	cbnz	r3, 800cb80 <__hexnan+0xe0>
 800cb78:	4547      	cmp	r7, r8
 800cb7a:	d127      	bne.n	800cbcc <__hexnan+0x12c>
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	603b      	str	r3, [r7, #0]
 800cb80:	2005      	movs	r0, #5
 800cb82:	e026      	b.n	800cbd2 <__hexnan+0x132>
 800cb84:	3501      	adds	r5, #1
 800cb86:	2d08      	cmp	r5, #8
 800cb88:	f10b 0b01 	add.w	fp, fp, #1
 800cb8c:	dd06      	ble.n	800cb9c <__hexnan+0xfc>
 800cb8e:	4544      	cmp	r4, r8
 800cb90:	d9c3      	bls.n	800cb1a <__hexnan+0x7a>
 800cb92:	2300      	movs	r3, #0
 800cb94:	2501      	movs	r5, #1
 800cb96:	f844 3c04 	str.w	r3, [r4, #-4]
 800cb9a:	3c04      	subs	r4, #4
 800cb9c:	6822      	ldr	r2, [r4, #0]
 800cb9e:	f000 000f 	and.w	r0, r0, #15
 800cba2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cba6:	6022      	str	r2, [r4, #0]
 800cba8:	e7b7      	b.n	800cb1a <__hexnan+0x7a>
 800cbaa:	2508      	movs	r5, #8
 800cbac:	e7b5      	b.n	800cb1a <__hexnan+0x7a>
 800cbae:	9b01      	ldr	r3, [sp, #4]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d0df      	beq.n	800cb74 <__hexnan+0xd4>
 800cbb4:	f04f 32ff 	mov.w	r2, #4294967295
 800cbb8:	f1c3 0320 	rsb	r3, r3, #32
 800cbbc:	fa22 f303 	lsr.w	r3, r2, r3
 800cbc0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cbc4:	401a      	ands	r2, r3
 800cbc6:	f846 2c04 	str.w	r2, [r6, #-4]
 800cbca:	e7d3      	b.n	800cb74 <__hexnan+0xd4>
 800cbcc:	3f04      	subs	r7, #4
 800cbce:	e7d1      	b.n	800cb74 <__hexnan+0xd4>
 800cbd0:	2004      	movs	r0, #4
 800cbd2:	b007      	add	sp, #28
 800cbd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cbd8 <_localeconv_r>:
 800cbd8:	4800      	ldr	r0, [pc, #0]	; (800cbdc <_localeconv_r+0x4>)
 800cbda:	4770      	bx	lr
 800cbdc:	200002d4 	.word	0x200002d4

0800cbe0 <malloc>:
 800cbe0:	4b02      	ldr	r3, [pc, #8]	; (800cbec <malloc+0xc>)
 800cbe2:	4601      	mov	r1, r0
 800cbe4:	6818      	ldr	r0, [r3, #0]
 800cbe6:	f000 bd65 	b.w	800d6b4 <_malloc_r>
 800cbea:	bf00      	nop
 800cbec:	2000017c 	.word	0x2000017c

0800cbf0 <__ascii_mbtowc>:
 800cbf0:	b082      	sub	sp, #8
 800cbf2:	b901      	cbnz	r1, 800cbf6 <__ascii_mbtowc+0x6>
 800cbf4:	a901      	add	r1, sp, #4
 800cbf6:	b142      	cbz	r2, 800cc0a <__ascii_mbtowc+0x1a>
 800cbf8:	b14b      	cbz	r3, 800cc0e <__ascii_mbtowc+0x1e>
 800cbfa:	7813      	ldrb	r3, [r2, #0]
 800cbfc:	600b      	str	r3, [r1, #0]
 800cbfe:	7812      	ldrb	r2, [r2, #0]
 800cc00:	1e10      	subs	r0, r2, #0
 800cc02:	bf18      	it	ne
 800cc04:	2001      	movne	r0, #1
 800cc06:	b002      	add	sp, #8
 800cc08:	4770      	bx	lr
 800cc0a:	4610      	mov	r0, r2
 800cc0c:	e7fb      	b.n	800cc06 <__ascii_mbtowc+0x16>
 800cc0e:	f06f 0001 	mvn.w	r0, #1
 800cc12:	e7f8      	b.n	800cc06 <__ascii_mbtowc+0x16>

0800cc14 <memchr>:
 800cc14:	4603      	mov	r3, r0
 800cc16:	b510      	push	{r4, lr}
 800cc18:	b2c9      	uxtb	r1, r1
 800cc1a:	4402      	add	r2, r0
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	4618      	mov	r0, r3
 800cc20:	d101      	bne.n	800cc26 <memchr+0x12>
 800cc22:	2000      	movs	r0, #0
 800cc24:	e003      	b.n	800cc2e <memchr+0x1a>
 800cc26:	7804      	ldrb	r4, [r0, #0]
 800cc28:	3301      	adds	r3, #1
 800cc2a:	428c      	cmp	r4, r1
 800cc2c:	d1f6      	bne.n	800cc1c <memchr+0x8>
 800cc2e:	bd10      	pop	{r4, pc}

0800cc30 <memcpy>:
 800cc30:	440a      	add	r2, r1
 800cc32:	4291      	cmp	r1, r2
 800cc34:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc38:	d100      	bne.n	800cc3c <memcpy+0xc>
 800cc3a:	4770      	bx	lr
 800cc3c:	b510      	push	{r4, lr}
 800cc3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc42:	4291      	cmp	r1, r2
 800cc44:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc48:	d1f9      	bne.n	800cc3e <memcpy+0xe>
 800cc4a:	bd10      	pop	{r4, pc}

0800cc4c <_Balloc>:
 800cc4c:	b570      	push	{r4, r5, r6, lr}
 800cc4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cc50:	4604      	mov	r4, r0
 800cc52:	460d      	mov	r5, r1
 800cc54:	b976      	cbnz	r6, 800cc74 <_Balloc+0x28>
 800cc56:	2010      	movs	r0, #16
 800cc58:	f7ff ffc2 	bl	800cbe0 <malloc>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	6260      	str	r0, [r4, #36]	; 0x24
 800cc60:	b920      	cbnz	r0, 800cc6c <_Balloc+0x20>
 800cc62:	2166      	movs	r1, #102	; 0x66
 800cc64:	4b17      	ldr	r3, [pc, #92]	; (800ccc4 <_Balloc+0x78>)
 800cc66:	4818      	ldr	r0, [pc, #96]	; (800ccc8 <_Balloc+0x7c>)
 800cc68:	f000 ff2c 	bl	800dac4 <__assert_func>
 800cc6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc70:	6006      	str	r6, [r0, #0]
 800cc72:	60c6      	str	r6, [r0, #12]
 800cc74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cc76:	68f3      	ldr	r3, [r6, #12]
 800cc78:	b183      	cbz	r3, 800cc9c <_Balloc+0x50>
 800cc7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc7c:	68db      	ldr	r3, [r3, #12]
 800cc7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cc82:	b9b8      	cbnz	r0, 800ccb4 <_Balloc+0x68>
 800cc84:	2101      	movs	r1, #1
 800cc86:	fa01 f605 	lsl.w	r6, r1, r5
 800cc8a:	1d72      	adds	r2, r6, #5
 800cc8c:	4620      	mov	r0, r4
 800cc8e:	0092      	lsls	r2, r2, #2
 800cc90:	f000 fc94 	bl	800d5bc <_calloc_r>
 800cc94:	b160      	cbz	r0, 800ccb0 <_Balloc+0x64>
 800cc96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cc9a:	e00e      	b.n	800ccba <_Balloc+0x6e>
 800cc9c:	2221      	movs	r2, #33	; 0x21
 800cc9e:	2104      	movs	r1, #4
 800cca0:	4620      	mov	r0, r4
 800cca2:	f000 fc8b 	bl	800d5bc <_calloc_r>
 800cca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cca8:	60f0      	str	r0, [r6, #12]
 800ccaa:	68db      	ldr	r3, [r3, #12]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d1e4      	bne.n	800cc7a <_Balloc+0x2e>
 800ccb0:	2000      	movs	r0, #0
 800ccb2:	bd70      	pop	{r4, r5, r6, pc}
 800ccb4:	6802      	ldr	r2, [r0, #0]
 800ccb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ccba:	2300      	movs	r3, #0
 800ccbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ccc0:	e7f7      	b.n	800ccb2 <_Balloc+0x66>
 800ccc2:	bf00      	nop
 800ccc4:	0800e886 	.word	0x0800e886
 800ccc8:	0800e984 	.word	0x0800e984

0800cccc <_Bfree>:
 800cccc:	b570      	push	{r4, r5, r6, lr}
 800ccce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ccd0:	4605      	mov	r5, r0
 800ccd2:	460c      	mov	r4, r1
 800ccd4:	b976      	cbnz	r6, 800ccf4 <_Bfree+0x28>
 800ccd6:	2010      	movs	r0, #16
 800ccd8:	f7ff ff82 	bl	800cbe0 <malloc>
 800ccdc:	4602      	mov	r2, r0
 800ccde:	6268      	str	r0, [r5, #36]	; 0x24
 800cce0:	b920      	cbnz	r0, 800ccec <_Bfree+0x20>
 800cce2:	218a      	movs	r1, #138	; 0x8a
 800cce4:	4b08      	ldr	r3, [pc, #32]	; (800cd08 <_Bfree+0x3c>)
 800cce6:	4809      	ldr	r0, [pc, #36]	; (800cd0c <_Bfree+0x40>)
 800cce8:	f000 feec 	bl	800dac4 <__assert_func>
 800ccec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ccf0:	6006      	str	r6, [r0, #0]
 800ccf2:	60c6      	str	r6, [r0, #12]
 800ccf4:	b13c      	cbz	r4, 800cd06 <_Bfree+0x3a>
 800ccf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ccf8:	6862      	ldr	r2, [r4, #4]
 800ccfa:	68db      	ldr	r3, [r3, #12]
 800ccfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd00:	6021      	str	r1, [r4, #0]
 800cd02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cd06:	bd70      	pop	{r4, r5, r6, pc}
 800cd08:	0800e886 	.word	0x0800e886
 800cd0c:	0800e984 	.word	0x0800e984

0800cd10 <__multadd>:
 800cd10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd14:	4607      	mov	r7, r0
 800cd16:	460c      	mov	r4, r1
 800cd18:	461e      	mov	r6, r3
 800cd1a:	2000      	movs	r0, #0
 800cd1c:	690d      	ldr	r5, [r1, #16]
 800cd1e:	f101 0c14 	add.w	ip, r1, #20
 800cd22:	f8dc 3000 	ldr.w	r3, [ip]
 800cd26:	3001      	adds	r0, #1
 800cd28:	b299      	uxth	r1, r3
 800cd2a:	fb02 6101 	mla	r1, r2, r1, r6
 800cd2e:	0c1e      	lsrs	r6, r3, #16
 800cd30:	0c0b      	lsrs	r3, r1, #16
 800cd32:	fb02 3306 	mla	r3, r2, r6, r3
 800cd36:	b289      	uxth	r1, r1
 800cd38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cd3c:	4285      	cmp	r5, r0
 800cd3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cd42:	f84c 1b04 	str.w	r1, [ip], #4
 800cd46:	dcec      	bgt.n	800cd22 <__multadd+0x12>
 800cd48:	b30e      	cbz	r6, 800cd8e <__multadd+0x7e>
 800cd4a:	68a3      	ldr	r3, [r4, #8]
 800cd4c:	42ab      	cmp	r3, r5
 800cd4e:	dc19      	bgt.n	800cd84 <__multadd+0x74>
 800cd50:	6861      	ldr	r1, [r4, #4]
 800cd52:	4638      	mov	r0, r7
 800cd54:	3101      	adds	r1, #1
 800cd56:	f7ff ff79 	bl	800cc4c <_Balloc>
 800cd5a:	4680      	mov	r8, r0
 800cd5c:	b928      	cbnz	r0, 800cd6a <__multadd+0x5a>
 800cd5e:	4602      	mov	r2, r0
 800cd60:	21b5      	movs	r1, #181	; 0xb5
 800cd62:	4b0c      	ldr	r3, [pc, #48]	; (800cd94 <__multadd+0x84>)
 800cd64:	480c      	ldr	r0, [pc, #48]	; (800cd98 <__multadd+0x88>)
 800cd66:	f000 fead 	bl	800dac4 <__assert_func>
 800cd6a:	6922      	ldr	r2, [r4, #16]
 800cd6c:	f104 010c 	add.w	r1, r4, #12
 800cd70:	3202      	adds	r2, #2
 800cd72:	0092      	lsls	r2, r2, #2
 800cd74:	300c      	adds	r0, #12
 800cd76:	f7ff ff5b 	bl	800cc30 <memcpy>
 800cd7a:	4621      	mov	r1, r4
 800cd7c:	4638      	mov	r0, r7
 800cd7e:	f7ff ffa5 	bl	800cccc <_Bfree>
 800cd82:	4644      	mov	r4, r8
 800cd84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cd88:	3501      	adds	r5, #1
 800cd8a:	615e      	str	r6, [r3, #20]
 800cd8c:	6125      	str	r5, [r4, #16]
 800cd8e:	4620      	mov	r0, r4
 800cd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd94:	0800e8f8 	.word	0x0800e8f8
 800cd98:	0800e984 	.word	0x0800e984

0800cd9c <__s2b>:
 800cd9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cda0:	4615      	mov	r5, r2
 800cda2:	2209      	movs	r2, #9
 800cda4:	461f      	mov	r7, r3
 800cda6:	3308      	adds	r3, #8
 800cda8:	460c      	mov	r4, r1
 800cdaa:	fb93 f3f2 	sdiv	r3, r3, r2
 800cdae:	4606      	mov	r6, r0
 800cdb0:	2201      	movs	r2, #1
 800cdb2:	2100      	movs	r1, #0
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	db09      	blt.n	800cdcc <__s2b+0x30>
 800cdb8:	4630      	mov	r0, r6
 800cdba:	f7ff ff47 	bl	800cc4c <_Balloc>
 800cdbe:	b940      	cbnz	r0, 800cdd2 <__s2b+0x36>
 800cdc0:	4602      	mov	r2, r0
 800cdc2:	21ce      	movs	r1, #206	; 0xce
 800cdc4:	4b18      	ldr	r3, [pc, #96]	; (800ce28 <__s2b+0x8c>)
 800cdc6:	4819      	ldr	r0, [pc, #100]	; (800ce2c <__s2b+0x90>)
 800cdc8:	f000 fe7c 	bl	800dac4 <__assert_func>
 800cdcc:	0052      	lsls	r2, r2, #1
 800cdce:	3101      	adds	r1, #1
 800cdd0:	e7f0      	b.n	800cdb4 <__s2b+0x18>
 800cdd2:	9b08      	ldr	r3, [sp, #32]
 800cdd4:	2d09      	cmp	r5, #9
 800cdd6:	6143      	str	r3, [r0, #20]
 800cdd8:	f04f 0301 	mov.w	r3, #1
 800cddc:	6103      	str	r3, [r0, #16]
 800cdde:	dd16      	ble.n	800ce0e <__s2b+0x72>
 800cde0:	f104 0909 	add.w	r9, r4, #9
 800cde4:	46c8      	mov	r8, r9
 800cde6:	442c      	add	r4, r5
 800cde8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cdec:	4601      	mov	r1, r0
 800cdee:	220a      	movs	r2, #10
 800cdf0:	4630      	mov	r0, r6
 800cdf2:	3b30      	subs	r3, #48	; 0x30
 800cdf4:	f7ff ff8c 	bl	800cd10 <__multadd>
 800cdf8:	45a0      	cmp	r8, r4
 800cdfa:	d1f5      	bne.n	800cde8 <__s2b+0x4c>
 800cdfc:	f1a5 0408 	sub.w	r4, r5, #8
 800ce00:	444c      	add	r4, r9
 800ce02:	1b2d      	subs	r5, r5, r4
 800ce04:	1963      	adds	r3, r4, r5
 800ce06:	42bb      	cmp	r3, r7
 800ce08:	db04      	blt.n	800ce14 <__s2b+0x78>
 800ce0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce0e:	2509      	movs	r5, #9
 800ce10:	340a      	adds	r4, #10
 800ce12:	e7f6      	b.n	800ce02 <__s2b+0x66>
 800ce14:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ce18:	4601      	mov	r1, r0
 800ce1a:	220a      	movs	r2, #10
 800ce1c:	4630      	mov	r0, r6
 800ce1e:	3b30      	subs	r3, #48	; 0x30
 800ce20:	f7ff ff76 	bl	800cd10 <__multadd>
 800ce24:	e7ee      	b.n	800ce04 <__s2b+0x68>
 800ce26:	bf00      	nop
 800ce28:	0800e8f8 	.word	0x0800e8f8
 800ce2c:	0800e984 	.word	0x0800e984

0800ce30 <__hi0bits>:
 800ce30:	0c02      	lsrs	r2, r0, #16
 800ce32:	0412      	lsls	r2, r2, #16
 800ce34:	4603      	mov	r3, r0
 800ce36:	b9ca      	cbnz	r2, 800ce6c <__hi0bits+0x3c>
 800ce38:	0403      	lsls	r3, r0, #16
 800ce3a:	2010      	movs	r0, #16
 800ce3c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ce40:	bf04      	itt	eq
 800ce42:	021b      	lsleq	r3, r3, #8
 800ce44:	3008      	addeq	r0, #8
 800ce46:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ce4a:	bf04      	itt	eq
 800ce4c:	011b      	lsleq	r3, r3, #4
 800ce4e:	3004      	addeq	r0, #4
 800ce50:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ce54:	bf04      	itt	eq
 800ce56:	009b      	lsleq	r3, r3, #2
 800ce58:	3002      	addeq	r0, #2
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	db05      	blt.n	800ce6a <__hi0bits+0x3a>
 800ce5e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ce62:	f100 0001 	add.w	r0, r0, #1
 800ce66:	bf08      	it	eq
 800ce68:	2020      	moveq	r0, #32
 800ce6a:	4770      	bx	lr
 800ce6c:	2000      	movs	r0, #0
 800ce6e:	e7e5      	b.n	800ce3c <__hi0bits+0xc>

0800ce70 <__lo0bits>:
 800ce70:	6803      	ldr	r3, [r0, #0]
 800ce72:	4602      	mov	r2, r0
 800ce74:	f013 0007 	ands.w	r0, r3, #7
 800ce78:	d00b      	beq.n	800ce92 <__lo0bits+0x22>
 800ce7a:	07d9      	lsls	r1, r3, #31
 800ce7c:	d421      	bmi.n	800cec2 <__lo0bits+0x52>
 800ce7e:	0798      	lsls	r0, r3, #30
 800ce80:	bf49      	itett	mi
 800ce82:	085b      	lsrmi	r3, r3, #1
 800ce84:	089b      	lsrpl	r3, r3, #2
 800ce86:	2001      	movmi	r0, #1
 800ce88:	6013      	strmi	r3, [r2, #0]
 800ce8a:	bf5c      	itt	pl
 800ce8c:	2002      	movpl	r0, #2
 800ce8e:	6013      	strpl	r3, [r2, #0]
 800ce90:	4770      	bx	lr
 800ce92:	b299      	uxth	r1, r3
 800ce94:	b909      	cbnz	r1, 800ce9a <__lo0bits+0x2a>
 800ce96:	2010      	movs	r0, #16
 800ce98:	0c1b      	lsrs	r3, r3, #16
 800ce9a:	b2d9      	uxtb	r1, r3
 800ce9c:	b909      	cbnz	r1, 800cea2 <__lo0bits+0x32>
 800ce9e:	3008      	adds	r0, #8
 800cea0:	0a1b      	lsrs	r3, r3, #8
 800cea2:	0719      	lsls	r1, r3, #28
 800cea4:	bf04      	itt	eq
 800cea6:	091b      	lsreq	r3, r3, #4
 800cea8:	3004      	addeq	r0, #4
 800ceaa:	0799      	lsls	r1, r3, #30
 800ceac:	bf04      	itt	eq
 800ceae:	089b      	lsreq	r3, r3, #2
 800ceb0:	3002      	addeq	r0, #2
 800ceb2:	07d9      	lsls	r1, r3, #31
 800ceb4:	d403      	bmi.n	800cebe <__lo0bits+0x4e>
 800ceb6:	085b      	lsrs	r3, r3, #1
 800ceb8:	f100 0001 	add.w	r0, r0, #1
 800cebc:	d003      	beq.n	800cec6 <__lo0bits+0x56>
 800cebe:	6013      	str	r3, [r2, #0]
 800cec0:	4770      	bx	lr
 800cec2:	2000      	movs	r0, #0
 800cec4:	4770      	bx	lr
 800cec6:	2020      	movs	r0, #32
 800cec8:	4770      	bx	lr
	...

0800cecc <__i2b>:
 800cecc:	b510      	push	{r4, lr}
 800cece:	460c      	mov	r4, r1
 800ced0:	2101      	movs	r1, #1
 800ced2:	f7ff febb 	bl	800cc4c <_Balloc>
 800ced6:	4602      	mov	r2, r0
 800ced8:	b928      	cbnz	r0, 800cee6 <__i2b+0x1a>
 800ceda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cede:	4b04      	ldr	r3, [pc, #16]	; (800cef0 <__i2b+0x24>)
 800cee0:	4804      	ldr	r0, [pc, #16]	; (800cef4 <__i2b+0x28>)
 800cee2:	f000 fdef 	bl	800dac4 <__assert_func>
 800cee6:	2301      	movs	r3, #1
 800cee8:	6144      	str	r4, [r0, #20]
 800ceea:	6103      	str	r3, [r0, #16]
 800ceec:	bd10      	pop	{r4, pc}
 800ceee:	bf00      	nop
 800cef0:	0800e8f8 	.word	0x0800e8f8
 800cef4:	0800e984 	.word	0x0800e984

0800cef8 <__multiply>:
 800cef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cefc:	4691      	mov	r9, r2
 800cefe:	690a      	ldr	r2, [r1, #16]
 800cf00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cf04:	460c      	mov	r4, r1
 800cf06:	429a      	cmp	r2, r3
 800cf08:	bfbe      	ittt	lt
 800cf0a:	460b      	movlt	r3, r1
 800cf0c:	464c      	movlt	r4, r9
 800cf0e:	4699      	movlt	r9, r3
 800cf10:	6927      	ldr	r7, [r4, #16]
 800cf12:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cf16:	68a3      	ldr	r3, [r4, #8]
 800cf18:	6861      	ldr	r1, [r4, #4]
 800cf1a:	eb07 060a 	add.w	r6, r7, sl
 800cf1e:	42b3      	cmp	r3, r6
 800cf20:	b085      	sub	sp, #20
 800cf22:	bfb8      	it	lt
 800cf24:	3101      	addlt	r1, #1
 800cf26:	f7ff fe91 	bl	800cc4c <_Balloc>
 800cf2a:	b930      	cbnz	r0, 800cf3a <__multiply+0x42>
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	f240 115d 	movw	r1, #349	; 0x15d
 800cf32:	4b43      	ldr	r3, [pc, #268]	; (800d040 <__multiply+0x148>)
 800cf34:	4843      	ldr	r0, [pc, #268]	; (800d044 <__multiply+0x14c>)
 800cf36:	f000 fdc5 	bl	800dac4 <__assert_func>
 800cf3a:	f100 0514 	add.w	r5, r0, #20
 800cf3e:	462b      	mov	r3, r5
 800cf40:	2200      	movs	r2, #0
 800cf42:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cf46:	4543      	cmp	r3, r8
 800cf48:	d321      	bcc.n	800cf8e <__multiply+0x96>
 800cf4a:	f104 0314 	add.w	r3, r4, #20
 800cf4e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cf52:	f109 0314 	add.w	r3, r9, #20
 800cf56:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cf5a:	9202      	str	r2, [sp, #8]
 800cf5c:	1b3a      	subs	r2, r7, r4
 800cf5e:	3a15      	subs	r2, #21
 800cf60:	f022 0203 	bic.w	r2, r2, #3
 800cf64:	3204      	adds	r2, #4
 800cf66:	f104 0115 	add.w	r1, r4, #21
 800cf6a:	428f      	cmp	r7, r1
 800cf6c:	bf38      	it	cc
 800cf6e:	2204      	movcc	r2, #4
 800cf70:	9201      	str	r2, [sp, #4]
 800cf72:	9a02      	ldr	r2, [sp, #8]
 800cf74:	9303      	str	r3, [sp, #12]
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d80c      	bhi.n	800cf94 <__multiply+0x9c>
 800cf7a:	2e00      	cmp	r6, #0
 800cf7c:	dd03      	ble.n	800cf86 <__multiply+0x8e>
 800cf7e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d059      	beq.n	800d03a <__multiply+0x142>
 800cf86:	6106      	str	r6, [r0, #16]
 800cf88:	b005      	add	sp, #20
 800cf8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf8e:	f843 2b04 	str.w	r2, [r3], #4
 800cf92:	e7d8      	b.n	800cf46 <__multiply+0x4e>
 800cf94:	f8b3 a000 	ldrh.w	sl, [r3]
 800cf98:	f1ba 0f00 	cmp.w	sl, #0
 800cf9c:	d023      	beq.n	800cfe6 <__multiply+0xee>
 800cf9e:	46a9      	mov	r9, r5
 800cfa0:	f04f 0c00 	mov.w	ip, #0
 800cfa4:	f104 0e14 	add.w	lr, r4, #20
 800cfa8:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cfac:	f8d9 1000 	ldr.w	r1, [r9]
 800cfb0:	fa1f fb82 	uxth.w	fp, r2
 800cfb4:	b289      	uxth	r1, r1
 800cfb6:	fb0a 110b 	mla	r1, sl, fp, r1
 800cfba:	4461      	add	r1, ip
 800cfbc:	f8d9 c000 	ldr.w	ip, [r9]
 800cfc0:	0c12      	lsrs	r2, r2, #16
 800cfc2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800cfc6:	fb0a c202 	mla	r2, sl, r2, ip
 800cfca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cfce:	b289      	uxth	r1, r1
 800cfd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cfd4:	4577      	cmp	r7, lr
 800cfd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cfda:	f849 1b04 	str.w	r1, [r9], #4
 800cfde:	d8e3      	bhi.n	800cfa8 <__multiply+0xb0>
 800cfe0:	9a01      	ldr	r2, [sp, #4]
 800cfe2:	f845 c002 	str.w	ip, [r5, r2]
 800cfe6:	9a03      	ldr	r2, [sp, #12]
 800cfe8:	3304      	adds	r3, #4
 800cfea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cfee:	f1b9 0f00 	cmp.w	r9, #0
 800cff2:	d020      	beq.n	800d036 <__multiply+0x13e>
 800cff4:	46ae      	mov	lr, r5
 800cff6:	f04f 0a00 	mov.w	sl, #0
 800cffa:	6829      	ldr	r1, [r5, #0]
 800cffc:	f104 0c14 	add.w	ip, r4, #20
 800d000:	f8bc b000 	ldrh.w	fp, [ip]
 800d004:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d008:	b289      	uxth	r1, r1
 800d00a:	fb09 220b 	mla	r2, r9, fp, r2
 800d00e:	4492      	add	sl, r2
 800d010:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d014:	f84e 1b04 	str.w	r1, [lr], #4
 800d018:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d01c:	f8be 1000 	ldrh.w	r1, [lr]
 800d020:	0c12      	lsrs	r2, r2, #16
 800d022:	fb09 1102 	mla	r1, r9, r2, r1
 800d026:	4567      	cmp	r7, ip
 800d028:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d02c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d030:	d8e6      	bhi.n	800d000 <__multiply+0x108>
 800d032:	9a01      	ldr	r2, [sp, #4]
 800d034:	50a9      	str	r1, [r5, r2]
 800d036:	3504      	adds	r5, #4
 800d038:	e79b      	b.n	800cf72 <__multiply+0x7a>
 800d03a:	3e01      	subs	r6, #1
 800d03c:	e79d      	b.n	800cf7a <__multiply+0x82>
 800d03e:	bf00      	nop
 800d040:	0800e8f8 	.word	0x0800e8f8
 800d044:	0800e984 	.word	0x0800e984

0800d048 <__pow5mult>:
 800d048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d04c:	4615      	mov	r5, r2
 800d04e:	f012 0203 	ands.w	r2, r2, #3
 800d052:	4606      	mov	r6, r0
 800d054:	460f      	mov	r7, r1
 800d056:	d007      	beq.n	800d068 <__pow5mult+0x20>
 800d058:	4c25      	ldr	r4, [pc, #148]	; (800d0f0 <__pow5mult+0xa8>)
 800d05a:	3a01      	subs	r2, #1
 800d05c:	2300      	movs	r3, #0
 800d05e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d062:	f7ff fe55 	bl	800cd10 <__multadd>
 800d066:	4607      	mov	r7, r0
 800d068:	10ad      	asrs	r5, r5, #2
 800d06a:	d03d      	beq.n	800d0e8 <__pow5mult+0xa0>
 800d06c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d06e:	b97c      	cbnz	r4, 800d090 <__pow5mult+0x48>
 800d070:	2010      	movs	r0, #16
 800d072:	f7ff fdb5 	bl	800cbe0 <malloc>
 800d076:	4602      	mov	r2, r0
 800d078:	6270      	str	r0, [r6, #36]	; 0x24
 800d07a:	b928      	cbnz	r0, 800d088 <__pow5mult+0x40>
 800d07c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d080:	4b1c      	ldr	r3, [pc, #112]	; (800d0f4 <__pow5mult+0xac>)
 800d082:	481d      	ldr	r0, [pc, #116]	; (800d0f8 <__pow5mult+0xb0>)
 800d084:	f000 fd1e 	bl	800dac4 <__assert_func>
 800d088:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d08c:	6004      	str	r4, [r0, #0]
 800d08e:	60c4      	str	r4, [r0, #12]
 800d090:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d094:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d098:	b94c      	cbnz	r4, 800d0ae <__pow5mult+0x66>
 800d09a:	f240 2171 	movw	r1, #625	; 0x271
 800d09e:	4630      	mov	r0, r6
 800d0a0:	f7ff ff14 	bl	800cecc <__i2b>
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	4604      	mov	r4, r0
 800d0a8:	f8c8 0008 	str.w	r0, [r8, #8]
 800d0ac:	6003      	str	r3, [r0, #0]
 800d0ae:	f04f 0900 	mov.w	r9, #0
 800d0b2:	07eb      	lsls	r3, r5, #31
 800d0b4:	d50a      	bpl.n	800d0cc <__pow5mult+0x84>
 800d0b6:	4639      	mov	r1, r7
 800d0b8:	4622      	mov	r2, r4
 800d0ba:	4630      	mov	r0, r6
 800d0bc:	f7ff ff1c 	bl	800cef8 <__multiply>
 800d0c0:	4680      	mov	r8, r0
 800d0c2:	4639      	mov	r1, r7
 800d0c4:	4630      	mov	r0, r6
 800d0c6:	f7ff fe01 	bl	800cccc <_Bfree>
 800d0ca:	4647      	mov	r7, r8
 800d0cc:	106d      	asrs	r5, r5, #1
 800d0ce:	d00b      	beq.n	800d0e8 <__pow5mult+0xa0>
 800d0d0:	6820      	ldr	r0, [r4, #0]
 800d0d2:	b938      	cbnz	r0, 800d0e4 <__pow5mult+0x9c>
 800d0d4:	4622      	mov	r2, r4
 800d0d6:	4621      	mov	r1, r4
 800d0d8:	4630      	mov	r0, r6
 800d0da:	f7ff ff0d 	bl	800cef8 <__multiply>
 800d0de:	6020      	str	r0, [r4, #0]
 800d0e0:	f8c0 9000 	str.w	r9, [r0]
 800d0e4:	4604      	mov	r4, r0
 800d0e6:	e7e4      	b.n	800d0b2 <__pow5mult+0x6a>
 800d0e8:	4638      	mov	r0, r7
 800d0ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0ee:	bf00      	nop
 800d0f0:	0800ead0 	.word	0x0800ead0
 800d0f4:	0800e886 	.word	0x0800e886
 800d0f8:	0800e984 	.word	0x0800e984

0800d0fc <__lshift>:
 800d0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d100:	460c      	mov	r4, r1
 800d102:	4607      	mov	r7, r0
 800d104:	4691      	mov	r9, r2
 800d106:	6923      	ldr	r3, [r4, #16]
 800d108:	6849      	ldr	r1, [r1, #4]
 800d10a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d10e:	68a3      	ldr	r3, [r4, #8]
 800d110:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d114:	f108 0601 	add.w	r6, r8, #1
 800d118:	42b3      	cmp	r3, r6
 800d11a:	db0b      	blt.n	800d134 <__lshift+0x38>
 800d11c:	4638      	mov	r0, r7
 800d11e:	f7ff fd95 	bl	800cc4c <_Balloc>
 800d122:	4605      	mov	r5, r0
 800d124:	b948      	cbnz	r0, 800d13a <__lshift+0x3e>
 800d126:	4602      	mov	r2, r0
 800d128:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d12c:	4b29      	ldr	r3, [pc, #164]	; (800d1d4 <__lshift+0xd8>)
 800d12e:	482a      	ldr	r0, [pc, #168]	; (800d1d8 <__lshift+0xdc>)
 800d130:	f000 fcc8 	bl	800dac4 <__assert_func>
 800d134:	3101      	adds	r1, #1
 800d136:	005b      	lsls	r3, r3, #1
 800d138:	e7ee      	b.n	800d118 <__lshift+0x1c>
 800d13a:	2300      	movs	r3, #0
 800d13c:	f100 0114 	add.w	r1, r0, #20
 800d140:	f100 0210 	add.w	r2, r0, #16
 800d144:	4618      	mov	r0, r3
 800d146:	4553      	cmp	r3, sl
 800d148:	db37      	blt.n	800d1ba <__lshift+0xbe>
 800d14a:	6920      	ldr	r0, [r4, #16]
 800d14c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d150:	f104 0314 	add.w	r3, r4, #20
 800d154:	f019 091f 	ands.w	r9, r9, #31
 800d158:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d15c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d160:	d02f      	beq.n	800d1c2 <__lshift+0xc6>
 800d162:	468a      	mov	sl, r1
 800d164:	f04f 0c00 	mov.w	ip, #0
 800d168:	f1c9 0e20 	rsb	lr, r9, #32
 800d16c:	681a      	ldr	r2, [r3, #0]
 800d16e:	fa02 f209 	lsl.w	r2, r2, r9
 800d172:	ea42 020c 	orr.w	r2, r2, ip
 800d176:	f84a 2b04 	str.w	r2, [sl], #4
 800d17a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d17e:	4298      	cmp	r0, r3
 800d180:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d184:	d8f2      	bhi.n	800d16c <__lshift+0x70>
 800d186:	1b03      	subs	r3, r0, r4
 800d188:	3b15      	subs	r3, #21
 800d18a:	f023 0303 	bic.w	r3, r3, #3
 800d18e:	3304      	adds	r3, #4
 800d190:	f104 0215 	add.w	r2, r4, #21
 800d194:	4290      	cmp	r0, r2
 800d196:	bf38      	it	cc
 800d198:	2304      	movcc	r3, #4
 800d19a:	f841 c003 	str.w	ip, [r1, r3]
 800d19e:	f1bc 0f00 	cmp.w	ip, #0
 800d1a2:	d001      	beq.n	800d1a8 <__lshift+0xac>
 800d1a4:	f108 0602 	add.w	r6, r8, #2
 800d1a8:	3e01      	subs	r6, #1
 800d1aa:	4638      	mov	r0, r7
 800d1ac:	4621      	mov	r1, r4
 800d1ae:	612e      	str	r6, [r5, #16]
 800d1b0:	f7ff fd8c 	bl	800cccc <_Bfree>
 800d1b4:	4628      	mov	r0, r5
 800d1b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800d1be:	3301      	adds	r3, #1
 800d1c0:	e7c1      	b.n	800d146 <__lshift+0x4a>
 800d1c2:	3904      	subs	r1, #4
 800d1c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1c8:	4298      	cmp	r0, r3
 800d1ca:	f841 2f04 	str.w	r2, [r1, #4]!
 800d1ce:	d8f9      	bhi.n	800d1c4 <__lshift+0xc8>
 800d1d0:	e7ea      	b.n	800d1a8 <__lshift+0xac>
 800d1d2:	bf00      	nop
 800d1d4:	0800e8f8 	.word	0x0800e8f8
 800d1d8:	0800e984 	.word	0x0800e984

0800d1dc <__mcmp>:
 800d1dc:	4603      	mov	r3, r0
 800d1de:	690a      	ldr	r2, [r1, #16]
 800d1e0:	6900      	ldr	r0, [r0, #16]
 800d1e2:	b530      	push	{r4, r5, lr}
 800d1e4:	1a80      	subs	r0, r0, r2
 800d1e6:	d10d      	bne.n	800d204 <__mcmp+0x28>
 800d1e8:	3314      	adds	r3, #20
 800d1ea:	3114      	adds	r1, #20
 800d1ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d1f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d1f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d1f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d1fc:	4295      	cmp	r5, r2
 800d1fe:	d002      	beq.n	800d206 <__mcmp+0x2a>
 800d200:	d304      	bcc.n	800d20c <__mcmp+0x30>
 800d202:	2001      	movs	r0, #1
 800d204:	bd30      	pop	{r4, r5, pc}
 800d206:	42a3      	cmp	r3, r4
 800d208:	d3f4      	bcc.n	800d1f4 <__mcmp+0x18>
 800d20a:	e7fb      	b.n	800d204 <__mcmp+0x28>
 800d20c:	f04f 30ff 	mov.w	r0, #4294967295
 800d210:	e7f8      	b.n	800d204 <__mcmp+0x28>
	...

0800d214 <__mdiff>:
 800d214:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d218:	460d      	mov	r5, r1
 800d21a:	4607      	mov	r7, r0
 800d21c:	4611      	mov	r1, r2
 800d21e:	4628      	mov	r0, r5
 800d220:	4614      	mov	r4, r2
 800d222:	f7ff ffdb 	bl	800d1dc <__mcmp>
 800d226:	1e06      	subs	r6, r0, #0
 800d228:	d111      	bne.n	800d24e <__mdiff+0x3a>
 800d22a:	4631      	mov	r1, r6
 800d22c:	4638      	mov	r0, r7
 800d22e:	f7ff fd0d 	bl	800cc4c <_Balloc>
 800d232:	4602      	mov	r2, r0
 800d234:	b928      	cbnz	r0, 800d242 <__mdiff+0x2e>
 800d236:	f240 2132 	movw	r1, #562	; 0x232
 800d23a:	4b3a      	ldr	r3, [pc, #232]	; (800d324 <__mdiff+0x110>)
 800d23c:	483a      	ldr	r0, [pc, #232]	; (800d328 <__mdiff+0x114>)
 800d23e:	f000 fc41 	bl	800dac4 <__assert_func>
 800d242:	2301      	movs	r3, #1
 800d244:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d248:	4610      	mov	r0, r2
 800d24a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d24e:	bfa4      	itt	ge
 800d250:	4623      	movge	r3, r4
 800d252:	462c      	movge	r4, r5
 800d254:	4638      	mov	r0, r7
 800d256:	6861      	ldr	r1, [r4, #4]
 800d258:	bfa6      	itte	ge
 800d25a:	461d      	movge	r5, r3
 800d25c:	2600      	movge	r6, #0
 800d25e:	2601      	movlt	r6, #1
 800d260:	f7ff fcf4 	bl	800cc4c <_Balloc>
 800d264:	4602      	mov	r2, r0
 800d266:	b918      	cbnz	r0, 800d270 <__mdiff+0x5c>
 800d268:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d26c:	4b2d      	ldr	r3, [pc, #180]	; (800d324 <__mdiff+0x110>)
 800d26e:	e7e5      	b.n	800d23c <__mdiff+0x28>
 800d270:	f102 0814 	add.w	r8, r2, #20
 800d274:	46c2      	mov	sl, r8
 800d276:	f04f 0c00 	mov.w	ip, #0
 800d27a:	6927      	ldr	r7, [r4, #16]
 800d27c:	60c6      	str	r6, [r0, #12]
 800d27e:	692e      	ldr	r6, [r5, #16]
 800d280:	f104 0014 	add.w	r0, r4, #20
 800d284:	f105 0914 	add.w	r9, r5, #20
 800d288:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800d28c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d290:	3410      	adds	r4, #16
 800d292:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800d296:	f859 3b04 	ldr.w	r3, [r9], #4
 800d29a:	fa1f f18b 	uxth.w	r1, fp
 800d29e:	448c      	add	ip, r1
 800d2a0:	b299      	uxth	r1, r3
 800d2a2:	0c1b      	lsrs	r3, r3, #16
 800d2a4:	ebac 0101 	sub.w	r1, ip, r1
 800d2a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d2ac:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d2b0:	b289      	uxth	r1, r1
 800d2b2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d2b6:	454e      	cmp	r6, r9
 800d2b8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d2bc:	f84a 3b04 	str.w	r3, [sl], #4
 800d2c0:	d8e7      	bhi.n	800d292 <__mdiff+0x7e>
 800d2c2:	1b73      	subs	r3, r6, r5
 800d2c4:	3b15      	subs	r3, #21
 800d2c6:	f023 0303 	bic.w	r3, r3, #3
 800d2ca:	3515      	adds	r5, #21
 800d2cc:	3304      	adds	r3, #4
 800d2ce:	42ae      	cmp	r6, r5
 800d2d0:	bf38      	it	cc
 800d2d2:	2304      	movcc	r3, #4
 800d2d4:	4418      	add	r0, r3
 800d2d6:	4443      	add	r3, r8
 800d2d8:	461e      	mov	r6, r3
 800d2da:	4605      	mov	r5, r0
 800d2dc:	4575      	cmp	r5, lr
 800d2de:	d30e      	bcc.n	800d2fe <__mdiff+0xea>
 800d2e0:	f10e 0103 	add.w	r1, lr, #3
 800d2e4:	1a09      	subs	r1, r1, r0
 800d2e6:	f021 0103 	bic.w	r1, r1, #3
 800d2ea:	3803      	subs	r0, #3
 800d2ec:	4586      	cmp	lr, r0
 800d2ee:	bf38      	it	cc
 800d2f0:	2100      	movcc	r1, #0
 800d2f2:	4419      	add	r1, r3
 800d2f4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d2f8:	b18b      	cbz	r3, 800d31e <__mdiff+0x10a>
 800d2fa:	6117      	str	r7, [r2, #16]
 800d2fc:	e7a4      	b.n	800d248 <__mdiff+0x34>
 800d2fe:	f855 8b04 	ldr.w	r8, [r5], #4
 800d302:	fa1f f188 	uxth.w	r1, r8
 800d306:	4461      	add	r1, ip
 800d308:	140c      	asrs	r4, r1, #16
 800d30a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d30e:	b289      	uxth	r1, r1
 800d310:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d314:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800d318:	f846 1b04 	str.w	r1, [r6], #4
 800d31c:	e7de      	b.n	800d2dc <__mdiff+0xc8>
 800d31e:	3f01      	subs	r7, #1
 800d320:	e7e8      	b.n	800d2f4 <__mdiff+0xe0>
 800d322:	bf00      	nop
 800d324:	0800e8f8 	.word	0x0800e8f8
 800d328:	0800e984 	.word	0x0800e984

0800d32c <__ulp>:
 800d32c:	4b11      	ldr	r3, [pc, #68]	; (800d374 <__ulp+0x48>)
 800d32e:	400b      	ands	r3, r1
 800d330:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d334:	2b00      	cmp	r3, #0
 800d336:	dd02      	ble.n	800d33e <__ulp+0x12>
 800d338:	2000      	movs	r0, #0
 800d33a:	4619      	mov	r1, r3
 800d33c:	4770      	bx	lr
 800d33e:	425b      	negs	r3, r3
 800d340:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d344:	f04f 0000 	mov.w	r0, #0
 800d348:	f04f 0100 	mov.w	r1, #0
 800d34c:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d350:	da04      	bge.n	800d35c <__ulp+0x30>
 800d352:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d356:	fa43 f102 	asr.w	r1, r3, r2
 800d35a:	4770      	bx	lr
 800d35c:	f1a2 0314 	sub.w	r3, r2, #20
 800d360:	2b1e      	cmp	r3, #30
 800d362:	bfd6      	itet	le
 800d364:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d368:	2301      	movgt	r3, #1
 800d36a:	fa22 f303 	lsrle.w	r3, r2, r3
 800d36e:	4618      	mov	r0, r3
 800d370:	4770      	bx	lr
 800d372:	bf00      	nop
 800d374:	7ff00000 	.word	0x7ff00000

0800d378 <__b2d>:
 800d378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d37c:	6907      	ldr	r7, [r0, #16]
 800d37e:	f100 0914 	add.w	r9, r0, #20
 800d382:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800d386:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800d38a:	f1a7 0804 	sub.w	r8, r7, #4
 800d38e:	4630      	mov	r0, r6
 800d390:	f7ff fd4e 	bl	800ce30 <__hi0bits>
 800d394:	f1c0 0320 	rsb	r3, r0, #32
 800d398:	280a      	cmp	r0, #10
 800d39a:	600b      	str	r3, [r1, #0]
 800d39c:	491f      	ldr	r1, [pc, #124]	; (800d41c <__b2d+0xa4>)
 800d39e:	dc17      	bgt.n	800d3d0 <__b2d+0x58>
 800d3a0:	45c1      	cmp	r9, r8
 800d3a2:	bf28      	it	cs
 800d3a4:	2200      	movcs	r2, #0
 800d3a6:	f1c0 0c0b 	rsb	ip, r0, #11
 800d3aa:	fa26 f30c 	lsr.w	r3, r6, ip
 800d3ae:	bf38      	it	cc
 800d3b0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d3b4:	ea43 0501 	orr.w	r5, r3, r1
 800d3b8:	f100 0315 	add.w	r3, r0, #21
 800d3bc:	fa06 f303 	lsl.w	r3, r6, r3
 800d3c0:	fa22 f20c 	lsr.w	r2, r2, ip
 800d3c4:	ea43 0402 	orr.w	r4, r3, r2
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	4629      	mov	r1, r5
 800d3cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3d0:	45c1      	cmp	r9, r8
 800d3d2:	bf2e      	itee	cs
 800d3d4:	2200      	movcs	r2, #0
 800d3d6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d3da:	f1a7 0808 	subcc.w	r8, r7, #8
 800d3de:	f1b0 030b 	subs.w	r3, r0, #11
 800d3e2:	d016      	beq.n	800d412 <__b2d+0x9a>
 800d3e4:	f1c3 0720 	rsb	r7, r3, #32
 800d3e8:	fa22 f107 	lsr.w	r1, r2, r7
 800d3ec:	45c8      	cmp	r8, r9
 800d3ee:	fa06 f603 	lsl.w	r6, r6, r3
 800d3f2:	ea46 0601 	orr.w	r6, r6, r1
 800d3f6:	bf94      	ite	ls
 800d3f8:	2100      	movls	r1, #0
 800d3fa:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800d3fe:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800d402:	fa02 f003 	lsl.w	r0, r2, r3
 800d406:	40f9      	lsrs	r1, r7
 800d408:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d40c:	ea40 0401 	orr.w	r4, r0, r1
 800d410:	e7da      	b.n	800d3c8 <__b2d+0x50>
 800d412:	4614      	mov	r4, r2
 800d414:	ea46 0501 	orr.w	r5, r6, r1
 800d418:	e7d6      	b.n	800d3c8 <__b2d+0x50>
 800d41a:	bf00      	nop
 800d41c:	3ff00000 	.word	0x3ff00000

0800d420 <__d2b>:
 800d420:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d424:	2101      	movs	r1, #1
 800d426:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800d42a:	4690      	mov	r8, r2
 800d42c:	461d      	mov	r5, r3
 800d42e:	f7ff fc0d 	bl	800cc4c <_Balloc>
 800d432:	4604      	mov	r4, r0
 800d434:	b930      	cbnz	r0, 800d444 <__d2b+0x24>
 800d436:	4602      	mov	r2, r0
 800d438:	f240 310a 	movw	r1, #778	; 0x30a
 800d43c:	4b24      	ldr	r3, [pc, #144]	; (800d4d0 <__d2b+0xb0>)
 800d43e:	4825      	ldr	r0, [pc, #148]	; (800d4d4 <__d2b+0xb4>)
 800d440:	f000 fb40 	bl	800dac4 <__assert_func>
 800d444:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d448:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800d44c:	bb2d      	cbnz	r5, 800d49a <__d2b+0x7a>
 800d44e:	9301      	str	r3, [sp, #4]
 800d450:	f1b8 0300 	subs.w	r3, r8, #0
 800d454:	d026      	beq.n	800d4a4 <__d2b+0x84>
 800d456:	4668      	mov	r0, sp
 800d458:	9300      	str	r3, [sp, #0]
 800d45a:	f7ff fd09 	bl	800ce70 <__lo0bits>
 800d45e:	9900      	ldr	r1, [sp, #0]
 800d460:	b1f0      	cbz	r0, 800d4a0 <__d2b+0x80>
 800d462:	9a01      	ldr	r2, [sp, #4]
 800d464:	f1c0 0320 	rsb	r3, r0, #32
 800d468:	fa02 f303 	lsl.w	r3, r2, r3
 800d46c:	430b      	orrs	r3, r1
 800d46e:	40c2      	lsrs	r2, r0
 800d470:	6163      	str	r3, [r4, #20]
 800d472:	9201      	str	r2, [sp, #4]
 800d474:	9b01      	ldr	r3, [sp, #4]
 800d476:	2b00      	cmp	r3, #0
 800d478:	bf14      	ite	ne
 800d47a:	2102      	movne	r1, #2
 800d47c:	2101      	moveq	r1, #1
 800d47e:	61a3      	str	r3, [r4, #24]
 800d480:	6121      	str	r1, [r4, #16]
 800d482:	b1c5      	cbz	r5, 800d4b6 <__d2b+0x96>
 800d484:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d488:	4405      	add	r5, r0
 800d48a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d48e:	603d      	str	r5, [r7, #0]
 800d490:	6030      	str	r0, [r6, #0]
 800d492:	4620      	mov	r0, r4
 800d494:	b002      	add	sp, #8
 800d496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d49a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d49e:	e7d6      	b.n	800d44e <__d2b+0x2e>
 800d4a0:	6161      	str	r1, [r4, #20]
 800d4a2:	e7e7      	b.n	800d474 <__d2b+0x54>
 800d4a4:	a801      	add	r0, sp, #4
 800d4a6:	f7ff fce3 	bl	800ce70 <__lo0bits>
 800d4aa:	2101      	movs	r1, #1
 800d4ac:	9b01      	ldr	r3, [sp, #4]
 800d4ae:	6121      	str	r1, [r4, #16]
 800d4b0:	6163      	str	r3, [r4, #20]
 800d4b2:	3020      	adds	r0, #32
 800d4b4:	e7e5      	b.n	800d482 <__d2b+0x62>
 800d4b6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800d4ba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d4be:	6038      	str	r0, [r7, #0]
 800d4c0:	6918      	ldr	r0, [r3, #16]
 800d4c2:	f7ff fcb5 	bl	800ce30 <__hi0bits>
 800d4c6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800d4ca:	6031      	str	r1, [r6, #0]
 800d4cc:	e7e1      	b.n	800d492 <__d2b+0x72>
 800d4ce:	bf00      	nop
 800d4d0:	0800e8f8 	.word	0x0800e8f8
 800d4d4:	0800e984 	.word	0x0800e984

0800d4d8 <__ratio>:
 800d4d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4dc:	4688      	mov	r8, r1
 800d4de:	4669      	mov	r1, sp
 800d4e0:	4681      	mov	r9, r0
 800d4e2:	f7ff ff49 	bl	800d378 <__b2d>
 800d4e6:	460f      	mov	r7, r1
 800d4e8:	4604      	mov	r4, r0
 800d4ea:	460d      	mov	r5, r1
 800d4ec:	4640      	mov	r0, r8
 800d4ee:	a901      	add	r1, sp, #4
 800d4f0:	f7ff ff42 	bl	800d378 <__b2d>
 800d4f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d4f8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d4fc:	468b      	mov	fp, r1
 800d4fe:	eba3 0c02 	sub.w	ip, r3, r2
 800d502:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d506:	1a9b      	subs	r3, r3, r2
 800d508:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	bfd5      	itete	le
 800d510:	460a      	movle	r2, r1
 800d512:	462a      	movgt	r2, r5
 800d514:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d518:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d51c:	bfd8      	it	le
 800d51e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d522:	465b      	mov	r3, fp
 800d524:	4602      	mov	r2, r0
 800d526:	4639      	mov	r1, r7
 800d528:	4620      	mov	r0, r4
 800d52a:	f7f3 f8ff 	bl	800072c <__aeabi_ddiv>
 800d52e:	b003      	add	sp, #12
 800d530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d534 <__copybits>:
 800d534:	3901      	subs	r1, #1
 800d536:	b570      	push	{r4, r5, r6, lr}
 800d538:	1149      	asrs	r1, r1, #5
 800d53a:	6914      	ldr	r4, [r2, #16]
 800d53c:	3101      	adds	r1, #1
 800d53e:	f102 0314 	add.w	r3, r2, #20
 800d542:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d546:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d54a:	1f05      	subs	r5, r0, #4
 800d54c:	42a3      	cmp	r3, r4
 800d54e:	d30c      	bcc.n	800d56a <__copybits+0x36>
 800d550:	1aa3      	subs	r3, r4, r2
 800d552:	3b11      	subs	r3, #17
 800d554:	f023 0303 	bic.w	r3, r3, #3
 800d558:	3211      	adds	r2, #17
 800d55a:	42a2      	cmp	r2, r4
 800d55c:	bf88      	it	hi
 800d55e:	2300      	movhi	r3, #0
 800d560:	4418      	add	r0, r3
 800d562:	2300      	movs	r3, #0
 800d564:	4288      	cmp	r0, r1
 800d566:	d305      	bcc.n	800d574 <__copybits+0x40>
 800d568:	bd70      	pop	{r4, r5, r6, pc}
 800d56a:	f853 6b04 	ldr.w	r6, [r3], #4
 800d56e:	f845 6f04 	str.w	r6, [r5, #4]!
 800d572:	e7eb      	b.n	800d54c <__copybits+0x18>
 800d574:	f840 3b04 	str.w	r3, [r0], #4
 800d578:	e7f4      	b.n	800d564 <__copybits+0x30>

0800d57a <__any_on>:
 800d57a:	f100 0214 	add.w	r2, r0, #20
 800d57e:	6900      	ldr	r0, [r0, #16]
 800d580:	114b      	asrs	r3, r1, #5
 800d582:	4298      	cmp	r0, r3
 800d584:	b510      	push	{r4, lr}
 800d586:	db11      	blt.n	800d5ac <__any_on+0x32>
 800d588:	dd0a      	ble.n	800d5a0 <__any_on+0x26>
 800d58a:	f011 011f 	ands.w	r1, r1, #31
 800d58e:	d007      	beq.n	800d5a0 <__any_on+0x26>
 800d590:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d594:	fa24 f001 	lsr.w	r0, r4, r1
 800d598:	fa00 f101 	lsl.w	r1, r0, r1
 800d59c:	428c      	cmp	r4, r1
 800d59e:	d10b      	bne.n	800d5b8 <__any_on+0x3e>
 800d5a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	d803      	bhi.n	800d5b0 <__any_on+0x36>
 800d5a8:	2000      	movs	r0, #0
 800d5aa:	bd10      	pop	{r4, pc}
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	e7f7      	b.n	800d5a0 <__any_on+0x26>
 800d5b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d5b4:	2900      	cmp	r1, #0
 800d5b6:	d0f5      	beq.n	800d5a4 <__any_on+0x2a>
 800d5b8:	2001      	movs	r0, #1
 800d5ba:	e7f6      	b.n	800d5aa <__any_on+0x30>

0800d5bc <_calloc_r>:
 800d5bc:	b570      	push	{r4, r5, r6, lr}
 800d5be:	fba1 5402 	umull	r5, r4, r1, r2
 800d5c2:	b934      	cbnz	r4, 800d5d2 <_calloc_r+0x16>
 800d5c4:	4629      	mov	r1, r5
 800d5c6:	f000 f875 	bl	800d6b4 <_malloc_r>
 800d5ca:	4606      	mov	r6, r0
 800d5cc:	b928      	cbnz	r0, 800d5da <_calloc_r+0x1e>
 800d5ce:	4630      	mov	r0, r6
 800d5d0:	bd70      	pop	{r4, r5, r6, pc}
 800d5d2:	220c      	movs	r2, #12
 800d5d4:	2600      	movs	r6, #0
 800d5d6:	6002      	str	r2, [r0, #0]
 800d5d8:	e7f9      	b.n	800d5ce <_calloc_r+0x12>
 800d5da:	462a      	mov	r2, r5
 800d5dc:	4621      	mov	r1, r4
 800d5de:	f7fc fbf3 	bl	8009dc8 <memset>
 800d5e2:	e7f4      	b.n	800d5ce <_calloc_r+0x12>

0800d5e4 <_free_r>:
 800d5e4:	b538      	push	{r3, r4, r5, lr}
 800d5e6:	4605      	mov	r5, r0
 800d5e8:	2900      	cmp	r1, #0
 800d5ea:	d040      	beq.n	800d66e <_free_r+0x8a>
 800d5ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5f0:	1f0c      	subs	r4, r1, #4
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	bfb8      	it	lt
 800d5f6:	18e4      	addlt	r4, r4, r3
 800d5f8:	f000 faae 	bl	800db58 <__malloc_lock>
 800d5fc:	4a1c      	ldr	r2, [pc, #112]	; (800d670 <_free_r+0x8c>)
 800d5fe:	6813      	ldr	r3, [r2, #0]
 800d600:	b933      	cbnz	r3, 800d610 <_free_r+0x2c>
 800d602:	6063      	str	r3, [r4, #4]
 800d604:	6014      	str	r4, [r2, #0]
 800d606:	4628      	mov	r0, r5
 800d608:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d60c:	f000 baaa 	b.w	800db64 <__malloc_unlock>
 800d610:	42a3      	cmp	r3, r4
 800d612:	d908      	bls.n	800d626 <_free_r+0x42>
 800d614:	6820      	ldr	r0, [r4, #0]
 800d616:	1821      	adds	r1, r4, r0
 800d618:	428b      	cmp	r3, r1
 800d61a:	bf01      	itttt	eq
 800d61c:	6819      	ldreq	r1, [r3, #0]
 800d61e:	685b      	ldreq	r3, [r3, #4]
 800d620:	1809      	addeq	r1, r1, r0
 800d622:	6021      	streq	r1, [r4, #0]
 800d624:	e7ed      	b.n	800d602 <_free_r+0x1e>
 800d626:	461a      	mov	r2, r3
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	b10b      	cbz	r3, 800d630 <_free_r+0x4c>
 800d62c:	42a3      	cmp	r3, r4
 800d62e:	d9fa      	bls.n	800d626 <_free_r+0x42>
 800d630:	6811      	ldr	r1, [r2, #0]
 800d632:	1850      	adds	r0, r2, r1
 800d634:	42a0      	cmp	r0, r4
 800d636:	d10b      	bne.n	800d650 <_free_r+0x6c>
 800d638:	6820      	ldr	r0, [r4, #0]
 800d63a:	4401      	add	r1, r0
 800d63c:	1850      	adds	r0, r2, r1
 800d63e:	4283      	cmp	r3, r0
 800d640:	6011      	str	r1, [r2, #0]
 800d642:	d1e0      	bne.n	800d606 <_free_r+0x22>
 800d644:	6818      	ldr	r0, [r3, #0]
 800d646:	685b      	ldr	r3, [r3, #4]
 800d648:	4401      	add	r1, r0
 800d64a:	6011      	str	r1, [r2, #0]
 800d64c:	6053      	str	r3, [r2, #4]
 800d64e:	e7da      	b.n	800d606 <_free_r+0x22>
 800d650:	d902      	bls.n	800d658 <_free_r+0x74>
 800d652:	230c      	movs	r3, #12
 800d654:	602b      	str	r3, [r5, #0]
 800d656:	e7d6      	b.n	800d606 <_free_r+0x22>
 800d658:	6820      	ldr	r0, [r4, #0]
 800d65a:	1821      	adds	r1, r4, r0
 800d65c:	428b      	cmp	r3, r1
 800d65e:	bf01      	itttt	eq
 800d660:	6819      	ldreq	r1, [r3, #0]
 800d662:	685b      	ldreq	r3, [r3, #4]
 800d664:	1809      	addeq	r1, r1, r0
 800d666:	6021      	streq	r1, [r4, #0]
 800d668:	6063      	str	r3, [r4, #4]
 800d66a:	6054      	str	r4, [r2, #4]
 800d66c:	e7cb      	b.n	800d606 <_free_r+0x22>
 800d66e:	bd38      	pop	{r3, r4, r5, pc}
 800d670:	2000160c 	.word	0x2000160c

0800d674 <sbrk_aligned>:
 800d674:	b570      	push	{r4, r5, r6, lr}
 800d676:	4e0e      	ldr	r6, [pc, #56]	; (800d6b0 <sbrk_aligned+0x3c>)
 800d678:	460c      	mov	r4, r1
 800d67a:	6831      	ldr	r1, [r6, #0]
 800d67c:	4605      	mov	r5, r0
 800d67e:	b911      	cbnz	r1, 800d686 <sbrk_aligned+0x12>
 800d680:	f000 f9ee 	bl	800da60 <_sbrk_r>
 800d684:	6030      	str	r0, [r6, #0]
 800d686:	4621      	mov	r1, r4
 800d688:	4628      	mov	r0, r5
 800d68a:	f000 f9e9 	bl	800da60 <_sbrk_r>
 800d68e:	1c43      	adds	r3, r0, #1
 800d690:	d00a      	beq.n	800d6a8 <sbrk_aligned+0x34>
 800d692:	1cc4      	adds	r4, r0, #3
 800d694:	f024 0403 	bic.w	r4, r4, #3
 800d698:	42a0      	cmp	r0, r4
 800d69a:	d007      	beq.n	800d6ac <sbrk_aligned+0x38>
 800d69c:	1a21      	subs	r1, r4, r0
 800d69e:	4628      	mov	r0, r5
 800d6a0:	f000 f9de 	bl	800da60 <_sbrk_r>
 800d6a4:	3001      	adds	r0, #1
 800d6a6:	d101      	bne.n	800d6ac <sbrk_aligned+0x38>
 800d6a8:	f04f 34ff 	mov.w	r4, #4294967295
 800d6ac:	4620      	mov	r0, r4
 800d6ae:	bd70      	pop	{r4, r5, r6, pc}
 800d6b0:	20001610 	.word	0x20001610

0800d6b4 <_malloc_r>:
 800d6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6b8:	1ccd      	adds	r5, r1, #3
 800d6ba:	f025 0503 	bic.w	r5, r5, #3
 800d6be:	3508      	adds	r5, #8
 800d6c0:	2d0c      	cmp	r5, #12
 800d6c2:	bf38      	it	cc
 800d6c4:	250c      	movcc	r5, #12
 800d6c6:	2d00      	cmp	r5, #0
 800d6c8:	4607      	mov	r7, r0
 800d6ca:	db01      	blt.n	800d6d0 <_malloc_r+0x1c>
 800d6cc:	42a9      	cmp	r1, r5
 800d6ce:	d905      	bls.n	800d6dc <_malloc_r+0x28>
 800d6d0:	230c      	movs	r3, #12
 800d6d2:	2600      	movs	r6, #0
 800d6d4:	603b      	str	r3, [r7, #0]
 800d6d6:	4630      	mov	r0, r6
 800d6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6dc:	4e2e      	ldr	r6, [pc, #184]	; (800d798 <_malloc_r+0xe4>)
 800d6de:	f000 fa3b 	bl	800db58 <__malloc_lock>
 800d6e2:	6833      	ldr	r3, [r6, #0]
 800d6e4:	461c      	mov	r4, r3
 800d6e6:	bb34      	cbnz	r4, 800d736 <_malloc_r+0x82>
 800d6e8:	4629      	mov	r1, r5
 800d6ea:	4638      	mov	r0, r7
 800d6ec:	f7ff ffc2 	bl	800d674 <sbrk_aligned>
 800d6f0:	1c43      	adds	r3, r0, #1
 800d6f2:	4604      	mov	r4, r0
 800d6f4:	d14d      	bne.n	800d792 <_malloc_r+0xde>
 800d6f6:	6834      	ldr	r4, [r6, #0]
 800d6f8:	4626      	mov	r6, r4
 800d6fa:	2e00      	cmp	r6, #0
 800d6fc:	d140      	bne.n	800d780 <_malloc_r+0xcc>
 800d6fe:	6823      	ldr	r3, [r4, #0]
 800d700:	4631      	mov	r1, r6
 800d702:	4638      	mov	r0, r7
 800d704:	eb04 0803 	add.w	r8, r4, r3
 800d708:	f000 f9aa 	bl	800da60 <_sbrk_r>
 800d70c:	4580      	cmp	r8, r0
 800d70e:	d13a      	bne.n	800d786 <_malloc_r+0xd2>
 800d710:	6821      	ldr	r1, [r4, #0]
 800d712:	3503      	adds	r5, #3
 800d714:	1a6d      	subs	r5, r5, r1
 800d716:	f025 0503 	bic.w	r5, r5, #3
 800d71a:	3508      	adds	r5, #8
 800d71c:	2d0c      	cmp	r5, #12
 800d71e:	bf38      	it	cc
 800d720:	250c      	movcc	r5, #12
 800d722:	4638      	mov	r0, r7
 800d724:	4629      	mov	r1, r5
 800d726:	f7ff ffa5 	bl	800d674 <sbrk_aligned>
 800d72a:	3001      	adds	r0, #1
 800d72c:	d02b      	beq.n	800d786 <_malloc_r+0xd2>
 800d72e:	6823      	ldr	r3, [r4, #0]
 800d730:	442b      	add	r3, r5
 800d732:	6023      	str	r3, [r4, #0]
 800d734:	e00e      	b.n	800d754 <_malloc_r+0xa0>
 800d736:	6822      	ldr	r2, [r4, #0]
 800d738:	1b52      	subs	r2, r2, r5
 800d73a:	d41e      	bmi.n	800d77a <_malloc_r+0xc6>
 800d73c:	2a0b      	cmp	r2, #11
 800d73e:	d916      	bls.n	800d76e <_malloc_r+0xba>
 800d740:	1961      	adds	r1, r4, r5
 800d742:	42a3      	cmp	r3, r4
 800d744:	6025      	str	r5, [r4, #0]
 800d746:	bf18      	it	ne
 800d748:	6059      	strne	r1, [r3, #4]
 800d74a:	6863      	ldr	r3, [r4, #4]
 800d74c:	bf08      	it	eq
 800d74e:	6031      	streq	r1, [r6, #0]
 800d750:	5162      	str	r2, [r4, r5]
 800d752:	604b      	str	r3, [r1, #4]
 800d754:	4638      	mov	r0, r7
 800d756:	f104 060b 	add.w	r6, r4, #11
 800d75a:	f000 fa03 	bl	800db64 <__malloc_unlock>
 800d75e:	f026 0607 	bic.w	r6, r6, #7
 800d762:	1d23      	adds	r3, r4, #4
 800d764:	1af2      	subs	r2, r6, r3
 800d766:	d0b6      	beq.n	800d6d6 <_malloc_r+0x22>
 800d768:	1b9b      	subs	r3, r3, r6
 800d76a:	50a3      	str	r3, [r4, r2]
 800d76c:	e7b3      	b.n	800d6d6 <_malloc_r+0x22>
 800d76e:	6862      	ldr	r2, [r4, #4]
 800d770:	42a3      	cmp	r3, r4
 800d772:	bf0c      	ite	eq
 800d774:	6032      	streq	r2, [r6, #0]
 800d776:	605a      	strne	r2, [r3, #4]
 800d778:	e7ec      	b.n	800d754 <_malloc_r+0xa0>
 800d77a:	4623      	mov	r3, r4
 800d77c:	6864      	ldr	r4, [r4, #4]
 800d77e:	e7b2      	b.n	800d6e6 <_malloc_r+0x32>
 800d780:	4634      	mov	r4, r6
 800d782:	6876      	ldr	r6, [r6, #4]
 800d784:	e7b9      	b.n	800d6fa <_malloc_r+0x46>
 800d786:	230c      	movs	r3, #12
 800d788:	4638      	mov	r0, r7
 800d78a:	603b      	str	r3, [r7, #0]
 800d78c:	f000 f9ea 	bl	800db64 <__malloc_unlock>
 800d790:	e7a1      	b.n	800d6d6 <_malloc_r+0x22>
 800d792:	6025      	str	r5, [r4, #0]
 800d794:	e7de      	b.n	800d754 <_malloc_r+0xa0>
 800d796:	bf00      	nop
 800d798:	2000160c 	.word	0x2000160c

0800d79c <__ssputs_r>:
 800d79c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7a0:	688e      	ldr	r6, [r1, #8]
 800d7a2:	4682      	mov	sl, r0
 800d7a4:	429e      	cmp	r6, r3
 800d7a6:	460c      	mov	r4, r1
 800d7a8:	4690      	mov	r8, r2
 800d7aa:	461f      	mov	r7, r3
 800d7ac:	d838      	bhi.n	800d820 <__ssputs_r+0x84>
 800d7ae:	898a      	ldrh	r2, [r1, #12]
 800d7b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d7b4:	d032      	beq.n	800d81c <__ssputs_r+0x80>
 800d7b6:	6825      	ldr	r5, [r4, #0]
 800d7b8:	6909      	ldr	r1, [r1, #16]
 800d7ba:	3301      	adds	r3, #1
 800d7bc:	eba5 0901 	sub.w	r9, r5, r1
 800d7c0:	6965      	ldr	r5, [r4, #20]
 800d7c2:	444b      	add	r3, r9
 800d7c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d7c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d7cc:	106d      	asrs	r5, r5, #1
 800d7ce:	429d      	cmp	r5, r3
 800d7d0:	bf38      	it	cc
 800d7d2:	461d      	movcc	r5, r3
 800d7d4:	0553      	lsls	r3, r2, #21
 800d7d6:	d531      	bpl.n	800d83c <__ssputs_r+0xa0>
 800d7d8:	4629      	mov	r1, r5
 800d7da:	f7ff ff6b 	bl	800d6b4 <_malloc_r>
 800d7de:	4606      	mov	r6, r0
 800d7e0:	b950      	cbnz	r0, 800d7f8 <__ssputs_r+0x5c>
 800d7e2:	230c      	movs	r3, #12
 800d7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d7e8:	f8ca 3000 	str.w	r3, [sl]
 800d7ec:	89a3      	ldrh	r3, [r4, #12]
 800d7ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7f2:	81a3      	strh	r3, [r4, #12]
 800d7f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7f8:	464a      	mov	r2, r9
 800d7fa:	6921      	ldr	r1, [r4, #16]
 800d7fc:	f7ff fa18 	bl	800cc30 <memcpy>
 800d800:	89a3      	ldrh	r3, [r4, #12]
 800d802:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d80a:	81a3      	strh	r3, [r4, #12]
 800d80c:	6126      	str	r6, [r4, #16]
 800d80e:	444e      	add	r6, r9
 800d810:	6026      	str	r6, [r4, #0]
 800d812:	463e      	mov	r6, r7
 800d814:	6165      	str	r5, [r4, #20]
 800d816:	eba5 0509 	sub.w	r5, r5, r9
 800d81a:	60a5      	str	r5, [r4, #8]
 800d81c:	42be      	cmp	r6, r7
 800d81e:	d900      	bls.n	800d822 <__ssputs_r+0x86>
 800d820:	463e      	mov	r6, r7
 800d822:	4632      	mov	r2, r6
 800d824:	4641      	mov	r1, r8
 800d826:	6820      	ldr	r0, [r4, #0]
 800d828:	f000 f97c 	bl	800db24 <memmove>
 800d82c:	68a3      	ldr	r3, [r4, #8]
 800d82e:	2000      	movs	r0, #0
 800d830:	1b9b      	subs	r3, r3, r6
 800d832:	60a3      	str	r3, [r4, #8]
 800d834:	6823      	ldr	r3, [r4, #0]
 800d836:	4433      	add	r3, r6
 800d838:	6023      	str	r3, [r4, #0]
 800d83a:	e7db      	b.n	800d7f4 <__ssputs_r+0x58>
 800d83c:	462a      	mov	r2, r5
 800d83e:	f000 f997 	bl	800db70 <_realloc_r>
 800d842:	4606      	mov	r6, r0
 800d844:	2800      	cmp	r0, #0
 800d846:	d1e1      	bne.n	800d80c <__ssputs_r+0x70>
 800d848:	4650      	mov	r0, sl
 800d84a:	6921      	ldr	r1, [r4, #16]
 800d84c:	f7ff feca 	bl	800d5e4 <_free_r>
 800d850:	e7c7      	b.n	800d7e2 <__ssputs_r+0x46>
	...

0800d854 <_svfiprintf_r>:
 800d854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d858:	4698      	mov	r8, r3
 800d85a:	898b      	ldrh	r3, [r1, #12]
 800d85c:	4607      	mov	r7, r0
 800d85e:	061b      	lsls	r3, r3, #24
 800d860:	460d      	mov	r5, r1
 800d862:	4614      	mov	r4, r2
 800d864:	b09d      	sub	sp, #116	; 0x74
 800d866:	d50e      	bpl.n	800d886 <_svfiprintf_r+0x32>
 800d868:	690b      	ldr	r3, [r1, #16]
 800d86a:	b963      	cbnz	r3, 800d886 <_svfiprintf_r+0x32>
 800d86c:	2140      	movs	r1, #64	; 0x40
 800d86e:	f7ff ff21 	bl	800d6b4 <_malloc_r>
 800d872:	6028      	str	r0, [r5, #0]
 800d874:	6128      	str	r0, [r5, #16]
 800d876:	b920      	cbnz	r0, 800d882 <_svfiprintf_r+0x2e>
 800d878:	230c      	movs	r3, #12
 800d87a:	603b      	str	r3, [r7, #0]
 800d87c:	f04f 30ff 	mov.w	r0, #4294967295
 800d880:	e0d1      	b.n	800da26 <_svfiprintf_r+0x1d2>
 800d882:	2340      	movs	r3, #64	; 0x40
 800d884:	616b      	str	r3, [r5, #20]
 800d886:	2300      	movs	r3, #0
 800d888:	9309      	str	r3, [sp, #36]	; 0x24
 800d88a:	2320      	movs	r3, #32
 800d88c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d890:	2330      	movs	r3, #48	; 0x30
 800d892:	f04f 0901 	mov.w	r9, #1
 800d896:	f8cd 800c 	str.w	r8, [sp, #12]
 800d89a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800da40 <_svfiprintf_r+0x1ec>
 800d89e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d8a2:	4623      	mov	r3, r4
 800d8a4:	469a      	mov	sl, r3
 800d8a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8aa:	b10a      	cbz	r2, 800d8b0 <_svfiprintf_r+0x5c>
 800d8ac:	2a25      	cmp	r2, #37	; 0x25
 800d8ae:	d1f9      	bne.n	800d8a4 <_svfiprintf_r+0x50>
 800d8b0:	ebba 0b04 	subs.w	fp, sl, r4
 800d8b4:	d00b      	beq.n	800d8ce <_svfiprintf_r+0x7a>
 800d8b6:	465b      	mov	r3, fp
 800d8b8:	4622      	mov	r2, r4
 800d8ba:	4629      	mov	r1, r5
 800d8bc:	4638      	mov	r0, r7
 800d8be:	f7ff ff6d 	bl	800d79c <__ssputs_r>
 800d8c2:	3001      	adds	r0, #1
 800d8c4:	f000 80aa 	beq.w	800da1c <_svfiprintf_r+0x1c8>
 800d8c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8ca:	445a      	add	r2, fp
 800d8cc:	9209      	str	r2, [sp, #36]	; 0x24
 800d8ce:	f89a 3000 	ldrb.w	r3, [sl]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	f000 80a2 	beq.w	800da1c <_svfiprintf_r+0x1c8>
 800d8d8:	2300      	movs	r3, #0
 800d8da:	f04f 32ff 	mov.w	r2, #4294967295
 800d8de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8e2:	f10a 0a01 	add.w	sl, sl, #1
 800d8e6:	9304      	str	r3, [sp, #16]
 800d8e8:	9307      	str	r3, [sp, #28]
 800d8ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d8ee:	931a      	str	r3, [sp, #104]	; 0x68
 800d8f0:	4654      	mov	r4, sl
 800d8f2:	2205      	movs	r2, #5
 800d8f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8f8:	4851      	ldr	r0, [pc, #324]	; (800da40 <_svfiprintf_r+0x1ec>)
 800d8fa:	f7ff f98b 	bl	800cc14 <memchr>
 800d8fe:	9a04      	ldr	r2, [sp, #16]
 800d900:	b9d8      	cbnz	r0, 800d93a <_svfiprintf_r+0xe6>
 800d902:	06d0      	lsls	r0, r2, #27
 800d904:	bf44      	itt	mi
 800d906:	2320      	movmi	r3, #32
 800d908:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d90c:	0711      	lsls	r1, r2, #28
 800d90e:	bf44      	itt	mi
 800d910:	232b      	movmi	r3, #43	; 0x2b
 800d912:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d916:	f89a 3000 	ldrb.w	r3, [sl]
 800d91a:	2b2a      	cmp	r3, #42	; 0x2a
 800d91c:	d015      	beq.n	800d94a <_svfiprintf_r+0xf6>
 800d91e:	4654      	mov	r4, sl
 800d920:	2000      	movs	r0, #0
 800d922:	f04f 0c0a 	mov.w	ip, #10
 800d926:	9a07      	ldr	r2, [sp, #28]
 800d928:	4621      	mov	r1, r4
 800d92a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d92e:	3b30      	subs	r3, #48	; 0x30
 800d930:	2b09      	cmp	r3, #9
 800d932:	d94e      	bls.n	800d9d2 <_svfiprintf_r+0x17e>
 800d934:	b1b0      	cbz	r0, 800d964 <_svfiprintf_r+0x110>
 800d936:	9207      	str	r2, [sp, #28]
 800d938:	e014      	b.n	800d964 <_svfiprintf_r+0x110>
 800d93a:	eba0 0308 	sub.w	r3, r0, r8
 800d93e:	fa09 f303 	lsl.w	r3, r9, r3
 800d942:	4313      	orrs	r3, r2
 800d944:	46a2      	mov	sl, r4
 800d946:	9304      	str	r3, [sp, #16]
 800d948:	e7d2      	b.n	800d8f0 <_svfiprintf_r+0x9c>
 800d94a:	9b03      	ldr	r3, [sp, #12]
 800d94c:	1d19      	adds	r1, r3, #4
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	9103      	str	r1, [sp, #12]
 800d952:	2b00      	cmp	r3, #0
 800d954:	bfbb      	ittet	lt
 800d956:	425b      	neglt	r3, r3
 800d958:	f042 0202 	orrlt.w	r2, r2, #2
 800d95c:	9307      	strge	r3, [sp, #28]
 800d95e:	9307      	strlt	r3, [sp, #28]
 800d960:	bfb8      	it	lt
 800d962:	9204      	strlt	r2, [sp, #16]
 800d964:	7823      	ldrb	r3, [r4, #0]
 800d966:	2b2e      	cmp	r3, #46	; 0x2e
 800d968:	d10c      	bne.n	800d984 <_svfiprintf_r+0x130>
 800d96a:	7863      	ldrb	r3, [r4, #1]
 800d96c:	2b2a      	cmp	r3, #42	; 0x2a
 800d96e:	d135      	bne.n	800d9dc <_svfiprintf_r+0x188>
 800d970:	9b03      	ldr	r3, [sp, #12]
 800d972:	3402      	adds	r4, #2
 800d974:	1d1a      	adds	r2, r3, #4
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	9203      	str	r2, [sp, #12]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	bfb8      	it	lt
 800d97e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d982:	9305      	str	r3, [sp, #20]
 800d984:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800da44 <_svfiprintf_r+0x1f0>
 800d988:	2203      	movs	r2, #3
 800d98a:	4650      	mov	r0, sl
 800d98c:	7821      	ldrb	r1, [r4, #0]
 800d98e:	f7ff f941 	bl	800cc14 <memchr>
 800d992:	b140      	cbz	r0, 800d9a6 <_svfiprintf_r+0x152>
 800d994:	2340      	movs	r3, #64	; 0x40
 800d996:	eba0 000a 	sub.w	r0, r0, sl
 800d99a:	fa03 f000 	lsl.w	r0, r3, r0
 800d99e:	9b04      	ldr	r3, [sp, #16]
 800d9a0:	3401      	adds	r4, #1
 800d9a2:	4303      	orrs	r3, r0
 800d9a4:	9304      	str	r3, [sp, #16]
 800d9a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9aa:	2206      	movs	r2, #6
 800d9ac:	4826      	ldr	r0, [pc, #152]	; (800da48 <_svfiprintf_r+0x1f4>)
 800d9ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d9b2:	f7ff f92f 	bl	800cc14 <memchr>
 800d9b6:	2800      	cmp	r0, #0
 800d9b8:	d038      	beq.n	800da2c <_svfiprintf_r+0x1d8>
 800d9ba:	4b24      	ldr	r3, [pc, #144]	; (800da4c <_svfiprintf_r+0x1f8>)
 800d9bc:	bb1b      	cbnz	r3, 800da06 <_svfiprintf_r+0x1b2>
 800d9be:	9b03      	ldr	r3, [sp, #12]
 800d9c0:	3307      	adds	r3, #7
 800d9c2:	f023 0307 	bic.w	r3, r3, #7
 800d9c6:	3308      	adds	r3, #8
 800d9c8:	9303      	str	r3, [sp, #12]
 800d9ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9cc:	4433      	add	r3, r6
 800d9ce:	9309      	str	r3, [sp, #36]	; 0x24
 800d9d0:	e767      	b.n	800d8a2 <_svfiprintf_r+0x4e>
 800d9d2:	460c      	mov	r4, r1
 800d9d4:	2001      	movs	r0, #1
 800d9d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9da:	e7a5      	b.n	800d928 <_svfiprintf_r+0xd4>
 800d9dc:	2300      	movs	r3, #0
 800d9de:	f04f 0c0a 	mov.w	ip, #10
 800d9e2:	4619      	mov	r1, r3
 800d9e4:	3401      	adds	r4, #1
 800d9e6:	9305      	str	r3, [sp, #20]
 800d9e8:	4620      	mov	r0, r4
 800d9ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9ee:	3a30      	subs	r2, #48	; 0x30
 800d9f0:	2a09      	cmp	r2, #9
 800d9f2:	d903      	bls.n	800d9fc <_svfiprintf_r+0x1a8>
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d0c5      	beq.n	800d984 <_svfiprintf_r+0x130>
 800d9f8:	9105      	str	r1, [sp, #20]
 800d9fa:	e7c3      	b.n	800d984 <_svfiprintf_r+0x130>
 800d9fc:	4604      	mov	r4, r0
 800d9fe:	2301      	movs	r3, #1
 800da00:	fb0c 2101 	mla	r1, ip, r1, r2
 800da04:	e7f0      	b.n	800d9e8 <_svfiprintf_r+0x194>
 800da06:	ab03      	add	r3, sp, #12
 800da08:	9300      	str	r3, [sp, #0]
 800da0a:	462a      	mov	r2, r5
 800da0c:	4638      	mov	r0, r7
 800da0e:	4b10      	ldr	r3, [pc, #64]	; (800da50 <_svfiprintf_r+0x1fc>)
 800da10:	a904      	add	r1, sp, #16
 800da12:	f7fc fa7f 	bl	8009f14 <_printf_float>
 800da16:	1c42      	adds	r2, r0, #1
 800da18:	4606      	mov	r6, r0
 800da1a:	d1d6      	bne.n	800d9ca <_svfiprintf_r+0x176>
 800da1c:	89ab      	ldrh	r3, [r5, #12]
 800da1e:	065b      	lsls	r3, r3, #25
 800da20:	f53f af2c 	bmi.w	800d87c <_svfiprintf_r+0x28>
 800da24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da26:	b01d      	add	sp, #116	; 0x74
 800da28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da2c:	ab03      	add	r3, sp, #12
 800da2e:	9300      	str	r3, [sp, #0]
 800da30:	462a      	mov	r2, r5
 800da32:	4638      	mov	r0, r7
 800da34:	4b06      	ldr	r3, [pc, #24]	; (800da50 <_svfiprintf_r+0x1fc>)
 800da36:	a904      	add	r1, sp, #16
 800da38:	f7fc fd08 	bl	800a44c <_printf_i>
 800da3c:	e7eb      	b.n	800da16 <_svfiprintf_r+0x1c2>
 800da3e:	bf00      	nop
 800da40:	0800eadc 	.word	0x0800eadc
 800da44:	0800eae2 	.word	0x0800eae2
 800da48:	0800eae6 	.word	0x0800eae6
 800da4c:	08009f15 	.word	0x08009f15
 800da50:	0800d79d 	.word	0x0800d79d

0800da54 <nan>:
 800da54:	2000      	movs	r0, #0
 800da56:	4901      	ldr	r1, [pc, #4]	; (800da5c <nan+0x8>)
 800da58:	4770      	bx	lr
 800da5a:	bf00      	nop
 800da5c:	7ff80000 	.word	0x7ff80000

0800da60 <_sbrk_r>:
 800da60:	b538      	push	{r3, r4, r5, lr}
 800da62:	2300      	movs	r3, #0
 800da64:	4d05      	ldr	r5, [pc, #20]	; (800da7c <_sbrk_r+0x1c>)
 800da66:	4604      	mov	r4, r0
 800da68:	4608      	mov	r0, r1
 800da6a:	602b      	str	r3, [r5, #0]
 800da6c:	f7f4 f948 	bl	8001d00 <_sbrk>
 800da70:	1c43      	adds	r3, r0, #1
 800da72:	d102      	bne.n	800da7a <_sbrk_r+0x1a>
 800da74:	682b      	ldr	r3, [r5, #0]
 800da76:	b103      	cbz	r3, 800da7a <_sbrk_r+0x1a>
 800da78:	6023      	str	r3, [r4, #0]
 800da7a:	bd38      	pop	{r3, r4, r5, pc}
 800da7c:	20001614 	.word	0x20001614

0800da80 <strncmp>:
 800da80:	4603      	mov	r3, r0
 800da82:	b510      	push	{r4, lr}
 800da84:	b172      	cbz	r2, 800daa4 <strncmp+0x24>
 800da86:	3901      	subs	r1, #1
 800da88:	1884      	adds	r4, r0, r2
 800da8a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800da8e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800da92:	4290      	cmp	r0, r2
 800da94:	d101      	bne.n	800da9a <strncmp+0x1a>
 800da96:	42a3      	cmp	r3, r4
 800da98:	d101      	bne.n	800da9e <strncmp+0x1e>
 800da9a:	1a80      	subs	r0, r0, r2
 800da9c:	bd10      	pop	{r4, pc}
 800da9e:	2800      	cmp	r0, #0
 800daa0:	d1f3      	bne.n	800da8a <strncmp+0xa>
 800daa2:	e7fa      	b.n	800da9a <strncmp+0x1a>
 800daa4:	4610      	mov	r0, r2
 800daa6:	e7f9      	b.n	800da9c <strncmp+0x1c>

0800daa8 <__ascii_wctomb>:
 800daa8:	4603      	mov	r3, r0
 800daaa:	4608      	mov	r0, r1
 800daac:	b141      	cbz	r1, 800dac0 <__ascii_wctomb+0x18>
 800daae:	2aff      	cmp	r2, #255	; 0xff
 800dab0:	d904      	bls.n	800dabc <__ascii_wctomb+0x14>
 800dab2:	228a      	movs	r2, #138	; 0x8a
 800dab4:	f04f 30ff 	mov.w	r0, #4294967295
 800dab8:	601a      	str	r2, [r3, #0]
 800daba:	4770      	bx	lr
 800dabc:	2001      	movs	r0, #1
 800dabe:	700a      	strb	r2, [r1, #0]
 800dac0:	4770      	bx	lr
	...

0800dac4 <__assert_func>:
 800dac4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dac6:	4614      	mov	r4, r2
 800dac8:	461a      	mov	r2, r3
 800daca:	4b09      	ldr	r3, [pc, #36]	; (800daf0 <__assert_func+0x2c>)
 800dacc:	4605      	mov	r5, r0
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	68d8      	ldr	r0, [r3, #12]
 800dad2:	b14c      	cbz	r4, 800dae8 <__assert_func+0x24>
 800dad4:	4b07      	ldr	r3, [pc, #28]	; (800daf4 <__assert_func+0x30>)
 800dad6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dada:	9100      	str	r1, [sp, #0]
 800dadc:	462b      	mov	r3, r5
 800dade:	4906      	ldr	r1, [pc, #24]	; (800daf8 <__assert_func+0x34>)
 800dae0:	f000 f80e 	bl	800db00 <fiprintf>
 800dae4:	f000 fa8a 	bl	800dffc <abort>
 800dae8:	4b04      	ldr	r3, [pc, #16]	; (800dafc <__assert_func+0x38>)
 800daea:	461c      	mov	r4, r3
 800daec:	e7f3      	b.n	800dad6 <__assert_func+0x12>
 800daee:	bf00      	nop
 800daf0:	2000017c 	.word	0x2000017c
 800daf4:	0800eaed 	.word	0x0800eaed
 800daf8:	0800eafa 	.word	0x0800eafa
 800dafc:	0800eb28 	.word	0x0800eb28

0800db00 <fiprintf>:
 800db00:	b40e      	push	{r1, r2, r3}
 800db02:	b503      	push	{r0, r1, lr}
 800db04:	4601      	mov	r1, r0
 800db06:	ab03      	add	r3, sp, #12
 800db08:	4805      	ldr	r0, [pc, #20]	; (800db20 <fiprintf+0x20>)
 800db0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800db0e:	6800      	ldr	r0, [r0, #0]
 800db10:	9301      	str	r3, [sp, #4]
 800db12:	f000 f883 	bl	800dc1c <_vfiprintf_r>
 800db16:	b002      	add	sp, #8
 800db18:	f85d eb04 	ldr.w	lr, [sp], #4
 800db1c:	b003      	add	sp, #12
 800db1e:	4770      	bx	lr
 800db20:	2000017c 	.word	0x2000017c

0800db24 <memmove>:
 800db24:	4288      	cmp	r0, r1
 800db26:	b510      	push	{r4, lr}
 800db28:	eb01 0402 	add.w	r4, r1, r2
 800db2c:	d902      	bls.n	800db34 <memmove+0x10>
 800db2e:	4284      	cmp	r4, r0
 800db30:	4623      	mov	r3, r4
 800db32:	d807      	bhi.n	800db44 <memmove+0x20>
 800db34:	1e43      	subs	r3, r0, #1
 800db36:	42a1      	cmp	r1, r4
 800db38:	d008      	beq.n	800db4c <memmove+0x28>
 800db3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db42:	e7f8      	b.n	800db36 <memmove+0x12>
 800db44:	4601      	mov	r1, r0
 800db46:	4402      	add	r2, r0
 800db48:	428a      	cmp	r2, r1
 800db4a:	d100      	bne.n	800db4e <memmove+0x2a>
 800db4c:	bd10      	pop	{r4, pc}
 800db4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db56:	e7f7      	b.n	800db48 <memmove+0x24>

0800db58 <__malloc_lock>:
 800db58:	4801      	ldr	r0, [pc, #4]	; (800db60 <__malloc_lock+0x8>)
 800db5a:	f000 bc0b 	b.w	800e374 <__retarget_lock_acquire_recursive>
 800db5e:	bf00      	nop
 800db60:	20001618 	.word	0x20001618

0800db64 <__malloc_unlock>:
 800db64:	4801      	ldr	r0, [pc, #4]	; (800db6c <__malloc_unlock+0x8>)
 800db66:	f000 bc06 	b.w	800e376 <__retarget_lock_release_recursive>
 800db6a:	bf00      	nop
 800db6c:	20001618 	.word	0x20001618

0800db70 <_realloc_r>:
 800db70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db74:	4680      	mov	r8, r0
 800db76:	4614      	mov	r4, r2
 800db78:	460e      	mov	r6, r1
 800db7a:	b921      	cbnz	r1, 800db86 <_realloc_r+0x16>
 800db7c:	4611      	mov	r1, r2
 800db7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db82:	f7ff bd97 	b.w	800d6b4 <_malloc_r>
 800db86:	b92a      	cbnz	r2, 800db94 <_realloc_r+0x24>
 800db88:	f7ff fd2c 	bl	800d5e4 <_free_r>
 800db8c:	4625      	mov	r5, r4
 800db8e:	4628      	mov	r0, r5
 800db90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db94:	f000 fc56 	bl	800e444 <_malloc_usable_size_r>
 800db98:	4284      	cmp	r4, r0
 800db9a:	4607      	mov	r7, r0
 800db9c:	d802      	bhi.n	800dba4 <_realloc_r+0x34>
 800db9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dba2:	d812      	bhi.n	800dbca <_realloc_r+0x5a>
 800dba4:	4621      	mov	r1, r4
 800dba6:	4640      	mov	r0, r8
 800dba8:	f7ff fd84 	bl	800d6b4 <_malloc_r>
 800dbac:	4605      	mov	r5, r0
 800dbae:	2800      	cmp	r0, #0
 800dbb0:	d0ed      	beq.n	800db8e <_realloc_r+0x1e>
 800dbb2:	42bc      	cmp	r4, r7
 800dbb4:	4622      	mov	r2, r4
 800dbb6:	4631      	mov	r1, r6
 800dbb8:	bf28      	it	cs
 800dbba:	463a      	movcs	r2, r7
 800dbbc:	f7ff f838 	bl	800cc30 <memcpy>
 800dbc0:	4631      	mov	r1, r6
 800dbc2:	4640      	mov	r0, r8
 800dbc4:	f7ff fd0e 	bl	800d5e4 <_free_r>
 800dbc8:	e7e1      	b.n	800db8e <_realloc_r+0x1e>
 800dbca:	4635      	mov	r5, r6
 800dbcc:	e7df      	b.n	800db8e <_realloc_r+0x1e>

0800dbce <__sfputc_r>:
 800dbce:	6893      	ldr	r3, [r2, #8]
 800dbd0:	b410      	push	{r4}
 800dbd2:	3b01      	subs	r3, #1
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	6093      	str	r3, [r2, #8]
 800dbd8:	da07      	bge.n	800dbea <__sfputc_r+0x1c>
 800dbda:	6994      	ldr	r4, [r2, #24]
 800dbdc:	42a3      	cmp	r3, r4
 800dbde:	db01      	blt.n	800dbe4 <__sfputc_r+0x16>
 800dbe0:	290a      	cmp	r1, #10
 800dbe2:	d102      	bne.n	800dbea <__sfputc_r+0x1c>
 800dbe4:	bc10      	pop	{r4}
 800dbe6:	f000 b949 	b.w	800de7c <__swbuf_r>
 800dbea:	6813      	ldr	r3, [r2, #0]
 800dbec:	1c58      	adds	r0, r3, #1
 800dbee:	6010      	str	r0, [r2, #0]
 800dbf0:	7019      	strb	r1, [r3, #0]
 800dbf2:	4608      	mov	r0, r1
 800dbf4:	bc10      	pop	{r4}
 800dbf6:	4770      	bx	lr

0800dbf8 <__sfputs_r>:
 800dbf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbfa:	4606      	mov	r6, r0
 800dbfc:	460f      	mov	r7, r1
 800dbfe:	4614      	mov	r4, r2
 800dc00:	18d5      	adds	r5, r2, r3
 800dc02:	42ac      	cmp	r4, r5
 800dc04:	d101      	bne.n	800dc0a <__sfputs_r+0x12>
 800dc06:	2000      	movs	r0, #0
 800dc08:	e007      	b.n	800dc1a <__sfputs_r+0x22>
 800dc0a:	463a      	mov	r2, r7
 800dc0c:	4630      	mov	r0, r6
 800dc0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc12:	f7ff ffdc 	bl	800dbce <__sfputc_r>
 800dc16:	1c43      	adds	r3, r0, #1
 800dc18:	d1f3      	bne.n	800dc02 <__sfputs_r+0xa>
 800dc1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dc1c <_vfiprintf_r>:
 800dc1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc20:	460d      	mov	r5, r1
 800dc22:	4614      	mov	r4, r2
 800dc24:	4698      	mov	r8, r3
 800dc26:	4606      	mov	r6, r0
 800dc28:	b09d      	sub	sp, #116	; 0x74
 800dc2a:	b118      	cbz	r0, 800dc34 <_vfiprintf_r+0x18>
 800dc2c:	6983      	ldr	r3, [r0, #24]
 800dc2e:	b90b      	cbnz	r3, 800dc34 <_vfiprintf_r+0x18>
 800dc30:	f000 fb02 	bl	800e238 <__sinit>
 800dc34:	4b89      	ldr	r3, [pc, #548]	; (800de5c <_vfiprintf_r+0x240>)
 800dc36:	429d      	cmp	r5, r3
 800dc38:	d11b      	bne.n	800dc72 <_vfiprintf_r+0x56>
 800dc3a:	6875      	ldr	r5, [r6, #4]
 800dc3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc3e:	07d9      	lsls	r1, r3, #31
 800dc40:	d405      	bmi.n	800dc4e <_vfiprintf_r+0x32>
 800dc42:	89ab      	ldrh	r3, [r5, #12]
 800dc44:	059a      	lsls	r2, r3, #22
 800dc46:	d402      	bmi.n	800dc4e <_vfiprintf_r+0x32>
 800dc48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc4a:	f000 fb93 	bl	800e374 <__retarget_lock_acquire_recursive>
 800dc4e:	89ab      	ldrh	r3, [r5, #12]
 800dc50:	071b      	lsls	r3, r3, #28
 800dc52:	d501      	bpl.n	800dc58 <_vfiprintf_r+0x3c>
 800dc54:	692b      	ldr	r3, [r5, #16]
 800dc56:	b9eb      	cbnz	r3, 800dc94 <_vfiprintf_r+0x78>
 800dc58:	4629      	mov	r1, r5
 800dc5a:	4630      	mov	r0, r6
 800dc5c:	f000 f960 	bl	800df20 <__swsetup_r>
 800dc60:	b1c0      	cbz	r0, 800dc94 <_vfiprintf_r+0x78>
 800dc62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc64:	07dc      	lsls	r4, r3, #31
 800dc66:	d50e      	bpl.n	800dc86 <_vfiprintf_r+0x6a>
 800dc68:	f04f 30ff 	mov.w	r0, #4294967295
 800dc6c:	b01d      	add	sp, #116	; 0x74
 800dc6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc72:	4b7b      	ldr	r3, [pc, #492]	; (800de60 <_vfiprintf_r+0x244>)
 800dc74:	429d      	cmp	r5, r3
 800dc76:	d101      	bne.n	800dc7c <_vfiprintf_r+0x60>
 800dc78:	68b5      	ldr	r5, [r6, #8]
 800dc7a:	e7df      	b.n	800dc3c <_vfiprintf_r+0x20>
 800dc7c:	4b79      	ldr	r3, [pc, #484]	; (800de64 <_vfiprintf_r+0x248>)
 800dc7e:	429d      	cmp	r5, r3
 800dc80:	bf08      	it	eq
 800dc82:	68f5      	ldreq	r5, [r6, #12]
 800dc84:	e7da      	b.n	800dc3c <_vfiprintf_r+0x20>
 800dc86:	89ab      	ldrh	r3, [r5, #12]
 800dc88:	0598      	lsls	r0, r3, #22
 800dc8a:	d4ed      	bmi.n	800dc68 <_vfiprintf_r+0x4c>
 800dc8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc8e:	f000 fb72 	bl	800e376 <__retarget_lock_release_recursive>
 800dc92:	e7e9      	b.n	800dc68 <_vfiprintf_r+0x4c>
 800dc94:	2300      	movs	r3, #0
 800dc96:	9309      	str	r3, [sp, #36]	; 0x24
 800dc98:	2320      	movs	r3, #32
 800dc9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc9e:	2330      	movs	r3, #48	; 0x30
 800dca0:	f04f 0901 	mov.w	r9, #1
 800dca4:	f8cd 800c 	str.w	r8, [sp, #12]
 800dca8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800de68 <_vfiprintf_r+0x24c>
 800dcac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dcb0:	4623      	mov	r3, r4
 800dcb2:	469a      	mov	sl, r3
 800dcb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcb8:	b10a      	cbz	r2, 800dcbe <_vfiprintf_r+0xa2>
 800dcba:	2a25      	cmp	r2, #37	; 0x25
 800dcbc:	d1f9      	bne.n	800dcb2 <_vfiprintf_r+0x96>
 800dcbe:	ebba 0b04 	subs.w	fp, sl, r4
 800dcc2:	d00b      	beq.n	800dcdc <_vfiprintf_r+0xc0>
 800dcc4:	465b      	mov	r3, fp
 800dcc6:	4622      	mov	r2, r4
 800dcc8:	4629      	mov	r1, r5
 800dcca:	4630      	mov	r0, r6
 800dccc:	f7ff ff94 	bl	800dbf8 <__sfputs_r>
 800dcd0:	3001      	adds	r0, #1
 800dcd2:	f000 80aa 	beq.w	800de2a <_vfiprintf_r+0x20e>
 800dcd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcd8:	445a      	add	r2, fp
 800dcda:	9209      	str	r2, [sp, #36]	; 0x24
 800dcdc:	f89a 3000 	ldrb.w	r3, [sl]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	f000 80a2 	beq.w	800de2a <_vfiprintf_r+0x20e>
 800dce6:	2300      	movs	r3, #0
 800dce8:	f04f 32ff 	mov.w	r2, #4294967295
 800dcec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dcf0:	f10a 0a01 	add.w	sl, sl, #1
 800dcf4:	9304      	str	r3, [sp, #16]
 800dcf6:	9307      	str	r3, [sp, #28]
 800dcf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dcfc:	931a      	str	r3, [sp, #104]	; 0x68
 800dcfe:	4654      	mov	r4, sl
 800dd00:	2205      	movs	r2, #5
 800dd02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd06:	4858      	ldr	r0, [pc, #352]	; (800de68 <_vfiprintf_r+0x24c>)
 800dd08:	f7fe ff84 	bl	800cc14 <memchr>
 800dd0c:	9a04      	ldr	r2, [sp, #16]
 800dd0e:	b9d8      	cbnz	r0, 800dd48 <_vfiprintf_r+0x12c>
 800dd10:	06d1      	lsls	r1, r2, #27
 800dd12:	bf44      	itt	mi
 800dd14:	2320      	movmi	r3, #32
 800dd16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd1a:	0713      	lsls	r3, r2, #28
 800dd1c:	bf44      	itt	mi
 800dd1e:	232b      	movmi	r3, #43	; 0x2b
 800dd20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd24:	f89a 3000 	ldrb.w	r3, [sl]
 800dd28:	2b2a      	cmp	r3, #42	; 0x2a
 800dd2a:	d015      	beq.n	800dd58 <_vfiprintf_r+0x13c>
 800dd2c:	4654      	mov	r4, sl
 800dd2e:	2000      	movs	r0, #0
 800dd30:	f04f 0c0a 	mov.w	ip, #10
 800dd34:	9a07      	ldr	r2, [sp, #28]
 800dd36:	4621      	mov	r1, r4
 800dd38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd3c:	3b30      	subs	r3, #48	; 0x30
 800dd3e:	2b09      	cmp	r3, #9
 800dd40:	d94e      	bls.n	800dde0 <_vfiprintf_r+0x1c4>
 800dd42:	b1b0      	cbz	r0, 800dd72 <_vfiprintf_r+0x156>
 800dd44:	9207      	str	r2, [sp, #28]
 800dd46:	e014      	b.n	800dd72 <_vfiprintf_r+0x156>
 800dd48:	eba0 0308 	sub.w	r3, r0, r8
 800dd4c:	fa09 f303 	lsl.w	r3, r9, r3
 800dd50:	4313      	orrs	r3, r2
 800dd52:	46a2      	mov	sl, r4
 800dd54:	9304      	str	r3, [sp, #16]
 800dd56:	e7d2      	b.n	800dcfe <_vfiprintf_r+0xe2>
 800dd58:	9b03      	ldr	r3, [sp, #12]
 800dd5a:	1d19      	adds	r1, r3, #4
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	9103      	str	r1, [sp, #12]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	bfbb      	ittet	lt
 800dd64:	425b      	neglt	r3, r3
 800dd66:	f042 0202 	orrlt.w	r2, r2, #2
 800dd6a:	9307      	strge	r3, [sp, #28]
 800dd6c:	9307      	strlt	r3, [sp, #28]
 800dd6e:	bfb8      	it	lt
 800dd70:	9204      	strlt	r2, [sp, #16]
 800dd72:	7823      	ldrb	r3, [r4, #0]
 800dd74:	2b2e      	cmp	r3, #46	; 0x2e
 800dd76:	d10c      	bne.n	800dd92 <_vfiprintf_r+0x176>
 800dd78:	7863      	ldrb	r3, [r4, #1]
 800dd7a:	2b2a      	cmp	r3, #42	; 0x2a
 800dd7c:	d135      	bne.n	800ddea <_vfiprintf_r+0x1ce>
 800dd7e:	9b03      	ldr	r3, [sp, #12]
 800dd80:	3402      	adds	r4, #2
 800dd82:	1d1a      	adds	r2, r3, #4
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	9203      	str	r2, [sp, #12]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	bfb8      	it	lt
 800dd8c:	f04f 33ff 	movlt.w	r3, #4294967295
 800dd90:	9305      	str	r3, [sp, #20]
 800dd92:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800de6c <_vfiprintf_r+0x250>
 800dd96:	2203      	movs	r2, #3
 800dd98:	4650      	mov	r0, sl
 800dd9a:	7821      	ldrb	r1, [r4, #0]
 800dd9c:	f7fe ff3a 	bl	800cc14 <memchr>
 800dda0:	b140      	cbz	r0, 800ddb4 <_vfiprintf_r+0x198>
 800dda2:	2340      	movs	r3, #64	; 0x40
 800dda4:	eba0 000a 	sub.w	r0, r0, sl
 800dda8:	fa03 f000 	lsl.w	r0, r3, r0
 800ddac:	9b04      	ldr	r3, [sp, #16]
 800ddae:	3401      	adds	r4, #1
 800ddb0:	4303      	orrs	r3, r0
 800ddb2:	9304      	str	r3, [sp, #16]
 800ddb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddb8:	2206      	movs	r2, #6
 800ddba:	482d      	ldr	r0, [pc, #180]	; (800de70 <_vfiprintf_r+0x254>)
 800ddbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ddc0:	f7fe ff28 	bl	800cc14 <memchr>
 800ddc4:	2800      	cmp	r0, #0
 800ddc6:	d03f      	beq.n	800de48 <_vfiprintf_r+0x22c>
 800ddc8:	4b2a      	ldr	r3, [pc, #168]	; (800de74 <_vfiprintf_r+0x258>)
 800ddca:	bb1b      	cbnz	r3, 800de14 <_vfiprintf_r+0x1f8>
 800ddcc:	9b03      	ldr	r3, [sp, #12]
 800ddce:	3307      	adds	r3, #7
 800ddd0:	f023 0307 	bic.w	r3, r3, #7
 800ddd4:	3308      	adds	r3, #8
 800ddd6:	9303      	str	r3, [sp, #12]
 800ddd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddda:	443b      	add	r3, r7
 800dddc:	9309      	str	r3, [sp, #36]	; 0x24
 800ddde:	e767      	b.n	800dcb0 <_vfiprintf_r+0x94>
 800dde0:	460c      	mov	r4, r1
 800dde2:	2001      	movs	r0, #1
 800dde4:	fb0c 3202 	mla	r2, ip, r2, r3
 800dde8:	e7a5      	b.n	800dd36 <_vfiprintf_r+0x11a>
 800ddea:	2300      	movs	r3, #0
 800ddec:	f04f 0c0a 	mov.w	ip, #10
 800ddf0:	4619      	mov	r1, r3
 800ddf2:	3401      	adds	r4, #1
 800ddf4:	9305      	str	r3, [sp, #20]
 800ddf6:	4620      	mov	r0, r4
 800ddf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ddfc:	3a30      	subs	r2, #48	; 0x30
 800ddfe:	2a09      	cmp	r2, #9
 800de00:	d903      	bls.n	800de0a <_vfiprintf_r+0x1ee>
 800de02:	2b00      	cmp	r3, #0
 800de04:	d0c5      	beq.n	800dd92 <_vfiprintf_r+0x176>
 800de06:	9105      	str	r1, [sp, #20]
 800de08:	e7c3      	b.n	800dd92 <_vfiprintf_r+0x176>
 800de0a:	4604      	mov	r4, r0
 800de0c:	2301      	movs	r3, #1
 800de0e:	fb0c 2101 	mla	r1, ip, r1, r2
 800de12:	e7f0      	b.n	800ddf6 <_vfiprintf_r+0x1da>
 800de14:	ab03      	add	r3, sp, #12
 800de16:	9300      	str	r3, [sp, #0]
 800de18:	462a      	mov	r2, r5
 800de1a:	4630      	mov	r0, r6
 800de1c:	4b16      	ldr	r3, [pc, #88]	; (800de78 <_vfiprintf_r+0x25c>)
 800de1e:	a904      	add	r1, sp, #16
 800de20:	f7fc f878 	bl	8009f14 <_printf_float>
 800de24:	4607      	mov	r7, r0
 800de26:	1c78      	adds	r0, r7, #1
 800de28:	d1d6      	bne.n	800ddd8 <_vfiprintf_r+0x1bc>
 800de2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de2c:	07d9      	lsls	r1, r3, #31
 800de2e:	d405      	bmi.n	800de3c <_vfiprintf_r+0x220>
 800de30:	89ab      	ldrh	r3, [r5, #12]
 800de32:	059a      	lsls	r2, r3, #22
 800de34:	d402      	bmi.n	800de3c <_vfiprintf_r+0x220>
 800de36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de38:	f000 fa9d 	bl	800e376 <__retarget_lock_release_recursive>
 800de3c:	89ab      	ldrh	r3, [r5, #12]
 800de3e:	065b      	lsls	r3, r3, #25
 800de40:	f53f af12 	bmi.w	800dc68 <_vfiprintf_r+0x4c>
 800de44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de46:	e711      	b.n	800dc6c <_vfiprintf_r+0x50>
 800de48:	ab03      	add	r3, sp, #12
 800de4a:	9300      	str	r3, [sp, #0]
 800de4c:	462a      	mov	r2, r5
 800de4e:	4630      	mov	r0, r6
 800de50:	4b09      	ldr	r3, [pc, #36]	; (800de78 <_vfiprintf_r+0x25c>)
 800de52:	a904      	add	r1, sp, #16
 800de54:	f7fc fafa 	bl	800a44c <_printf_i>
 800de58:	e7e4      	b.n	800de24 <_vfiprintf_r+0x208>
 800de5a:	bf00      	nop
 800de5c:	0800eb4c 	.word	0x0800eb4c
 800de60:	0800eb6c 	.word	0x0800eb6c
 800de64:	0800eb2c 	.word	0x0800eb2c
 800de68:	0800eadc 	.word	0x0800eadc
 800de6c:	0800eae2 	.word	0x0800eae2
 800de70:	0800eae6 	.word	0x0800eae6
 800de74:	08009f15 	.word	0x08009f15
 800de78:	0800dbf9 	.word	0x0800dbf9

0800de7c <__swbuf_r>:
 800de7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de7e:	460e      	mov	r6, r1
 800de80:	4614      	mov	r4, r2
 800de82:	4605      	mov	r5, r0
 800de84:	b118      	cbz	r0, 800de8e <__swbuf_r+0x12>
 800de86:	6983      	ldr	r3, [r0, #24]
 800de88:	b90b      	cbnz	r3, 800de8e <__swbuf_r+0x12>
 800de8a:	f000 f9d5 	bl	800e238 <__sinit>
 800de8e:	4b21      	ldr	r3, [pc, #132]	; (800df14 <__swbuf_r+0x98>)
 800de90:	429c      	cmp	r4, r3
 800de92:	d12b      	bne.n	800deec <__swbuf_r+0x70>
 800de94:	686c      	ldr	r4, [r5, #4]
 800de96:	69a3      	ldr	r3, [r4, #24]
 800de98:	60a3      	str	r3, [r4, #8]
 800de9a:	89a3      	ldrh	r3, [r4, #12]
 800de9c:	071a      	lsls	r2, r3, #28
 800de9e:	d52f      	bpl.n	800df00 <__swbuf_r+0x84>
 800dea0:	6923      	ldr	r3, [r4, #16]
 800dea2:	b36b      	cbz	r3, 800df00 <__swbuf_r+0x84>
 800dea4:	6923      	ldr	r3, [r4, #16]
 800dea6:	6820      	ldr	r0, [r4, #0]
 800dea8:	b2f6      	uxtb	r6, r6
 800deaa:	1ac0      	subs	r0, r0, r3
 800deac:	6963      	ldr	r3, [r4, #20]
 800deae:	4637      	mov	r7, r6
 800deb0:	4283      	cmp	r3, r0
 800deb2:	dc04      	bgt.n	800debe <__swbuf_r+0x42>
 800deb4:	4621      	mov	r1, r4
 800deb6:	4628      	mov	r0, r5
 800deb8:	f000 f92a 	bl	800e110 <_fflush_r>
 800debc:	bb30      	cbnz	r0, 800df0c <__swbuf_r+0x90>
 800debe:	68a3      	ldr	r3, [r4, #8]
 800dec0:	3001      	adds	r0, #1
 800dec2:	3b01      	subs	r3, #1
 800dec4:	60a3      	str	r3, [r4, #8]
 800dec6:	6823      	ldr	r3, [r4, #0]
 800dec8:	1c5a      	adds	r2, r3, #1
 800deca:	6022      	str	r2, [r4, #0]
 800decc:	701e      	strb	r6, [r3, #0]
 800dece:	6963      	ldr	r3, [r4, #20]
 800ded0:	4283      	cmp	r3, r0
 800ded2:	d004      	beq.n	800dede <__swbuf_r+0x62>
 800ded4:	89a3      	ldrh	r3, [r4, #12]
 800ded6:	07db      	lsls	r3, r3, #31
 800ded8:	d506      	bpl.n	800dee8 <__swbuf_r+0x6c>
 800deda:	2e0a      	cmp	r6, #10
 800dedc:	d104      	bne.n	800dee8 <__swbuf_r+0x6c>
 800dede:	4621      	mov	r1, r4
 800dee0:	4628      	mov	r0, r5
 800dee2:	f000 f915 	bl	800e110 <_fflush_r>
 800dee6:	b988      	cbnz	r0, 800df0c <__swbuf_r+0x90>
 800dee8:	4638      	mov	r0, r7
 800deea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800deec:	4b0a      	ldr	r3, [pc, #40]	; (800df18 <__swbuf_r+0x9c>)
 800deee:	429c      	cmp	r4, r3
 800def0:	d101      	bne.n	800def6 <__swbuf_r+0x7a>
 800def2:	68ac      	ldr	r4, [r5, #8]
 800def4:	e7cf      	b.n	800de96 <__swbuf_r+0x1a>
 800def6:	4b09      	ldr	r3, [pc, #36]	; (800df1c <__swbuf_r+0xa0>)
 800def8:	429c      	cmp	r4, r3
 800defa:	bf08      	it	eq
 800defc:	68ec      	ldreq	r4, [r5, #12]
 800defe:	e7ca      	b.n	800de96 <__swbuf_r+0x1a>
 800df00:	4621      	mov	r1, r4
 800df02:	4628      	mov	r0, r5
 800df04:	f000 f80c 	bl	800df20 <__swsetup_r>
 800df08:	2800      	cmp	r0, #0
 800df0a:	d0cb      	beq.n	800dea4 <__swbuf_r+0x28>
 800df0c:	f04f 37ff 	mov.w	r7, #4294967295
 800df10:	e7ea      	b.n	800dee8 <__swbuf_r+0x6c>
 800df12:	bf00      	nop
 800df14:	0800eb4c 	.word	0x0800eb4c
 800df18:	0800eb6c 	.word	0x0800eb6c
 800df1c:	0800eb2c 	.word	0x0800eb2c

0800df20 <__swsetup_r>:
 800df20:	4b32      	ldr	r3, [pc, #200]	; (800dfec <__swsetup_r+0xcc>)
 800df22:	b570      	push	{r4, r5, r6, lr}
 800df24:	681d      	ldr	r5, [r3, #0]
 800df26:	4606      	mov	r6, r0
 800df28:	460c      	mov	r4, r1
 800df2a:	b125      	cbz	r5, 800df36 <__swsetup_r+0x16>
 800df2c:	69ab      	ldr	r3, [r5, #24]
 800df2e:	b913      	cbnz	r3, 800df36 <__swsetup_r+0x16>
 800df30:	4628      	mov	r0, r5
 800df32:	f000 f981 	bl	800e238 <__sinit>
 800df36:	4b2e      	ldr	r3, [pc, #184]	; (800dff0 <__swsetup_r+0xd0>)
 800df38:	429c      	cmp	r4, r3
 800df3a:	d10f      	bne.n	800df5c <__swsetup_r+0x3c>
 800df3c:	686c      	ldr	r4, [r5, #4]
 800df3e:	89a3      	ldrh	r3, [r4, #12]
 800df40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df44:	0719      	lsls	r1, r3, #28
 800df46:	d42c      	bmi.n	800dfa2 <__swsetup_r+0x82>
 800df48:	06dd      	lsls	r5, r3, #27
 800df4a:	d411      	bmi.n	800df70 <__swsetup_r+0x50>
 800df4c:	2309      	movs	r3, #9
 800df4e:	6033      	str	r3, [r6, #0]
 800df50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800df54:	f04f 30ff 	mov.w	r0, #4294967295
 800df58:	81a3      	strh	r3, [r4, #12]
 800df5a:	e03e      	b.n	800dfda <__swsetup_r+0xba>
 800df5c:	4b25      	ldr	r3, [pc, #148]	; (800dff4 <__swsetup_r+0xd4>)
 800df5e:	429c      	cmp	r4, r3
 800df60:	d101      	bne.n	800df66 <__swsetup_r+0x46>
 800df62:	68ac      	ldr	r4, [r5, #8]
 800df64:	e7eb      	b.n	800df3e <__swsetup_r+0x1e>
 800df66:	4b24      	ldr	r3, [pc, #144]	; (800dff8 <__swsetup_r+0xd8>)
 800df68:	429c      	cmp	r4, r3
 800df6a:	bf08      	it	eq
 800df6c:	68ec      	ldreq	r4, [r5, #12]
 800df6e:	e7e6      	b.n	800df3e <__swsetup_r+0x1e>
 800df70:	0758      	lsls	r0, r3, #29
 800df72:	d512      	bpl.n	800df9a <__swsetup_r+0x7a>
 800df74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df76:	b141      	cbz	r1, 800df8a <__swsetup_r+0x6a>
 800df78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df7c:	4299      	cmp	r1, r3
 800df7e:	d002      	beq.n	800df86 <__swsetup_r+0x66>
 800df80:	4630      	mov	r0, r6
 800df82:	f7ff fb2f 	bl	800d5e4 <_free_r>
 800df86:	2300      	movs	r3, #0
 800df88:	6363      	str	r3, [r4, #52]	; 0x34
 800df8a:	89a3      	ldrh	r3, [r4, #12]
 800df8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800df90:	81a3      	strh	r3, [r4, #12]
 800df92:	2300      	movs	r3, #0
 800df94:	6063      	str	r3, [r4, #4]
 800df96:	6923      	ldr	r3, [r4, #16]
 800df98:	6023      	str	r3, [r4, #0]
 800df9a:	89a3      	ldrh	r3, [r4, #12]
 800df9c:	f043 0308 	orr.w	r3, r3, #8
 800dfa0:	81a3      	strh	r3, [r4, #12]
 800dfa2:	6923      	ldr	r3, [r4, #16]
 800dfa4:	b94b      	cbnz	r3, 800dfba <__swsetup_r+0x9a>
 800dfa6:	89a3      	ldrh	r3, [r4, #12]
 800dfa8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dfac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dfb0:	d003      	beq.n	800dfba <__swsetup_r+0x9a>
 800dfb2:	4621      	mov	r1, r4
 800dfb4:	4630      	mov	r0, r6
 800dfb6:	f000 fa05 	bl	800e3c4 <__smakebuf_r>
 800dfba:	89a0      	ldrh	r0, [r4, #12]
 800dfbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dfc0:	f010 0301 	ands.w	r3, r0, #1
 800dfc4:	d00a      	beq.n	800dfdc <__swsetup_r+0xbc>
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	60a3      	str	r3, [r4, #8]
 800dfca:	6963      	ldr	r3, [r4, #20]
 800dfcc:	425b      	negs	r3, r3
 800dfce:	61a3      	str	r3, [r4, #24]
 800dfd0:	6923      	ldr	r3, [r4, #16]
 800dfd2:	b943      	cbnz	r3, 800dfe6 <__swsetup_r+0xc6>
 800dfd4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dfd8:	d1ba      	bne.n	800df50 <__swsetup_r+0x30>
 800dfda:	bd70      	pop	{r4, r5, r6, pc}
 800dfdc:	0781      	lsls	r1, r0, #30
 800dfde:	bf58      	it	pl
 800dfe0:	6963      	ldrpl	r3, [r4, #20]
 800dfe2:	60a3      	str	r3, [r4, #8]
 800dfe4:	e7f4      	b.n	800dfd0 <__swsetup_r+0xb0>
 800dfe6:	2000      	movs	r0, #0
 800dfe8:	e7f7      	b.n	800dfda <__swsetup_r+0xba>
 800dfea:	bf00      	nop
 800dfec:	2000017c 	.word	0x2000017c
 800dff0:	0800eb4c 	.word	0x0800eb4c
 800dff4:	0800eb6c 	.word	0x0800eb6c
 800dff8:	0800eb2c 	.word	0x0800eb2c

0800dffc <abort>:
 800dffc:	2006      	movs	r0, #6
 800dffe:	b508      	push	{r3, lr}
 800e000:	f000 fa50 	bl	800e4a4 <raise>
 800e004:	2001      	movs	r0, #1
 800e006:	f7f3 fe08 	bl	8001c1a <_exit>
	...

0800e00c <__sflush_r>:
 800e00c:	898a      	ldrh	r2, [r1, #12]
 800e00e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e010:	4605      	mov	r5, r0
 800e012:	0710      	lsls	r0, r2, #28
 800e014:	460c      	mov	r4, r1
 800e016:	d457      	bmi.n	800e0c8 <__sflush_r+0xbc>
 800e018:	684b      	ldr	r3, [r1, #4]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	dc04      	bgt.n	800e028 <__sflush_r+0x1c>
 800e01e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e020:	2b00      	cmp	r3, #0
 800e022:	dc01      	bgt.n	800e028 <__sflush_r+0x1c>
 800e024:	2000      	movs	r0, #0
 800e026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e028:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e02a:	2e00      	cmp	r6, #0
 800e02c:	d0fa      	beq.n	800e024 <__sflush_r+0x18>
 800e02e:	2300      	movs	r3, #0
 800e030:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e034:	682f      	ldr	r7, [r5, #0]
 800e036:	602b      	str	r3, [r5, #0]
 800e038:	d032      	beq.n	800e0a0 <__sflush_r+0x94>
 800e03a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e03c:	89a3      	ldrh	r3, [r4, #12]
 800e03e:	075a      	lsls	r2, r3, #29
 800e040:	d505      	bpl.n	800e04e <__sflush_r+0x42>
 800e042:	6863      	ldr	r3, [r4, #4]
 800e044:	1ac0      	subs	r0, r0, r3
 800e046:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e048:	b10b      	cbz	r3, 800e04e <__sflush_r+0x42>
 800e04a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e04c:	1ac0      	subs	r0, r0, r3
 800e04e:	2300      	movs	r3, #0
 800e050:	4602      	mov	r2, r0
 800e052:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e054:	4628      	mov	r0, r5
 800e056:	6a21      	ldr	r1, [r4, #32]
 800e058:	47b0      	blx	r6
 800e05a:	1c43      	adds	r3, r0, #1
 800e05c:	89a3      	ldrh	r3, [r4, #12]
 800e05e:	d106      	bne.n	800e06e <__sflush_r+0x62>
 800e060:	6829      	ldr	r1, [r5, #0]
 800e062:	291d      	cmp	r1, #29
 800e064:	d82c      	bhi.n	800e0c0 <__sflush_r+0xb4>
 800e066:	4a29      	ldr	r2, [pc, #164]	; (800e10c <__sflush_r+0x100>)
 800e068:	40ca      	lsrs	r2, r1
 800e06a:	07d6      	lsls	r6, r2, #31
 800e06c:	d528      	bpl.n	800e0c0 <__sflush_r+0xb4>
 800e06e:	2200      	movs	r2, #0
 800e070:	6062      	str	r2, [r4, #4]
 800e072:	6922      	ldr	r2, [r4, #16]
 800e074:	04d9      	lsls	r1, r3, #19
 800e076:	6022      	str	r2, [r4, #0]
 800e078:	d504      	bpl.n	800e084 <__sflush_r+0x78>
 800e07a:	1c42      	adds	r2, r0, #1
 800e07c:	d101      	bne.n	800e082 <__sflush_r+0x76>
 800e07e:	682b      	ldr	r3, [r5, #0]
 800e080:	b903      	cbnz	r3, 800e084 <__sflush_r+0x78>
 800e082:	6560      	str	r0, [r4, #84]	; 0x54
 800e084:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e086:	602f      	str	r7, [r5, #0]
 800e088:	2900      	cmp	r1, #0
 800e08a:	d0cb      	beq.n	800e024 <__sflush_r+0x18>
 800e08c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e090:	4299      	cmp	r1, r3
 800e092:	d002      	beq.n	800e09a <__sflush_r+0x8e>
 800e094:	4628      	mov	r0, r5
 800e096:	f7ff faa5 	bl	800d5e4 <_free_r>
 800e09a:	2000      	movs	r0, #0
 800e09c:	6360      	str	r0, [r4, #52]	; 0x34
 800e09e:	e7c2      	b.n	800e026 <__sflush_r+0x1a>
 800e0a0:	6a21      	ldr	r1, [r4, #32]
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	4628      	mov	r0, r5
 800e0a6:	47b0      	blx	r6
 800e0a8:	1c41      	adds	r1, r0, #1
 800e0aa:	d1c7      	bne.n	800e03c <__sflush_r+0x30>
 800e0ac:	682b      	ldr	r3, [r5, #0]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d0c4      	beq.n	800e03c <__sflush_r+0x30>
 800e0b2:	2b1d      	cmp	r3, #29
 800e0b4:	d001      	beq.n	800e0ba <__sflush_r+0xae>
 800e0b6:	2b16      	cmp	r3, #22
 800e0b8:	d101      	bne.n	800e0be <__sflush_r+0xb2>
 800e0ba:	602f      	str	r7, [r5, #0]
 800e0bc:	e7b2      	b.n	800e024 <__sflush_r+0x18>
 800e0be:	89a3      	ldrh	r3, [r4, #12]
 800e0c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0c4:	81a3      	strh	r3, [r4, #12]
 800e0c6:	e7ae      	b.n	800e026 <__sflush_r+0x1a>
 800e0c8:	690f      	ldr	r7, [r1, #16]
 800e0ca:	2f00      	cmp	r7, #0
 800e0cc:	d0aa      	beq.n	800e024 <__sflush_r+0x18>
 800e0ce:	0793      	lsls	r3, r2, #30
 800e0d0:	bf18      	it	ne
 800e0d2:	2300      	movne	r3, #0
 800e0d4:	680e      	ldr	r6, [r1, #0]
 800e0d6:	bf08      	it	eq
 800e0d8:	694b      	ldreq	r3, [r1, #20]
 800e0da:	1bf6      	subs	r6, r6, r7
 800e0dc:	600f      	str	r7, [r1, #0]
 800e0de:	608b      	str	r3, [r1, #8]
 800e0e0:	2e00      	cmp	r6, #0
 800e0e2:	dd9f      	ble.n	800e024 <__sflush_r+0x18>
 800e0e4:	4633      	mov	r3, r6
 800e0e6:	463a      	mov	r2, r7
 800e0e8:	4628      	mov	r0, r5
 800e0ea:	6a21      	ldr	r1, [r4, #32]
 800e0ec:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800e0f0:	47e0      	blx	ip
 800e0f2:	2800      	cmp	r0, #0
 800e0f4:	dc06      	bgt.n	800e104 <__sflush_r+0xf8>
 800e0f6:	89a3      	ldrh	r3, [r4, #12]
 800e0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e0fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e100:	81a3      	strh	r3, [r4, #12]
 800e102:	e790      	b.n	800e026 <__sflush_r+0x1a>
 800e104:	4407      	add	r7, r0
 800e106:	1a36      	subs	r6, r6, r0
 800e108:	e7ea      	b.n	800e0e0 <__sflush_r+0xd4>
 800e10a:	bf00      	nop
 800e10c:	20400001 	.word	0x20400001

0800e110 <_fflush_r>:
 800e110:	b538      	push	{r3, r4, r5, lr}
 800e112:	690b      	ldr	r3, [r1, #16]
 800e114:	4605      	mov	r5, r0
 800e116:	460c      	mov	r4, r1
 800e118:	b913      	cbnz	r3, 800e120 <_fflush_r+0x10>
 800e11a:	2500      	movs	r5, #0
 800e11c:	4628      	mov	r0, r5
 800e11e:	bd38      	pop	{r3, r4, r5, pc}
 800e120:	b118      	cbz	r0, 800e12a <_fflush_r+0x1a>
 800e122:	6983      	ldr	r3, [r0, #24]
 800e124:	b90b      	cbnz	r3, 800e12a <_fflush_r+0x1a>
 800e126:	f000 f887 	bl	800e238 <__sinit>
 800e12a:	4b14      	ldr	r3, [pc, #80]	; (800e17c <_fflush_r+0x6c>)
 800e12c:	429c      	cmp	r4, r3
 800e12e:	d11b      	bne.n	800e168 <_fflush_r+0x58>
 800e130:	686c      	ldr	r4, [r5, #4]
 800e132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d0ef      	beq.n	800e11a <_fflush_r+0xa>
 800e13a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e13c:	07d0      	lsls	r0, r2, #31
 800e13e:	d404      	bmi.n	800e14a <_fflush_r+0x3a>
 800e140:	0599      	lsls	r1, r3, #22
 800e142:	d402      	bmi.n	800e14a <_fflush_r+0x3a>
 800e144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e146:	f000 f915 	bl	800e374 <__retarget_lock_acquire_recursive>
 800e14a:	4628      	mov	r0, r5
 800e14c:	4621      	mov	r1, r4
 800e14e:	f7ff ff5d 	bl	800e00c <__sflush_r>
 800e152:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e154:	4605      	mov	r5, r0
 800e156:	07da      	lsls	r2, r3, #31
 800e158:	d4e0      	bmi.n	800e11c <_fflush_r+0xc>
 800e15a:	89a3      	ldrh	r3, [r4, #12]
 800e15c:	059b      	lsls	r3, r3, #22
 800e15e:	d4dd      	bmi.n	800e11c <_fflush_r+0xc>
 800e160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e162:	f000 f908 	bl	800e376 <__retarget_lock_release_recursive>
 800e166:	e7d9      	b.n	800e11c <_fflush_r+0xc>
 800e168:	4b05      	ldr	r3, [pc, #20]	; (800e180 <_fflush_r+0x70>)
 800e16a:	429c      	cmp	r4, r3
 800e16c:	d101      	bne.n	800e172 <_fflush_r+0x62>
 800e16e:	68ac      	ldr	r4, [r5, #8]
 800e170:	e7df      	b.n	800e132 <_fflush_r+0x22>
 800e172:	4b04      	ldr	r3, [pc, #16]	; (800e184 <_fflush_r+0x74>)
 800e174:	429c      	cmp	r4, r3
 800e176:	bf08      	it	eq
 800e178:	68ec      	ldreq	r4, [r5, #12]
 800e17a:	e7da      	b.n	800e132 <_fflush_r+0x22>
 800e17c:	0800eb4c 	.word	0x0800eb4c
 800e180:	0800eb6c 	.word	0x0800eb6c
 800e184:	0800eb2c 	.word	0x0800eb2c

0800e188 <std>:
 800e188:	2300      	movs	r3, #0
 800e18a:	b510      	push	{r4, lr}
 800e18c:	4604      	mov	r4, r0
 800e18e:	e9c0 3300 	strd	r3, r3, [r0]
 800e192:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e196:	6083      	str	r3, [r0, #8]
 800e198:	8181      	strh	r1, [r0, #12]
 800e19a:	6643      	str	r3, [r0, #100]	; 0x64
 800e19c:	81c2      	strh	r2, [r0, #14]
 800e19e:	6183      	str	r3, [r0, #24]
 800e1a0:	4619      	mov	r1, r3
 800e1a2:	2208      	movs	r2, #8
 800e1a4:	305c      	adds	r0, #92	; 0x5c
 800e1a6:	f7fb fe0f 	bl	8009dc8 <memset>
 800e1aa:	4b05      	ldr	r3, [pc, #20]	; (800e1c0 <std+0x38>)
 800e1ac:	6224      	str	r4, [r4, #32]
 800e1ae:	6263      	str	r3, [r4, #36]	; 0x24
 800e1b0:	4b04      	ldr	r3, [pc, #16]	; (800e1c4 <std+0x3c>)
 800e1b2:	62a3      	str	r3, [r4, #40]	; 0x28
 800e1b4:	4b04      	ldr	r3, [pc, #16]	; (800e1c8 <std+0x40>)
 800e1b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e1b8:	4b04      	ldr	r3, [pc, #16]	; (800e1cc <std+0x44>)
 800e1ba:	6323      	str	r3, [r4, #48]	; 0x30
 800e1bc:	bd10      	pop	{r4, pc}
 800e1be:	bf00      	nop
 800e1c0:	0800e4dd 	.word	0x0800e4dd
 800e1c4:	0800e4ff 	.word	0x0800e4ff
 800e1c8:	0800e537 	.word	0x0800e537
 800e1cc:	0800e55b 	.word	0x0800e55b

0800e1d0 <_cleanup_r>:
 800e1d0:	4901      	ldr	r1, [pc, #4]	; (800e1d8 <_cleanup_r+0x8>)
 800e1d2:	f000 b8af 	b.w	800e334 <_fwalk_reent>
 800e1d6:	bf00      	nop
 800e1d8:	0800e111 	.word	0x0800e111

0800e1dc <__sfmoreglue>:
 800e1dc:	2268      	movs	r2, #104	; 0x68
 800e1de:	b570      	push	{r4, r5, r6, lr}
 800e1e0:	1e4d      	subs	r5, r1, #1
 800e1e2:	4355      	muls	r5, r2
 800e1e4:	460e      	mov	r6, r1
 800e1e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e1ea:	f7ff fa63 	bl	800d6b4 <_malloc_r>
 800e1ee:	4604      	mov	r4, r0
 800e1f0:	b140      	cbz	r0, 800e204 <__sfmoreglue+0x28>
 800e1f2:	2100      	movs	r1, #0
 800e1f4:	e9c0 1600 	strd	r1, r6, [r0]
 800e1f8:	300c      	adds	r0, #12
 800e1fa:	60a0      	str	r0, [r4, #8]
 800e1fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e200:	f7fb fde2 	bl	8009dc8 <memset>
 800e204:	4620      	mov	r0, r4
 800e206:	bd70      	pop	{r4, r5, r6, pc}

0800e208 <__sfp_lock_acquire>:
 800e208:	4801      	ldr	r0, [pc, #4]	; (800e210 <__sfp_lock_acquire+0x8>)
 800e20a:	f000 b8b3 	b.w	800e374 <__retarget_lock_acquire_recursive>
 800e20e:	bf00      	nop
 800e210:	20001619 	.word	0x20001619

0800e214 <__sfp_lock_release>:
 800e214:	4801      	ldr	r0, [pc, #4]	; (800e21c <__sfp_lock_release+0x8>)
 800e216:	f000 b8ae 	b.w	800e376 <__retarget_lock_release_recursive>
 800e21a:	bf00      	nop
 800e21c:	20001619 	.word	0x20001619

0800e220 <__sinit_lock_acquire>:
 800e220:	4801      	ldr	r0, [pc, #4]	; (800e228 <__sinit_lock_acquire+0x8>)
 800e222:	f000 b8a7 	b.w	800e374 <__retarget_lock_acquire_recursive>
 800e226:	bf00      	nop
 800e228:	2000161a 	.word	0x2000161a

0800e22c <__sinit_lock_release>:
 800e22c:	4801      	ldr	r0, [pc, #4]	; (800e234 <__sinit_lock_release+0x8>)
 800e22e:	f000 b8a2 	b.w	800e376 <__retarget_lock_release_recursive>
 800e232:	bf00      	nop
 800e234:	2000161a 	.word	0x2000161a

0800e238 <__sinit>:
 800e238:	b510      	push	{r4, lr}
 800e23a:	4604      	mov	r4, r0
 800e23c:	f7ff fff0 	bl	800e220 <__sinit_lock_acquire>
 800e240:	69a3      	ldr	r3, [r4, #24]
 800e242:	b11b      	cbz	r3, 800e24c <__sinit+0x14>
 800e244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e248:	f7ff bff0 	b.w	800e22c <__sinit_lock_release>
 800e24c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e250:	6523      	str	r3, [r4, #80]	; 0x50
 800e252:	4b13      	ldr	r3, [pc, #76]	; (800e2a0 <__sinit+0x68>)
 800e254:	4a13      	ldr	r2, [pc, #76]	; (800e2a4 <__sinit+0x6c>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	62a2      	str	r2, [r4, #40]	; 0x28
 800e25a:	42a3      	cmp	r3, r4
 800e25c:	bf08      	it	eq
 800e25e:	2301      	moveq	r3, #1
 800e260:	4620      	mov	r0, r4
 800e262:	bf08      	it	eq
 800e264:	61a3      	streq	r3, [r4, #24]
 800e266:	f000 f81f 	bl	800e2a8 <__sfp>
 800e26a:	6060      	str	r0, [r4, #4]
 800e26c:	4620      	mov	r0, r4
 800e26e:	f000 f81b 	bl	800e2a8 <__sfp>
 800e272:	60a0      	str	r0, [r4, #8]
 800e274:	4620      	mov	r0, r4
 800e276:	f000 f817 	bl	800e2a8 <__sfp>
 800e27a:	2200      	movs	r2, #0
 800e27c:	2104      	movs	r1, #4
 800e27e:	60e0      	str	r0, [r4, #12]
 800e280:	6860      	ldr	r0, [r4, #4]
 800e282:	f7ff ff81 	bl	800e188 <std>
 800e286:	2201      	movs	r2, #1
 800e288:	2109      	movs	r1, #9
 800e28a:	68a0      	ldr	r0, [r4, #8]
 800e28c:	f7ff ff7c 	bl	800e188 <std>
 800e290:	2202      	movs	r2, #2
 800e292:	2112      	movs	r1, #18
 800e294:	68e0      	ldr	r0, [r4, #12]
 800e296:	f7ff ff77 	bl	800e188 <std>
 800e29a:	2301      	movs	r3, #1
 800e29c:	61a3      	str	r3, [r4, #24]
 800e29e:	e7d1      	b.n	800e244 <__sinit+0xc>
 800e2a0:	0800e6e4 	.word	0x0800e6e4
 800e2a4:	0800e1d1 	.word	0x0800e1d1

0800e2a8 <__sfp>:
 800e2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2aa:	4607      	mov	r7, r0
 800e2ac:	f7ff ffac 	bl	800e208 <__sfp_lock_acquire>
 800e2b0:	4b1e      	ldr	r3, [pc, #120]	; (800e32c <__sfp+0x84>)
 800e2b2:	681e      	ldr	r6, [r3, #0]
 800e2b4:	69b3      	ldr	r3, [r6, #24]
 800e2b6:	b913      	cbnz	r3, 800e2be <__sfp+0x16>
 800e2b8:	4630      	mov	r0, r6
 800e2ba:	f7ff ffbd 	bl	800e238 <__sinit>
 800e2be:	3648      	adds	r6, #72	; 0x48
 800e2c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e2c4:	3b01      	subs	r3, #1
 800e2c6:	d503      	bpl.n	800e2d0 <__sfp+0x28>
 800e2c8:	6833      	ldr	r3, [r6, #0]
 800e2ca:	b30b      	cbz	r3, 800e310 <__sfp+0x68>
 800e2cc:	6836      	ldr	r6, [r6, #0]
 800e2ce:	e7f7      	b.n	800e2c0 <__sfp+0x18>
 800e2d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e2d4:	b9d5      	cbnz	r5, 800e30c <__sfp+0x64>
 800e2d6:	4b16      	ldr	r3, [pc, #88]	; (800e330 <__sfp+0x88>)
 800e2d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e2dc:	60e3      	str	r3, [r4, #12]
 800e2de:	6665      	str	r5, [r4, #100]	; 0x64
 800e2e0:	f000 f847 	bl	800e372 <__retarget_lock_init_recursive>
 800e2e4:	f7ff ff96 	bl	800e214 <__sfp_lock_release>
 800e2e8:	2208      	movs	r2, #8
 800e2ea:	4629      	mov	r1, r5
 800e2ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e2f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e2f4:	6025      	str	r5, [r4, #0]
 800e2f6:	61a5      	str	r5, [r4, #24]
 800e2f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e2fc:	f7fb fd64 	bl	8009dc8 <memset>
 800e300:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e304:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e308:	4620      	mov	r0, r4
 800e30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e30c:	3468      	adds	r4, #104	; 0x68
 800e30e:	e7d9      	b.n	800e2c4 <__sfp+0x1c>
 800e310:	2104      	movs	r1, #4
 800e312:	4638      	mov	r0, r7
 800e314:	f7ff ff62 	bl	800e1dc <__sfmoreglue>
 800e318:	4604      	mov	r4, r0
 800e31a:	6030      	str	r0, [r6, #0]
 800e31c:	2800      	cmp	r0, #0
 800e31e:	d1d5      	bne.n	800e2cc <__sfp+0x24>
 800e320:	f7ff ff78 	bl	800e214 <__sfp_lock_release>
 800e324:	230c      	movs	r3, #12
 800e326:	603b      	str	r3, [r7, #0]
 800e328:	e7ee      	b.n	800e308 <__sfp+0x60>
 800e32a:	bf00      	nop
 800e32c:	0800e6e4 	.word	0x0800e6e4
 800e330:	ffff0001 	.word	0xffff0001

0800e334 <_fwalk_reent>:
 800e334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e338:	4606      	mov	r6, r0
 800e33a:	4688      	mov	r8, r1
 800e33c:	2700      	movs	r7, #0
 800e33e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e342:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e346:	f1b9 0901 	subs.w	r9, r9, #1
 800e34a:	d505      	bpl.n	800e358 <_fwalk_reent+0x24>
 800e34c:	6824      	ldr	r4, [r4, #0]
 800e34e:	2c00      	cmp	r4, #0
 800e350:	d1f7      	bne.n	800e342 <_fwalk_reent+0xe>
 800e352:	4638      	mov	r0, r7
 800e354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e358:	89ab      	ldrh	r3, [r5, #12]
 800e35a:	2b01      	cmp	r3, #1
 800e35c:	d907      	bls.n	800e36e <_fwalk_reent+0x3a>
 800e35e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e362:	3301      	adds	r3, #1
 800e364:	d003      	beq.n	800e36e <_fwalk_reent+0x3a>
 800e366:	4629      	mov	r1, r5
 800e368:	4630      	mov	r0, r6
 800e36a:	47c0      	blx	r8
 800e36c:	4307      	orrs	r7, r0
 800e36e:	3568      	adds	r5, #104	; 0x68
 800e370:	e7e9      	b.n	800e346 <_fwalk_reent+0x12>

0800e372 <__retarget_lock_init_recursive>:
 800e372:	4770      	bx	lr

0800e374 <__retarget_lock_acquire_recursive>:
 800e374:	4770      	bx	lr

0800e376 <__retarget_lock_release_recursive>:
 800e376:	4770      	bx	lr

0800e378 <__swhatbuf_r>:
 800e378:	b570      	push	{r4, r5, r6, lr}
 800e37a:	460e      	mov	r6, r1
 800e37c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e380:	4614      	mov	r4, r2
 800e382:	2900      	cmp	r1, #0
 800e384:	461d      	mov	r5, r3
 800e386:	b096      	sub	sp, #88	; 0x58
 800e388:	da08      	bge.n	800e39c <__swhatbuf_r+0x24>
 800e38a:	2200      	movs	r2, #0
 800e38c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e390:	602a      	str	r2, [r5, #0]
 800e392:	061a      	lsls	r2, r3, #24
 800e394:	d410      	bmi.n	800e3b8 <__swhatbuf_r+0x40>
 800e396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e39a:	e00e      	b.n	800e3ba <__swhatbuf_r+0x42>
 800e39c:	466a      	mov	r2, sp
 800e39e:	f000 f903 	bl	800e5a8 <_fstat_r>
 800e3a2:	2800      	cmp	r0, #0
 800e3a4:	dbf1      	blt.n	800e38a <__swhatbuf_r+0x12>
 800e3a6:	9a01      	ldr	r2, [sp, #4]
 800e3a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e3ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e3b0:	425a      	negs	r2, r3
 800e3b2:	415a      	adcs	r2, r3
 800e3b4:	602a      	str	r2, [r5, #0]
 800e3b6:	e7ee      	b.n	800e396 <__swhatbuf_r+0x1e>
 800e3b8:	2340      	movs	r3, #64	; 0x40
 800e3ba:	2000      	movs	r0, #0
 800e3bc:	6023      	str	r3, [r4, #0]
 800e3be:	b016      	add	sp, #88	; 0x58
 800e3c0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e3c4 <__smakebuf_r>:
 800e3c4:	898b      	ldrh	r3, [r1, #12]
 800e3c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e3c8:	079d      	lsls	r5, r3, #30
 800e3ca:	4606      	mov	r6, r0
 800e3cc:	460c      	mov	r4, r1
 800e3ce:	d507      	bpl.n	800e3e0 <__smakebuf_r+0x1c>
 800e3d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e3d4:	6023      	str	r3, [r4, #0]
 800e3d6:	6123      	str	r3, [r4, #16]
 800e3d8:	2301      	movs	r3, #1
 800e3da:	6163      	str	r3, [r4, #20]
 800e3dc:	b002      	add	sp, #8
 800e3de:	bd70      	pop	{r4, r5, r6, pc}
 800e3e0:	466a      	mov	r2, sp
 800e3e2:	ab01      	add	r3, sp, #4
 800e3e4:	f7ff ffc8 	bl	800e378 <__swhatbuf_r>
 800e3e8:	9900      	ldr	r1, [sp, #0]
 800e3ea:	4605      	mov	r5, r0
 800e3ec:	4630      	mov	r0, r6
 800e3ee:	f7ff f961 	bl	800d6b4 <_malloc_r>
 800e3f2:	b948      	cbnz	r0, 800e408 <__smakebuf_r+0x44>
 800e3f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3f8:	059a      	lsls	r2, r3, #22
 800e3fa:	d4ef      	bmi.n	800e3dc <__smakebuf_r+0x18>
 800e3fc:	f023 0303 	bic.w	r3, r3, #3
 800e400:	f043 0302 	orr.w	r3, r3, #2
 800e404:	81a3      	strh	r3, [r4, #12]
 800e406:	e7e3      	b.n	800e3d0 <__smakebuf_r+0xc>
 800e408:	4b0d      	ldr	r3, [pc, #52]	; (800e440 <__smakebuf_r+0x7c>)
 800e40a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e40c:	89a3      	ldrh	r3, [r4, #12]
 800e40e:	6020      	str	r0, [r4, #0]
 800e410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e414:	81a3      	strh	r3, [r4, #12]
 800e416:	9b00      	ldr	r3, [sp, #0]
 800e418:	6120      	str	r0, [r4, #16]
 800e41a:	6163      	str	r3, [r4, #20]
 800e41c:	9b01      	ldr	r3, [sp, #4]
 800e41e:	b15b      	cbz	r3, 800e438 <__smakebuf_r+0x74>
 800e420:	4630      	mov	r0, r6
 800e422:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e426:	f000 f8d1 	bl	800e5cc <_isatty_r>
 800e42a:	b128      	cbz	r0, 800e438 <__smakebuf_r+0x74>
 800e42c:	89a3      	ldrh	r3, [r4, #12]
 800e42e:	f023 0303 	bic.w	r3, r3, #3
 800e432:	f043 0301 	orr.w	r3, r3, #1
 800e436:	81a3      	strh	r3, [r4, #12]
 800e438:	89a0      	ldrh	r0, [r4, #12]
 800e43a:	4305      	orrs	r5, r0
 800e43c:	81a5      	strh	r5, [r4, #12]
 800e43e:	e7cd      	b.n	800e3dc <__smakebuf_r+0x18>
 800e440:	0800e1d1 	.word	0x0800e1d1

0800e444 <_malloc_usable_size_r>:
 800e444:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e448:	1f18      	subs	r0, r3, #4
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	bfbc      	itt	lt
 800e44e:	580b      	ldrlt	r3, [r1, r0]
 800e450:	18c0      	addlt	r0, r0, r3
 800e452:	4770      	bx	lr

0800e454 <_raise_r>:
 800e454:	291f      	cmp	r1, #31
 800e456:	b538      	push	{r3, r4, r5, lr}
 800e458:	4604      	mov	r4, r0
 800e45a:	460d      	mov	r5, r1
 800e45c:	d904      	bls.n	800e468 <_raise_r+0x14>
 800e45e:	2316      	movs	r3, #22
 800e460:	6003      	str	r3, [r0, #0]
 800e462:	f04f 30ff 	mov.w	r0, #4294967295
 800e466:	bd38      	pop	{r3, r4, r5, pc}
 800e468:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e46a:	b112      	cbz	r2, 800e472 <_raise_r+0x1e>
 800e46c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e470:	b94b      	cbnz	r3, 800e486 <_raise_r+0x32>
 800e472:	4620      	mov	r0, r4
 800e474:	f000 f830 	bl	800e4d8 <_getpid_r>
 800e478:	462a      	mov	r2, r5
 800e47a:	4601      	mov	r1, r0
 800e47c:	4620      	mov	r0, r4
 800e47e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e482:	f000 b817 	b.w	800e4b4 <_kill_r>
 800e486:	2b01      	cmp	r3, #1
 800e488:	d00a      	beq.n	800e4a0 <_raise_r+0x4c>
 800e48a:	1c59      	adds	r1, r3, #1
 800e48c:	d103      	bne.n	800e496 <_raise_r+0x42>
 800e48e:	2316      	movs	r3, #22
 800e490:	6003      	str	r3, [r0, #0]
 800e492:	2001      	movs	r0, #1
 800e494:	e7e7      	b.n	800e466 <_raise_r+0x12>
 800e496:	2400      	movs	r4, #0
 800e498:	4628      	mov	r0, r5
 800e49a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e49e:	4798      	blx	r3
 800e4a0:	2000      	movs	r0, #0
 800e4a2:	e7e0      	b.n	800e466 <_raise_r+0x12>

0800e4a4 <raise>:
 800e4a4:	4b02      	ldr	r3, [pc, #8]	; (800e4b0 <raise+0xc>)
 800e4a6:	4601      	mov	r1, r0
 800e4a8:	6818      	ldr	r0, [r3, #0]
 800e4aa:	f7ff bfd3 	b.w	800e454 <_raise_r>
 800e4ae:	bf00      	nop
 800e4b0:	2000017c 	.word	0x2000017c

0800e4b4 <_kill_r>:
 800e4b4:	b538      	push	{r3, r4, r5, lr}
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	4d06      	ldr	r5, [pc, #24]	; (800e4d4 <_kill_r+0x20>)
 800e4ba:	4604      	mov	r4, r0
 800e4bc:	4608      	mov	r0, r1
 800e4be:	4611      	mov	r1, r2
 800e4c0:	602b      	str	r3, [r5, #0]
 800e4c2:	f7f3 fb9a 	bl	8001bfa <_kill>
 800e4c6:	1c43      	adds	r3, r0, #1
 800e4c8:	d102      	bne.n	800e4d0 <_kill_r+0x1c>
 800e4ca:	682b      	ldr	r3, [r5, #0]
 800e4cc:	b103      	cbz	r3, 800e4d0 <_kill_r+0x1c>
 800e4ce:	6023      	str	r3, [r4, #0]
 800e4d0:	bd38      	pop	{r3, r4, r5, pc}
 800e4d2:	bf00      	nop
 800e4d4:	20001614 	.word	0x20001614

0800e4d8 <_getpid_r>:
 800e4d8:	f7f3 bb88 	b.w	8001bec <_getpid>

0800e4dc <__sread>:
 800e4dc:	b510      	push	{r4, lr}
 800e4de:	460c      	mov	r4, r1
 800e4e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4e4:	f000 f894 	bl	800e610 <_read_r>
 800e4e8:	2800      	cmp	r0, #0
 800e4ea:	bfab      	itete	ge
 800e4ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e4ee:	89a3      	ldrhlt	r3, [r4, #12]
 800e4f0:	181b      	addge	r3, r3, r0
 800e4f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e4f6:	bfac      	ite	ge
 800e4f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800e4fa:	81a3      	strhlt	r3, [r4, #12]
 800e4fc:	bd10      	pop	{r4, pc}

0800e4fe <__swrite>:
 800e4fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e502:	461f      	mov	r7, r3
 800e504:	898b      	ldrh	r3, [r1, #12]
 800e506:	4605      	mov	r5, r0
 800e508:	05db      	lsls	r3, r3, #23
 800e50a:	460c      	mov	r4, r1
 800e50c:	4616      	mov	r6, r2
 800e50e:	d505      	bpl.n	800e51c <__swrite+0x1e>
 800e510:	2302      	movs	r3, #2
 800e512:	2200      	movs	r2, #0
 800e514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e518:	f000 f868 	bl	800e5ec <_lseek_r>
 800e51c:	89a3      	ldrh	r3, [r4, #12]
 800e51e:	4632      	mov	r2, r6
 800e520:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e524:	81a3      	strh	r3, [r4, #12]
 800e526:	4628      	mov	r0, r5
 800e528:	463b      	mov	r3, r7
 800e52a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e52e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e532:	f000 b817 	b.w	800e564 <_write_r>

0800e536 <__sseek>:
 800e536:	b510      	push	{r4, lr}
 800e538:	460c      	mov	r4, r1
 800e53a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e53e:	f000 f855 	bl	800e5ec <_lseek_r>
 800e542:	1c43      	adds	r3, r0, #1
 800e544:	89a3      	ldrh	r3, [r4, #12]
 800e546:	bf15      	itete	ne
 800e548:	6560      	strne	r0, [r4, #84]	; 0x54
 800e54a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e54e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e552:	81a3      	strheq	r3, [r4, #12]
 800e554:	bf18      	it	ne
 800e556:	81a3      	strhne	r3, [r4, #12]
 800e558:	bd10      	pop	{r4, pc}

0800e55a <__sclose>:
 800e55a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e55e:	f000 b813 	b.w	800e588 <_close_r>
	...

0800e564 <_write_r>:
 800e564:	b538      	push	{r3, r4, r5, lr}
 800e566:	4604      	mov	r4, r0
 800e568:	4608      	mov	r0, r1
 800e56a:	4611      	mov	r1, r2
 800e56c:	2200      	movs	r2, #0
 800e56e:	4d05      	ldr	r5, [pc, #20]	; (800e584 <_write_r+0x20>)
 800e570:	602a      	str	r2, [r5, #0]
 800e572:	461a      	mov	r2, r3
 800e574:	f7f3 fb78 	bl	8001c68 <_write>
 800e578:	1c43      	adds	r3, r0, #1
 800e57a:	d102      	bne.n	800e582 <_write_r+0x1e>
 800e57c:	682b      	ldr	r3, [r5, #0]
 800e57e:	b103      	cbz	r3, 800e582 <_write_r+0x1e>
 800e580:	6023      	str	r3, [r4, #0]
 800e582:	bd38      	pop	{r3, r4, r5, pc}
 800e584:	20001614 	.word	0x20001614

0800e588 <_close_r>:
 800e588:	b538      	push	{r3, r4, r5, lr}
 800e58a:	2300      	movs	r3, #0
 800e58c:	4d05      	ldr	r5, [pc, #20]	; (800e5a4 <_close_r+0x1c>)
 800e58e:	4604      	mov	r4, r0
 800e590:	4608      	mov	r0, r1
 800e592:	602b      	str	r3, [r5, #0]
 800e594:	f7f3 fb84 	bl	8001ca0 <_close>
 800e598:	1c43      	adds	r3, r0, #1
 800e59a:	d102      	bne.n	800e5a2 <_close_r+0x1a>
 800e59c:	682b      	ldr	r3, [r5, #0]
 800e59e:	b103      	cbz	r3, 800e5a2 <_close_r+0x1a>
 800e5a0:	6023      	str	r3, [r4, #0]
 800e5a2:	bd38      	pop	{r3, r4, r5, pc}
 800e5a4:	20001614 	.word	0x20001614

0800e5a8 <_fstat_r>:
 800e5a8:	b538      	push	{r3, r4, r5, lr}
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	4d06      	ldr	r5, [pc, #24]	; (800e5c8 <_fstat_r+0x20>)
 800e5ae:	4604      	mov	r4, r0
 800e5b0:	4608      	mov	r0, r1
 800e5b2:	4611      	mov	r1, r2
 800e5b4:	602b      	str	r3, [r5, #0]
 800e5b6:	f7f3 fb7e 	bl	8001cb6 <_fstat>
 800e5ba:	1c43      	adds	r3, r0, #1
 800e5bc:	d102      	bne.n	800e5c4 <_fstat_r+0x1c>
 800e5be:	682b      	ldr	r3, [r5, #0]
 800e5c0:	b103      	cbz	r3, 800e5c4 <_fstat_r+0x1c>
 800e5c2:	6023      	str	r3, [r4, #0]
 800e5c4:	bd38      	pop	{r3, r4, r5, pc}
 800e5c6:	bf00      	nop
 800e5c8:	20001614 	.word	0x20001614

0800e5cc <_isatty_r>:
 800e5cc:	b538      	push	{r3, r4, r5, lr}
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	4d05      	ldr	r5, [pc, #20]	; (800e5e8 <_isatty_r+0x1c>)
 800e5d2:	4604      	mov	r4, r0
 800e5d4:	4608      	mov	r0, r1
 800e5d6:	602b      	str	r3, [r5, #0]
 800e5d8:	f7f3 fb7c 	bl	8001cd4 <_isatty>
 800e5dc:	1c43      	adds	r3, r0, #1
 800e5de:	d102      	bne.n	800e5e6 <_isatty_r+0x1a>
 800e5e0:	682b      	ldr	r3, [r5, #0]
 800e5e2:	b103      	cbz	r3, 800e5e6 <_isatty_r+0x1a>
 800e5e4:	6023      	str	r3, [r4, #0]
 800e5e6:	bd38      	pop	{r3, r4, r5, pc}
 800e5e8:	20001614 	.word	0x20001614

0800e5ec <_lseek_r>:
 800e5ec:	b538      	push	{r3, r4, r5, lr}
 800e5ee:	4604      	mov	r4, r0
 800e5f0:	4608      	mov	r0, r1
 800e5f2:	4611      	mov	r1, r2
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	4d05      	ldr	r5, [pc, #20]	; (800e60c <_lseek_r+0x20>)
 800e5f8:	602a      	str	r2, [r5, #0]
 800e5fa:	461a      	mov	r2, r3
 800e5fc:	f7f3 fb74 	bl	8001ce8 <_lseek>
 800e600:	1c43      	adds	r3, r0, #1
 800e602:	d102      	bne.n	800e60a <_lseek_r+0x1e>
 800e604:	682b      	ldr	r3, [r5, #0]
 800e606:	b103      	cbz	r3, 800e60a <_lseek_r+0x1e>
 800e608:	6023      	str	r3, [r4, #0]
 800e60a:	bd38      	pop	{r3, r4, r5, pc}
 800e60c:	20001614 	.word	0x20001614

0800e610 <_read_r>:
 800e610:	b538      	push	{r3, r4, r5, lr}
 800e612:	4604      	mov	r4, r0
 800e614:	4608      	mov	r0, r1
 800e616:	4611      	mov	r1, r2
 800e618:	2200      	movs	r2, #0
 800e61a:	4d05      	ldr	r5, [pc, #20]	; (800e630 <_read_r+0x20>)
 800e61c:	602a      	str	r2, [r5, #0]
 800e61e:	461a      	mov	r2, r3
 800e620:	f7f3 fb05 	bl	8001c2e <_read>
 800e624:	1c43      	adds	r3, r0, #1
 800e626:	d102      	bne.n	800e62e <_read_r+0x1e>
 800e628:	682b      	ldr	r3, [r5, #0]
 800e62a:	b103      	cbz	r3, 800e62e <_read_r+0x1e>
 800e62c:	6023      	str	r3, [r4, #0]
 800e62e:	bd38      	pop	{r3, r4, r5, pc}
 800e630:	20001614 	.word	0x20001614

0800e634 <_init>:
 800e634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e636:	bf00      	nop
 800e638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e63a:	bc08      	pop	{r3}
 800e63c:	469e      	mov	lr, r3
 800e63e:	4770      	bx	lr

0800e640 <_fini>:
 800e640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e642:	bf00      	nop
 800e644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e646:	bc08      	pop	{r3}
 800e648:	469e      	mov	lr, r3
 800e64a:	4770      	bx	lr
