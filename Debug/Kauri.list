
Kauri.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ec0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08008fcc  08008fcc  00018fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009088  08009088  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009088  08009088  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009088  08009088  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009088  08009088  00019088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800908c  0800908c  0001908c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009090  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001260  200001e0  08009270  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001440  08009270  00021440  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000faab  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c98  00000000  00000000  0002fcb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00032950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c00  00000000  00000000  000336a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019eb8  00000000  00000000  000342a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ff1  00000000  00000000  0004e158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087736  00000000  00000000  00060149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e787f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003944  00000000  00000000  000e78d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08008fb4 	.word	0x08008fb4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08008fb4 	.word	0x08008fb4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b0ea      	sub	sp, #424	; 0x1a8
 8000150:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fa17 	bl	8000584 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f853 	bl	8000200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8db 	bl	8000314 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 f8ab 	bl	80002b8 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000162:	f007 fddf 	bl	8007d24 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint8_t reg = 0x18<<1;
 8000166:	2330      	movs	r3, #48	; 0x30
 8000168:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
  uint8_t data = 0;
 800016c:	2300      	movs	r3, #0
 800016e:	f887 3195 	strb.w	r3, [r7, #405]	; 0x195

  char* text[100] = {0};
 8000172:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000176:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800017a:	4618      	mov	r0, r3
 800017c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000180:	461a      	mov	r2, r3
 8000182:	2100      	movs	r1, #0
 8000184:	f008 fa94 	bl	80086b0 <memset>
  sprintf(text, "Init\n\r");
 8000188:	1d3b      	adds	r3, r7, #4
 800018a:	491a      	ldr	r1, [pc, #104]	; (80001f4 <main+0xa8>)
 800018c:	4618      	mov	r0, r3
 800018e:	f008 fa97 	bl	80086c0 <siprintf>
  CDC_Transmit_FS(text, sizeof(text));
 8000192:	1d3b      	adds	r3, r7, #4
 8000194:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000198:	4618      	mov	r0, r3
 800019a:	f007 fe81 	bl	8007ea0 <CDC_Transmit_FS>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_I2C_IsDeviceReady(&hi2c1, reg, 10, 100);
 800019e:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 80001a2:	b299      	uxth	r1, r3
 80001a4:	2364      	movs	r3, #100	; 0x64
 80001a6:	220a      	movs	r2, #10
 80001a8:	4813      	ldr	r0, [pc, #76]	; (80001f8 <main+0xac>)
 80001aa:	f001 f88b 	bl	80012c4 <HAL_I2C_IsDeviceReady>
	HAL_StatusTypeDef stat = HAL_I2C_Mem_Read(&hi2c1, (reg+1), 0x28, 1, &data, 1, 100);
 80001ae:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 80001b2:	b29b      	uxth	r3, r3
 80001b4:	3301      	adds	r3, #1
 80001b6:	b299      	uxth	r1, r3
 80001b8:	2364      	movs	r3, #100	; 0x64
 80001ba:	9302      	str	r3, [sp, #8]
 80001bc:	2301      	movs	r3, #1
 80001be:	9301      	str	r3, [sp, #4]
 80001c0:	f207 1395 	addw	r3, r7, #405	; 0x195
 80001c4:	9300      	str	r3, [sp, #0]
 80001c6:	2301      	movs	r3, #1
 80001c8:	2228      	movs	r2, #40	; 0x28
 80001ca:	480b      	ldr	r0, [pc, #44]	; (80001f8 <main+0xac>)
 80001cc:	f000 fe12 	bl	8000df4 <HAL_I2C_Mem_Read>
 80001d0:	4603      	mov	r3, r0
 80001d2:	f887 3196 	strb.w	r3, [r7, #406]	; 0x196
	sprintf(text, "%X == %X\n\r", stat, data);
 80001d6:	f897 2196 	ldrb.w	r2, [r7, #406]	; 0x196
 80001da:	f897 3195 	ldrb.w	r3, [r7, #405]	; 0x195
 80001de:	1d38      	adds	r0, r7, #4
 80001e0:	4906      	ldr	r1, [pc, #24]	; (80001fc <main+0xb0>)
 80001e2:	f008 fa6d 	bl	80086c0 <siprintf>
	CDC_Transmit_FS(text, sizeof(text));
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80001ec:	4618      	mov	r0, r3
 80001ee:	f007 fe57 	bl	8007ea0 <CDC_Transmit_FS>
  {
 80001f2:	e7d4      	b.n	800019e <main+0x52>
 80001f4:	08008fcc 	.word	0x08008fcc
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	08008fd4 	.word	0x08008fd4

08000200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b094      	sub	sp, #80	; 0x50
 8000204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000206:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800020a:	2228      	movs	r2, #40	; 0x28
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f008 fa4e 	bl	80086b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000214:	f107 0314 	add.w	r3, r7, #20
 8000218:	2200      	movs	r2, #0
 800021a:	601a      	str	r2, [r3, #0]
 800021c:	605a      	str	r2, [r3, #4]
 800021e:	609a      	str	r2, [r3, #8]
 8000220:	60da      	str	r2, [r3, #12]
 8000222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000230:	2301      	movs	r3, #1
 8000232:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000238:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023e:	2301      	movs	r3, #1
 8000240:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000242:	2302      	movs	r3, #2
 8000244:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000246:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800024c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000250:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000252:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000256:	4618      	mov	r0, r3
 8000258:	f003 f9a6 	bl	80035a8 <HAL_RCC_OscConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000262:	f000 f885 	bl	8000370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000266:	230f      	movs	r3, #15
 8000268:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026a:	2302      	movs	r3, #2
 800026c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000276:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800027c:	f107 0314 	add.w	r3, r7, #20
 8000280:	2101      	movs	r1, #1
 8000282:	4618      	mov	r0, r3
 8000284:	f003 fc12 	bl	8003aac <HAL_RCC_ClockConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800028e:	f000 f86f 	bl	8000370 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000292:	2310      	movs	r3, #16
 8000294:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000296:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800029a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	4618      	mov	r0, r3
 80002a0:	f003 fd7e 	bl	8003da0 <HAL_RCCEx_PeriphCLKConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002aa:	f000 f861 	bl	8000370 <Error_Handler>
  }
}
 80002ae:	bf00      	nop
 80002b0:	3750      	adds	r7, #80	; 0x50
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
	...

080002b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002bc:	4b12      	ldr	r3, [pc, #72]	; (8000308 <MX_I2C1_Init+0x50>)
 80002be:	4a13      	ldr	r2, [pc, #76]	; (800030c <MX_I2C1_Init+0x54>)
 80002c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002c2:	4b11      	ldr	r3, [pc, #68]	; (8000308 <MX_I2C1_Init+0x50>)
 80002c4:	4a12      	ldr	r2, [pc, #72]	; (8000310 <MX_I2C1_Init+0x58>)
 80002c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002c8:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <MX_I2C1_Init+0x50>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002ce:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <MX_I2C1_Init+0x50>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <MX_I2C1_Init+0x50>)
 80002d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002dc:	4b0a      	ldr	r3, [pc, #40]	; (8000308 <MX_I2C1_Init+0x50>)
 80002de:	2200      	movs	r2, #0
 80002e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002e2:	4b09      	ldr	r3, [pc, #36]	; (8000308 <MX_I2C1_Init+0x50>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002e8:	4b07      	ldr	r3, [pc, #28]	; (8000308 <MX_I2C1_Init+0x50>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002ee:	4b06      	ldr	r3, [pc, #24]	; (8000308 <MX_I2C1_Init+0x50>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002f4:	4804      	ldr	r0, [pc, #16]	; (8000308 <MX_I2C1_Init+0x50>)
 80002f6:	f000 fc39 	bl	8000b6c <HAL_I2C_Init>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000300:	f000 f836 	bl	8000370 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}
 8000308:	200001fc 	.word	0x200001fc
 800030c:	40005400 	.word	0x40005400
 8000310:	000186a0 	.word	0x000186a0

08000314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000314:	b480      	push	{r7}
 8000316:	b085      	sub	sp, #20
 8000318:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800031a:	4b14      	ldr	r3, [pc, #80]	; (800036c <MX_GPIO_Init+0x58>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	4a13      	ldr	r2, [pc, #76]	; (800036c <MX_GPIO_Init+0x58>)
 8000320:	f043 0320 	orr.w	r3, r3, #32
 8000324:	6193      	str	r3, [r2, #24]
 8000326:	4b11      	ldr	r3, [pc, #68]	; (800036c <MX_GPIO_Init+0x58>)
 8000328:	699b      	ldr	r3, [r3, #24]
 800032a:	f003 0320 	and.w	r3, r3, #32
 800032e:	60fb      	str	r3, [r7, #12]
 8000330:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000332:	4b0e      	ldr	r3, [pc, #56]	; (800036c <MX_GPIO_Init+0x58>)
 8000334:	699b      	ldr	r3, [r3, #24]
 8000336:	4a0d      	ldr	r2, [pc, #52]	; (800036c <MX_GPIO_Init+0x58>)
 8000338:	f043 0304 	orr.w	r3, r3, #4
 800033c:	6193      	str	r3, [r2, #24]
 800033e:	4b0b      	ldr	r3, [pc, #44]	; (800036c <MX_GPIO_Init+0x58>)
 8000340:	699b      	ldr	r3, [r3, #24]
 8000342:	f003 0304 	and.w	r3, r3, #4
 8000346:	60bb      	str	r3, [r7, #8]
 8000348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800034a:	4b08      	ldr	r3, [pc, #32]	; (800036c <MX_GPIO_Init+0x58>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	4a07      	ldr	r2, [pc, #28]	; (800036c <MX_GPIO_Init+0x58>)
 8000350:	f043 0308 	orr.w	r3, r3, #8
 8000354:	6193      	str	r3, [r2, #24]
 8000356:	4b05      	ldr	r3, [pc, #20]	; (800036c <MX_GPIO_Init+0x58>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	f003 0308 	and.w	r3, r3, #8
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	687b      	ldr	r3, [r7, #4]

}
 8000362:	bf00      	nop
 8000364:	3714      	adds	r7, #20
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr
 800036c:	40021000 	.word	0x40021000

08000370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000374:	b672      	cpsid	i
}
 8000376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000378:	e7fe      	b.n	8000378 <Error_Handler+0x8>
	...

0800037c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800037c:	b480      	push	{r7}
 800037e:	b085      	sub	sp, #20
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000382:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <HAL_MspInit+0x5c>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	4a14      	ldr	r2, [pc, #80]	; (80003d8 <HAL_MspInit+0x5c>)
 8000388:	f043 0301 	orr.w	r3, r3, #1
 800038c:	6193      	str	r3, [r2, #24]
 800038e:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <HAL_MspInit+0x5c>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	f003 0301 	and.w	r3, r3, #1
 8000396:	60bb      	str	r3, [r7, #8]
 8000398:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800039a:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <HAL_MspInit+0x5c>)
 800039c:	69db      	ldr	r3, [r3, #28]
 800039e:	4a0e      	ldr	r2, [pc, #56]	; (80003d8 <HAL_MspInit+0x5c>)
 80003a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003a4:	61d3      	str	r3, [r2, #28]
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <HAL_MspInit+0x5c>)
 80003a8:	69db      	ldr	r3, [r3, #28]
 80003aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ae:	607b      	str	r3, [r7, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003b2:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <HAL_MspInit+0x60>)
 80003b4:	685b      	ldr	r3, [r3, #4]
 80003b6:	60fb      	str	r3, [r7, #12]
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003be:	60fb      	str	r3, [r7, #12]
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	4a04      	ldr	r2, [pc, #16]	; (80003dc <HAL_MspInit+0x60>)
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ce:	bf00      	nop
 80003d0:	3714      	adds	r7, #20
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr
 80003d8:	40021000 	.word	0x40021000
 80003dc:	40010000 	.word	0x40010000

080003e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b088      	sub	sp, #32
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e8:	f107 0310 	add.w	r3, r7, #16
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	609a      	str	r2, [r3, #8]
 80003f4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a15      	ldr	r2, [pc, #84]	; (8000450 <HAL_I2C_MspInit+0x70>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d123      	bne.n	8000448 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000400:	4b14      	ldr	r3, [pc, #80]	; (8000454 <HAL_I2C_MspInit+0x74>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a13      	ldr	r2, [pc, #76]	; (8000454 <HAL_I2C_MspInit+0x74>)
 8000406:	f043 0308 	orr.w	r3, r3, #8
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b11      	ldr	r3, [pc, #68]	; (8000454 <HAL_I2C_MspInit+0x74>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0308 	and.w	r3, r3, #8
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000418:	23c0      	movs	r3, #192	; 0xc0
 800041a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800041c:	2312      	movs	r3, #18
 800041e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000420:	2303      	movs	r3, #3
 8000422:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000424:	f107 0310 	add.w	r3, r7, #16
 8000428:	4619      	mov	r1, r3
 800042a:	480b      	ldr	r0, [pc, #44]	; (8000458 <HAL_I2C_MspInit+0x78>)
 800042c:	f000 fa1a 	bl	8000864 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000430:	4b08      	ldr	r3, [pc, #32]	; (8000454 <HAL_I2C_MspInit+0x74>)
 8000432:	69db      	ldr	r3, [r3, #28]
 8000434:	4a07      	ldr	r2, [pc, #28]	; (8000454 <HAL_I2C_MspInit+0x74>)
 8000436:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800043a:	61d3      	str	r3, [r2, #28]
 800043c:	4b05      	ldr	r3, [pc, #20]	; (8000454 <HAL_I2C_MspInit+0x74>)
 800043e:	69db      	ldr	r3, [r3, #28]
 8000440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000444:	60bb      	str	r3, [r7, #8]
 8000446:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000448:	bf00      	nop
 800044a:	3720      	adds	r7, #32
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40005400 	.word	0x40005400
 8000454:	40021000 	.word	0x40021000
 8000458:	40010c00 	.word	0x40010c00

0800045c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000460:	e7fe      	b.n	8000460 <NMI_Handler+0x4>

08000462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000462:	b480      	push	{r7}
 8000464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000466:	e7fe      	b.n	8000466 <HardFault_Handler+0x4>

08000468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800046c:	e7fe      	b.n	800046c <MemManage_Handler+0x4>

0800046e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800046e:	b480      	push	{r7}
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000472:	e7fe      	b.n	8000472 <BusFault_Handler+0x4>

08000474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000478:	e7fe      	b.n	8000478 <UsageFault_Handler+0x4>

0800047a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800047a:	b480      	push	{r7}
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800047e:	bf00      	nop
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr

08000486 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000486:	b480      	push	{r7}
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800048a:	bf00      	nop
 800048c:	46bd      	mov	sp, r7
 800048e:	bc80      	pop	{r7}
 8000490:	4770      	bx	lr

08000492 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000492:	b480      	push	{r7}
 8000494:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000496:	bf00      	nop
 8000498:	46bd      	mov	sp, r7
 800049a:	bc80      	pop	{r7}
 800049c:	4770      	bx	lr

0800049e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800049e:	b580      	push	{r7, lr}
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004a2:	f000 f8b5 	bl	8000610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
	...

080004ac <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80004b0:	4802      	ldr	r0, [pc, #8]	; (80004bc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80004b2:	f001 fc2f 	bl	8001d14 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	20000f20 	.word	0x20000f20

080004c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004c8:	4a14      	ldr	r2, [pc, #80]	; (800051c <_sbrk+0x5c>)
 80004ca:	4b15      	ldr	r3, [pc, #84]	; (8000520 <_sbrk+0x60>)
 80004cc:	1ad3      	subs	r3, r2, r3
 80004ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004d4:	4b13      	ldr	r3, [pc, #76]	; (8000524 <_sbrk+0x64>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d102      	bne.n	80004e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004dc:	4b11      	ldr	r3, [pc, #68]	; (8000524 <_sbrk+0x64>)
 80004de:	4a12      	ldr	r2, [pc, #72]	; (8000528 <_sbrk+0x68>)
 80004e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004e2:	4b10      	ldr	r3, [pc, #64]	; (8000524 <_sbrk+0x64>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4413      	add	r3, r2
 80004ea:	693a      	ldr	r2, [r7, #16]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	d207      	bcs.n	8000500 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004f0:	f008 f8b4 	bl	800865c <__errno>
 80004f4:	4603      	mov	r3, r0
 80004f6:	220c      	movs	r2, #12
 80004f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004fa:	f04f 33ff 	mov.w	r3, #4294967295
 80004fe:	e009      	b.n	8000514 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <_sbrk+0x64>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000506:	4b07      	ldr	r3, [pc, #28]	; (8000524 <_sbrk+0x64>)
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4413      	add	r3, r2
 800050e:	4a05      	ldr	r2, [pc, #20]	; (8000524 <_sbrk+0x64>)
 8000510:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000512:	68fb      	ldr	r3, [r7, #12]
}
 8000514:	4618      	mov	r0, r3
 8000516:	3718      	adds	r7, #24
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	20005000 	.word	0x20005000
 8000520:	00000400 	.word	0x00000400
 8000524:	20000250 	.word	0x20000250
 8000528:	20001440 	.word	0x20001440

0800052c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr

08000538 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000538:	f7ff fff8 	bl	800052c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800053c:	480b      	ldr	r0, [pc, #44]	; (800056c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800053e:	490c      	ldr	r1, [pc, #48]	; (8000570 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000540:	4a0c      	ldr	r2, [pc, #48]	; (8000574 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000544:	e002      	b.n	800054c <LoopCopyDataInit>

08000546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800054a:	3304      	adds	r3, #4

0800054c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800054c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800054e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000550:	d3f9      	bcc.n	8000546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000552:	4a09      	ldr	r2, [pc, #36]	; (8000578 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000554:	4c09      	ldr	r4, [pc, #36]	; (800057c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000558:	e001      	b.n	800055e <LoopFillZerobss>

0800055a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800055a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800055c:	3204      	adds	r2, #4

0800055e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800055e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000560:	d3fb      	bcc.n	800055a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000562:	f008 f881 	bl	8008668 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000566:	f7ff fdf1 	bl	800014c <main>
  bx lr
 800056a:	4770      	bx	lr
  ldr r0, =_sdata
 800056c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000570:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000574:	08009090 	.word	0x08009090
  ldr r2, =_sbss
 8000578:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800057c:	20001440 	.word	0x20001440

08000580 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000580:	e7fe      	b.n	8000580 <ADC1_2_IRQHandler>
	...

08000584 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <HAL_Init+0x28>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a07      	ldr	r2, [pc, #28]	; (80005ac <HAL_Init+0x28>)
 800058e:	f043 0310 	orr.w	r3, r3, #16
 8000592:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000594:	2003      	movs	r0, #3
 8000596:	f000 f923 	bl	80007e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800059a:	200f      	movs	r0, #15
 800059c:	f000 f808 	bl	80005b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a0:	f7ff feec 	bl	800037c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a4:	2300      	movs	r3, #0
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40022000 	.word	0x40022000

080005b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005b8:	4b12      	ldr	r3, [pc, #72]	; (8000604 <HAL_InitTick+0x54>)
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <HAL_InitTick+0x58>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	4619      	mov	r1, r3
 80005c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 f93b 	bl	800084a <HAL_SYSTICK_Config>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005da:	2301      	movs	r3, #1
 80005dc:	e00e      	b.n	80005fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2b0f      	cmp	r3, #15
 80005e2:	d80a      	bhi.n	80005fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e4:	2200      	movs	r2, #0
 80005e6:	6879      	ldr	r1, [r7, #4]
 80005e8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ec:	f000 f903 	bl	80007f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f0:	4a06      	ldr	r2, [pc, #24]	; (800060c <HAL_InitTick+0x5c>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005f6:	2300      	movs	r3, #0
 80005f8:	e000      	b.n	80005fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005fa:	2301      	movs	r3, #1
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000000 	.word	0x20000000
 8000608:	20000008 	.word	0x20000008
 800060c:	20000004 	.word	0x20000004

08000610 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <HAL_IncTick+0x1c>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	461a      	mov	r2, r3
 800061a:	4b05      	ldr	r3, [pc, #20]	; (8000630 <HAL_IncTick+0x20>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4413      	add	r3, r2
 8000620:	4a03      	ldr	r2, [pc, #12]	; (8000630 <HAL_IncTick+0x20>)
 8000622:	6013      	str	r3, [r2, #0]
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	20000008 	.word	0x20000008
 8000630:	20000254 	.word	0x20000254

08000634 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  return uwTick;
 8000638:	4b02      	ldr	r3, [pc, #8]	; (8000644 <HAL_GetTick+0x10>)
 800063a:	681b      	ldr	r3, [r3, #0]
}
 800063c:	4618      	mov	r0, r3
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr
 8000644:	20000254 	.word	0x20000254

08000648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f003 0307 	and.w	r3, r3, #7
 8000656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <__NVIC_SetPriorityGrouping+0x44>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000664:	4013      	ands	r3, r2
 8000666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000670:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800067a:	4a04      	ldr	r2, [pc, #16]	; (800068c <__NVIC_SetPriorityGrouping+0x44>)
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	60d3      	str	r3, [r2, #12]
}
 8000680:	bf00      	nop
 8000682:	3714      	adds	r7, #20
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	0a1b      	lsrs	r3, r3, #8
 800069a:	f003 0307 	and.w	r3, r3, #7
}
 800069e:	4618      	mov	r0, r3
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	db0b      	blt.n	80006d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	f003 021f 	and.w	r2, r3, #31
 80006c4:	4906      	ldr	r1, [pc, #24]	; (80006e0 <__NVIC_EnableIRQ+0x34>)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	095b      	lsrs	r3, r3, #5
 80006cc:	2001      	movs	r0, #1
 80006ce:	fa00 f202 	lsl.w	r2, r0, r2
 80006d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr
 80006e0:	e000e100 	.word	0xe000e100

080006e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	6039      	str	r1, [r7, #0]
 80006ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	db0a      	blt.n	800070e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	490c      	ldr	r1, [pc, #48]	; (8000730 <__NVIC_SetPriority+0x4c>)
 80006fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000702:	0112      	lsls	r2, r2, #4
 8000704:	b2d2      	uxtb	r2, r2
 8000706:	440b      	add	r3, r1
 8000708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800070c:	e00a      	b.n	8000724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4908      	ldr	r1, [pc, #32]	; (8000734 <__NVIC_SetPriority+0x50>)
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	f003 030f 	and.w	r3, r3, #15
 800071a:	3b04      	subs	r3, #4
 800071c:	0112      	lsls	r2, r2, #4
 800071e:	b2d2      	uxtb	r2, r2
 8000720:	440b      	add	r3, r1
 8000722:	761a      	strb	r2, [r3, #24]
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000e100 	.word	0xe000e100
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000738:	b480      	push	{r7}
 800073a:	b089      	sub	sp, #36	; 0x24
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	60b9      	str	r1, [r7, #8]
 8000742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	f003 0307 	and.w	r3, r3, #7
 800074a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800074c:	69fb      	ldr	r3, [r7, #28]
 800074e:	f1c3 0307 	rsb	r3, r3, #7
 8000752:	2b04      	cmp	r3, #4
 8000754:	bf28      	it	cs
 8000756:	2304      	movcs	r3, #4
 8000758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	3304      	adds	r3, #4
 800075e:	2b06      	cmp	r3, #6
 8000760:	d902      	bls.n	8000768 <NVIC_EncodePriority+0x30>
 8000762:	69fb      	ldr	r3, [r7, #28]
 8000764:	3b03      	subs	r3, #3
 8000766:	e000      	b.n	800076a <NVIC_EncodePriority+0x32>
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800076c:	f04f 32ff 	mov.w	r2, #4294967295
 8000770:	69bb      	ldr	r3, [r7, #24]
 8000772:	fa02 f303 	lsl.w	r3, r2, r3
 8000776:	43da      	mvns	r2, r3
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	401a      	ands	r2, r3
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000780:	f04f 31ff 	mov.w	r1, #4294967295
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	fa01 f303 	lsl.w	r3, r1, r3
 800078a:	43d9      	mvns	r1, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000790:	4313      	orrs	r3, r2
         );
}
 8000792:	4618      	mov	r0, r3
 8000794:	3724      	adds	r7, #36	; 0x24
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr

0800079c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3b01      	subs	r3, #1
 80007a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007ac:	d301      	bcc.n	80007b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ae:	2301      	movs	r3, #1
 80007b0:	e00f      	b.n	80007d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007b2:	4a0a      	ldr	r2, [pc, #40]	; (80007dc <SysTick_Config+0x40>)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	3b01      	subs	r3, #1
 80007b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ba:	210f      	movs	r1, #15
 80007bc:	f04f 30ff 	mov.w	r0, #4294967295
 80007c0:	f7ff ff90 	bl	80006e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <SysTick_Config+0x40>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ca:	4b04      	ldr	r3, [pc, #16]	; (80007dc <SysTick_Config+0x40>)
 80007cc:	2207      	movs	r2, #7
 80007ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007d0:	2300      	movs	r3, #0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	e000e010 	.word	0xe000e010

080007e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff ff2d 	bl	8000648 <__NVIC_SetPriorityGrouping>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b086      	sub	sp, #24
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	4603      	mov	r3, r0
 80007fe:	60b9      	str	r1, [r7, #8]
 8000800:	607a      	str	r2, [r7, #4]
 8000802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000808:	f7ff ff42 	bl	8000690 <__NVIC_GetPriorityGrouping>
 800080c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	68b9      	ldr	r1, [r7, #8]
 8000812:	6978      	ldr	r0, [r7, #20]
 8000814:	f7ff ff90 	bl	8000738 <NVIC_EncodePriority>
 8000818:	4602      	mov	r2, r0
 800081a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800081e:	4611      	mov	r1, r2
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ff5f 	bl	80006e4 <__NVIC_SetPriority>
}
 8000826:	bf00      	nop
 8000828:	3718      	adds	r7, #24
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
 8000834:	4603      	mov	r3, r0
 8000836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff ff35 	bl	80006ac <__NVIC_EnableIRQ>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	b082      	sub	sp, #8
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f7ff ffa2 	bl	800079c <SysTick_Config>
 8000858:	4603      	mov	r3, r0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000864:	b480      	push	{r7}
 8000866:	b08b      	sub	sp, #44	; 0x2c
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000872:	2300      	movs	r3, #0
 8000874:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000876:	e169      	b.n	8000b4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000878:	2201      	movs	r2, #1
 800087a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087c:	fa02 f303 	lsl.w	r3, r2, r3
 8000880:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	69fa      	ldr	r2, [r7, #28]
 8000888:	4013      	ands	r3, r2
 800088a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800088c:	69ba      	ldr	r2, [r7, #24]
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	429a      	cmp	r2, r3
 8000892:	f040 8158 	bne.w	8000b46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	4a9a      	ldr	r2, [pc, #616]	; (8000b04 <HAL_GPIO_Init+0x2a0>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d05e      	beq.n	800095e <HAL_GPIO_Init+0xfa>
 80008a0:	4a98      	ldr	r2, [pc, #608]	; (8000b04 <HAL_GPIO_Init+0x2a0>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d875      	bhi.n	8000992 <HAL_GPIO_Init+0x12e>
 80008a6:	4a98      	ldr	r2, [pc, #608]	; (8000b08 <HAL_GPIO_Init+0x2a4>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d058      	beq.n	800095e <HAL_GPIO_Init+0xfa>
 80008ac:	4a96      	ldr	r2, [pc, #600]	; (8000b08 <HAL_GPIO_Init+0x2a4>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d86f      	bhi.n	8000992 <HAL_GPIO_Init+0x12e>
 80008b2:	4a96      	ldr	r2, [pc, #600]	; (8000b0c <HAL_GPIO_Init+0x2a8>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d052      	beq.n	800095e <HAL_GPIO_Init+0xfa>
 80008b8:	4a94      	ldr	r2, [pc, #592]	; (8000b0c <HAL_GPIO_Init+0x2a8>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d869      	bhi.n	8000992 <HAL_GPIO_Init+0x12e>
 80008be:	4a94      	ldr	r2, [pc, #592]	; (8000b10 <HAL_GPIO_Init+0x2ac>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d04c      	beq.n	800095e <HAL_GPIO_Init+0xfa>
 80008c4:	4a92      	ldr	r2, [pc, #584]	; (8000b10 <HAL_GPIO_Init+0x2ac>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d863      	bhi.n	8000992 <HAL_GPIO_Init+0x12e>
 80008ca:	4a92      	ldr	r2, [pc, #584]	; (8000b14 <HAL_GPIO_Init+0x2b0>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d046      	beq.n	800095e <HAL_GPIO_Init+0xfa>
 80008d0:	4a90      	ldr	r2, [pc, #576]	; (8000b14 <HAL_GPIO_Init+0x2b0>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d85d      	bhi.n	8000992 <HAL_GPIO_Init+0x12e>
 80008d6:	2b12      	cmp	r3, #18
 80008d8:	d82a      	bhi.n	8000930 <HAL_GPIO_Init+0xcc>
 80008da:	2b12      	cmp	r3, #18
 80008dc:	d859      	bhi.n	8000992 <HAL_GPIO_Init+0x12e>
 80008de:	a201      	add	r2, pc, #4	; (adr r2, 80008e4 <HAL_GPIO_Init+0x80>)
 80008e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e4:	0800095f 	.word	0x0800095f
 80008e8:	08000939 	.word	0x08000939
 80008ec:	0800094b 	.word	0x0800094b
 80008f0:	0800098d 	.word	0x0800098d
 80008f4:	08000993 	.word	0x08000993
 80008f8:	08000993 	.word	0x08000993
 80008fc:	08000993 	.word	0x08000993
 8000900:	08000993 	.word	0x08000993
 8000904:	08000993 	.word	0x08000993
 8000908:	08000993 	.word	0x08000993
 800090c:	08000993 	.word	0x08000993
 8000910:	08000993 	.word	0x08000993
 8000914:	08000993 	.word	0x08000993
 8000918:	08000993 	.word	0x08000993
 800091c:	08000993 	.word	0x08000993
 8000920:	08000993 	.word	0x08000993
 8000924:	08000993 	.word	0x08000993
 8000928:	08000941 	.word	0x08000941
 800092c:	08000955 	.word	0x08000955
 8000930:	4a79      	ldr	r2, [pc, #484]	; (8000b18 <HAL_GPIO_Init+0x2b4>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d013      	beq.n	800095e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000936:	e02c      	b.n	8000992 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	623b      	str	r3, [r7, #32]
          break;
 800093e:	e029      	b.n	8000994 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	3304      	adds	r3, #4
 8000946:	623b      	str	r3, [r7, #32]
          break;
 8000948:	e024      	b.n	8000994 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	68db      	ldr	r3, [r3, #12]
 800094e:	3308      	adds	r3, #8
 8000950:	623b      	str	r3, [r7, #32]
          break;
 8000952:	e01f      	b.n	8000994 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	330c      	adds	r3, #12
 800095a:	623b      	str	r3, [r7, #32]
          break;
 800095c:	e01a      	b.n	8000994 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d102      	bne.n	800096c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000966:	2304      	movs	r3, #4
 8000968:	623b      	str	r3, [r7, #32]
          break;
 800096a:	e013      	b.n	8000994 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	689b      	ldr	r3, [r3, #8]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d105      	bne.n	8000980 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000974:	2308      	movs	r3, #8
 8000976:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	69fa      	ldr	r2, [r7, #28]
 800097c:	611a      	str	r2, [r3, #16]
          break;
 800097e:	e009      	b.n	8000994 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000980:	2308      	movs	r3, #8
 8000982:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	69fa      	ldr	r2, [r7, #28]
 8000988:	615a      	str	r2, [r3, #20]
          break;
 800098a:	e003      	b.n	8000994 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]
          break;
 8000990:	e000      	b.n	8000994 <HAL_GPIO_Init+0x130>
          break;
 8000992:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	2bff      	cmp	r3, #255	; 0xff
 8000998:	d801      	bhi.n	800099e <HAL_GPIO_Init+0x13a>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	e001      	b.n	80009a2 <HAL_GPIO_Init+0x13e>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	3304      	adds	r3, #4
 80009a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	2bff      	cmp	r3, #255	; 0xff
 80009a8:	d802      	bhi.n	80009b0 <HAL_GPIO_Init+0x14c>
 80009aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	e002      	b.n	80009b6 <HAL_GPIO_Init+0x152>
 80009b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b2:	3b08      	subs	r3, #8
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	210f      	movs	r1, #15
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	fa01 f303 	lsl.w	r3, r1, r3
 80009c4:	43db      	mvns	r3, r3
 80009c6:	401a      	ands	r2, r3
 80009c8:	6a39      	ldr	r1, [r7, #32]
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	fa01 f303 	lsl.w	r3, r1, r3
 80009d0:	431a      	orrs	r2, r3
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009de:	2b00      	cmp	r3, #0
 80009e0:	f000 80b1 	beq.w	8000b46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009e4:	4b4d      	ldr	r3, [pc, #308]	; (8000b1c <HAL_GPIO_Init+0x2b8>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a4c      	ldr	r2, [pc, #304]	; (8000b1c <HAL_GPIO_Init+0x2b8>)
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b4a      	ldr	r3, [pc, #296]	; (8000b1c <HAL_GPIO_Init+0x2b8>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009fc:	4a48      	ldr	r2, [pc, #288]	; (8000b20 <HAL_GPIO_Init+0x2bc>)
 80009fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a00:	089b      	lsrs	r3, r3, #2
 8000a02:	3302      	adds	r3, #2
 8000a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0c:	f003 0303 	and.w	r3, r3, #3
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	220f      	movs	r2, #15
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a40      	ldr	r2, [pc, #256]	; (8000b24 <HAL_GPIO_Init+0x2c0>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d013      	beq.n	8000a50 <HAL_GPIO_Init+0x1ec>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a3f      	ldr	r2, [pc, #252]	; (8000b28 <HAL_GPIO_Init+0x2c4>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d00d      	beq.n	8000a4c <HAL_GPIO_Init+0x1e8>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a3e      	ldr	r2, [pc, #248]	; (8000b2c <HAL_GPIO_Init+0x2c8>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d007      	beq.n	8000a48 <HAL_GPIO_Init+0x1e4>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a3d      	ldr	r2, [pc, #244]	; (8000b30 <HAL_GPIO_Init+0x2cc>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d101      	bne.n	8000a44 <HAL_GPIO_Init+0x1e0>
 8000a40:	2303      	movs	r3, #3
 8000a42:	e006      	b.n	8000a52 <HAL_GPIO_Init+0x1ee>
 8000a44:	2304      	movs	r3, #4
 8000a46:	e004      	b.n	8000a52 <HAL_GPIO_Init+0x1ee>
 8000a48:	2302      	movs	r3, #2
 8000a4a:	e002      	b.n	8000a52 <HAL_GPIO_Init+0x1ee>
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e000      	b.n	8000a52 <HAL_GPIO_Init+0x1ee>
 8000a50:	2300      	movs	r3, #0
 8000a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a54:	f002 0203 	and.w	r2, r2, #3
 8000a58:	0092      	lsls	r2, r2, #2
 8000a5a:	4093      	lsls	r3, r2
 8000a5c:	68fa      	ldr	r2, [r7, #12]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a62:	492f      	ldr	r1, [pc, #188]	; (8000b20 <HAL_GPIO_Init+0x2bc>)
 8000a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a66:	089b      	lsrs	r3, r3, #2
 8000a68:	3302      	adds	r3, #2
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d006      	beq.n	8000a8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a7c:	4b2d      	ldr	r3, [pc, #180]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000a7e:	689a      	ldr	r2, [r3, #8]
 8000a80:	492c      	ldr	r1, [pc, #176]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	608b      	str	r3, [r1, #8]
 8000a88:	e006      	b.n	8000a98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a8a:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000a8c:	689a      	ldr	r2, [r3, #8]
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	43db      	mvns	r3, r3
 8000a92:	4928      	ldr	r1, [pc, #160]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000a94:	4013      	ands	r3, r2
 8000a96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d006      	beq.n	8000ab2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000aa4:	4b23      	ldr	r3, [pc, #140]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000aa6:	68da      	ldr	r2, [r3, #12]
 8000aa8:	4922      	ldr	r1, [pc, #136]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	60cb      	str	r3, [r1, #12]
 8000ab0:	e006      	b.n	8000ac0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ab2:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000ab4:	68da      	ldr	r2, [r3, #12]
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	491e      	ldr	r1, [pc, #120]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000abc:	4013      	ands	r3, r2
 8000abe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d006      	beq.n	8000ada <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000acc:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000ace:	685a      	ldr	r2, [r3, #4]
 8000ad0:	4918      	ldr	r1, [pc, #96]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	604b      	str	r3, [r1, #4]
 8000ad8:	e006      	b.n	8000ae8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ada:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	4914      	ldr	r1, [pc, #80]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d021      	beq.n	8000b38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	490e      	ldr	r1, [pc, #56]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	600b      	str	r3, [r1, #0]
 8000b00:	e021      	b.n	8000b46 <HAL_GPIO_Init+0x2e2>
 8000b02:	bf00      	nop
 8000b04:	10320000 	.word	0x10320000
 8000b08:	10310000 	.word	0x10310000
 8000b0c:	10220000 	.word	0x10220000
 8000b10:	10210000 	.word	0x10210000
 8000b14:	10120000 	.word	0x10120000
 8000b18:	10110000 	.word	0x10110000
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	40010000 	.word	0x40010000
 8000b24:	40010800 	.word	0x40010800
 8000b28:	40010c00 	.word	0x40010c00
 8000b2c:	40011000 	.word	0x40011000
 8000b30:	40011400 	.word	0x40011400
 8000b34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b38:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <HAL_GPIO_Init+0x304>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	4909      	ldr	r1, [pc, #36]	; (8000b68 <HAL_GPIO_Init+0x304>)
 8000b42:	4013      	ands	r3, r2
 8000b44:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b48:	3301      	adds	r3, #1
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b52:	fa22 f303 	lsr.w	r3, r2, r3
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	f47f ae8e 	bne.w	8000878 <HAL_GPIO_Init+0x14>
  }
}
 8000b5c:	bf00      	nop
 8000b5e:	bf00      	nop
 8000b60:	372c      	adds	r7, #44	; 0x2c
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr
 8000b68:	40010400 	.word	0x40010400

08000b6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d101      	bne.n	8000b7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e12b      	b.n	8000dd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d106      	bne.n	8000b98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff fc24 	bl	80003e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2224      	movs	r2, #36	; 0x24
 8000b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f022 0201 	bic.w	r2, r2, #1
 8000bae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000bbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000bce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000bd0:	f003 f8b4 	bl	8003d3c <HAL_RCC_GetPCLK1Freq>
 8000bd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	4a81      	ldr	r2, [pc, #516]	; (8000de0 <HAL_I2C_Init+0x274>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d807      	bhi.n	8000bf0 <HAL_I2C_Init+0x84>
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	4a80      	ldr	r2, [pc, #512]	; (8000de4 <HAL_I2C_Init+0x278>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	bf94      	ite	ls
 8000be8:	2301      	movls	r3, #1
 8000bea:	2300      	movhi	r3, #0
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	e006      	b.n	8000bfe <HAL_I2C_Init+0x92>
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4a7d      	ldr	r2, [pc, #500]	; (8000de8 <HAL_I2C_Init+0x27c>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	bf94      	ite	ls
 8000bf8:	2301      	movls	r3, #1
 8000bfa:	2300      	movhi	r3, #0
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	e0e7      	b.n	8000dd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	4a78      	ldr	r2, [pc, #480]	; (8000dec <HAL_I2C_Init+0x280>)
 8000c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c0e:	0c9b      	lsrs	r3, r3, #18
 8000c10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	68ba      	ldr	r2, [r7, #8]
 8000c22:	430a      	orrs	r2, r1
 8000c24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	6a1b      	ldr	r3, [r3, #32]
 8000c2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	4a6a      	ldr	r2, [pc, #424]	; (8000de0 <HAL_I2C_Init+0x274>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d802      	bhi.n	8000c40 <HAL_I2C_Init+0xd4>
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	e009      	b.n	8000c54 <HAL_I2C_Init+0xe8>
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000c46:	fb02 f303 	mul.w	r3, r2, r3
 8000c4a:	4a69      	ldr	r2, [pc, #420]	; (8000df0 <HAL_I2C_Init+0x284>)
 8000c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c50:	099b      	lsrs	r3, r3, #6
 8000c52:	3301      	adds	r3, #1
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	6812      	ldr	r2, [r2, #0]
 8000c58:	430b      	orrs	r3, r1
 8000c5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000c66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	495c      	ldr	r1, [pc, #368]	; (8000de0 <HAL_I2C_Init+0x274>)
 8000c70:	428b      	cmp	r3, r1
 8000c72:	d819      	bhi.n	8000ca8 <HAL_I2C_Init+0x13c>
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	1e59      	subs	r1, r3, #1
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c82:	1c59      	adds	r1, r3, #1
 8000c84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000c88:	400b      	ands	r3, r1
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d00a      	beq.n	8000ca4 <HAL_I2C_Init+0x138>
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	1e59      	subs	r1, r3, #1
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ca2:	e051      	b.n	8000d48 <HAL_I2C_Init+0x1dc>
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	e04f      	b.n	8000d48 <HAL_I2C_Init+0x1dc>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d111      	bne.n	8000cd4 <HAL_I2C_Init+0x168>
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	1e58      	subs	r0, r3, #1
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6859      	ldr	r1, [r3, #4]
 8000cb8:	460b      	mov	r3, r1
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	440b      	add	r3, r1
 8000cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	bf0c      	ite	eq
 8000ccc:	2301      	moveq	r3, #1
 8000cce:	2300      	movne	r3, #0
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	e012      	b.n	8000cfa <HAL_I2C_Init+0x18e>
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	1e58      	subs	r0, r3, #1
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6859      	ldr	r1, [r3, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	440b      	add	r3, r1
 8000ce2:	0099      	lsls	r1, r3, #2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cea:	3301      	adds	r3, #1
 8000cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	bf0c      	ite	eq
 8000cf4:	2301      	moveq	r3, #1
 8000cf6:	2300      	movne	r3, #0
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <HAL_I2C_Init+0x196>
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e022      	b.n	8000d48 <HAL_I2C_Init+0x1dc>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d10e      	bne.n	8000d28 <HAL_I2C_Init+0x1bc>
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	1e58      	subs	r0, r3, #1
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6859      	ldr	r1, [r3, #4]
 8000d12:	460b      	mov	r3, r1
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	440b      	add	r3, r1
 8000d18:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d26:	e00f      	b.n	8000d48 <HAL_I2C_Init+0x1dc>
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	1e58      	subs	r0, r3, #1
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6859      	ldr	r1, [r3, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	440b      	add	r3, r1
 8000d36:	0099      	lsls	r1, r3, #2
 8000d38:	440b      	add	r3, r1
 8000d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d3e:	3301      	adds	r3, #1
 8000d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d48:	6879      	ldr	r1, [r7, #4]
 8000d4a:	6809      	ldr	r1, [r1, #0]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	69da      	ldr	r2, [r3, #28]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6a1b      	ldr	r3, [r3, #32]
 8000d62:	431a      	orrs	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000d76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	6911      	ldr	r1, [r2, #16]
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	68d2      	ldr	r2, [r2, #12]
 8000d82:	4311      	orrs	r1, r2
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	6812      	ldr	r2, [r2, #0]
 8000d88:	430b      	orrs	r3, r1
 8000d8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	695a      	ldr	r2, [r3, #20]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	431a      	orrs	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	430a      	orrs	r2, r1
 8000da6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f042 0201 	orr.w	r2, r2, #1
 8000db6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2220      	movs	r2, #32
 8000dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	000186a0 	.word	0x000186a0
 8000de4:	001e847f 	.word	0x001e847f
 8000de8:	003d08ff 	.word	0x003d08ff
 8000dec:	431bde83 	.word	0x431bde83
 8000df0:	10624dd3 	.word	0x10624dd3

08000df4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08c      	sub	sp, #48	; 0x30
 8000df8:	af02      	add	r7, sp, #8
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	4611      	mov	r1, r2
 8000e00:	461a      	mov	r2, r3
 8000e02:	4603      	mov	r3, r0
 8000e04:	817b      	strh	r3, [r7, #10]
 8000e06:	460b      	mov	r3, r1
 8000e08:	813b      	strh	r3, [r7, #8]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000e12:	f7ff fc0f 	bl	8000634 <HAL_GetTick>
 8000e16:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	2b20      	cmp	r3, #32
 8000e22:	f040 8244 	bne.w	80012ae <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	2319      	movs	r3, #25
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	4982      	ldr	r1, [pc, #520]	; (8001038 <HAL_I2C_Mem_Read+0x244>)
 8000e30:	68f8      	ldr	r0, [r7, #12]
 8000e32:	f000 fc5d 	bl	80016f0 <I2C_WaitOnFlagUntilTimeout>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	e237      	b.n	80012b0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d101      	bne.n	8000e4e <HAL_I2C_Mem_Read+0x5a>
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	e230      	b.n	80012b0 <HAL_I2C_Mem_Read+0x4bc>
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	2201      	movs	r2, #1
 8000e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d007      	beq.n	8000e74 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f042 0201 	orr.w	r2, r2, #1
 8000e72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2222      	movs	r2, #34	; 0x22
 8000e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2240      	movs	r2, #64	; 0x40
 8000e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2200      	movs	r2, #0
 8000e98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000ea4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4a62      	ldr	r2, [pc, #392]	; (800103c <HAL_I2C_Mem_Read+0x248>)
 8000eb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000eb6:	88f8      	ldrh	r0, [r7, #6]
 8000eb8:	893a      	ldrh	r2, [r7, #8]
 8000eba:	8979      	ldrh	r1, [r7, #10]
 8000ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	68f8      	ldr	r0, [r7, #12]
 8000ec8:	f000 fb2a 	bl	8001520 <I2C_RequestMemoryRead>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e1ec      	b.n	80012b0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d113      	bne.n	8000f06 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	695b      	ldr	r3, [r3, #20]
 8000ee8:	61fb      	str	r3, [r7, #28]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	61fb      	str	r3, [r7, #28]
 8000ef2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	e1c0      	b.n	8001288 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d11e      	bne.n	8000f4c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f1e:	b672      	cpsid	i
}
 8000f20:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	695b      	ldr	r3, [r3, #20]
 8000f2c:	61bb      	str	r3, [r7, #24]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	61bb      	str	r3, [r7, #24]
 8000f36:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f46:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000f48:	b662      	cpsie	i
}
 8000f4a:	e035      	b.n	8000fb8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d11e      	bne.n	8000f92 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f64:	b672      	cpsid	i
}
 8000f66:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f8c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000f8e:	b662      	cpsie	i
}
 8000f90:	e012      	b.n	8000fb8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fa0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8000fb8:	e166      	b.n	8001288 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fbe:	2b03      	cmp	r3, #3
 8000fc0:	f200 811f 	bhi.w	8001202 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d123      	bne.n	8001014 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000fd0:	68f8      	ldr	r0, [r7, #12]
 8000fd2:	f000 fcef 	bl	80019b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e167      	b.n	80012b0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	691a      	ldr	r2, [r3, #16]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fea:	b2d2      	uxtb	r2, r2
 8000fec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001008:	b29b      	uxth	r3, r3
 800100a:	3b01      	subs	r3, #1
 800100c:	b29a      	uxth	r2, r3
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001012:	e139      	b.n	8001288 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001018:	2b02      	cmp	r3, #2
 800101a:	d152      	bne.n	80010c2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001022:	2200      	movs	r2, #0
 8001024:	4906      	ldr	r1, [pc, #24]	; (8001040 <HAL_I2C_Mem_Read+0x24c>)
 8001026:	68f8      	ldr	r0, [r7, #12]
 8001028:	f000 fb62 	bl	80016f0 <I2C_WaitOnFlagUntilTimeout>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d008      	beq.n	8001044 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e13c      	b.n	80012b0 <HAL_I2C_Mem_Read+0x4bc>
 8001036:	bf00      	nop
 8001038:	00100002 	.word	0x00100002
 800103c:	ffff0000 	.word	0xffff0000
 8001040:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001044:	b672      	cpsid	i
}
 8001046:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001056:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	691a      	ldr	r2, [r3, #16]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106a:	1c5a      	adds	r2, r3, #1
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001074:	3b01      	subs	r3, #1
 8001076:	b29a      	uxth	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001080:	b29b      	uxth	r3, r3
 8001082:	3b01      	subs	r3, #1
 8001084:	b29a      	uxth	r2, r3
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800108a:	b662      	cpsie	i
}
 800108c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	691a      	ldr	r2, [r3, #16]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a0:	1c5a      	adds	r2, r3, #1
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010aa:	3b01      	subs	r3, #1
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	3b01      	subs	r3, #1
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80010c0:	e0e2      	b.n	8001288 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80010c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010c8:	2200      	movs	r2, #0
 80010ca:	497b      	ldr	r1, [pc, #492]	; (80012b8 <HAL_I2C_Mem_Read+0x4c4>)
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f000 fb0f 	bl	80016f0 <I2C_WaitOnFlagUntilTimeout>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e0e9      	b.n	80012b0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80010ec:	b672      	cpsid	i
}
 80010ee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	691a      	ldr	r2, [r3, #16]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800110c:	3b01      	subs	r3, #1
 800110e:	b29a      	uxth	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001118:	b29b      	uxth	r3, r3
 800111a:	3b01      	subs	r3, #1
 800111c:	b29a      	uxth	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001122:	4b66      	ldr	r3, [pc, #408]	; (80012bc <HAL_I2C_Mem_Read+0x4c8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	08db      	lsrs	r3, r3, #3
 8001128:	4a65      	ldr	r2, [pc, #404]	; (80012c0 <HAL_I2C_Mem_Read+0x4cc>)
 800112a:	fba2 2303 	umull	r2, r3, r2, r3
 800112e:	0a1a      	lsrs	r2, r3, #8
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	00da      	lsls	r2, r3, #3
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800113c:	6a3b      	ldr	r3, [r7, #32]
 800113e:	3b01      	subs	r3, #1
 8001140:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001142:	6a3b      	ldr	r3, [r7, #32]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d118      	bne.n	800117a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2200      	movs	r2, #0
 800114c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	2220      	movs	r2, #32
 8001152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	2200      	movs	r2, #0
 800115a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f043 0220 	orr.w	r2, r3, #32
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800116a:	b662      	cpsie	i
}
 800116c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2200      	movs	r2, #0
 8001172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e09a      	b.n	80012b0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	695b      	ldr	r3, [r3, #20]
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	2b04      	cmp	r3, #4
 8001186:	d1d9      	bne.n	800113c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001196:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	691a      	ldr	r2, [r3, #16]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011aa:	1c5a      	adds	r2, r3, #1
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011b4:	3b01      	subs	r3, #1
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	3b01      	subs	r3, #1
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80011ca:	b662      	cpsie	i
}
 80011cc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	691a      	ldr	r2, [r3, #16]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e0:	1c5a      	adds	r2, r3, #1
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011ea:	3b01      	subs	r3, #1
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	3b01      	subs	r3, #1
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001200:	e042      	b.n	8001288 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001204:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f000 fbd4 	bl	80019b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e04c      	b.n	80012b0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001228:	1c5a      	adds	r2, r3, #1
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001232:	3b01      	subs	r3, #1
 8001234:	b29a      	uxth	r2, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800123e:	b29b      	uxth	r3, r3
 8001240:	3b01      	subs	r3, #1
 8001242:	b29a      	uxth	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	2b04      	cmp	r3, #4
 8001254:	d118      	bne.n	8001288 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	691a      	ldr	r2, [r3, #16]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001268:	1c5a      	adds	r2, r3, #1
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001272:	3b01      	subs	r3, #1
 8001274:	b29a      	uxth	r2, r3
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800127e:	b29b      	uxth	r3, r3
 8001280:	3b01      	subs	r3, #1
 8001282:	b29a      	uxth	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800128c:	2b00      	cmp	r3, #0
 800128e:	f47f ae94 	bne.w	8000fba <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2220      	movs	r2, #32
 8001296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	e000      	b.n	80012b0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80012ae:	2302      	movs	r3, #2
  }
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3728      	adds	r7, #40	; 0x28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	00010004 	.word	0x00010004
 80012bc:	20000000 	.word	0x20000000
 80012c0:	14f8b589 	.word	0x14f8b589

080012c4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08a      	sub	sp, #40	; 0x28
 80012c8:	af02      	add	r7, sp, #8
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	460b      	mov	r3, r1
 80012d2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80012d4:	f7ff f9ae 	bl	8000634 <HAL_GetTick>
 80012d8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b20      	cmp	r3, #32
 80012e8:	f040 8111 	bne.w	800150e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2319      	movs	r3, #25
 80012f2:	2201      	movs	r2, #1
 80012f4:	4988      	ldr	r1, [pc, #544]	; (8001518 <HAL_I2C_IsDeviceReady+0x254>)
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f000 f9fa 	bl	80016f0 <I2C_WaitOnFlagUntilTimeout>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001302:	2302      	movs	r3, #2
 8001304:	e104      	b.n	8001510 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800130c:	2b01      	cmp	r3, #1
 800130e:	d101      	bne.n	8001314 <HAL_I2C_IsDeviceReady+0x50>
 8001310:	2302      	movs	r3, #2
 8001312:	e0fd      	b.n	8001510 <HAL_I2C_IsDeviceReady+0x24c>
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	2b01      	cmp	r3, #1
 8001328:	d007      	beq.n	800133a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f042 0201 	orr.w	r2, r2, #1
 8001338:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001348:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2224      	movs	r2, #36	; 0x24
 800134e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2200      	movs	r2, #0
 8001356:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4a70      	ldr	r2, [pc, #448]	; (800151c <HAL_I2C_IsDeviceReady+0x258>)
 800135c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800136c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	2200      	movs	r2, #0
 8001376:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f000 f9b8 	bl	80016f0 <I2C_WaitOnFlagUntilTimeout>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d00d      	beq.n	80013a2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001394:	d103      	bne.n	800139e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f44f 7200 	mov.w	r2, #512	; 0x200
 800139c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e0b6      	b.n	8001510 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80013a2:	897b      	ldrh	r3, [r7, #10]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	461a      	mov	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80013b0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80013b2:	f7ff f93f 	bl	8000634 <HAL_GetTick>
 80013b6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	bf0c      	ite	eq
 80013c6:	2301      	moveq	r3, #1
 80013c8:	2300      	movne	r3, #0
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013dc:	bf0c      	ite	eq
 80013de:	2301      	moveq	r3, #1
 80013e0:	2300      	movne	r3, #0
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80013e6:	e025      	b.n	8001434 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80013e8:	f7ff f924 	bl	8000634 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d302      	bcc.n	80013fe <HAL_I2C_IsDeviceReady+0x13a>
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d103      	bne.n	8001406 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	22a0      	movs	r2, #160	; 0xa0
 8001402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	2b02      	cmp	r3, #2
 8001412:	bf0c      	ite	eq
 8001414:	2301      	moveq	r3, #1
 8001416:	2300      	movne	r3, #0
 8001418:	b2db      	uxtb	r3, r3
 800141a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800142a:	bf0c      	ite	eq
 800142c:	2301      	moveq	r3, #1
 800142e:	2300      	movne	r3, #0
 8001430:	b2db      	uxtb	r3, r3
 8001432:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2ba0      	cmp	r3, #160	; 0xa0
 800143e:	d005      	beq.n	800144c <HAL_I2C_IsDeviceReady+0x188>
 8001440:	7dfb      	ldrb	r3, [r7, #23]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d102      	bne.n	800144c <HAL_I2C_IsDeviceReady+0x188>
 8001446:	7dbb      	ldrb	r3, [r7, #22]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0cd      	beq.n	80013e8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2220      	movs	r2, #32
 8001450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b02      	cmp	r3, #2
 8001460:	d129      	bne.n	80014b6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001470:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2319      	movs	r3, #25
 800148e:	2201      	movs	r2, #1
 8001490:	4921      	ldr	r1, [pc, #132]	; (8001518 <HAL_I2C_IsDeviceReady+0x254>)
 8001492:	68f8      	ldr	r0, [r7, #12]
 8001494:	f000 f92c 	bl	80016f0 <I2C_WaitOnFlagUntilTimeout>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e036      	b.n	8001510 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2220      	movs	r2, #32
 80014a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	e02c      	b.n	8001510 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014c4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80014ce:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	2319      	movs	r3, #25
 80014d6:	2201      	movs	r2, #1
 80014d8:	490f      	ldr	r1, [pc, #60]	; (8001518 <HAL_I2C_IsDeviceReady+0x254>)
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f000 f908 	bl	80016f0 <I2C_WaitOnFlagUntilTimeout>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e012      	b.n	8001510 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	3301      	adds	r3, #1
 80014ee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	f4ff af32 	bcc.w	800135e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2220      	movs	r2, #32
 80014fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800150e:	2302      	movs	r3, #2
  }
}
 8001510:	4618      	mov	r0, r3
 8001512:	3720      	adds	r7, #32
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	00100002 	.word	0x00100002
 800151c:	ffff0000 	.word	0xffff0000

08001520 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af02      	add	r7, sp, #8
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	4608      	mov	r0, r1
 800152a:	4611      	mov	r1, r2
 800152c:	461a      	mov	r2, r3
 800152e:	4603      	mov	r3, r0
 8001530:	817b      	strh	r3, [r7, #10]
 8001532:	460b      	mov	r3, r1
 8001534:	813b      	strh	r3, [r7, #8]
 8001536:	4613      	mov	r3, r2
 8001538:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001548:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001558:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	6a3b      	ldr	r3, [r7, #32]
 8001560:	2200      	movs	r2, #0
 8001562:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f000 f8c2 	bl	80016f0 <I2C_WaitOnFlagUntilTimeout>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00d      	beq.n	800158e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001580:	d103      	bne.n	800158a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001588:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e0aa      	b.n	80016e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800158e:	897b      	ldrh	r3, [r7, #10]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	461a      	mov	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800159c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	6a3a      	ldr	r2, [r7, #32]
 80015a2:	4952      	ldr	r1, [pc, #328]	; (80016ec <I2C_RequestMemoryRead+0x1cc>)
 80015a4:	68f8      	ldr	r0, [r7, #12]
 80015a6:	f000 f91d 	bl	80017e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e097      	b.n	80016e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015cc:	6a39      	ldr	r1, [r7, #32]
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f000 f9a8 	bl	8001924 <I2C_WaitOnTXEFlagUntilTimeout>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d00d      	beq.n	80015f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	2b04      	cmp	r3, #4
 80015e0:	d107      	bne.n	80015f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e076      	b.n	80016e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80015f6:	88fb      	ldrh	r3, [r7, #6]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d105      	bne.n	8001608 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80015fc:	893b      	ldrh	r3, [r7, #8]
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	611a      	str	r2, [r3, #16]
 8001606:	e021      	b.n	800164c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001608:	893b      	ldrh	r3, [r7, #8]
 800160a:	0a1b      	lsrs	r3, r3, #8
 800160c:	b29b      	uxth	r3, r3
 800160e:	b2da      	uxtb	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001618:	6a39      	ldr	r1, [r7, #32]
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 f982 	bl	8001924 <I2C_WaitOnTXEFlagUntilTimeout>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00d      	beq.n	8001642 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	2b04      	cmp	r3, #4
 800162c:	d107      	bne.n	800163e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800163c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e050      	b.n	80016e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001642:	893b      	ldrh	r3, [r7, #8]
 8001644:	b2da      	uxtb	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800164c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800164e:	6a39      	ldr	r1, [r7, #32]
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f000 f967 	bl	8001924 <I2C_WaitOnTXEFlagUntilTimeout>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00d      	beq.n	8001678 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	2b04      	cmp	r3, #4
 8001662:	d107      	bne.n	8001674 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001672:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e035      	b.n	80016e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001686:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	6a3b      	ldr	r3, [r7, #32]
 800168e:	2200      	movs	r2, #0
 8001690:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	f000 f82b 	bl	80016f0 <I2C_WaitOnFlagUntilTimeout>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00d      	beq.n	80016bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ae:	d103      	bne.n	80016b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e013      	b.n	80016e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80016bc:	897b      	ldrh	r3, [r7, #10]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	6a3a      	ldr	r2, [r7, #32]
 80016d0:	4906      	ldr	r1, [pc, #24]	; (80016ec <I2C_RequestMemoryRead+0x1cc>)
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f000 f886 	bl	80017e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	00010002 	.word	0x00010002

080016f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	603b      	str	r3, [r7, #0]
 80016fc:	4613      	mov	r3, r2
 80016fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001700:	e048      	b.n	8001794 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001708:	d044      	beq.n	8001794 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800170a:	f7fe ff93 	bl	8000634 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d302      	bcc.n	8001720 <I2C_WaitOnFlagUntilTimeout+0x30>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d139      	bne.n	8001794 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	0c1b      	lsrs	r3, r3, #16
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b01      	cmp	r3, #1
 8001728:	d10d      	bne.n	8001746 <I2C_WaitOnFlagUntilTimeout+0x56>
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	43da      	mvns	r2, r3
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	4013      	ands	r3, r2
 8001736:	b29b      	uxth	r3, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	bf0c      	ite	eq
 800173c:	2301      	moveq	r3, #1
 800173e:	2300      	movne	r3, #0
 8001740:	b2db      	uxtb	r3, r3
 8001742:	461a      	mov	r2, r3
 8001744:	e00c      	b.n	8001760 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	43da      	mvns	r2, r3
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	4013      	ands	r3, r2
 8001752:	b29b      	uxth	r3, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	bf0c      	ite	eq
 8001758:	2301      	moveq	r3, #1
 800175a:	2300      	movne	r3, #0
 800175c:	b2db      	uxtb	r3, r3
 800175e:	461a      	mov	r2, r3
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	429a      	cmp	r2, r3
 8001764:	d116      	bne.n	8001794 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2200      	movs	r2, #0
 800176a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2220      	movs	r2, #32
 8001770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	f043 0220 	orr.w	r2, r3, #32
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e023      	b.n	80017dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	0c1b      	lsrs	r3, r3, #16
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b01      	cmp	r3, #1
 800179c:	d10d      	bne.n	80017ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	43da      	mvns	r2, r3
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	4013      	ands	r3, r2
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	bf0c      	ite	eq
 80017b0:	2301      	moveq	r3, #1
 80017b2:	2300      	movne	r3, #0
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	461a      	mov	r2, r3
 80017b8:	e00c      	b.n	80017d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	43da      	mvns	r2, r3
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	4013      	ands	r3, r2
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	bf0c      	ite	eq
 80017cc:	2301      	moveq	r3, #1
 80017ce:	2300      	movne	r3, #0
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	461a      	mov	r2, r3
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d093      	beq.n	8001702 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
 80017f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017f2:	e071      	b.n	80018d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001802:	d123      	bne.n	800184c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001812:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800181c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2200      	movs	r2, #0
 8001822:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2220      	movs	r2, #32
 8001828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	f043 0204 	orr.w	r2, r3, #4
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e067      	b.n	800191c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001852:	d041      	beq.n	80018d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001854:	f7fe feee 	bl	8000634 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	d302      	bcc.n	800186a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d136      	bne.n	80018d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	0c1b      	lsrs	r3, r3, #16
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b01      	cmp	r3, #1
 8001872:	d10c      	bne.n	800188e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	43da      	mvns	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	4013      	ands	r3, r2
 8001880:	b29b      	uxth	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	bf14      	ite	ne
 8001886:	2301      	movne	r3, #1
 8001888:	2300      	moveq	r3, #0
 800188a:	b2db      	uxtb	r3, r3
 800188c:	e00b      	b.n	80018a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	43da      	mvns	r2, r3
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	4013      	ands	r3, r2
 800189a:	b29b      	uxth	r3, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	bf14      	ite	ne
 80018a0:	2301      	movne	r3, #1
 80018a2:	2300      	moveq	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d016      	beq.n	80018d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2200      	movs	r2, #0
 80018ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2220      	movs	r2, #32
 80018b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	f043 0220 	orr.w	r2, r3, #32
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e021      	b.n	800191c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	0c1b      	lsrs	r3, r3, #16
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d10c      	bne.n	80018fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	43da      	mvns	r2, r3
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	4013      	ands	r3, r2
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	bf14      	ite	ne
 80018f4:	2301      	movne	r3, #1
 80018f6:	2300      	moveq	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	e00b      	b.n	8001914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	43da      	mvns	r2, r3
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	4013      	ands	r3, r2
 8001908:	b29b      	uxth	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	bf14      	ite	ne
 800190e:	2301      	movne	r3, #1
 8001910:	2300      	moveq	r3, #0
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b00      	cmp	r3, #0
 8001916:	f47f af6d 	bne.w	80017f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001930:	e034      	b.n	800199c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f000 f89b 	bl	8001a6e <I2C_IsAcknowledgeFailed>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e034      	b.n	80019ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001948:	d028      	beq.n	800199c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800194a:	f7fe fe73 	bl	8000634 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	429a      	cmp	r2, r3
 8001958:	d302      	bcc.n	8001960 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d11d      	bne.n	800199c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800196a:	2b80      	cmp	r3, #128	; 0x80
 800196c:	d016      	beq.n	800199c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2220      	movs	r2, #32
 8001978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	f043 0220 	orr.w	r2, r3, #32
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e007      	b.n	80019ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a6:	2b80      	cmp	r3, #128	; 0x80
 80019a8:	d1c3      	bne.n	8001932 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80019c0:	e049      	b.n	8001a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	f003 0310 	and.w	r3, r3, #16
 80019cc:	2b10      	cmp	r3, #16
 80019ce:	d119      	bne.n	8001a04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f06f 0210 	mvn.w	r2, #16
 80019d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2200      	movs	r2, #0
 80019de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2220      	movs	r2, #32
 80019e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e030      	b.n	8001a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a04:	f7fe fe16 	bl	8000634 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d302      	bcc.n	8001a1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d11d      	bne.n	8001a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a24:	2b40      	cmp	r3, #64	; 0x40
 8001a26:	d016      	beq.n	8001a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2220      	movs	r2, #32
 8001a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f043 0220 	orr.w	r2, r3, #32
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e007      	b.n	8001a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a60:	2b40      	cmp	r3, #64	; 0x40
 8001a62:	d1ae      	bne.n	80019c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a84:	d11b      	bne.n	8001abe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a8e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2220      	movs	r2, #32
 8001a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f043 0204 	orr.w	r2, r3, #4
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr

08001aca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001aca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001acc:	b08b      	sub	sp, #44	; 0x2c
 8001ace:	af06      	add	r7, sp, #24
 8001ad0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0f1      	b.n	8001cc0 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d106      	bne.n	8001af6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f006 fb09 	bl	8008108 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2203      	movs	r2, #3
 8001afa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f002 fa28 	bl	8003f58 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	603b      	str	r3, [r7, #0]
 8001b0e:	687e      	ldr	r6, [r7, #4]
 8001b10:	466d      	mov	r5, sp
 8001b12:	f106 0410 	add.w	r4, r6, #16
 8001b16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b1a:	6823      	ldr	r3, [r4, #0]
 8001b1c:	602b      	str	r3, [r5, #0]
 8001b1e:	1d33      	adds	r3, r6, #4
 8001b20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b22:	6838      	ldr	r0, [r7, #0]
 8001b24:	f002 f9f2 	bl	8003f0c <USB_CoreInit>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d005      	beq.n	8001b3a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2202      	movs	r2, #2
 8001b32:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e0c2      	b.n	8001cc0 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f002 fa23 	bl	8003f8c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b46:	2300      	movs	r3, #0
 8001b48:	73fb      	strb	r3, [r7, #15]
 8001b4a:	e040      	b.n	8001bce <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	440b      	add	r3, r1
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	2201      	movs	r2, #1
 8001b60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	440b      	add	r3, r1
 8001b72:	7bfa      	ldrb	r2, [r7, #15]
 8001b74:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	440b      	add	r3, r1
 8001b86:	3303      	adds	r3, #3
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b8c:	7bfa      	ldrb	r2, [r7, #15]
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	440b      	add	r3, r1
 8001b9a:	3338      	adds	r3, #56	; 0x38
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ba0:	7bfa      	ldrb	r2, [r7, #15]
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	440b      	add	r3, r1
 8001bae:	333c      	adds	r3, #60	; 0x3c
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bb4:	7bfa      	ldrb	r2, [r7, #15]
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	440b      	add	r3, r1
 8001bc2:	3340      	adds	r3, #64	; 0x40
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	73fb      	strb	r3, [r7, #15]
 8001bce:	7bfa      	ldrb	r2, [r7, #15]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d3b9      	bcc.n	8001b4c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bd8:	2300      	movs	r3, #0
 8001bda:	73fb      	strb	r3, [r7, #15]
 8001bdc:	e044      	b.n	8001c68 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bde:	7bfa      	ldrb	r2, [r7, #15]
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	440b      	add	r3, r1
 8001bec:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001bf4:	7bfa      	ldrb	r2, [r7, #15]
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	440b      	add	r3, r1
 8001c02:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c06:	7bfa      	ldrb	r2, [r7, #15]
 8001c08:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c0a:	7bfa      	ldrb	r2, [r7, #15]
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	440b      	add	r3, r1
 8001c18:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c20:	7bfa      	ldrb	r2, [r7, #15]
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	4613      	mov	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	440b      	add	r3, r1
 8001c2e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c36:	7bfa      	ldrb	r2, [r7, #15]
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	440b      	add	r3, r1
 8001c44:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c4c:	7bfa      	ldrb	r2, [r7, #15]
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	440b      	add	r3, r1
 8001c5a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
 8001c64:	3301      	adds	r3, #1
 8001c66:	73fb      	strb	r3, [r7, #15]
 8001c68:	7bfa      	ldrb	r2, [r7, #15]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d3b5      	bcc.n	8001bde <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	687e      	ldr	r6, [r7, #4]
 8001c7a:	466d      	mov	r5, sp
 8001c7c:	f106 0410 	add.w	r4, r6, #16
 8001c80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c84:	6823      	ldr	r3, [r4, #0]
 8001c86:	602b      	str	r3, [r5, #0]
 8001c88:	1d33      	adds	r3, r6, #4
 8001c8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c8c:	6838      	ldr	r0, [r7, #0]
 8001c8e:	f002 f989 	bl	8003fa4 <USB_DevInit>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e00d      	b.n	8001cc0 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f004 fc0a 	bl	80064d2 <USB_DevDisconnect>

  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cc8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_PCD_Start+0x16>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e016      	b.n	8001d0c <HAL_PCD_Start+0x44>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f002 f91e 	bl	8003f2c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f006 fc7b 	bl	80085ee <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f004 fbde 	bl	80064be <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f004 fbe0 	bl	80064e6 <USB_ReadInterrupts>
 8001d26:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 fb1b 	bl	800236e <PCD_EP_ISR_Handler>

    return;
 8001d38:	e119      	b.n	8001f6e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d013      	beq.n	8001d6c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d56:	b292      	uxth	r2, r2
 8001d58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f006 fa4e 	bl	80081fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001d62:	2100      	movs	r1, #0
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f905 	bl	8001f74 <HAL_PCD_SetAddress>

    return;
 8001d6a:	e100      	b.n	8001f6e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00c      	beq.n	8001d90 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d88:	b292      	uxth	r2, r2
 8001d8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001d8e:	e0ee      	b.n	8001f6e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00c      	beq.n	8001db4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dac:	b292      	uxth	r2, r2
 8001dae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001db2:	e0dc      	b.n	8001f6e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d027      	beq.n	8001e0e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0204 	bic.w	r2, r2, #4
 8001dd0:	b292      	uxth	r2, r2
 8001dd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0208 	bic.w	r2, r2, #8
 8001de8:	b292      	uxth	r2, r2
 8001dea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f006 fa3e 	bl	8008270 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e06:	b292      	uxth	r2, r2
 8001e08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e0c:	e0af      	b.n	8001f6e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 8083 	beq.w	8001f20 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	77fb      	strb	r3, [r7, #31]
 8001e1e:	e010      	b.n	8001e42 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	7ffb      	ldrb	r3, [r7, #31]
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	441a      	add	r2, r3
 8001e2c:	7ffb      	ldrb	r3, [r7, #31]
 8001e2e:	8812      	ldrh	r2, [r2, #0]
 8001e30:	b292      	uxth	r2, r2
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	3320      	adds	r3, #32
 8001e36:	443b      	add	r3, r7
 8001e38:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001e3c:	7ffb      	ldrb	r3, [r7, #31]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	77fb      	strb	r3, [r7, #31]
 8001e42:	7ffb      	ldrb	r3, [r7, #31]
 8001e44:	2b07      	cmp	r3, #7
 8001e46:	d9eb      	bls.n	8001e20 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0201 	orr.w	r2, r2, #1
 8001e5a:	b292      	uxth	r2, r2
 8001e5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0201 	bic.w	r2, r2, #1
 8001e72:	b292      	uxth	r2, r2
 8001e74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001e78:	bf00      	nop
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0f6      	beq.n	8001e7a <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e9e:	b292      	uxth	r2, r2
 8001ea0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	77fb      	strb	r3, [r7, #31]
 8001ea8:	e00f      	b.n	8001eca <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001eaa:	7ffb      	ldrb	r3, [r7, #31]
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	4611      	mov	r1, r2
 8001eb2:	7ffa      	ldrb	r2, [r7, #31]
 8001eb4:	0092      	lsls	r2, r2, #2
 8001eb6:	440a      	add	r2, r1
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	3320      	adds	r3, #32
 8001ebc:	443b      	add	r3, r7
 8001ebe:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001ec2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001ec4:	7ffb      	ldrb	r3, [r7, #31]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	77fb      	strb	r3, [r7, #31]
 8001eca:	7ffb      	ldrb	r3, [r7, #31]
 8001ecc:	2b07      	cmp	r3, #7
 8001ece:	d9ec      	bls.n	8001eaa <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0208 	orr.w	r2, r2, #8
 8001ee2:	b292      	uxth	r2, r2
 8001ee4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001efa:	b292      	uxth	r2, r2
 8001efc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0204 	orr.w	r2, r2, #4
 8001f12:	b292      	uxth	r2, r2
 8001f14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f006 f98f 	bl	800823c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001f1e:	e026      	b.n	8001f6e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00f      	beq.n	8001f4a <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f3c:	b292      	uxth	r2, r2
 8001f3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f006 f94d 	bl	80081e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001f48:	e011      	b.n	8001f6e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00c      	beq.n	8001f6e <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f66:	b292      	uxth	r2, r2
 8001f68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001f6c:	bf00      	nop
  }
}
 8001f6e:	3720      	adds	r7, #32
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_PCD_SetAddress+0x1a>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e013      	b.n	8001fb6 <HAL_PCD_SetAddress+0x42>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	78fa      	ldrb	r2, [r7, #3]
 8001f9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	78fa      	ldrb	r2, [r7, #3]
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f004 fa76 	bl	8006498 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b084      	sub	sp, #16
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	4608      	mov	r0, r1
 8001fc8:	4611      	mov	r1, r2
 8001fca:	461a      	mov	r2, r3
 8001fcc:	4603      	mov	r3, r0
 8001fce:	70fb      	strb	r3, [r7, #3]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	803b      	strh	r3, [r7, #0]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	da0e      	bge.n	8002002 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	705a      	strb	r2, [r3, #1]
 8002000:	e00e      	b.n	8002020 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	f003 0207 	and.w	r2, r3, #7
 8002008:	4613      	mov	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	4413      	add	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002020:	78fb      	ldrb	r3, [r7, #3]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	b2da      	uxtb	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800202c:	883a      	ldrh	r2, [r7, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	78ba      	ldrb	r2, [r7, #2]
 8002036:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002038:	78bb      	ldrb	r3, [r7, #2]
 800203a:	2b02      	cmp	r3, #2
 800203c:	d102      	bne.n	8002044 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <HAL_PCD_EP_Open+0x94>
 800204e:	2302      	movs	r3, #2
 8002050:	e00e      	b.n	8002070 <HAL_PCD_EP_Open+0xb2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68f9      	ldr	r1, [r7, #12]
 8002060:	4618      	mov	r0, r3
 8002062:	f001 ffbf 	bl	8003fe4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800206e:	7afb      	ldrb	r3, [r7, #11]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002088:	2b00      	cmp	r3, #0
 800208a:	da0e      	bge.n	80020aa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	4413      	add	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2201      	movs	r2, #1
 80020a6:	705a      	strb	r2, [r3, #1]
 80020a8:	e00e      	b.n	80020c8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020aa:	78fb      	ldrb	r3, [r7, #3]
 80020ac:	f003 0207 	and.w	r2, r3, #7
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	4413      	add	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80020c8:	78fb      	ldrb	r3, [r7, #3]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <HAL_PCD_EP_Close+0x6a>
 80020de:	2302      	movs	r3, #2
 80020e0:	e00e      	b.n	8002100 <HAL_PCD_EP_Close+0x88>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68f9      	ldr	r1, [r7, #12]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f002 fb37 	bl	8004764 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	607a      	str	r2, [r7, #4]
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	460b      	mov	r3, r1
 8002116:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002118:	7afb      	ldrb	r3, [r7, #11]
 800211a:	f003 0207 	and.w	r2, r3, #7
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	4413      	add	r3, r2
 800212e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	2200      	movs	r2, #0
 8002140:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2200      	movs	r2, #0
 8002146:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002148:	7afb      	ldrb	r3, [r7, #11]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	b2da      	uxtb	r2, r3
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6979      	ldr	r1, [r7, #20]
 800215a:	4618      	mov	r0, r3
 800215c:	f002 fcee 	bl	8004b3c <USB_EPStartXfer>

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	460b      	mov	r3, r1
 8002174:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	f003 0207 	and.w	r2, r3, #7
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	440b      	add	r3, r1
 8002188:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800218c:	681b      	ldr	r3, [r3, #0]
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	607a      	str	r2, [r7, #4]
 80021a2:	603b      	str	r3, [r7, #0]
 80021a4:	460b      	mov	r3, r1
 80021a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021a8:	7afb      	ldrb	r3, [r7, #11]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	4413      	add	r3, r2
 80021bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	2200      	movs	r2, #0
 80021dc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2201      	movs	r2, #1
 80021e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021e4:	7afb      	ldrb	r3, [r7, #11]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6979      	ldr	r1, [r7, #20]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f002 fca0 	bl	8004b3c <USB_EPStartXfer>

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	460b      	mov	r3, r1
 8002210:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002212:	78fb      	ldrb	r3, [r7, #3]
 8002214:	f003 0207 	and.w	r2, r3, #7
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	429a      	cmp	r2, r3
 800221e:	d901      	bls.n	8002224 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e04c      	b.n	80022be <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002224:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002228:	2b00      	cmp	r3, #0
 800222a:	da0e      	bge.n	800224a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800222c:	78fb      	ldrb	r3, [r7, #3]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	4413      	add	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2201      	movs	r2, #1
 8002246:	705a      	strb	r2, [r3, #1]
 8002248:	e00c      	b.n	8002264 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800224a:	78fa      	ldrb	r2, [r7, #3]
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	4413      	add	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2201      	movs	r2, #1
 8002268:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800226a:	78fb      	ldrb	r3, [r7, #3]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	b2da      	uxtb	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800227c:	2b01      	cmp	r3, #1
 800227e:	d101      	bne.n	8002284 <HAL_PCD_EP_SetStall+0x7e>
 8002280:	2302      	movs	r3, #2
 8002282:	e01c      	b.n	80022be <HAL_PCD_EP_SetStall+0xb8>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68f9      	ldr	r1, [r7, #12]
 8002292:	4618      	mov	r0, r3
 8002294:	f004 f803 	bl	800629e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d108      	bne.n	80022b4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80022ac:	4619      	mov	r1, r3
 80022ae:	4610      	mov	r0, r2
 80022b0:	f004 f928 	bl	8006504 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b084      	sub	sp, #16
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	460b      	mov	r3, r1
 80022d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	f003 020f 	and.w	r2, r3, #15
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d901      	bls.n	80022e4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e040      	b.n	8002366 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	da0e      	bge.n	800230a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	4613      	mov	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	4413      	add	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2201      	movs	r2, #1
 8002306:	705a      	strb	r2, [r3, #1]
 8002308:	e00e      	b.n	8002328 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800230a:	78fb      	ldrb	r3, [r7, #3]
 800230c:	f003 0207 	and.w	r2, r3, #7
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	4413      	add	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800232e:	78fb      	ldrb	r3, [r7, #3]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	b2da      	uxtb	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002340:	2b01      	cmp	r3, #1
 8002342:	d101      	bne.n	8002348 <HAL_PCD_EP_ClrStall+0x82>
 8002344:	2302      	movs	r3, #2
 8002346:	e00e      	b.n	8002366 <HAL_PCD_EP_ClrStall+0xa0>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68f9      	ldr	r1, [r7, #12]
 8002356:	4618      	mov	r0, r3
 8002358:	f003 fff1 	bl	800633e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b096      	sub	sp, #88	; 0x58
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002376:	e3bf      	b.n	8002af8 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002380:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002384:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002388:	b2db      	uxtb	r3, r3
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8002392:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002396:	2b00      	cmp	r3, #0
 8002398:	f040 8179 	bne.w	800268e <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800239c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023a0:	f003 0310 	and.w	r3, r3, #16
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d152      	bne.n	800244e <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80023b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023b8:	81fb      	strh	r3, [r7, #14]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	89fb      	ldrh	r3, [r7, #14]
 80023c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3328      	adds	r3, #40	; 0x28
 80023d0:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023da:	b29b      	uxth	r3, r3
 80023dc:	461a      	mov	r2, r3
 80023de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	4413      	add	r3, r2
 80023e6:	3302      	adds	r3, #2
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6812      	ldr	r2, [r2, #0]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023fc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80023fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002400:	695a      	ldr	r2, [r3, #20]
 8002402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	441a      	add	r2, r3
 8002408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800240a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800240c:	2100      	movs	r1, #0
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f005 fecd 	bl	80081ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 836b 	beq.w	8002af8 <PCD_EP_ISR_Handler+0x78a>
 8002422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	2b00      	cmp	r3, #0
 8002428:	f040 8366 	bne.w	8002af8 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002432:	b2db      	uxtb	r3, r3
 8002434:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002438:	b2da      	uxtb	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	b292      	uxth	r2, r2
 8002440:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800244c:	e354      	b.n	8002af8 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002454:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002460:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002468:	2b00      	cmp	r3, #0
 800246a:	d034      	beq.n	80024d6 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002474:	b29b      	uxth	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	4413      	add	r3, r2
 8002480:	3306      	adds	r3, #6
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	4413      	add	r3, r2
 800248a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002496:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6818      	ldr	r0, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80024a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024a4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80024a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024a8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	f004 f87a 	bl	80065a4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024bc:	4013      	ands	r3, r2
 80024be:	823b      	strh	r3, [r7, #16]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	8a3a      	ldrh	r2, [r7, #16]
 80024c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024ca:	b292      	uxth	r2, r2
 80024cc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f005 fe40 	bl	8008154 <HAL_PCD_SetupStageCallback>
 80024d4:	e310      	b.n	8002af8 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80024d6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f280 830c 	bge.w	8002af8 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024ec:	4013      	ands	r3, r2
 80024ee:	83fb      	strh	r3, [r7, #30]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	8bfa      	ldrh	r2, [r7, #30]
 80024f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024fa:	b292      	uxth	r2, r2
 80024fc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002506:	b29b      	uxth	r3, r3
 8002508:	461a      	mov	r2, r3
 800250a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4413      	add	r3, r2
 8002512:	3306      	adds	r3, #6
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	4413      	add	r3, r2
 800251c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002528:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800252a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d019      	beq.n	8002566 <PCD_EP_ISR_Handler+0x1f8>
 8002532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d015      	beq.n	8002566 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002540:	6959      	ldr	r1, [r3, #20]
 8002542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002544:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002548:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800254a:	b29b      	uxth	r3, r3
 800254c:	f004 f82a 	bl	80065a4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002552:	695a      	ldr	r2, [r3, #20]
 8002554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	441a      	add	r2, r3
 800255a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800255c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800255e:	2100      	movs	r1, #0
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f005 fe09 	bl	8008178 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002570:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002578:	2b00      	cmp	r3, #0
 800257a:	f040 82bd 	bne.w	8002af8 <PCD_EP_ISR_Handler+0x78a>
 800257e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002582:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002586:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800258a:	f000 82b5 	beq.w	8002af8 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	61bb      	str	r3, [r7, #24]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800259c:	b29b      	uxth	r3, r3
 800259e:	461a      	mov	r2, r3
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	4413      	add	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	801a      	strh	r2, [r3, #0]
 80025be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	2b3e      	cmp	r3, #62	; 0x3e
 80025c4:	d91d      	bls.n	8002602 <PCD_EP_ISR_Handler+0x294>
 80025c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	095b      	lsrs	r3, r3, #5
 80025cc:	647b      	str	r3, [r7, #68]	; 0x44
 80025ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	f003 031f 	and.w	r3, r3, #31
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d102      	bne.n	80025e0 <PCD_EP_ISR_Handler+0x272>
 80025da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025dc:	3b01      	subs	r3, #1
 80025de:	647b      	str	r3, [r7, #68]	; 0x44
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	029b      	lsls	r3, r3, #10
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	4313      	orrs	r3, r2
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	801a      	strh	r2, [r3, #0]
 8002600:	e026      	b.n	8002650 <PCD_EP_ISR_Handler+0x2e2>
 8002602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10a      	bne.n	8002620 <PCD_EP_ISR_Handler+0x2b2>
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002618:	b29a      	uxth	r2, r3
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	801a      	strh	r2, [r3, #0]
 800261e:	e017      	b.n	8002650 <PCD_EP_ISR_Handler+0x2e2>
 8002620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	085b      	lsrs	r3, r3, #1
 8002626:	647b      	str	r3, [r7, #68]	; 0x44
 8002628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <PCD_EP_ISR_Handler+0x2cc>
 8002634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002636:	3301      	adds	r3, #1
 8002638:	647b      	str	r3, [r7, #68]	; 0x44
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	b29a      	uxth	r2, r3
 8002640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002642:	b29b      	uxth	r3, r3
 8002644:	029b      	lsls	r3, r3, #10
 8002646:	b29b      	uxth	r3, r3
 8002648:	4313      	orrs	r3, r2
 800264a:	b29a      	uxth	r2, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	b29b      	uxth	r3, r3
 8002658:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800265c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002660:	827b      	strh	r3, [r7, #18]
 8002662:	8a7b      	ldrh	r3, [r7, #18]
 8002664:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002668:	827b      	strh	r3, [r7, #18]
 800266a:	8a7b      	ldrh	r3, [r7, #18]
 800266c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002670:	827b      	strh	r3, [r7, #18]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	8a7b      	ldrh	r3, [r7, #18]
 8002678:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800267c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002680:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002688:	b29b      	uxth	r3, r3
 800268a:	8013      	strh	r3, [r2, #0]
 800268c:	e234      	b.n	8002af8 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	461a      	mov	r2, r3
 8002694:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026a2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f280 80fc 	bge.w	80028a4 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	461a      	mov	r2, r3
 80026b2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	b29a      	uxth	r2, r3
 80026be:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026c2:	4013      	ands	r3, r2
 80026c4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80026da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026de:	b292      	uxth	r2, r2
 80026e0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80026e2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80026e6:	4613      	mov	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	4413      	add	r3, r2
 80026f6:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80026f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026fa:	7b1b      	ldrb	r3, [r3, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d125      	bne.n	800274c <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002708:	b29b      	uxth	r3, r3
 800270a:	461a      	mov	r2, r3
 800270c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4413      	add	r3, r2
 8002714:	3306      	adds	r3, #6
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6812      	ldr	r2, [r2, #0]
 800271c:	4413      	add	r3, r2
 800271e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002728:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800272c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 8092 	beq.w	800285a <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6818      	ldr	r0, [r3, #0]
 800273a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800273c:	6959      	ldr	r1, [r3, #20]
 800273e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002740:	88da      	ldrh	r2, [r3, #6]
 8002742:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002746:	f003 ff2d 	bl	80065a4 <USB_ReadPMA>
 800274a:	e086      	b.n	800285a <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800274c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800274e:	78db      	ldrb	r3, [r3, #3]
 8002750:	2b02      	cmp	r3, #2
 8002752:	d10a      	bne.n	800276a <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002754:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002758:	461a      	mov	r2, r3
 800275a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 f9d9 	bl	8002b14 <HAL_PCD_EP_DB_Receive>
 8002762:	4603      	mov	r3, r0
 8002764:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002768:	e077      	b.n	800285a <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	b29b      	uxth	r3, r3
 800277c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002784:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	461a      	mov	r2, r3
 800278e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	441a      	add	r2, r3
 8002796:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800279a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800279e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d024      	beq.n	8002812 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	4413      	add	r3, r2
 80027dc:	3302      	adds	r3, #2
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027f0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80027f4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d02e      	beq.n	800285a <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002802:	6959      	ldr	r1, [r3, #20]
 8002804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002806:	891a      	ldrh	r2, [r3, #8]
 8002808:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800280c:	f003 feca 	bl	80065a4 <USB_ReadPMA>
 8002810:	e023      	b.n	800285a <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800281a:	b29b      	uxth	r3, r3
 800281c:	461a      	mov	r2, r3
 800281e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	4413      	add	r3, r2
 8002826:	3306      	adds	r3, #6
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6812      	ldr	r2, [r2, #0]
 800282e:	4413      	add	r3, r2
 8002830:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800283a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800283e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002842:	2b00      	cmp	r3, #0
 8002844:	d009      	beq.n	800285a <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6818      	ldr	r0, [r3, #0]
 800284a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800284c:	6959      	ldr	r1, [r3, #20]
 800284e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002850:	895a      	ldrh	r2, [r3, #10]
 8002852:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002856:	f003 fea5 	bl	80065a4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800285a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800285c:	69da      	ldr	r2, [r3, #28]
 800285e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002862:	441a      	add	r2, r3
 8002864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002866:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800286a:	695a      	ldr	r2, [r3, #20]
 800286c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002870:	441a      	add	r2, r3
 8002872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002874:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d005      	beq.n	800288a <PCD_EP_ISR_Handler+0x51c>
 800287e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	429a      	cmp	r2, r3
 8002888:	d206      	bcs.n	8002898 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800288a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	4619      	mov	r1, r3
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f005 fc71 	bl	8008178 <HAL_PCD_DataOutStageCallback>
 8002896:	e005      	b.n	80028a4 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800289e:	4618      	mov	r0, r3
 80028a0:	f002 f94c 	bl	8004b3c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80028a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80028a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 8123 	beq.w	8002af8 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 80028b2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	4413      	add	r3, r2
 80028c4:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80028dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	461a      	mov	r2, r3
 80028ea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	441a      	add	r2, r3
 80028f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80028f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028fe:	b29b      	uxth	r3, r3
 8002900:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002904:	78db      	ldrb	r3, [r3, #3]
 8002906:	2b01      	cmp	r3, #1
 8002908:	f040 80a2 	bne.w	8002a50 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 800290c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800290e:	2200      	movs	r2, #0
 8002910:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002914:	7b1b      	ldrb	r3, [r3, #12]
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 8093 	beq.w	8002a42 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800291c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002924:	2b00      	cmp	r3, #0
 8002926:	d046      	beq.n	80029b6 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800292a:	785b      	ldrb	r3, [r3, #1]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d126      	bne.n	800297e <PCD_EP_ISR_Handler+0x610>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	627b      	str	r3, [r7, #36]	; 0x24
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800293e:	b29b      	uxth	r3, r3
 8002940:	461a      	mov	r2, r3
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	4413      	add	r3, r2
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
 8002948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	011a      	lsls	r2, r3, #4
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	4413      	add	r3, r2
 8002952:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002956:	623b      	str	r3, [r7, #32]
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	881b      	ldrh	r3, [r3, #0]
 800295c:	b29b      	uxth	r3, r3
 800295e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002962:	b29a      	uxth	r2, r3
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	801a      	strh	r2, [r3, #0]
 8002968:	6a3b      	ldr	r3, [r7, #32]
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	b29b      	uxth	r3, r3
 800296e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002972:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002976:	b29a      	uxth	r2, r3
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	801a      	strh	r2, [r3, #0]
 800297c:	e061      	b.n	8002a42 <PCD_EP_ISR_Handler+0x6d4>
 800297e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002980:	785b      	ldrb	r3, [r3, #1]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d15d      	bne.n	8002a42 <PCD_EP_ISR_Handler+0x6d4>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002994:	b29b      	uxth	r3, r3
 8002996:	461a      	mov	r2, r3
 8002998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299a:	4413      	add	r3, r2
 800299c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800299e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	011a      	lsls	r2, r3, #4
 80029a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a6:	4413      	add	r3, r2
 80029a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b0:	2200      	movs	r2, #0
 80029b2:	801a      	strh	r2, [r3, #0]
 80029b4:	e045      	b.n	8002a42 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029be:	785b      	ldrb	r3, [r3, #1]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d126      	bne.n	8002a12 <PCD_EP_ISR_Handler+0x6a4>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	637b      	str	r3, [r7, #52]	; 0x34
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	461a      	mov	r2, r3
 80029d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d8:	4413      	add	r3, r2
 80029da:	637b      	str	r3, [r7, #52]	; 0x34
 80029dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	011a      	lsls	r2, r3, #4
 80029e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e4:	4413      	add	r3, r2
 80029e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029ea:	633b      	str	r3, [r7, #48]	; 0x30
 80029ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fa:	801a      	strh	r2, [r3, #0]
 80029fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0e:	801a      	strh	r2, [r3, #0]
 8002a10:	e017      	b.n	8002a42 <PCD_EP_ISR_Handler+0x6d4>
 8002a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a14:	785b      	ldrb	r3, [r3, #1]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d113      	bne.n	8002a42 <PCD_EP_ISR_Handler+0x6d4>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	461a      	mov	r2, r3
 8002a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a28:	4413      	add	r3, r2
 8002a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	011a      	lsls	r2, r3, #4
 8002a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a34:	4413      	add	r3, r2
 8002a36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3e:	2200      	movs	r2, #0
 8002a40:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	4619      	mov	r1, r3
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f005 fbb0 	bl	80081ae <HAL_PCD_DataInStageCallback>
 8002a4e:	e053      	b.n	8002af8 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002a50:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d146      	bne.n	8002aea <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	461a      	mov	r2, r3
 8002a68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	4413      	add	r3, r2
 8002a70:	3302      	adds	r3, #2
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a84:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a8a:	699a      	ldr	r2, [r3, #24]
 8002a8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d907      	bls.n	8002aa4 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8002a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a96:	699a      	ldr	r2, [r3, #24]
 8002a98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a9c:	1ad2      	subs	r2, r2, r3
 8002a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aa0:	619a      	str	r2, [r3, #24]
 8002aa2:	e002      	b.n	8002aaa <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8002aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f005 fb78 	bl	80081ae <HAL_PCD_DataInStageCallback>
 8002abe:	e01b      	b.n	8002af8 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002ac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ac2:	695a      	ldr	r2, [r3, #20]
 8002ac4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002ac8:	441a      	add	r2, r3
 8002aca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002acc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ad0:	69da      	ldr	r2, [r3, #28]
 8002ad2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002ad6:	441a      	add	r2, r3
 8002ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ada:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f002 f82a 	bl	8004b3c <USB_EPStartXfer>
 8002ae8:	e006      	b.n	8002af8 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002aea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002aee:	461a      	mov	r2, r3
 8002af0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f91b 	bl	8002d2e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	b21b      	sxth	r3, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f6ff ac37 	blt.w	8002378 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3758      	adds	r7, #88	; 0x58
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b22:	88fb      	ldrh	r3, [r7, #6]
 8002b24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d07e      	beq.n	8002c2a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	461a      	mov	r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	4413      	add	r3, r2
 8002b40:	3302      	adds	r3, #2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	6812      	ldr	r2, [r2, #0]
 8002b48:	4413      	add	r3, r2
 8002b4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b54:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	699a      	ldr	r2, [r3, #24]
 8002b5a:	8b7b      	ldrh	r3, [r7, #26]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d306      	bcc.n	8002b6e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	699a      	ldr	r2, [r3, #24]
 8002b64:	8b7b      	ldrh	r3, [r7, #26]
 8002b66:	1ad2      	subs	r2, r2, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	619a      	str	r2, [r3, #24]
 8002b6c:	e002      	b.n	8002b74 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2200      	movs	r2, #0
 8002b72:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d123      	bne.n	8002bc4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	461a      	mov	r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b96:	833b      	strh	r3, [r7, #24]
 8002b98:	8b3b      	ldrh	r3, [r7, #24]
 8002b9a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b9e:	833b      	strh	r3, [r7, #24]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	441a      	add	r2, r3
 8002bae:	8b3b      	ldrh	r3, [r7, #24]
 8002bb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bc4:	88fb      	ldrh	r3, [r7, #6]
 8002bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d01f      	beq.n	8002c0e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be8:	82fb      	strh	r3, [r7, #22]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	441a      	add	r2, r3
 8002bf8:	8afb      	ldrh	r3, [r7, #22]
 8002bfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c0e:	8b7b      	ldrh	r3, [r7, #26]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 8087 	beq.w	8002d24 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	6959      	ldr	r1, [r3, #20]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	891a      	ldrh	r2, [r3, #8]
 8002c22:	8b7b      	ldrh	r3, [r7, #26]
 8002c24:	f003 fcbe 	bl	80065a4 <USB_ReadPMA>
 8002c28:	e07c      	b.n	8002d24 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	3306      	adds	r3, #6
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	6812      	ldr	r2, [r2, #0]
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c52:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	699a      	ldr	r2, [r3, #24]
 8002c58:	8b7b      	ldrh	r3, [r7, #26]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d306      	bcc.n	8002c6c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	699a      	ldr	r2, [r3, #24]
 8002c62:	8b7b      	ldrh	r3, [r7, #26]
 8002c64:	1ad2      	subs	r2, r2, r3
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	619a      	str	r2, [r3, #24]
 8002c6a:	e002      	b.n	8002c72 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d123      	bne.n	8002cc2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c94:	83fb      	strh	r3, [r7, #30]
 8002c96:	8bfb      	ldrh	r3, [r7, #30]
 8002c98:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c9c:	83fb      	strh	r3, [r7, #30]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	441a      	add	r2, r3
 8002cac:	8bfb      	ldrh	r3, [r7, #30]
 8002cae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002cc2:	88fb      	ldrh	r3, [r7, #6]
 8002cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d11f      	bne.n	8002d0c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce6:	83bb      	strh	r3, [r7, #28]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	461a      	mov	r2, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	441a      	add	r2, r3
 8002cf6:	8bbb      	ldrh	r3, [r7, #28]
 8002cf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d0c:	8b7b      	ldrh	r3, [r7, #26]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d008      	beq.n	8002d24 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	6959      	ldr	r1, [r3, #20]
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	895a      	ldrh	r2, [r3, #10]
 8002d1e:	8b7b      	ldrh	r3, [r7, #26]
 8002d20:	f003 fc40 	bl	80065a4 <USB_ReadPMA>
    }
  }

  return count;
 8002d24:	8b7b      	ldrh	r3, [r7, #26]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3720      	adds	r7, #32
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b0a4      	sub	sp, #144	; 0x90
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d3c:	88fb      	ldrh	r3, [r7, #6]
 8002d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 81dd 	beq.w	8003102 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	461a      	mov	r2, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3302      	adds	r3, #2
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	6812      	ldr	r2, [r2, #0]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d70:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	699a      	ldr	r2, [r3, #24]
 8002d78:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d907      	bls.n	8002d90 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	699a      	ldr	r2, [r3, #24]
 8002d84:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002d88:	1ad2      	subs	r2, r2, r3
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	619a      	str	r2, [r3, #24]
 8002d8e:	e002      	b.n	8002d96 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2200      	movs	r2, #0
 8002d94:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f040 80b9 	bne.w	8002f12 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	785b      	ldrb	r3, [r3, #1]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d126      	bne.n	8002df6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	461a      	mov	r2, r3
 8002dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dbc:	4413      	add	r3, r2
 8002dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	011a      	lsls	r2, r3, #4
 8002dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc8:	4413      	add	r3, r2
 8002dca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002dce:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dde:	801a      	strh	r2, [r3, #0]
 8002de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df2:	801a      	strh	r2, [r3, #0]
 8002df4:	e01a      	b.n	8002e2c <HAL_PCD_EP_DB_Transmit+0xfe>
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	785b      	ldrb	r3, [r3, #1]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d116      	bne.n	8002e2c <HAL_PCD_EP_DB_Transmit+0xfe>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	637b      	str	r3, [r7, #52]	; 0x34
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	461a      	mov	r2, r3
 8002e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e12:	4413      	add	r3, r2
 8002e14:	637b      	str	r3, [r7, #52]	; 0x34
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	011a      	lsls	r2, r3, #4
 8002e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e1e:	4413      	add	r3, r2
 8002e20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e24:	633b      	str	r3, [r7, #48]	; 0x30
 8002e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e28:	2200      	movs	r2, #0
 8002e2a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	785b      	ldrb	r3, [r3, #1]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d126      	bne.n	8002e88 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	61fb      	str	r3, [r7, #28]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	4413      	add	r3, r2
 8002e50:	61fb      	str	r3, [r7, #28]
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	011a      	lsls	r2, r3, #4
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e60:	61bb      	str	r3, [r7, #24]
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	881b      	ldrh	r3, [r3, #0]
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	801a      	strh	r2, [r3, #0]
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	801a      	strh	r2, [r3, #0]
 8002e86:	e017      	b.n	8002eb8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	785b      	ldrb	r3, [r3, #1]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d113      	bne.n	8002eb8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	4413      	add	r3, r2
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	011a      	lsls	r2, r3, #4
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	4413      	add	r3, r2
 8002eac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002eb0:	623b      	str	r3, [r7, #32]
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f005 f975 	bl	80081ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ec4:	88fb      	ldrh	r3, [r7, #6]
 8002ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 82fc 	beq.w	80034c8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eea:	82fb      	strh	r3, [r7, #22]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	441a      	add	r2, r3
 8002efa:	8afb      	ldrh	r3, [r7, #22]
 8002efc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	8013      	strh	r3, [r2, #0]
 8002f10:	e2da      	b.n	80034c8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f12:	88fb      	ldrh	r3, [r7, #6]
 8002f14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d021      	beq.n	8002f60 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f36:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	441a      	add	r2, r3
 8002f48:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002f4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	f040 82ae 	bne.w	80034c8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	695a      	ldr	r2, [r3, #20]
 8002f70:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f74:	441a      	add	r2, r3
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	69da      	ldr	r2, [r3, #28]
 8002f7e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f82:	441a      	add	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	6a1a      	ldr	r2, [r3, #32]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d30b      	bcc.n	8002fac <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	6a1a      	ldr	r2, [r3, #32]
 8002fa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fa4:	1ad2      	subs	r2, r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	621a      	str	r2, [r3, #32]
 8002faa:	e017      	b.n	8002fdc <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d108      	bne.n	8002fc6 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002fb4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002fb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002fc4:	e00a      	b.n	8002fdc <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	785b      	ldrb	r3, [r3, #1]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d165      	bne.n	80030b0 <HAL_PCD_EP_DB_Transmit+0x382>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff8:	4413      	add	r3, r2
 8002ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	011a      	lsls	r2, r3, #4
 8003002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003004:	4413      	add	r3, r2
 8003006:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800300a:	63bb      	str	r3, [r7, #56]	; 0x38
 800300c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	b29b      	uxth	r3, r3
 8003012:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003016:	b29a      	uxth	r2, r3
 8003018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301a:	801a      	strh	r2, [r3, #0]
 800301c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003020:	2b3e      	cmp	r3, #62	; 0x3e
 8003022:	d91d      	bls.n	8003060 <HAL_PCD_EP_DB_Transmit+0x332>
 8003024:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003028:	095b      	lsrs	r3, r3, #5
 800302a:	64bb      	str	r3, [r7, #72]	; 0x48
 800302c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003030:	f003 031f 	and.w	r3, r3, #31
 8003034:	2b00      	cmp	r3, #0
 8003036:	d102      	bne.n	800303e <HAL_PCD_EP_DB_Transmit+0x310>
 8003038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800303a:	3b01      	subs	r3, #1
 800303c:	64bb      	str	r3, [r7, #72]	; 0x48
 800303e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	b29a      	uxth	r2, r3
 8003044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003046:	b29b      	uxth	r3, r3
 8003048:	029b      	lsls	r3, r3, #10
 800304a:	b29b      	uxth	r3, r3
 800304c:	4313      	orrs	r3, r2
 800304e:	b29b      	uxth	r3, r3
 8003050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003058:	b29a      	uxth	r2, r3
 800305a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305c:	801a      	strh	r2, [r3, #0]
 800305e:	e044      	b.n	80030ea <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003060:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10a      	bne.n	800307e <HAL_PCD_EP_DB_Transmit+0x350>
 8003068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	b29b      	uxth	r3, r3
 800306e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003076:	b29a      	uxth	r2, r3
 8003078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307a:	801a      	strh	r2, [r3, #0]
 800307c:	e035      	b.n	80030ea <HAL_PCD_EP_DB_Transmit+0x3bc>
 800307e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003082:	085b      	lsrs	r3, r3, #1
 8003084:	64bb      	str	r3, [r7, #72]	; 0x48
 8003086:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003094:	3301      	adds	r3, #1
 8003096:	64bb      	str	r3, [r7, #72]	; 0x48
 8003098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	b29a      	uxth	r2, r3
 800309e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	029b      	lsls	r3, r3, #10
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	4313      	orrs	r3, r2
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ac:	801a      	strh	r2, [r3, #0]
 80030ae:	e01c      	b.n	80030ea <HAL_PCD_EP_DB_Transmit+0x3bc>
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	785b      	ldrb	r3, [r3, #1]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d118      	bne.n	80030ea <HAL_PCD_EP_DB_Transmit+0x3bc>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	647b      	str	r3, [r7, #68]	; 0x44
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	461a      	mov	r2, r3
 80030ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030cc:	4413      	add	r3, r2
 80030ce:	647b      	str	r3, [r7, #68]	; 0x44
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	011a      	lsls	r2, r3, #4
 80030d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030d8:	4413      	add	r3, r2
 80030da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030de:	643b      	str	r3, [r7, #64]	; 0x40
 80030e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030e8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	6959      	ldr	r1, [r3, #20]
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	891a      	ldrh	r2, [r3, #8]
 80030f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	f003 fa0d 	bl	800651a <USB_WritePMA>
 8003100:	e1e2      	b.n	80034c8 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800310a:	b29b      	uxth	r3, r3
 800310c:	461a      	mov	r2, r3
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4413      	add	r3, r2
 8003116:	3306      	adds	r3, #6
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	6812      	ldr	r2, [r2, #0]
 800311e:	4413      	add	r3, r2
 8003120:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800312a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	699a      	ldr	r2, [r3, #24]
 8003132:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003136:	429a      	cmp	r2, r3
 8003138:	d307      	bcc.n	800314a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	699a      	ldr	r2, [r3, #24]
 800313e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003142:	1ad2      	subs	r2, r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	619a      	str	r2, [r3, #24]
 8003148:	e002      	b.n	8003150 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	2200      	movs	r2, #0
 800314e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	2b00      	cmp	r3, #0
 8003156:	f040 80c0 	bne.w	80032da <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	785b      	ldrb	r3, [r3, #1]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d126      	bne.n	80031b0 <HAL_PCD_EP_DB_Transmit+0x482>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003170:	b29b      	uxth	r3, r3
 8003172:	461a      	mov	r2, r3
 8003174:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003176:	4413      	add	r3, r2
 8003178:	67fb      	str	r3, [r7, #124]	; 0x7c
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	011a      	lsls	r2, r3, #4
 8003180:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003182:	4413      	add	r3, r2
 8003184:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003188:	67bb      	str	r3, [r7, #120]	; 0x78
 800318a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800318c:	881b      	ldrh	r3, [r3, #0]
 800318e:	b29b      	uxth	r3, r3
 8003190:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003194:	b29a      	uxth	r2, r3
 8003196:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003198:	801a      	strh	r2, [r3, #0]
 800319a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031ac:	801a      	strh	r2, [r3, #0]
 80031ae:	e01a      	b.n	80031e6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	785b      	ldrb	r3, [r3, #1]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d116      	bne.n	80031e6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	667b      	str	r3, [r7, #100]	; 0x64
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	461a      	mov	r2, r3
 80031ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031cc:	4413      	add	r3, r2
 80031ce:	667b      	str	r3, [r7, #100]	; 0x64
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	011a      	lsls	r2, r3, #4
 80031d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031d8:	4413      	add	r3, r2
 80031da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80031de:	663b      	str	r3, [r7, #96]	; 0x60
 80031e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031e2:	2200      	movs	r2, #0
 80031e4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	677b      	str	r3, [r7, #116]	; 0x74
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	785b      	ldrb	r3, [r3, #1]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d12b      	bne.n	800324c <HAL_PCD_EP_DB_Transmit+0x51e>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003202:	b29b      	uxth	r3, r3
 8003204:	461a      	mov	r2, r3
 8003206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003208:	4413      	add	r3, r2
 800320a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	011a      	lsls	r2, r3, #4
 8003212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003214:	4413      	add	r3, r2
 8003216:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800321a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800321e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	b29b      	uxth	r3, r3
 8003226:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800322a:	b29a      	uxth	r2, r3
 800322c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003230:	801a      	strh	r2, [r3, #0]
 8003232:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	b29b      	uxth	r3, r3
 800323a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800323e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003242:	b29a      	uxth	r2, r3
 8003244:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003248:	801a      	strh	r2, [r3, #0]
 800324a:	e017      	b.n	800327c <HAL_PCD_EP_DB_Transmit+0x54e>
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	785b      	ldrb	r3, [r3, #1]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d113      	bne.n	800327c <HAL_PCD_EP_DB_Transmit+0x54e>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800325c:	b29b      	uxth	r3, r3
 800325e:	461a      	mov	r2, r3
 8003260:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003262:	4413      	add	r3, r2
 8003264:	677b      	str	r3, [r7, #116]	; 0x74
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	011a      	lsls	r2, r3, #4
 800326c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800326e:	4413      	add	r3, r2
 8003270:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003274:	673b      	str	r3, [r7, #112]	; 0x70
 8003276:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003278:	2200      	movs	r2, #0
 800327a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	4619      	mov	r1, r3
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f004 ff93 	bl	80081ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003288:	88fb      	ldrh	r3, [r7, #6]
 800328a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800328e:	2b00      	cmp	r3, #0
 8003290:	f040 811a 	bne.w	80034c8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	461a      	mov	r2, r3
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ae:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	441a      	add	r2, r3
 80032c0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80032c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	8013      	strh	r3, [r2, #0]
 80032d8:	e0f6      	b.n	80034c8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80032da:	88fb      	ldrh	r3, [r7, #6]
 80032dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d121      	bne.n	8003328 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	461a      	mov	r2, r3
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	881b      	ldrh	r3, [r3, #0]
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	461a      	mov	r2, r3
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	441a      	add	r2, r3
 8003310:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003314:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003318:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800331c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003324:	b29b      	uxth	r3, r3
 8003326:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800332e:	2b01      	cmp	r3, #1
 8003330:	f040 80ca 	bne.w	80034c8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	695a      	ldr	r2, [r3, #20]
 8003338:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800333c:	441a      	add	r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	69da      	ldr	r2, [r3, #28]
 8003346:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800334a:	441a      	add	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	6a1a      	ldr	r2, [r3, #32]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	429a      	cmp	r2, r3
 800335a:	d30b      	bcc.n	8003374 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	6a1a      	ldr	r2, [r3, #32]
 8003368:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800336c:	1ad2      	subs	r2, r2, r3
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	621a      	str	r2, [r3, #32]
 8003372:	e017      	b.n	80033a4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d108      	bne.n	800338e <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800337c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003380:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800338c:	e00a      	b.n	80033a4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2200      	movs	r2, #0
 800339a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	657b      	str	r3, [r7, #84]	; 0x54
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	785b      	ldrb	r3, [r3, #1]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d165      	bne.n	800347e <HAL_PCD_EP_DB_Transmit+0x750>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	461a      	mov	r2, r3
 80033c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033c6:	4413      	add	r3, r2
 80033c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	011a      	lsls	r2, r3, #4
 80033d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033d2:	4413      	add	r3, r2
 80033d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80033d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80033da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	b29b      	uxth	r3, r3
 80033e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033e8:	801a      	strh	r2, [r3, #0]
 80033ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033ee:	2b3e      	cmp	r3, #62	; 0x3e
 80033f0:	d91d      	bls.n	800342e <HAL_PCD_EP_DB_Transmit+0x700>
 80033f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80033fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033fe:	f003 031f 	and.w	r3, r3, #31
 8003402:	2b00      	cmp	r3, #0
 8003404:	d102      	bne.n	800340c <HAL_PCD_EP_DB_Transmit+0x6de>
 8003406:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003408:	3b01      	subs	r3, #1
 800340a:	66bb      	str	r3, [r7, #104]	; 0x68
 800340c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	b29a      	uxth	r2, r3
 8003412:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003414:	b29b      	uxth	r3, r3
 8003416:	029b      	lsls	r3, r3, #10
 8003418:	b29b      	uxth	r3, r3
 800341a:	4313      	orrs	r3, r2
 800341c:	b29b      	uxth	r3, r3
 800341e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003426:	b29a      	uxth	r2, r3
 8003428:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800342a:	801a      	strh	r2, [r3, #0]
 800342c:	e041      	b.n	80034b2 <HAL_PCD_EP_DB_Transmit+0x784>
 800342e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10a      	bne.n	800344c <HAL_PCD_EP_DB_Transmit+0x71e>
 8003436:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	b29b      	uxth	r3, r3
 800343c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003444:	b29a      	uxth	r2, r3
 8003446:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003448:	801a      	strh	r2, [r3, #0]
 800344a:	e032      	b.n	80034b2 <HAL_PCD_EP_DB_Transmit+0x784>
 800344c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003450:	085b      	lsrs	r3, r3, #1
 8003452:	66bb      	str	r3, [r7, #104]	; 0x68
 8003454:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <HAL_PCD_EP_DB_Transmit+0x738>
 8003460:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003462:	3301      	adds	r3, #1
 8003464:	66bb      	str	r3, [r7, #104]	; 0x68
 8003466:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003468:	881b      	ldrh	r3, [r3, #0]
 800346a:	b29a      	uxth	r2, r3
 800346c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800346e:	b29b      	uxth	r3, r3
 8003470:	029b      	lsls	r3, r3, #10
 8003472:	b29b      	uxth	r3, r3
 8003474:	4313      	orrs	r3, r2
 8003476:	b29a      	uxth	r2, r3
 8003478:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800347a:	801a      	strh	r2, [r3, #0]
 800347c:	e019      	b.n	80034b2 <HAL_PCD_EP_DB_Transmit+0x784>
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	785b      	ldrb	r3, [r3, #1]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d115      	bne.n	80034b2 <HAL_PCD_EP_DB_Transmit+0x784>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800348e:	b29b      	uxth	r3, r3
 8003490:	461a      	mov	r2, r3
 8003492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003494:	4413      	add	r3, r2
 8003496:	657b      	str	r3, [r7, #84]	; 0x54
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	011a      	lsls	r2, r3, #4
 800349e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034a0:	4413      	add	r3, r2
 80034a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80034a6:	653b      	str	r3, [r7, #80]	; 0x50
 80034a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034b0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6818      	ldr	r0, [r3, #0]
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	6959      	ldr	r1, [r3, #20]
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	895a      	ldrh	r2, [r3, #10]
 80034be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	f003 f829 	bl	800651a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	461a      	mov	r2, r3
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	b29b      	uxth	r3, r3
 80034da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034e2:	82bb      	strh	r3, [r7, #20]
 80034e4:	8abb      	ldrh	r3, [r7, #20]
 80034e6:	f083 0310 	eor.w	r3, r3, #16
 80034ea:	82bb      	strh	r3, [r7, #20]
 80034ec:	8abb      	ldrh	r3, [r7, #20]
 80034ee:	f083 0320 	eor.w	r3, r3, #32
 80034f2:	82bb      	strh	r3, [r7, #20]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	461a      	mov	r2, r3
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	441a      	add	r2, r3
 8003502:	8abb      	ldrh	r3, [r7, #20]
 8003504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800350c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003514:	b29b      	uxth	r3, r3
 8003516:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3790      	adds	r7, #144	; 0x90
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003522:	b480      	push	{r7}
 8003524:	b087      	sub	sp, #28
 8003526:	af00      	add	r7, sp, #0
 8003528:	60f8      	str	r0, [r7, #12]
 800352a:	607b      	str	r3, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	817b      	strh	r3, [r7, #10]
 8003530:	4613      	mov	r3, r2
 8003532:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003534:	897b      	ldrh	r3, [r7, #10]
 8003536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353a:	b29b      	uxth	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00b      	beq.n	8003558 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003540:	897b      	ldrh	r3, [r7, #10]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4413      	add	r3, r2
 8003554:	617b      	str	r3, [r7, #20]
 8003556:	e009      	b.n	800356c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003558:	897a      	ldrh	r2, [r7, #10]
 800355a:	4613      	mov	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	4413      	add	r3, r2
 800356a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800356c:	893b      	ldrh	r3, [r7, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d107      	bne.n	8003582 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2200      	movs	r2, #0
 8003576:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	b29a      	uxth	r2, r3
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	80da      	strh	r2, [r3, #6]
 8003580:	e00b      	b.n	800359a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2201      	movs	r2, #1
 8003586:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	b29a      	uxth	r2, r3
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	0c1b      	lsrs	r3, r3, #16
 8003594:	b29a      	uxth	r2, r3
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	371c      	adds	r7, #28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bc80      	pop	{r7}
 80035a4:	4770      	bx	lr
	...

080035a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e272      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 8087 	beq.w	80036d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035c8:	4b92      	ldr	r3, [pc, #584]	; (8003814 <HAL_RCC_OscConfig+0x26c>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 030c 	and.w	r3, r3, #12
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d00c      	beq.n	80035ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035d4:	4b8f      	ldr	r3, [pc, #572]	; (8003814 <HAL_RCC_OscConfig+0x26c>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f003 030c 	and.w	r3, r3, #12
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d112      	bne.n	8003606 <HAL_RCC_OscConfig+0x5e>
 80035e0:	4b8c      	ldr	r3, [pc, #560]	; (8003814 <HAL_RCC_OscConfig+0x26c>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ec:	d10b      	bne.n	8003606 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ee:	4b89      	ldr	r3, [pc, #548]	; (8003814 <HAL_RCC_OscConfig+0x26c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d06c      	beq.n	80036d4 <HAL_RCC_OscConfig+0x12c>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d168      	bne.n	80036d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e24c      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800360e:	d106      	bne.n	800361e <HAL_RCC_OscConfig+0x76>
 8003610:	4b80      	ldr	r3, [pc, #512]	; (8003814 <HAL_RCC_OscConfig+0x26c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a7f      	ldr	r2, [pc, #508]	; (8003814 <HAL_RCC_OscConfig+0x26c>)
 8003616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800361a:	6013      	str	r3, [r2, #0]
 800361c:	e02e      	b.n	800367c <HAL_RCC_OscConfig+0xd4>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10c      	bne.n	8003640 <HAL_RCC_OscConfig+0x98>
 8003626:	4b7b      	ldr	r3, [pc, #492]	; (8003814 <HAL_RCC_OscConfig+0x26c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a7a      	ldr	r2, [pc, #488]	; (8003814 <HAL_RCC_OscConfig+0x26c>)
 800362c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	4b78      	ldr	r3, [pc, #480]	; (8003814 <HAL_RCC_OscConfig+0x26c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a77      	ldr	r2, [pc, #476]	; (8003814 <HAL_RCC_OscConfig+0x26c>)
 8003638:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	e01d      	b.n	800367c <HAL_RCC_OscConfig+0xd4>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003648:	d10c      	bne.n	8003664 <HAL_RCC_OscConfig+0xbc>
 800364a:	4b72      	ldr	r3, [pc, #456]	; (8003814 <HAL_RCC_OscConfig+0x26c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a71      	ldr	r2, [pc, #452]	; (8003814 <HAL_RCC_OscConfig+0x26c>)
 8003650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003654:	6013      	str	r3, [r2, #0]
 8003656:	4b6f      	ldr	r3, [pc, #444]	; (8003814 <HAL_RCC_OscConfig+0x26c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a6e      	ldr	r2, [pc, #440]	; (8003814 <HAL_RCC_OscConfig+0x26c>)
 800365c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	e00b      	b.n	800367c <HAL_RCC_OscConfig+0xd4>
 8003664:	4b6b      	ldr	r3, [pc, #428]	; (8003814 <HAL_RCC_OscConfig+0x26c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a6a      	ldr	r2, [pc, #424]	; (8003814 <HAL_RCC_OscConfig+0x26c>)
 800366a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800366e:	6013      	str	r3, [r2, #0]
 8003670:	4b68      	ldr	r3, [pc, #416]	; (8003814 <HAL_RCC_OscConfig+0x26c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a67      	ldr	r2, [pc, #412]	; (8003814 <HAL_RCC_OscConfig+0x26c>)
 8003676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800367a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d013      	beq.n	80036ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003684:	f7fc ffd6 	bl	8000634 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800368c:	f7fc ffd2 	bl	8000634 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b64      	cmp	r3, #100	; 0x64
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e200      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800369e:	4b5d      	ldr	r3, [pc, #372]	; (8003814 <HAL_RCC_OscConfig+0x26c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0f0      	beq.n	800368c <HAL_RCC_OscConfig+0xe4>
 80036aa:	e014      	b.n	80036d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ac:	f7fc ffc2 	bl	8000634 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036b4:	f7fc ffbe 	bl	8000634 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b64      	cmp	r3, #100	; 0x64
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e1ec      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036c6:	4b53      	ldr	r3, [pc, #332]	; (8003814 <HAL_RCC_OscConfig+0x26c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f0      	bne.n	80036b4 <HAL_RCC_OscConfig+0x10c>
 80036d2:	e000      	b.n	80036d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d063      	beq.n	80037aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036e2:	4b4c      	ldr	r3, [pc, #304]	; (8003814 <HAL_RCC_OscConfig+0x26c>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f003 030c 	and.w	r3, r3, #12
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00b      	beq.n	8003706 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80036ee:	4b49      	ldr	r3, [pc, #292]	; (8003814 <HAL_RCC_OscConfig+0x26c>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f003 030c 	and.w	r3, r3, #12
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d11c      	bne.n	8003734 <HAL_RCC_OscConfig+0x18c>
 80036fa:	4b46      	ldr	r3, [pc, #280]	; (8003814 <HAL_RCC_OscConfig+0x26c>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d116      	bne.n	8003734 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003706:	4b43      	ldr	r3, [pc, #268]	; (8003814 <HAL_RCC_OscConfig+0x26c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d005      	beq.n	800371e <HAL_RCC_OscConfig+0x176>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d001      	beq.n	800371e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e1c0      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800371e:	4b3d      	ldr	r3, [pc, #244]	; (8003814 <HAL_RCC_OscConfig+0x26c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	4939      	ldr	r1, [pc, #228]	; (8003814 <HAL_RCC_OscConfig+0x26c>)
 800372e:	4313      	orrs	r3, r2
 8003730:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003732:	e03a      	b.n	80037aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d020      	beq.n	800377e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800373c:	4b36      	ldr	r3, [pc, #216]	; (8003818 <HAL_RCC_OscConfig+0x270>)
 800373e:	2201      	movs	r2, #1
 8003740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003742:	f7fc ff77 	bl	8000634 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800374a:	f7fc ff73 	bl	8000634 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e1a1      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375c:	4b2d      	ldr	r3, [pc, #180]	; (8003814 <HAL_RCC_OscConfig+0x26c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0f0      	beq.n	800374a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003768:	4b2a      	ldr	r3, [pc, #168]	; (8003814 <HAL_RCC_OscConfig+0x26c>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	4927      	ldr	r1, [pc, #156]	; (8003814 <HAL_RCC_OscConfig+0x26c>)
 8003778:	4313      	orrs	r3, r2
 800377a:	600b      	str	r3, [r1, #0]
 800377c:	e015      	b.n	80037aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800377e:	4b26      	ldr	r3, [pc, #152]	; (8003818 <HAL_RCC_OscConfig+0x270>)
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003784:	f7fc ff56 	bl	8000634 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800378c:	f7fc ff52 	bl	8000634 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e180      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800379e:	4b1d      	ldr	r3, [pc, #116]	; (8003814 <HAL_RCC_OscConfig+0x26c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f0      	bne.n	800378c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d03a      	beq.n	800382c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d019      	beq.n	80037f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037be:	4b17      	ldr	r3, [pc, #92]	; (800381c <HAL_RCC_OscConfig+0x274>)
 80037c0:	2201      	movs	r2, #1
 80037c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c4:	f7fc ff36 	bl	8000634 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037cc:	f7fc ff32 	bl	8000634 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e160      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037de:	4b0d      	ldr	r3, [pc, #52]	; (8003814 <HAL_RCC_OscConfig+0x26c>)
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80037ea:	2001      	movs	r0, #1
 80037ec:	f000 faba 	bl	8003d64 <RCC_Delay>
 80037f0:	e01c      	b.n	800382c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037f2:	4b0a      	ldr	r3, [pc, #40]	; (800381c <HAL_RCC_OscConfig+0x274>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037f8:	f7fc ff1c 	bl	8000634 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037fe:	e00f      	b.n	8003820 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003800:	f7fc ff18 	bl	8000634 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d908      	bls.n	8003820 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e146      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4f8>
 8003812:	bf00      	nop
 8003814:	40021000 	.word	0x40021000
 8003818:	42420000 	.word	0x42420000
 800381c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003820:	4b92      	ldr	r3, [pc, #584]	; (8003a6c <HAL_RCC_OscConfig+0x4c4>)
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1e9      	bne.n	8003800 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 80a6 	beq.w	8003986 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800383a:	2300      	movs	r3, #0
 800383c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800383e:	4b8b      	ldr	r3, [pc, #556]	; (8003a6c <HAL_RCC_OscConfig+0x4c4>)
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10d      	bne.n	8003866 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800384a:	4b88      	ldr	r3, [pc, #544]	; (8003a6c <HAL_RCC_OscConfig+0x4c4>)
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	4a87      	ldr	r2, [pc, #540]	; (8003a6c <HAL_RCC_OscConfig+0x4c4>)
 8003850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003854:	61d3      	str	r3, [r2, #28]
 8003856:	4b85      	ldr	r3, [pc, #532]	; (8003a6c <HAL_RCC_OscConfig+0x4c4>)
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385e:	60bb      	str	r3, [r7, #8]
 8003860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003862:	2301      	movs	r3, #1
 8003864:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003866:	4b82      	ldr	r3, [pc, #520]	; (8003a70 <HAL_RCC_OscConfig+0x4c8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386e:	2b00      	cmp	r3, #0
 8003870:	d118      	bne.n	80038a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003872:	4b7f      	ldr	r3, [pc, #508]	; (8003a70 <HAL_RCC_OscConfig+0x4c8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a7e      	ldr	r2, [pc, #504]	; (8003a70 <HAL_RCC_OscConfig+0x4c8>)
 8003878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800387c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800387e:	f7fc fed9 	bl	8000634 <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003884:	e008      	b.n	8003898 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003886:	f7fc fed5 	bl	8000634 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b64      	cmp	r3, #100	; 0x64
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e103      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003898:	4b75      	ldr	r3, [pc, #468]	; (8003a70 <HAL_RCC_OscConfig+0x4c8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0f0      	beq.n	8003886 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d106      	bne.n	80038ba <HAL_RCC_OscConfig+0x312>
 80038ac:	4b6f      	ldr	r3, [pc, #444]	; (8003a6c <HAL_RCC_OscConfig+0x4c4>)
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	4a6e      	ldr	r2, [pc, #440]	; (8003a6c <HAL_RCC_OscConfig+0x4c4>)
 80038b2:	f043 0301 	orr.w	r3, r3, #1
 80038b6:	6213      	str	r3, [r2, #32]
 80038b8:	e02d      	b.n	8003916 <HAL_RCC_OscConfig+0x36e>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10c      	bne.n	80038dc <HAL_RCC_OscConfig+0x334>
 80038c2:	4b6a      	ldr	r3, [pc, #424]	; (8003a6c <HAL_RCC_OscConfig+0x4c4>)
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	4a69      	ldr	r2, [pc, #420]	; (8003a6c <HAL_RCC_OscConfig+0x4c4>)
 80038c8:	f023 0301 	bic.w	r3, r3, #1
 80038cc:	6213      	str	r3, [r2, #32]
 80038ce:	4b67      	ldr	r3, [pc, #412]	; (8003a6c <HAL_RCC_OscConfig+0x4c4>)
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	4a66      	ldr	r2, [pc, #408]	; (8003a6c <HAL_RCC_OscConfig+0x4c4>)
 80038d4:	f023 0304 	bic.w	r3, r3, #4
 80038d8:	6213      	str	r3, [r2, #32]
 80038da:	e01c      	b.n	8003916 <HAL_RCC_OscConfig+0x36e>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	2b05      	cmp	r3, #5
 80038e2:	d10c      	bne.n	80038fe <HAL_RCC_OscConfig+0x356>
 80038e4:	4b61      	ldr	r3, [pc, #388]	; (8003a6c <HAL_RCC_OscConfig+0x4c4>)
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	4a60      	ldr	r2, [pc, #384]	; (8003a6c <HAL_RCC_OscConfig+0x4c4>)
 80038ea:	f043 0304 	orr.w	r3, r3, #4
 80038ee:	6213      	str	r3, [r2, #32]
 80038f0:	4b5e      	ldr	r3, [pc, #376]	; (8003a6c <HAL_RCC_OscConfig+0x4c4>)
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	4a5d      	ldr	r2, [pc, #372]	; (8003a6c <HAL_RCC_OscConfig+0x4c4>)
 80038f6:	f043 0301 	orr.w	r3, r3, #1
 80038fa:	6213      	str	r3, [r2, #32]
 80038fc:	e00b      	b.n	8003916 <HAL_RCC_OscConfig+0x36e>
 80038fe:	4b5b      	ldr	r3, [pc, #364]	; (8003a6c <HAL_RCC_OscConfig+0x4c4>)
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	4a5a      	ldr	r2, [pc, #360]	; (8003a6c <HAL_RCC_OscConfig+0x4c4>)
 8003904:	f023 0301 	bic.w	r3, r3, #1
 8003908:	6213      	str	r3, [r2, #32]
 800390a:	4b58      	ldr	r3, [pc, #352]	; (8003a6c <HAL_RCC_OscConfig+0x4c4>)
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	4a57      	ldr	r2, [pc, #348]	; (8003a6c <HAL_RCC_OscConfig+0x4c4>)
 8003910:	f023 0304 	bic.w	r3, r3, #4
 8003914:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d015      	beq.n	800394a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800391e:	f7fc fe89 	bl	8000634 <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003924:	e00a      	b.n	800393c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003926:	f7fc fe85 	bl	8000634 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	f241 3288 	movw	r2, #5000	; 0x1388
 8003934:	4293      	cmp	r3, r2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e0b1      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800393c:	4b4b      	ldr	r3, [pc, #300]	; (8003a6c <HAL_RCC_OscConfig+0x4c4>)
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0ee      	beq.n	8003926 <HAL_RCC_OscConfig+0x37e>
 8003948:	e014      	b.n	8003974 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800394a:	f7fc fe73 	bl	8000634 <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003950:	e00a      	b.n	8003968 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003952:	f7fc fe6f 	bl	8000634 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003960:	4293      	cmp	r3, r2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e09b      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003968:	4b40      	ldr	r3, [pc, #256]	; (8003a6c <HAL_RCC_OscConfig+0x4c4>)
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1ee      	bne.n	8003952 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003974:	7dfb      	ldrb	r3, [r7, #23]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d105      	bne.n	8003986 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800397a:	4b3c      	ldr	r3, [pc, #240]	; (8003a6c <HAL_RCC_OscConfig+0x4c4>)
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	4a3b      	ldr	r2, [pc, #236]	; (8003a6c <HAL_RCC_OscConfig+0x4c4>)
 8003980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003984:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 8087 	beq.w	8003a9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003990:	4b36      	ldr	r3, [pc, #216]	; (8003a6c <HAL_RCC_OscConfig+0x4c4>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 030c 	and.w	r3, r3, #12
 8003998:	2b08      	cmp	r3, #8
 800399a:	d061      	beq.n	8003a60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d146      	bne.n	8003a32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a4:	4b33      	ldr	r3, [pc, #204]	; (8003a74 <HAL_RCC_OscConfig+0x4cc>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039aa:	f7fc fe43 	bl	8000634 <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b2:	f7fc fe3f 	bl	8000634 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e06d      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039c4:	4b29      	ldr	r3, [pc, #164]	; (8003a6c <HAL_RCC_OscConfig+0x4c4>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1f0      	bne.n	80039b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d8:	d108      	bne.n	80039ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039da:	4b24      	ldr	r3, [pc, #144]	; (8003a6c <HAL_RCC_OscConfig+0x4c4>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	4921      	ldr	r1, [pc, #132]	; (8003a6c <HAL_RCC_OscConfig+0x4c4>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039ec:	4b1f      	ldr	r3, [pc, #124]	; (8003a6c <HAL_RCC_OscConfig+0x4c4>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a19      	ldr	r1, [r3, #32]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	430b      	orrs	r3, r1
 80039fe:	491b      	ldr	r1, [pc, #108]	; (8003a6c <HAL_RCC_OscConfig+0x4c4>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a04:	4b1b      	ldr	r3, [pc, #108]	; (8003a74 <HAL_RCC_OscConfig+0x4cc>)
 8003a06:	2201      	movs	r2, #1
 8003a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0a:	f7fc fe13 	bl	8000634 <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a10:	e008      	b.n	8003a24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a12:	f7fc fe0f 	bl	8000634 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e03d      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a24:	4b11      	ldr	r3, [pc, #68]	; (8003a6c <HAL_RCC_OscConfig+0x4c4>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0f0      	beq.n	8003a12 <HAL_RCC_OscConfig+0x46a>
 8003a30:	e035      	b.n	8003a9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a32:	4b10      	ldr	r3, [pc, #64]	; (8003a74 <HAL_RCC_OscConfig+0x4cc>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a38:	f7fc fdfc 	bl	8000634 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a40:	f7fc fdf8 	bl	8000634 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e026      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a52:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <HAL_RCC_OscConfig+0x4c4>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f0      	bne.n	8003a40 <HAL_RCC_OscConfig+0x498>
 8003a5e:	e01e      	b.n	8003a9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d107      	bne.n	8003a78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e019      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4f8>
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	40007000 	.word	0x40007000
 8003a74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a78:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <HAL_RCC_OscConfig+0x500>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d106      	bne.n	8003a9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d001      	beq.n	8003a9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e000      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40021000 	.word	0x40021000

08003aac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0d0      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ac0:	4b6a      	ldr	r3, [pc, #424]	; (8003c6c <HAL_RCC_ClockConfig+0x1c0>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d910      	bls.n	8003af0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ace:	4b67      	ldr	r3, [pc, #412]	; (8003c6c <HAL_RCC_ClockConfig+0x1c0>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f023 0207 	bic.w	r2, r3, #7
 8003ad6:	4965      	ldr	r1, [pc, #404]	; (8003c6c <HAL_RCC_ClockConfig+0x1c0>)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ade:	4b63      	ldr	r3, [pc, #396]	; (8003c6c <HAL_RCC_ClockConfig+0x1c0>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d001      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e0b8      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d020      	beq.n	8003b3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d005      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b08:	4b59      	ldr	r3, [pc, #356]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	4a58      	ldr	r2, [pc, #352]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0308 	and.w	r3, r3, #8
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d005      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b20:	4b53      	ldr	r3, [pc, #332]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	4a52      	ldr	r2, [pc, #328]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b2c:	4b50      	ldr	r3, [pc, #320]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	494d      	ldr	r1, [pc, #308]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d040      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d107      	bne.n	8003b62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b52:	4b47      	ldr	r3, [pc, #284]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d115      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e07f      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d107      	bne.n	8003b7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b6a:	4b41      	ldr	r3, [pc, #260]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d109      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e073      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b7a:	4b3d      	ldr	r3, [pc, #244]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e06b      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b8a:	4b39      	ldr	r3, [pc, #228]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f023 0203 	bic.w	r2, r3, #3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	4936      	ldr	r1, [pc, #216]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b9c:	f7fc fd4a 	bl	8000634 <HAL_GetTick>
 8003ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba2:	e00a      	b.n	8003bba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba4:	f7fc fd46 	bl	8000634 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e053      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bba:	4b2d      	ldr	r3, [pc, #180]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f003 020c 	and.w	r2, r3, #12
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d1eb      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bcc:	4b27      	ldr	r3, [pc, #156]	; (8003c6c <HAL_RCC_ClockConfig+0x1c0>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d210      	bcs.n	8003bfc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bda:	4b24      	ldr	r3, [pc, #144]	; (8003c6c <HAL_RCC_ClockConfig+0x1c0>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f023 0207 	bic.w	r2, r3, #7
 8003be2:	4922      	ldr	r1, [pc, #136]	; (8003c6c <HAL_RCC_ClockConfig+0x1c0>)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bea:	4b20      	ldr	r3, [pc, #128]	; (8003c6c <HAL_RCC_ClockConfig+0x1c0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d001      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e032      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d008      	beq.n	8003c1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c08:	4b19      	ldr	r3, [pc, #100]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	4916      	ldr	r1, [pc, #88]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d009      	beq.n	8003c3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c26:	4b12      	ldr	r3, [pc, #72]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	490e      	ldr	r1, [pc, #56]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c3a:	f000 f821 	bl	8003c80 <HAL_RCC_GetSysClockFreq>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	091b      	lsrs	r3, r3, #4
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	490a      	ldr	r1, [pc, #40]	; (8003c74 <HAL_RCC_ClockConfig+0x1c8>)
 8003c4c:	5ccb      	ldrb	r3, [r1, r3]
 8003c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c52:	4a09      	ldr	r2, [pc, #36]	; (8003c78 <HAL_RCC_ClockConfig+0x1cc>)
 8003c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c56:	4b09      	ldr	r3, [pc, #36]	; (8003c7c <HAL_RCC_ClockConfig+0x1d0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fc fca8 	bl	80005b0 <HAL_InitTick>

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40022000 	.word	0x40022000
 8003c70:	40021000 	.word	0x40021000
 8003c74:	08009028 	.word	0x08009028
 8003c78:	20000000 	.word	0x20000000
 8003c7c:	20000004 	.word	0x20000004

08003c80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	60fb      	str	r3, [r7, #12]
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60bb      	str	r3, [r7, #8]
 8003c8e:	2300      	movs	r3, #0
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	2300      	movs	r3, #0
 8003c94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c9a:	4b1e      	ldr	r3, [pc, #120]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d002      	beq.n	8003cb0 <HAL_RCC_GetSysClockFreq+0x30>
 8003caa:	2b08      	cmp	r3, #8
 8003cac:	d003      	beq.n	8003cb6 <HAL_RCC_GetSysClockFreq+0x36>
 8003cae:	e027      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cb0:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cb2:	613b      	str	r3, [r7, #16]
      break;
 8003cb4:	e027      	b.n	8003d06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	0c9b      	lsrs	r3, r3, #18
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	4a17      	ldr	r2, [pc, #92]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003cc0:	5cd3      	ldrb	r3, [r2, r3]
 8003cc2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d010      	beq.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cce:	4b11      	ldr	r3, [pc, #68]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x94>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	0c5b      	lsrs	r3, r3, #17
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	4a11      	ldr	r2, [pc, #68]	; (8003d20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003cda:	5cd3      	ldrb	r3, [r2, r3]
 8003cdc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a0d      	ldr	r2, [pc, #52]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ce2:	fb03 f202 	mul.w	r2, r3, r2
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cec:	617b      	str	r3, [r7, #20]
 8003cee:	e004      	b.n	8003cfa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a0c      	ldr	r2, [pc, #48]	; (8003d24 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003cf4:	fb02 f303 	mul.w	r3, r2, r3
 8003cf8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	613b      	str	r3, [r7, #16]
      break;
 8003cfe:	e002      	b.n	8003d06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d00:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d02:	613b      	str	r3, [r7, #16]
      break;
 8003d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d06:	693b      	ldr	r3, [r7, #16]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	371c      	adds	r7, #28
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bc80      	pop	{r7}
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	40021000 	.word	0x40021000
 8003d18:	007a1200 	.word	0x007a1200
 8003d1c:	08009040 	.word	0x08009040
 8003d20:	08009050 	.word	0x08009050
 8003d24:	003d0900 	.word	0x003d0900

08003d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d2c:	4b02      	ldr	r3, [pc, #8]	; (8003d38 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr
 8003d38:	20000000 	.word	0x20000000

08003d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d40:	f7ff fff2 	bl	8003d28 <HAL_RCC_GetHCLKFreq>
 8003d44:	4602      	mov	r2, r0
 8003d46:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	0a1b      	lsrs	r3, r3, #8
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	4903      	ldr	r1, [pc, #12]	; (8003d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d52:	5ccb      	ldrb	r3, [r1, r3]
 8003d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	08009038 	.word	0x08009038

08003d64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d6c:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <RCC_Delay+0x34>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a0a      	ldr	r2, [pc, #40]	; (8003d9c <RCC_Delay+0x38>)
 8003d72:	fba2 2303 	umull	r2, r3, r2, r3
 8003d76:	0a5b      	lsrs	r3, r3, #9
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	fb02 f303 	mul.w	r3, r2, r3
 8003d7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d80:	bf00      	nop
  }
  while (Delay --);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	1e5a      	subs	r2, r3, #1
 8003d86:	60fa      	str	r2, [r7, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1f9      	bne.n	8003d80 <RCC_Delay+0x1c>
}
 8003d8c:	bf00      	nop
 8003d8e:	bf00      	nop
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr
 8003d98:	20000000 	.word	0x20000000
 8003d9c:	10624dd3 	.word	0x10624dd3

08003da0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	2300      	movs	r3, #0
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d07d      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dc0:	4b4f      	ldr	r3, [pc, #316]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10d      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dcc:	4b4c      	ldr	r3, [pc, #304]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dce:	69db      	ldr	r3, [r3, #28]
 8003dd0:	4a4b      	ldr	r2, [pc, #300]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd6:	61d3      	str	r3, [r2, #28]
 8003dd8:	4b49      	ldr	r3, [pc, #292]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de0:	60bb      	str	r3, [r7, #8]
 8003de2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003de4:	2301      	movs	r3, #1
 8003de6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de8:	4b46      	ldr	r3, [pc, #280]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d118      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003df4:	4b43      	ldr	r3, [pc, #268]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a42      	ldr	r2, [pc, #264]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dfe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e00:	f7fc fc18 	bl	8000634 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e06:	e008      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e08:	f7fc fc14 	bl	8000634 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b64      	cmp	r3, #100	; 0x64
 8003e14:	d901      	bls.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e06d      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1a:	4b3a      	ldr	r3, [pc, #232]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f0      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e26:	4b36      	ldr	r3, [pc, #216]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e2e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d02e      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d027      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e44:	4b2e      	ldr	r3, [pc, #184]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e4c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e4e:	4b2e      	ldr	r3, [pc, #184]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e50:	2201      	movs	r2, #1
 8003e52:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e54:	4b2c      	ldr	r3, [pc, #176]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e5a:	4a29      	ldr	r2, [pc, #164]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d014      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6a:	f7fc fbe3 	bl	8000634 <HAL_GetTick>
 8003e6e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e70:	e00a      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e72:	f7fc fbdf 	bl	8000634 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e036      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e88:	4b1d      	ldr	r3, [pc, #116]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0ee      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e94:	4b1a      	ldr	r3, [pc, #104]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	4917      	ldr	r1, [pc, #92]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ea6:	7dfb      	ldrb	r3, [r7, #23]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d105      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eac:	4b14      	ldr	r3, [pc, #80]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	4a13      	ldr	r2, [pc, #76]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d008      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ec4:	4b0e      	ldr	r3, [pc, #56]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	490b      	ldr	r1, [pc, #44]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0310 	and.w	r3, r3, #16
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d008      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ee2:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	4904      	ldr	r1, [pc, #16]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3718      	adds	r7, #24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	40021000 	.word	0x40021000
 8003f04:	40007000 	.word	0x40007000
 8003f08:	42420440 	.word	0x42420440

08003f0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003f0c:	b084      	sub	sp, #16
 8003f0e:	b480      	push	{r7}
 8003f10:	b083      	sub	sp, #12
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
 8003f16:	f107 0014 	add.w	r0, r7, #20
 8003f1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bc80      	pop	{r7}
 8003f28:	b004      	add	sp, #16
 8003f2a:	4770      	bx	lr

08003f2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003f3c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003f40:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bc80      	pop	{r7}
 8003f56:	4770      	bx	lr

08003f58 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003f60:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003f64:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	43db      	mvns	r3, r3
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	4013      	ands	r3, r2
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr

08003f8c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	460b      	mov	r3, r1
 8003f96:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr

08003fa4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
 8003fae:	f107 0014 	add.w	r0, r7, #20
 8003fb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bc80      	pop	{r7}
 8003fe0:	b004      	add	sp, #16
 8003fe2:	4770      	bx	lr

08003fe4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b09d      	sub	sp, #116	; 0x74
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	b29b      	uxth	r3, r3
 8004002:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	78db      	ldrb	r3, [r3, #3]
 8004012:	2b03      	cmp	r3, #3
 8004014:	d81f      	bhi.n	8004056 <USB_ActivateEndpoint+0x72>
 8004016:	a201      	add	r2, pc, #4	; (adr r2, 800401c <USB_ActivateEndpoint+0x38>)
 8004018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401c:	0800402d 	.word	0x0800402d
 8004020:	08004049 	.word	0x08004049
 8004024:	0800405f 	.word	0x0800405f
 8004028:	0800403b 	.word	0x0800403b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800402c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004030:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004034:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004038:	e012      	b.n	8004060 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800403a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800403e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004042:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004046:	e00b      	b.n	8004060 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004048:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800404c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004050:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004054:	e004      	b.n	8004060 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800405c:	e000      	b.n	8004060 <USB_ActivateEndpoint+0x7c>
      break;
 800405e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	441a      	add	r2, r3
 800406a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800406e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800407a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800407e:	b29b      	uxth	r3, r3
 8004080:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	b29b      	uxth	r3, r3
 8004090:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004098:	b29a      	uxth	r2, r3
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	b29b      	uxth	r3, r3
 80040a0:	4313      	orrs	r3, r2
 80040a2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	441a      	add	r2, r3
 80040b0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80040b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	7b1b      	ldrb	r3, [r3, #12]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f040 8178 	bne.w	80043c2 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	785b      	ldrb	r3, [r3, #1]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 8084 	beq.w	80041e4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	61bb      	str	r3, [r7, #24]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	461a      	mov	r2, r3
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	4413      	add	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	011a      	lsls	r2, r3, #4
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	4413      	add	r3, r2
 80040fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	88db      	ldrh	r3, [r3, #6]
 8004104:	085b      	lsrs	r3, r3, #1
 8004106:	b29b      	uxth	r3, r3
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	b29a      	uxth	r2, r3
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	827b      	strh	r3, [r7, #18]
 800411e:	8a7b      	ldrh	r3, [r7, #18]
 8004120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004124:	2b00      	cmp	r3, #0
 8004126:	d01b      	beq.n	8004160 <USB_ActivateEndpoint+0x17c>
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	b29b      	uxth	r3, r3
 8004136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800413a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800413e:	823b      	strh	r3, [r7, #16]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	441a      	add	r2, r3
 800414a:	8a3b      	ldrh	r3, [r7, #16]
 800414c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004158:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800415c:	b29b      	uxth	r3, r3
 800415e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	78db      	ldrb	r3, [r3, #3]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d020      	beq.n	80041aa <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	b29b      	uxth	r3, r3
 8004176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800417a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800417e:	81bb      	strh	r3, [r7, #12]
 8004180:	89bb      	ldrh	r3, [r7, #12]
 8004182:	f083 0320 	eor.w	r3, r3, #32
 8004186:	81bb      	strh	r3, [r7, #12]
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	441a      	add	r2, r3
 8004192:	89bb      	ldrh	r3, [r7, #12]
 8004194:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004198:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800419c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	8013      	strh	r3, [r2, #0]
 80041a8:	e2d5      	b.n	8004756 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041c0:	81fb      	strh	r3, [r7, #14]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	441a      	add	r2, r3
 80041cc:	89fb      	ldrh	r3, [r7, #14]
 80041ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041de:	b29b      	uxth	r3, r3
 80041e0:	8013      	strh	r3, [r2, #0]
 80041e2:	e2b8      	b.n	8004756 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	633b      	str	r3, [r7, #48]	; 0x30
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	461a      	mov	r2, r3
 80041f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f4:	4413      	add	r3, r2
 80041f6:	633b      	str	r3, [r7, #48]	; 0x30
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	011a      	lsls	r2, r3, #4
 80041fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004200:	4413      	add	r3, r2
 8004202:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004206:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	88db      	ldrh	r3, [r3, #6]
 800420c:	085b      	lsrs	r3, r3, #1
 800420e:	b29b      	uxth	r3, r3
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004216:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	62bb      	str	r3, [r7, #40]	; 0x28
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004222:	b29b      	uxth	r3, r3
 8004224:	461a      	mov	r2, r3
 8004226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004228:	4413      	add	r3, r2
 800422a:	62bb      	str	r3, [r7, #40]	; 0x28
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	011a      	lsls	r2, r3, #4
 8004232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004234:	4413      	add	r3, r2
 8004236:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800423a:	627b      	str	r3, [r7, #36]	; 0x24
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	b29b      	uxth	r3, r3
 8004242:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004246:	b29a      	uxth	r2, r3
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	801a      	strh	r2, [r3, #0]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	2b3e      	cmp	r3, #62	; 0x3e
 8004252:	d91d      	bls.n	8004290 <USB_ActivateEndpoint+0x2ac>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	095b      	lsrs	r3, r3, #5
 800425a:	66bb      	str	r3, [r7, #104]	; 0x68
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	f003 031f 	and.w	r3, r3, #31
 8004264:	2b00      	cmp	r3, #0
 8004266:	d102      	bne.n	800426e <USB_ActivateEndpoint+0x28a>
 8004268:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800426a:	3b01      	subs	r3, #1
 800426c:	66bb      	str	r3, [r7, #104]	; 0x68
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	b29a      	uxth	r2, r3
 8004274:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004276:	b29b      	uxth	r3, r3
 8004278:	029b      	lsls	r3, r3, #10
 800427a:	b29b      	uxth	r3, r3
 800427c:	4313      	orrs	r3, r2
 800427e:	b29b      	uxth	r3, r3
 8004280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004288:	b29a      	uxth	r2, r3
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	801a      	strh	r2, [r3, #0]
 800428e:	e026      	b.n	80042de <USB_ActivateEndpoint+0x2fa>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10a      	bne.n	80042ae <USB_ActivateEndpoint+0x2ca>
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	b29b      	uxth	r3, r3
 800429e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	801a      	strh	r2, [r3, #0]
 80042ac:	e017      	b.n	80042de <USB_ActivateEndpoint+0x2fa>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	085b      	lsrs	r3, r3, #1
 80042b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d002      	beq.n	80042c8 <USB_ActivateEndpoint+0x2e4>
 80042c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042c4:	3301      	adds	r3, #1
 80042c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80042c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	029b      	lsls	r3, r3, #10
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	4313      	orrs	r3, r2
 80042d8:	b29a      	uxth	r2, r3
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	881b      	ldrh	r3, [r3, #0]
 80042ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80042ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80042ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d01b      	beq.n	800432e <USB_ActivateEndpoint+0x34a>
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	b29b      	uxth	r3, r3
 8004304:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430c:	843b      	strh	r3, [r7, #32]
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	441a      	add	r2, r3
 8004318:	8c3b      	ldrh	r3, [r7, #32]
 800431a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800431e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004322:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800432a:	b29b      	uxth	r3, r3
 800432c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d124      	bne.n	8004380 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	b29b      	uxth	r3, r3
 8004344:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434c:	83bb      	strh	r3, [r7, #28]
 800434e:	8bbb      	ldrh	r3, [r7, #28]
 8004350:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004354:	83bb      	strh	r3, [r7, #28]
 8004356:	8bbb      	ldrh	r3, [r7, #28]
 8004358:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800435c:	83bb      	strh	r3, [r7, #28]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	441a      	add	r2, r3
 8004368:	8bbb      	ldrh	r3, [r7, #28]
 800436a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800436e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800437a:	b29b      	uxth	r3, r3
 800437c:	8013      	strh	r3, [r2, #0]
 800437e:	e1ea      	b.n	8004756 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	881b      	ldrh	r3, [r3, #0]
 800438c:	b29b      	uxth	r3, r3
 800438e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004396:	83fb      	strh	r3, [r7, #30]
 8004398:	8bfb      	ldrh	r3, [r7, #30]
 800439a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800439e:	83fb      	strh	r3, [r7, #30]
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	441a      	add	r2, r3
 80043aa:	8bfb      	ldrh	r3, [r7, #30]
 80043ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043bc:	b29b      	uxth	r3, r3
 80043be:	8013      	strh	r3, [r2, #0]
 80043c0:	e1c9      	b.n	8004756 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	78db      	ldrb	r3, [r3, #3]
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d11e      	bne.n	8004408 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	441a      	add	r2, r3
 80043ee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80043f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043fa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80043fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004402:	b29b      	uxth	r3, r3
 8004404:	8013      	strh	r3, [r2, #0]
 8004406:	e01d      	b.n	8004444 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	881b      	ldrh	r3, [r3, #0]
 8004414:	b29b      	uxth	r3, r3
 8004416:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800441a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800441e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	441a      	add	r2, r3
 800442c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004430:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004434:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800443c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004440:	b29b      	uxth	r3, r3
 8004442:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800444e:	b29b      	uxth	r3, r3
 8004450:	461a      	mov	r2, r3
 8004452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004454:	4413      	add	r3, r2
 8004456:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	011a      	lsls	r2, r3, #4
 800445e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004460:	4413      	add	r3, r2
 8004462:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004466:	65bb      	str	r3, [r7, #88]	; 0x58
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	891b      	ldrh	r3, [r3, #8]
 800446c:	085b      	lsrs	r3, r3, #1
 800446e:	b29b      	uxth	r3, r3
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	b29a      	uxth	r2, r3
 8004474:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004476:	801a      	strh	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	657b      	str	r3, [r7, #84]	; 0x54
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004482:	b29b      	uxth	r3, r3
 8004484:	461a      	mov	r2, r3
 8004486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004488:	4413      	add	r3, r2
 800448a:	657b      	str	r3, [r7, #84]	; 0x54
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	011a      	lsls	r2, r3, #4
 8004492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004494:	4413      	add	r3, r2
 8004496:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800449a:	653b      	str	r3, [r7, #80]	; 0x50
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	895b      	ldrh	r3, [r3, #10]
 80044a0:	085b      	lsrs	r3, r3, #1
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044aa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	785b      	ldrb	r3, [r3, #1]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f040 8093 	bne.w	80045dc <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80044c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80044ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d01b      	beq.n	800450a <USB_ActivateEndpoint+0x526>
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	b29b      	uxth	r3, r3
 80044e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	441a      	add	r2, r3
 80044f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80044f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004506:	b29b      	uxth	r3, r3
 8004508:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004518:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800451a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451e:	2b00      	cmp	r3, #0
 8004520:	d01b      	beq.n	800455a <USB_ActivateEndpoint+0x576>
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	b29b      	uxth	r3, r3
 8004530:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004538:	877b      	strh	r3, [r7, #58]	; 0x3a
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	441a      	add	r2, r3
 8004544:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004546:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800454a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800454e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004552:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004556:	b29b      	uxth	r3, r3
 8004558:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	b29b      	uxth	r3, r3
 8004568:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800456c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004570:	873b      	strh	r3, [r7, #56]	; 0x38
 8004572:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004574:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004578:	873b      	strh	r3, [r7, #56]	; 0x38
 800457a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800457c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004580:	873b      	strh	r3, [r7, #56]	; 0x38
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	441a      	add	r2, r3
 800458c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800458e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004592:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800459a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800459e:	b29b      	uxth	r3, r3
 80045a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4413      	add	r3, r2
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045b8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	441a      	add	r2, r3
 80045c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80045c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	8013      	strh	r3, [r2, #0]
 80045da:	e0bc      	b.n	8004756 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	881b      	ldrh	r3, [r3, #0]
 80045e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80045ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80045f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d01d      	beq.n	8004634 <USB_ActivateEndpoint+0x650>
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	881b      	ldrh	r3, [r3, #0]
 8004604:	b29b      	uxth	r3, r3
 8004606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800460a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	441a      	add	r2, r3
 800461c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004628:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800462c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004630:	b29b      	uxth	r3, r3
 8004632:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004644:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464c:	2b00      	cmp	r3, #0
 800464e:	d01d      	beq.n	800468c <USB_ActivateEndpoint+0x6a8>
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4413      	add	r3, r2
 800465a:	881b      	ldrh	r3, [r3, #0]
 800465c:	b29b      	uxth	r3, r3
 800465e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004666:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	441a      	add	r2, r3
 8004674:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004678:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800467c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004680:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004684:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004688:	b29b      	uxth	r3, r3
 800468a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	78db      	ldrb	r3, [r3, #3]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d024      	beq.n	80046de <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046aa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80046ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80046b2:	f083 0320 	eor.w	r3, r3, #32
 80046b6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	441a      	add	r2, r3
 80046c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80046c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d8:	b29b      	uxth	r3, r3
 80046da:	8013      	strh	r3, [r2, #0]
 80046dc:	e01d      	b.n	800471a <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4413      	add	r3, r2
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046f4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	441a      	add	r2, r3
 8004702:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004706:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800470a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800470e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004716:	b29b      	uxth	r3, r3
 8004718:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	b29b      	uxth	r3, r3
 8004728:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800472c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004730:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	441a      	add	r2, r3
 800473e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004742:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004746:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800474a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800474e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004752:	b29b      	uxth	r3, r3
 8004754:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004756:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800475a:	4618      	mov	r0, r3
 800475c:	3774      	adds	r7, #116	; 0x74
 800475e:	46bd      	mov	sp, r7
 8004760:	bc80      	pop	{r7}
 8004762:	4770      	bx	lr

08004764 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004764:	b480      	push	{r7}
 8004766:	b08d      	sub	sp, #52	; 0x34
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	7b1b      	ldrb	r3, [r3, #12]
 8004772:	2b00      	cmp	r3, #0
 8004774:	f040 808e 	bne.w	8004894 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	785b      	ldrb	r3, [r3, #1]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d044      	beq.n	800480a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	81bb      	strh	r3, [r7, #12]
 800478e:	89bb      	ldrh	r3, [r7, #12]
 8004790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004794:	2b00      	cmp	r3, #0
 8004796:	d01b      	beq.n	80047d0 <USB_DeactivateEndpoint+0x6c>
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ae:	817b      	strh	r3, [r7, #10]
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	441a      	add	r2, r3
 80047ba:	897b      	ldrh	r3, [r7, #10]
 80047bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	881b      	ldrh	r3, [r3, #0]
 80047dc:	b29b      	uxth	r3, r3
 80047de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047e6:	813b      	strh	r3, [r7, #8]
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	441a      	add	r2, r3
 80047f2:	893b      	ldrh	r3, [r7, #8]
 80047f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004804:	b29b      	uxth	r3, r3
 8004806:	8013      	strh	r3, [r2, #0]
 8004808:	e192      	b.n	8004b30 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	881b      	ldrh	r3, [r3, #0]
 8004816:	827b      	strh	r3, [r7, #18]
 8004818:	8a7b      	ldrh	r3, [r7, #18]
 800481a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d01b      	beq.n	800485a <USB_DeactivateEndpoint+0xf6>
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	b29b      	uxth	r3, r3
 8004830:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004838:	823b      	strh	r3, [r7, #16]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	441a      	add	r2, r3
 8004844:	8a3b      	ldrh	r3, [r7, #16]
 8004846:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800484a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800484e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004856:	b29b      	uxth	r3, r3
 8004858:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4413      	add	r3, r2
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	b29b      	uxth	r3, r3
 8004868:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800486c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004870:	81fb      	strh	r3, [r7, #14]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	441a      	add	r2, r3
 800487c:	89fb      	ldrh	r3, [r7, #14]
 800487e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800488a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800488e:	b29b      	uxth	r3, r3
 8004890:	8013      	strh	r3, [r2, #0]
 8004892:	e14d      	b.n	8004b30 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	785b      	ldrb	r3, [r3, #1]
 8004898:	2b00      	cmp	r3, #0
 800489a:	f040 80a5 	bne.w	80049e8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	843b      	strh	r3, [r7, #32]
 80048ac:	8c3b      	ldrh	r3, [r7, #32]
 80048ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d01b      	beq.n	80048ee <USB_DeactivateEndpoint+0x18a>
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	881b      	ldrh	r3, [r3, #0]
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048cc:	83fb      	strh	r3, [r7, #30]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	441a      	add	r2, r3
 80048d8:	8bfb      	ldrh	r3, [r7, #30]
 80048da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4413      	add	r3, r2
 80048f8:	881b      	ldrh	r3, [r3, #0]
 80048fa:	83bb      	strh	r3, [r7, #28]
 80048fc:	8bbb      	ldrh	r3, [r7, #28]
 80048fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004902:	2b00      	cmp	r3, #0
 8004904:	d01b      	beq.n	800493e <USB_DeactivateEndpoint+0x1da>
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	b29b      	uxth	r3, r3
 8004914:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491c:	837b      	strh	r3, [r7, #26]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	441a      	add	r2, r3
 8004928:	8b7b      	ldrh	r3, [r7, #26]
 800492a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800492e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004936:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800493a:	b29b      	uxth	r3, r3
 800493c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	881b      	ldrh	r3, [r3, #0]
 800494a:	b29b      	uxth	r3, r3
 800494c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004954:	833b      	strh	r3, [r7, #24]
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	441a      	add	r2, r3
 8004960:	8b3b      	ldrh	r3, [r7, #24]
 8004962:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004966:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800496a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800496e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004972:	b29b      	uxth	r3, r3
 8004974:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	881b      	ldrh	r3, [r3, #0]
 8004982:	b29b      	uxth	r3, r3
 8004984:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498c:	82fb      	strh	r3, [r7, #22]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	441a      	add	r2, r3
 8004998:	8afb      	ldrh	r3, [r7, #22]
 800499a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800499e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049c4:	82bb      	strh	r3, [r7, #20]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	441a      	add	r2, r3
 80049d0:	8abb      	ldrh	r3, [r7, #20]
 80049d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	8013      	strh	r3, [r2, #0]
 80049e6:	e0a3      	b.n	8004b30 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	881b      	ldrh	r3, [r3, #0]
 80049f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80049f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80049f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d01b      	beq.n	8004a38 <USB_DeactivateEndpoint+0x2d4>
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	881b      	ldrh	r3, [r3, #0]
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a16:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	441a      	add	r2, r3
 8004a22:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004a24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004a46:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d01b      	beq.n	8004a88 <USB_DeactivateEndpoint+0x324>
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	881b      	ldrh	r3, [r3, #0]
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a66:	853b      	strh	r3, [r7, #40]	; 0x28
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	441a      	add	r2, r3
 8004a72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	881b      	ldrh	r3, [r3, #0]
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	441a      	add	r2, r3
 8004aaa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004aac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ab4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ad6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	441a      	add	r2, r3
 8004ae2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	441a      	add	r2, r3
 8004b1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004b1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3734      	adds	r7, #52	; 0x34
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bc80      	pop	{r7}
 8004b3a:	4770      	bx	lr

08004b3c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b0c2      	sub	sp, #264	; 0x108
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b4a:	6018      	str	r0, [r3, #0]
 8004b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b54:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	785b      	ldrb	r3, [r3, #1]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	f040 86b7 	bne.w	80058d6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	699a      	ldr	r2, [r3, #24]
 8004b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d908      	bls.n	8004b96 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004b94:	e007      	b.n	8004ba6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004baa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	7b1b      	ldrb	r3, [r3, #12]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d13a      	bne.n	8004c2c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6959      	ldr	r1, [r3, #20]
 8004bc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	88da      	ldrh	r2, [r3, #6]
 8004bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004bd8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004bdc:	6800      	ldr	r0, [r0, #0]
 8004bde:	f001 fc9c 	bl	800651a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004be2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004be6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	613b      	str	r3, [r7, #16]
 8004bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	461a      	mov	r2, r3
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	4413      	add	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]
 8004c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	011a      	lsls	r2, r3, #4
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	4413      	add	r3, r2
 8004c18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c1c:	60fb      	str	r3, [r7, #12]
 8004c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	801a      	strh	r2, [r3, #0]
 8004c28:	f000 be1f 	b.w	800586a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	78db      	ldrb	r3, [r3, #3]
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	f040 8462 	bne.w	8005502 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6a1a      	ldr	r2, [r3, #32]
 8004c4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	f240 83df 	bls.w	800541a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	881b      	ldrh	r3, [r3, #0]
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c82:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004c86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	441a      	add	r2, r3
 8004ca0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004ca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cac:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004cb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6a1a      	ldr	r2, [r3, #32]
 8004cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cc8:	1ad2      	subs	r2, r2, r3
 8004cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004cd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ce4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	881b      	ldrh	r3, [r3, #0]
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 81c7 	beq.w	800508c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	633b      	str	r3, [r7, #48]	; 0x30
 8004d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	785b      	ldrb	r3, [r3, #1]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d177      	bne.n	8004e0a <USB_EPStartXfer+0x2ce>
 8004d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	461a      	mov	r2, r3
 8004d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3a:	4413      	add	r3, r2
 8004d3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	011a      	lsls	r2, r3, #4
 8004d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4e:	4413      	add	r3, r2
 8004d50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d54:	627b      	str	r3, [r7, #36]	; 0x24
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	801a      	strh	r2, [r3, #0]
 8004d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d6a:	2b3e      	cmp	r3, #62	; 0x3e
 8004d6c:	d921      	bls.n	8004db2 <USB_EPStartXfer+0x276>
 8004d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d72:	095b      	lsrs	r3, r3, #5
 8004d74:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d7c:	f003 031f 	and.w	r3, r3, #31
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d104      	bne.n	8004d8e <USB_EPStartXfer+0x252>
 8004d84:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	029b      	lsls	r3, r3, #10
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	801a      	strh	r2, [r3, #0]
 8004db0:	e050      	b.n	8004e54 <USB_EPStartXfer+0x318>
 8004db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10a      	bne.n	8004dd0 <USB_EPStartXfer+0x294>
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	801a      	strh	r2, [r3, #0]
 8004dce:	e041      	b.n	8004e54 <USB_EPStartXfer+0x318>
 8004dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dd4:	085b      	lsrs	r3, r3, #1
 8004dd6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d004      	beq.n	8004df0 <USB_EPStartXfer+0x2b4>
 8004de6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004dea:	3301      	adds	r3, #1
 8004dec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	881b      	ldrh	r3, [r3, #0]
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	029b      	lsls	r3, r3, #10
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	4313      	orrs	r3, r2
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	801a      	strh	r2, [r3, #0]
 8004e08:	e024      	b.n	8004e54 <USB_EPStartXfer+0x318>
 8004e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	785b      	ldrb	r3, [r3, #1]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d11c      	bne.n	8004e54 <USB_EPStartXfer+0x318>
 8004e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2e:	4413      	add	r3, r2
 8004e30:	633b      	str	r3, [r7, #48]	; 0x30
 8004e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	011a      	lsls	r2, r3, #4
 8004e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e42:	4413      	add	r3, r2
 8004e44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e52:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	895b      	ldrh	r3, [r3, #10]
 8004e60:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6959      	ldr	r1, [r3, #20]
 8004e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004e7a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004e7e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004e82:	6800      	ldr	r0, [r0, #0]
 8004e84:	f001 fb49 	bl	800651a <USB_WritePMA>
            ep->xfer_buff += len;
 8004e88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	695a      	ldr	r2, [r3, #20]
 8004e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e98:	441a      	add	r2, r3
 8004e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6a1a      	ldr	r2, [r3, #32]
 8004eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d90f      	bls.n	8004ee2 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6a1a      	ldr	r2, [r3, #32]
 8004ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ed2:	1ad2      	subs	r2, r2, r3
 8004ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ed8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	621a      	str	r2, [r3, #32]
 8004ee0:	e00e      	b.n	8004f00 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2200      	movs	r2, #0
 8004efe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	785b      	ldrb	r3, [r3, #1]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d177      	bne.n	8005000 <USB_EPStartXfer+0x4c4>
 8004f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	61bb      	str	r3, [r7, #24]
 8004f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	4413      	add	r3, r2
 8004f32:	61bb      	str	r3, [r7, #24]
 8004f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	011a      	lsls	r2, r3, #4
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	4413      	add	r3, r2
 8004f46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	881b      	ldrh	r3, [r3, #0]
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	801a      	strh	r2, [r3, #0]
 8004f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f60:	2b3e      	cmp	r3, #62	; 0x3e
 8004f62:	d921      	bls.n	8004fa8 <USB_EPStartXfer+0x46c>
 8004f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f68:	095b      	lsrs	r3, r3, #5
 8004f6a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f72:	f003 031f 	and.w	r3, r3, #31
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d104      	bne.n	8004f84 <USB_EPStartXfer+0x448>
 8004f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	029b      	lsls	r3, r3, #10
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	4313      	orrs	r3, r2
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	801a      	strh	r2, [r3, #0]
 8004fa6:	e056      	b.n	8005056 <USB_EPStartXfer+0x51a>
 8004fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10a      	bne.n	8004fc6 <USB_EPStartXfer+0x48a>
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	801a      	strh	r2, [r3, #0]
 8004fc4:	e047      	b.n	8005056 <USB_EPStartXfer+0x51a>
 8004fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fca:	085b      	lsrs	r3, r3, #1
 8004fcc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d004      	beq.n	8004fe6 <USB_EPStartXfer+0x4aa>
 8004fdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	029b      	lsls	r3, r3, #10
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	801a      	strh	r2, [r3, #0]
 8004ffe:	e02a      	b.n	8005056 <USB_EPStartXfer+0x51a>
 8005000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005004:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	785b      	ldrb	r3, [r3, #1]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d122      	bne.n	8005056 <USB_EPStartXfer+0x51a>
 8005010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005014:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	623b      	str	r3, [r7, #32]
 800501c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005020:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800502a:	b29b      	uxth	r3, r3
 800502c:	461a      	mov	r2, r3
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	4413      	add	r3, r2
 8005032:	623b      	str	r3, [r7, #32]
 8005034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005038:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	011a      	lsls	r2, r3, #4
 8005042:	6a3b      	ldr	r3, [r7, #32]
 8005044:	4413      	add	r3, r2
 8005046:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800504a:	61fb      	str	r3, [r7, #28]
 800504c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005050:	b29a      	uxth	r2, r3
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800505a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	891b      	ldrh	r3, [r3, #8]
 8005062:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800506a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6959      	ldr	r1, [r3, #20]
 8005072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005076:	b29b      	uxth	r3, r3
 8005078:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800507c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005080:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005084:	6800      	ldr	r0, [r0, #0]
 8005086:	f001 fa48 	bl	800651a <USB_WritePMA>
 800508a:	e3ee      	b.n	800586a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800508c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	785b      	ldrb	r3, [r3, #1]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d177      	bne.n	800518c <USB_EPStartXfer+0x650>
 800509c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80050a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	461a      	mov	r2, r3
 80050ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050bc:	4413      	add	r3, r2
 80050be:	64bb      	str	r3, [r7, #72]	; 0x48
 80050c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	011a      	lsls	r2, r3, #4
 80050ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050d0:	4413      	add	r3, r2
 80050d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050d6:	647b      	str	r3, [r7, #68]	; 0x44
 80050d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050da:	881b      	ldrh	r3, [r3, #0]
 80050dc:	b29b      	uxth	r3, r3
 80050de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050e6:	801a      	strh	r2, [r3, #0]
 80050e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050ec:	2b3e      	cmp	r3, #62	; 0x3e
 80050ee:	d921      	bls.n	8005134 <USB_EPStartXfer+0x5f8>
 80050f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050f4:	095b      	lsrs	r3, r3, #5
 80050f6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80050fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050fe:	f003 031f 	and.w	r3, r3, #31
 8005102:	2b00      	cmp	r3, #0
 8005104:	d104      	bne.n	8005110 <USB_EPStartXfer+0x5d4>
 8005106:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800510a:	3b01      	subs	r3, #1
 800510c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005112:	881b      	ldrh	r3, [r3, #0]
 8005114:	b29a      	uxth	r2, r3
 8005116:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800511a:	b29b      	uxth	r3, r3
 800511c:	029b      	lsls	r3, r3, #10
 800511e:	b29b      	uxth	r3, r3
 8005120:	4313      	orrs	r3, r2
 8005122:	b29b      	uxth	r3, r3
 8005124:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005128:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800512c:	b29a      	uxth	r2, r3
 800512e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005130:	801a      	strh	r2, [r3, #0]
 8005132:	e056      	b.n	80051e2 <USB_EPStartXfer+0x6a6>
 8005134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10a      	bne.n	8005152 <USB_EPStartXfer+0x616>
 800513c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	b29b      	uxth	r3, r3
 8005142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800514a:	b29a      	uxth	r2, r3
 800514c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800514e:	801a      	strh	r2, [r3, #0]
 8005150:	e047      	b.n	80051e2 <USB_EPStartXfer+0x6a6>
 8005152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005156:	085b      	lsrs	r3, r3, #1
 8005158:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800515c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b00      	cmp	r3, #0
 8005166:	d004      	beq.n	8005172 <USB_EPStartXfer+0x636>
 8005168:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800516c:	3301      	adds	r3, #1
 800516e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	b29a      	uxth	r2, r3
 8005178:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800517c:	b29b      	uxth	r3, r3
 800517e:	029b      	lsls	r3, r3, #10
 8005180:	b29b      	uxth	r3, r3
 8005182:	4313      	orrs	r3, r2
 8005184:	b29a      	uxth	r2, r3
 8005186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005188:	801a      	strh	r2, [r3, #0]
 800518a:	e02a      	b.n	80051e2 <USB_EPStartXfer+0x6a6>
 800518c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005190:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	785b      	ldrb	r3, [r3, #1]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d122      	bne.n	80051e2 <USB_EPStartXfer+0x6a6>
 800519c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	653b      	str	r3, [r7, #80]	; 0x50
 80051a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	461a      	mov	r2, r3
 80051ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051bc:	4413      	add	r3, r2
 80051be:	653b      	str	r3, [r7, #80]	; 0x50
 80051c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	011a      	lsls	r2, r3, #4
 80051ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051d0:	4413      	add	r3, r2
 80051d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051dc:	b29a      	uxth	r2, r3
 80051de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80051e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	891b      	ldrh	r3, [r3, #8]
 80051ee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6959      	ldr	r1, [r3, #20]
 80051fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005202:	b29b      	uxth	r3, r3
 8005204:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005208:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800520c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005210:	6800      	ldr	r0, [r0, #0]
 8005212:	f001 f982 	bl	800651a <USB_WritePMA>
            ep->xfer_buff += len;
 8005216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800521a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	695a      	ldr	r2, [r3, #20]
 8005222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005226:	441a      	add	r2, r3
 8005228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800522c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	6a1a      	ldr	r2, [r3, #32]
 8005240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	429a      	cmp	r2, r3
 800524e:	d90f      	bls.n	8005270 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005254:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6a1a      	ldr	r2, [r3, #32]
 800525c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005260:	1ad2      	subs	r2, r2, r3
 8005262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005266:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	621a      	str	r2, [r3, #32]
 800526e:	e00e      	b.n	800528e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005274:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005284:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2200      	movs	r2, #0
 800528c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800528e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005292:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	643b      	str	r3, [r7, #64]	; 0x40
 800529a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800529e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	785b      	ldrb	r3, [r3, #1]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d177      	bne.n	800539a <USB_EPStartXfer+0x85e>
 80052aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80052b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	461a      	mov	r2, r3
 80052c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ca:	4413      	add	r3, r2
 80052cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80052ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	011a      	lsls	r2, r3, #4
 80052dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052de:	4413      	add	r3, r2
 80052e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052e4:	637b      	str	r3, [r7, #52]	; 0x34
 80052e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e8:	881b      	ldrh	r3, [r3, #0]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f4:	801a      	strh	r2, [r3, #0]
 80052f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052fa:	2b3e      	cmp	r3, #62	; 0x3e
 80052fc:	d921      	bls.n	8005342 <USB_EPStartXfer+0x806>
 80052fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005302:	095b      	lsrs	r3, r3, #5
 8005304:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800530c:	f003 031f 	and.w	r3, r3, #31
 8005310:	2b00      	cmp	r3, #0
 8005312:	d104      	bne.n	800531e <USB_EPStartXfer+0x7e2>
 8005314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005318:	3b01      	subs	r3, #1
 800531a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800531e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	b29a      	uxth	r2, r3
 8005324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005328:	b29b      	uxth	r3, r3
 800532a:	029b      	lsls	r3, r3, #10
 800532c:	b29b      	uxth	r3, r3
 800532e:	4313      	orrs	r3, r2
 8005330:	b29b      	uxth	r3, r3
 8005332:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005336:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800533a:	b29a      	uxth	r2, r3
 800533c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800533e:	801a      	strh	r2, [r3, #0]
 8005340:	e050      	b.n	80053e4 <USB_EPStartXfer+0x8a8>
 8005342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10a      	bne.n	8005360 <USB_EPStartXfer+0x824>
 800534a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800534c:	881b      	ldrh	r3, [r3, #0]
 800534e:	b29b      	uxth	r3, r3
 8005350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005358:	b29a      	uxth	r2, r3
 800535a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800535c:	801a      	strh	r2, [r3, #0]
 800535e:	e041      	b.n	80053e4 <USB_EPStartXfer+0x8a8>
 8005360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005364:	085b      	lsrs	r3, r3, #1
 8005366:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800536a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d004      	beq.n	8005380 <USB_EPStartXfer+0x844>
 8005376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800537a:	3301      	adds	r3, #1
 800537c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	b29a      	uxth	r2, r3
 8005386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800538a:	b29b      	uxth	r3, r3
 800538c:	029b      	lsls	r3, r3, #10
 800538e:	b29b      	uxth	r3, r3
 8005390:	4313      	orrs	r3, r2
 8005392:	b29a      	uxth	r2, r3
 8005394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005396:	801a      	strh	r2, [r3, #0]
 8005398:	e024      	b.n	80053e4 <USB_EPStartXfer+0x8a8>
 800539a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800539e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	785b      	ldrb	r3, [r3, #1]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d11c      	bne.n	80053e4 <USB_EPStartXfer+0x8a8>
 80053aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	461a      	mov	r2, r3
 80053bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053be:	4413      	add	r3, r2
 80053c0:	643b      	str	r3, [r7, #64]	; 0x40
 80053c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	011a      	lsls	r2, r3, #4
 80053d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053d2:	4413      	add	r3, r2
 80053d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053de:	b29a      	uxth	r2, r3
 80053e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80053e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	895b      	ldrh	r3, [r3, #10]
 80053f0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	6959      	ldr	r1, [r3, #20]
 8005400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005404:	b29b      	uxth	r3, r3
 8005406:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800540a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800540e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005412:	6800      	ldr	r0, [r0, #0]
 8005414:	f001 f881 	bl	800651a <USB_WritePMA>
 8005418:	e227      	b.n	800586a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800541a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800541e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800542a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800542e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	b29b      	uxth	r3, r3
 8005448:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800544c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005450:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005458:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	441a      	add	r2, r3
 800546e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005472:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005476:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800547a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800547e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005482:	b29b      	uxth	r3, r3
 8005484:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800548a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005496:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	461a      	mov	r2, r3
 80054a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054a6:	4413      	add	r3, r2
 80054a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	011a      	lsls	r2, r3, #4
 80054b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054ba:	4413      	add	r3, r2
 80054bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80054c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80054cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	891b      	ldrh	r3, [r3, #8]
 80054d8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6959      	ldr	r1, [r3, #20]
 80054e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80054f2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80054f6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80054fa:	6800      	ldr	r0, [r0, #0]
 80054fc:	f001 f80d 	bl	800651a <USB_WritePMA>
 8005500:	e1b3      	b.n	800586a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005506:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6a1a      	ldr	r2, [r3, #32]
 800550e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005512:	1ad2      	subs	r2, r2, r3
 8005514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005524:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800552e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	881b      	ldrh	r3, [r3, #0]
 800553c:	b29b      	uxth	r3, r3
 800553e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 80c6 	beq.w	80056d4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800554c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	673b      	str	r3, [r7, #112]	; 0x70
 8005554:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005558:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	785b      	ldrb	r3, [r3, #1]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d177      	bne.n	8005654 <USB_EPStartXfer+0xb18>
 8005564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005568:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005574:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800557e:	b29b      	uxth	r3, r3
 8005580:	461a      	mov	r2, r3
 8005582:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005584:	4413      	add	r3, r2
 8005586:	66bb      	str	r3, [r7, #104]	; 0x68
 8005588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800558c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	011a      	lsls	r2, r3, #4
 8005596:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005598:	4413      	add	r3, r2
 800559a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800559e:	667b      	str	r3, [r7, #100]	; 0x64
 80055a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055ae:	801a      	strh	r2, [r3, #0]
 80055b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055b4:	2b3e      	cmp	r3, #62	; 0x3e
 80055b6:	d921      	bls.n	80055fc <USB_EPStartXfer+0xac0>
 80055b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055bc:	095b      	lsrs	r3, r3, #5
 80055be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80055c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055c6:	f003 031f 	and.w	r3, r3, #31
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d104      	bne.n	80055d8 <USB_EPStartXfer+0xa9c>
 80055ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80055d2:	3b01      	subs	r3, #1
 80055d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80055d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	b29a      	uxth	r2, r3
 80055de:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	029b      	lsls	r3, r3, #10
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	4313      	orrs	r3, r2
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055f8:	801a      	strh	r2, [r3, #0]
 80055fa:	e050      	b.n	800569e <USB_EPStartXfer+0xb62>
 80055fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10a      	bne.n	800561a <USB_EPStartXfer+0xade>
 8005604:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005606:	881b      	ldrh	r3, [r3, #0]
 8005608:	b29b      	uxth	r3, r3
 800560a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800560e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005612:	b29a      	uxth	r2, r3
 8005614:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005616:	801a      	strh	r2, [r3, #0]
 8005618:	e041      	b.n	800569e <USB_EPStartXfer+0xb62>
 800561a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800561e:	085b      	lsrs	r3, r3, #1
 8005620:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	d004      	beq.n	800563a <USB_EPStartXfer+0xafe>
 8005630:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005634:	3301      	adds	r3, #1
 8005636:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800563a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800563c:	881b      	ldrh	r3, [r3, #0]
 800563e:	b29a      	uxth	r2, r3
 8005640:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005644:	b29b      	uxth	r3, r3
 8005646:	029b      	lsls	r3, r3, #10
 8005648:	b29b      	uxth	r3, r3
 800564a:	4313      	orrs	r3, r2
 800564c:	b29a      	uxth	r2, r3
 800564e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005650:	801a      	strh	r2, [r3, #0]
 8005652:	e024      	b.n	800569e <USB_EPStartXfer+0xb62>
 8005654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005658:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	785b      	ldrb	r3, [r3, #1]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d11c      	bne.n	800569e <USB_EPStartXfer+0xb62>
 8005664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005668:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005672:	b29b      	uxth	r3, r3
 8005674:	461a      	mov	r2, r3
 8005676:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005678:	4413      	add	r3, r2
 800567a:	673b      	str	r3, [r7, #112]	; 0x70
 800567c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005680:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	011a      	lsls	r2, r3, #4
 800568a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800568c:	4413      	add	r3, r2
 800568e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005692:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005698:	b29a      	uxth	r2, r3
 800569a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800569c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800569e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	895b      	ldrh	r3, [r3, #10]
 80056aa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6959      	ldr	r1, [r3, #20]
 80056ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056be:	b29b      	uxth	r3, r3
 80056c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80056c4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80056c8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80056cc:	6800      	ldr	r0, [r0, #0]
 80056ce:	f000 ff24 	bl	800651a <USB_WritePMA>
 80056d2:	e0ca      	b.n	800586a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80056d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	785b      	ldrb	r3, [r3, #1]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d177      	bne.n	80057d4 <USB_EPStartXfer+0xc98>
 80056e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80056f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056fe:	b29b      	uxth	r3, r3
 8005700:	461a      	mov	r2, r3
 8005702:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005704:	4413      	add	r3, r2
 8005706:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800570c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	011a      	lsls	r2, r3, #4
 8005716:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005718:	4413      	add	r3, r2
 800571a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800571e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005720:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005722:	881b      	ldrh	r3, [r3, #0]
 8005724:	b29b      	uxth	r3, r3
 8005726:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800572a:	b29a      	uxth	r2, r3
 800572c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800572e:	801a      	strh	r2, [r3, #0]
 8005730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005734:	2b3e      	cmp	r3, #62	; 0x3e
 8005736:	d921      	bls.n	800577c <USB_EPStartXfer+0xc40>
 8005738:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800573c:	095b      	lsrs	r3, r3, #5
 800573e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005746:	f003 031f 	and.w	r3, r3, #31
 800574a:	2b00      	cmp	r3, #0
 800574c:	d104      	bne.n	8005758 <USB_EPStartXfer+0xc1c>
 800574e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005752:	3b01      	subs	r3, #1
 8005754:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005758:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800575a:	881b      	ldrh	r3, [r3, #0]
 800575c:	b29a      	uxth	r2, r3
 800575e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005762:	b29b      	uxth	r3, r3
 8005764:	029b      	lsls	r3, r3, #10
 8005766:	b29b      	uxth	r3, r3
 8005768:	4313      	orrs	r3, r2
 800576a:	b29b      	uxth	r3, r3
 800576c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005774:	b29a      	uxth	r2, r3
 8005776:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005778:	801a      	strh	r2, [r3, #0]
 800577a:	e05c      	b.n	8005836 <USB_EPStartXfer+0xcfa>
 800577c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10a      	bne.n	800579a <USB_EPStartXfer+0xc5e>
 8005784:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005786:	881b      	ldrh	r3, [r3, #0]
 8005788:	b29b      	uxth	r3, r3
 800578a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800578e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005792:	b29a      	uxth	r2, r3
 8005794:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005796:	801a      	strh	r2, [r3, #0]
 8005798:	e04d      	b.n	8005836 <USB_EPStartXfer+0xcfa>
 800579a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800579e:	085b      	lsrs	r3, r3, #1
 80057a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80057a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d004      	beq.n	80057ba <USB_EPStartXfer+0xc7e>
 80057b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80057b4:	3301      	adds	r3, #1
 80057b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80057ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057bc:	881b      	ldrh	r3, [r3, #0]
 80057be:	b29a      	uxth	r2, r3
 80057c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	029b      	lsls	r3, r3, #10
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	4313      	orrs	r3, r2
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057d0:	801a      	strh	r2, [r3, #0]
 80057d2:	e030      	b.n	8005836 <USB_EPStartXfer+0xcfa>
 80057d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	785b      	ldrb	r3, [r3, #1]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d128      	bne.n	8005836 <USB_EPStartXfer+0xcfa>
 80057e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80057f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005800:	b29b      	uxth	r3, r3
 8005802:	461a      	mov	r2, r3
 8005804:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005808:	4413      	add	r3, r2
 800580a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800580e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005812:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	011a      	lsls	r2, r3, #4
 800581c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005820:	4413      	add	r3, r2
 8005822:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005826:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800582a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800582e:	b29a      	uxth	r2, r3
 8005830:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005834:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005836:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800583a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	891b      	ldrh	r3, [r3, #8]
 8005842:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800584a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6959      	ldr	r1, [r3, #20]
 8005852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005856:	b29b      	uxth	r3, r3
 8005858:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800585c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005860:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005864:	6800      	ldr	r0, [r0, #0]
 8005866:	f000 fe58 	bl	800651a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800586a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800586e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4413      	add	r3, r2
 8005884:	881b      	ldrh	r3, [r3, #0]
 8005886:	b29b      	uxth	r3, r3
 8005888:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800588c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005890:	817b      	strh	r3, [r7, #10]
 8005892:	897b      	ldrh	r3, [r7, #10]
 8005894:	f083 0310 	eor.w	r3, r3, #16
 8005898:	817b      	strh	r3, [r7, #10]
 800589a:	897b      	ldrh	r3, [r7, #10]
 800589c:	f083 0320 	eor.w	r3, r3, #32
 80058a0:	817b      	strh	r3, [r7, #10]
 80058a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	441a      	add	r2, r3
 80058bc:	897b      	ldrh	r3, [r7, #10]
 80058be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	8013      	strh	r3, [r2, #0]
 80058d2:	f000 bcde 	b.w	8006292 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80058d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	7b1b      	ldrb	r3, [r3, #12]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f040 80bb 	bne.w	8005a5e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80058e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	699a      	ldr	r2, [r3, #24]
 80058f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	429a      	cmp	r2, r3
 8005902:	d917      	bls.n	8005934 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005918:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	699a      	ldr	r2, [r3, #24]
 8005920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005924:	1ad2      	subs	r2, r2, r3
 8005926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800592a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	619a      	str	r2, [r3, #24]
 8005932:	e00e      	b.n	8005952 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2200      	movs	r2, #0
 8005950:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005956:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005964:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800596e:	b29b      	uxth	r3, r3
 8005970:	461a      	mov	r2, r3
 8005972:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005976:	4413      	add	r3, r2
 8005978:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800597c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	011a      	lsls	r2, r3, #4
 800598a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800598e:	4413      	add	r3, r2
 8005990:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005994:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005998:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800599c:	881b      	ldrh	r3, [r3, #0]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059aa:	801a      	strh	r2, [r3, #0]
 80059ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059b0:	2b3e      	cmp	r3, #62	; 0x3e
 80059b2:	d924      	bls.n	80059fe <USB_EPStartXfer+0xec2>
 80059b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059b8:	095b      	lsrs	r3, r3, #5
 80059ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80059be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059c2:	f003 031f 	and.w	r3, r3, #31
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d104      	bne.n	80059d4 <USB_EPStartXfer+0xe98>
 80059ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059ce:	3b01      	subs	r3, #1
 80059d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80059d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	b29a      	uxth	r2, r3
 80059dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	029b      	lsls	r3, r3, #10
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	4313      	orrs	r3, r2
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059f8:	801a      	strh	r2, [r3, #0]
 80059fa:	f000 bc10 	b.w	800621e <USB_EPStartXfer+0x16e2>
 80059fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10c      	bne.n	8005a20 <USB_EPStartXfer+0xee4>
 8005a06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a1c:	801a      	strh	r2, [r3, #0]
 8005a1e:	e3fe      	b.n	800621e <USB_EPStartXfer+0x16e2>
 8005a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a24:	085b      	lsrs	r3, r3, #1
 8005a26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d004      	beq.n	8005a40 <USB_EPStartXfer+0xf04>
 8005a36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	029b      	lsls	r3, r3, #10
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	4313      	orrs	r3, r2
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a5a:	801a      	strh	r2, [r3, #0]
 8005a5c:	e3df      	b.n	800621e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	78db      	ldrb	r3, [r3, #3]
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	f040 8218 	bne.w	8005ea0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	785b      	ldrb	r3, [r3, #1]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f040 809d 	bne.w	8005bbc <USB_EPStartXfer+0x1080>
 8005a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	011a      	lsls	r2, r3, #4
 8005aba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005abe:	4413      	add	r3, r2
 8005ac0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ac4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ac8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005acc:	881b      	ldrh	r3, [r3, #0]
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ada:	801a      	strh	r2, [r3, #0]
 8005adc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ae0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	2b3e      	cmp	r3, #62	; 0x3e
 8005aea:	d92b      	bls.n	8005b44 <USB_EPStartXfer+0x1008>
 8005aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	095b      	lsrs	r3, r3, #5
 8005afa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	f003 031f 	and.w	r3, r3, #31
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d104      	bne.n	8005b1c <USB_EPStartXfer+0xfe0>
 8005b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b16:	3b01      	subs	r3, #1
 8005b18:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	029b      	lsls	r3, r3, #10
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b40:	801a      	strh	r2, [r3, #0]
 8005b42:	e070      	b.n	8005c26 <USB_EPStartXfer+0x10ea>
 8005b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10c      	bne.n	8005b6e <USB_EPStartXfer+0x1032>
 8005b54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b6a:	801a      	strh	r2, [r3, #0]
 8005b6c:	e05b      	b.n	8005c26 <USB_EPStartXfer+0x10ea>
 8005b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	085b      	lsrs	r3, r3, #1
 8005b7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d004      	beq.n	8005b9e <USB_EPStartXfer+0x1062>
 8005b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b98:	3301      	adds	r3, #1
 8005b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	029b      	lsls	r3, r3, #10
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005bb8:	801a      	strh	r2, [r3, #0]
 8005bba:	e034      	b.n	8005c26 <USB_EPStartXfer+0x10ea>
 8005bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	785b      	ldrb	r3, [r3, #1]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d12c      	bne.n	8005c26 <USB_EPStartXfer+0x10ea>
 8005bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	461a      	mov	r2, r3
 8005bec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	011a      	lsls	r2, r3, #4
 8005c04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005c08:	4413      	add	r3, r2
 8005c0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005c24:	801a      	strh	r2, [r3, #0]
 8005c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	785b      	ldrb	r3, [r3, #1]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f040 809d 	bne.w	8005d80 <USB_EPStartXfer+0x1244>
 8005c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	461a      	mov	r2, r3
 8005c66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	011a      	lsls	r2, r3, #4
 8005c7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c82:	4413      	add	r3, r2
 8005c84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005c8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c9e:	801a      	strh	r2, [r3, #0]
 8005ca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	2b3e      	cmp	r3, #62	; 0x3e
 8005cae:	d92b      	bls.n	8005d08 <USB_EPStartXfer+0x11cc>
 8005cb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	095b      	lsrs	r3, r3, #5
 8005cbe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	f003 031f 	and.w	r3, r3, #31
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d104      	bne.n	8005ce0 <USB_EPStartXfer+0x11a4>
 8005cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ce0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	029b      	lsls	r3, r3, #10
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d04:	801a      	strh	r2, [r3, #0]
 8005d06:	e069      	b.n	8005ddc <USB_EPStartXfer+0x12a0>
 8005d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10c      	bne.n	8005d32 <USB_EPStartXfer+0x11f6>
 8005d18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d1c:	881b      	ldrh	r3, [r3, #0]
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d2e:	801a      	strh	r2, [r3, #0]
 8005d30:	e054      	b.n	8005ddc <USB_EPStartXfer+0x12a0>
 8005d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	085b      	lsrs	r3, r3, #1
 8005d40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d004      	beq.n	8005d62 <USB_EPStartXfer+0x1226>
 8005d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d66:	881b      	ldrh	r3, [r3, #0]
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	029b      	lsls	r3, r3, #10
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	4313      	orrs	r3, r2
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d7c:	801a      	strh	r2, [r3, #0]
 8005d7e:	e02d      	b.n	8005ddc <USB_EPStartXfer+0x12a0>
 8005d80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	785b      	ldrb	r3, [r3, #1]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d125      	bne.n	8005ddc <USB_EPStartXfer+0x12a0>
 8005d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	461a      	mov	r2, r3
 8005da2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005da6:	4413      	add	r3, r2
 8005da8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	011a      	lsls	r2, r3, #4
 8005dba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005dc4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005dc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005dda:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	69db      	ldr	r3, [r3, #28]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 8218 	beq.w	800621e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4413      	add	r3, r2
 8005e08:	881b      	ldrh	r3, [r3, #0]
 8005e0a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e0e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d005      	beq.n	8005e26 <USB_EPStartXfer+0x12ea>
 8005e1a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10d      	bne.n	8005e42 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005e26:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f040 81f5 	bne.w	800621e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005e34:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f040 81ee 	bne.w	800621e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e68:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8005e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	441a      	add	r2, r3
 8005e86:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	8013      	strh	r3, [r2, #0]
 8005e9e:	e1be      	b.n	800621e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005ea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ea4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	78db      	ldrb	r3, [r3, #3]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	f040 81b4 	bne.w	800621a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	699a      	ldr	r2, [r3, #24]
 8005ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d917      	bls.n	8005efe <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8005ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	699a      	ldr	r2, [r3, #24]
 8005eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eee:	1ad2      	subs	r2, r2, r3
 8005ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	619a      	str	r2, [r3, #24]
 8005efc:	e00e      	b.n	8005f1c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8005f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	785b      	ldrb	r3, [r3, #1]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f040 8085 	bne.w	8006038 <USB_EPStartXfer+0x14fc>
 8005f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f52:	4413      	add	r3, r2
 8005f54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	011a      	lsls	r2, r3, #4
 8005f66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f78:	881b      	ldrh	r3, [r3, #0]
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f86:	801a      	strh	r2, [r3, #0]
 8005f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f8c:	2b3e      	cmp	r3, #62	; 0x3e
 8005f8e:	d923      	bls.n	8005fd8 <USB_EPStartXfer+0x149c>
 8005f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f94:	095b      	lsrs	r3, r3, #5
 8005f96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f9e:	f003 031f 	and.w	r3, r3, #31
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d104      	bne.n	8005fb0 <USB_EPStartXfer+0x1474>
 8005fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005faa:	3b01      	subs	r3, #1
 8005fac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005fb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	029b      	lsls	r3, r3, #10
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fd4:	801a      	strh	r2, [r3, #0]
 8005fd6:	e060      	b.n	800609a <USB_EPStartXfer+0x155e>
 8005fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10c      	bne.n	8005ffa <USB_EPStartXfer+0x14be>
 8005fe0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ff6:	801a      	strh	r2, [r3, #0]
 8005ff8:	e04f      	b.n	800609a <USB_EPStartXfer+0x155e>
 8005ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ffe:	085b      	lsrs	r3, r3, #1
 8006000:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b00      	cmp	r3, #0
 800600e:	d004      	beq.n	800601a <USB_EPStartXfer+0x14de>
 8006010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006014:	3301      	adds	r3, #1
 8006016:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800601a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	b29a      	uxth	r2, r3
 8006022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006026:	b29b      	uxth	r3, r3
 8006028:	029b      	lsls	r3, r3, #10
 800602a:	b29b      	uxth	r3, r3
 800602c:	4313      	orrs	r3, r2
 800602e:	b29a      	uxth	r2, r3
 8006030:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006034:	801a      	strh	r2, [r3, #0]
 8006036:	e030      	b.n	800609a <USB_EPStartXfer+0x155e>
 8006038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800603c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	785b      	ldrb	r3, [r3, #1]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d128      	bne.n	800609a <USB_EPStartXfer+0x155e>
 8006048:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800604c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800605a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006064:	b29b      	uxth	r3, r3
 8006066:	461a      	mov	r2, r3
 8006068:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800606c:	4413      	add	r3, r2
 800606e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006076:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	011a      	lsls	r2, r3, #4
 8006080:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006084:	4413      	add	r3, r2
 8006086:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800608a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800608e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006092:	b29a      	uxth	r2, r3
 8006094:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006098:	801a      	strh	r2, [r3, #0]
 800609a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800609e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	785b      	ldrb	r3, [r3, #1]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f040 8085 	bne.w	80061c4 <USB_EPStartXfer+0x1688>
 80060ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80060c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	461a      	mov	r2, r3
 80060da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80060de:	4413      	add	r3, r2
 80060e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80060e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	011a      	lsls	r2, r3, #4
 80060f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80060f6:	4413      	add	r3, r2
 80060f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006100:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	b29b      	uxth	r3, r3
 8006108:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800610c:	b29a      	uxth	r2, r3
 800610e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006112:	801a      	strh	r2, [r3, #0]
 8006114:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006118:	2b3e      	cmp	r3, #62	; 0x3e
 800611a:	d923      	bls.n	8006164 <USB_EPStartXfer+0x1628>
 800611c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006120:	095b      	lsrs	r3, r3, #5
 8006122:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800612a:	f003 031f 	and.w	r3, r3, #31
 800612e:	2b00      	cmp	r3, #0
 8006130:	d104      	bne.n	800613c <USB_EPStartXfer+0x1600>
 8006132:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006136:	3b01      	subs	r3, #1
 8006138:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800613c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006140:	881b      	ldrh	r3, [r3, #0]
 8006142:	b29a      	uxth	r2, r3
 8006144:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006148:	b29b      	uxth	r3, r3
 800614a:	029b      	lsls	r3, r3, #10
 800614c:	b29b      	uxth	r3, r3
 800614e:	4313      	orrs	r3, r2
 8006150:	b29b      	uxth	r3, r3
 8006152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800615a:	b29a      	uxth	r2, r3
 800615c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006160:	801a      	strh	r2, [r3, #0]
 8006162:	e05c      	b.n	800621e <USB_EPStartXfer+0x16e2>
 8006164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10c      	bne.n	8006186 <USB_EPStartXfer+0x164a>
 800616c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	b29b      	uxth	r3, r3
 8006174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800617c:	b29a      	uxth	r2, r3
 800617e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006182:	801a      	strh	r2, [r3, #0]
 8006184:	e04b      	b.n	800621e <USB_EPStartXfer+0x16e2>
 8006186:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800618a:	085b      	lsrs	r3, r3, #1
 800618c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006190:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	2b00      	cmp	r3, #0
 800619a:	d004      	beq.n	80061a6 <USB_EPStartXfer+0x166a>
 800619c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061a0:	3301      	adds	r3, #1
 80061a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80061a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061aa:	881b      	ldrh	r3, [r3, #0]
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	029b      	lsls	r3, r3, #10
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	4313      	orrs	r3, r2
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061c0:	801a      	strh	r2, [r3, #0]
 80061c2:	e02c      	b.n	800621e <USB_EPStartXfer+0x16e2>
 80061c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	785b      	ldrb	r3, [r3, #1]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d124      	bne.n	800621e <USB_EPStartXfer+0x16e2>
 80061d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	461a      	mov	r2, r3
 80061e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80061ea:	4413      	add	r3, r2
 80061ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80061f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	011a      	lsls	r2, r3, #4
 80061fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006202:	4413      	add	r3, r2
 8006204:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006208:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800620c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006210:	b29a      	uxth	r2, r3
 8006212:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006216:	801a      	strh	r2, [r3, #0]
 8006218:	e001      	b.n	800621e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e03a      	b.n	8006294 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800621e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006222:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800622c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	881b      	ldrh	r3, [r3, #0]
 800623a:	b29b      	uxth	r3, r3
 800623c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006244:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006248:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800624c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006250:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006254:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006258:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800625c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006264:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800626e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	441a      	add	r2, r3
 800627a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800627e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006282:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800628a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800628e:	b29b      	uxth	r3, r3
 8006290:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800629e:	b480      	push	{r7}
 80062a0:	b085      	sub	sp, #20
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
 80062a6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	785b      	ldrb	r3, [r3, #1]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d020      	beq.n	80062f2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	b29b      	uxth	r3, r3
 80062be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062c6:	81bb      	strh	r3, [r7, #12]
 80062c8:	89bb      	ldrh	r3, [r7, #12]
 80062ca:	f083 0310 	eor.w	r3, r3, #16
 80062ce:	81bb      	strh	r3, [r7, #12]
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	441a      	add	r2, r3
 80062da:	89bb      	ldrh	r3, [r7, #12]
 80062dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	8013      	strh	r3, [r2, #0]
 80062f0:	e01f      	b.n	8006332 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4413      	add	r3, r2
 80062fc:	881b      	ldrh	r3, [r3, #0]
 80062fe:	b29b      	uxth	r3, r3
 8006300:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006308:	81fb      	strh	r3, [r7, #14]
 800630a:	89fb      	ldrh	r3, [r7, #14]
 800630c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006310:	81fb      	strh	r3, [r7, #14]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	441a      	add	r2, r3
 800631c:	89fb      	ldrh	r3, [r7, #14]
 800631e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800632a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800632e:	b29b      	uxth	r3, r3
 8006330:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	bc80      	pop	{r7}
 800633c:	4770      	bx	lr

0800633e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800633e:	b480      	push	{r7}
 8006340:	b087      	sub	sp, #28
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
 8006346:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	7b1b      	ldrb	r3, [r3, #12]
 800634c:	2b00      	cmp	r3, #0
 800634e:	f040 809d 	bne.w	800648c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	785b      	ldrb	r3, [r3, #1]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d04c      	beq.n	80063f4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4413      	add	r3, r2
 8006364:	881b      	ldrh	r3, [r3, #0]
 8006366:	823b      	strh	r3, [r7, #16]
 8006368:	8a3b      	ldrh	r3, [r7, #16]
 800636a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800636e:	2b00      	cmp	r3, #0
 8006370:	d01b      	beq.n	80063aa <USB_EPClearStall+0x6c>
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4413      	add	r3, r2
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	b29b      	uxth	r3, r3
 8006380:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006388:	81fb      	strh	r3, [r7, #14]
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	441a      	add	r2, r3
 8006394:	89fb      	ldrh	r3, [r7, #14]
 8006396:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800639a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800639e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	78db      	ldrb	r3, [r3, #3]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d06c      	beq.n	800648c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4413      	add	r3, r2
 80063bc:	881b      	ldrh	r3, [r3, #0]
 80063be:	b29b      	uxth	r3, r3
 80063c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063c8:	81bb      	strh	r3, [r7, #12]
 80063ca:	89bb      	ldrh	r3, [r7, #12]
 80063cc:	f083 0320 	eor.w	r3, r3, #32
 80063d0:	81bb      	strh	r3, [r7, #12]
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	441a      	add	r2, r3
 80063dc:	89bb      	ldrh	r3, [r7, #12]
 80063de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	8013      	strh	r3, [r2, #0]
 80063f2:	e04b      	b.n	800648c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4413      	add	r3, r2
 80063fe:	881b      	ldrh	r3, [r3, #0]
 8006400:	82fb      	strh	r3, [r7, #22]
 8006402:	8afb      	ldrh	r3, [r7, #22]
 8006404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d01b      	beq.n	8006444 <USB_EPClearStall+0x106>
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	881b      	ldrh	r3, [r3, #0]
 8006418:	b29b      	uxth	r3, r3
 800641a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800641e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006422:	82bb      	strh	r3, [r7, #20]
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	441a      	add	r2, r3
 800642e:	8abb      	ldrh	r3, [r7, #20]
 8006430:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006434:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006438:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800643c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006440:	b29b      	uxth	r3, r3
 8006442:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	881b      	ldrh	r3, [r3, #0]
 8006450:	b29b      	uxth	r3, r3
 8006452:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645a:	827b      	strh	r3, [r7, #18]
 800645c:	8a7b      	ldrh	r3, [r7, #18]
 800645e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006462:	827b      	strh	r3, [r7, #18]
 8006464:	8a7b      	ldrh	r3, [r7, #18]
 8006466:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800646a:	827b      	strh	r3, [r7, #18]
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	441a      	add	r2, r3
 8006476:	8a7b      	ldrh	r3, [r7, #18]
 8006478:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800647c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006480:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006488:	b29b      	uxth	r3, r3
 800648a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	371c      	adds	r7, #28
 8006492:	46bd      	mov	sp, r7
 8006494:	bc80      	pop	{r7}
 8006496:	4770      	bx	lr

08006498 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	460b      	mov	r3, r1
 80064a2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80064a4:	78fb      	ldrb	r3, [r7, #3]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d103      	bne.n	80064b2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2280      	movs	r2, #128	; 0x80
 80064ae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bc80      	pop	{r7}
 80064bc:	4770      	bx	lr

080064be <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80064be:	b480      	push	{r7}
 80064c0:	b083      	sub	sp, #12
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bc80      	pop	{r7}
 80064d0:	4770      	bx	lr

080064d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80064d2:	b480      	push	{r7}
 80064d4:	b083      	sub	sp, #12
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bc80      	pop	{r7}
 80064e4:	4770      	bx	lr

080064e6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80064e6:	b480      	push	{r7}
 80064e8:	b085      	sub	sp, #20
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80064f8:	68fb      	ldr	r3, [r7, #12]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	bc80      	pop	{r7}
 8006502:	4770      	bx	lr

08006504 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	bc80      	pop	{r7}
 8006518:	4770      	bx	lr

0800651a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800651a:	b480      	push	{r7}
 800651c:	b08b      	sub	sp, #44	; 0x2c
 800651e:	af00      	add	r7, sp, #0
 8006520:	60f8      	str	r0, [r7, #12]
 8006522:	60b9      	str	r1, [r7, #8]
 8006524:	4611      	mov	r1, r2
 8006526:	461a      	mov	r2, r3
 8006528:	460b      	mov	r3, r1
 800652a:	80fb      	strh	r3, [r7, #6]
 800652c:	4613      	mov	r3, r2
 800652e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006530:	88bb      	ldrh	r3, [r7, #4]
 8006532:	3301      	adds	r3, #1
 8006534:	085b      	lsrs	r3, r3, #1
 8006536:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006540:	88fb      	ldrh	r3, [r7, #6]
 8006542:	005a      	lsls	r2, r3, #1
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	4413      	add	r3, r2
 8006548:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800654c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	627b      	str	r3, [r7, #36]	; 0x24
 8006552:	e01e      	b.n	8006592 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	3301      	adds	r3, #1
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	021b      	lsls	r3, r3, #8
 8006562:	b21a      	sxth	r2, r3
 8006564:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006568:	4313      	orrs	r3, r2
 800656a:	b21b      	sxth	r3, r3
 800656c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	8a7a      	ldrh	r2, [r7, #18]
 8006572:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006574:	6a3b      	ldr	r3, [r7, #32]
 8006576:	3302      	adds	r3, #2
 8006578:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	3302      	adds	r3, #2
 800657e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	3301      	adds	r3, #1
 8006584:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	3301      	adds	r3, #1
 800658a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658e:	3b01      	subs	r3, #1
 8006590:	627b      	str	r3, [r7, #36]	; 0x24
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1dd      	bne.n	8006554 <USB_WritePMA+0x3a>
  }
}
 8006598:	bf00      	nop
 800659a:	bf00      	nop
 800659c:	372c      	adds	r7, #44	; 0x2c
 800659e:	46bd      	mov	sp, r7
 80065a0:	bc80      	pop	{r7}
 80065a2:	4770      	bx	lr

080065a4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b08b      	sub	sp, #44	; 0x2c
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	4611      	mov	r1, r2
 80065b0:	461a      	mov	r2, r3
 80065b2:	460b      	mov	r3, r1
 80065b4:	80fb      	strh	r3, [r7, #6]
 80065b6:	4613      	mov	r3, r2
 80065b8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80065ba:	88bb      	ldrh	r3, [r7, #4]
 80065bc:	085b      	lsrs	r3, r3, #1
 80065be:	b29b      	uxth	r3, r3
 80065c0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80065ca:	88fb      	ldrh	r3, [r7, #6]
 80065cc:	005a      	lsls	r2, r3, #1
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	4413      	add	r3, r2
 80065d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065d6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	627b      	str	r3, [r7, #36]	; 0x24
 80065dc:	e01b      	b.n	8006616 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80065de:	6a3b      	ldr	r3, [r7, #32]
 80065e0:	881b      	ldrh	r3, [r3, #0]
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80065e6:	6a3b      	ldr	r3, [r7, #32]
 80065e8:	3302      	adds	r3, #2
 80065ea:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	b2da      	uxtb	r2, r3
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	3301      	adds	r3, #1
 80065f8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	0a1b      	lsrs	r3, r3, #8
 80065fe:	b2da      	uxtb	r2, r3
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	3301      	adds	r3, #1
 8006608:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800660a:	6a3b      	ldr	r3, [r7, #32]
 800660c:	3302      	adds	r3, #2
 800660e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006612:	3b01      	subs	r3, #1
 8006614:	627b      	str	r3, [r7, #36]	; 0x24
 8006616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1e0      	bne.n	80065de <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800661c:	88bb      	ldrh	r3, [r7, #4]
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	b29b      	uxth	r3, r3
 8006624:	2b00      	cmp	r3, #0
 8006626:	d007      	beq.n	8006638 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	881b      	ldrh	r3, [r3, #0]
 800662c:	b29b      	uxth	r3, r3
 800662e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	b2da      	uxtb	r2, r3
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	701a      	strb	r2, [r3, #0]
  }
}
 8006638:	bf00      	nop
 800663a:	372c      	adds	r7, #44	; 0x2c
 800663c:	46bd      	mov	sp, r7
 800663e:	bc80      	pop	{r7}
 8006640:	4770      	bx	lr

08006642 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b084      	sub	sp, #16
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
 800664a:	460b      	mov	r3, r1
 800664c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800664e:	2300      	movs	r3, #0
 8006650:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	7c1b      	ldrb	r3, [r3, #16]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d115      	bne.n	8006686 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800665a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800665e:	2202      	movs	r2, #2
 8006660:	2181      	movs	r1, #129	; 0x81
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f001 fe87 	bl	8008376 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800666e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006672:	2202      	movs	r2, #2
 8006674:	2101      	movs	r1, #1
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f001 fe7d 	bl	8008376 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006684:	e012      	b.n	80066ac <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006686:	2340      	movs	r3, #64	; 0x40
 8006688:	2202      	movs	r2, #2
 800668a:	2181      	movs	r1, #129	; 0x81
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f001 fe72 	bl	8008376 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006698:	2340      	movs	r3, #64	; 0x40
 800669a:	2202      	movs	r2, #2
 800669c:	2101      	movs	r1, #1
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f001 fe69 	bl	8008376 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80066ac:	2308      	movs	r3, #8
 80066ae:	2203      	movs	r2, #3
 80066b0:	2182      	movs	r1, #130	; 0x82
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f001 fe5f 	bl	8008376 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80066be:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80066c2:	f001 ff7f 	bl	80085c4 <USBD_static_malloc>
 80066c6:	4602      	mov	r2, r0
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d102      	bne.n	80066de <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80066d8:	2301      	movs	r3, #1
 80066da:	73fb      	strb	r3, [r7, #15]
 80066dc:	e026      	b.n	800672c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066e4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	7c1b      	ldrb	r3, [r3, #16]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d109      	bne.n	800671c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800670e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006712:	2101      	movs	r1, #1
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f001 ff1f 	bl	8008558 <USBD_LL_PrepareReceive>
 800671a:	e007      	b.n	800672c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006722:	2340      	movs	r3, #64	; 0x40
 8006724:	2101      	movs	r1, #1
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f001 ff16 	bl	8008558 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800672c:	7bfb      	ldrb	r3, [r7, #15]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b084      	sub	sp, #16
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	460b      	mov	r3, r1
 8006740:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006742:	2300      	movs	r3, #0
 8006744:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006746:	2181      	movs	r1, #129	; 0x81
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f001 fe3a 	bl	80083c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006754:	2101      	movs	r1, #1
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f001 fe33 	bl	80083c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006764:	2182      	movs	r1, #130	; 0x82
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f001 fe2b 	bl	80083c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00e      	beq.n	800679a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800678c:	4618      	mov	r0, r3
 800678e:	f001 ff25 	bl	80085dc <USBD_static_free>
    pdev->pClassData = NULL;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800679a:	7bfb      	ldrb	r3, [r7, #15]
}
 800679c:	4618      	mov	r0, r3
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b086      	sub	sp, #24
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067b4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80067ba:	2300      	movs	r3, #0
 80067bc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80067be:	2300      	movs	r3, #0
 80067c0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d039      	beq.n	8006842 <USBD_CDC_Setup+0x9e>
 80067ce:	2b20      	cmp	r3, #32
 80067d0:	d17f      	bne.n	80068d2 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	88db      	ldrh	r3, [r3, #6]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d029      	beq.n	800682e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	b25b      	sxtb	r3, r3
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	da11      	bge.n	8006808 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80067f0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	88d2      	ldrh	r2, [r2, #6]
 80067f6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80067f8:	6939      	ldr	r1, [r7, #16]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	88db      	ldrh	r3, [r3, #6]
 80067fe:	461a      	mov	r2, r3
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f001 fa0a 	bl	8007c1a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006806:	e06b      	b.n	80068e0 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	785a      	ldrb	r2, [r3, #1]
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	88db      	ldrh	r3, [r3, #6]
 8006816:	b2da      	uxtb	r2, r3
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800681e:	6939      	ldr	r1, [r7, #16]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	88db      	ldrh	r3, [r3, #6]
 8006824:	461a      	mov	r2, r3
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f001 fa25 	bl	8007c76 <USBD_CtlPrepareRx>
      break;
 800682c:	e058      	b.n	80068e0 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	683a      	ldr	r2, [r7, #0]
 8006838:	7850      	ldrb	r0, [r2, #1]
 800683a:	2200      	movs	r2, #0
 800683c:	6839      	ldr	r1, [r7, #0]
 800683e:	4798      	blx	r3
      break;
 8006840:	e04e      	b.n	80068e0 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	785b      	ldrb	r3, [r3, #1]
 8006846:	2b0b      	cmp	r3, #11
 8006848:	d02e      	beq.n	80068a8 <USBD_CDC_Setup+0x104>
 800684a:	2b0b      	cmp	r3, #11
 800684c:	dc38      	bgt.n	80068c0 <USBD_CDC_Setup+0x11c>
 800684e:	2b00      	cmp	r3, #0
 8006850:	d002      	beq.n	8006858 <USBD_CDC_Setup+0xb4>
 8006852:	2b0a      	cmp	r3, #10
 8006854:	d014      	beq.n	8006880 <USBD_CDC_Setup+0xdc>
 8006856:	e033      	b.n	80068c0 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800685e:	2b03      	cmp	r3, #3
 8006860:	d107      	bne.n	8006872 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006862:	f107 030c 	add.w	r3, r7, #12
 8006866:	2202      	movs	r2, #2
 8006868:	4619      	mov	r1, r3
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f001 f9d5 	bl	8007c1a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006870:	e02e      	b.n	80068d0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006872:	6839      	ldr	r1, [r7, #0]
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f001 f966 	bl	8007b46 <USBD_CtlError>
            ret = USBD_FAIL;
 800687a:	2302      	movs	r3, #2
 800687c:	75fb      	strb	r3, [r7, #23]
          break;
 800687e:	e027      	b.n	80068d0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006886:	2b03      	cmp	r3, #3
 8006888:	d107      	bne.n	800689a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800688a:	f107 030f 	add.w	r3, r7, #15
 800688e:	2201      	movs	r2, #1
 8006890:	4619      	mov	r1, r3
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f001 f9c1 	bl	8007c1a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006898:	e01a      	b.n	80068d0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800689a:	6839      	ldr	r1, [r7, #0]
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f001 f952 	bl	8007b46 <USBD_CtlError>
            ret = USBD_FAIL;
 80068a2:	2302      	movs	r3, #2
 80068a4:	75fb      	strb	r3, [r7, #23]
          break;
 80068a6:	e013      	b.n	80068d0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ae:	2b03      	cmp	r3, #3
 80068b0:	d00d      	beq.n	80068ce <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80068b2:	6839      	ldr	r1, [r7, #0]
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f001 f946 	bl	8007b46 <USBD_CtlError>
            ret = USBD_FAIL;
 80068ba:	2302      	movs	r3, #2
 80068bc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80068be:	e006      	b.n	80068ce <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80068c0:	6839      	ldr	r1, [r7, #0]
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f001 f93f 	bl	8007b46 <USBD_CtlError>
          ret = USBD_FAIL;
 80068c8:	2302      	movs	r3, #2
 80068ca:	75fb      	strb	r3, [r7, #23]
          break;
 80068cc:	e000      	b.n	80068d0 <USBD_CDC_Setup+0x12c>
          break;
 80068ce:	bf00      	nop
      }
      break;
 80068d0:	e006      	b.n	80068e0 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80068d2:	6839      	ldr	r1, [r7, #0]
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f001 f936 	bl	8007b46 <USBD_CtlError>
      ret = USBD_FAIL;
 80068da:	2302      	movs	r3, #2
 80068dc:	75fb      	strb	r3, [r7, #23]
      break;
 80068de:	bf00      	nop
  }

  return ret;
 80068e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b084      	sub	sp, #16
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	460b      	mov	r3, r1
 80068f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068fc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006904:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800690c:	2b00      	cmp	r3, #0
 800690e:	d03a      	beq.n	8006986 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006910:	78fa      	ldrb	r2, [r7, #3]
 8006912:	6879      	ldr	r1, [r7, #4]
 8006914:	4613      	mov	r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4413      	add	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	440b      	add	r3, r1
 800691e:	331c      	adds	r3, #28
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d029      	beq.n	800697a <USBD_CDC_DataIn+0x90>
 8006926:	78fa      	ldrb	r2, [r7, #3]
 8006928:	6879      	ldr	r1, [r7, #4]
 800692a:	4613      	mov	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4413      	add	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	440b      	add	r3, r1
 8006934:	331c      	adds	r3, #28
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	78f9      	ldrb	r1, [r7, #3]
 800693a:	68b8      	ldr	r0, [r7, #8]
 800693c:	460b      	mov	r3, r1
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	440b      	add	r3, r1
 8006942:	00db      	lsls	r3, r3, #3
 8006944:	4403      	add	r3, r0
 8006946:	3338      	adds	r3, #56	; 0x38
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	fbb2 f1f3 	udiv	r1, r2, r3
 800694e:	fb01 f303 	mul.w	r3, r1, r3
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	2b00      	cmp	r3, #0
 8006956:	d110      	bne.n	800697a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006958:	78fa      	ldrb	r2, [r7, #3]
 800695a:	6879      	ldr	r1, [r7, #4]
 800695c:	4613      	mov	r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	440b      	add	r3, r1
 8006966:	331c      	adds	r3, #28
 8006968:	2200      	movs	r2, #0
 800696a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800696c:	78f9      	ldrb	r1, [r7, #3]
 800696e:	2300      	movs	r3, #0
 8006970:	2200      	movs	r2, #0
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f001 fdcd 	bl	8008512 <USBD_LL_Transmit>
 8006978:	e003      	b.n	8006982 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006982:	2300      	movs	r3, #0
 8006984:	e000      	b.n	8006988 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006986:	2302      	movs	r3, #2
  }
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	460b      	mov	r3, r1
 800699a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80069a4:	78fb      	ldrb	r3, [r7, #3]
 80069a6:	4619      	mov	r1, r3
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f001 fdf8 	bl	800859e <USBD_LL_GetRxDataSize>
 80069ae:	4602      	mov	r2, r0
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00d      	beq.n	80069dc <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80069d4:	4611      	mov	r1, r2
 80069d6:	4798      	blx	r3

    return USBD_OK;
 80069d8:	2300      	movs	r3, #0
 80069da:	e000      	b.n	80069de <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80069dc:	2302      	movs	r3, #2
  }
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b084      	sub	sp, #16
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d015      	beq.n	8006a2c <USBD_CDC_EP0_RxReady+0x46>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006a06:	2bff      	cmp	r3, #255	; 0xff
 8006a08:	d010      	beq.n	8006a2c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006a18:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006a20:	b292      	uxth	r2, r2
 8006a22:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	22ff      	movs	r2, #255	; 0xff
 8006a28:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
	...

08006a38 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2243      	movs	r2, #67	; 0x43
 8006a44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006a46:	4b03      	ldr	r3, [pc, #12]	; (8006a54 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bc80      	pop	{r7}
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	20000094 	.word	0x20000094

08006a58 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2243      	movs	r2, #67	; 0x43
 8006a64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006a66:	4b03      	ldr	r3, [pc, #12]	; (8006a74 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bc80      	pop	{r7}
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	20000050 	.word	0x20000050

08006a78 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2243      	movs	r2, #67	; 0x43
 8006a84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006a86:	4b03      	ldr	r3, [pc, #12]	; (8006a94 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bc80      	pop	{r7}
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	200000d8 	.word	0x200000d8

08006a98 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	220a      	movs	r2, #10
 8006aa4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006aa6:	4b03      	ldr	r3, [pc, #12]	; (8006ab4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bc80      	pop	{r7}
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	2000000c 	.word	0x2000000c

08006ab8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d005      	beq.n	8006ad8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bc80      	pop	{r7}
 8006ae2:	4770      	bx	lr

08006ae4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	4613      	mov	r3, r2
 8006af0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006af8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006b02:	88fa      	ldrh	r2, [r7, #6]
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	371c      	adds	r7, #28
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bc80      	pop	{r7}
 8006b14:	4770      	bx	lr

08006b16 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b085      	sub	sp, #20
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b26:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3714      	adds	r7, #20
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bc80      	pop	{r7}
 8006b3a:	4770      	bx	lr

08006b3c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b4a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d01c      	beq.n	8006b90 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d115      	bne.n	8006b8c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	2181      	movs	r1, #129	; 0x81
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f001 fcc5 	bl	8008512 <USBD_LL_Transmit>

      return USBD_OK;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	e002      	b.n	8006b92 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e000      	b.n	8006b92 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006b90:	2302      	movs	r3, #2
  }
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b084      	sub	sp, #16
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d017      	beq.n	8006be4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	7c1b      	ldrb	r3, [r3, #16]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d109      	bne.n	8006bd0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bc6:	2101      	movs	r1, #1
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f001 fcc5 	bl	8008558 <USBD_LL_PrepareReceive>
 8006bce:	e007      	b.n	8006be0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bd6:	2340      	movs	r3, #64	; 0x40
 8006bd8:	2101      	movs	r1, #1
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f001 fcbc 	bl	8008558 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006be0:	2300      	movs	r3, #0
 8006be2:	e000      	b.n	8006be6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006be4:	2302      	movs	r3, #2
  }
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b084      	sub	sp, #16
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	60f8      	str	r0, [r7, #12]
 8006bf6:	60b9      	str	r1, [r7, #8]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006c02:	2302      	movs	r3, #2
 8006c04:	e01a      	b.n	8006c3c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d003      	beq.n	8006c26 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	68ba      	ldr	r2, [r7, #8]
 8006c22:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	79fa      	ldrb	r2, [r7, #7]
 8006c32:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f001 fb29 	bl	800828c <USBD_LL_Init>

  return USBD_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d006      	beq.n	8006c66 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	683a      	ldr	r2, [r7, #0]
 8006c5c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006c60:	2300      	movs	r3, #0
 8006c62:	73fb      	strb	r3, [r7, #15]
 8006c64:	e001      	b.n	8006c6a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006c66:	2302      	movs	r3, #2
 8006c68:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3714      	adds	r7, #20
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bc80      	pop	{r7}
 8006c74:	4770      	bx	lr

08006c76 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b082      	sub	sp, #8
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f001 fb5e 	bl	8008340 <USBD_LL_Start>

  return USBD_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b083      	sub	sp, #12
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bc80      	pop	{r7}
 8006ca0:	4770      	bx	lr

08006ca2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b084      	sub	sp, #16
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	460b      	mov	r3, r1
 8006cac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006cae:	2302      	movs	r3, #2
 8006cb0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00c      	beq.n	8006cd6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	78fa      	ldrb	r2, [r7, #3]
 8006cc6:	4611      	mov	r1, r2
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	4798      	blx	r3
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	460b      	mov	r3, r1
 8006cea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	78fa      	ldrb	r2, [r7, #3]
 8006cf6:	4611      	mov	r1, r2
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	4798      	blx	r3

  return USBD_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3708      	adds	r7, #8
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b082      	sub	sp, #8
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
 8006d0e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006d16:	6839      	ldr	r1, [r7, #0]
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f000 fed8 	bl	8007ace <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006d3a:	f003 031f 	and.w	r3, r3, #31
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d016      	beq.n	8006d70 <USBD_LL_SetupStage+0x6a>
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d81c      	bhi.n	8006d80 <USBD_LL_SetupStage+0x7a>
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d002      	beq.n	8006d50 <USBD_LL_SetupStage+0x4a>
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d008      	beq.n	8006d60 <USBD_LL_SetupStage+0x5a>
 8006d4e:	e017      	b.n	8006d80 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006d56:	4619      	mov	r1, r3
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 f9cb 	bl	80070f4 <USBD_StdDevReq>
      break;
 8006d5e:	e01a      	b.n	8006d96 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006d66:	4619      	mov	r1, r3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 fa2d 	bl	80071c8 <USBD_StdItfReq>
      break;
 8006d6e:	e012      	b.n	8006d96 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006d76:	4619      	mov	r1, r3
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fa6d 	bl	8007258 <USBD_StdEPReq>
      break;
 8006d7e:	e00a      	b.n	8006d96 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006d86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f001 fb36 	bl	8008400 <USBD_LL_StallEP>
      break;
 8006d94:	bf00      	nop
  }

  return USBD_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3708      	adds	r7, #8
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	460b      	mov	r3, r1
 8006daa:	607a      	str	r2, [r7, #4]
 8006dac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006dae:	7afb      	ldrb	r3, [r7, #11]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d14b      	bne.n	8006e4c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006dba:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006dc2:	2b03      	cmp	r3, #3
 8006dc4:	d134      	bne.n	8006e30 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	68da      	ldr	r2, [r3, #12]
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d919      	bls.n	8006e06 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	68da      	ldr	r2, [r3, #12]
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	1ad2      	subs	r2, r2, r3
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	68da      	ldr	r2, [r3, #12]
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d203      	bcs.n	8006df4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	e002      	b.n	8006dfa <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	6879      	ldr	r1, [r7, #4]
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	f000 ff57 	bl	8007cb2 <USBD_CtlContinueRx>
 8006e04:	e038      	b.n	8006e78 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00a      	beq.n	8006e28 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006e18:	2b03      	cmp	r3, #3
 8006e1a:	d105      	bne.n	8006e28 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f000 ff54 	bl	8007cd6 <USBD_CtlSendStatus>
 8006e2e:	e023      	b.n	8006e78 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e36:	2b05      	cmp	r3, #5
 8006e38:	d11e      	bne.n	8006e78 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006e42:	2100      	movs	r1, #0
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f001 fadb 	bl	8008400 <USBD_LL_StallEP>
 8006e4a:	e015      	b.n	8006e78 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00d      	beq.n	8006e74 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006e5e:	2b03      	cmp	r3, #3
 8006e60:	d108      	bne.n	8006e74 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	7afa      	ldrb	r2, [r7, #11]
 8006e6c:	4611      	mov	r1, r2
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	4798      	blx	r3
 8006e72:	e001      	b.n	8006e78 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006e74:	2302      	movs	r3, #2
 8006e76:	e000      	b.n	8006e7a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3718      	adds	r7, #24
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b086      	sub	sp, #24
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	60f8      	str	r0, [r7, #12]
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	607a      	str	r2, [r7, #4]
 8006e8e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006e90:	7afb      	ldrb	r3, [r7, #11]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d17f      	bne.n	8006f96 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	3314      	adds	r3, #20
 8006e9a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d15c      	bne.n	8006f60 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	68da      	ldr	r2, [r3, #12]
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d915      	bls.n	8006ede <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	68da      	ldr	r2, [r3, #12]
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	1ad2      	subs	r2, r2, r3
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	6879      	ldr	r1, [r7, #4]
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	f000 fec1 	bl	8007c52 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f001 fb3e 	bl	8008558 <USBD_LL_PrepareReceive>
 8006edc:	e04e      	b.n	8006f7c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	6912      	ldr	r2, [r2, #16]
 8006ee6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006eea:	fb01 f202 	mul.w	r2, r1, r2
 8006eee:	1a9b      	subs	r3, r3, r2
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d11c      	bne.n	8006f2e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	689a      	ldr	r2, [r3, #8]
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d316      	bcc.n	8006f2e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	689a      	ldr	r2, [r3, #8]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d20f      	bcs.n	8006f2e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006f0e:	2200      	movs	r2, #0
 8006f10:	2100      	movs	r1, #0
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f000 fe9d 	bl	8007c52 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f20:	2300      	movs	r3, #0
 8006f22:	2200      	movs	r2, #0
 8006f24:	2100      	movs	r1, #0
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f001 fb16 	bl	8008558 <USBD_LL_PrepareReceive>
 8006f2c:	e026      	b.n	8006f7c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00a      	beq.n	8006f50 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006f40:	2b03      	cmp	r3, #3
 8006f42:	d105      	bne.n	8006f50 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006f50:	2180      	movs	r1, #128	; 0x80
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f001 fa54 	bl	8008400 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f000 fecf 	bl	8007cfc <USBD_CtlReceiveStatus>
 8006f5e:	e00d      	b.n	8006f7c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f66:	2b04      	cmp	r3, #4
 8006f68:	d004      	beq.n	8006f74 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d103      	bne.n	8006f7c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006f74:	2180      	movs	r1, #128	; 0x80
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f001 fa42 	bl	8008400 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d11d      	bne.n	8006fc2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f7ff fe81 	bl	8006c8e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006f94:	e015      	b.n	8006fc2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f9c:	695b      	ldr	r3, [r3, #20]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00d      	beq.n	8006fbe <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006fa8:	2b03      	cmp	r3, #3
 8006faa:	d108      	bne.n	8006fbe <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fb2:	695b      	ldr	r3, [r3, #20]
 8006fb4:	7afa      	ldrb	r2, [r7, #11]
 8006fb6:	4611      	mov	r1, r2
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	4798      	blx	r3
 8006fbc:	e001      	b.n	8006fc2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	e000      	b.n	8006fc4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3718      	adds	r7, #24
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006fd4:	2340      	movs	r3, #64	; 0x40
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	2100      	movs	r1, #0
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f001 f9cb 	bl	8008376 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2240      	movs	r2, #64	; 0x40
 8006fec:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ff0:	2340      	movs	r3, #64	; 0x40
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	2180      	movs	r1, #128	; 0x80
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f001 f9bd 	bl	8008376 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2240      	movs	r2, #64	; 0x40
 8007006:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800702c:	2b00      	cmp	r3, #0
 800702e:	d009      	beq.n	8007044 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	6852      	ldr	r2, [r2, #4]
 800703c:	b2d2      	uxtb	r2, r2
 800703e:	4611      	mov	r1, r2
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	4798      	blx	r3
  }

  return USBD_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3708      	adds	r7, #8
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800704e:	b480      	push	{r7}
 8007050:	b083      	sub	sp, #12
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	460b      	mov	r3, r1
 8007058:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	78fa      	ldrb	r2, [r7, #3]
 800705e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	370c      	adds	r7, #12
 8007066:	46bd      	mov	sp, r7
 8007068:	bc80      	pop	{r7}
 800706a:	4770      	bx	lr

0800706c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2204      	movs	r2, #4
 8007084:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	370c      	adds	r7, #12
 800708e:	46bd      	mov	sp, r7
 8007090:	bc80      	pop	{r7}
 8007092:	4770      	bx	lr

08007094 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070a2:	2b04      	cmp	r3, #4
 80070a4:	d105      	bne.n	80070b2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bc80      	pop	{r7}
 80070bc:	4770      	bx	lr

080070be <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b082      	sub	sp, #8
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070cc:	2b03      	cmp	r3, #3
 80070ce:	d10b      	bne.n	80070e8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070d6:	69db      	ldr	r3, [r3, #28]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d005      	beq.n	80070e8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070e2:	69db      	ldr	r3, [r3, #28]
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
	...

080070f4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070fe:	2300      	movs	r3, #0
 8007100:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800710a:	2b40      	cmp	r3, #64	; 0x40
 800710c:	d005      	beq.n	800711a <USBD_StdDevReq+0x26>
 800710e:	2b40      	cmp	r3, #64	; 0x40
 8007110:	d84f      	bhi.n	80071b2 <USBD_StdDevReq+0xbe>
 8007112:	2b00      	cmp	r3, #0
 8007114:	d009      	beq.n	800712a <USBD_StdDevReq+0x36>
 8007116:	2b20      	cmp	r3, #32
 8007118:	d14b      	bne.n	80071b2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	6839      	ldr	r1, [r7, #0]
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	4798      	blx	r3
      break;
 8007128:	e048      	b.n	80071bc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	785b      	ldrb	r3, [r3, #1]
 800712e:	2b09      	cmp	r3, #9
 8007130:	d839      	bhi.n	80071a6 <USBD_StdDevReq+0xb2>
 8007132:	a201      	add	r2, pc, #4	; (adr r2, 8007138 <USBD_StdDevReq+0x44>)
 8007134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007138:	08007189 	.word	0x08007189
 800713c:	0800719d 	.word	0x0800719d
 8007140:	080071a7 	.word	0x080071a7
 8007144:	08007193 	.word	0x08007193
 8007148:	080071a7 	.word	0x080071a7
 800714c:	0800716b 	.word	0x0800716b
 8007150:	08007161 	.word	0x08007161
 8007154:	080071a7 	.word	0x080071a7
 8007158:	0800717f 	.word	0x0800717f
 800715c:	08007175 	.word	0x08007175
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007160:	6839      	ldr	r1, [r7, #0]
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f9dc 	bl	8007520 <USBD_GetDescriptor>
          break;
 8007168:	e022      	b.n	80071b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800716a:	6839      	ldr	r1, [r7, #0]
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fb3f 	bl	80077f0 <USBD_SetAddress>
          break;
 8007172:	e01d      	b.n	80071b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fb7e 	bl	8007878 <USBD_SetConfig>
          break;
 800717c:	e018      	b.n	80071b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800717e:	6839      	ldr	r1, [r7, #0]
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 fc07 	bl	8007994 <USBD_GetConfig>
          break;
 8007186:	e013      	b.n	80071b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007188:	6839      	ldr	r1, [r7, #0]
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fc37 	bl	80079fe <USBD_GetStatus>
          break;
 8007190:	e00e      	b.n	80071b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007192:	6839      	ldr	r1, [r7, #0]
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 fc65 	bl	8007a64 <USBD_SetFeature>
          break;
 800719a:	e009      	b.n	80071b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800719c:	6839      	ldr	r1, [r7, #0]
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 fc74 	bl	8007a8c <USBD_ClrFeature>
          break;
 80071a4:	e004      	b.n	80071b0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80071a6:	6839      	ldr	r1, [r7, #0]
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fccc 	bl	8007b46 <USBD_CtlError>
          break;
 80071ae:	bf00      	nop
      }
      break;
 80071b0:	e004      	b.n	80071bc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80071b2:	6839      	ldr	r1, [r7, #0]
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fcc6 	bl	8007b46 <USBD_CtlError>
      break;
 80071ba:	bf00      	nop
  }

  return ret;
 80071bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop

080071c8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071de:	2b40      	cmp	r3, #64	; 0x40
 80071e0:	d005      	beq.n	80071ee <USBD_StdItfReq+0x26>
 80071e2:	2b40      	cmp	r3, #64	; 0x40
 80071e4:	d82e      	bhi.n	8007244 <USBD_StdItfReq+0x7c>
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d001      	beq.n	80071ee <USBD_StdItfReq+0x26>
 80071ea:	2b20      	cmp	r3, #32
 80071ec:	d12a      	bne.n	8007244 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071f4:	3b01      	subs	r3, #1
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d81d      	bhi.n	8007236 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	889b      	ldrh	r3, [r3, #4]
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	2b01      	cmp	r3, #1
 8007202:	d813      	bhi.n	800722c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	6839      	ldr	r1, [r7, #0]
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	4798      	blx	r3
 8007212:	4603      	mov	r3, r0
 8007214:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	88db      	ldrh	r3, [r3, #6]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d110      	bne.n	8007240 <USBD_StdItfReq+0x78>
 800721e:	7bfb      	ldrb	r3, [r7, #15]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10d      	bne.n	8007240 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 fd56 	bl	8007cd6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800722a:	e009      	b.n	8007240 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fc89 	bl	8007b46 <USBD_CtlError>
          break;
 8007234:	e004      	b.n	8007240 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 fc84 	bl	8007b46 <USBD_CtlError>
          break;
 800723e:	e000      	b.n	8007242 <USBD_StdItfReq+0x7a>
          break;
 8007240:	bf00      	nop
      }
      break;
 8007242:	e004      	b.n	800724e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007244:	6839      	ldr	r1, [r7, #0]
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 fc7d 	bl	8007b46 <USBD_CtlError>
      break;
 800724c:	bf00      	nop
  }

  return USBD_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007262:	2300      	movs	r3, #0
 8007264:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	889b      	ldrh	r3, [r3, #4]
 800726a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007274:	2b40      	cmp	r3, #64	; 0x40
 8007276:	d007      	beq.n	8007288 <USBD_StdEPReq+0x30>
 8007278:	2b40      	cmp	r3, #64	; 0x40
 800727a:	f200 8146 	bhi.w	800750a <USBD_StdEPReq+0x2b2>
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00a      	beq.n	8007298 <USBD_StdEPReq+0x40>
 8007282:	2b20      	cmp	r3, #32
 8007284:	f040 8141 	bne.w	800750a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	6839      	ldr	r1, [r7, #0]
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	4798      	blx	r3
      break;
 8007296:	e13d      	b.n	8007514 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072a0:	2b20      	cmp	r3, #32
 80072a2:	d10a      	bne.n	80072ba <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	6839      	ldr	r1, [r7, #0]
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	4798      	blx	r3
 80072b2:	4603      	mov	r3, r0
 80072b4:	73fb      	strb	r3, [r7, #15]

        return ret;
 80072b6:	7bfb      	ldrb	r3, [r7, #15]
 80072b8:	e12d      	b.n	8007516 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	785b      	ldrb	r3, [r3, #1]
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d007      	beq.n	80072d2 <USBD_StdEPReq+0x7a>
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	f300 811b 	bgt.w	80074fe <USBD_StdEPReq+0x2a6>
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d072      	beq.n	80073b2 <USBD_StdEPReq+0x15a>
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d03a      	beq.n	8007346 <USBD_StdEPReq+0xee>
 80072d0:	e115      	b.n	80074fe <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d002      	beq.n	80072e2 <USBD_StdEPReq+0x8a>
 80072dc:	2b03      	cmp	r3, #3
 80072de:	d015      	beq.n	800730c <USBD_StdEPReq+0xb4>
 80072e0:	e02b      	b.n	800733a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072e2:	7bbb      	ldrb	r3, [r7, #14]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00c      	beq.n	8007302 <USBD_StdEPReq+0xaa>
 80072e8:	7bbb      	ldrb	r3, [r7, #14]
 80072ea:	2b80      	cmp	r3, #128	; 0x80
 80072ec:	d009      	beq.n	8007302 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80072ee:	7bbb      	ldrb	r3, [r7, #14]
 80072f0:	4619      	mov	r1, r3
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f001 f884 	bl	8008400 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80072f8:	2180      	movs	r1, #128	; 0x80
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f001 f880 	bl	8008400 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007300:	e020      	b.n	8007344 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007302:	6839      	ldr	r1, [r7, #0]
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fc1e 	bl	8007b46 <USBD_CtlError>
              break;
 800730a:	e01b      	b.n	8007344 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	885b      	ldrh	r3, [r3, #2]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d10e      	bne.n	8007332 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007314:	7bbb      	ldrb	r3, [r7, #14]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00b      	beq.n	8007332 <USBD_StdEPReq+0xda>
 800731a:	7bbb      	ldrb	r3, [r7, #14]
 800731c:	2b80      	cmp	r3, #128	; 0x80
 800731e:	d008      	beq.n	8007332 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	88db      	ldrh	r3, [r3, #6]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d104      	bne.n	8007332 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007328:	7bbb      	ldrb	r3, [r7, #14]
 800732a:	4619      	mov	r1, r3
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f001 f867 	bl	8008400 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fccf 	bl	8007cd6 <USBD_CtlSendStatus>

              break;
 8007338:	e004      	b.n	8007344 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800733a:	6839      	ldr	r1, [r7, #0]
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 fc02 	bl	8007b46 <USBD_CtlError>
              break;
 8007342:	bf00      	nop
          }
          break;
 8007344:	e0e0      	b.n	8007508 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800734c:	2b02      	cmp	r3, #2
 800734e:	d002      	beq.n	8007356 <USBD_StdEPReq+0xfe>
 8007350:	2b03      	cmp	r3, #3
 8007352:	d015      	beq.n	8007380 <USBD_StdEPReq+0x128>
 8007354:	e026      	b.n	80073a4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007356:	7bbb      	ldrb	r3, [r7, #14]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00c      	beq.n	8007376 <USBD_StdEPReq+0x11e>
 800735c:	7bbb      	ldrb	r3, [r7, #14]
 800735e:	2b80      	cmp	r3, #128	; 0x80
 8007360:	d009      	beq.n	8007376 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007362:	7bbb      	ldrb	r3, [r7, #14]
 8007364:	4619      	mov	r1, r3
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f001 f84a 	bl	8008400 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800736c:	2180      	movs	r1, #128	; 0x80
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f001 f846 	bl	8008400 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007374:	e01c      	b.n	80073b0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007376:	6839      	ldr	r1, [r7, #0]
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 fbe4 	bl	8007b46 <USBD_CtlError>
              break;
 800737e:	e017      	b.n	80073b0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	885b      	ldrh	r3, [r3, #2]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d112      	bne.n	80073ae <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007388:	7bbb      	ldrb	r3, [r7, #14]
 800738a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800738e:	2b00      	cmp	r3, #0
 8007390:	d004      	beq.n	800739c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007392:	7bbb      	ldrb	r3, [r7, #14]
 8007394:	4619      	mov	r1, r3
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f001 f851 	bl	800843e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 fc9a 	bl	8007cd6 <USBD_CtlSendStatus>
              }
              break;
 80073a2:	e004      	b.n	80073ae <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80073a4:	6839      	ldr	r1, [r7, #0]
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fbcd 	bl	8007b46 <USBD_CtlError>
              break;
 80073ac:	e000      	b.n	80073b0 <USBD_StdEPReq+0x158>
              break;
 80073ae:	bf00      	nop
          }
          break;
 80073b0:	e0aa      	b.n	8007508 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d002      	beq.n	80073c2 <USBD_StdEPReq+0x16a>
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d032      	beq.n	8007426 <USBD_StdEPReq+0x1ce>
 80073c0:	e097      	b.n	80074f2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073c2:	7bbb      	ldrb	r3, [r7, #14]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d007      	beq.n	80073d8 <USBD_StdEPReq+0x180>
 80073c8:	7bbb      	ldrb	r3, [r7, #14]
 80073ca:	2b80      	cmp	r3, #128	; 0x80
 80073cc:	d004      	beq.n	80073d8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80073ce:	6839      	ldr	r1, [r7, #0]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fbb8 	bl	8007b46 <USBD_CtlError>
                break;
 80073d6:	e091      	b.n	80074fc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	da0b      	bge.n	80073f8 <USBD_StdEPReq+0x1a0>
 80073e0:	7bbb      	ldrb	r3, [r7, #14]
 80073e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073e6:	4613      	mov	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	3310      	adds	r3, #16
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	4413      	add	r3, r2
 80073f4:	3304      	adds	r3, #4
 80073f6:	e00b      	b.n	8007410 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073f8:	7bbb      	ldrb	r3, [r7, #14]
 80073fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073fe:	4613      	mov	r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4413      	add	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	4413      	add	r3, r2
 800740e:	3304      	adds	r3, #4
 8007410:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	2200      	movs	r2, #0
 8007416:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	2202      	movs	r2, #2
 800741c:	4619      	mov	r1, r3
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fbfb 	bl	8007c1a <USBD_CtlSendData>
              break;
 8007424:	e06a      	b.n	80074fc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007426:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800742a:	2b00      	cmp	r3, #0
 800742c:	da11      	bge.n	8007452 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800742e:	7bbb      	ldrb	r3, [r7, #14]
 8007430:	f003 020f 	and.w	r2, r3, #15
 8007434:	6879      	ldr	r1, [r7, #4]
 8007436:	4613      	mov	r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4413      	add	r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	440b      	add	r3, r1
 8007440:	3318      	adds	r3, #24
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d117      	bne.n	8007478 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007448:	6839      	ldr	r1, [r7, #0]
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 fb7b 	bl	8007b46 <USBD_CtlError>
                  break;
 8007450:	e054      	b.n	80074fc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007452:	7bbb      	ldrb	r3, [r7, #14]
 8007454:	f003 020f 	and.w	r2, r3, #15
 8007458:	6879      	ldr	r1, [r7, #4]
 800745a:	4613      	mov	r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4413      	add	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	440b      	add	r3, r1
 8007464:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d104      	bne.n	8007478 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fb68 	bl	8007b46 <USBD_CtlError>
                  break;
 8007476:	e041      	b.n	80074fc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007478:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800747c:	2b00      	cmp	r3, #0
 800747e:	da0b      	bge.n	8007498 <USBD_StdEPReq+0x240>
 8007480:	7bbb      	ldrb	r3, [r7, #14]
 8007482:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007486:	4613      	mov	r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4413      	add	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	3310      	adds	r3, #16
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	4413      	add	r3, r2
 8007494:	3304      	adds	r3, #4
 8007496:	e00b      	b.n	80074b0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007498:	7bbb      	ldrb	r3, [r7, #14]
 800749a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800749e:	4613      	mov	r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	4413      	add	r3, r2
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	4413      	add	r3, r2
 80074ae:	3304      	adds	r3, #4
 80074b0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80074b2:	7bbb      	ldrb	r3, [r7, #14]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d002      	beq.n	80074be <USBD_StdEPReq+0x266>
 80074b8:	7bbb      	ldrb	r3, [r7, #14]
 80074ba:	2b80      	cmp	r3, #128	; 0x80
 80074bc:	d103      	bne.n	80074c6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	2200      	movs	r2, #0
 80074c2:	601a      	str	r2, [r3, #0]
 80074c4:	e00e      	b.n	80074e4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80074c6:	7bbb      	ldrb	r3, [r7, #14]
 80074c8:	4619      	mov	r1, r3
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 ffd6 	bl	800847c <USBD_LL_IsStallEP>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d003      	beq.n	80074de <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	2201      	movs	r2, #1
 80074da:	601a      	str	r2, [r3, #0]
 80074dc:	e002      	b.n	80074e4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	2200      	movs	r2, #0
 80074e2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	2202      	movs	r2, #2
 80074e8:	4619      	mov	r1, r3
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 fb95 	bl	8007c1a <USBD_CtlSendData>
              break;
 80074f0:	e004      	b.n	80074fc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80074f2:	6839      	ldr	r1, [r7, #0]
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 fb26 	bl	8007b46 <USBD_CtlError>
              break;
 80074fa:	bf00      	nop
          }
          break;
 80074fc:	e004      	b.n	8007508 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80074fe:	6839      	ldr	r1, [r7, #0]
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fb20 	bl	8007b46 <USBD_CtlError>
          break;
 8007506:	bf00      	nop
      }
      break;
 8007508:	e004      	b.n	8007514 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800750a:	6839      	ldr	r1, [r7, #0]
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 fb1a 	bl	8007b46 <USBD_CtlError>
      break;
 8007512:	bf00      	nop
  }

  return ret;
 8007514:	7bfb      	ldrb	r3, [r7, #15]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
	...

08007520 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800752a:	2300      	movs	r3, #0
 800752c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800752e:	2300      	movs	r3, #0
 8007530:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007532:	2300      	movs	r3, #0
 8007534:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	885b      	ldrh	r3, [r3, #2]
 800753a:	0a1b      	lsrs	r3, r3, #8
 800753c:	b29b      	uxth	r3, r3
 800753e:	3b01      	subs	r3, #1
 8007540:	2b06      	cmp	r3, #6
 8007542:	f200 8128 	bhi.w	8007796 <USBD_GetDescriptor+0x276>
 8007546:	a201      	add	r2, pc, #4	; (adr r2, 800754c <USBD_GetDescriptor+0x2c>)
 8007548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800754c:	08007569 	.word	0x08007569
 8007550:	08007581 	.word	0x08007581
 8007554:	080075c1 	.word	0x080075c1
 8007558:	08007797 	.word	0x08007797
 800755c:	08007797 	.word	0x08007797
 8007560:	08007737 	.word	0x08007737
 8007564:	08007763 	.word	0x08007763
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	7c12      	ldrb	r2, [r2, #16]
 8007574:	f107 0108 	add.w	r1, r7, #8
 8007578:	4610      	mov	r0, r2
 800757a:	4798      	blx	r3
 800757c:	60f8      	str	r0, [r7, #12]
      break;
 800757e:	e112      	b.n	80077a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	7c1b      	ldrb	r3, [r3, #16]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d10d      	bne.n	80075a4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800758e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007590:	f107 0208 	add.w	r2, r7, #8
 8007594:	4610      	mov	r0, r2
 8007596:	4798      	blx	r3
 8007598:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	3301      	adds	r3, #1
 800759e:	2202      	movs	r2, #2
 80075a0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80075a2:	e100      	b.n	80077a6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ac:	f107 0208 	add.w	r2, r7, #8
 80075b0:	4610      	mov	r0, r2
 80075b2:	4798      	blx	r3
 80075b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	3301      	adds	r3, #1
 80075ba:	2202      	movs	r2, #2
 80075bc:	701a      	strb	r2, [r3, #0]
      break;
 80075be:	e0f2      	b.n	80077a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	885b      	ldrh	r3, [r3, #2]
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b05      	cmp	r3, #5
 80075c8:	f200 80ac 	bhi.w	8007724 <USBD_GetDescriptor+0x204>
 80075cc:	a201      	add	r2, pc, #4	; (adr r2, 80075d4 <USBD_GetDescriptor+0xb4>)
 80075ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d2:	bf00      	nop
 80075d4:	080075ed 	.word	0x080075ed
 80075d8:	08007621 	.word	0x08007621
 80075dc:	08007655 	.word	0x08007655
 80075e0:	08007689 	.word	0x08007689
 80075e4:	080076bd 	.word	0x080076bd
 80075e8:	080076f1 	.word	0x080076f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00b      	beq.n	8007610 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	7c12      	ldrb	r2, [r2, #16]
 8007604:	f107 0108 	add.w	r1, r7, #8
 8007608:	4610      	mov	r0, r2
 800760a:	4798      	blx	r3
 800760c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800760e:	e091      	b.n	8007734 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007610:	6839      	ldr	r1, [r7, #0]
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fa97 	bl	8007b46 <USBD_CtlError>
            err++;
 8007618:	7afb      	ldrb	r3, [r7, #11]
 800761a:	3301      	adds	r3, #1
 800761c:	72fb      	strb	r3, [r7, #11]
          break;
 800761e:	e089      	b.n	8007734 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00b      	beq.n	8007644 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	7c12      	ldrb	r2, [r2, #16]
 8007638:	f107 0108 	add.w	r1, r7, #8
 800763c:	4610      	mov	r0, r2
 800763e:	4798      	blx	r3
 8007640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007642:	e077      	b.n	8007734 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007644:	6839      	ldr	r1, [r7, #0]
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 fa7d 	bl	8007b46 <USBD_CtlError>
            err++;
 800764c:	7afb      	ldrb	r3, [r7, #11]
 800764e:	3301      	adds	r3, #1
 8007650:	72fb      	strb	r3, [r7, #11]
          break;
 8007652:	e06f      	b.n	8007734 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00b      	beq.n	8007678 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	7c12      	ldrb	r2, [r2, #16]
 800766c:	f107 0108 	add.w	r1, r7, #8
 8007670:	4610      	mov	r0, r2
 8007672:	4798      	blx	r3
 8007674:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007676:	e05d      	b.n	8007734 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007678:	6839      	ldr	r1, [r7, #0]
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 fa63 	bl	8007b46 <USBD_CtlError>
            err++;
 8007680:	7afb      	ldrb	r3, [r7, #11]
 8007682:	3301      	adds	r3, #1
 8007684:	72fb      	strb	r3, [r7, #11]
          break;
 8007686:	e055      	b.n	8007734 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00b      	beq.n	80076ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	7c12      	ldrb	r2, [r2, #16]
 80076a0:	f107 0108 	add.w	r1, r7, #8
 80076a4:	4610      	mov	r0, r2
 80076a6:	4798      	blx	r3
 80076a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076aa:	e043      	b.n	8007734 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076ac:	6839      	ldr	r1, [r7, #0]
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fa49 	bl	8007b46 <USBD_CtlError>
            err++;
 80076b4:	7afb      	ldrb	r3, [r7, #11]
 80076b6:	3301      	adds	r3, #1
 80076b8:	72fb      	strb	r3, [r7, #11]
          break;
 80076ba:	e03b      	b.n	8007734 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076c2:	695b      	ldr	r3, [r3, #20]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00b      	beq.n	80076e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076ce:	695b      	ldr	r3, [r3, #20]
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	7c12      	ldrb	r2, [r2, #16]
 80076d4:	f107 0108 	add.w	r1, r7, #8
 80076d8:	4610      	mov	r0, r2
 80076da:	4798      	blx	r3
 80076dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076de:	e029      	b.n	8007734 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076e0:	6839      	ldr	r1, [r7, #0]
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 fa2f 	bl	8007b46 <USBD_CtlError>
            err++;
 80076e8:	7afb      	ldrb	r3, [r7, #11]
 80076ea:	3301      	adds	r3, #1
 80076ec:	72fb      	strb	r3, [r7, #11]
          break;
 80076ee:	e021      	b.n	8007734 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00b      	beq.n	8007714 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007702:	699b      	ldr	r3, [r3, #24]
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	7c12      	ldrb	r2, [r2, #16]
 8007708:	f107 0108 	add.w	r1, r7, #8
 800770c:	4610      	mov	r0, r2
 800770e:	4798      	blx	r3
 8007710:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007712:	e00f      	b.n	8007734 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007714:	6839      	ldr	r1, [r7, #0]
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fa15 	bl	8007b46 <USBD_CtlError>
            err++;
 800771c:	7afb      	ldrb	r3, [r7, #11]
 800771e:	3301      	adds	r3, #1
 8007720:	72fb      	strb	r3, [r7, #11]
          break;
 8007722:	e007      	b.n	8007734 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007724:	6839      	ldr	r1, [r7, #0]
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 fa0d 	bl	8007b46 <USBD_CtlError>
          err++;
 800772c:	7afb      	ldrb	r3, [r7, #11]
 800772e:	3301      	adds	r3, #1
 8007730:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007732:	e038      	b.n	80077a6 <USBD_GetDescriptor+0x286>
 8007734:	e037      	b.n	80077a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	7c1b      	ldrb	r3, [r3, #16]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d109      	bne.n	8007752 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007746:	f107 0208 	add.w	r2, r7, #8
 800774a:	4610      	mov	r0, r2
 800774c:	4798      	blx	r3
 800774e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007750:	e029      	b.n	80077a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007752:	6839      	ldr	r1, [r7, #0]
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 f9f6 	bl	8007b46 <USBD_CtlError>
        err++;
 800775a:	7afb      	ldrb	r3, [r7, #11]
 800775c:	3301      	adds	r3, #1
 800775e:	72fb      	strb	r3, [r7, #11]
      break;
 8007760:	e021      	b.n	80077a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	7c1b      	ldrb	r3, [r3, #16]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10d      	bne.n	8007786 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007772:	f107 0208 	add.w	r2, r7, #8
 8007776:	4610      	mov	r0, r2
 8007778:	4798      	blx	r3
 800777a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	3301      	adds	r3, #1
 8007780:	2207      	movs	r2, #7
 8007782:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007784:	e00f      	b.n	80077a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007786:	6839      	ldr	r1, [r7, #0]
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f9dc 	bl	8007b46 <USBD_CtlError>
        err++;
 800778e:	7afb      	ldrb	r3, [r7, #11]
 8007790:	3301      	adds	r3, #1
 8007792:	72fb      	strb	r3, [r7, #11]
      break;
 8007794:	e007      	b.n	80077a6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007796:	6839      	ldr	r1, [r7, #0]
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f9d4 	bl	8007b46 <USBD_CtlError>
      err++;
 800779e:	7afb      	ldrb	r3, [r7, #11]
 80077a0:	3301      	adds	r3, #1
 80077a2:	72fb      	strb	r3, [r7, #11]
      break;
 80077a4:	bf00      	nop
  }

  if (err != 0U)
 80077a6:	7afb      	ldrb	r3, [r7, #11]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d11c      	bne.n	80077e6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80077ac:	893b      	ldrh	r3, [r7, #8]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d011      	beq.n	80077d6 <USBD_GetDescriptor+0x2b6>
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	88db      	ldrh	r3, [r3, #6]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00d      	beq.n	80077d6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	88da      	ldrh	r2, [r3, #6]
 80077be:	893b      	ldrh	r3, [r7, #8]
 80077c0:	4293      	cmp	r3, r2
 80077c2:	bf28      	it	cs
 80077c4:	4613      	movcs	r3, r2
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80077ca:	893b      	ldrh	r3, [r7, #8]
 80077cc:	461a      	mov	r2, r3
 80077ce:	68f9      	ldr	r1, [r7, #12]
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 fa22 	bl	8007c1a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	88db      	ldrh	r3, [r3, #6]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d104      	bne.n	80077e8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fa79 	bl	8007cd6 <USBD_CtlSendStatus>
 80077e4:	e000      	b.n	80077e8 <USBD_GetDescriptor+0x2c8>
    return;
 80077e6:	bf00      	nop
    }
  }
}
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop

080077f0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	889b      	ldrh	r3, [r3, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d130      	bne.n	8007864 <USBD_SetAddress+0x74>
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	88db      	ldrh	r3, [r3, #6]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d12c      	bne.n	8007864 <USBD_SetAddress+0x74>
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	885b      	ldrh	r3, [r3, #2]
 800780e:	2b7f      	cmp	r3, #127	; 0x7f
 8007810:	d828      	bhi.n	8007864 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	885b      	ldrh	r3, [r3, #2]
 8007816:	b2db      	uxtb	r3, r3
 8007818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800781c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007824:	2b03      	cmp	r3, #3
 8007826:	d104      	bne.n	8007832 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007828:	6839      	ldr	r1, [r7, #0]
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f98b 	bl	8007b46 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007830:	e01d      	b.n	800786e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	7bfa      	ldrb	r2, [r7, #15]
 8007836:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800783a:	7bfb      	ldrb	r3, [r7, #15]
 800783c:	4619      	mov	r1, r3
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fe48 	bl	80084d4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fa46 	bl	8007cd6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800784a:	7bfb      	ldrb	r3, [r7, #15]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d004      	beq.n	800785a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2202      	movs	r2, #2
 8007854:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007858:	e009      	b.n	800786e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2201      	movs	r2, #1
 800785e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007862:	e004      	b.n	800786e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f96d 	bl	8007b46 <USBD_CtlError>
  }
}
 800786c:	bf00      	nop
 800786e:	bf00      	nop
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
	...

08007878 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	885b      	ldrh	r3, [r3, #2]
 8007886:	b2da      	uxtb	r2, r3
 8007888:	4b41      	ldr	r3, [pc, #260]	; (8007990 <USBD_SetConfig+0x118>)
 800788a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800788c:	4b40      	ldr	r3, [pc, #256]	; (8007990 <USBD_SetConfig+0x118>)
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	2b01      	cmp	r3, #1
 8007892:	d904      	bls.n	800789e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f955 	bl	8007b46 <USBD_CtlError>
 800789c:	e075      	b.n	800798a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d002      	beq.n	80078ae <USBD_SetConfig+0x36>
 80078a8:	2b03      	cmp	r3, #3
 80078aa:	d023      	beq.n	80078f4 <USBD_SetConfig+0x7c>
 80078ac:	e062      	b.n	8007974 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80078ae:	4b38      	ldr	r3, [pc, #224]	; (8007990 <USBD_SetConfig+0x118>)
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d01a      	beq.n	80078ec <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80078b6:	4b36      	ldr	r3, [pc, #216]	; (8007990 <USBD_SetConfig+0x118>)
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	461a      	mov	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2203      	movs	r2, #3
 80078c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80078c8:	4b31      	ldr	r3, [pc, #196]	; (8007990 <USBD_SetConfig+0x118>)
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	4619      	mov	r1, r3
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7ff f9e7 	bl	8006ca2 <USBD_SetClassConfig>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d104      	bne.n	80078e4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80078da:	6839      	ldr	r1, [r7, #0]
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f932 	bl	8007b46 <USBD_CtlError>
            return;
 80078e2:	e052      	b.n	800798a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f9f6 	bl	8007cd6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80078ea:	e04e      	b.n	800798a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f9f2 	bl	8007cd6 <USBD_CtlSendStatus>
        break;
 80078f2:	e04a      	b.n	800798a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80078f4:	4b26      	ldr	r3, [pc, #152]	; (8007990 <USBD_SetConfig+0x118>)
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d112      	bne.n	8007922 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2202      	movs	r2, #2
 8007900:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007904:	4b22      	ldr	r3, [pc, #136]	; (8007990 <USBD_SetConfig+0x118>)
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	461a      	mov	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800790e:	4b20      	ldr	r3, [pc, #128]	; (8007990 <USBD_SetConfig+0x118>)
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	4619      	mov	r1, r3
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7ff f9e3 	bl	8006ce0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f9db 	bl	8007cd6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007920:	e033      	b.n	800798a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007922:	4b1b      	ldr	r3, [pc, #108]	; (8007990 <USBD_SetConfig+0x118>)
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	461a      	mov	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	429a      	cmp	r2, r3
 800792e:	d01d      	beq.n	800796c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	b2db      	uxtb	r3, r3
 8007936:	4619      	mov	r1, r3
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f7ff f9d1 	bl	8006ce0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800793e:	4b14      	ldr	r3, [pc, #80]	; (8007990 <USBD_SetConfig+0x118>)
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	461a      	mov	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007948:	4b11      	ldr	r3, [pc, #68]	; (8007990 <USBD_SetConfig+0x118>)
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	4619      	mov	r1, r3
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7ff f9a7 	bl	8006ca2 <USBD_SetClassConfig>
 8007954:	4603      	mov	r3, r0
 8007956:	2b02      	cmp	r3, #2
 8007958:	d104      	bne.n	8007964 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 f8f2 	bl	8007b46 <USBD_CtlError>
            return;
 8007962:	e012      	b.n	800798a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 f9b6 	bl	8007cd6 <USBD_CtlSendStatus>
        break;
 800796a:	e00e      	b.n	800798a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 f9b2 	bl	8007cd6 <USBD_CtlSendStatus>
        break;
 8007972:	e00a      	b.n	800798a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007974:	6839      	ldr	r1, [r7, #0]
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f8e5 	bl	8007b46 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800797c:	4b04      	ldr	r3, [pc, #16]	; (8007990 <USBD_SetConfig+0x118>)
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	4619      	mov	r1, r3
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f7ff f9ac 	bl	8006ce0 <USBD_ClrClassConfig>
        break;
 8007988:	bf00      	nop
    }
  }
}
 800798a:	3708      	adds	r7, #8
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}
 8007990:	20000258 	.word	0x20000258

08007994 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	88db      	ldrh	r3, [r3, #6]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d004      	beq.n	80079b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80079a6:	6839      	ldr	r1, [r7, #0]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f8cc 	bl	8007b46 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80079ae:	e022      	b.n	80079f6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	dc02      	bgt.n	80079c0 <USBD_GetConfig+0x2c>
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	dc03      	bgt.n	80079c6 <USBD_GetConfig+0x32>
 80079be:	e015      	b.n	80079ec <USBD_GetConfig+0x58>
 80079c0:	2b03      	cmp	r3, #3
 80079c2:	d00b      	beq.n	80079dc <USBD_GetConfig+0x48>
 80079c4:	e012      	b.n	80079ec <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	3308      	adds	r3, #8
 80079d0:	2201      	movs	r2, #1
 80079d2:	4619      	mov	r1, r3
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f920 	bl	8007c1a <USBD_CtlSendData>
        break;
 80079da:	e00c      	b.n	80079f6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	3304      	adds	r3, #4
 80079e0:	2201      	movs	r2, #1
 80079e2:	4619      	mov	r1, r3
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 f918 	bl	8007c1a <USBD_CtlSendData>
        break;
 80079ea:	e004      	b.n	80079f6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80079ec:	6839      	ldr	r1, [r7, #0]
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f8a9 	bl	8007b46 <USBD_CtlError>
        break;
 80079f4:	bf00      	nop
}
 80079f6:	bf00      	nop
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b082      	sub	sp, #8
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d81e      	bhi.n	8007a52 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	88db      	ldrh	r3, [r3, #6]
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d004      	beq.n	8007a26 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007a1c:	6839      	ldr	r1, [r7, #0]
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f891 	bl	8007b46 <USBD_CtlError>
        break;
 8007a24:	e01a      	b.n	8007a5c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d005      	beq.n	8007a42 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	f043 0202 	orr.w	r2, r3, #2
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	330c      	adds	r3, #12
 8007a46:	2202      	movs	r2, #2
 8007a48:	4619      	mov	r1, r3
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f8e5 	bl	8007c1a <USBD_CtlSendData>
      break;
 8007a50:	e004      	b.n	8007a5c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007a52:	6839      	ldr	r1, [r7, #0]
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f876 	bl	8007b46 <USBD_CtlError>
      break;
 8007a5a:	bf00      	nop
  }
}
 8007a5c:	bf00      	nop
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	885b      	ldrh	r3, [r3, #2]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d106      	bne.n	8007a84 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f929 	bl	8007cd6 <USBD_CtlSendStatus>
  }
}
 8007a84:	bf00      	nop
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d80b      	bhi.n	8007aba <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	885b      	ldrh	r3, [r3, #2]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d10c      	bne.n	8007ac4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f90f 	bl	8007cd6 <USBD_CtlSendStatus>
      }
      break;
 8007ab8:	e004      	b.n	8007ac4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f842 	bl	8007b46 <USBD_CtlError>
      break;
 8007ac2:	e000      	b.n	8007ac6 <USBD_ClrFeature+0x3a>
      break;
 8007ac4:	bf00      	nop
  }
}
 8007ac6:	bf00      	nop
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007ace:	b480      	push	{r7}
 8007ad0:	b083      	sub	sp, #12
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
 8007ad6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	781a      	ldrb	r2, [r3, #0]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	785a      	ldrb	r2, [r3, #1]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	3302      	adds	r3, #2
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	3303      	adds	r3, #3
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	021b      	lsls	r3, r3, #8
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	4413      	add	r3, r2
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	3304      	adds	r3, #4
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	b29a      	uxth	r2, r3
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	3305      	adds	r3, #5
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	021b      	lsls	r3, r3, #8
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	4413      	add	r3, r2
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	3306      	adds	r3, #6
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	3307      	adds	r3, #7
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	021b      	lsls	r3, r3, #8
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	4413      	add	r3, r2
 8007b36:	b29a      	uxth	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	80da      	strh	r2, [r3, #6]

}
 8007b3c:	bf00      	nop
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bc80      	pop	{r7}
 8007b44:	4770      	bx	lr

08007b46 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b082      	sub	sp, #8
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
 8007b4e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007b50:	2180      	movs	r1, #128	; 0x80
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fc54 	bl	8008400 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007b58:	2100      	movs	r1, #0
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 fc50 	bl	8008400 <USBD_LL_StallEP>
}
 8007b60:	bf00      	nop
 8007b62:	3708      	adds	r7, #8
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007b74:	2300      	movs	r3, #0
 8007b76:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d032      	beq.n	8007be4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f000 f834 	bl	8007bec <USBD_GetLen>
 8007b84:	4603      	mov	r3, r0
 8007b86:	3301      	adds	r3, #1
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	005b      	lsls	r3, r3, #1
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007b92:	7dfb      	ldrb	r3, [r7, #23]
 8007b94:	1c5a      	adds	r2, r3, #1
 8007b96:	75fa      	strb	r2, [r7, #23]
 8007b98:	461a      	mov	r2, r3
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	7812      	ldrb	r2, [r2, #0]
 8007ba2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007ba4:	7dfb      	ldrb	r3, [r7, #23]
 8007ba6:	1c5a      	adds	r2, r3, #1
 8007ba8:	75fa      	strb	r2, [r7, #23]
 8007baa:	461a      	mov	r2, r3
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	4413      	add	r3, r2
 8007bb0:	2203      	movs	r2, #3
 8007bb2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007bb4:	e012      	b.n	8007bdc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	1c5a      	adds	r2, r3, #1
 8007bba:	60fa      	str	r2, [r7, #12]
 8007bbc:	7dfa      	ldrb	r2, [r7, #23]
 8007bbe:	1c51      	adds	r1, r2, #1
 8007bc0:	75f9      	strb	r1, [r7, #23]
 8007bc2:	4611      	mov	r1, r2
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	440a      	add	r2, r1
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007bcc:	7dfb      	ldrb	r3, [r7, #23]
 8007bce:	1c5a      	adds	r2, r3, #1
 8007bd0:	75fa      	strb	r2, [r7, #23]
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	2200      	movs	r2, #0
 8007bda:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1e8      	bne.n	8007bb6 <USBD_GetString+0x4e>
    }
  }
}
 8007be4:	bf00      	nop
 8007be6:	3718      	adds	r7, #24
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007bf8:	e005      	b.n	8007c06 <USBD_GetLen+0x1a>
  {
    len++;
 8007bfa:	7bfb      	ldrb	r3, [r7, #15]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	3301      	adds	r3, #1
 8007c04:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1f5      	bne.n	8007bfa <USBD_GetLen+0xe>
  }

  return len;
 8007c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3714      	adds	r7, #20
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bc80      	pop	{r7}
 8007c18:	4770      	bx	lr

08007c1a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b084      	sub	sp, #16
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	60f8      	str	r0, [r7, #12]
 8007c22:	60b9      	str	r1, [r7, #8]
 8007c24:	4613      	mov	r3, r2
 8007c26:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007c30:	88fa      	ldrh	r2, [r7, #6]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007c36:	88fa      	ldrh	r2, [r7, #6]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c3c:	88fb      	ldrh	r3, [r7, #6]
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	2100      	movs	r1, #0
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f000 fc65 	bl	8008512 <USBD_LL_Transmit>

  return USBD_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b084      	sub	sp, #16
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	60f8      	str	r0, [r7, #12]
 8007c5a:	60b9      	str	r1, [r7, #8]
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c60:	88fb      	ldrh	r3, [r7, #6]
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	2100      	movs	r1, #0
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f000 fc53 	bl	8008512 <USBD_LL_Transmit>

  return USBD_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b084      	sub	sp, #16
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	60f8      	str	r0, [r7, #12]
 8007c7e:	60b9      	str	r1, [r7, #8]
 8007c80:	4613      	mov	r3, r2
 8007c82:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2203      	movs	r2, #3
 8007c88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007c8c:	88fa      	ldrh	r2, [r7, #6]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007c94:	88fa      	ldrh	r2, [r7, #6]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c9c:	88fb      	ldrh	r3, [r7, #6]
 8007c9e:	68ba      	ldr	r2, [r7, #8]
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f000 fc58 	bl	8008558 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b084      	sub	sp, #16
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	60f8      	str	r0, [r7, #12]
 8007cba:	60b9      	str	r1, [r7, #8]
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007cc0:	88fb      	ldrh	r3, [r7, #6]
 8007cc2:	68ba      	ldr	r2, [r7, #8]
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f000 fc46 	bl	8008558 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b082      	sub	sp, #8
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2204      	movs	r2, #4
 8007ce2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	2200      	movs	r2, #0
 8007cea:	2100      	movs	r1, #0
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fc10 	bl	8008512 <USBD_LL_Transmit>

  return USBD_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2205      	movs	r2, #5
 8007d08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	2200      	movs	r2, #0
 8007d10:	2100      	movs	r1, #0
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fc20 	bl	8008558 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
	...

08007d24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	4912      	ldr	r1, [pc, #72]	; (8007d74 <MX_USB_DEVICE_Init+0x50>)
 8007d2c:	4812      	ldr	r0, [pc, #72]	; (8007d78 <MX_USB_DEVICE_Init+0x54>)
 8007d2e:	f7fe ff5e 	bl	8006bee <USBD_Init>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d001      	beq.n	8007d3c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007d38:	f7f8 fb1a 	bl	8000370 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007d3c:	490f      	ldr	r1, [pc, #60]	; (8007d7c <MX_USB_DEVICE_Init+0x58>)
 8007d3e:	480e      	ldr	r0, [pc, #56]	; (8007d78 <MX_USB_DEVICE_Init+0x54>)
 8007d40:	f7fe ff80 	bl	8006c44 <USBD_RegisterClass>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d001      	beq.n	8007d4e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007d4a:	f7f8 fb11 	bl	8000370 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007d4e:	490c      	ldr	r1, [pc, #48]	; (8007d80 <MX_USB_DEVICE_Init+0x5c>)
 8007d50:	4809      	ldr	r0, [pc, #36]	; (8007d78 <MX_USB_DEVICE_Init+0x54>)
 8007d52:	f7fe feb1 	bl	8006ab8 <USBD_CDC_RegisterInterface>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007d5c:	f7f8 fb08 	bl	8000370 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007d60:	4805      	ldr	r0, [pc, #20]	; (8007d78 <MX_USB_DEVICE_Init+0x54>)
 8007d62:	f7fe ff88 	bl	8006c76 <USBD_Start>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d001      	beq.n	8007d70 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007d6c:	f7f8 fb00 	bl	8000370 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d70:	bf00      	nop
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	2000012c 	.word	0x2000012c
 8007d78:	2000025c 	.word	0x2000025c
 8007d7c:	20000018 	.word	0x20000018
 8007d80:	2000011c 	.word	0x2000011c

08007d84 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007d88:	2200      	movs	r2, #0
 8007d8a:	4905      	ldr	r1, [pc, #20]	; (8007da0 <CDC_Init_FS+0x1c>)
 8007d8c:	4805      	ldr	r0, [pc, #20]	; (8007da4 <CDC_Init_FS+0x20>)
 8007d8e:	f7fe fea9 	bl	8006ae4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007d92:	4905      	ldr	r1, [pc, #20]	; (8007da8 <CDC_Init_FS+0x24>)
 8007d94:	4803      	ldr	r0, [pc, #12]	; (8007da4 <CDC_Init_FS+0x20>)
 8007d96:	f7fe febe 	bl	8006b16 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007d9a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	20000920 	.word	0x20000920
 8007da4:	2000025c 	.word	0x2000025c
 8007da8:	20000520 	.word	0x20000520

08007dac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007dac:	b480      	push	{r7}
 8007dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007db0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bc80      	pop	{r7}
 8007db8:	4770      	bx	lr
	...

08007dbc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	6039      	str	r1, [r7, #0]
 8007dc6:	71fb      	strb	r3, [r7, #7]
 8007dc8:	4613      	mov	r3, r2
 8007dca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007dcc:	79fb      	ldrb	r3, [r7, #7]
 8007dce:	2b23      	cmp	r3, #35	; 0x23
 8007dd0:	d84a      	bhi.n	8007e68 <CDC_Control_FS+0xac>
 8007dd2:	a201      	add	r2, pc, #4	; (adr r2, 8007dd8 <CDC_Control_FS+0x1c>)
 8007dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd8:	08007e69 	.word	0x08007e69
 8007ddc:	08007e69 	.word	0x08007e69
 8007de0:	08007e69 	.word	0x08007e69
 8007de4:	08007e69 	.word	0x08007e69
 8007de8:	08007e69 	.word	0x08007e69
 8007dec:	08007e69 	.word	0x08007e69
 8007df0:	08007e69 	.word	0x08007e69
 8007df4:	08007e69 	.word	0x08007e69
 8007df8:	08007e69 	.word	0x08007e69
 8007dfc:	08007e69 	.word	0x08007e69
 8007e00:	08007e69 	.word	0x08007e69
 8007e04:	08007e69 	.word	0x08007e69
 8007e08:	08007e69 	.word	0x08007e69
 8007e0c:	08007e69 	.word	0x08007e69
 8007e10:	08007e69 	.word	0x08007e69
 8007e14:	08007e69 	.word	0x08007e69
 8007e18:	08007e69 	.word	0x08007e69
 8007e1c:	08007e69 	.word	0x08007e69
 8007e20:	08007e69 	.word	0x08007e69
 8007e24:	08007e69 	.word	0x08007e69
 8007e28:	08007e69 	.word	0x08007e69
 8007e2c:	08007e69 	.word	0x08007e69
 8007e30:	08007e69 	.word	0x08007e69
 8007e34:	08007e69 	.word	0x08007e69
 8007e38:	08007e69 	.word	0x08007e69
 8007e3c:	08007e69 	.word	0x08007e69
 8007e40:	08007e69 	.word	0x08007e69
 8007e44:	08007e69 	.word	0x08007e69
 8007e48:	08007e69 	.word	0x08007e69
 8007e4c:	08007e69 	.word	0x08007e69
 8007e50:	08007e69 	.word	0x08007e69
 8007e54:	08007e69 	.word	0x08007e69
 8007e58:	08007e69 	.word	0x08007e69
 8007e5c:	08007e69 	.word	0x08007e69
 8007e60:	08007e69 	.word	0x08007e69
 8007e64:	08007e69 	.word	0x08007e69
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007e68:	bf00      	nop
  }

  return (USBD_OK);
 8007e6a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bc80      	pop	{r7}
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop

08007e78 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007e82:	6879      	ldr	r1, [r7, #4]
 8007e84:	4805      	ldr	r0, [pc, #20]	; (8007e9c <CDC_Receive_FS+0x24>)
 8007e86:	f7fe fe46 	bl	8006b16 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007e8a:	4804      	ldr	r0, [pc, #16]	; (8007e9c <CDC_Receive_FS+0x24>)
 8007e8c:	f7fe fe85 	bl	8006b9a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007e90:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	2000025c 	.word	0x2000025c

08007ea0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007eac:	2300      	movs	r3, #0
 8007eae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007eb0:	4b0d      	ldr	r3, [pc, #52]	; (8007ee8 <CDC_Transmit_FS+0x48>)
 8007eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eb6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d001      	beq.n	8007ec6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e00b      	b.n	8007ede <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007ec6:	887b      	ldrh	r3, [r7, #2]
 8007ec8:	461a      	mov	r2, r3
 8007eca:	6879      	ldr	r1, [r7, #4]
 8007ecc:	4806      	ldr	r0, [pc, #24]	; (8007ee8 <CDC_Transmit_FS+0x48>)
 8007ece:	f7fe fe09 	bl	8006ae4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007ed2:	4805      	ldr	r0, [pc, #20]	; (8007ee8 <CDC_Transmit_FS+0x48>)
 8007ed4:	f7fe fe32 	bl	8006b3c <USBD_CDC_TransmitPacket>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	2000025c 	.word	0x2000025c

08007eec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	6039      	str	r1, [r7, #0]
 8007ef6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	2212      	movs	r2, #18
 8007efc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007efe:	4b03      	ldr	r3, [pc, #12]	; (8007f0c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bc80      	pop	{r7}
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	20000148 	.word	0x20000148

08007f10 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	4603      	mov	r3, r0
 8007f18:	6039      	str	r1, [r7, #0]
 8007f1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	2204      	movs	r2, #4
 8007f20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007f22:	4b03      	ldr	r3, [pc, #12]	; (8007f30 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bc80      	pop	{r7}
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	2000015c 	.word	0x2000015c

08007f34 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	6039      	str	r1, [r7, #0]
 8007f3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f40:	79fb      	ldrb	r3, [r7, #7]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d105      	bne.n	8007f52 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f46:	683a      	ldr	r2, [r7, #0]
 8007f48:	4907      	ldr	r1, [pc, #28]	; (8007f68 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f4a:	4808      	ldr	r0, [pc, #32]	; (8007f6c <USBD_FS_ProductStrDescriptor+0x38>)
 8007f4c:	f7ff fe0c 	bl	8007b68 <USBD_GetString>
 8007f50:	e004      	b.n	8007f5c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f52:	683a      	ldr	r2, [r7, #0]
 8007f54:	4904      	ldr	r1, [pc, #16]	; (8007f68 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f56:	4805      	ldr	r0, [pc, #20]	; (8007f6c <USBD_FS_ProductStrDescriptor+0x38>)
 8007f58:	f7ff fe06 	bl	8007b68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f5c:	4b02      	ldr	r3, [pc, #8]	; (8007f68 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	20000d20 	.word	0x20000d20
 8007f6c:	08008fe0 	.word	0x08008fe0

08007f70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	4603      	mov	r3, r0
 8007f78:	6039      	str	r1, [r7, #0]
 8007f7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007f7c:	683a      	ldr	r2, [r7, #0]
 8007f7e:	4904      	ldr	r1, [pc, #16]	; (8007f90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007f80:	4804      	ldr	r0, [pc, #16]	; (8007f94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007f82:	f7ff fdf1 	bl	8007b68 <USBD_GetString>
  return USBD_StrDesc;
 8007f86:	4b02      	ldr	r3, [pc, #8]	; (8007f90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3708      	adds	r7, #8
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	20000d20 	.word	0x20000d20
 8007f94:	08008ff8 	.word	0x08008ff8

08007f98 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	6039      	str	r1, [r7, #0]
 8007fa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	221a      	movs	r2, #26
 8007fa8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007faa:	f000 f843 	bl	8008034 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007fae:	4b02      	ldr	r3, [pc, #8]	; (8007fb8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	20000160 	.word	0x20000160

08007fbc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	6039      	str	r1, [r7, #0]
 8007fc6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007fc8:	79fb      	ldrb	r3, [r7, #7]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d105      	bne.n	8007fda <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007fce:	683a      	ldr	r2, [r7, #0]
 8007fd0:	4907      	ldr	r1, [pc, #28]	; (8007ff0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007fd2:	4808      	ldr	r0, [pc, #32]	; (8007ff4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007fd4:	f7ff fdc8 	bl	8007b68 <USBD_GetString>
 8007fd8:	e004      	b.n	8007fe4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007fda:	683a      	ldr	r2, [r7, #0]
 8007fdc:	4904      	ldr	r1, [pc, #16]	; (8007ff0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007fde:	4805      	ldr	r0, [pc, #20]	; (8007ff4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007fe0:	f7ff fdc2 	bl	8007b68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fe4:	4b02      	ldr	r3, [pc, #8]	; (8007ff0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	20000d20 	.word	0x20000d20
 8007ff4:	0800900c 	.word	0x0800900c

08007ff8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	4603      	mov	r3, r0
 8008000:	6039      	str	r1, [r7, #0]
 8008002:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008004:	79fb      	ldrb	r3, [r7, #7]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d105      	bne.n	8008016 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	4907      	ldr	r1, [pc, #28]	; (800802c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800800e:	4808      	ldr	r0, [pc, #32]	; (8008030 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008010:	f7ff fdaa 	bl	8007b68 <USBD_GetString>
 8008014:	e004      	b.n	8008020 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008016:	683a      	ldr	r2, [r7, #0]
 8008018:	4904      	ldr	r1, [pc, #16]	; (800802c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800801a:	4805      	ldr	r0, [pc, #20]	; (8008030 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800801c:	f7ff fda4 	bl	8007b68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008020:	4b02      	ldr	r3, [pc, #8]	; (800802c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008022:	4618      	mov	r0, r3
 8008024:	3708      	adds	r7, #8
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	20000d20 	.word	0x20000d20
 8008030:	08009018 	.word	0x08009018

08008034 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800803a:	4b0f      	ldr	r3, [pc, #60]	; (8008078 <Get_SerialNum+0x44>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008040:	4b0e      	ldr	r3, [pc, #56]	; (800807c <Get_SerialNum+0x48>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008046:	4b0e      	ldr	r3, [pc, #56]	; (8008080 <Get_SerialNum+0x4c>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4413      	add	r3, r2
 8008052:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d009      	beq.n	800806e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800805a:	2208      	movs	r2, #8
 800805c:	4909      	ldr	r1, [pc, #36]	; (8008084 <Get_SerialNum+0x50>)
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f000 f814 	bl	800808c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008064:	2204      	movs	r2, #4
 8008066:	4908      	ldr	r1, [pc, #32]	; (8008088 <Get_SerialNum+0x54>)
 8008068:	68b8      	ldr	r0, [r7, #8]
 800806a:	f000 f80f 	bl	800808c <IntToUnicode>
  }
}
 800806e:	bf00      	nop
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	1ffff7e8 	.word	0x1ffff7e8
 800807c:	1ffff7ec 	.word	0x1ffff7ec
 8008080:	1ffff7f0 	.word	0x1ffff7f0
 8008084:	20000162 	.word	0x20000162
 8008088:	20000172 	.word	0x20000172

0800808c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800808c:	b480      	push	{r7}
 800808e:	b087      	sub	sp, #28
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	4613      	mov	r3, r2
 8008098:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800809a:	2300      	movs	r3, #0
 800809c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800809e:	2300      	movs	r3, #0
 80080a0:	75fb      	strb	r3, [r7, #23]
 80080a2:	e027      	b.n	80080f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	0f1b      	lsrs	r3, r3, #28
 80080a8:	2b09      	cmp	r3, #9
 80080aa:	d80b      	bhi.n	80080c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	0f1b      	lsrs	r3, r3, #28
 80080b0:	b2da      	uxtb	r2, r3
 80080b2:	7dfb      	ldrb	r3, [r7, #23]
 80080b4:	005b      	lsls	r3, r3, #1
 80080b6:	4619      	mov	r1, r3
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	440b      	add	r3, r1
 80080bc:	3230      	adds	r2, #48	; 0x30
 80080be:	b2d2      	uxtb	r2, r2
 80080c0:	701a      	strb	r2, [r3, #0]
 80080c2:	e00a      	b.n	80080da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	0f1b      	lsrs	r3, r3, #28
 80080c8:	b2da      	uxtb	r2, r3
 80080ca:	7dfb      	ldrb	r3, [r7, #23]
 80080cc:	005b      	lsls	r3, r3, #1
 80080ce:	4619      	mov	r1, r3
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	440b      	add	r3, r1
 80080d4:	3237      	adds	r2, #55	; 0x37
 80080d6:	b2d2      	uxtb	r2, r2
 80080d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	011b      	lsls	r3, r3, #4
 80080de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80080e0:	7dfb      	ldrb	r3, [r7, #23]
 80080e2:	005b      	lsls	r3, r3, #1
 80080e4:	3301      	adds	r3, #1
 80080e6:	68ba      	ldr	r2, [r7, #8]
 80080e8:	4413      	add	r3, r2
 80080ea:	2200      	movs	r2, #0
 80080ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80080ee:	7dfb      	ldrb	r3, [r7, #23]
 80080f0:	3301      	adds	r3, #1
 80080f2:	75fb      	strb	r3, [r7, #23]
 80080f4:	7dfa      	ldrb	r2, [r7, #23]
 80080f6:	79fb      	ldrb	r3, [r7, #7]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d3d3      	bcc.n	80080a4 <IntToUnicode+0x18>
  }
}
 80080fc:	bf00      	nop
 80080fe:	bf00      	nop
 8008100:	371c      	adds	r7, #28
 8008102:	46bd      	mov	sp, r7
 8008104:	bc80      	pop	{r7}
 8008106:	4770      	bx	lr

08008108 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a0d      	ldr	r2, [pc, #52]	; (800814c <HAL_PCD_MspInit+0x44>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d113      	bne.n	8008142 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800811a:	4b0d      	ldr	r3, [pc, #52]	; (8008150 <HAL_PCD_MspInit+0x48>)
 800811c:	69db      	ldr	r3, [r3, #28]
 800811e:	4a0c      	ldr	r2, [pc, #48]	; (8008150 <HAL_PCD_MspInit+0x48>)
 8008120:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008124:	61d3      	str	r3, [r2, #28]
 8008126:	4b0a      	ldr	r3, [pc, #40]	; (8008150 <HAL_PCD_MspInit+0x48>)
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800812e:	60fb      	str	r3, [r7, #12]
 8008130:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008132:	2200      	movs	r2, #0
 8008134:	2100      	movs	r1, #0
 8008136:	2014      	movs	r0, #20
 8008138:	f7f8 fb5d 	bl	80007f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800813c:	2014      	movs	r0, #20
 800813e:	f7f8 fb76 	bl	800082e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008142:	bf00      	nop
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	40005c00 	.word	0x40005c00
 8008150:	40021000 	.word	0x40021000

08008154 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008168:	4619      	mov	r1, r3
 800816a:	4610      	mov	r0, r2
 800816c:	f7fe fdcb 	bl	8006d06 <USBD_LL_SetupStage>
}
 8008170:	bf00      	nop
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	460b      	mov	r3, r1
 8008182:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800818a:	78fa      	ldrb	r2, [r7, #3]
 800818c:	6879      	ldr	r1, [r7, #4]
 800818e:	4613      	mov	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	00db      	lsls	r3, r3, #3
 8008196:	440b      	add	r3, r1
 8008198:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	78fb      	ldrb	r3, [r7, #3]
 80081a0:	4619      	mov	r1, r3
 80081a2:	f7fe fdfd 	bl	8006da0 <USBD_LL_DataOutStage>
}
 80081a6:	bf00      	nop
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b082      	sub	sp, #8
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	460b      	mov	r3, r1
 80081b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80081c0:	78fa      	ldrb	r2, [r7, #3]
 80081c2:	6879      	ldr	r1, [r7, #4]
 80081c4:	4613      	mov	r3, r2
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	4413      	add	r3, r2
 80081ca:	00db      	lsls	r3, r3, #3
 80081cc:	440b      	add	r3, r1
 80081ce:	333c      	adds	r3, #60	; 0x3c
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	78fb      	ldrb	r3, [r7, #3]
 80081d4:	4619      	mov	r1, r3
 80081d6:	f7fe fe54 	bl	8006e82 <USBD_LL_DataInStage>
}
 80081da:	bf00      	nop
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b082      	sub	sp, #8
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7fe ff64 	bl	80070be <USBD_LL_SOF>
}
 80081f6:	bf00      	nop
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b084      	sub	sp, #16
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008206:	2301      	movs	r3, #1
 8008208:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	2b02      	cmp	r3, #2
 8008210:	d001      	beq.n	8008216 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008212:	f7f8 f8ad 	bl	8000370 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800821c:	7bfa      	ldrb	r2, [r7, #15]
 800821e:	4611      	mov	r1, r2
 8008220:	4618      	mov	r0, r3
 8008222:	f7fe ff14 	bl	800704e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800822c:	4618      	mov	r0, r3
 800822e:	f7fe fecd 	bl	8006fcc <USBD_LL_Reset>
}
 8008232:	bf00      	nop
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
	...

0800823c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800824a:	4618      	mov	r0, r3
 800824c:	f7fe ff0e 	bl	800706c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d005      	beq.n	8008264 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008258:	4b04      	ldr	r3, [pc, #16]	; (800826c <HAL_PCD_SuspendCallback+0x30>)
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	4a03      	ldr	r2, [pc, #12]	; (800826c <HAL_PCD_SuspendCallback+0x30>)
 800825e:	f043 0306 	orr.w	r3, r3, #6
 8008262:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008264:	bf00      	nop
 8008266:	3708      	adds	r7, #8
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	e000ed00 	.word	0xe000ed00

08008270 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800827e:	4618      	mov	r0, r3
 8008280:	f7fe ff08 	bl	8007094 <USBD_LL_Resume>
}
 8008284:	bf00      	nop
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008294:	4a28      	ldr	r2, [pc, #160]	; (8008338 <USBD_LL_Init+0xac>)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4a26      	ldr	r2, [pc, #152]	; (8008338 <USBD_LL_Init+0xac>)
 80082a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80082a4:	4b24      	ldr	r3, [pc, #144]	; (8008338 <USBD_LL_Init+0xac>)
 80082a6:	4a25      	ldr	r2, [pc, #148]	; (800833c <USBD_LL_Init+0xb0>)
 80082a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80082aa:	4b23      	ldr	r3, [pc, #140]	; (8008338 <USBD_LL_Init+0xac>)
 80082ac:	2208      	movs	r2, #8
 80082ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80082b0:	4b21      	ldr	r3, [pc, #132]	; (8008338 <USBD_LL_Init+0xac>)
 80082b2:	2202      	movs	r2, #2
 80082b4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80082b6:	4b20      	ldr	r3, [pc, #128]	; (8008338 <USBD_LL_Init+0xac>)
 80082b8:	2200      	movs	r2, #0
 80082ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80082bc:	4b1e      	ldr	r3, [pc, #120]	; (8008338 <USBD_LL_Init+0xac>)
 80082be:	2200      	movs	r2, #0
 80082c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80082c2:	4b1d      	ldr	r3, [pc, #116]	; (8008338 <USBD_LL_Init+0xac>)
 80082c4:	2200      	movs	r2, #0
 80082c6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80082c8:	481b      	ldr	r0, [pc, #108]	; (8008338 <USBD_LL_Init+0xac>)
 80082ca:	f7f9 fbfe 	bl	8001aca <HAL_PCD_Init>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d001      	beq.n	80082d8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80082d4:	f7f8 f84c 	bl	8000370 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80082de:	2318      	movs	r3, #24
 80082e0:	2200      	movs	r2, #0
 80082e2:	2100      	movs	r1, #0
 80082e4:	f7fb f91d 	bl	8003522 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80082ee:	2358      	movs	r3, #88	; 0x58
 80082f0:	2200      	movs	r2, #0
 80082f2:	2180      	movs	r1, #128	; 0x80
 80082f4:	f7fb f915 	bl	8003522 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80082fe:	23c0      	movs	r3, #192	; 0xc0
 8008300:	2200      	movs	r2, #0
 8008302:	2181      	movs	r1, #129	; 0x81
 8008304:	f7fb f90d 	bl	8003522 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800830e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008312:	2200      	movs	r2, #0
 8008314:	2101      	movs	r1, #1
 8008316:	f7fb f904 	bl	8003522 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008320:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008324:	2200      	movs	r2, #0
 8008326:	2182      	movs	r1, #130	; 0x82
 8008328:	f7fb f8fb 	bl	8003522 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3708      	adds	r7, #8
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	20000f20 	.word	0x20000f20
 800833c:	40005c00 	.word	0x40005c00

08008340 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008348:	2300      	movs	r3, #0
 800834a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800834c:	2300      	movs	r3, #0
 800834e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008356:	4618      	mov	r0, r3
 8008358:	f7f9 fcb6 	bl	8001cc8 <HAL_PCD_Start>
 800835c:	4603      	mov	r3, r0
 800835e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008360:	7bfb      	ldrb	r3, [r7, #15]
 8008362:	4618      	mov	r0, r3
 8008364:	f000 f94e 	bl	8008604 <USBD_Get_USB_Status>
 8008368:	4603      	mov	r3, r0
 800836a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800836c:	7bbb      	ldrb	r3, [r7, #14]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b084      	sub	sp, #16
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
 800837e:	4608      	mov	r0, r1
 8008380:	4611      	mov	r1, r2
 8008382:	461a      	mov	r2, r3
 8008384:	4603      	mov	r3, r0
 8008386:	70fb      	strb	r3, [r7, #3]
 8008388:	460b      	mov	r3, r1
 800838a:	70bb      	strb	r3, [r7, #2]
 800838c:	4613      	mov	r3, r2
 800838e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008390:	2300      	movs	r3, #0
 8008392:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008394:	2300      	movs	r3, #0
 8008396:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800839e:	78bb      	ldrb	r3, [r7, #2]
 80083a0:	883a      	ldrh	r2, [r7, #0]
 80083a2:	78f9      	ldrb	r1, [r7, #3]
 80083a4:	f7f9 fe0b 	bl	8001fbe <HAL_PCD_EP_Open>
 80083a8:	4603      	mov	r3, r0
 80083aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083ac:	7bfb      	ldrb	r3, [r7, #15]
 80083ae:	4618      	mov	r0, r3
 80083b0:	f000 f928 	bl	8008604 <USBD_Get_USB_Status>
 80083b4:	4603      	mov	r3, r0
 80083b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b084      	sub	sp, #16
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
 80083ca:	460b      	mov	r3, r1
 80083cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083ce:	2300      	movs	r3, #0
 80083d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083d2:	2300      	movs	r3, #0
 80083d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083dc:	78fa      	ldrb	r2, [r7, #3]
 80083de:	4611      	mov	r1, r2
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7f9 fe49 	bl	8002078 <HAL_PCD_EP_Close>
 80083e6:	4603      	mov	r3, r0
 80083e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083ea:	7bfb      	ldrb	r3, [r7, #15]
 80083ec:	4618      	mov	r0, r3
 80083ee:	f000 f909 	bl	8008604 <USBD_Get_USB_Status>
 80083f2:	4603      	mov	r3, r0
 80083f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3710      	adds	r7, #16
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	460b      	mov	r3, r1
 800840a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800840c:	2300      	movs	r3, #0
 800840e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008410:	2300      	movs	r3, #0
 8008412:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800841a:	78fa      	ldrb	r2, [r7, #3]
 800841c:	4611      	mov	r1, r2
 800841e:	4618      	mov	r0, r3
 8008420:	f7f9 fef1 	bl	8002206 <HAL_PCD_EP_SetStall>
 8008424:	4603      	mov	r3, r0
 8008426:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008428:	7bfb      	ldrb	r3, [r7, #15]
 800842a:	4618      	mov	r0, r3
 800842c:	f000 f8ea 	bl	8008604 <USBD_Get_USB_Status>
 8008430:	4603      	mov	r3, r0
 8008432:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008434:	7bbb      	ldrb	r3, [r7, #14]
}
 8008436:	4618      	mov	r0, r3
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b084      	sub	sp, #16
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
 8008446:	460b      	mov	r3, r1
 8008448:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800844a:	2300      	movs	r3, #0
 800844c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800844e:	2300      	movs	r3, #0
 8008450:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008458:	78fa      	ldrb	r2, [r7, #3]
 800845a:	4611      	mov	r1, r2
 800845c:	4618      	mov	r0, r3
 800845e:	f7f9 ff32 	bl	80022c6 <HAL_PCD_EP_ClrStall>
 8008462:	4603      	mov	r3, r0
 8008464:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008466:	7bfb      	ldrb	r3, [r7, #15]
 8008468:	4618      	mov	r0, r3
 800846a:	f000 f8cb 	bl	8008604 <USBD_Get_USB_Status>
 800846e:	4603      	mov	r3, r0
 8008470:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008472:	7bbb      	ldrb	r3, [r7, #14]
}
 8008474:	4618      	mov	r0, r3
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	460b      	mov	r3, r1
 8008486:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800848e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008490:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008494:	2b00      	cmp	r3, #0
 8008496:	da0c      	bge.n	80084b2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008498:	78fb      	ldrb	r3, [r7, #3]
 800849a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800849e:	68f9      	ldr	r1, [r7, #12]
 80084a0:	1c5a      	adds	r2, r3, #1
 80084a2:	4613      	mov	r3, r2
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	4413      	add	r3, r2
 80084a8:	00db      	lsls	r3, r3, #3
 80084aa:	440b      	add	r3, r1
 80084ac:	3302      	adds	r3, #2
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	e00b      	b.n	80084ca <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80084b2:	78fb      	ldrb	r3, [r7, #3]
 80084b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084b8:	68f9      	ldr	r1, [r7, #12]
 80084ba:	4613      	mov	r3, r2
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	4413      	add	r3, r2
 80084c0:	00db      	lsls	r3, r3, #3
 80084c2:	440b      	add	r3, r1
 80084c4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80084c8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bc80      	pop	{r7}
 80084d2:	4770      	bx	lr

080084d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	460b      	mov	r3, r1
 80084de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084e0:	2300      	movs	r3, #0
 80084e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084e4:	2300      	movs	r3, #0
 80084e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084ee:	78fa      	ldrb	r2, [r7, #3]
 80084f0:	4611      	mov	r1, r2
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7f9 fd3e 	bl	8001f74 <HAL_PCD_SetAddress>
 80084f8:	4603      	mov	r3, r0
 80084fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
 80084fe:	4618      	mov	r0, r3
 8008500:	f000 f880 	bl	8008604 <USBD_Get_USB_Status>
 8008504:	4603      	mov	r3, r0
 8008506:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008508:	7bbb      	ldrb	r3, [r7, #14]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b086      	sub	sp, #24
 8008516:	af00      	add	r7, sp, #0
 8008518:	60f8      	str	r0, [r7, #12]
 800851a:	607a      	str	r2, [r7, #4]
 800851c:	461a      	mov	r2, r3
 800851e:	460b      	mov	r3, r1
 8008520:	72fb      	strb	r3, [r7, #11]
 8008522:	4613      	mov	r3, r2
 8008524:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008526:	2300      	movs	r3, #0
 8008528:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800852a:	2300      	movs	r3, #0
 800852c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008534:	893b      	ldrh	r3, [r7, #8]
 8008536:	7af9      	ldrb	r1, [r7, #11]
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	f7f9 fe2d 	bl	8002198 <HAL_PCD_EP_Transmit>
 800853e:	4603      	mov	r3, r0
 8008540:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008542:	7dfb      	ldrb	r3, [r7, #23]
 8008544:	4618      	mov	r0, r3
 8008546:	f000 f85d 	bl	8008604 <USBD_Get_USB_Status>
 800854a:	4603      	mov	r3, r0
 800854c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800854e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008550:	4618      	mov	r0, r3
 8008552:	3718      	adds	r7, #24
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b086      	sub	sp, #24
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	607a      	str	r2, [r7, #4]
 8008562:	461a      	mov	r2, r3
 8008564:	460b      	mov	r3, r1
 8008566:	72fb      	strb	r3, [r7, #11]
 8008568:	4613      	mov	r3, r2
 800856a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800856c:	2300      	movs	r3, #0
 800856e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008570:	2300      	movs	r3, #0
 8008572:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800857a:	893b      	ldrh	r3, [r7, #8]
 800857c:	7af9      	ldrb	r1, [r7, #11]
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	f7f9 fdc2 	bl	8002108 <HAL_PCD_EP_Receive>
 8008584:	4603      	mov	r3, r0
 8008586:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008588:	7dfb      	ldrb	r3, [r7, #23]
 800858a:	4618      	mov	r0, r3
 800858c:	f000 f83a 	bl	8008604 <USBD_Get_USB_Status>
 8008590:	4603      	mov	r3, r0
 8008592:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008594:	7dbb      	ldrb	r3, [r7, #22]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3718      	adds	r7, #24
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b082      	sub	sp, #8
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
 80085a6:	460b      	mov	r3, r1
 80085a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085b0:	78fa      	ldrb	r2, [r7, #3]
 80085b2:	4611      	mov	r1, r2
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7f9 fdd8 	bl	800216a <HAL_PCD_EP_GetRxCount>
 80085ba:	4603      	mov	r3, r0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3708      	adds	r7, #8
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80085cc:	4b02      	ldr	r3, [pc, #8]	; (80085d8 <USBD_static_malloc+0x14>)
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	370c      	adds	r7, #12
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bc80      	pop	{r7}
 80085d6:	4770      	bx	lr
 80085d8:	20001210 	.word	0x20001210

080085dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]

}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bc80      	pop	{r7}
 80085ec:	4770      	bx	lr

080085ee <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085ee:	b480      	push	{r7}
 80085f0:	b083      	sub	sp, #12
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
 80085f6:	460b      	mov	r3, r1
 80085f8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80085fa:	bf00      	nop
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	bc80      	pop	{r7}
 8008602:	4770      	bx	lr

08008604 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
 800860a:	4603      	mov	r3, r0
 800860c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800860e:	2300      	movs	r3, #0
 8008610:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008612:	79fb      	ldrb	r3, [r7, #7]
 8008614:	2b03      	cmp	r3, #3
 8008616:	d817      	bhi.n	8008648 <USBD_Get_USB_Status+0x44>
 8008618:	a201      	add	r2, pc, #4	; (adr r2, 8008620 <USBD_Get_USB_Status+0x1c>)
 800861a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800861e:	bf00      	nop
 8008620:	08008631 	.word	0x08008631
 8008624:	08008637 	.word	0x08008637
 8008628:	0800863d 	.word	0x0800863d
 800862c:	08008643 	.word	0x08008643
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008630:	2300      	movs	r3, #0
 8008632:	73fb      	strb	r3, [r7, #15]
    break;
 8008634:	e00b      	b.n	800864e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008636:	2302      	movs	r3, #2
 8008638:	73fb      	strb	r3, [r7, #15]
    break;
 800863a:	e008      	b.n	800864e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800863c:	2301      	movs	r3, #1
 800863e:	73fb      	strb	r3, [r7, #15]
    break;
 8008640:	e005      	b.n	800864e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008642:	2302      	movs	r3, #2
 8008644:	73fb      	strb	r3, [r7, #15]
    break;
 8008646:	e002      	b.n	800864e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008648:	2302      	movs	r3, #2
 800864a:	73fb      	strb	r3, [r7, #15]
    break;
 800864c:	bf00      	nop
  }
  return usb_status;
 800864e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008650:	4618      	mov	r0, r3
 8008652:	3714      	adds	r7, #20
 8008654:	46bd      	mov	sp, r7
 8008656:	bc80      	pop	{r7}
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop

0800865c <__errno>:
 800865c:	4b01      	ldr	r3, [pc, #4]	; (8008664 <__errno+0x8>)
 800865e:	6818      	ldr	r0, [r3, #0]
 8008660:	4770      	bx	lr
 8008662:	bf00      	nop
 8008664:	2000017c 	.word	0x2000017c

08008668 <__libc_init_array>:
 8008668:	b570      	push	{r4, r5, r6, lr}
 800866a:	2600      	movs	r6, #0
 800866c:	4d0c      	ldr	r5, [pc, #48]	; (80086a0 <__libc_init_array+0x38>)
 800866e:	4c0d      	ldr	r4, [pc, #52]	; (80086a4 <__libc_init_array+0x3c>)
 8008670:	1b64      	subs	r4, r4, r5
 8008672:	10a4      	asrs	r4, r4, #2
 8008674:	42a6      	cmp	r6, r4
 8008676:	d109      	bne.n	800868c <__libc_init_array+0x24>
 8008678:	f000 fc9c 	bl	8008fb4 <_init>
 800867c:	2600      	movs	r6, #0
 800867e:	4d0a      	ldr	r5, [pc, #40]	; (80086a8 <__libc_init_array+0x40>)
 8008680:	4c0a      	ldr	r4, [pc, #40]	; (80086ac <__libc_init_array+0x44>)
 8008682:	1b64      	subs	r4, r4, r5
 8008684:	10a4      	asrs	r4, r4, #2
 8008686:	42a6      	cmp	r6, r4
 8008688:	d105      	bne.n	8008696 <__libc_init_array+0x2e>
 800868a:	bd70      	pop	{r4, r5, r6, pc}
 800868c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008690:	4798      	blx	r3
 8008692:	3601      	adds	r6, #1
 8008694:	e7ee      	b.n	8008674 <__libc_init_array+0xc>
 8008696:	f855 3b04 	ldr.w	r3, [r5], #4
 800869a:	4798      	blx	r3
 800869c:	3601      	adds	r6, #1
 800869e:	e7f2      	b.n	8008686 <__libc_init_array+0x1e>
 80086a0:	08009088 	.word	0x08009088
 80086a4:	08009088 	.word	0x08009088
 80086a8:	08009088 	.word	0x08009088
 80086ac:	0800908c 	.word	0x0800908c

080086b0 <memset>:
 80086b0:	4603      	mov	r3, r0
 80086b2:	4402      	add	r2, r0
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d100      	bne.n	80086ba <memset+0xa>
 80086b8:	4770      	bx	lr
 80086ba:	f803 1b01 	strb.w	r1, [r3], #1
 80086be:	e7f9      	b.n	80086b4 <memset+0x4>

080086c0 <siprintf>:
 80086c0:	b40e      	push	{r1, r2, r3}
 80086c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086c6:	b500      	push	{lr}
 80086c8:	b09c      	sub	sp, #112	; 0x70
 80086ca:	ab1d      	add	r3, sp, #116	; 0x74
 80086cc:	9002      	str	r0, [sp, #8]
 80086ce:	9006      	str	r0, [sp, #24]
 80086d0:	9107      	str	r1, [sp, #28]
 80086d2:	9104      	str	r1, [sp, #16]
 80086d4:	4808      	ldr	r0, [pc, #32]	; (80086f8 <siprintf+0x38>)
 80086d6:	4909      	ldr	r1, [pc, #36]	; (80086fc <siprintf+0x3c>)
 80086d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80086dc:	9105      	str	r1, [sp, #20]
 80086de:	6800      	ldr	r0, [r0, #0]
 80086e0:	a902      	add	r1, sp, #8
 80086e2:	9301      	str	r3, [sp, #4]
 80086e4:	f000 f868 	bl	80087b8 <_svfiprintf_r>
 80086e8:	2200      	movs	r2, #0
 80086ea:	9b02      	ldr	r3, [sp, #8]
 80086ec:	701a      	strb	r2, [r3, #0]
 80086ee:	b01c      	add	sp, #112	; 0x70
 80086f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80086f4:	b003      	add	sp, #12
 80086f6:	4770      	bx	lr
 80086f8:	2000017c 	.word	0x2000017c
 80086fc:	ffff0208 	.word	0xffff0208

08008700 <__ssputs_r>:
 8008700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008704:	688e      	ldr	r6, [r1, #8]
 8008706:	4682      	mov	sl, r0
 8008708:	429e      	cmp	r6, r3
 800870a:	460c      	mov	r4, r1
 800870c:	4690      	mov	r8, r2
 800870e:	461f      	mov	r7, r3
 8008710:	d838      	bhi.n	8008784 <__ssputs_r+0x84>
 8008712:	898a      	ldrh	r2, [r1, #12]
 8008714:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008718:	d032      	beq.n	8008780 <__ssputs_r+0x80>
 800871a:	6825      	ldr	r5, [r4, #0]
 800871c:	6909      	ldr	r1, [r1, #16]
 800871e:	3301      	adds	r3, #1
 8008720:	eba5 0901 	sub.w	r9, r5, r1
 8008724:	6965      	ldr	r5, [r4, #20]
 8008726:	444b      	add	r3, r9
 8008728:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800872c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008730:	106d      	asrs	r5, r5, #1
 8008732:	429d      	cmp	r5, r3
 8008734:	bf38      	it	cc
 8008736:	461d      	movcc	r5, r3
 8008738:	0553      	lsls	r3, r2, #21
 800873a:	d531      	bpl.n	80087a0 <__ssputs_r+0xa0>
 800873c:	4629      	mov	r1, r5
 800873e:	f000 fb6f 	bl	8008e20 <_malloc_r>
 8008742:	4606      	mov	r6, r0
 8008744:	b950      	cbnz	r0, 800875c <__ssputs_r+0x5c>
 8008746:	230c      	movs	r3, #12
 8008748:	f04f 30ff 	mov.w	r0, #4294967295
 800874c:	f8ca 3000 	str.w	r3, [sl]
 8008750:	89a3      	ldrh	r3, [r4, #12]
 8008752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008756:	81a3      	strh	r3, [r4, #12]
 8008758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800875c:	464a      	mov	r2, r9
 800875e:	6921      	ldr	r1, [r4, #16]
 8008760:	f000 face 	bl	8008d00 <memcpy>
 8008764:	89a3      	ldrh	r3, [r4, #12]
 8008766:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800876a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800876e:	81a3      	strh	r3, [r4, #12]
 8008770:	6126      	str	r6, [r4, #16]
 8008772:	444e      	add	r6, r9
 8008774:	6026      	str	r6, [r4, #0]
 8008776:	463e      	mov	r6, r7
 8008778:	6165      	str	r5, [r4, #20]
 800877a:	eba5 0509 	sub.w	r5, r5, r9
 800877e:	60a5      	str	r5, [r4, #8]
 8008780:	42be      	cmp	r6, r7
 8008782:	d900      	bls.n	8008786 <__ssputs_r+0x86>
 8008784:	463e      	mov	r6, r7
 8008786:	4632      	mov	r2, r6
 8008788:	4641      	mov	r1, r8
 800878a:	6820      	ldr	r0, [r4, #0]
 800878c:	f000 fac6 	bl	8008d1c <memmove>
 8008790:	68a3      	ldr	r3, [r4, #8]
 8008792:	2000      	movs	r0, #0
 8008794:	1b9b      	subs	r3, r3, r6
 8008796:	60a3      	str	r3, [r4, #8]
 8008798:	6823      	ldr	r3, [r4, #0]
 800879a:	4433      	add	r3, r6
 800879c:	6023      	str	r3, [r4, #0]
 800879e:	e7db      	b.n	8008758 <__ssputs_r+0x58>
 80087a0:	462a      	mov	r2, r5
 80087a2:	f000 fbb1 	bl	8008f08 <_realloc_r>
 80087a6:	4606      	mov	r6, r0
 80087a8:	2800      	cmp	r0, #0
 80087aa:	d1e1      	bne.n	8008770 <__ssputs_r+0x70>
 80087ac:	4650      	mov	r0, sl
 80087ae:	6921      	ldr	r1, [r4, #16]
 80087b0:	f000 face 	bl	8008d50 <_free_r>
 80087b4:	e7c7      	b.n	8008746 <__ssputs_r+0x46>
	...

080087b8 <_svfiprintf_r>:
 80087b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087bc:	4698      	mov	r8, r3
 80087be:	898b      	ldrh	r3, [r1, #12]
 80087c0:	4607      	mov	r7, r0
 80087c2:	061b      	lsls	r3, r3, #24
 80087c4:	460d      	mov	r5, r1
 80087c6:	4614      	mov	r4, r2
 80087c8:	b09d      	sub	sp, #116	; 0x74
 80087ca:	d50e      	bpl.n	80087ea <_svfiprintf_r+0x32>
 80087cc:	690b      	ldr	r3, [r1, #16]
 80087ce:	b963      	cbnz	r3, 80087ea <_svfiprintf_r+0x32>
 80087d0:	2140      	movs	r1, #64	; 0x40
 80087d2:	f000 fb25 	bl	8008e20 <_malloc_r>
 80087d6:	6028      	str	r0, [r5, #0]
 80087d8:	6128      	str	r0, [r5, #16]
 80087da:	b920      	cbnz	r0, 80087e6 <_svfiprintf_r+0x2e>
 80087dc:	230c      	movs	r3, #12
 80087de:	603b      	str	r3, [r7, #0]
 80087e0:	f04f 30ff 	mov.w	r0, #4294967295
 80087e4:	e0d1      	b.n	800898a <_svfiprintf_r+0x1d2>
 80087e6:	2340      	movs	r3, #64	; 0x40
 80087e8:	616b      	str	r3, [r5, #20]
 80087ea:	2300      	movs	r3, #0
 80087ec:	9309      	str	r3, [sp, #36]	; 0x24
 80087ee:	2320      	movs	r3, #32
 80087f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087f4:	2330      	movs	r3, #48	; 0x30
 80087f6:	f04f 0901 	mov.w	r9, #1
 80087fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80087fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80089a4 <_svfiprintf_r+0x1ec>
 8008802:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008806:	4623      	mov	r3, r4
 8008808:	469a      	mov	sl, r3
 800880a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800880e:	b10a      	cbz	r2, 8008814 <_svfiprintf_r+0x5c>
 8008810:	2a25      	cmp	r2, #37	; 0x25
 8008812:	d1f9      	bne.n	8008808 <_svfiprintf_r+0x50>
 8008814:	ebba 0b04 	subs.w	fp, sl, r4
 8008818:	d00b      	beq.n	8008832 <_svfiprintf_r+0x7a>
 800881a:	465b      	mov	r3, fp
 800881c:	4622      	mov	r2, r4
 800881e:	4629      	mov	r1, r5
 8008820:	4638      	mov	r0, r7
 8008822:	f7ff ff6d 	bl	8008700 <__ssputs_r>
 8008826:	3001      	adds	r0, #1
 8008828:	f000 80aa 	beq.w	8008980 <_svfiprintf_r+0x1c8>
 800882c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800882e:	445a      	add	r2, fp
 8008830:	9209      	str	r2, [sp, #36]	; 0x24
 8008832:	f89a 3000 	ldrb.w	r3, [sl]
 8008836:	2b00      	cmp	r3, #0
 8008838:	f000 80a2 	beq.w	8008980 <_svfiprintf_r+0x1c8>
 800883c:	2300      	movs	r3, #0
 800883e:	f04f 32ff 	mov.w	r2, #4294967295
 8008842:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008846:	f10a 0a01 	add.w	sl, sl, #1
 800884a:	9304      	str	r3, [sp, #16]
 800884c:	9307      	str	r3, [sp, #28]
 800884e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008852:	931a      	str	r3, [sp, #104]	; 0x68
 8008854:	4654      	mov	r4, sl
 8008856:	2205      	movs	r2, #5
 8008858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800885c:	4851      	ldr	r0, [pc, #324]	; (80089a4 <_svfiprintf_r+0x1ec>)
 800885e:	f000 fa41 	bl	8008ce4 <memchr>
 8008862:	9a04      	ldr	r2, [sp, #16]
 8008864:	b9d8      	cbnz	r0, 800889e <_svfiprintf_r+0xe6>
 8008866:	06d0      	lsls	r0, r2, #27
 8008868:	bf44      	itt	mi
 800886a:	2320      	movmi	r3, #32
 800886c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008870:	0711      	lsls	r1, r2, #28
 8008872:	bf44      	itt	mi
 8008874:	232b      	movmi	r3, #43	; 0x2b
 8008876:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800887a:	f89a 3000 	ldrb.w	r3, [sl]
 800887e:	2b2a      	cmp	r3, #42	; 0x2a
 8008880:	d015      	beq.n	80088ae <_svfiprintf_r+0xf6>
 8008882:	4654      	mov	r4, sl
 8008884:	2000      	movs	r0, #0
 8008886:	f04f 0c0a 	mov.w	ip, #10
 800888a:	9a07      	ldr	r2, [sp, #28]
 800888c:	4621      	mov	r1, r4
 800888e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008892:	3b30      	subs	r3, #48	; 0x30
 8008894:	2b09      	cmp	r3, #9
 8008896:	d94e      	bls.n	8008936 <_svfiprintf_r+0x17e>
 8008898:	b1b0      	cbz	r0, 80088c8 <_svfiprintf_r+0x110>
 800889a:	9207      	str	r2, [sp, #28]
 800889c:	e014      	b.n	80088c8 <_svfiprintf_r+0x110>
 800889e:	eba0 0308 	sub.w	r3, r0, r8
 80088a2:	fa09 f303 	lsl.w	r3, r9, r3
 80088a6:	4313      	orrs	r3, r2
 80088a8:	46a2      	mov	sl, r4
 80088aa:	9304      	str	r3, [sp, #16]
 80088ac:	e7d2      	b.n	8008854 <_svfiprintf_r+0x9c>
 80088ae:	9b03      	ldr	r3, [sp, #12]
 80088b0:	1d19      	adds	r1, r3, #4
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	9103      	str	r1, [sp, #12]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	bfbb      	ittet	lt
 80088ba:	425b      	neglt	r3, r3
 80088bc:	f042 0202 	orrlt.w	r2, r2, #2
 80088c0:	9307      	strge	r3, [sp, #28]
 80088c2:	9307      	strlt	r3, [sp, #28]
 80088c4:	bfb8      	it	lt
 80088c6:	9204      	strlt	r2, [sp, #16]
 80088c8:	7823      	ldrb	r3, [r4, #0]
 80088ca:	2b2e      	cmp	r3, #46	; 0x2e
 80088cc:	d10c      	bne.n	80088e8 <_svfiprintf_r+0x130>
 80088ce:	7863      	ldrb	r3, [r4, #1]
 80088d0:	2b2a      	cmp	r3, #42	; 0x2a
 80088d2:	d135      	bne.n	8008940 <_svfiprintf_r+0x188>
 80088d4:	9b03      	ldr	r3, [sp, #12]
 80088d6:	3402      	adds	r4, #2
 80088d8:	1d1a      	adds	r2, r3, #4
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	9203      	str	r2, [sp, #12]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	bfb8      	it	lt
 80088e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80088e6:	9305      	str	r3, [sp, #20]
 80088e8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80089a8 <_svfiprintf_r+0x1f0>
 80088ec:	2203      	movs	r2, #3
 80088ee:	4650      	mov	r0, sl
 80088f0:	7821      	ldrb	r1, [r4, #0]
 80088f2:	f000 f9f7 	bl	8008ce4 <memchr>
 80088f6:	b140      	cbz	r0, 800890a <_svfiprintf_r+0x152>
 80088f8:	2340      	movs	r3, #64	; 0x40
 80088fa:	eba0 000a 	sub.w	r0, r0, sl
 80088fe:	fa03 f000 	lsl.w	r0, r3, r0
 8008902:	9b04      	ldr	r3, [sp, #16]
 8008904:	3401      	adds	r4, #1
 8008906:	4303      	orrs	r3, r0
 8008908:	9304      	str	r3, [sp, #16]
 800890a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800890e:	2206      	movs	r2, #6
 8008910:	4826      	ldr	r0, [pc, #152]	; (80089ac <_svfiprintf_r+0x1f4>)
 8008912:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008916:	f000 f9e5 	bl	8008ce4 <memchr>
 800891a:	2800      	cmp	r0, #0
 800891c:	d038      	beq.n	8008990 <_svfiprintf_r+0x1d8>
 800891e:	4b24      	ldr	r3, [pc, #144]	; (80089b0 <_svfiprintf_r+0x1f8>)
 8008920:	bb1b      	cbnz	r3, 800896a <_svfiprintf_r+0x1b2>
 8008922:	9b03      	ldr	r3, [sp, #12]
 8008924:	3307      	adds	r3, #7
 8008926:	f023 0307 	bic.w	r3, r3, #7
 800892a:	3308      	adds	r3, #8
 800892c:	9303      	str	r3, [sp, #12]
 800892e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008930:	4433      	add	r3, r6
 8008932:	9309      	str	r3, [sp, #36]	; 0x24
 8008934:	e767      	b.n	8008806 <_svfiprintf_r+0x4e>
 8008936:	460c      	mov	r4, r1
 8008938:	2001      	movs	r0, #1
 800893a:	fb0c 3202 	mla	r2, ip, r2, r3
 800893e:	e7a5      	b.n	800888c <_svfiprintf_r+0xd4>
 8008940:	2300      	movs	r3, #0
 8008942:	f04f 0c0a 	mov.w	ip, #10
 8008946:	4619      	mov	r1, r3
 8008948:	3401      	adds	r4, #1
 800894a:	9305      	str	r3, [sp, #20]
 800894c:	4620      	mov	r0, r4
 800894e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008952:	3a30      	subs	r2, #48	; 0x30
 8008954:	2a09      	cmp	r2, #9
 8008956:	d903      	bls.n	8008960 <_svfiprintf_r+0x1a8>
 8008958:	2b00      	cmp	r3, #0
 800895a:	d0c5      	beq.n	80088e8 <_svfiprintf_r+0x130>
 800895c:	9105      	str	r1, [sp, #20]
 800895e:	e7c3      	b.n	80088e8 <_svfiprintf_r+0x130>
 8008960:	4604      	mov	r4, r0
 8008962:	2301      	movs	r3, #1
 8008964:	fb0c 2101 	mla	r1, ip, r1, r2
 8008968:	e7f0      	b.n	800894c <_svfiprintf_r+0x194>
 800896a:	ab03      	add	r3, sp, #12
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	462a      	mov	r2, r5
 8008970:	4638      	mov	r0, r7
 8008972:	4b10      	ldr	r3, [pc, #64]	; (80089b4 <_svfiprintf_r+0x1fc>)
 8008974:	a904      	add	r1, sp, #16
 8008976:	f3af 8000 	nop.w
 800897a:	1c42      	adds	r2, r0, #1
 800897c:	4606      	mov	r6, r0
 800897e:	d1d6      	bne.n	800892e <_svfiprintf_r+0x176>
 8008980:	89ab      	ldrh	r3, [r5, #12]
 8008982:	065b      	lsls	r3, r3, #25
 8008984:	f53f af2c 	bmi.w	80087e0 <_svfiprintf_r+0x28>
 8008988:	9809      	ldr	r0, [sp, #36]	; 0x24
 800898a:	b01d      	add	sp, #116	; 0x74
 800898c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008990:	ab03      	add	r3, sp, #12
 8008992:	9300      	str	r3, [sp, #0]
 8008994:	462a      	mov	r2, r5
 8008996:	4638      	mov	r0, r7
 8008998:	4b06      	ldr	r3, [pc, #24]	; (80089b4 <_svfiprintf_r+0x1fc>)
 800899a:	a904      	add	r1, sp, #16
 800899c:	f000 f87c 	bl	8008a98 <_printf_i>
 80089a0:	e7eb      	b.n	800897a <_svfiprintf_r+0x1c2>
 80089a2:	bf00      	nop
 80089a4:	08009052 	.word	0x08009052
 80089a8:	08009058 	.word	0x08009058
 80089ac:	0800905c 	.word	0x0800905c
 80089b0:	00000000 	.word	0x00000000
 80089b4:	08008701 	.word	0x08008701

080089b8 <_printf_common>:
 80089b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089bc:	4616      	mov	r6, r2
 80089be:	4699      	mov	r9, r3
 80089c0:	688a      	ldr	r2, [r1, #8]
 80089c2:	690b      	ldr	r3, [r1, #16]
 80089c4:	4607      	mov	r7, r0
 80089c6:	4293      	cmp	r3, r2
 80089c8:	bfb8      	it	lt
 80089ca:	4613      	movlt	r3, r2
 80089cc:	6033      	str	r3, [r6, #0]
 80089ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089d2:	460c      	mov	r4, r1
 80089d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089d8:	b10a      	cbz	r2, 80089de <_printf_common+0x26>
 80089da:	3301      	adds	r3, #1
 80089dc:	6033      	str	r3, [r6, #0]
 80089de:	6823      	ldr	r3, [r4, #0]
 80089e0:	0699      	lsls	r1, r3, #26
 80089e2:	bf42      	ittt	mi
 80089e4:	6833      	ldrmi	r3, [r6, #0]
 80089e6:	3302      	addmi	r3, #2
 80089e8:	6033      	strmi	r3, [r6, #0]
 80089ea:	6825      	ldr	r5, [r4, #0]
 80089ec:	f015 0506 	ands.w	r5, r5, #6
 80089f0:	d106      	bne.n	8008a00 <_printf_common+0x48>
 80089f2:	f104 0a19 	add.w	sl, r4, #25
 80089f6:	68e3      	ldr	r3, [r4, #12]
 80089f8:	6832      	ldr	r2, [r6, #0]
 80089fa:	1a9b      	subs	r3, r3, r2
 80089fc:	42ab      	cmp	r3, r5
 80089fe:	dc28      	bgt.n	8008a52 <_printf_common+0x9a>
 8008a00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a04:	1e13      	subs	r3, r2, #0
 8008a06:	6822      	ldr	r2, [r4, #0]
 8008a08:	bf18      	it	ne
 8008a0a:	2301      	movne	r3, #1
 8008a0c:	0692      	lsls	r2, r2, #26
 8008a0e:	d42d      	bmi.n	8008a6c <_printf_common+0xb4>
 8008a10:	4649      	mov	r1, r9
 8008a12:	4638      	mov	r0, r7
 8008a14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a18:	47c0      	blx	r8
 8008a1a:	3001      	adds	r0, #1
 8008a1c:	d020      	beq.n	8008a60 <_printf_common+0xa8>
 8008a1e:	6823      	ldr	r3, [r4, #0]
 8008a20:	68e5      	ldr	r5, [r4, #12]
 8008a22:	f003 0306 	and.w	r3, r3, #6
 8008a26:	2b04      	cmp	r3, #4
 8008a28:	bf18      	it	ne
 8008a2a:	2500      	movne	r5, #0
 8008a2c:	6832      	ldr	r2, [r6, #0]
 8008a2e:	f04f 0600 	mov.w	r6, #0
 8008a32:	68a3      	ldr	r3, [r4, #8]
 8008a34:	bf08      	it	eq
 8008a36:	1aad      	subeq	r5, r5, r2
 8008a38:	6922      	ldr	r2, [r4, #16]
 8008a3a:	bf08      	it	eq
 8008a3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a40:	4293      	cmp	r3, r2
 8008a42:	bfc4      	itt	gt
 8008a44:	1a9b      	subgt	r3, r3, r2
 8008a46:	18ed      	addgt	r5, r5, r3
 8008a48:	341a      	adds	r4, #26
 8008a4a:	42b5      	cmp	r5, r6
 8008a4c:	d11a      	bne.n	8008a84 <_printf_common+0xcc>
 8008a4e:	2000      	movs	r0, #0
 8008a50:	e008      	b.n	8008a64 <_printf_common+0xac>
 8008a52:	2301      	movs	r3, #1
 8008a54:	4652      	mov	r2, sl
 8008a56:	4649      	mov	r1, r9
 8008a58:	4638      	mov	r0, r7
 8008a5a:	47c0      	blx	r8
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	d103      	bne.n	8008a68 <_printf_common+0xb0>
 8008a60:	f04f 30ff 	mov.w	r0, #4294967295
 8008a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a68:	3501      	adds	r5, #1
 8008a6a:	e7c4      	b.n	80089f6 <_printf_common+0x3e>
 8008a6c:	2030      	movs	r0, #48	; 0x30
 8008a6e:	18e1      	adds	r1, r4, r3
 8008a70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a74:	1c5a      	adds	r2, r3, #1
 8008a76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a7a:	4422      	add	r2, r4
 8008a7c:	3302      	adds	r3, #2
 8008a7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a82:	e7c5      	b.n	8008a10 <_printf_common+0x58>
 8008a84:	2301      	movs	r3, #1
 8008a86:	4622      	mov	r2, r4
 8008a88:	4649      	mov	r1, r9
 8008a8a:	4638      	mov	r0, r7
 8008a8c:	47c0      	blx	r8
 8008a8e:	3001      	adds	r0, #1
 8008a90:	d0e6      	beq.n	8008a60 <_printf_common+0xa8>
 8008a92:	3601      	adds	r6, #1
 8008a94:	e7d9      	b.n	8008a4a <_printf_common+0x92>
	...

08008a98 <_printf_i>:
 8008a98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a9c:	7e0f      	ldrb	r7, [r1, #24]
 8008a9e:	4691      	mov	r9, r2
 8008aa0:	2f78      	cmp	r7, #120	; 0x78
 8008aa2:	4680      	mov	r8, r0
 8008aa4:	460c      	mov	r4, r1
 8008aa6:	469a      	mov	sl, r3
 8008aa8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008aaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008aae:	d807      	bhi.n	8008ac0 <_printf_i+0x28>
 8008ab0:	2f62      	cmp	r7, #98	; 0x62
 8008ab2:	d80a      	bhi.n	8008aca <_printf_i+0x32>
 8008ab4:	2f00      	cmp	r7, #0
 8008ab6:	f000 80d9 	beq.w	8008c6c <_printf_i+0x1d4>
 8008aba:	2f58      	cmp	r7, #88	; 0x58
 8008abc:	f000 80a4 	beq.w	8008c08 <_printf_i+0x170>
 8008ac0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ac4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ac8:	e03a      	b.n	8008b40 <_printf_i+0xa8>
 8008aca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ace:	2b15      	cmp	r3, #21
 8008ad0:	d8f6      	bhi.n	8008ac0 <_printf_i+0x28>
 8008ad2:	a101      	add	r1, pc, #4	; (adr r1, 8008ad8 <_printf_i+0x40>)
 8008ad4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ad8:	08008b31 	.word	0x08008b31
 8008adc:	08008b45 	.word	0x08008b45
 8008ae0:	08008ac1 	.word	0x08008ac1
 8008ae4:	08008ac1 	.word	0x08008ac1
 8008ae8:	08008ac1 	.word	0x08008ac1
 8008aec:	08008ac1 	.word	0x08008ac1
 8008af0:	08008b45 	.word	0x08008b45
 8008af4:	08008ac1 	.word	0x08008ac1
 8008af8:	08008ac1 	.word	0x08008ac1
 8008afc:	08008ac1 	.word	0x08008ac1
 8008b00:	08008ac1 	.word	0x08008ac1
 8008b04:	08008c53 	.word	0x08008c53
 8008b08:	08008b75 	.word	0x08008b75
 8008b0c:	08008c35 	.word	0x08008c35
 8008b10:	08008ac1 	.word	0x08008ac1
 8008b14:	08008ac1 	.word	0x08008ac1
 8008b18:	08008c75 	.word	0x08008c75
 8008b1c:	08008ac1 	.word	0x08008ac1
 8008b20:	08008b75 	.word	0x08008b75
 8008b24:	08008ac1 	.word	0x08008ac1
 8008b28:	08008ac1 	.word	0x08008ac1
 8008b2c:	08008c3d 	.word	0x08008c3d
 8008b30:	682b      	ldr	r3, [r5, #0]
 8008b32:	1d1a      	adds	r2, r3, #4
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	602a      	str	r2, [r5, #0]
 8008b38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b40:	2301      	movs	r3, #1
 8008b42:	e0a4      	b.n	8008c8e <_printf_i+0x1f6>
 8008b44:	6820      	ldr	r0, [r4, #0]
 8008b46:	6829      	ldr	r1, [r5, #0]
 8008b48:	0606      	lsls	r6, r0, #24
 8008b4a:	f101 0304 	add.w	r3, r1, #4
 8008b4e:	d50a      	bpl.n	8008b66 <_printf_i+0xce>
 8008b50:	680e      	ldr	r6, [r1, #0]
 8008b52:	602b      	str	r3, [r5, #0]
 8008b54:	2e00      	cmp	r6, #0
 8008b56:	da03      	bge.n	8008b60 <_printf_i+0xc8>
 8008b58:	232d      	movs	r3, #45	; 0x2d
 8008b5a:	4276      	negs	r6, r6
 8008b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b60:	230a      	movs	r3, #10
 8008b62:	485e      	ldr	r0, [pc, #376]	; (8008cdc <_printf_i+0x244>)
 8008b64:	e019      	b.n	8008b9a <_printf_i+0x102>
 8008b66:	680e      	ldr	r6, [r1, #0]
 8008b68:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b6c:	602b      	str	r3, [r5, #0]
 8008b6e:	bf18      	it	ne
 8008b70:	b236      	sxthne	r6, r6
 8008b72:	e7ef      	b.n	8008b54 <_printf_i+0xbc>
 8008b74:	682b      	ldr	r3, [r5, #0]
 8008b76:	6820      	ldr	r0, [r4, #0]
 8008b78:	1d19      	adds	r1, r3, #4
 8008b7a:	6029      	str	r1, [r5, #0]
 8008b7c:	0601      	lsls	r1, r0, #24
 8008b7e:	d501      	bpl.n	8008b84 <_printf_i+0xec>
 8008b80:	681e      	ldr	r6, [r3, #0]
 8008b82:	e002      	b.n	8008b8a <_printf_i+0xf2>
 8008b84:	0646      	lsls	r6, r0, #25
 8008b86:	d5fb      	bpl.n	8008b80 <_printf_i+0xe8>
 8008b88:	881e      	ldrh	r6, [r3, #0]
 8008b8a:	2f6f      	cmp	r7, #111	; 0x6f
 8008b8c:	bf0c      	ite	eq
 8008b8e:	2308      	moveq	r3, #8
 8008b90:	230a      	movne	r3, #10
 8008b92:	4852      	ldr	r0, [pc, #328]	; (8008cdc <_printf_i+0x244>)
 8008b94:	2100      	movs	r1, #0
 8008b96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b9a:	6865      	ldr	r5, [r4, #4]
 8008b9c:	2d00      	cmp	r5, #0
 8008b9e:	bfa8      	it	ge
 8008ba0:	6821      	ldrge	r1, [r4, #0]
 8008ba2:	60a5      	str	r5, [r4, #8]
 8008ba4:	bfa4      	itt	ge
 8008ba6:	f021 0104 	bicge.w	r1, r1, #4
 8008baa:	6021      	strge	r1, [r4, #0]
 8008bac:	b90e      	cbnz	r6, 8008bb2 <_printf_i+0x11a>
 8008bae:	2d00      	cmp	r5, #0
 8008bb0:	d04d      	beq.n	8008c4e <_printf_i+0x1b6>
 8008bb2:	4615      	mov	r5, r2
 8008bb4:	fbb6 f1f3 	udiv	r1, r6, r3
 8008bb8:	fb03 6711 	mls	r7, r3, r1, r6
 8008bbc:	5dc7      	ldrb	r7, [r0, r7]
 8008bbe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008bc2:	4637      	mov	r7, r6
 8008bc4:	42bb      	cmp	r3, r7
 8008bc6:	460e      	mov	r6, r1
 8008bc8:	d9f4      	bls.n	8008bb4 <_printf_i+0x11c>
 8008bca:	2b08      	cmp	r3, #8
 8008bcc:	d10b      	bne.n	8008be6 <_printf_i+0x14e>
 8008bce:	6823      	ldr	r3, [r4, #0]
 8008bd0:	07de      	lsls	r6, r3, #31
 8008bd2:	d508      	bpl.n	8008be6 <_printf_i+0x14e>
 8008bd4:	6923      	ldr	r3, [r4, #16]
 8008bd6:	6861      	ldr	r1, [r4, #4]
 8008bd8:	4299      	cmp	r1, r3
 8008bda:	bfde      	ittt	le
 8008bdc:	2330      	movle	r3, #48	; 0x30
 8008bde:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008be2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008be6:	1b52      	subs	r2, r2, r5
 8008be8:	6122      	str	r2, [r4, #16]
 8008bea:	464b      	mov	r3, r9
 8008bec:	4621      	mov	r1, r4
 8008bee:	4640      	mov	r0, r8
 8008bf0:	f8cd a000 	str.w	sl, [sp]
 8008bf4:	aa03      	add	r2, sp, #12
 8008bf6:	f7ff fedf 	bl	80089b8 <_printf_common>
 8008bfa:	3001      	adds	r0, #1
 8008bfc:	d14c      	bne.n	8008c98 <_printf_i+0x200>
 8008bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8008c02:	b004      	add	sp, #16
 8008c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c08:	4834      	ldr	r0, [pc, #208]	; (8008cdc <_printf_i+0x244>)
 8008c0a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008c0e:	6829      	ldr	r1, [r5, #0]
 8008c10:	6823      	ldr	r3, [r4, #0]
 8008c12:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c16:	6029      	str	r1, [r5, #0]
 8008c18:	061d      	lsls	r5, r3, #24
 8008c1a:	d514      	bpl.n	8008c46 <_printf_i+0x1ae>
 8008c1c:	07df      	lsls	r7, r3, #31
 8008c1e:	bf44      	itt	mi
 8008c20:	f043 0320 	orrmi.w	r3, r3, #32
 8008c24:	6023      	strmi	r3, [r4, #0]
 8008c26:	b91e      	cbnz	r6, 8008c30 <_printf_i+0x198>
 8008c28:	6823      	ldr	r3, [r4, #0]
 8008c2a:	f023 0320 	bic.w	r3, r3, #32
 8008c2e:	6023      	str	r3, [r4, #0]
 8008c30:	2310      	movs	r3, #16
 8008c32:	e7af      	b.n	8008b94 <_printf_i+0xfc>
 8008c34:	6823      	ldr	r3, [r4, #0]
 8008c36:	f043 0320 	orr.w	r3, r3, #32
 8008c3a:	6023      	str	r3, [r4, #0]
 8008c3c:	2378      	movs	r3, #120	; 0x78
 8008c3e:	4828      	ldr	r0, [pc, #160]	; (8008ce0 <_printf_i+0x248>)
 8008c40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c44:	e7e3      	b.n	8008c0e <_printf_i+0x176>
 8008c46:	0659      	lsls	r1, r3, #25
 8008c48:	bf48      	it	mi
 8008c4a:	b2b6      	uxthmi	r6, r6
 8008c4c:	e7e6      	b.n	8008c1c <_printf_i+0x184>
 8008c4e:	4615      	mov	r5, r2
 8008c50:	e7bb      	b.n	8008bca <_printf_i+0x132>
 8008c52:	682b      	ldr	r3, [r5, #0]
 8008c54:	6826      	ldr	r6, [r4, #0]
 8008c56:	1d18      	adds	r0, r3, #4
 8008c58:	6961      	ldr	r1, [r4, #20]
 8008c5a:	6028      	str	r0, [r5, #0]
 8008c5c:	0635      	lsls	r5, r6, #24
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	d501      	bpl.n	8008c66 <_printf_i+0x1ce>
 8008c62:	6019      	str	r1, [r3, #0]
 8008c64:	e002      	b.n	8008c6c <_printf_i+0x1d4>
 8008c66:	0670      	lsls	r0, r6, #25
 8008c68:	d5fb      	bpl.n	8008c62 <_printf_i+0x1ca>
 8008c6a:	8019      	strh	r1, [r3, #0]
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	4615      	mov	r5, r2
 8008c70:	6123      	str	r3, [r4, #16]
 8008c72:	e7ba      	b.n	8008bea <_printf_i+0x152>
 8008c74:	682b      	ldr	r3, [r5, #0]
 8008c76:	2100      	movs	r1, #0
 8008c78:	1d1a      	adds	r2, r3, #4
 8008c7a:	602a      	str	r2, [r5, #0]
 8008c7c:	681d      	ldr	r5, [r3, #0]
 8008c7e:	6862      	ldr	r2, [r4, #4]
 8008c80:	4628      	mov	r0, r5
 8008c82:	f000 f82f 	bl	8008ce4 <memchr>
 8008c86:	b108      	cbz	r0, 8008c8c <_printf_i+0x1f4>
 8008c88:	1b40      	subs	r0, r0, r5
 8008c8a:	6060      	str	r0, [r4, #4]
 8008c8c:	6863      	ldr	r3, [r4, #4]
 8008c8e:	6123      	str	r3, [r4, #16]
 8008c90:	2300      	movs	r3, #0
 8008c92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c96:	e7a8      	b.n	8008bea <_printf_i+0x152>
 8008c98:	462a      	mov	r2, r5
 8008c9a:	4649      	mov	r1, r9
 8008c9c:	4640      	mov	r0, r8
 8008c9e:	6923      	ldr	r3, [r4, #16]
 8008ca0:	47d0      	blx	sl
 8008ca2:	3001      	adds	r0, #1
 8008ca4:	d0ab      	beq.n	8008bfe <_printf_i+0x166>
 8008ca6:	6823      	ldr	r3, [r4, #0]
 8008ca8:	079b      	lsls	r3, r3, #30
 8008caa:	d413      	bmi.n	8008cd4 <_printf_i+0x23c>
 8008cac:	68e0      	ldr	r0, [r4, #12]
 8008cae:	9b03      	ldr	r3, [sp, #12]
 8008cb0:	4298      	cmp	r0, r3
 8008cb2:	bfb8      	it	lt
 8008cb4:	4618      	movlt	r0, r3
 8008cb6:	e7a4      	b.n	8008c02 <_printf_i+0x16a>
 8008cb8:	2301      	movs	r3, #1
 8008cba:	4632      	mov	r2, r6
 8008cbc:	4649      	mov	r1, r9
 8008cbe:	4640      	mov	r0, r8
 8008cc0:	47d0      	blx	sl
 8008cc2:	3001      	adds	r0, #1
 8008cc4:	d09b      	beq.n	8008bfe <_printf_i+0x166>
 8008cc6:	3501      	adds	r5, #1
 8008cc8:	68e3      	ldr	r3, [r4, #12]
 8008cca:	9903      	ldr	r1, [sp, #12]
 8008ccc:	1a5b      	subs	r3, r3, r1
 8008cce:	42ab      	cmp	r3, r5
 8008cd0:	dcf2      	bgt.n	8008cb8 <_printf_i+0x220>
 8008cd2:	e7eb      	b.n	8008cac <_printf_i+0x214>
 8008cd4:	2500      	movs	r5, #0
 8008cd6:	f104 0619 	add.w	r6, r4, #25
 8008cda:	e7f5      	b.n	8008cc8 <_printf_i+0x230>
 8008cdc:	08009063 	.word	0x08009063
 8008ce0:	08009074 	.word	0x08009074

08008ce4 <memchr>:
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	b510      	push	{r4, lr}
 8008ce8:	b2c9      	uxtb	r1, r1
 8008cea:	4402      	add	r2, r0
 8008cec:	4293      	cmp	r3, r2
 8008cee:	4618      	mov	r0, r3
 8008cf0:	d101      	bne.n	8008cf6 <memchr+0x12>
 8008cf2:	2000      	movs	r0, #0
 8008cf4:	e003      	b.n	8008cfe <memchr+0x1a>
 8008cf6:	7804      	ldrb	r4, [r0, #0]
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	428c      	cmp	r4, r1
 8008cfc:	d1f6      	bne.n	8008cec <memchr+0x8>
 8008cfe:	bd10      	pop	{r4, pc}

08008d00 <memcpy>:
 8008d00:	440a      	add	r2, r1
 8008d02:	4291      	cmp	r1, r2
 8008d04:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d08:	d100      	bne.n	8008d0c <memcpy+0xc>
 8008d0a:	4770      	bx	lr
 8008d0c:	b510      	push	{r4, lr}
 8008d0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d12:	4291      	cmp	r1, r2
 8008d14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d18:	d1f9      	bne.n	8008d0e <memcpy+0xe>
 8008d1a:	bd10      	pop	{r4, pc}

08008d1c <memmove>:
 8008d1c:	4288      	cmp	r0, r1
 8008d1e:	b510      	push	{r4, lr}
 8008d20:	eb01 0402 	add.w	r4, r1, r2
 8008d24:	d902      	bls.n	8008d2c <memmove+0x10>
 8008d26:	4284      	cmp	r4, r0
 8008d28:	4623      	mov	r3, r4
 8008d2a:	d807      	bhi.n	8008d3c <memmove+0x20>
 8008d2c:	1e43      	subs	r3, r0, #1
 8008d2e:	42a1      	cmp	r1, r4
 8008d30:	d008      	beq.n	8008d44 <memmove+0x28>
 8008d32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d3a:	e7f8      	b.n	8008d2e <memmove+0x12>
 8008d3c:	4601      	mov	r1, r0
 8008d3e:	4402      	add	r2, r0
 8008d40:	428a      	cmp	r2, r1
 8008d42:	d100      	bne.n	8008d46 <memmove+0x2a>
 8008d44:	bd10      	pop	{r4, pc}
 8008d46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d4e:	e7f7      	b.n	8008d40 <memmove+0x24>

08008d50 <_free_r>:
 8008d50:	b538      	push	{r3, r4, r5, lr}
 8008d52:	4605      	mov	r5, r0
 8008d54:	2900      	cmp	r1, #0
 8008d56:	d040      	beq.n	8008dda <_free_r+0x8a>
 8008d58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d5c:	1f0c      	subs	r4, r1, #4
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	bfb8      	it	lt
 8008d62:	18e4      	addlt	r4, r4, r3
 8008d64:	f000 f910 	bl	8008f88 <__malloc_lock>
 8008d68:	4a1c      	ldr	r2, [pc, #112]	; (8008ddc <_free_r+0x8c>)
 8008d6a:	6813      	ldr	r3, [r2, #0]
 8008d6c:	b933      	cbnz	r3, 8008d7c <_free_r+0x2c>
 8008d6e:	6063      	str	r3, [r4, #4]
 8008d70:	6014      	str	r4, [r2, #0]
 8008d72:	4628      	mov	r0, r5
 8008d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d78:	f000 b90c 	b.w	8008f94 <__malloc_unlock>
 8008d7c:	42a3      	cmp	r3, r4
 8008d7e:	d908      	bls.n	8008d92 <_free_r+0x42>
 8008d80:	6820      	ldr	r0, [r4, #0]
 8008d82:	1821      	adds	r1, r4, r0
 8008d84:	428b      	cmp	r3, r1
 8008d86:	bf01      	itttt	eq
 8008d88:	6819      	ldreq	r1, [r3, #0]
 8008d8a:	685b      	ldreq	r3, [r3, #4]
 8008d8c:	1809      	addeq	r1, r1, r0
 8008d8e:	6021      	streq	r1, [r4, #0]
 8008d90:	e7ed      	b.n	8008d6e <_free_r+0x1e>
 8008d92:	461a      	mov	r2, r3
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	b10b      	cbz	r3, 8008d9c <_free_r+0x4c>
 8008d98:	42a3      	cmp	r3, r4
 8008d9a:	d9fa      	bls.n	8008d92 <_free_r+0x42>
 8008d9c:	6811      	ldr	r1, [r2, #0]
 8008d9e:	1850      	adds	r0, r2, r1
 8008da0:	42a0      	cmp	r0, r4
 8008da2:	d10b      	bne.n	8008dbc <_free_r+0x6c>
 8008da4:	6820      	ldr	r0, [r4, #0]
 8008da6:	4401      	add	r1, r0
 8008da8:	1850      	adds	r0, r2, r1
 8008daa:	4283      	cmp	r3, r0
 8008dac:	6011      	str	r1, [r2, #0]
 8008dae:	d1e0      	bne.n	8008d72 <_free_r+0x22>
 8008db0:	6818      	ldr	r0, [r3, #0]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	4401      	add	r1, r0
 8008db6:	6011      	str	r1, [r2, #0]
 8008db8:	6053      	str	r3, [r2, #4]
 8008dba:	e7da      	b.n	8008d72 <_free_r+0x22>
 8008dbc:	d902      	bls.n	8008dc4 <_free_r+0x74>
 8008dbe:	230c      	movs	r3, #12
 8008dc0:	602b      	str	r3, [r5, #0]
 8008dc2:	e7d6      	b.n	8008d72 <_free_r+0x22>
 8008dc4:	6820      	ldr	r0, [r4, #0]
 8008dc6:	1821      	adds	r1, r4, r0
 8008dc8:	428b      	cmp	r3, r1
 8008dca:	bf01      	itttt	eq
 8008dcc:	6819      	ldreq	r1, [r3, #0]
 8008dce:	685b      	ldreq	r3, [r3, #4]
 8008dd0:	1809      	addeq	r1, r1, r0
 8008dd2:	6021      	streq	r1, [r4, #0]
 8008dd4:	6063      	str	r3, [r4, #4]
 8008dd6:	6054      	str	r4, [r2, #4]
 8008dd8:	e7cb      	b.n	8008d72 <_free_r+0x22>
 8008dda:	bd38      	pop	{r3, r4, r5, pc}
 8008ddc:	20001430 	.word	0x20001430

08008de0 <sbrk_aligned>:
 8008de0:	b570      	push	{r4, r5, r6, lr}
 8008de2:	4e0e      	ldr	r6, [pc, #56]	; (8008e1c <sbrk_aligned+0x3c>)
 8008de4:	460c      	mov	r4, r1
 8008de6:	6831      	ldr	r1, [r6, #0]
 8008de8:	4605      	mov	r5, r0
 8008dea:	b911      	cbnz	r1, 8008df2 <sbrk_aligned+0x12>
 8008dec:	f000 f8bc 	bl	8008f68 <_sbrk_r>
 8008df0:	6030      	str	r0, [r6, #0]
 8008df2:	4621      	mov	r1, r4
 8008df4:	4628      	mov	r0, r5
 8008df6:	f000 f8b7 	bl	8008f68 <_sbrk_r>
 8008dfa:	1c43      	adds	r3, r0, #1
 8008dfc:	d00a      	beq.n	8008e14 <sbrk_aligned+0x34>
 8008dfe:	1cc4      	adds	r4, r0, #3
 8008e00:	f024 0403 	bic.w	r4, r4, #3
 8008e04:	42a0      	cmp	r0, r4
 8008e06:	d007      	beq.n	8008e18 <sbrk_aligned+0x38>
 8008e08:	1a21      	subs	r1, r4, r0
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	f000 f8ac 	bl	8008f68 <_sbrk_r>
 8008e10:	3001      	adds	r0, #1
 8008e12:	d101      	bne.n	8008e18 <sbrk_aligned+0x38>
 8008e14:	f04f 34ff 	mov.w	r4, #4294967295
 8008e18:	4620      	mov	r0, r4
 8008e1a:	bd70      	pop	{r4, r5, r6, pc}
 8008e1c:	20001434 	.word	0x20001434

08008e20 <_malloc_r>:
 8008e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e24:	1ccd      	adds	r5, r1, #3
 8008e26:	f025 0503 	bic.w	r5, r5, #3
 8008e2a:	3508      	adds	r5, #8
 8008e2c:	2d0c      	cmp	r5, #12
 8008e2e:	bf38      	it	cc
 8008e30:	250c      	movcc	r5, #12
 8008e32:	2d00      	cmp	r5, #0
 8008e34:	4607      	mov	r7, r0
 8008e36:	db01      	blt.n	8008e3c <_malloc_r+0x1c>
 8008e38:	42a9      	cmp	r1, r5
 8008e3a:	d905      	bls.n	8008e48 <_malloc_r+0x28>
 8008e3c:	230c      	movs	r3, #12
 8008e3e:	2600      	movs	r6, #0
 8008e40:	603b      	str	r3, [r7, #0]
 8008e42:	4630      	mov	r0, r6
 8008e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e48:	4e2e      	ldr	r6, [pc, #184]	; (8008f04 <_malloc_r+0xe4>)
 8008e4a:	f000 f89d 	bl	8008f88 <__malloc_lock>
 8008e4e:	6833      	ldr	r3, [r6, #0]
 8008e50:	461c      	mov	r4, r3
 8008e52:	bb34      	cbnz	r4, 8008ea2 <_malloc_r+0x82>
 8008e54:	4629      	mov	r1, r5
 8008e56:	4638      	mov	r0, r7
 8008e58:	f7ff ffc2 	bl	8008de0 <sbrk_aligned>
 8008e5c:	1c43      	adds	r3, r0, #1
 8008e5e:	4604      	mov	r4, r0
 8008e60:	d14d      	bne.n	8008efe <_malloc_r+0xde>
 8008e62:	6834      	ldr	r4, [r6, #0]
 8008e64:	4626      	mov	r6, r4
 8008e66:	2e00      	cmp	r6, #0
 8008e68:	d140      	bne.n	8008eec <_malloc_r+0xcc>
 8008e6a:	6823      	ldr	r3, [r4, #0]
 8008e6c:	4631      	mov	r1, r6
 8008e6e:	4638      	mov	r0, r7
 8008e70:	eb04 0803 	add.w	r8, r4, r3
 8008e74:	f000 f878 	bl	8008f68 <_sbrk_r>
 8008e78:	4580      	cmp	r8, r0
 8008e7a:	d13a      	bne.n	8008ef2 <_malloc_r+0xd2>
 8008e7c:	6821      	ldr	r1, [r4, #0]
 8008e7e:	3503      	adds	r5, #3
 8008e80:	1a6d      	subs	r5, r5, r1
 8008e82:	f025 0503 	bic.w	r5, r5, #3
 8008e86:	3508      	adds	r5, #8
 8008e88:	2d0c      	cmp	r5, #12
 8008e8a:	bf38      	it	cc
 8008e8c:	250c      	movcc	r5, #12
 8008e8e:	4638      	mov	r0, r7
 8008e90:	4629      	mov	r1, r5
 8008e92:	f7ff ffa5 	bl	8008de0 <sbrk_aligned>
 8008e96:	3001      	adds	r0, #1
 8008e98:	d02b      	beq.n	8008ef2 <_malloc_r+0xd2>
 8008e9a:	6823      	ldr	r3, [r4, #0]
 8008e9c:	442b      	add	r3, r5
 8008e9e:	6023      	str	r3, [r4, #0]
 8008ea0:	e00e      	b.n	8008ec0 <_malloc_r+0xa0>
 8008ea2:	6822      	ldr	r2, [r4, #0]
 8008ea4:	1b52      	subs	r2, r2, r5
 8008ea6:	d41e      	bmi.n	8008ee6 <_malloc_r+0xc6>
 8008ea8:	2a0b      	cmp	r2, #11
 8008eaa:	d916      	bls.n	8008eda <_malloc_r+0xba>
 8008eac:	1961      	adds	r1, r4, r5
 8008eae:	42a3      	cmp	r3, r4
 8008eb0:	6025      	str	r5, [r4, #0]
 8008eb2:	bf18      	it	ne
 8008eb4:	6059      	strne	r1, [r3, #4]
 8008eb6:	6863      	ldr	r3, [r4, #4]
 8008eb8:	bf08      	it	eq
 8008eba:	6031      	streq	r1, [r6, #0]
 8008ebc:	5162      	str	r2, [r4, r5]
 8008ebe:	604b      	str	r3, [r1, #4]
 8008ec0:	4638      	mov	r0, r7
 8008ec2:	f104 060b 	add.w	r6, r4, #11
 8008ec6:	f000 f865 	bl	8008f94 <__malloc_unlock>
 8008eca:	f026 0607 	bic.w	r6, r6, #7
 8008ece:	1d23      	adds	r3, r4, #4
 8008ed0:	1af2      	subs	r2, r6, r3
 8008ed2:	d0b6      	beq.n	8008e42 <_malloc_r+0x22>
 8008ed4:	1b9b      	subs	r3, r3, r6
 8008ed6:	50a3      	str	r3, [r4, r2]
 8008ed8:	e7b3      	b.n	8008e42 <_malloc_r+0x22>
 8008eda:	6862      	ldr	r2, [r4, #4]
 8008edc:	42a3      	cmp	r3, r4
 8008ede:	bf0c      	ite	eq
 8008ee0:	6032      	streq	r2, [r6, #0]
 8008ee2:	605a      	strne	r2, [r3, #4]
 8008ee4:	e7ec      	b.n	8008ec0 <_malloc_r+0xa0>
 8008ee6:	4623      	mov	r3, r4
 8008ee8:	6864      	ldr	r4, [r4, #4]
 8008eea:	e7b2      	b.n	8008e52 <_malloc_r+0x32>
 8008eec:	4634      	mov	r4, r6
 8008eee:	6876      	ldr	r6, [r6, #4]
 8008ef0:	e7b9      	b.n	8008e66 <_malloc_r+0x46>
 8008ef2:	230c      	movs	r3, #12
 8008ef4:	4638      	mov	r0, r7
 8008ef6:	603b      	str	r3, [r7, #0]
 8008ef8:	f000 f84c 	bl	8008f94 <__malloc_unlock>
 8008efc:	e7a1      	b.n	8008e42 <_malloc_r+0x22>
 8008efe:	6025      	str	r5, [r4, #0]
 8008f00:	e7de      	b.n	8008ec0 <_malloc_r+0xa0>
 8008f02:	bf00      	nop
 8008f04:	20001430 	.word	0x20001430

08008f08 <_realloc_r>:
 8008f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f0c:	4680      	mov	r8, r0
 8008f0e:	4614      	mov	r4, r2
 8008f10:	460e      	mov	r6, r1
 8008f12:	b921      	cbnz	r1, 8008f1e <_realloc_r+0x16>
 8008f14:	4611      	mov	r1, r2
 8008f16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f1a:	f7ff bf81 	b.w	8008e20 <_malloc_r>
 8008f1e:	b92a      	cbnz	r2, 8008f2c <_realloc_r+0x24>
 8008f20:	f7ff ff16 	bl	8008d50 <_free_r>
 8008f24:	4625      	mov	r5, r4
 8008f26:	4628      	mov	r0, r5
 8008f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f2c:	f000 f838 	bl	8008fa0 <_malloc_usable_size_r>
 8008f30:	4284      	cmp	r4, r0
 8008f32:	4607      	mov	r7, r0
 8008f34:	d802      	bhi.n	8008f3c <_realloc_r+0x34>
 8008f36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f3a:	d812      	bhi.n	8008f62 <_realloc_r+0x5a>
 8008f3c:	4621      	mov	r1, r4
 8008f3e:	4640      	mov	r0, r8
 8008f40:	f7ff ff6e 	bl	8008e20 <_malloc_r>
 8008f44:	4605      	mov	r5, r0
 8008f46:	2800      	cmp	r0, #0
 8008f48:	d0ed      	beq.n	8008f26 <_realloc_r+0x1e>
 8008f4a:	42bc      	cmp	r4, r7
 8008f4c:	4622      	mov	r2, r4
 8008f4e:	4631      	mov	r1, r6
 8008f50:	bf28      	it	cs
 8008f52:	463a      	movcs	r2, r7
 8008f54:	f7ff fed4 	bl	8008d00 <memcpy>
 8008f58:	4631      	mov	r1, r6
 8008f5a:	4640      	mov	r0, r8
 8008f5c:	f7ff fef8 	bl	8008d50 <_free_r>
 8008f60:	e7e1      	b.n	8008f26 <_realloc_r+0x1e>
 8008f62:	4635      	mov	r5, r6
 8008f64:	e7df      	b.n	8008f26 <_realloc_r+0x1e>
	...

08008f68 <_sbrk_r>:
 8008f68:	b538      	push	{r3, r4, r5, lr}
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	4d05      	ldr	r5, [pc, #20]	; (8008f84 <_sbrk_r+0x1c>)
 8008f6e:	4604      	mov	r4, r0
 8008f70:	4608      	mov	r0, r1
 8008f72:	602b      	str	r3, [r5, #0]
 8008f74:	f7f7 faa4 	bl	80004c0 <_sbrk>
 8008f78:	1c43      	adds	r3, r0, #1
 8008f7a:	d102      	bne.n	8008f82 <_sbrk_r+0x1a>
 8008f7c:	682b      	ldr	r3, [r5, #0]
 8008f7e:	b103      	cbz	r3, 8008f82 <_sbrk_r+0x1a>
 8008f80:	6023      	str	r3, [r4, #0]
 8008f82:	bd38      	pop	{r3, r4, r5, pc}
 8008f84:	20001438 	.word	0x20001438

08008f88 <__malloc_lock>:
 8008f88:	4801      	ldr	r0, [pc, #4]	; (8008f90 <__malloc_lock+0x8>)
 8008f8a:	f000 b811 	b.w	8008fb0 <__retarget_lock_acquire_recursive>
 8008f8e:	bf00      	nop
 8008f90:	2000143c 	.word	0x2000143c

08008f94 <__malloc_unlock>:
 8008f94:	4801      	ldr	r0, [pc, #4]	; (8008f9c <__malloc_unlock+0x8>)
 8008f96:	f000 b80c 	b.w	8008fb2 <__retarget_lock_release_recursive>
 8008f9a:	bf00      	nop
 8008f9c:	2000143c 	.word	0x2000143c

08008fa0 <_malloc_usable_size_r>:
 8008fa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fa4:	1f18      	subs	r0, r3, #4
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	bfbc      	itt	lt
 8008faa:	580b      	ldrlt	r3, [r1, r0]
 8008fac:	18c0      	addlt	r0, r0, r3
 8008fae:	4770      	bx	lr

08008fb0 <__retarget_lock_acquire_recursive>:
 8008fb0:	4770      	bx	lr

08008fb2 <__retarget_lock_release_recursive>:
 8008fb2:	4770      	bx	lr

08008fb4 <_init>:
 8008fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb6:	bf00      	nop
 8008fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fba:	bc08      	pop	{r3}
 8008fbc:	469e      	mov	lr, r3
 8008fbe:	4770      	bx	lr

08008fc0 <_fini>:
 8008fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fc2:	bf00      	nop
 8008fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fc6:	bc08      	pop	{r3}
 8008fc8:	469e      	mov	lr, r3
 8008fca:	4770      	bx	lr
